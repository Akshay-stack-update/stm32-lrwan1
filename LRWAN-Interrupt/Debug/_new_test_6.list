
_new_test_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c1bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011f4  0801c27c  0801c27c  0002c27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d470  0801d470  00030158  2**0
                  CONTENTS
  4 .ARM          00000008  0801d470  0801d470  0002d470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d478  0801d478  00030158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d478  0801d478  0002d478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d47c  0801d47c  0002d47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  0801d480  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001544  20000158  0801d5d8  00030158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000169c  0801d5d8  0003169c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048a7b  00000000  00000000  00030180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008415  00000000  00000000  00078bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023c0  00000000  00000000  00081010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002058  00000000  00000000  000833d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000231a9  00000000  00000000  00085428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a335  00000000  00000000  000a85d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a8923  00000000  00000000  000d2906  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017b229  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008608  00000000  00000000  0017b2a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000158 	.word	0x20000158
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801c264 	.word	0x0801c264

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000015c 	.word	0x2000015c
 8000104:	0801c264 	.word	0x0801c264

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 fe25 	bl	8002054 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f001 fd7d 	bl	8001f14 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 fe17 	bl	8002054 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fe0d 	bl	8002054 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fd9f 	bl	8001f8c <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fd95 	bl	8001f8c <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	1c08      	adds	r0, r1, #0
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 fb3d 	bl	8000af8 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 fabf 	bl	8000a0c <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fb2f 	bl	8000af8 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fb25 	bl	8000af8 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 facd 	bl	8000a5c <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fac3 	bl	8000a5c <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_ldivmod>:
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d115      	bne.n	8000514 <__aeabi_ldivmod+0x30>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d113      	bne.n	8000514 <__aeabi_ldivmod+0x30>
 80004ec:	2900      	cmp	r1, #0
 80004ee:	db06      	blt.n	80004fe <__aeabi_ldivmod+0x1a>
 80004f0:	dc01      	bgt.n	80004f6 <__aeabi_ldivmod+0x12>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d006      	beq.n	8000504 <__aeabi_ldivmod+0x20>
 80004f6:	2000      	movs	r0, #0
 80004f8:	43c0      	mvns	r0, r0
 80004fa:	0841      	lsrs	r1, r0, #1
 80004fc:	e002      	b.n	8000504 <__aeabi_ldivmod+0x20>
 80004fe:	2180      	movs	r1, #128	; 0x80
 8000500:	0609      	lsls	r1, r1, #24
 8000502:	2000      	movs	r0, #0
 8000504:	b407      	push	{r0, r1, r2}
 8000506:	4802      	ldr	r0, [pc, #8]	; (8000510 <__aeabi_ldivmod+0x2c>)
 8000508:	a101      	add	r1, pc, #4	; (adr r1, 8000510 <__aeabi_ldivmod+0x2c>)
 800050a:	1840      	adds	r0, r0, r1
 800050c:	9002      	str	r0, [sp, #8]
 800050e:	bd03      	pop	{r0, r1, pc}
 8000510:	fffffee1 	.word	0xfffffee1
 8000514:	b403      	push	{r0, r1}
 8000516:	4668      	mov	r0, sp
 8000518:	b501      	push	{r0, lr}
 800051a:	9802      	ldr	r0, [sp, #8]
 800051c:	f000 f948 	bl	80007b0 <__gnu_ldivmod_helper>
 8000520:	9b01      	ldr	r3, [sp, #4]
 8000522:	469e      	mov	lr, r3
 8000524:	b002      	add	sp, #8
 8000526:	bc0c      	pop	{r2, r3}
 8000528:	4770      	bx	lr
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffea1 	.word	0xfffffea1
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ff82 	bl	80004d0 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fdd7 	bl	8001184 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fc0d 	bl	8000dfc <__aeabi_fsub>
 80005e2:	f000 fdcf 	bl	8001184 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff2f 	bl	800045c <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 fb47 	bl	8002c98 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fff8 	bl	8002608 <__aeabi_dsub>
 8000618:	f002 fb3e 	bl	8002c98 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fc37 	bl	8002ebc <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fc32 	bl	8002ebc <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__gnu_ldivmod_helper>:
 80007b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b2:	b083      	sub	sp, #12
 80007b4:	0016      	movs	r6, r2
 80007b6:	001f      	movs	r7, r3
 80007b8:	9000      	str	r0, [sp, #0]
 80007ba:	9101      	str	r1, [sp, #4]
 80007bc:	f002 fb8a 	bl	8002ed4 <__divdi3>
 80007c0:	0004      	movs	r4, r0
 80007c2:	000d      	movs	r5, r1
 80007c4:	0002      	movs	r2, r0
 80007c6:	000b      	movs	r3, r1
 80007c8:	0030      	movs	r0, r6
 80007ca:	0039      	movs	r1, r7
 80007cc:	f7ff fece 	bl	800056c <__aeabi_lmul>
 80007d0:	9a00      	ldr	r2, [sp, #0]
 80007d2:	9b01      	ldr	r3, [sp, #4]
 80007d4:	1a12      	subs	r2, r2, r0
 80007d6:	418b      	sbcs	r3, r1
 80007d8:	9908      	ldr	r1, [sp, #32]
 80007da:	0020      	movs	r0, r4
 80007dc:	600a      	str	r2, [r1, #0]
 80007de:	604b      	str	r3, [r1, #4]
 80007e0:	0029      	movs	r1, r5
 80007e2:	b003      	add	sp, #12
 80007e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)

080007e8 <__aeabi_fdiv>:
 80007e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ea:	4657      	mov	r7, sl
 80007ec:	464e      	mov	r6, r9
 80007ee:	4645      	mov	r5, r8
 80007f0:	46de      	mov	lr, fp
 80007f2:	0244      	lsls	r4, r0, #9
 80007f4:	b5e0      	push	{r5, r6, r7, lr}
 80007f6:	0046      	lsls	r6, r0, #1
 80007f8:	4688      	mov	r8, r1
 80007fa:	0a64      	lsrs	r4, r4, #9
 80007fc:	0e36      	lsrs	r6, r6, #24
 80007fe:	0fc7      	lsrs	r7, r0, #31
 8000800:	2e00      	cmp	r6, #0
 8000802:	d063      	beq.n	80008cc <__aeabi_fdiv+0xe4>
 8000804:	2eff      	cmp	r6, #255	; 0xff
 8000806:	d024      	beq.n	8000852 <__aeabi_fdiv+0x6a>
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	00e4      	lsls	r4, r4, #3
 800080c:	04db      	lsls	r3, r3, #19
 800080e:	431c      	orrs	r4, r3
 8000810:	2300      	movs	r3, #0
 8000812:	4699      	mov	r9, r3
 8000814:	469b      	mov	fp, r3
 8000816:	3e7f      	subs	r6, #127	; 0x7f
 8000818:	4643      	mov	r3, r8
 800081a:	4642      	mov	r2, r8
 800081c:	025d      	lsls	r5, r3, #9
 800081e:	0fd2      	lsrs	r2, r2, #31
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	0a6d      	lsrs	r5, r5, #9
 8000824:	0e1b      	lsrs	r3, r3, #24
 8000826:	4690      	mov	r8, r2
 8000828:	4692      	mov	sl, r2
 800082a:	d065      	beq.n	80008f8 <__aeabi_fdiv+0x110>
 800082c:	2bff      	cmp	r3, #255	; 0xff
 800082e:	d055      	beq.n	80008dc <__aeabi_fdiv+0xf4>
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	2100      	movs	r1, #0
 8000834:	00ed      	lsls	r5, r5, #3
 8000836:	04d2      	lsls	r2, r2, #19
 8000838:	3b7f      	subs	r3, #127	; 0x7f
 800083a:	4315      	orrs	r5, r2
 800083c:	1af6      	subs	r6, r6, r3
 800083e:	4643      	mov	r3, r8
 8000840:	464a      	mov	r2, r9
 8000842:	407b      	eors	r3, r7
 8000844:	2a0f      	cmp	r2, #15
 8000846:	d900      	bls.n	800084a <__aeabi_fdiv+0x62>
 8000848:	e08d      	b.n	8000966 <__aeabi_fdiv+0x17e>
 800084a:	486d      	ldr	r0, [pc, #436]	; (8000a00 <__aeabi_fdiv+0x218>)
 800084c:	0092      	lsls	r2, r2, #2
 800084e:	5882      	ldr	r2, [r0, r2]
 8000850:	4697      	mov	pc, r2
 8000852:	2c00      	cmp	r4, #0
 8000854:	d154      	bne.n	8000900 <__aeabi_fdiv+0x118>
 8000856:	2308      	movs	r3, #8
 8000858:	4699      	mov	r9, r3
 800085a:	3b06      	subs	r3, #6
 800085c:	26ff      	movs	r6, #255	; 0xff
 800085e:	469b      	mov	fp, r3
 8000860:	e7da      	b.n	8000818 <__aeabi_fdiv+0x30>
 8000862:	2500      	movs	r5, #0
 8000864:	4653      	mov	r3, sl
 8000866:	2902      	cmp	r1, #2
 8000868:	d01b      	beq.n	80008a2 <__aeabi_fdiv+0xba>
 800086a:	2903      	cmp	r1, #3
 800086c:	d100      	bne.n	8000870 <__aeabi_fdiv+0x88>
 800086e:	e0bf      	b.n	80009f0 <__aeabi_fdiv+0x208>
 8000870:	2901      	cmp	r1, #1
 8000872:	d028      	beq.n	80008c6 <__aeabi_fdiv+0xde>
 8000874:	0030      	movs	r0, r6
 8000876:	307f      	adds	r0, #127	; 0x7f
 8000878:	2800      	cmp	r0, #0
 800087a:	dd20      	ble.n	80008be <__aeabi_fdiv+0xd6>
 800087c:	076a      	lsls	r2, r5, #29
 800087e:	d004      	beq.n	800088a <__aeabi_fdiv+0xa2>
 8000880:	220f      	movs	r2, #15
 8000882:	402a      	ands	r2, r5
 8000884:	2a04      	cmp	r2, #4
 8000886:	d000      	beq.n	800088a <__aeabi_fdiv+0xa2>
 8000888:	3504      	adds	r5, #4
 800088a:	012a      	lsls	r2, r5, #4
 800088c:	d503      	bpl.n	8000896 <__aeabi_fdiv+0xae>
 800088e:	0030      	movs	r0, r6
 8000890:	4a5c      	ldr	r2, [pc, #368]	; (8000a04 <__aeabi_fdiv+0x21c>)
 8000892:	3080      	adds	r0, #128	; 0x80
 8000894:	4015      	ands	r5, r2
 8000896:	28fe      	cmp	r0, #254	; 0xfe
 8000898:	dc03      	bgt.n	80008a2 <__aeabi_fdiv+0xba>
 800089a:	01ac      	lsls	r4, r5, #6
 800089c:	0a64      	lsrs	r4, r4, #9
 800089e:	b2c2      	uxtb	r2, r0
 80008a0:	e001      	b.n	80008a6 <__aeabi_fdiv+0xbe>
 80008a2:	22ff      	movs	r2, #255	; 0xff
 80008a4:	2400      	movs	r4, #0
 80008a6:	0264      	lsls	r4, r4, #9
 80008a8:	05d2      	lsls	r2, r2, #23
 80008aa:	0a60      	lsrs	r0, r4, #9
 80008ac:	07db      	lsls	r3, r3, #31
 80008ae:	4310      	orrs	r0, r2
 80008b0:	4318      	orrs	r0, r3
 80008b2:	bc3c      	pop	{r2, r3, r4, r5}
 80008b4:	4690      	mov	r8, r2
 80008b6:	4699      	mov	r9, r3
 80008b8:	46a2      	mov	sl, r4
 80008ba:	46ab      	mov	fp, r5
 80008bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008be:	2201      	movs	r2, #1
 80008c0:	1a10      	subs	r0, r2, r0
 80008c2:	281b      	cmp	r0, #27
 80008c4:	dd7c      	ble.n	80009c0 <__aeabi_fdiv+0x1d8>
 80008c6:	2200      	movs	r2, #0
 80008c8:	2400      	movs	r4, #0
 80008ca:	e7ec      	b.n	80008a6 <__aeabi_fdiv+0xbe>
 80008cc:	2c00      	cmp	r4, #0
 80008ce:	d11d      	bne.n	800090c <__aeabi_fdiv+0x124>
 80008d0:	2304      	movs	r3, #4
 80008d2:	4699      	mov	r9, r3
 80008d4:	3b03      	subs	r3, #3
 80008d6:	2600      	movs	r6, #0
 80008d8:	469b      	mov	fp, r3
 80008da:	e79d      	b.n	8000818 <__aeabi_fdiv+0x30>
 80008dc:	3eff      	subs	r6, #255	; 0xff
 80008de:	2d00      	cmp	r5, #0
 80008e0:	d120      	bne.n	8000924 <__aeabi_fdiv+0x13c>
 80008e2:	2102      	movs	r1, #2
 80008e4:	4643      	mov	r3, r8
 80008e6:	464a      	mov	r2, r9
 80008e8:	407b      	eors	r3, r7
 80008ea:	430a      	orrs	r2, r1
 80008ec:	2a0f      	cmp	r2, #15
 80008ee:	d8d8      	bhi.n	80008a2 <__aeabi_fdiv+0xba>
 80008f0:	4845      	ldr	r0, [pc, #276]	; (8000a08 <__aeabi_fdiv+0x220>)
 80008f2:	0092      	lsls	r2, r2, #2
 80008f4:	5882      	ldr	r2, [r0, r2]
 80008f6:	4697      	mov	pc, r2
 80008f8:	2d00      	cmp	r5, #0
 80008fa:	d119      	bne.n	8000930 <__aeabi_fdiv+0x148>
 80008fc:	2101      	movs	r1, #1
 80008fe:	e7f1      	b.n	80008e4 <__aeabi_fdiv+0xfc>
 8000900:	230c      	movs	r3, #12
 8000902:	4699      	mov	r9, r3
 8000904:	3b09      	subs	r3, #9
 8000906:	26ff      	movs	r6, #255	; 0xff
 8000908:	469b      	mov	fp, r3
 800090a:	e785      	b.n	8000818 <__aeabi_fdiv+0x30>
 800090c:	0020      	movs	r0, r4
 800090e:	f002 fab7 	bl	8002e80 <__clzsi2>
 8000912:	2676      	movs	r6, #118	; 0x76
 8000914:	1f43      	subs	r3, r0, #5
 8000916:	409c      	lsls	r4, r3
 8000918:	2300      	movs	r3, #0
 800091a:	4276      	negs	r6, r6
 800091c:	1a36      	subs	r6, r6, r0
 800091e:	4699      	mov	r9, r3
 8000920:	469b      	mov	fp, r3
 8000922:	e779      	b.n	8000818 <__aeabi_fdiv+0x30>
 8000924:	464a      	mov	r2, r9
 8000926:	2303      	movs	r3, #3
 8000928:	431a      	orrs	r2, r3
 800092a:	4691      	mov	r9, r2
 800092c:	2103      	movs	r1, #3
 800092e:	e786      	b.n	800083e <__aeabi_fdiv+0x56>
 8000930:	0028      	movs	r0, r5
 8000932:	f002 faa5 	bl	8002e80 <__clzsi2>
 8000936:	1f43      	subs	r3, r0, #5
 8000938:	1836      	adds	r6, r6, r0
 800093a:	409d      	lsls	r5, r3
 800093c:	3676      	adds	r6, #118	; 0x76
 800093e:	2100      	movs	r1, #0
 8000940:	e77d      	b.n	800083e <__aeabi_fdiv+0x56>
 8000942:	2480      	movs	r4, #128	; 0x80
 8000944:	2300      	movs	r3, #0
 8000946:	03e4      	lsls	r4, r4, #15
 8000948:	22ff      	movs	r2, #255	; 0xff
 800094a:	e7ac      	b.n	80008a6 <__aeabi_fdiv+0xbe>
 800094c:	2500      	movs	r5, #0
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	03db      	lsls	r3, r3, #15
 8000952:	421c      	tst	r4, r3
 8000954:	d028      	beq.n	80009a8 <__aeabi_fdiv+0x1c0>
 8000956:	421d      	tst	r5, r3
 8000958:	d126      	bne.n	80009a8 <__aeabi_fdiv+0x1c0>
 800095a:	432b      	orrs	r3, r5
 800095c:	025c      	lsls	r4, r3, #9
 800095e:	0a64      	lsrs	r4, r4, #9
 8000960:	4643      	mov	r3, r8
 8000962:	22ff      	movs	r2, #255	; 0xff
 8000964:	e79f      	b.n	80008a6 <__aeabi_fdiv+0xbe>
 8000966:	0162      	lsls	r2, r4, #5
 8000968:	016c      	lsls	r4, r5, #5
 800096a:	42a2      	cmp	r2, r4
 800096c:	d224      	bcs.n	80009b8 <__aeabi_fdiv+0x1d0>
 800096e:	211b      	movs	r1, #27
 8000970:	2500      	movs	r5, #0
 8000972:	3e01      	subs	r6, #1
 8000974:	2701      	movs	r7, #1
 8000976:	0010      	movs	r0, r2
 8000978:	006d      	lsls	r5, r5, #1
 800097a:	0052      	lsls	r2, r2, #1
 800097c:	2800      	cmp	r0, #0
 800097e:	db01      	blt.n	8000984 <__aeabi_fdiv+0x19c>
 8000980:	4294      	cmp	r4, r2
 8000982:	d801      	bhi.n	8000988 <__aeabi_fdiv+0x1a0>
 8000984:	1b12      	subs	r2, r2, r4
 8000986:	433d      	orrs	r5, r7
 8000988:	3901      	subs	r1, #1
 800098a:	2900      	cmp	r1, #0
 800098c:	d1f3      	bne.n	8000976 <__aeabi_fdiv+0x18e>
 800098e:	0014      	movs	r4, r2
 8000990:	1e62      	subs	r2, r4, #1
 8000992:	4194      	sbcs	r4, r2
 8000994:	4325      	orrs	r5, r4
 8000996:	e76d      	b.n	8000874 <__aeabi_fdiv+0x8c>
 8000998:	46ba      	mov	sl, r7
 800099a:	4659      	mov	r1, fp
 800099c:	0025      	movs	r5, r4
 800099e:	4653      	mov	r3, sl
 80009a0:	2902      	cmp	r1, #2
 80009a2:	d000      	beq.n	80009a6 <__aeabi_fdiv+0x1be>
 80009a4:	e761      	b.n	800086a <__aeabi_fdiv+0x82>
 80009a6:	e77c      	b.n	80008a2 <__aeabi_fdiv+0xba>
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	03db      	lsls	r3, r3, #15
 80009ac:	431c      	orrs	r4, r3
 80009ae:	0264      	lsls	r4, r4, #9
 80009b0:	0a64      	lsrs	r4, r4, #9
 80009b2:	003b      	movs	r3, r7
 80009b4:	22ff      	movs	r2, #255	; 0xff
 80009b6:	e776      	b.n	80008a6 <__aeabi_fdiv+0xbe>
 80009b8:	1b12      	subs	r2, r2, r4
 80009ba:	211a      	movs	r1, #26
 80009bc:	2501      	movs	r5, #1
 80009be:	e7d9      	b.n	8000974 <__aeabi_fdiv+0x18c>
 80009c0:	369e      	adds	r6, #158	; 0x9e
 80009c2:	002a      	movs	r2, r5
 80009c4:	40b5      	lsls	r5, r6
 80009c6:	002c      	movs	r4, r5
 80009c8:	40c2      	lsrs	r2, r0
 80009ca:	1e65      	subs	r5, r4, #1
 80009cc:	41ac      	sbcs	r4, r5
 80009ce:	4314      	orrs	r4, r2
 80009d0:	0762      	lsls	r2, r4, #29
 80009d2:	d004      	beq.n	80009de <__aeabi_fdiv+0x1f6>
 80009d4:	220f      	movs	r2, #15
 80009d6:	4022      	ands	r2, r4
 80009d8:	2a04      	cmp	r2, #4
 80009da:	d000      	beq.n	80009de <__aeabi_fdiv+0x1f6>
 80009dc:	3404      	adds	r4, #4
 80009de:	0162      	lsls	r2, r4, #5
 80009e0:	d403      	bmi.n	80009ea <__aeabi_fdiv+0x202>
 80009e2:	01a4      	lsls	r4, r4, #6
 80009e4:	0a64      	lsrs	r4, r4, #9
 80009e6:	2200      	movs	r2, #0
 80009e8:	e75d      	b.n	80008a6 <__aeabi_fdiv+0xbe>
 80009ea:	2201      	movs	r2, #1
 80009ec:	2400      	movs	r4, #0
 80009ee:	e75a      	b.n	80008a6 <__aeabi_fdiv+0xbe>
 80009f0:	2480      	movs	r4, #128	; 0x80
 80009f2:	03e4      	lsls	r4, r4, #15
 80009f4:	432c      	orrs	r4, r5
 80009f6:	0264      	lsls	r4, r4, #9
 80009f8:	0a64      	lsrs	r4, r4, #9
 80009fa:	22ff      	movs	r2, #255	; 0xff
 80009fc:	e753      	b.n	80008a6 <__aeabi_fdiv+0xbe>
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	0801c984 	.word	0x0801c984
 8000a04:	f7ffffff 	.word	0xf7ffffff
 8000a08:	0801c9c4 	.word	0x0801c9c4

08000a0c <__eqsf2>:
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	0042      	lsls	r2, r0, #1
 8000a10:	024e      	lsls	r6, r1, #9
 8000a12:	004c      	lsls	r4, r1, #1
 8000a14:	0245      	lsls	r5, r0, #9
 8000a16:	0a6d      	lsrs	r5, r5, #9
 8000a18:	0e12      	lsrs	r2, r2, #24
 8000a1a:	0fc3      	lsrs	r3, r0, #31
 8000a1c:	0a76      	lsrs	r6, r6, #9
 8000a1e:	0e24      	lsrs	r4, r4, #24
 8000a20:	0fc9      	lsrs	r1, r1, #31
 8000a22:	2aff      	cmp	r2, #255	; 0xff
 8000a24:	d00f      	beq.n	8000a46 <__eqsf2+0x3a>
 8000a26:	2cff      	cmp	r4, #255	; 0xff
 8000a28:	d011      	beq.n	8000a4e <__eqsf2+0x42>
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	42a2      	cmp	r2, r4
 8000a2e:	d000      	beq.n	8000a32 <__eqsf2+0x26>
 8000a30:	bd70      	pop	{r4, r5, r6, pc}
 8000a32:	42b5      	cmp	r5, r6
 8000a34:	d1fc      	bne.n	8000a30 <__eqsf2+0x24>
 8000a36:	428b      	cmp	r3, r1
 8000a38:	d00d      	beq.n	8000a56 <__eqsf2+0x4a>
 8000a3a:	2a00      	cmp	r2, #0
 8000a3c:	d1f8      	bne.n	8000a30 <__eqsf2+0x24>
 8000a3e:	0028      	movs	r0, r5
 8000a40:	1e45      	subs	r5, r0, #1
 8000a42:	41a8      	sbcs	r0, r5
 8000a44:	e7f4      	b.n	8000a30 <__eqsf2+0x24>
 8000a46:	2001      	movs	r0, #1
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d1f1      	bne.n	8000a30 <__eqsf2+0x24>
 8000a4c:	e7eb      	b.n	8000a26 <__eqsf2+0x1a>
 8000a4e:	2001      	movs	r0, #1
 8000a50:	2e00      	cmp	r6, #0
 8000a52:	d1ed      	bne.n	8000a30 <__eqsf2+0x24>
 8000a54:	e7e9      	b.n	8000a2a <__eqsf2+0x1e>
 8000a56:	2000      	movs	r0, #0
 8000a58:	e7ea      	b.n	8000a30 <__eqsf2+0x24>
 8000a5a:	46c0      	nop			; (mov r8, r8)

08000a5c <__gesf2>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	004a      	lsls	r2, r1, #1
 8000a60:	024e      	lsls	r6, r1, #9
 8000a62:	0245      	lsls	r5, r0, #9
 8000a64:	0044      	lsls	r4, r0, #1
 8000a66:	0a6d      	lsrs	r5, r5, #9
 8000a68:	0e24      	lsrs	r4, r4, #24
 8000a6a:	0fc3      	lsrs	r3, r0, #31
 8000a6c:	0a76      	lsrs	r6, r6, #9
 8000a6e:	0e12      	lsrs	r2, r2, #24
 8000a70:	0fc9      	lsrs	r1, r1, #31
 8000a72:	2cff      	cmp	r4, #255	; 0xff
 8000a74:	d015      	beq.n	8000aa2 <__gesf2+0x46>
 8000a76:	2aff      	cmp	r2, #255	; 0xff
 8000a78:	d00e      	beq.n	8000a98 <__gesf2+0x3c>
 8000a7a:	2c00      	cmp	r4, #0
 8000a7c:	d115      	bne.n	8000aaa <__gesf2+0x4e>
 8000a7e:	2a00      	cmp	r2, #0
 8000a80:	d101      	bne.n	8000a86 <__gesf2+0x2a>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d01c      	beq.n	8000ac0 <__gesf2+0x64>
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	d014      	beq.n	8000ab4 <__gesf2+0x58>
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d027      	beq.n	8000ade <__gesf2+0x82>
 8000a8e:	2002      	movs	r0, #2
 8000a90:	3b01      	subs	r3, #1
 8000a92:	4018      	ands	r0, r3
 8000a94:	3801      	subs	r0, #1
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	2e00      	cmp	r6, #0
 8000a9a:	d0ee      	beq.n	8000a7a <__gesf2+0x1e>
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	4240      	negs	r0, r0
 8000aa0:	e7f9      	b.n	8000a96 <__gesf2+0x3a>
 8000aa2:	2d00      	cmp	r5, #0
 8000aa4:	d1fa      	bne.n	8000a9c <__gesf2+0x40>
 8000aa6:	2aff      	cmp	r2, #255	; 0xff
 8000aa8:	d00e      	beq.n	8000ac8 <__gesf2+0x6c>
 8000aaa:	2a00      	cmp	r2, #0
 8000aac:	d10e      	bne.n	8000acc <__gesf2+0x70>
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d0ed      	beq.n	8000a8e <__gesf2+0x32>
 8000ab2:	e00b      	b.n	8000acc <__gesf2+0x70>
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	3901      	subs	r1, #1
 8000ab8:	4399      	bics	r1, r3
 8000aba:	0008      	movs	r0, r1
 8000abc:	3001      	adds	r0, #1
 8000abe:	e7ea      	b.n	8000a96 <__gesf2+0x3a>
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e7      	beq.n	8000a96 <__gesf2+0x3a>
 8000ac6:	e7e2      	b.n	8000a8e <__gesf2+0x32>
 8000ac8:	2e00      	cmp	r6, #0
 8000aca:	d1e7      	bne.n	8000a9c <__gesf2+0x40>
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d1de      	bne.n	8000a8e <__gesf2+0x32>
 8000ad0:	4294      	cmp	r4, r2
 8000ad2:	dd05      	ble.n	8000ae0 <__gesf2+0x84>
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	1e58      	subs	r0, r3, #1
 8000ad8:	4008      	ands	r0, r1
 8000ada:	3801      	subs	r0, #1
 8000adc:	e7db      	b.n	8000a96 <__gesf2+0x3a>
 8000ade:	2400      	movs	r4, #0
 8000ae0:	42a2      	cmp	r2, r4
 8000ae2:	dc04      	bgt.n	8000aee <__gesf2+0x92>
 8000ae4:	42b5      	cmp	r5, r6
 8000ae6:	d8d2      	bhi.n	8000a8e <__gesf2+0x32>
 8000ae8:	2000      	movs	r0, #0
 8000aea:	42b5      	cmp	r5, r6
 8000aec:	d2d3      	bcs.n	8000a96 <__gesf2+0x3a>
 8000aee:	1e58      	subs	r0, r3, #1
 8000af0:	2301      	movs	r3, #1
 8000af2:	4398      	bics	r0, r3
 8000af4:	3001      	adds	r0, #1
 8000af6:	e7ce      	b.n	8000a96 <__gesf2+0x3a>

08000af8 <__lesf2>:
 8000af8:	b530      	push	{r4, r5, lr}
 8000afa:	0042      	lsls	r2, r0, #1
 8000afc:	0244      	lsls	r4, r0, #9
 8000afe:	024d      	lsls	r5, r1, #9
 8000b00:	0fc3      	lsrs	r3, r0, #31
 8000b02:	0048      	lsls	r0, r1, #1
 8000b04:	0a64      	lsrs	r4, r4, #9
 8000b06:	0e12      	lsrs	r2, r2, #24
 8000b08:	0a6d      	lsrs	r5, r5, #9
 8000b0a:	0e00      	lsrs	r0, r0, #24
 8000b0c:	0fc9      	lsrs	r1, r1, #31
 8000b0e:	2aff      	cmp	r2, #255	; 0xff
 8000b10:	d012      	beq.n	8000b38 <__lesf2+0x40>
 8000b12:	28ff      	cmp	r0, #255	; 0xff
 8000b14:	d00c      	beq.n	8000b30 <__lesf2+0x38>
 8000b16:	2a00      	cmp	r2, #0
 8000b18:	d112      	bne.n	8000b40 <__lesf2+0x48>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	d119      	bne.n	8000b52 <__lesf2+0x5a>
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d117      	bne.n	8000b52 <__lesf2+0x5a>
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d02b      	beq.n	8000b7e <__lesf2+0x86>
 8000b26:	2002      	movs	r0, #2
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	4018      	ands	r0, r3
 8000b2c:	3801      	subs	r0, #1
 8000b2e:	e026      	b.n	8000b7e <__lesf2+0x86>
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d0f0      	beq.n	8000b16 <__lesf2+0x1e>
 8000b34:	2002      	movs	r0, #2
 8000b36:	e022      	b.n	8000b7e <__lesf2+0x86>
 8000b38:	2c00      	cmp	r4, #0
 8000b3a:	d1fb      	bne.n	8000b34 <__lesf2+0x3c>
 8000b3c:	28ff      	cmp	r0, #255	; 0xff
 8000b3e:	d01f      	beq.n	8000b80 <__lesf2+0x88>
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d11f      	bne.n	8000b84 <__lesf2+0x8c>
 8000b44:	2d00      	cmp	r5, #0
 8000b46:	d11d      	bne.n	8000b84 <__lesf2+0x8c>
 8000b48:	2002      	movs	r0, #2
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	4018      	ands	r0, r3
 8000b4e:	3801      	subs	r0, #1
 8000b50:	e015      	b.n	8000b7e <__lesf2+0x86>
 8000b52:	2c00      	cmp	r4, #0
 8000b54:	d00e      	beq.n	8000b74 <__lesf2+0x7c>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d1e5      	bne.n	8000b26 <__lesf2+0x2e>
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4290      	cmp	r0, r2
 8000b5e:	dc04      	bgt.n	8000b6a <__lesf2+0x72>
 8000b60:	42ac      	cmp	r4, r5
 8000b62:	d8e0      	bhi.n	8000b26 <__lesf2+0x2e>
 8000b64:	2000      	movs	r0, #0
 8000b66:	42ac      	cmp	r4, r5
 8000b68:	d209      	bcs.n	8000b7e <__lesf2+0x86>
 8000b6a:	1e58      	subs	r0, r3, #1
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	4398      	bics	r0, r3
 8000b70:	3001      	adds	r0, #1
 8000b72:	e004      	b.n	8000b7e <__lesf2+0x86>
 8000b74:	2301      	movs	r3, #1
 8000b76:	3901      	subs	r1, #1
 8000b78:	4399      	bics	r1, r3
 8000b7a:	0008      	movs	r0, r1
 8000b7c:	3001      	adds	r0, #1
 8000b7e:	bd30      	pop	{r4, r5, pc}
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d1d7      	bne.n	8000b34 <__lesf2+0x3c>
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d1ce      	bne.n	8000b26 <__lesf2+0x2e>
 8000b88:	4282      	cmp	r2, r0
 8000b8a:	dde7      	ble.n	8000b5c <__lesf2+0x64>
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	1e58      	subs	r0, r3, #1
 8000b90:	4008      	ands	r0, r1
 8000b92:	3801      	subs	r0, #1
 8000b94:	e7f3      	b.n	8000b7e <__lesf2+0x86>
 8000b96:	46c0      	nop			; (mov r8, r8)

08000b98 <__aeabi_fmul>:
 8000b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9a:	464e      	mov	r6, r9
 8000b9c:	4657      	mov	r7, sl
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	46de      	mov	lr, fp
 8000ba2:	b5e0      	push	{r5, r6, r7, lr}
 8000ba4:	0243      	lsls	r3, r0, #9
 8000ba6:	0a5b      	lsrs	r3, r3, #9
 8000ba8:	0045      	lsls	r5, r0, #1
 8000baa:	b083      	sub	sp, #12
 8000bac:	1c0f      	adds	r7, r1, #0
 8000bae:	4699      	mov	r9, r3
 8000bb0:	0e2d      	lsrs	r5, r5, #24
 8000bb2:	0fc6      	lsrs	r6, r0, #31
 8000bb4:	2d00      	cmp	r5, #0
 8000bb6:	d057      	beq.n	8000c68 <__aeabi_fmul+0xd0>
 8000bb8:	2dff      	cmp	r5, #255	; 0xff
 8000bba:	d024      	beq.n	8000c06 <__aeabi_fmul+0x6e>
 8000bbc:	2080      	movs	r0, #128	; 0x80
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	04c0      	lsls	r0, r0, #19
 8000bc2:	4318      	orrs	r0, r3
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	4681      	mov	r9, r0
 8000bc8:	469a      	mov	sl, r3
 8000bca:	469b      	mov	fp, r3
 8000bcc:	3d7f      	subs	r5, #127	; 0x7f
 8000bce:	027c      	lsls	r4, r7, #9
 8000bd0:	007a      	lsls	r2, r7, #1
 8000bd2:	0ffb      	lsrs	r3, r7, #31
 8000bd4:	0a64      	lsrs	r4, r4, #9
 8000bd6:	0e12      	lsrs	r2, r2, #24
 8000bd8:	4698      	mov	r8, r3
 8000bda:	d023      	beq.n	8000c24 <__aeabi_fmul+0x8c>
 8000bdc:	2aff      	cmp	r2, #255	; 0xff
 8000bde:	d04b      	beq.n	8000c78 <__aeabi_fmul+0xe0>
 8000be0:	00e3      	lsls	r3, r4, #3
 8000be2:	2480      	movs	r4, #128	; 0x80
 8000be4:	2000      	movs	r0, #0
 8000be6:	04e4      	lsls	r4, r4, #19
 8000be8:	3a7f      	subs	r2, #127	; 0x7f
 8000bea:	431c      	orrs	r4, r3
 8000bec:	18ad      	adds	r5, r5, r2
 8000bee:	1c6b      	adds	r3, r5, #1
 8000bf0:	4647      	mov	r7, r8
 8000bf2:	9301      	str	r3, [sp, #4]
 8000bf4:	4653      	mov	r3, sl
 8000bf6:	4077      	eors	r7, r6
 8000bf8:	003a      	movs	r2, r7
 8000bfa:	2b0f      	cmp	r3, #15
 8000bfc:	d848      	bhi.n	8000c90 <__aeabi_fmul+0xf8>
 8000bfe:	497d      	ldr	r1, [pc, #500]	; (8000df4 <__aeabi_fmul+0x25c>)
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	58cb      	ldr	r3, [r1, r3]
 8000c04:	469f      	mov	pc, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d000      	beq.n	8000c0c <__aeabi_fmul+0x74>
 8000c0a:	e085      	b.n	8000d18 <__aeabi_fmul+0x180>
 8000c0c:	3308      	adds	r3, #8
 8000c0e:	469a      	mov	sl, r3
 8000c10:	3b06      	subs	r3, #6
 8000c12:	469b      	mov	fp, r3
 8000c14:	027c      	lsls	r4, r7, #9
 8000c16:	007a      	lsls	r2, r7, #1
 8000c18:	0ffb      	lsrs	r3, r7, #31
 8000c1a:	25ff      	movs	r5, #255	; 0xff
 8000c1c:	0a64      	lsrs	r4, r4, #9
 8000c1e:	0e12      	lsrs	r2, r2, #24
 8000c20:	4698      	mov	r8, r3
 8000c22:	d1db      	bne.n	8000bdc <__aeabi_fmul+0x44>
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	d000      	beq.n	8000c2a <__aeabi_fmul+0x92>
 8000c28:	e090      	b.n	8000d4c <__aeabi_fmul+0x1b4>
 8000c2a:	4652      	mov	r2, sl
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	4692      	mov	sl, r2
 8000c32:	2001      	movs	r0, #1
 8000c34:	e7db      	b.n	8000bee <__aeabi_fmul+0x56>
 8000c36:	464c      	mov	r4, r9
 8000c38:	4658      	mov	r0, fp
 8000c3a:	0017      	movs	r7, r2
 8000c3c:	2802      	cmp	r0, #2
 8000c3e:	d024      	beq.n	8000c8a <__aeabi_fmul+0xf2>
 8000c40:	2803      	cmp	r0, #3
 8000c42:	d100      	bne.n	8000c46 <__aeabi_fmul+0xae>
 8000c44:	e0cf      	b.n	8000de6 <__aeabi_fmul+0x24e>
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	2801      	cmp	r0, #1
 8000c4c:	d14d      	bne.n	8000cea <__aeabi_fmul+0x152>
 8000c4e:	0258      	lsls	r0, r3, #9
 8000c50:	05d2      	lsls	r2, r2, #23
 8000c52:	0a40      	lsrs	r0, r0, #9
 8000c54:	07ff      	lsls	r7, r7, #31
 8000c56:	4310      	orrs	r0, r2
 8000c58:	4338      	orrs	r0, r7
 8000c5a:	b003      	add	sp, #12
 8000c5c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c5e:	4690      	mov	r8, r2
 8000c60:	4699      	mov	r9, r3
 8000c62:	46a2      	mov	sl, r4
 8000c64:	46ab      	mov	fp, r5
 8000c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d15b      	bne.n	8000d24 <__aeabi_fmul+0x18c>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	469a      	mov	sl, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2500      	movs	r5, #0
 8000c74:	469b      	mov	fp, r3
 8000c76:	e7aa      	b.n	8000bce <__aeabi_fmul+0x36>
 8000c78:	35ff      	adds	r5, #255	; 0xff
 8000c7a:	2c00      	cmp	r4, #0
 8000c7c:	d160      	bne.n	8000d40 <__aeabi_fmul+0x1a8>
 8000c7e:	4652      	mov	r2, sl
 8000c80:	2302      	movs	r3, #2
 8000c82:	431a      	orrs	r2, r3
 8000c84:	4692      	mov	sl, r2
 8000c86:	2002      	movs	r0, #2
 8000c88:	e7b1      	b.n	8000bee <__aeabi_fmul+0x56>
 8000c8a:	22ff      	movs	r2, #255	; 0xff
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	e7de      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000c90:	464b      	mov	r3, r9
 8000c92:	0c1b      	lsrs	r3, r3, #16
 8000c94:	469c      	mov	ip, r3
 8000c96:	464b      	mov	r3, r9
 8000c98:	0426      	lsls	r6, r4, #16
 8000c9a:	0c36      	lsrs	r6, r6, #16
 8000c9c:	0418      	lsls	r0, r3, #16
 8000c9e:	4661      	mov	r1, ip
 8000ca0:	0033      	movs	r3, r6
 8000ca2:	0c22      	lsrs	r2, r4, #16
 8000ca4:	4664      	mov	r4, ip
 8000ca6:	0c00      	lsrs	r0, r0, #16
 8000ca8:	4343      	muls	r3, r0
 8000caa:	434e      	muls	r6, r1
 8000cac:	4350      	muls	r0, r2
 8000cae:	4354      	muls	r4, r2
 8000cb0:	1980      	adds	r0, r0, r6
 8000cb2:	0c1a      	lsrs	r2, r3, #16
 8000cb4:	1812      	adds	r2, r2, r0
 8000cb6:	4296      	cmp	r6, r2
 8000cb8:	d903      	bls.n	8000cc2 <__aeabi_fmul+0x12a>
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	0249      	lsls	r1, r1, #9
 8000cbe:	468c      	mov	ip, r1
 8000cc0:	4464      	add	r4, ip
 8000cc2:	041b      	lsls	r3, r3, #16
 8000cc4:	0c1b      	lsrs	r3, r3, #16
 8000cc6:	0410      	lsls	r0, r2, #16
 8000cc8:	18c0      	adds	r0, r0, r3
 8000cca:	0183      	lsls	r3, r0, #6
 8000ccc:	1e5e      	subs	r6, r3, #1
 8000cce:	41b3      	sbcs	r3, r6
 8000cd0:	0e80      	lsrs	r0, r0, #26
 8000cd2:	4318      	orrs	r0, r3
 8000cd4:	0c13      	lsrs	r3, r2, #16
 8000cd6:	191b      	adds	r3, r3, r4
 8000cd8:	019b      	lsls	r3, r3, #6
 8000cda:	4303      	orrs	r3, r0
 8000cdc:	001c      	movs	r4, r3
 8000cde:	0123      	lsls	r3, r4, #4
 8000ce0:	d579      	bpl.n	8000dd6 <__aeabi_fmul+0x23e>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	0862      	lsrs	r2, r4, #1
 8000ce6:	401c      	ands	r4, r3
 8000ce8:	4314      	orrs	r4, r2
 8000cea:	9a01      	ldr	r2, [sp, #4]
 8000cec:	327f      	adds	r2, #127	; 0x7f
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	dd4d      	ble.n	8000d8e <__aeabi_fmul+0x1f6>
 8000cf2:	0763      	lsls	r3, r4, #29
 8000cf4:	d004      	beq.n	8000d00 <__aeabi_fmul+0x168>
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	4023      	ands	r3, r4
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_fmul+0x168>
 8000cfe:	3404      	adds	r4, #4
 8000d00:	0123      	lsls	r3, r4, #4
 8000d02:	d503      	bpl.n	8000d0c <__aeabi_fmul+0x174>
 8000d04:	4b3c      	ldr	r3, [pc, #240]	; (8000df8 <__aeabi_fmul+0x260>)
 8000d06:	9a01      	ldr	r2, [sp, #4]
 8000d08:	401c      	ands	r4, r3
 8000d0a:	3280      	adds	r2, #128	; 0x80
 8000d0c:	2afe      	cmp	r2, #254	; 0xfe
 8000d0e:	dcbc      	bgt.n	8000c8a <__aeabi_fmul+0xf2>
 8000d10:	01a3      	lsls	r3, r4, #6
 8000d12:	0a5b      	lsrs	r3, r3, #9
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	e79a      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000d18:	230c      	movs	r3, #12
 8000d1a:	469a      	mov	sl, r3
 8000d1c:	3b09      	subs	r3, #9
 8000d1e:	25ff      	movs	r5, #255	; 0xff
 8000d20:	469b      	mov	fp, r3
 8000d22:	e754      	b.n	8000bce <__aeabi_fmul+0x36>
 8000d24:	0018      	movs	r0, r3
 8000d26:	f002 f8ab 	bl	8002e80 <__clzsi2>
 8000d2a:	464a      	mov	r2, r9
 8000d2c:	1f43      	subs	r3, r0, #5
 8000d2e:	2576      	movs	r5, #118	; 0x76
 8000d30:	409a      	lsls	r2, r3
 8000d32:	2300      	movs	r3, #0
 8000d34:	426d      	negs	r5, r5
 8000d36:	4691      	mov	r9, r2
 8000d38:	1a2d      	subs	r5, r5, r0
 8000d3a:	469a      	mov	sl, r3
 8000d3c:	469b      	mov	fp, r3
 8000d3e:	e746      	b.n	8000bce <__aeabi_fmul+0x36>
 8000d40:	4652      	mov	r2, sl
 8000d42:	2303      	movs	r3, #3
 8000d44:	431a      	orrs	r2, r3
 8000d46:	4692      	mov	sl, r2
 8000d48:	2003      	movs	r0, #3
 8000d4a:	e750      	b.n	8000bee <__aeabi_fmul+0x56>
 8000d4c:	0020      	movs	r0, r4
 8000d4e:	f002 f897 	bl	8002e80 <__clzsi2>
 8000d52:	1f43      	subs	r3, r0, #5
 8000d54:	1a2d      	subs	r5, r5, r0
 8000d56:	409c      	lsls	r4, r3
 8000d58:	3d76      	subs	r5, #118	; 0x76
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	e747      	b.n	8000bee <__aeabi_fmul+0x56>
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	2700      	movs	r7, #0
 8000d62:	03db      	lsls	r3, r3, #15
 8000d64:	22ff      	movs	r2, #255	; 0xff
 8000d66:	e772      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000d68:	4642      	mov	r2, r8
 8000d6a:	e766      	b.n	8000c3a <__aeabi_fmul+0xa2>
 8000d6c:	464c      	mov	r4, r9
 8000d6e:	0032      	movs	r2, r6
 8000d70:	4658      	mov	r0, fp
 8000d72:	e762      	b.n	8000c3a <__aeabi_fmul+0xa2>
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	464a      	mov	r2, r9
 8000d78:	03db      	lsls	r3, r3, #15
 8000d7a:	421a      	tst	r2, r3
 8000d7c:	d022      	beq.n	8000dc4 <__aeabi_fmul+0x22c>
 8000d7e:	421c      	tst	r4, r3
 8000d80:	d120      	bne.n	8000dc4 <__aeabi_fmul+0x22c>
 8000d82:	4323      	orrs	r3, r4
 8000d84:	025b      	lsls	r3, r3, #9
 8000d86:	0a5b      	lsrs	r3, r3, #9
 8000d88:	4647      	mov	r7, r8
 8000d8a:	22ff      	movs	r2, #255	; 0xff
 8000d8c:	e75f      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	1a9a      	subs	r2, r3, r2
 8000d92:	2a1b      	cmp	r2, #27
 8000d94:	dc21      	bgt.n	8000dda <__aeabi_fmul+0x242>
 8000d96:	0023      	movs	r3, r4
 8000d98:	9901      	ldr	r1, [sp, #4]
 8000d9a:	40d3      	lsrs	r3, r2
 8000d9c:	319e      	adds	r1, #158	; 0x9e
 8000d9e:	408c      	lsls	r4, r1
 8000da0:	001a      	movs	r2, r3
 8000da2:	0023      	movs	r3, r4
 8000da4:	1e5c      	subs	r4, r3, #1
 8000da6:	41a3      	sbcs	r3, r4
 8000da8:	4313      	orrs	r3, r2
 8000daa:	075a      	lsls	r2, r3, #29
 8000dac:	d004      	beq.n	8000db8 <__aeabi_fmul+0x220>
 8000dae:	220f      	movs	r2, #15
 8000db0:	401a      	ands	r2, r3
 8000db2:	2a04      	cmp	r2, #4
 8000db4:	d000      	beq.n	8000db8 <__aeabi_fmul+0x220>
 8000db6:	3304      	adds	r3, #4
 8000db8:	015a      	lsls	r2, r3, #5
 8000dba:	d411      	bmi.n	8000de0 <__aeabi_fmul+0x248>
 8000dbc:	019b      	lsls	r3, r3, #6
 8000dbe:	0a5b      	lsrs	r3, r3, #9
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e744      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	464a      	mov	r2, r9
 8000dc8:	03db      	lsls	r3, r3, #15
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	025b      	lsls	r3, r3, #9
 8000dce:	0a5b      	lsrs	r3, r3, #9
 8000dd0:	0037      	movs	r7, r6
 8000dd2:	22ff      	movs	r2, #255	; 0xff
 8000dd4:	e73b      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000dd6:	9501      	str	r5, [sp, #4]
 8000dd8:	e787      	b.n	8000cea <__aeabi_fmul+0x152>
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e736      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000de0:	2201      	movs	r2, #1
 8000de2:	2300      	movs	r3, #0
 8000de4:	e733      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	03db      	lsls	r3, r3, #15
 8000dea:	4323      	orrs	r3, r4
 8000dec:	025b      	lsls	r3, r3, #9
 8000dee:	0a5b      	lsrs	r3, r3, #9
 8000df0:	22ff      	movs	r2, #255	; 0xff
 8000df2:	e72c      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000df4:	0801ca04 	.word	0x0801ca04
 8000df8:	f7ffffff 	.word	0xf7ffffff

08000dfc <__aeabi_fsub>:
 8000dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dfe:	4647      	mov	r7, r8
 8000e00:	46ce      	mov	lr, r9
 8000e02:	0044      	lsls	r4, r0, #1
 8000e04:	0fc2      	lsrs	r2, r0, #31
 8000e06:	b580      	push	{r7, lr}
 8000e08:	0247      	lsls	r7, r0, #9
 8000e0a:	0248      	lsls	r0, r1, #9
 8000e0c:	0a40      	lsrs	r0, r0, #9
 8000e0e:	4684      	mov	ip, r0
 8000e10:	4666      	mov	r6, ip
 8000e12:	0048      	lsls	r0, r1, #1
 8000e14:	0a7f      	lsrs	r7, r7, #9
 8000e16:	0e24      	lsrs	r4, r4, #24
 8000e18:	00f6      	lsls	r6, r6, #3
 8000e1a:	0025      	movs	r5, r4
 8000e1c:	4690      	mov	r8, r2
 8000e1e:	00fb      	lsls	r3, r7, #3
 8000e20:	0e00      	lsrs	r0, r0, #24
 8000e22:	0fc9      	lsrs	r1, r1, #31
 8000e24:	46b1      	mov	r9, r6
 8000e26:	28ff      	cmp	r0, #255	; 0xff
 8000e28:	d100      	bne.n	8000e2c <__aeabi_fsub+0x30>
 8000e2a:	e085      	b.n	8000f38 <__aeabi_fsub+0x13c>
 8000e2c:	2601      	movs	r6, #1
 8000e2e:	4071      	eors	r1, r6
 8000e30:	1a26      	subs	r6, r4, r0
 8000e32:	4291      	cmp	r1, r2
 8000e34:	d057      	beq.n	8000ee6 <__aeabi_fsub+0xea>
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	dd43      	ble.n	8000ec2 <__aeabi_fsub+0xc6>
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	d000      	beq.n	8000e40 <__aeabi_fsub+0x44>
 8000e3e:	e07f      	b.n	8000f40 <__aeabi_fsub+0x144>
 8000e40:	4649      	mov	r1, r9
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d100      	bne.n	8000e48 <__aeabi_fsub+0x4c>
 8000e46:	e0aa      	b.n	8000f9e <__aeabi_fsub+0x1a2>
 8000e48:	3e01      	subs	r6, #1
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_fsub+0x54>
 8000e4e:	e0f7      	b.n	8001040 <__aeabi_fsub+0x244>
 8000e50:	1a5b      	subs	r3, r3, r1
 8000e52:	015a      	lsls	r2, r3, #5
 8000e54:	d400      	bmi.n	8000e58 <__aeabi_fsub+0x5c>
 8000e56:	e08b      	b.n	8000f70 <__aeabi_fsub+0x174>
 8000e58:	019b      	lsls	r3, r3, #6
 8000e5a:	099c      	lsrs	r4, r3, #6
 8000e5c:	0020      	movs	r0, r4
 8000e5e:	f002 f80f 	bl	8002e80 <__clzsi2>
 8000e62:	3805      	subs	r0, #5
 8000e64:	4084      	lsls	r4, r0
 8000e66:	4285      	cmp	r5, r0
 8000e68:	dd00      	ble.n	8000e6c <__aeabi_fsub+0x70>
 8000e6a:	e0d3      	b.n	8001014 <__aeabi_fsub+0x218>
 8000e6c:	1b45      	subs	r5, r0, r5
 8000e6e:	0023      	movs	r3, r4
 8000e70:	2020      	movs	r0, #32
 8000e72:	3501      	adds	r5, #1
 8000e74:	40eb      	lsrs	r3, r5
 8000e76:	1b45      	subs	r5, r0, r5
 8000e78:	40ac      	lsls	r4, r5
 8000e7a:	1e62      	subs	r2, r4, #1
 8000e7c:	4194      	sbcs	r4, r2
 8000e7e:	4323      	orrs	r3, r4
 8000e80:	2407      	movs	r4, #7
 8000e82:	2500      	movs	r5, #0
 8000e84:	401c      	ands	r4, r3
 8000e86:	2201      	movs	r2, #1
 8000e88:	4641      	mov	r1, r8
 8000e8a:	400a      	ands	r2, r1
 8000e8c:	2c00      	cmp	r4, #0
 8000e8e:	d004      	beq.n	8000e9a <__aeabi_fsub+0x9e>
 8000e90:	210f      	movs	r1, #15
 8000e92:	4019      	ands	r1, r3
 8000e94:	2904      	cmp	r1, #4
 8000e96:	d000      	beq.n	8000e9a <__aeabi_fsub+0x9e>
 8000e98:	3304      	adds	r3, #4
 8000e9a:	0159      	lsls	r1, r3, #5
 8000e9c:	d400      	bmi.n	8000ea0 <__aeabi_fsub+0xa4>
 8000e9e:	e080      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8000ea0:	3501      	adds	r5, #1
 8000ea2:	b2ec      	uxtb	r4, r5
 8000ea4:	2dff      	cmp	r5, #255	; 0xff
 8000ea6:	d000      	beq.n	8000eaa <__aeabi_fsub+0xae>
 8000ea8:	e0a3      	b.n	8000ff2 <__aeabi_fsub+0x1f6>
 8000eaa:	24ff      	movs	r4, #255	; 0xff
 8000eac:	2300      	movs	r3, #0
 8000eae:	025b      	lsls	r3, r3, #9
 8000eb0:	05e4      	lsls	r4, r4, #23
 8000eb2:	0a58      	lsrs	r0, r3, #9
 8000eb4:	07d2      	lsls	r2, r2, #31
 8000eb6:	4320      	orrs	r0, r4
 8000eb8:	4310      	orrs	r0, r2
 8000eba:	bc0c      	pop	{r2, r3}
 8000ebc:	4690      	mov	r8, r2
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ec2:	2e00      	cmp	r6, #0
 8000ec4:	d174      	bne.n	8000fb0 <__aeabi_fsub+0x1b4>
 8000ec6:	1c60      	adds	r0, r4, #1
 8000ec8:	b2c0      	uxtb	r0, r0
 8000eca:	2801      	cmp	r0, #1
 8000ecc:	dc00      	bgt.n	8000ed0 <__aeabi_fsub+0xd4>
 8000ece:	e0a7      	b.n	8001020 <__aeabi_fsub+0x224>
 8000ed0:	464a      	mov	r2, r9
 8000ed2:	1a9c      	subs	r4, r3, r2
 8000ed4:	0162      	lsls	r2, r4, #5
 8000ed6:	d500      	bpl.n	8000eda <__aeabi_fsub+0xde>
 8000ed8:	e0b6      	b.n	8001048 <__aeabi_fsub+0x24c>
 8000eda:	2c00      	cmp	r4, #0
 8000edc:	d1be      	bne.n	8000e5c <__aeabi_fsub+0x60>
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2400      	movs	r4, #0
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e7e3      	b.n	8000eae <__aeabi_fsub+0xb2>
 8000ee6:	2e00      	cmp	r6, #0
 8000ee8:	dc00      	bgt.n	8000eec <__aeabi_fsub+0xf0>
 8000eea:	e085      	b.n	8000ff8 <__aeabi_fsub+0x1fc>
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d046      	beq.n	8000f7e <__aeabi_fsub+0x182>
 8000ef0:	2cff      	cmp	r4, #255	; 0xff
 8000ef2:	d049      	beq.n	8000f88 <__aeabi_fsub+0x18c>
 8000ef4:	2280      	movs	r2, #128	; 0x80
 8000ef6:	4648      	mov	r0, r9
 8000ef8:	04d2      	lsls	r2, r2, #19
 8000efa:	4310      	orrs	r0, r2
 8000efc:	4681      	mov	r9, r0
 8000efe:	2201      	movs	r2, #1
 8000f00:	2e1b      	cmp	r6, #27
 8000f02:	dc09      	bgt.n	8000f18 <__aeabi_fsub+0x11c>
 8000f04:	2020      	movs	r0, #32
 8000f06:	464c      	mov	r4, r9
 8000f08:	1b80      	subs	r0, r0, r6
 8000f0a:	4084      	lsls	r4, r0
 8000f0c:	464a      	mov	r2, r9
 8000f0e:	0020      	movs	r0, r4
 8000f10:	40f2      	lsrs	r2, r6
 8000f12:	1e44      	subs	r4, r0, #1
 8000f14:	41a0      	sbcs	r0, r4
 8000f16:	4302      	orrs	r2, r0
 8000f18:	189b      	adds	r3, r3, r2
 8000f1a:	015a      	lsls	r2, r3, #5
 8000f1c:	d528      	bpl.n	8000f70 <__aeabi_fsub+0x174>
 8000f1e:	3501      	adds	r5, #1
 8000f20:	2dff      	cmp	r5, #255	; 0xff
 8000f22:	d100      	bne.n	8000f26 <__aeabi_fsub+0x12a>
 8000f24:	e0a8      	b.n	8001078 <__aeabi_fsub+0x27c>
 8000f26:	2201      	movs	r2, #1
 8000f28:	2407      	movs	r4, #7
 8000f2a:	4994      	ldr	r1, [pc, #592]	; (800117c <__aeabi_fsub+0x380>)
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	085b      	lsrs	r3, r3, #1
 8000f30:	400b      	ands	r3, r1
 8000f32:	4313      	orrs	r3, r2
 8000f34:	401c      	ands	r4, r3
 8000f36:	e7a6      	b.n	8000e86 <__aeabi_fsub+0x8a>
 8000f38:	2e00      	cmp	r6, #0
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_fsub+0x142>
 8000f3c:	e778      	b.n	8000e30 <__aeabi_fsub+0x34>
 8000f3e:	e775      	b.n	8000e2c <__aeabi_fsub+0x30>
 8000f40:	2cff      	cmp	r4, #255	; 0xff
 8000f42:	d054      	beq.n	8000fee <__aeabi_fsub+0x1f2>
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	4649      	mov	r1, r9
 8000f48:	04d2      	lsls	r2, r2, #19
 8000f4a:	4311      	orrs	r1, r2
 8000f4c:	4689      	mov	r9, r1
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2e1b      	cmp	r6, #27
 8000f52:	dc09      	bgt.n	8000f68 <__aeabi_fsub+0x16c>
 8000f54:	2120      	movs	r1, #32
 8000f56:	4648      	mov	r0, r9
 8000f58:	1b89      	subs	r1, r1, r6
 8000f5a:	4088      	lsls	r0, r1
 8000f5c:	464a      	mov	r2, r9
 8000f5e:	0001      	movs	r1, r0
 8000f60:	40f2      	lsrs	r2, r6
 8000f62:	1e48      	subs	r0, r1, #1
 8000f64:	4181      	sbcs	r1, r0
 8000f66:	430a      	orrs	r2, r1
 8000f68:	1a9b      	subs	r3, r3, r2
 8000f6a:	015a      	lsls	r2, r3, #5
 8000f6c:	d500      	bpl.n	8000f70 <__aeabi_fsub+0x174>
 8000f6e:	e773      	b.n	8000e58 <__aeabi_fsub+0x5c>
 8000f70:	2201      	movs	r2, #1
 8000f72:	4641      	mov	r1, r8
 8000f74:	400a      	ands	r2, r1
 8000f76:	0759      	lsls	r1, r3, #29
 8000f78:	d000      	beq.n	8000f7c <__aeabi_fsub+0x180>
 8000f7a:	e789      	b.n	8000e90 <__aeabi_fsub+0x94>
 8000f7c:	e011      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8000f7e:	4648      	mov	r0, r9
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d158      	bne.n	8001036 <__aeabi_fsub+0x23a>
 8000f84:	2cff      	cmp	r4, #255	; 0xff
 8000f86:	d10c      	bne.n	8000fa2 <__aeabi_fsub+0x1a6>
 8000f88:	08db      	lsrs	r3, r3, #3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_fsub+0x194>
 8000f8e:	e78c      	b.n	8000eaa <__aeabi_fsub+0xae>
 8000f90:	2080      	movs	r0, #128	; 0x80
 8000f92:	03c0      	lsls	r0, r0, #15
 8000f94:	4303      	orrs	r3, r0
 8000f96:	025b      	lsls	r3, r3, #9
 8000f98:	0a5b      	lsrs	r3, r3, #9
 8000f9a:	24ff      	movs	r4, #255	; 0xff
 8000f9c:	e787      	b.n	8000eae <__aeabi_fsub+0xb2>
 8000f9e:	2cff      	cmp	r4, #255	; 0xff
 8000fa0:	d025      	beq.n	8000fee <__aeabi_fsub+0x1f2>
 8000fa2:	08db      	lsrs	r3, r3, #3
 8000fa4:	2dff      	cmp	r5, #255	; 0xff
 8000fa6:	d0f0      	beq.n	8000f8a <__aeabi_fsub+0x18e>
 8000fa8:	025b      	lsls	r3, r3, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	b2ec      	uxtb	r4, r5
 8000fae:	e77e      	b.n	8000eae <__aeabi_fsub+0xb2>
 8000fb0:	2c00      	cmp	r4, #0
 8000fb2:	d04d      	beq.n	8001050 <__aeabi_fsub+0x254>
 8000fb4:	28ff      	cmp	r0, #255	; 0xff
 8000fb6:	d018      	beq.n	8000fea <__aeabi_fsub+0x1ee>
 8000fb8:	2480      	movs	r4, #128	; 0x80
 8000fba:	04e4      	lsls	r4, r4, #19
 8000fbc:	4272      	negs	r2, r6
 8000fbe:	4323      	orrs	r3, r4
 8000fc0:	2a1b      	cmp	r2, #27
 8000fc2:	dd00      	ble.n	8000fc6 <__aeabi_fsub+0x1ca>
 8000fc4:	e0c4      	b.n	8001150 <__aeabi_fsub+0x354>
 8000fc6:	001c      	movs	r4, r3
 8000fc8:	2520      	movs	r5, #32
 8000fca:	40d4      	lsrs	r4, r2
 8000fcc:	1aaa      	subs	r2, r5, r2
 8000fce:	4093      	lsls	r3, r2
 8000fd0:	1e5a      	subs	r2, r3, #1
 8000fd2:	4193      	sbcs	r3, r2
 8000fd4:	4323      	orrs	r3, r4
 8000fd6:	464a      	mov	r2, r9
 8000fd8:	0005      	movs	r5, r0
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	4688      	mov	r8, r1
 8000fde:	e738      	b.n	8000e52 <__aeabi_fsub+0x56>
 8000fe0:	1c72      	adds	r2, r6, #1
 8000fe2:	d0f8      	beq.n	8000fd6 <__aeabi_fsub+0x1da>
 8000fe4:	43f2      	mvns	r2, r6
 8000fe6:	28ff      	cmp	r0, #255	; 0xff
 8000fe8:	d1ea      	bne.n	8000fc0 <__aeabi_fsub+0x1c4>
 8000fea:	000a      	movs	r2, r1
 8000fec:	464b      	mov	r3, r9
 8000fee:	25ff      	movs	r5, #255	; 0xff
 8000ff0:	e7d7      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8000ff2:	019b      	lsls	r3, r3, #6
 8000ff4:	0a5b      	lsrs	r3, r3, #9
 8000ff6:	e75a      	b.n	8000eae <__aeabi_fsub+0xb2>
 8000ff8:	2e00      	cmp	r6, #0
 8000ffa:	d141      	bne.n	8001080 <__aeabi_fsub+0x284>
 8000ffc:	1c65      	adds	r5, r4, #1
 8000ffe:	b2e9      	uxtb	r1, r5
 8001000:	2901      	cmp	r1, #1
 8001002:	dd45      	ble.n	8001090 <__aeabi_fsub+0x294>
 8001004:	2dff      	cmp	r5, #255	; 0xff
 8001006:	d100      	bne.n	800100a <__aeabi_fsub+0x20e>
 8001008:	e74f      	b.n	8000eaa <__aeabi_fsub+0xae>
 800100a:	2407      	movs	r4, #7
 800100c:	444b      	add	r3, r9
 800100e:	085b      	lsrs	r3, r3, #1
 8001010:	401c      	ands	r4, r3
 8001012:	e738      	b.n	8000e86 <__aeabi_fsub+0x8a>
 8001014:	2207      	movs	r2, #7
 8001016:	4b5a      	ldr	r3, [pc, #360]	; (8001180 <__aeabi_fsub+0x384>)
 8001018:	1a2d      	subs	r5, r5, r0
 800101a:	4023      	ands	r3, r4
 800101c:	4014      	ands	r4, r2
 800101e:	e732      	b.n	8000e86 <__aeabi_fsub+0x8a>
 8001020:	2c00      	cmp	r4, #0
 8001022:	d11d      	bne.n	8001060 <__aeabi_fsub+0x264>
 8001024:	2b00      	cmp	r3, #0
 8001026:	d17a      	bne.n	800111e <__aeabi_fsub+0x322>
 8001028:	464b      	mov	r3, r9
 800102a:	2b00      	cmp	r3, #0
 800102c:	d100      	bne.n	8001030 <__aeabi_fsub+0x234>
 800102e:	e091      	b.n	8001154 <__aeabi_fsub+0x358>
 8001030:	000a      	movs	r2, r1
 8001032:	2500      	movs	r5, #0
 8001034:	e7b5      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8001036:	3e01      	subs	r6, #1
 8001038:	2e00      	cmp	r6, #0
 800103a:	d119      	bne.n	8001070 <__aeabi_fsub+0x274>
 800103c:	444b      	add	r3, r9
 800103e:	e76c      	b.n	8000f1a <__aeabi_fsub+0x11e>
 8001040:	2cff      	cmp	r4, #255	; 0xff
 8001042:	d184      	bne.n	8000f4e <__aeabi_fsub+0x152>
 8001044:	25ff      	movs	r5, #255	; 0xff
 8001046:	e7ac      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8001048:	464a      	mov	r2, r9
 800104a:	4688      	mov	r8, r1
 800104c:	1ad4      	subs	r4, r2, r3
 800104e:	e705      	b.n	8000e5c <__aeabi_fsub+0x60>
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1c5      	bne.n	8000fe0 <__aeabi_fsub+0x1e4>
 8001054:	000a      	movs	r2, r1
 8001056:	28ff      	cmp	r0, #255	; 0xff
 8001058:	d0c8      	beq.n	8000fec <__aeabi_fsub+0x1f0>
 800105a:	0005      	movs	r5, r0
 800105c:	464b      	mov	r3, r9
 800105e:	e7a0      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8001060:	2b00      	cmp	r3, #0
 8001062:	d149      	bne.n	80010f8 <__aeabi_fsub+0x2fc>
 8001064:	464b      	mov	r3, r9
 8001066:	2b00      	cmp	r3, #0
 8001068:	d077      	beq.n	800115a <__aeabi_fsub+0x35e>
 800106a:	000a      	movs	r2, r1
 800106c:	25ff      	movs	r5, #255	; 0xff
 800106e:	e798      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8001070:	2cff      	cmp	r4, #255	; 0xff
 8001072:	d000      	beq.n	8001076 <__aeabi_fsub+0x27a>
 8001074:	e743      	b.n	8000efe <__aeabi_fsub+0x102>
 8001076:	e787      	b.n	8000f88 <__aeabi_fsub+0x18c>
 8001078:	000a      	movs	r2, r1
 800107a:	24ff      	movs	r4, #255	; 0xff
 800107c:	2300      	movs	r3, #0
 800107e:	e716      	b.n	8000eae <__aeabi_fsub+0xb2>
 8001080:	2c00      	cmp	r4, #0
 8001082:	d115      	bne.n	80010b0 <__aeabi_fsub+0x2b4>
 8001084:	2b00      	cmp	r3, #0
 8001086:	d157      	bne.n	8001138 <__aeabi_fsub+0x33c>
 8001088:	28ff      	cmp	r0, #255	; 0xff
 800108a:	d1e6      	bne.n	800105a <__aeabi_fsub+0x25e>
 800108c:	464b      	mov	r3, r9
 800108e:	e77b      	b.n	8000f88 <__aeabi_fsub+0x18c>
 8001090:	2c00      	cmp	r4, #0
 8001092:	d120      	bne.n	80010d6 <__aeabi_fsub+0x2da>
 8001094:	2b00      	cmp	r3, #0
 8001096:	d057      	beq.n	8001148 <__aeabi_fsub+0x34c>
 8001098:	4649      	mov	r1, r9
 800109a:	2900      	cmp	r1, #0
 800109c:	d053      	beq.n	8001146 <__aeabi_fsub+0x34a>
 800109e:	444b      	add	r3, r9
 80010a0:	015a      	lsls	r2, r3, #5
 80010a2:	d568      	bpl.n	8001176 <__aeabi_fsub+0x37a>
 80010a4:	2407      	movs	r4, #7
 80010a6:	4a36      	ldr	r2, [pc, #216]	; (8001180 <__aeabi_fsub+0x384>)
 80010a8:	401c      	ands	r4, r3
 80010aa:	2501      	movs	r5, #1
 80010ac:	4013      	ands	r3, r2
 80010ae:	e6ea      	b.n	8000e86 <__aeabi_fsub+0x8a>
 80010b0:	28ff      	cmp	r0, #255	; 0xff
 80010b2:	d0eb      	beq.n	800108c <__aeabi_fsub+0x290>
 80010b4:	2280      	movs	r2, #128	; 0x80
 80010b6:	04d2      	lsls	r2, r2, #19
 80010b8:	4276      	negs	r6, r6
 80010ba:	4313      	orrs	r3, r2
 80010bc:	2e1b      	cmp	r6, #27
 80010be:	dc53      	bgt.n	8001168 <__aeabi_fsub+0x36c>
 80010c0:	2520      	movs	r5, #32
 80010c2:	1bad      	subs	r5, r5, r6
 80010c4:	001a      	movs	r2, r3
 80010c6:	40ab      	lsls	r3, r5
 80010c8:	40f2      	lsrs	r2, r6
 80010ca:	1e5c      	subs	r4, r3, #1
 80010cc:	41a3      	sbcs	r3, r4
 80010ce:	4313      	orrs	r3, r2
 80010d0:	444b      	add	r3, r9
 80010d2:	0005      	movs	r5, r0
 80010d4:	e721      	b.n	8000f1a <__aeabi_fsub+0x11e>
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0d8      	beq.n	800108c <__aeabi_fsub+0x290>
 80010da:	4649      	mov	r1, r9
 80010dc:	2900      	cmp	r1, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_fsub+0x2e6>
 80010e0:	e752      	b.n	8000f88 <__aeabi_fsub+0x18c>
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	03c9      	lsls	r1, r1, #15
 80010e6:	420f      	tst	r7, r1
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x2f0>
 80010ea:	e74d      	b.n	8000f88 <__aeabi_fsub+0x18c>
 80010ec:	4660      	mov	r0, ip
 80010ee:	4208      	tst	r0, r1
 80010f0:	d000      	beq.n	80010f4 <__aeabi_fsub+0x2f8>
 80010f2:	e749      	b.n	8000f88 <__aeabi_fsub+0x18c>
 80010f4:	464b      	mov	r3, r9
 80010f6:	e747      	b.n	8000f88 <__aeabi_fsub+0x18c>
 80010f8:	4648      	mov	r0, r9
 80010fa:	25ff      	movs	r5, #255	; 0xff
 80010fc:	2800      	cmp	r0, #0
 80010fe:	d100      	bne.n	8001102 <__aeabi_fsub+0x306>
 8001100:	e74f      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	03d2      	lsls	r2, r2, #15
 8001106:	4217      	tst	r7, r2
 8001108:	d004      	beq.n	8001114 <__aeabi_fsub+0x318>
 800110a:	4660      	mov	r0, ip
 800110c:	4210      	tst	r0, r2
 800110e:	d101      	bne.n	8001114 <__aeabi_fsub+0x318>
 8001110:	464b      	mov	r3, r9
 8001112:	4688      	mov	r8, r1
 8001114:	2201      	movs	r2, #1
 8001116:	4641      	mov	r1, r8
 8001118:	25ff      	movs	r5, #255	; 0xff
 800111a:	400a      	ands	r2, r1
 800111c:	e741      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 800111e:	4648      	mov	r0, r9
 8001120:	2800      	cmp	r0, #0
 8001122:	d01f      	beq.n	8001164 <__aeabi_fsub+0x368>
 8001124:	1a1a      	subs	r2, r3, r0
 8001126:	0150      	lsls	r0, r2, #5
 8001128:	d520      	bpl.n	800116c <__aeabi_fsub+0x370>
 800112a:	464a      	mov	r2, r9
 800112c:	2407      	movs	r4, #7
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	401c      	ands	r4, r3
 8001132:	4688      	mov	r8, r1
 8001134:	2500      	movs	r5, #0
 8001136:	e6a6      	b.n	8000e86 <__aeabi_fsub+0x8a>
 8001138:	1c74      	adds	r4, r6, #1
 800113a:	d0c9      	beq.n	80010d0 <__aeabi_fsub+0x2d4>
 800113c:	43f6      	mvns	r6, r6
 800113e:	28ff      	cmp	r0, #255	; 0xff
 8001140:	d1bc      	bne.n	80010bc <__aeabi_fsub+0x2c0>
 8001142:	464b      	mov	r3, r9
 8001144:	e720      	b.n	8000f88 <__aeabi_fsub+0x18c>
 8001146:	4699      	mov	r9, r3
 8001148:	464b      	mov	r3, r9
 800114a:	2500      	movs	r5, #0
 800114c:	08db      	lsrs	r3, r3, #3
 800114e:	e72b      	b.n	8000fa8 <__aeabi_fsub+0x1ac>
 8001150:	2301      	movs	r3, #1
 8001152:	e740      	b.n	8000fd6 <__aeabi_fsub+0x1da>
 8001154:	2200      	movs	r2, #0
 8001156:	2300      	movs	r3, #0
 8001158:	e6a9      	b.n	8000eae <__aeabi_fsub+0xb2>
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	2200      	movs	r2, #0
 800115e:	03db      	lsls	r3, r3, #15
 8001160:	24ff      	movs	r4, #255	; 0xff
 8001162:	e6a4      	b.n	8000eae <__aeabi_fsub+0xb2>
 8001164:	2500      	movs	r5, #0
 8001166:	e71c      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8001168:	2301      	movs	r3, #1
 800116a:	e7b1      	b.n	80010d0 <__aeabi_fsub+0x2d4>
 800116c:	2a00      	cmp	r2, #0
 800116e:	d0f1      	beq.n	8001154 <__aeabi_fsub+0x358>
 8001170:	0013      	movs	r3, r2
 8001172:	2500      	movs	r5, #0
 8001174:	e6fc      	b.n	8000f70 <__aeabi_fsub+0x174>
 8001176:	2500      	movs	r5, #0
 8001178:	e6fa      	b.n	8000f70 <__aeabi_fsub+0x174>
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	7dffffff 	.word	0x7dffffff
 8001180:	fbffffff 	.word	0xfbffffff

08001184 <__aeabi_f2iz>:
 8001184:	0241      	lsls	r1, r0, #9
 8001186:	0042      	lsls	r2, r0, #1
 8001188:	0fc3      	lsrs	r3, r0, #31
 800118a:	0a49      	lsrs	r1, r1, #9
 800118c:	0e12      	lsrs	r2, r2, #24
 800118e:	2000      	movs	r0, #0
 8001190:	2a7e      	cmp	r2, #126	; 0x7e
 8001192:	d90d      	bls.n	80011b0 <__aeabi_f2iz+0x2c>
 8001194:	2a9d      	cmp	r2, #157	; 0x9d
 8001196:	d80c      	bhi.n	80011b2 <__aeabi_f2iz+0x2e>
 8001198:	2080      	movs	r0, #128	; 0x80
 800119a:	0400      	lsls	r0, r0, #16
 800119c:	4301      	orrs	r1, r0
 800119e:	2a95      	cmp	r2, #149	; 0x95
 80011a0:	dc0a      	bgt.n	80011b8 <__aeabi_f2iz+0x34>
 80011a2:	2096      	movs	r0, #150	; 0x96
 80011a4:	1a82      	subs	r2, r0, r2
 80011a6:	40d1      	lsrs	r1, r2
 80011a8:	4248      	negs	r0, r1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_f2iz+0x2c>
 80011ae:	0008      	movs	r0, r1
 80011b0:	4770      	bx	lr
 80011b2:	4a03      	ldr	r2, [pc, #12]	; (80011c0 <__aeabi_f2iz+0x3c>)
 80011b4:	1898      	adds	r0, r3, r2
 80011b6:	e7fb      	b.n	80011b0 <__aeabi_f2iz+0x2c>
 80011b8:	3a96      	subs	r2, #150	; 0x96
 80011ba:	4091      	lsls	r1, r2
 80011bc:	e7f4      	b.n	80011a8 <__aeabi_f2iz+0x24>
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	7fffffff 	.word	0x7fffffff

080011c4 <__aeabi_i2f>:
 80011c4:	b570      	push	{r4, r5, r6, lr}
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d03d      	beq.n	8001246 <__aeabi_i2f+0x82>
 80011ca:	17c3      	asrs	r3, r0, #31
 80011cc:	18c5      	adds	r5, r0, r3
 80011ce:	405d      	eors	r5, r3
 80011d0:	0fc4      	lsrs	r4, r0, #31
 80011d2:	0028      	movs	r0, r5
 80011d4:	f001 fe54 	bl	8002e80 <__clzsi2>
 80011d8:	229e      	movs	r2, #158	; 0x9e
 80011da:	1a12      	subs	r2, r2, r0
 80011dc:	2a96      	cmp	r2, #150	; 0x96
 80011de:	dc07      	bgt.n	80011f0 <__aeabi_i2f+0x2c>
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	2808      	cmp	r0, #8
 80011e4:	dd33      	ble.n	800124e <__aeabi_i2f+0x8a>
 80011e6:	3808      	subs	r0, #8
 80011e8:	4085      	lsls	r5, r0
 80011ea:	0268      	lsls	r0, r5, #9
 80011ec:	0a40      	lsrs	r0, r0, #9
 80011ee:	e023      	b.n	8001238 <__aeabi_i2f+0x74>
 80011f0:	2a99      	cmp	r2, #153	; 0x99
 80011f2:	dd0b      	ble.n	800120c <__aeabi_i2f+0x48>
 80011f4:	2305      	movs	r3, #5
 80011f6:	0029      	movs	r1, r5
 80011f8:	1a1b      	subs	r3, r3, r0
 80011fa:	40d9      	lsrs	r1, r3
 80011fc:	0003      	movs	r3, r0
 80011fe:	331b      	adds	r3, #27
 8001200:	409d      	lsls	r5, r3
 8001202:	002b      	movs	r3, r5
 8001204:	1e5d      	subs	r5, r3, #1
 8001206:	41ab      	sbcs	r3, r5
 8001208:	4319      	orrs	r1, r3
 800120a:	000d      	movs	r5, r1
 800120c:	2805      	cmp	r0, #5
 800120e:	dd01      	ble.n	8001214 <__aeabi_i2f+0x50>
 8001210:	1f43      	subs	r3, r0, #5
 8001212:	409d      	lsls	r5, r3
 8001214:	002b      	movs	r3, r5
 8001216:	490f      	ldr	r1, [pc, #60]	; (8001254 <__aeabi_i2f+0x90>)
 8001218:	400b      	ands	r3, r1
 800121a:	076e      	lsls	r6, r5, #29
 800121c:	d009      	beq.n	8001232 <__aeabi_i2f+0x6e>
 800121e:	260f      	movs	r6, #15
 8001220:	4035      	ands	r5, r6
 8001222:	2d04      	cmp	r5, #4
 8001224:	d005      	beq.n	8001232 <__aeabi_i2f+0x6e>
 8001226:	3304      	adds	r3, #4
 8001228:	015d      	lsls	r5, r3, #5
 800122a:	d502      	bpl.n	8001232 <__aeabi_i2f+0x6e>
 800122c:	229f      	movs	r2, #159	; 0x9f
 800122e:	400b      	ands	r3, r1
 8001230:	1a12      	subs	r2, r2, r0
 8001232:	019b      	lsls	r3, r3, #6
 8001234:	0a58      	lsrs	r0, r3, #9
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	0240      	lsls	r0, r0, #9
 800123a:	05d2      	lsls	r2, r2, #23
 800123c:	0a40      	lsrs	r0, r0, #9
 800123e:	07e4      	lsls	r4, r4, #31
 8001240:	4310      	orrs	r0, r2
 8001242:	4320      	orrs	r0, r4
 8001244:	bd70      	pop	{r4, r5, r6, pc}
 8001246:	2400      	movs	r4, #0
 8001248:	2200      	movs	r2, #0
 800124a:	2000      	movs	r0, #0
 800124c:	e7f4      	b.n	8001238 <__aeabi_i2f+0x74>
 800124e:	0268      	lsls	r0, r5, #9
 8001250:	0a40      	lsrs	r0, r0, #9
 8001252:	e7f1      	b.n	8001238 <__aeabi_i2f+0x74>
 8001254:	fbffffff 	.word	0xfbffffff

08001258 <__aeabi_ui2f>:
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	1e04      	subs	r4, r0, #0
 800125c:	d034      	beq.n	80012c8 <__aeabi_ui2f+0x70>
 800125e:	f001 fe0f 	bl	8002e80 <__clzsi2>
 8001262:	229e      	movs	r2, #158	; 0x9e
 8001264:	1a12      	subs	r2, r2, r0
 8001266:	2a96      	cmp	r2, #150	; 0x96
 8001268:	dc07      	bgt.n	800127a <__aeabi_ui2f+0x22>
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	2808      	cmp	r0, #8
 800126e:	dd2e      	ble.n	80012ce <__aeabi_ui2f+0x76>
 8001270:	3808      	subs	r0, #8
 8001272:	4084      	lsls	r4, r0
 8001274:	0260      	lsls	r0, r4, #9
 8001276:	0a40      	lsrs	r0, r0, #9
 8001278:	e021      	b.n	80012be <__aeabi_ui2f+0x66>
 800127a:	2a99      	cmp	r2, #153	; 0x99
 800127c:	dd09      	ble.n	8001292 <__aeabi_ui2f+0x3a>
 800127e:	0003      	movs	r3, r0
 8001280:	0021      	movs	r1, r4
 8001282:	331b      	adds	r3, #27
 8001284:	4099      	lsls	r1, r3
 8001286:	1e4b      	subs	r3, r1, #1
 8001288:	4199      	sbcs	r1, r3
 800128a:	2305      	movs	r3, #5
 800128c:	1a1b      	subs	r3, r3, r0
 800128e:	40dc      	lsrs	r4, r3
 8001290:	430c      	orrs	r4, r1
 8001292:	2805      	cmp	r0, #5
 8001294:	dd01      	ble.n	800129a <__aeabi_ui2f+0x42>
 8001296:	1f43      	subs	r3, r0, #5
 8001298:	409c      	lsls	r4, r3
 800129a:	0023      	movs	r3, r4
 800129c:	490d      	ldr	r1, [pc, #52]	; (80012d4 <__aeabi_ui2f+0x7c>)
 800129e:	400b      	ands	r3, r1
 80012a0:	0765      	lsls	r5, r4, #29
 80012a2:	d009      	beq.n	80012b8 <__aeabi_ui2f+0x60>
 80012a4:	250f      	movs	r5, #15
 80012a6:	402c      	ands	r4, r5
 80012a8:	2c04      	cmp	r4, #4
 80012aa:	d005      	beq.n	80012b8 <__aeabi_ui2f+0x60>
 80012ac:	3304      	adds	r3, #4
 80012ae:	015c      	lsls	r4, r3, #5
 80012b0:	d502      	bpl.n	80012b8 <__aeabi_ui2f+0x60>
 80012b2:	229f      	movs	r2, #159	; 0x9f
 80012b4:	400b      	ands	r3, r1
 80012b6:	1a12      	subs	r2, r2, r0
 80012b8:	019b      	lsls	r3, r3, #6
 80012ba:	0a58      	lsrs	r0, r3, #9
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	0240      	lsls	r0, r0, #9
 80012c0:	05d2      	lsls	r2, r2, #23
 80012c2:	0a40      	lsrs	r0, r0, #9
 80012c4:	4310      	orrs	r0, r2
 80012c6:	bd70      	pop	{r4, r5, r6, pc}
 80012c8:	2200      	movs	r2, #0
 80012ca:	2000      	movs	r0, #0
 80012cc:	e7f7      	b.n	80012be <__aeabi_ui2f+0x66>
 80012ce:	0260      	lsls	r0, r4, #9
 80012d0:	0a40      	lsrs	r0, r0, #9
 80012d2:	e7f4      	b.n	80012be <__aeabi_ui2f+0x66>
 80012d4:	fbffffff 	.word	0xfbffffff

080012d8 <__aeabi_dadd>:
 80012d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012da:	464f      	mov	r7, r9
 80012dc:	4646      	mov	r6, r8
 80012de:	46d6      	mov	lr, sl
 80012e0:	000c      	movs	r4, r1
 80012e2:	0309      	lsls	r1, r1, #12
 80012e4:	b5c0      	push	{r6, r7, lr}
 80012e6:	0a49      	lsrs	r1, r1, #9
 80012e8:	0f47      	lsrs	r7, r0, #29
 80012ea:	005e      	lsls	r6, r3, #1
 80012ec:	4339      	orrs	r1, r7
 80012ee:	031f      	lsls	r7, r3, #12
 80012f0:	0fdb      	lsrs	r3, r3, #31
 80012f2:	469c      	mov	ip, r3
 80012f4:	0065      	lsls	r5, r4, #1
 80012f6:	0a7b      	lsrs	r3, r7, #9
 80012f8:	0f57      	lsrs	r7, r2, #29
 80012fa:	431f      	orrs	r7, r3
 80012fc:	0d6d      	lsrs	r5, r5, #21
 80012fe:	0fe4      	lsrs	r4, r4, #31
 8001300:	0d76      	lsrs	r6, r6, #21
 8001302:	46a1      	mov	r9, r4
 8001304:	00c0      	lsls	r0, r0, #3
 8001306:	46b8      	mov	r8, r7
 8001308:	00d2      	lsls	r2, r2, #3
 800130a:	1bab      	subs	r3, r5, r6
 800130c:	4564      	cmp	r4, ip
 800130e:	d07b      	beq.n	8001408 <__aeabi_dadd+0x130>
 8001310:	2b00      	cmp	r3, #0
 8001312:	dd5f      	ble.n	80013d4 <__aeabi_dadd+0xfc>
 8001314:	2e00      	cmp	r6, #0
 8001316:	d000      	beq.n	800131a <__aeabi_dadd+0x42>
 8001318:	e0a4      	b.n	8001464 <__aeabi_dadd+0x18c>
 800131a:	003e      	movs	r6, r7
 800131c:	4316      	orrs	r6, r2
 800131e:	d100      	bne.n	8001322 <__aeabi_dadd+0x4a>
 8001320:	e112      	b.n	8001548 <__aeabi_dadd+0x270>
 8001322:	1e5e      	subs	r6, r3, #1
 8001324:	2e00      	cmp	r6, #0
 8001326:	d000      	beq.n	800132a <__aeabi_dadd+0x52>
 8001328:	e19e      	b.n	8001668 <__aeabi_dadd+0x390>
 800132a:	1a87      	subs	r7, r0, r2
 800132c:	4643      	mov	r3, r8
 800132e:	42b8      	cmp	r0, r7
 8001330:	4180      	sbcs	r0, r0
 8001332:	2501      	movs	r5, #1
 8001334:	1ac9      	subs	r1, r1, r3
 8001336:	4240      	negs	r0, r0
 8001338:	1a09      	subs	r1, r1, r0
 800133a:	020b      	lsls	r3, r1, #8
 800133c:	d400      	bmi.n	8001340 <__aeabi_dadd+0x68>
 800133e:	e131      	b.n	80015a4 <__aeabi_dadd+0x2cc>
 8001340:	0249      	lsls	r1, r1, #9
 8001342:	0a4e      	lsrs	r6, r1, #9
 8001344:	2e00      	cmp	r6, #0
 8001346:	d100      	bne.n	800134a <__aeabi_dadd+0x72>
 8001348:	e16e      	b.n	8001628 <__aeabi_dadd+0x350>
 800134a:	0030      	movs	r0, r6
 800134c:	f001 fd98 	bl	8002e80 <__clzsi2>
 8001350:	0003      	movs	r3, r0
 8001352:	3b08      	subs	r3, #8
 8001354:	2b1f      	cmp	r3, #31
 8001356:	dd00      	ble.n	800135a <__aeabi_dadd+0x82>
 8001358:	e161      	b.n	800161e <__aeabi_dadd+0x346>
 800135a:	2220      	movs	r2, #32
 800135c:	0039      	movs	r1, r7
 800135e:	1ad2      	subs	r2, r2, r3
 8001360:	409e      	lsls	r6, r3
 8001362:	40d1      	lsrs	r1, r2
 8001364:	409f      	lsls	r7, r3
 8001366:	430e      	orrs	r6, r1
 8001368:	429d      	cmp	r5, r3
 800136a:	dd00      	ble.n	800136e <__aeabi_dadd+0x96>
 800136c:	e151      	b.n	8001612 <__aeabi_dadd+0x33a>
 800136e:	1b5d      	subs	r5, r3, r5
 8001370:	1c6b      	adds	r3, r5, #1
 8001372:	2b1f      	cmp	r3, #31
 8001374:	dd00      	ble.n	8001378 <__aeabi_dadd+0xa0>
 8001376:	e17c      	b.n	8001672 <__aeabi_dadd+0x39a>
 8001378:	2120      	movs	r1, #32
 800137a:	1ac9      	subs	r1, r1, r3
 800137c:	003d      	movs	r5, r7
 800137e:	0030      	movs	r0, r6
 8001380:	408f      	lsls	r7, r1
 8001382:	4088      	lsls	r0, r1
 8001384:	40dd      	lsrs	r5, r3
 8001386:	1e79      	subs	r1, r7, #1
 8001388:	418f      	sbcs	r7, r1
 800138a:	0031      	movs	r1, r6
 800138c:	2207      	movs	r2, #7
 800138e:	4328      	orrs	r0, r5
 8001390:	40d9      	lsrs	r1, r3
 8001392:	2500      	movs	r5, #0
 8001394:	4307      	orrs	r7, r0
 8001396:	403a      	ands	r2, r7
 8001398:	2a00      	cmp	r2, #0
 800139a:	d009      	beq.n	80013b0 <__aeabi_dadd+0xd8>
 800139c:	230f      	movs	r3, #15
 800139e:	403b      	ands	r3, r7
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d005      	beq.n	80013b0 <__aeabi_dadd+0xd8>
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	42bb      	cmp	r3, r7
 80013a8:	41bf      	sbcs	r7, r7
 80013aa:	427f      	negs	r7, r7
 80013ac:	19c9      	adds	r1, r1, r7
 80013ae:	001f      	movs	r7, r3
 80013b0:	020b      	lsls	r3, r1, #8
 80013b2:	d400      	bmi.n	80013b6 <__aeabi_dadd+0xde>
 80013b4:	e226      	b.n	8001804 <__aeabi_dadd+0x52c>
 80013b6:	1c6a      	adds	r2, r5, #1
 80013b8:	4bc6      	ldr	r3, [pc, #792]	; (80016d4 <__aeabi_dadd+0x3fc>)
 80013ba:	0555      	lsls	r5, r2, #21
 80013bc:	0d6d      	lsrs	r5, r5, #21
 80013be:	429a      	cmp	r2, r3
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dadd+0xec>
 80013c2:	e106      	b.n	80015d2 <__aeabi_dadd+0x2fa>
 80013c4:	4ac4      	ldr	r2, [pc, #784]	; (80016d8 <__aeabi_dadd+0x400>)
 80013c6:	08ff      	lsrs	r7, r7, #3
 80013c8:	400a      	ands	r2, r1
 80013ca:	0753      	lsls	r3, r2, #29
 80013cc:	0252      	lsls	r2, r2, #9
 80013ce:	433b      	orrs	r3, r7
 80013d0:	0b12      	lsrs	r2, r2, #12
 80013d2:	e08e      	b.n	80014f2 <__aeabi_dadd+0x21a>
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d000      	beq.n	80013da <__aeabi_dadd+0x102>
 80013d8:	e0b8      	b.n	800154c <__aeabi_dadd+0x274>
 80013da:	1c6b      	adds	r3, r5, #1
 80013dc:	055b      	lsls	r3, r3, #21
 80013de:	0d5b      	lsrs	r3, r3, #21
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	dc00      	bgt.n	80013e6 <__aeabi_dadd+0x10e>
 80013e4:	e130      	b.n	8001648 <__aeabi_dadd+0x370>
 80013e6:	1a87      	subs	r7, r0, r2
 80013e8:	4643      	mov	r3, r8
 80013ea:	42b8      	cmp	r0, r7
 80013ec:	41b6      	sbcs	r6, r6
 80013ee:	1acb      	subs	r3, r1, r3
 80013f0:	4276      	negs	r6, r6
 80013f2:	1b9e      	subs	r6, r3, r6
 80013f4:	0233      	lsls	r3, r6, #8
 80013f6:	d500      	bpl.n	80013fa <__aeabi_dadd+0x122>
 80013f8:	e14c      	b.n	8001694 <__aeabi_dadd+0x3bc>
 80013fa:	003b      	movs	r3, r7
 80013fc:	4333      	orrs	r3, r6
 80013fe:	d1a1      	bne.n	8001344 <__aeabi_dadd+0x6c>
 8001400:	2200      	movs	r2, #0
 8001402:	2400      	movs	r4, #0
 8001404:	2500      	movs	r5, #0
 8001406:	e070      	b.n	80014ea <__aeabi_dadd+0x212>
 8001408:	2b00      	cmp	r3, #0
 800140a:	dc00      	bgt.n	800140e <__aeabi_dadd+0x136>
 800140c:	e0e5      	b.n	80015da <__aeabi_dadd+0x302>
 800140e:	2e00      	cmp	r6, #0
 8001410:	d100      	bne.n	8001414 <__aeabi_dadd+0x13c>
 8001412:	e083      	b.n	800151c <__aeabi_dadd+0x244>
 8001414:	4eaf      	ldr	r6, [pc, #700]	; (80016d4 <__aeabi_dadd+0x3fc>)
 8001416:	42b5      	cmp	r5, r6
 8001418:	d060      	beq.n	80014dc <__aeabi_dadd+0x204>
 800141a:	2680      	movs	r6, #128	; 0x80
 800141c:	0436      	lsls	r6, r6, #16
 800141e:	4337      	orrs	r7, r6
 8001420:	46b8      	mov	r8, r7
 8001422:	2b38      	cmp	r3, #56	; 0x38
 8001424:	dc00      	bgt.n	8001428 <__aeabi_dadd+0x150>
 8001426:	e13e      	b.n	80016a6 <__aeabi_dadd+0x3ce>
 8001428:	4643      	mov	r3, r8
 800142a:	4313      	orrs	r3, r2
 800142c:	001f      	movs	r7, r3
 800142e:	1e7a      	subs	r2, r7, #1
 8001430:	4197      	sbcs	r7, r2
 8001432:	183f      	adds	r7, r7, r0
 8001434:	4287      	cmp	r7, r0
 8001436:	4180      	sbcs	r0, r0
 8001438:	4240      	negs	r0, r0
 800143a:	1809      	adds	r1, r1, r0
 800143c:	020b      	lsls	r3, r1, #8
 800143e:	d400      	bmi.n	8001442 <__aeabi_dadd+0x16a>
 8001440:	e0b0      	b.n	80015a4 <__aeabi_dadd+0x2cc>
 8001442:	4ba4      	ldr	r3, [pc, #656]	; (80016d4 <__aeabi_dadd+0x3fc>)
 8001444:	3501      	adds	r5, #1
 8001446:	429d      	cmp	r5, r3
 8001448:	d100      	bne.n	800144c <__aeabi_dadd+0x174>
 800144a:	e0c3      	b.n	80015d4 <__aeabi_dadd+0x2fc>
 800144c:	4aa2      	ldr	r2, [pc, #648]	; (80016d8 <__aeabi_dadd+0x400>)
 800144e:	087b      	lsrs	r3, r7, #1
 8001450:	400a      	ands	r2, r1
 8001452:	2101      	movs	r1, #1
 8001454:	400f      	ands	r7, r1
 8001456:	431f      	orrs	r7, r3
 8001458:	0851      	lsrs	r1, r2, #1
 800145a:	07d3      	lsls	r3, r2, #31
 800145c:	2207      	movs	r2, #7
 800145e:	431f      	orrs	r7, r3
 8001460:	403a      	ands	r2, r7
 8001462:	e799      	b.n	8001398 <__aeabi_dadd+0xc0>
 8001464:	4e9b      	ldr	r6, [pc, #620]	; (80016d4 <__aeabi_dadd+0x3fc>)
 8001466:	42b5      	cmp	r5, r6
 8001468:	d038      	beq.n	80014dc <__aeabi_dadd+0x204>
 800146a:	2680      	movs	r6, #128	; 0x80
 800146c:	0436      	lsls	r6, r6, #16
 800146e:	4337      	orrs	r7, r6
 8001470:	46b8      	mov	r8, r7
 8001472:	2b38      	cmp	r3, #56	; 0x38
 8001474:	dd00      	ble.n	8001478 <__aeabi_dadd+0x1a0>
 8001476:	e0dc      	b.n	8001632 <__aeabi_dadd+0x35a>
 8001478:	2b1f      	cmp	r3, #31
 800147a:	dc00      	bgt.n	800147e <__aeabi_dadd+0x1a6>
 800147c:	e130      	b.n	80016e0 <__aeabi_dadd+0x408>
 800147e:	001e      	movs	r6, r3
 8001480:	4647      	mov	r7, r8
 8001482:	3e20      	subs	r6, #32
 8001484:	40f7      	lsrs	r7, r6
 8001486:	46bc      	mov	ip, r7
 8001488:	2b20      	cmp	r3, #32
 800148a:	d004      	beq.n	8001496 <__aeabi_dadd+0x1be>
 800148c:	2640      	movs	r6, #64	; 0x40
 800148e:	1af3      	subs	r3, r6, r3
 8001490:	4646      	mov	r6, r8
 8001492:	409e      	lsls	r6, r3
 8001494:	4332      	orrs	r2, r6
 8001496:	0017      	movs	r7, r2
 8001498:	4663      	mov	r3, ip
 800149a:	1e7a      	subs	r2, r7, #1
 800149c:	4197      	sbcs	r7, r2
 800149e:	431f      	orrs	r7, r3
 80014a0:	e0cc      	b.n	800163c <__aeabi_dadd+0x364>
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dadd+0x1d0>
 80014a6:	e204      	b.n	80018b2 <__aeabi_dadd+0x5da>
 80014a8:	4643      	mov	r3, r8
 80014aa:	4313      	orrs	r3, r2
 80014ac:	d100      	bne.n	80014b0 <__aeabi_dadd+0x1d8>
 80014ae:	e159      	b.n	8001764 <__aeabi_dadd+0x48c>
 80014b0:	074b      	lsls	r3, r1, #29
 80014b2:	08c0      	lsrs	r0, r0, #3
 80014b4:	4318      	orrs	r0, r3
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	08c9      	lsrs	r1, r1, #3
 80014ba:	031b      	lsls	r3, r3, #12
 80014bc:	4219      	tst	r1, r3
 80014be:	d008      	beq.n	80014d2 <__aeabi_dadd+0x1fa>
 80014c0:	4645      	mov	r5, r8
 80014c2:	08ed      	lsrs	r5, r5, #3
 80014c4:	421d      	tst	r5, r3
 80014c6:	d104      	bne.n	80014d2 <__aeabi_dadd+0x1fa>
 80014c8:	4643      	mov	r3, r8
 80014ca:	08d0      	lsrs	r0, r2, #3
 80014cc:	0759      	lsls	r1, r3, #29
 80014ce:	4308      	orrs	r0, r1
 80014d0:	0029      	movs	r1, r5
 80014d2:	0f42      	lsrs	r2, r0, #29
 80014d4:	00c9      	lsls	r1, r1, #3
 80014d6:	4d7f      	ldr	r5, [pc, #508]	; (80016d4 <__aeabi_dadd+0x3fc>)
 80014d8:	4311      	orrs	r1, r2
 80014da:	00c0      	lsls	r0, r0, #3
 80014dc:	074b      	lsls	r3, r1, #29
 80014de:	08ca      	lsrs	r2, r1, #3
 80014e0:	497c      	ldr	r1, [pc, #496]	; (80016d4 <__aeabi_dadd+0x3fc>)
 80014e2:	08c0      	lsrs	r0, r0, #3
 80014e4:	4303      	orrs	r3, r0
 80014e6:	428d      	cmp	r5, r1
 80014e8:	d068      	beq.n	80015bc <__aeabi_dadd+0x2e4>
 80014ea:	0312      	lsls	r2, r2, #12
 80014ec:	056d      	lsls	r5, r5, #21
 80014ee:	0b12      	lsrs	r2, r2, #12
 80014f0:	0d6d      	lsrs	r5, r5, #21
 80014f2:	2100      	movs	r1, #0
 80014f4:	0312      	lsls	r2, r2, #12
 80014f6:	0018      	movs	r0, r3
 80014f8:	0b13      	lsrs	r3, r2, #12
 80014fa:	0d0a      	lsrs	r2, r1, #20
 80014fc:	0512      	lsls	r2, r2, #20
 80014fe:	431a      	orrs	r2, r3
 8001500:	4b76      	ldr	r3, [pc, #472]	; (80016dc <__aeabi_dadd+0x404>)
 8001502:	052d      	lsls	r5, r5, #20
 8001504:	4013      	ands	r3, r2
 8001506:	432b      	orrs	r3, r5
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	07e4      	lsls	r4, r4, #31
 800150c:	085b      	lsrs	r3, r3, #1
 800150e:	4323      	orrs	r3, r4
 8001510:	0019      	movs	r1, r3
 8001512:	bc1c      	pop	{r2, r3, r4}
 8001514:	4690      	mov	r8, r2
 8001516:	4699      	mov	r9, r3
 8001518:	46a2      	mov	sl, r4
 800151a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800151c:	003e      	movs	r6, r7
 800151e:	4316      	orrs	r6, r2
 8001520:	d012      	beq.n	8001548 <__aeabi_dadd+0x270>
 8001522:	1e5e      	subs	r6, r3, #1
 8001524:	2e00      	cmp	r6, #0
 8001526:	d000      	beq.n	800152a <__aeabi_dadd+0x252>
 8001528:	e100      	b.n	800172c <__aeabi_dadd+0x454>
 800152a:	1887      	adds	r7, r0, r2
 800152c:	4287      	cmp	r7, r0
 800152e:	4180      	sbcs	r0, r0
 8001530:	4441      	add	r1, r8
 8001532:	4240      	negs	r0, r0
 8001534:	1809      	adds	r1, r1, r0
 8001536:	2501      	movs	r5, #1
 8001538:	020b      	lsls	r3, r1, #8
 800153a:	d533      	bpl.n	80015a4 <__aeabi_dadd+0x2cc>
 800153c:	2502      	movs	r5, #2
 800153e:	e785      	b.n	800144c <__aeabi_dadd+0x174>
 8001540:	4664      	mov	r4, ip
 8001542:	0033      	movs	r3, r6
 8001544:	4641      	mov	r1, r8
 8001546:	0010      	movs	r0, r2
 8001548:	001d      	movs	r5, r3
 800154a:	e7c7      	b.n	80014dc <__aeabi_dadd+0x204>
 800154c:	2d00      	cmp	r5, #0
 800154e:	d000      	beq.n	8001552 <__aeabi_dadd+0x27a>
 8001550:	e0da      	b.n	8001708 <__aeabi_dadd+0x430>
 8001552:	000c      	movs	r4, r1
 8001554:	4304      	orrs	r4, r0
 8001556:	d0f3      	beq.n	8001540 <__aeabi_dadd+0x268>
 8001558:	1c5c      	adds	r4, r3, #1
 800155a:	d100      	bne.n	800155e <__aeabi_dadd+0x286>
 800155c:	e19f      	b.n	800189e <__aeabi_dadd+0x5c6>
 800155e:	4c5d      	ldr	r4, [pc, #372]	; (80016d4 <__aeabi_dadd+0x3fc>)
 8001560:	42a6      	cmp	r6, r4
 8001562:	d100      	bne.n	8001566 <__aeabi_dadd+0x28e>
 8001564:	e12f      	b.n	80017c6 <__aeabi_dadd+0x4ee>
 8001566:	43db      	mvns	r3, r3
 8001568:	2b38      	cmp	r3, #56	; 0x38
 800156a:	dd00      	ble.n	800156e <__aeabi_dadd+0x296>
 800156c:	e166      	b.n	800183c <__aeabi_dadd+0x564>
 800156e:	2b1f      	cmp	r3, #31
 8001570:	dd00      	ble.n	8001574 <__aeabi_dadd+0x29c>
 8001572:	e183      	b.n	800187c <__aeabi_dadd+0x5a4>
 8001574:	2420      	movs	r4, #32
 8001576:	0005      	movs	r5, r0
 8001578:	1ae4      	subs	r4, r4, r3
 800157a:	000f      	movs	r7, r1
 800157c:	40dd      	lsrs	r5, r3
 800157e:	40d9      	lsrs	r1, r3
 8001580:	40a0      	lsls	r0, r4
 8001582:	4643      	mov	r3, r8
 8001584:	40a7      	lsls	r7, r4
 8001586:	1a5b      	subs	r3, r3, r1
 8001588:	1e44      	subs	r4, r0, #1
 800158a:	41a0      	sbcs	r0, r4
 800158c:	4698      	mov	r8, r3
 800158e:	432f      	orrs	r7, r5
 8001590:	4338      	orrs	r0, r7
 8001592:	1a17      	subs	r7, r2, r0
 8001594:	42ba      	cmp	r2, r7
 8001596:	4192      	sbcs	r2, r2
 8001598:	4643      	mov	r3, r8
 800159a:	4252      	negs	r2, r2
 800159c:	1a99      	subs	r1, r3, r2
 800159e:	4664      	mov	r4, ip
 80015a0:	0035      	movs	r5, r6
 80015a2:	e6ca      	b.n	800133a <__aeabi_dadd+0x62>
 80015a4:	2207      	movs	r2, #7
 80015a6:	403a      	ands	r2, r7
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	d000      	beq.n	80015ae <__aeabi_dadd+0x2d6>
 80015ac:	e6f6      	b.n	800139c <__aeabi_dadd+0xc4>
 80015ae:	074b      	lsls	r3, r1, #29
 80015b0:	08ca      	lsrs	r2, r1, #3
 80015b2:	4948      	ldr	r1, [pc, #288]	; (80016d4 <__aeabi_dadd+0x3fc>)
 80015b4:	08ff      	lsrs	r7, r7, #3
 80015b6:	433b      	orrs	r3, r7
 80015b8:	428d      	cmp	r5, r1
 80015ba:	d196      	bne.n	80014ea <__aeabi_dadd+0x212>
 80015bc:	0019      	movs	r1, r3
 80015be:	4311      	orrs	r1, r2
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dadd+0x2ec>
 80015c2:	e19e      	b.n	8001902 <__aeabi_dadd+0x62a>
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0309      	lsls	r1, r1, #12
 80015c8:	430a      	orrs	r2, r1
 80015ca:	0312      	lsls	r2, r2, #12
 80015cc:	0b12      	lsrs	r2, r2, #12
 80015ce:	4d41      	ldr	r5, [pc, #260]	; (80016d4 <__aeabi_dadd+0x3fc>)
 80015d0:	e78f      	b.n	80014f2 <__aeabi_dadd+0x21a>
 80015d2:	0015      	movs	r5, r2
 80015d4:	2200      	movs	r2, #0
 80015d6:	2300      	movs	r3, #0
 80015d8:	e78b      	b.n	80014f2 <__aeabi_dadd+0x21a>
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d000      	beq.n	80015e0 <__aeabi_dadd+0x308>
 80015de:	e0c7      	b.n	8001770 <__aeabi_dadd+0x498>
 80015e0:	1c6b      	adds	r3, r5, #1
 80015e2:	055f      	lsls	r7, r3, #21
 80015e4:	0d7f      	lsrs	r7, r7, #21
 80015e6:	2f01      	cmp	r7, #1
 80015e8:	dc00      	bgt.n	80015ec <__aeabi_dadd+0x314>
 80015ea:	e0f1      	b.n	80017d0 <__aeabi_dadd+0x4f8>
 80015ec:	4d39      	ldr	r5, [pc, #228]	; (80016d4 <__aeabi_dadd+0x3fc>)
 80015ee:	42ab      	cmp	r3, r5
 80015f0:	d100      	bne.n	80015f4 <__aeabi_dadd+0x31c>
 80015f2:	e0b9      	b.n	8001768 <__aeabi_dadd+0x490>
 80015f4:	1885      	adds	r5, r0, r2
 80015f6:	000a      	movs	r2, r1
 80015f8:	4285      	cmp	r5, r0
 80015fa:	4189      	sbcs	r1, r1
 80015fc:	4442      	add	r2, r8
 80015fe:	4249      	negs	r1, r1
 8001600:	1851      	adds	r1, r2, r1
 8001602:	2207      	movs	r2, #7
 8001604:	07cf      	lsls	r7, r1, #31
 8001606:	086d      	lsrs	r5, r5, #1
 8001608:	432f      	orrs	r7, r5
 800160a:	0849      	lsrs	r1, r1, #1
 800160c:	403a      	ands	r2, r7
 800160e:	001d      	movs	r5, r3
 8001610:	e6c2      	b.n	8001398 <__aeabi_dadd+0xc0>
 8001612:	2207      	movs	r2, #7
 8001614:	4930      	ldr	r1, [pc, #192]	; (80016d8 <__aeabi_dadd+0x400>)
 8001616:	1aed      	subs	r5, r5, r3
 8001618:	4031      	ands	r1, r6
 800161a:	403a      	ands	r2, r7
 800161c:	e6bc      	b.n	8001398 <__aeabi_dadd+0xc0>
 800161e:	003e      	movs	r6, r7
 8001620:	3828      	subs	r0, #40	; 0x28
 8001622:	4086      	lsls	r6, r0
 8001624:	2700      	movs	r7, #0
 8001626:	e69f      	b.n	8001368 <__aeabi_dadd+0x90>
 8001628:	0038      	movs	r0, r7
 800162a:	f001 fc29 	bl	8002e80 <__clzsi2>
 800162e:	3020      	adds	r0, #32
 8001630:	e68e      	b.n	8001350 <__aeabi_dadd+0x78>
 8001632:	4643      	mov	r3, r8
 8001634:	4313      	orrs	r3, r2
 8001636:	001f      	movs	r7, r3
 8001638:	1e7a      	subs	r2, r7, #1
 800163a:	4197      	sbcs	r7, r2
 800163c:	1bc7      	subs	r7, r0, r7
 800163e:	42b8      	cmp	r0, r7
 8001640:	4180      	sbcs	r0, r0
 8001642:	4240      	negs	r0, r0
 8001644:	1a09      	subs	r1, r1, r0
 8001646:	e678      	b.n	800133a <__aeabi_dadd+0x62>
 8001648:	000e      	movs	r6, r1
 800164a:	003b      	movs	r3, r7
 800164c:	4306      	orrs	r6, r0
 800164e:	4313      	orrs	r3, r2
 8001650:	2d00      	cmp	r5, #0
 8001652:	d161      	bne.n	8001718 <__aeabi_dadd+0x440>
 8001654:	2e00      	cmp	r6, #0
 8001656:	d000      	beq.n	800165a <__aeabi_dadd+0x382>
 8001658:	e0f4      	b.n	8001844 <__aeabi_dadd+0x56c>
 800165a:	2b00      	cmp	r3, #0
 800165c:	d100      	bne.n	8001660 <__aeabi_dadd+0x388>
 800165e:	e11b      	b.n	8001898 <__aeabi_dadd+0x5c0>
 8001660:	4664      	mov	r4, ip
 8001662:	0039      	movs	r1, r7
 8001664:	0010      	movs	r0, r2
 8001666:	e739      	b.n	80014dc <__aeabi_dadd+0x204>
 8001668:	4f1a      	ldr	r7, [pc, #104]	; (80016d4 <__aeabi_dadd+0x3fc>)
 800166a:	42bb      	cmp	r3, r7
 800166c:	d07a      	beq.n	8001764 <__aeabi_dadd+0x48c>
 800166e:	0033      	movs	r3, r6
 8001670:	e6ff      	b.n	8001472 <__aeabi_dadd+0x19a>
 8001672:	0030      	movs	r0, r6
 8001674:	3d1f      	subs	r5, #31
 8001676:	40e8      	lsrs	r0, r5
 8001678:	2b20      	cmp	r3, #32
 800167a:	d003      	beq.n	8001684 <__aeabi_dadd+0x3ac>
 800167c:	2140      	movs	r1, #64	; 0x40
 800167e:	1acb      	subs	r3, r1, r3
 8001680:	409e      	lsls	r6, r3
 8001682:	4337      	orrs	r7, r6
 8001684:	1e7b      	subs	r3, r7, #1
 8001686:	419f      	sbcs	r7, r3
 8001688:	2207      	movs	r2, #7
 800168a:	4307      	orrs	r7, r0
 800168c:	403a      	ands	r2, r7
 800168e:	2100      	movs	r1, #0
 8001690:	2500      	movs	r5, #0
 8001692:	e789      	b.n	80015a8 <__aeabi_dadd+0x2d0>
 8001694:	1a17      	subs	r7, r2, r0
 8001696:	4643      	mov	r3, r8
 8001698:	42ba      	cmp	r2, r7
 800169a:	41b6      	sbcs	r6, r6
 800169c:	1a59      	subs	r1, r3, r1
 800169e:	4276      	negs	r6, r6
 80016a0:	1b8e      	subs	r6, r1, r6
 80016a2:	4664      	mov	r4, ip
 80016a4:	e64e      	b.n	8001344 <__aeabi_dadd+0x6c>
 80016a6:	2b1f      	cmp	r3, #31
 80016a8:	dd00      	ble.n	80016ac <__aeabi_dadd+0x3d4>
 80016aa:	e0ad      	b.n	8001808 <__aeabi_dadd+0x530>
 80016ac:	2620      	movs	r6, #32
 80016ae:	4647      	mov	r7, r8
 80016b0:	1af6      	subs	r6, r6, r3
 80016b2:	40b7      	lsls	r7, r6
 80016b4:	46b9      	mov	r9, r7
 80016b6:	0017      	movs	r7, r2
 80016b8:	46b2      	mov	sl, r6
 80016ba:	40df      	lsrs	r7, r3
 80016bc:	464e      	mov	r6, r9
 80016be:	433e      	orrs	r6, r7
 80016c0:	0037      	movs	r7, r6
 80016c2:	4656      	mov	r6, sl
 80016c4:	40b2      	lsls	r2, r6
 80016c6:	1e56      	subs	r6, r2, #1
 80016c8:	41b2      	sbcs	r2, r6
 80016ca:	4317      	orrs	r7, r2
 80016cc:	4642      	mov	r2, r8
 80016ce:	40da      	lsrs	r2, r3
 80016d0:	1889      	adds	r1, r1, r2
 80016d2:	e6ae      	b.n	8001432 <__aeabi_dadd+0x15a>
 80016d4:	000007ff 	.word	0x000007ff
 80016d8:	ff7fffff 	.word	0xff7fffff
 80016dc:	800fffff 	.word	0x800fffff
 80016e0:	2620      	movs	r6, #32
 80016e2:	4647      	mov	r7, r8
 80016e4:	1af6      	subs	r6, r6, r3
 80016e6:	40b7      	lsls	r7, r6
 80016e8:	46b9      	mov	r9, r7
 80016ea:	0017      	movs	r7, r2
 80016ec:	46b2      	mov	sl, r6
 80016ee:	40df      	lsrs	r7, r3
 80016f0:	464e      	mov	r6, r9
 80016f2:	433e      	orrs	r6, r7
 80016f4:	0037      	movs	r7, r6
 80016f6:	4656      	mov	r6, sl
 80016f8:	40b2      	lsls	r2, r6
 80016fa:	1e56      	subs	r6, r2, #1
 80016fc:	41b2      	sbcs	r2, r6
 80016fe:	4317      	orrs	r7, r2
 8001700:	4642      	mov	r2, r8
 8001702:	40da      	lsrs	r2, r3
 8001704:	1a89      	subs	r1, r1, r2
 8001706:	e799      	b.n	800163c <__aeabi_dadd+0x364>
 8001708:	4c7f      	ldr	r4, [pc, #508]	; (8001908 <__aeabi_dadd+0x630>)
 800170a:	42a6      	cmp	r6, r4
 800170c:	d05b      	beq.n	80017c6 <__aeabi_dadd+0x4ee>
 800170e:	2480      	movs	r4, #128	; 0x80
 8001710:	0424      	lsls	r4, r4, #16
 8001712:	425b      	negs	r3, r3
 8001714:	4321      	orrs	r1, r4
 8001716:	e727      	b.n	8001568 <__aeabi_dadd+0x290>
 8001718:	2e00      	cmp	r6, #0
 800171a:	d10c      	bne.n	8001736 <__aeabi_dadd+0x45e>
 800171c:	2b00      	cmp	r3, #0
 800171e:	d100      	bne.n	8001722 <__aeabi_dadd+0x44a>
 8001720:	e0cb      	b.n	80018ba <__aeabi_dadd+0x5e2>
 8001722:	4664      	mov	r4, ip
 8001724:	0039      	movs	r1, r7
 8001726:	0010      	movs	r0, r2
 8001728:	4d77      	ldr	r5, [pc, #476]	; (8001908 <__aeabi_dadd+0x630>)
 800172a:	e6d7      	b.n	80014dc <__aeabi_dadd+0x204>
 800172c:	4f76      	ldr	r7, [pc, #472]	; (8001908 <__aeabi_dadd+0x630>)
 800172e:	42bb      	cmp	r3, r7
 8001730:	d018      	beq.n	8001764 <__aeabi_dadd+0x48c>
 8001732:	0033      	movs	r3, r6
 8001734:	e675      	b.n	8001422 <__aeabi_dadd+0x14a>
 8001736:	2b00      	cmp	r3, #0
 8001738:	d014      	beq.n	8001764 <__aeabi_dadd+0x48c>
 800173a:	074b      	lsls	r3, r1, #29
 800173c:	08c0      	lsrs	r0, r0, #3
 800173e:	4318      	orrs	r0, r3
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	08c9      	lsrs	r1, r1, #3
 8001744:	031b      	lsls	r3, r3, #12
 8001746:	4219      	tst	r1, r3
 8001748:	d007      	beq.n	800175a <__aeabi_dadd+0x482>
 800174a:	08fc      	lsrs	r4, r7, #3
 800174c:	421c      	tst	r4, r3
 800174e:	d104      	bne.n	800175a <__aeabi_dadd+0x482>
 8001750:	0779      	lsls	r1, r7, #29
 8001752:	08d0      	lsrs	r0, r2, #3
 8001754:	4308      	orrs	r0, r1
 8001756:	46e1      	mov	r9, ip
 8001758:	0021      	movs	r1, r4
 800175a:	464c      	mov	r4, r9
 800175c:	0f42      	lsrs	r2, r0, #29
 800175e:	00c9      	lsls	r1, r1, #3
 8001760:	4311      	orrs	r1, r2
 8001762:	00c0      	lsls	r0, r0, #3
 8001764:	4d68      	ldr	r5, [pc, #416]	; (8001908 <__aeabi_dadd+0x630>)
 8001766:	e6b9      	b.n	80014dc <__aeabi_dadd+0x204>
 8001768:	001d      	movs	r5, r3
 800176a:	2200      	movs	r2, #0
 800176c:	2300      	movs	r3, #0
 800176e:	e6c0      	b.n	80014f2 <__aeabi_dadd+0x21a>
 8001770:	2d00      	cmp	r5, #0
 8001772:	d15b      	bne.n	800182c <__aeabi_dadd+0x554>
 8001774:	000d      	movs	r5, r1
 8001776:	4305      	orrs	r5, r0
 8001778:	d100      	bne.n	800177c <__aeabi_dadd+0x4a4>
 800177a:	e6e2      	b.n	8001542 <__aeabi_dadd+0x26a>
 800177c:	1c5d      	adds	r5, r3, #1
 800177e:	d100      	bne.n	8001782 <__aeabi_dadd+0x4aa>
 8001780:	e0b0      	b.n	80018e4 <__aeabi_dadd+0x60c>
 8001782:	4d61      	ldr	r5, [pc, #388]	; (8001908 <__aeabi_dadd+0x630>)
 8001784:	42ae      	cmp	r6, r5
 8001786:	d01f      	beq.n	80017c8 <__aeabi_dadd+0x4f0>
 8001788:	43db      	mvns	r3, r3
 800178a:	2b38      	cmp	r3, #56	; 0x38
 800178c:	dc71      	bgt.n	8001872 <__aeabi_dadd+0x59a>
 800178e:	2b1f      	cmp	r3, #31
 8001790:	dd00      	ble.n	8001794 <__aeabi_dadd+0x4bc>
 8001792:	e096      	b.n	80018c2 <__aeabi_dadd+0x5ea>
 8001794:	2520      	movs	r5, #32
 8001796:	000f      	movs	r7, r1
 8001798:	1aed      	subs	r5, r5, r3
 800179a:	40af      	lsls	r7, r5
 800179c:	46b9      	mov	r9, r7
 800179e:	0007      	movs	r7, r0
 80017a0:	46aa      	mov	sl, r5
 80017a2:	40df      	lsrs	r7, r3
 80017a4:	464d      	mov	r5, r9
 80017a6:	433d      	orrs	r5, r7
 80017a8:	002f      	movs	r7, r5
 80017aa:	4655      	mov	r5, sl
 80017ac:	40a8      	lsls	r0, r5
 80017ae:	40d9      	lsrs	r1, r3
 80017b0:	1e45      	subs	r5, r0, #1
 80017b2:	41a8      	sbcs	r0, r5
 80017b4:	4488      	add	r8, r1
 80017b6:	4307      	orrs	r7, r0
 80017b8:	18bf      	adds	r7, r7, r2
 80017ba:	4297      	cmp	r7, r2
 80017bc:	4192      	sbcs	r2, r2
 80017be:	4251      	negs	r1, r2
 80017c0:	4441      	add	r1, r8
 80017c2:	0035      	movs	r5, r6
 80017c4:	e63a      	b.n	800143c <__aeabi_dadd+0x164>
 80017c6:	4664      	mov	r4, ip
 80017c8:	0035      	movs	r5, r6
 80017ca:	4641      	mov	r1, r8
 80017cc:	0010      	movs	r0, r2
 80017ce:	e685      	b.n	80014dc <__aeabi_dadd+0x204>
 80017d0:	000b      	movs	r3, r1
 80017d2:	4303      	orrs	r3, r0
 80017d4:	2d00      	cmp	r5, #0
 80017d6:	d000      	beq.n	80017da <__aeabi_dadd+0x502>
 80017d8:	e663      	b.n	80014a2 <__aeabi_dadd+0x1ca>
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f5      	beq.n	80017ca <__aeabi_dadd+0x4f2>
 80017de:	4643      	mov	r3, r8
 80017e0:	4313      	orrs	r3, r2
 80017e2:	d100      	bne.n	80017e6 <__aeabi_dadd+0x50e>
 80017e4:	e67a      	b.n	80014dc <__aeabi_dadd+0x204>
 80017e6:	1887      	adds	r7, r0, r2
 80017e8:	4287      	cmp	r7, r0
 80017ea:	4180      	sbcs	r0, r0
 80017ec:	2207      	movs	r2, #7
 80017ee:	4441      	add	r1, r8
 80017f0:	4240      	negs	r0, r0
 80017f2:	1809      	adds	r1, r1, r0
 80017f4:	403a      	ands	r2, r7
 80017f6:	020b      	lsls	r3, r1, #8
 80017f8:	d400      	bmi.n	80017fc <__aeabi_dadd+0x524>
 80017fa:	e6d5      	b.n	80015a8 <__aeabi_dadd+0x2d0>
 80017fc:	4b43      	ldr	r3, [pc, #268]	; (800190c <__aeabi_dadd+0x634>)
 80017fe:	3501      	adds	r5, #1
 8001800:	4019      	ands	r1, r3
 8001802:	e5c9      	b.n	8001398 <__aeabi_dadd+0xc0>
 8001804:	0038      	movs	r0, r7
 8001806:	e669      	b.n	80014dc <__aeabi_dadd+0x204>
 8001808:	001e      	movs	r6, r3
 800180a:	4647      	mov	r7, r8
 800180c:	3e20      	subs	r6, #32
 800180e:	40f7      	lsrs	r7, r6
 8001810:	46bc      	mov	ip, r7
 8001812:	2b20      	cmp	r3, #32
 8001814:	d004      	beq.n	8001820 <__aeabi_dadd+0x548>
 8001816:	2640      	movs	r6, #64	; 0x40
 8001818:	1af3      	subs	r3, r6, r3
 800181a:	4646      	mov	r6, r8
 800181c:	409e      	lsls	r6, r3
 800181e:	4332      	orrs	r2, r6
 8001820:	0017      	movs	r7, r2
 8001822:	4663      	mov	r3, ip
 8001824:	1e7a      	subs	r2, r7, #1
 8001826:	4197      	sbcs	r7, r2
 8001828:	431f      	orrs	r7, r3
 800182a:	e602      	b.n	8001432 <__aeabi_dadd+0x15a>
 800182c:	4d36      	ldr	r5, [pc, #216]	; (8001908 <__aeabi_dadd+0x630>)
 800182e:	42ae      	cmp	r6, r5
 8001830:	d0ca      	beq.n	80017c8 <__aeabi_dadd+0x4f0>
 8001832:	2580      	movs	r5, #128	; 0x80
 8001834:	042d      	lsls	r5, r5, #16
 8001836:	425b      	negs	r3, r3
 8001838:	4329      	orrs	r1, r5
 800183a:	e7a6      	b.n	800178a <__aeabi_dadd+0x4b2>
 800183c:	4308      	orrs	r0, r1
 800183e:	1e41      	subs	r1, r0, #1
 8001840:	4188      	sbcs	r0, r1
 8001842:	e6a6      	b.n	8001592 <__aeabi_dadd+0x2ba>
 8001844:	2b00      	cmp	r3, #0
 8001846:	d100      	bne.n	800184a <__aeabi_dadd+0x572>
 8001848:	e648      	b.n	80014dc <__aeabi_dadd+0x204>
 800184a:	1a87      	subs	r7, r0, r2
 800184c:	4643      	mov	r3, r8
 800184e:	42b8      	cmp	r0, r7
 8001850:	41b6      	sbcs	r6, r6
 8001852:	1acb      	subs	r3, r1, r3
 8001854:	4276      	negs	r6, r6
 8001856:	1b9e      	subs	r6, r3, r6
 8001858:	0233      	lsls	r3, r6, #8
 800185a:	d54b      	bpl.n	80018f4 <__aeabi_dadd+0x61c>
 800185c:	1a17      	subs	r7, r2, r0
 800185e:	4643      	mov	r3, r8
 8001860:	42ba      	cmp	r2, r7
 8001862:	4192      	sbcs	r2, r2
 8001864:	1a59      	subs	r1, r3, r1
 8001866:	4252      	negs	r2, r2
 8001868:	1a89      	subs	r1, r1, r2
 800186a:	2207      	movs	r2, #7
 800186c:	4664      	mov	r4, ip
 800186e:	403a      	ands	r2, r7
 8001870:	e592      	b.n	8001398 <__aeabi_dadd+0xc0>
 8001872:	4301      	orrs	r1, r0
 8001874:	000f      	movs	r7, r1
 8001876:	1e79      	subs	r1, r7, #1
 8001878:	418f      	sbcs	r7, r1
 800187a:	e79d      	b.n	80017b8 <__aeabi_dadd+0x4e0>
 800187c:	001c      	movs	r4, r3
 800187e:	000f      	movs	r7, r1
 8001880:	3c20      	subs	r4, #32
 8001882:	40e7      	lsrs	r7, r4
 8001884:	2b20      	cmp	r3, #32
 8001886:	d003      	beq.n	8001890 <__aeabi_dadd+0x5b8>
 8001888:	2440      	movs	r4, #64	; 0x40
 800188a:	1ae3      	subs	r3, r4, r3
 800188c:	4099      	lsls	r1, r3
 800188e:	4308      	orrs	r0, r1
 8001890:	1e41      	subs	r1, r0, #1
 8001892:	4188      	sbcs	r0, r1
 8001894:	4338      	orrs	r0, r7
 8001896:	e67c      	b.n	8001592 <__aeabi_dadd+0x2ba>
 8001898:	2200      	movs	r2, #0
 800189a:	2400      	movs	r4, #0
 800189c:	e625      	b.n	80014ea <__aeabi_dadd+0x212>
 800189e:	1a17      	subs	r7, r2, r0
 80018a0:	4643      	mov	r3, r8
 80018a2:	42ba      	cmp	r2, r7
 80018a4:	4192      	sbcs	r2, r2
 80018a6:	1a59      	subs	r1, r3, r1
 80018a8:	4252      	negs	r2, r2
 80018aa:	1a89      	subs	r1, r1, r2
 80018ac:	4664      	mov	r4, ip
 80018ae:	0035      	movs	r5, r6
 80018b0:	e543      	b.n	800133a <__aeabi_dadd+0x62>
 80018b2:	4641      	mov	r1, r8
 80018b4:	0010      	movs	r0, r2
 80018b6:	4d14      	ldr	r5, [pc, #80]	; (8001908 <__aeabi_dadd+0x630>)
 80018b8:	e610      	b.n	80014dc <__aeabi_dadd+0x204>
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	2400      	movs	r4, #0
 80018be:	0312      	lsls	r2, r2, #12
 80018c0:	e680      	b.n	80015c4 <__aeabi_dadd+0x2ec>
 80018c2:	001d      	movs	r5, r3
 80018c4:	000f      	movs	r7, r1
 80018c6:	3d20      	subs	r5, #32
 80018c8:	40ef      	lsrs	r7, r5
 80018ca:	46bc      	mov	ip, r7
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	d003      	beq.n	80018d8 <__aeabi_dadd+0x600>
 80018d0:	2540      	movs	r5, #64	; 0x40
 80018d2:	1aeb      	subs	r3, r5, r3
 80018d4:	4099      	lsls	r1, r3
 80018d6:	4308      	orrs	r0, r1
 80018d8:	0007      	movs	r7, r0
 80018da:	4663      	mov	r3, ip
 80018dc:	1e78      	subs	r0, r7, #1
 80018de:	4187      	sbcs	r7, r0
 80018e0:	431f      	orrs	r7, r3
 80018e2:	e769      	b.n	80017b8 <__aeabi_dadd+0x4e0>
 80018e4:	1887      	adds	r7, r0, r2
 80018e6:	4297      	cmp	r7, r2
 80018e8:	419b      	sbcs	r3, r3
 80018ea:	4441      	add	r1, r8
 80018ec:	425b      	negs	r3, r3
 80018ee:	18c9      	adds	r1, r1, r3
 80018f0:	0035      	movs	r5, r6
 80018f2:	e5a3      	b.n	800143c <__aeabi_dadd+0x164>
 80018f4:	003b      	movs	r3, r7
 80018f6:	4333      	orrs	r3, r6
 80018f8:	d0ce      	beq.n	8001898 <__aeabi_dadd+0x5c0>
 80018fa:	2207      	movs	r2, #7
 80018fc:	0031      	movs	r1, r6
 80018fe:	403a      	ands	r2, r7
 8001900:	e652      	b.n	80015a8 <__aeabi_dadd+0x2d0>
 8001902:	2300      	movs	r3, #0
 8001904:	001a      	movs	r2, r3
 8001906:	e5f4      	b.n	80014f2 <__aeabi_dadd+0x21a>
 8001908:	000007ff 	.word	0x000007ff
 800190c:	ff7fffff 	.word	0xff7fffff

08001910 <__aeabi_ddiv>:
 8001910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001912:	4657      	mov	r7, sl
 8001914:	46de      	mov	lr, fp
 8001916:	464e      	mov	r6, r9
 8001918:	4645      	mov	r5, r8
 800191a:	b5e0      	push	{r5, r6, r7, lr}
 800191c:	4683      	mov	fp, r0
 800191e:	0007      	movs	r7, r0
 8001920:	030e      	lsls	r6, r1, #12
 8001922:	0048      	lsls	r0, r1, #1
 8001924:	b085      	sub	sp, #20
 8001926:	4692      	mov	sl, r2
 8001928:	001c      	movs	r4, r3
 800192a:	0b36      	lsrs	r6, r6, #12
 800192c:	0d40      	lsrs	r0, r0, #21
 800192e:	0fcd      	lsrs	r5, r1, #31
 8001930:	2800      	cmp	r0, #0
 8001932:	d100      	bne.n	8001936 <__aeabi_ddiv+0x26>
 8001934:	e09d      	b.n	8001a72 <__aeabi_ddiv+0x162>
 8001936:	4b95      	ldr	r3, [pc, #596]	; (8001b8c <__aeabi_ddiv+0x27c>)
 8001938:	4298      	cmp	r0, r3
 800193a:	d039      	beq.n	80019b0 <__aeabi_ddiv+0xa0>
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	00f6      	lsls	r6, r6, #3
 8001940:	041b      	lsls	r3, r3, #16
 8001942:	431e      	orrs	r6, r3
 8001944:	4a92      	ldr	r2, [pc, #584]	; (8001b90 <__aeabi_ddiv+0x280>)
 8001946:	0f7b      	lsrs	r3, r7, #29
 8001948:	4333      	orrs	r3, r6
 800194a:	4699      	mov	r9, r3
 800194c:	4694      	mov	ip, r2
 800194e:	0003      	movs	r3, r0
 8001950:	4463      	add	r3, ip
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2300      	movs	r3, #0
 8001956:	2600      	movs	r6, #0
 8001958:	00ff      	lsls	r7, r7, #3
 800195a:	9302      	str	r3, [sp, #8]
 800195c:	0323      	lsls	r3, r4, #12
 800195e:	0b1b      	lsrs	r3, r3, #12
 8001960:	4698      	mov	r8, r3
 8001962:	0063      	lsls	r3, r4, #1
 8001964:	0fe4      	lsrs	r4, r4, #31
 8001966:	4652      	mov	r2, sl
 8001968:	0d5b      	lsrs	r3, r3, #21
 800196a:	9401      	str	r4, [sp, #4]
 800196c:	d100      	bne.n	8001970 <__aeabi_ddiv+0x60>
 800196e:	e0b3      	b.n	8001ad8 <__aeabi_ddiv+0x1c8>
 8001970:	4986      	ldr	r1, [pc, #536]	; (8001b8c <__aeabi_ddiv+0x27c>)
 8001972:	428b      	cmp	r3, r1
 8001974:	d100      	bne.n	8001978 <__aeabi_ddiv+0x68>
 8001976:	e09e      	b.n	8001ab6 <__aeabi_ddiv+0x1a6>
 8001978:	4642      	mov	r2, r8
 800197a:	00d1      	lsls	r1, r2, #3
 800197c:	2280      	movs	r2, #128	; 0x80
 800197e:	0412      	lsls	r2, r2, #16
 8001980:	430a      	orrs	r2, r1
 8001982:	4651      	mov	r1, sl
 8001984:	0f49      	lsrs	r1, r1, #29
 8001986:	4311      	orrs	r1, r2
 8001988:	468b      	mov	fp, r1
 800198a:	4981      	ldr	r1, [pc, #516]	; (8001b90 <__aeabi_ddiv+0x280>)
 800198c:	4652      	mov	r2, sl
 800198e:	468c      	mov	ip, r1
 8001990:	9900      	ldr	r1, [sp, #0]
 8001992:	4463      	add	r3, ip
 8001994:	1acb      	subs	r3, r1, r3
 8001996:	2100      	movs	r1, #0
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	002b      	movs	r3, r5
 800199e:	4063      	eors	r3, r4
 80019a0:	469a      	mov	sl, r3
 80019a2:	2e0f      	cmp	r6, #15
 80019a4:	d900      	bls.n	80019a8 <__aeabi_ddiv+0x98>
 80019a6:	e105      	b.n	8001bb4 <__aeabi_ddiv+0x2a4>
 80019a8:	4b7a      	ldr	r3, [pc, #488]	; (8001b94 <__aeabi_ddiv+0x284>)
 80019aa:	00b6      	lsls	r6, r6, #2
 80019ac:	599b      	ldr	r3, [r3, r6]
 80019ae:	469f      	mov	pc, r3
 80019b0:	465b      	mov	r3, fp
 80019b2:	4333      	orrs	r3, r6
 80019b4:	4699      	mov	r9, r3
 80019b6:	d000      	beq.n	80019ba <__aeabi_ddiv+0xaa>
 80019b8:	e0b8      	b.n	8001b2c <__aeabi_ddiv+0x21c>
 80019ba:	2302      	movs	r3, #2
 80019bc:	2608      	movs	r6, #8
 80019be:	2700      	movs	r7, #0
 80019c0:	9000      	str	r0, [sp, #0]
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	e7ca      	b.n	800195c <__aeabi_ddiv+0x4c>
 80019c6:	46cb      	mov	fp, r9
 80019c8:	003a      	movs	r2, r7
 80019ca:	9902      	ldr	r1, [sp, #8]
 80019cc:	9501      	str	r5, [sp, #4]
 80019ce:	9b01      	ldr	r3, [sp, #4]
 80019d0:	469a      	mov	sl, r3
 80019d2:	2902      	cmp	r1, #2
 80019d4:	d027      	beq.n	8001a26 <__aeabi_ddiv+0x116>
 80019d6:	2903      	cmp	r1, #3
 80019d8:	d100      	bne.n	80019dc <__aeabi_ddiv+0xcc>
 80019da:	e280      	b.n	8001ede <__aeabi_ddiv+0x5ce>
 80019dc:	2901      	cmp	r1, #1
 80019de:	d044      	beq.n	8001a6a <__aeabi_ddiv+0x15a>
 80019e0:	496d      	ldr	r1, [pc, #436]	; (8001b98 <__aeabi_ddiv+0x288>)
 80019e2:	9b00      	ldr	r3, [sp, #0]
 80019e4:	468c      	mov	ip, r1
 80019e6:	4463      	add	r3, ip
 80019e8:	001c      	movs	r4, r3
 80019ea:	2c00      	cmp	r4, #0
 80019ec:	dd38      	ble.n	8001a60 <__aeabi_ddiv+0x150>
 80019ee:	0753      	lsls	r3, r2, #29
 80019f0:	d000      	beq.n	80019f4 <__aeabi_ddiv+0xe4>
 80019f2:	e213      	b.n	8001e1c <__aeabi_ddiv+0x50c>
 80019f4:	08d2      	lsrs	r2, r2, #3
 80019f6:	465b      	mov	r3, fp
 80019f8:	01db      	lsls	r3, r3, #7
 80019fa:	d509      	bpl.n	8001a10 <__aeabi_ddiv+0x100>
 80019fc:	4659      	mov	r1, fp
 80019fe:	4b67      	ldr	r3, [pc, #412]	; (8001b9c <__aeabi_ddiv+0x28c>)
 8001a00:	4019      	ands	r1, r3
 8001a02:	468b      	mov	fp, r1
 8001a04:	2180      	movs	r1, #128	; 0x80
 8001a06:	00c9      	lsls	r1, r1, #3
 8001a08:	468c      	mov	ip, r1
 8001a0a:	9b00      	ldr	r3, [sp, #0]
 8001a0c:	4463      	add	r3, ip
 8001a0e:	001c      	movs	r4, r3
 8001a10:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <__aeabi_ddiv+0x290>)
 8001a12:	429c      	cmp	r4, r3
 8001a14:	dc07      	bgt.n	8001a26 <__aeabi_ddiv+0x116>
 8001a16:	465b      	mov	r3, fp
 8001a18:	0564      	lsls	r4, r4, #21
 8001a1a:	075f      	lsls	r7, r3, #29
 8001a1c:	025b      	lsls	r3, r3, #9
 8001a1e:	4317      	orrs	r7, r2
 8001a20:	0b1b      	lsrs	r3, r3, #12
 8001a22:	0d62      	lsrs	r2, r4, #21
 8001a24:	e002      	b.n	8001a2c <__aeabi_ddiv+0x11c>
 8001a26:	2300      	movs	r3, #0
 8001a28:	2700      	movs	r7, #0
 8001a2a:	4a58      	ldr	r2, [pc, #352]	; (8001b8c <__aeabi_ddiv+0x27c>)
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	031b      	lsls	r3, r3, #12
 8001a30:	0b1c      	lsrs	r4, r3, #12
 8001a32:	0d0b      	lsrs	r3, r1, #20
 8001a34:	051b      	lsls	r3, r3, #20
 8001a36:	4323      	orrs	r3, r4
 8001a38:	0514      	lsls	r4, r2, #20
 8001a3a:	4a5a      	ldr	r2, [pc, #360]	; (8001ba4 <__aeabi_ddiv+0x294>)
 8001a3c:	0038      	movs	r0, r7
 8001a3e:	4013      	ands	r3, r2
 8001a40:	431c      	orrs	r4, r3
 8001a42:	4653      	mov	r3, sl
 8001a44:	0064      	lsls	r4, r4, #1
 8001a46:	07db      	lsls	r3, r3, #31
 8001a48:	0864      	lsrs	r4, r4, #1
 8001a4a:	431c      	orrs	r4, r3
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	b005      	add	sp, #20
 8001a50:	bc3c      	pop	{r2, r3, r4, r5}
 8001a52:	4690      	mov	r8, r2
 8001a54:	4699      	mov	r9, r3
 8001a56:	46a2      	mov	sl, r4
 8001a58:	46ab      	mov	fp, r5
 8001a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4252      	negs	r2, r2
 8001a60:	2301      	movs	r3, #1
 8001a62:	1b1b      	subs	r3, r3, r4
 8001a64:	2b38      	cmp	r3, #56	; 0x38
 8001a66:	dc00      	bgt.n	8001a6a <__aeabi_ddiv+0x15a>
 8001a68:	e1ad      	b.n	8001dc6 <__aeabi_ddiv+0x4b6>
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2700      	movs	r7, #0
 8001a70:	e7dc      	b.n	8001a2c <__aeabi_ddiv+0x11c>
 8001a72:	465b      	mov	r3, fp
 8001a74:	4333      	orrs	r3, r6
 8001a76:	4699      	mov	r9, r3
 8001a78:	d05e      	beq.n	8001b38 <__aeabi_ddiv+0x228>
 8001a7a:	2e00      	cmp	r6, #0
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_ddiv+0x170>
 8001a7e:	e18a      	b.n	8001d96 <__aeabi_ddiv+0x486>
 8001a80:	0030      	movs	r0, r6
 8001a82:	f001 f9fd 	bl	8002e80 <__clzsi2>
 8001a86:	0003      	movs	r3, r0
 8001a88:	3b0b      	subs	r3, #11
 8001a8a:	2b1c      	cmp	r3, #28
 8001a8c:	dd00      	ble.n	8001a90 <__aeabi_ddiv+0x180>
 8001a8e:	e17b      	b.n	8001d88 <__aeabi_ddiv+0x478>
 8001a90:	221d      	movs	r2, #29
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	465a      	mov	r2, fp
 8001a96:	0001      	movs	r1, r0
 8001a98:	40da      	lsrs	r2, r3
 8001a9a:	3908      	subs	r1, #8
 8001a9c:	408e      	lsls	r6, r1
 8001a9e:	0013      	movs	r3, r2
 8001aa0:	465f      	mov	r7, fp
 8001aa2:	4333      	orrs	r3, r6
 8001aa4:	4699      	mov	r9, r3
 8001aa6:	408f      	lsls	r7, r1
 8001aa8:	4b3f      	ldr	r3, [pc, #252]	; (8001ba8 <__aeabi_ddiv+0x298>)
 8001aaa:	2600      	movs	r6, #0
 8001aac:	1a1b      	subs	r3, r3, r0
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	e752      	b.n	800195c <__aeabi_ddiv+0x4c>
 8001ab6:	4641      	mov	r1, r8
 8001ab8:	4653      	mov	r3, sl
 8001aba:	430b      	orrs	r3, r1
 8001abc:	493b      	ldr	r1, [pc, #236]	; (8001bac <__aeabi_ddiv+0x29c>)
 8001abe:	469b      	mov	fp, r3
 8001ac0:	468c      	mov	ip, r1
 8001ac2:	9b00      	ldr	r3, [sp, #0]
 8001ac4:	4463      	add	r3, ip
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	465b      	mov	r3, fp
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d13b      	bne.n	8001b46 <__aeabi_ddiv+0x236>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	431e      	orrs	r6, r3
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	e761      	b.n	800199c <__aeabi_ddiv+0x8c>
 8001ad8:	4643      	mov	r3, r8
 8001ada:	4313      	orrs	r3, r2
 8001adc:	469b      	mov	fp, r3
 8001ade:	d037      	beq.n	8001b50 <__aeabi_ddiv+0x240>
 8001ae0:	4643      	mov	r3, r8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_ddiv+0x1d8>
 8001ae6:	e162      	b.n	8001dae <__aeabi_ddiv+0x49e>
 8001ae8:	4640      	mov	r0, r8
 8001aea:	f001 f9c9 	bl	8002e80 <__clzsi2>
 8001aee:	0003      	movs	r3, r0
 8001af0:	3b0b      	subs	r3, #11
 8001af2:	2b1c      	cmp	r3, #28
 8001af4:	dd00      	ble.n	8001af8 <__aeabi_ddiv+0x1e8>
 8001af6:	e153      	b.n	8001da0 <__aeabi_ddiv+0x490>
 8001af8:	0002      	movs	r2, r0
 8001afa:	4641      	mov	r1, r8
 8001afc:	3a08      	subs	r2, #8
 8001afe:	4091      	lsls	r1, r2
 8001b00:	4688      	mov	r8, r1
 8001b02:	211d      	movs	r1, #29
 8001b04:	1acb      	subs	r3, r1, r3
 8001b06:	4651      	mov	r1, sl
 8001b08:	40d9      	lsrs	r1, r3
 8001b0a:	000b      	movs	r3, r1
 8001b0c:	4641      	mov	r1, r8
 8001b0e:	430b      	orrs	r3, r1
 8001b10:	469b      	mov	fp, r3
 8001b12:	4653      	mov	r3, sl
 8001b14:	4093      	lsls	r3, r2
 8001b16:	001a      	movs	r2, r3
 8001b18:	9b00      	ldr	r3, [sp, #0]
 8001b1a:	4925      	ldr	r1, [pc, #148]	; (8001bb0 <__aeabi_ddiv+0x2a0>)
 8001b1c:	469c      	mov	ip, r3
 8001b1e:	4460      	add	r0, ip
 8001b20:	0003      	movs	r3, r0
 8001b22:	468c      	mov	ip, r1
 8001b24:	4463      	add	r3, ip
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2100      	movs	r1, #0
 8001b2a:	e737      	b.n	800199c <__aeabi_ddiv+0x8c>
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	46b1      	mov	r9, r6
 8001b30:	9000      	str	r0, [sp, #0]
 8001b32:	260c      	movs	r6, #12
 8001b34:	9302      	str	r3, [sp, #8]
 8001b36:	e711      	b.n	800195c <__aeabi_ddiv+0x4c>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	2604      	movs	r6, #4
 8001b40:	2700      	movs	r7, #0
 8001b42:	9302      	str	r3, [sp, #8]
 8001b44:	e70a      	b.n	800195c <__aeabi_ddiv+0x4c>
 8001b46:	2303      	movs	r3, #3
 8001b48:	46c3      	mov	fp, r8
 8001b4a:	431e      	orrs	r6, r3
 8001b4c:	2103      	movs	r1, #3
 8001b4e:	e725      	b.n	800199c <__aeabi_ddiv+0x8c>
 8001b50:	3301      	adds	r3, #1
 8001b52:	431e      	orrs	r6, r3
 8001b54:	2200      	movs	r2, #0
 8001b56:	2101      	movs	r1, #1
 8001b58:	e720      	b.n	800199c <__aeabi_ddiv+0x8c>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	469a      	mov	sl, r3
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	2700      	movs	r7, #0
 8001b62:	031b      	lsls	r3, r3, #12
 8001b64:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <__aeabi_ddiv+0x27c>)
 8001b66:	e761      	b.n	8001a2c <__aeabi_ddiv+0x11c>
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	4649      	mov	r1, r9
 8001b6c:	031b      	lsls	r3, r3, #12
 8001b6e:	4219      	tst	r1, r3
 8001b70:	d100      	bne.n	8001b74 <__aeabi_ddiv+0x264>
 8001b72:	e0e2      	b.n	8001d3a <__aeabi_ddiv+0x42a>
 8001b74:	4659      	mov	r1, fp
 8001b76:	4219      	tst	r1, r3
 8001b78:	d000      	beq.n	8001b7c <__aeabi_ddiv+0x26c>
 8001b7a:	e0de      	b.n	8001d3a <__aeabi_ddiv+0x42a>
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	031b      	lsls	r3, r3, #12
 8001b80:	0017      	movs	r7, r2
 8001b82:	0b1b      	lsrs	r3, r3, #12
 8001b84:	46a2      	mov	sl, r4
 8001b86:	4a01      	ldr	r2, [pc, #4]	; (8001b8c <__aeabi_ddiv+0x27c>)
 8001b88:	e750      	b.n	8001a2c <__aeabi_ddiv+0x11c>
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	000007ff 	.word	0x000007ff
 8001b90:	fffffc01 	.word	0xfffffc01
 8001b94:	0801ca44 	.word	0x0801ca44
 8001b98:	000003ff 	.word	0x000003ff
 8001b9c:	feffffff 	.word	0xfeffffff
 8001ba0:	000007fe 	.word	0x000007fe
 8001ba4:	800fffff 	.word	0x800fffff
 8001ba8:	fffffc0d 	.word	0xfffffc0d
 8001bac:	fffff801 	.word	0xfffff801
 8001bb0:	000003f3 	.word	0x000003f3
 8001bb4:	45d9      	cmp	r9, fp
 8001bb6:	d900      	bls.n	8001bba <__aeabi_ddiv+0x2aa>
 8001bb8:	e0cb      	b.n	8001d52 <__aeabi_ddiv+0x442>
 8001bba:	d100      	bne.n	8001bbe <__aeabi_ddiv+0x2ae>
 8001bbc:	e0c6      	b.n	8001d4c <__aeabi_ddiv+0x43c>
 8001bbe:	003c      	movs	r4, r7
 8001bc0:	4648      	mov	r0, r9
 8001bc2:	2700      	movs	r7, #0
 8001bc4:	9b00      	ldr	r3, [sp, #0]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	465b      	mov	r3, fp
 8001bcc:	0e16      	lsrs	r6, r2, #24
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	431e      	orrs	r6, r3
 8001bd2:	0213      	lsls	r3, r2, #8
 8001bd4:	4698      	mov	r8, r3
 8001bd6:	0433      	lsls	r3, r6, #16
 8001bd8:	0c1b      	lsrs	r3, r3, #16
 8001bda:	4699      	mov	r9, r3
 8001bdc:	0c31      	lsrs	r1, r6, #16
 8001bde:	9101      	str	r1, [sp, #4]
 8001be0:	f7fe fb18 	bl	8000214 <__aeabi_uidivmod>
 8001be4:	464a      	mov	r2, r9
 8001be6:	4342      	muls	r2, r0
 8001be8:	040b      	lsls	r3, r1, #16
 8001bea:	0c21      	lsrs	r1, r4, #16
 8001bec:	0005      	movs	r5, r0
 8001bee:	4319      	orrs	r1, r3
 8001bf0:	428a      	cmp	r2, r1
 8001bf2:	d907      	bls.n	8001c04 <__aeabi_ddiv+0x2f4>
 8001bf4:	1989      	adds	r1, r1, r6
 8001bf6:	3d01      	subs	r5, #1
 8001bf8:	428e      	cmp	r6, r1
 8001bfa:	d803      	bhi.n	8001c04 <__aeabi_ddiv+0x2f4>
 8001bfc:	428a      	cmp	r2, r1
 8001bfe:	d901      	bls.n	8001c04 <__aeabi_ddiv+0x2f4>
 8001c00:	1e85      	subs	r5, r0, #2
 8001c02:	1989      	adds	r1, r1, r6
 8001c04:	1a88      	subs	r0, r1, r2
 8001c06:	9901      	ldr	r1, [sp, #4]
 8001c08:	f7fe fb04 	bl	8000214 <__aeabi_uidivmod>
 8001c0c:	0409      	lsls	r1, r1, #16
 8001c0e:	468c      	mov	ip, r1
 8001c10:	464a      	mov	r2, r9
 8001c12:	0421      	lsls	r1, r4, #16
 8001c14:	4664      	mov	r4, ip
 8001c16:	4342      	muls	r2, r0
 8001c18:	0c09      	lsrs	r1, r1, #16
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	4321      	orrs	r1, r4
 8001c1e:	428a      	cmp	r2, r1
 8001c20:	d904      	bls.n	8001c2c <__aeabi_ddiv+0x31c>
 8001c22:	1989      	adds	r1, r1, r6
 8001c24:	3b01      	subs	r3, #1
 8001c26:	428e      	cmp	r6, r1
 8001c28:	d800      	bhi.n	8001c2c <__aeabi_ddiv+0x31c>
 8001c2a:	e0f1      	b.n	8001e10 <__aeabi_ddiv+0x500>
 8001c2c:	042d      	lsls	r5, r5, #16
 8001c2e:	431d      	orrs	r5, r3
 8001c30:	46ab      	mov	fp, r5
 8001c32:	4643      	mov	r3, r8
 8001c34:	1a89      	subs	r1, r1, r2
 8001c36:	4642      	mov	r2, r8
 8001c38:	0c28      	lsrs	r0, r5, #16
 8001c3a:	0412      	lsls	r2, r2, #16
 8001c3c:	0c1d      	lsrs	r5, r3, #16
 8001c3e:	465b      	mov	r3, fp
 8001c40:	0c14      	lsrs	r4, r2, #16
 8001c42:	0022      	movs	r2, r4
 8001c44:	041b      	lsls	r3, r3, #16
 8001c46:	0c1b      	lsrs	r3, r3, #16
 8001c48:	435a      	muls	r2, r3
 8001c4a:	9403      	str	r4, [sp, #12]
 8001c4c:	436b      	muls	r3, r5
 8001c4e:	4344      	muls	r4, r0
 8001c50:	9502      	str	r5, [sp, #8]
 8001c52:	4368      	muls	r0, r5
 8001c54:	191b      	adds	r3, r3, r4
 8001c56:	0c15      	lsrs	r5, r2, #16
 8001c58:	18eb      	adds	r3, r5, r3
 8001c5a:	429c      	cmp	r4, r3
 8001c5c:	d903      	bls.n	8001c66 <__aeabi_ddiv+0x356>
 8001c5e:	2480      	movs	r4, #128	; 0x80
 8001c60:	0264      	lsls	r4, r4, #9
 8001c62:	46a4      	mov	ip, r4
 8001c64:	4460      	add	r0, ip
 8001c66:	0c1c      	lsrs	r4, r3, #16
 8001c68:	0415      	lsls	r5, r2, #16
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	0c2d      	lsrs	r5, r5, #16
 8001c6e:	1820      	adds	r0, r4, r0
 8001c70:	195d      	adds	r5, r3, r5
 8001c72:	4281      	cmp	r1, r0
 8001c74:	d377      	bcc.n	8001d66 <__aeabi_ddiv+0x456>
 8001c76:	d073      	beq.n	8001d60 <__aeabi_ddiv+0x450>
 8001c78:	1a0c      	subs	r4, r1, r0
 8001c7a:	4aa2      	ldr	r2, [pc, #648]	; (8001f04 <__aeabi_ddiv+0x5f4>)
 8001c7c:	1b7d      	subs	r5, r7, r5
 8001c7e:	42af      	cmp	r7, r5
 8001c80:	41bf      	sbcs	r7, r7
 8001c82:	4694      	mov	ip, r2
 8001c84:	9b00      	ldr	r3, [sp, #0]
 8001c86:	427f      	negs	r7, r7
 8001c88:	4463      	add	r3, ip
 8001c8a:	1be0      	subs	r0, r4, r7
 8001c8c:	001c      	movs	r4, r3
 8001c8e:	4286      	cmp	r6, r0
 8001c90:	d100      	bne.n	8001c94 <__aeabi_ddiv+0x384>
 8001c92:	e0db      	b.n	8001e4c <__aeabi_ddiv+0x53c>
 8001c94:	9901      	ldr	r1, [sp, #4]
 8001c96:	f7fe fabd 	bl	8000214 <__aeabi_uidivmod>
 8001c9a:	464a      	mov	r2, r9
 8001c9c:	4342      	muls	r2, r0
 8001c9e:	040b      	lsls	r3, r1, #16
 8001ca0:	0c29      	lsrs	r1, r5, #16
 8001ca2:	0007      	movs	r7, r0
 8001ca4:	4319      	orrs	r1, r3
 8001ca6:	428a      	cmp	r2, r1
 8001ca8:	d907      	bls.n	8001cba <__aeabi_ddiv+0x3aa>
 8001caa:	1989      	adds	r1, r1, r6
 8001cac:	3f01      	subs	r7, #1
 8001cae:	428e      	cmp	r6, r1
 8001cb0:	d803      	bhi.n	8001cba <__aeabi_ddiv+0x3aa>
 8001cb2:	428a      	cmp	r2, r1
 8001cb4:	d901      	bls.n	8001cba <__aeabi_ddiv+0x3aa>
 8001cb6:	1e87      	subs	r7, r0, #2
 8001cb8:	1989      	adds	r1, r1, r6
 8001cba:	1a88      	subs	r0, r1, r2
 8001cbc:	9901      	ldr	r1, [sp, #4]
 8001cbe:	f7fe faa9 	bl	8000214 <__aeabi_uidivmod>
 8001cc2:	0409      	lsls	r1, r1, #16
 8001cc4:	464a      	mov	r2, r9
 8001cc6:	4689      	mov	r9, r1
 8001cc8:	0429      	lsls	r1, r5, #16
 8001cca:	464d      	mov	r5, r9
 8001ccc:	4342      	muls	r2, r0
 8001cce:	0c09      	lsrs	r1, r1, #16
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	4329      	orrs	r1, r5
 8001cd4:	428a      	cmp	r2, r1
 8001cd6:	d907      	bls.n	8001ce8 <__aeabi_ddiv+0x3d8>
 8001cd8:	1989      	adds	r1, r1, r6
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	428e      	cmp	r6, r1
 8001cde:	d803      	bhi.n	8001ce8 <__aeabi_ddiv+0x3d8>
 8001ce0:	428a      	cmp	r2, r1
 8001ce2:	d901      	bls.n	8001ce8 <__aeabi_ddiv+0x3d8>
 8001ce4:	1e83      	subs	r3, r0, #2
 8001ce6:	1989      	adds	r1, r1, r6
 8001ce8:	043f      	lsls	r7, r7, #16
 8001cea:	1a89      	subs	r1, r1, r2
 8001cec:	003a      	movs	r2, r7
 8001cee:	9f03      	ldr	r7, [sp, #12]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	0038      	movs	r0, r7
 8001cf4:	0413      	lsls	r3, r2, #16
 8001cf6:	0c1b      	lsrs	r3, r3, #16
 8001cf8:	4358      	muls	r0, r3
 8001cfa:	4681      	mov	r9, r0
 8001cfc:	9802      	ldr	r0, [sp, #8]
 8001cfe:	0c15      	lsrs	r5, r2, #16
 8001d00:	436f      	muls	r7, r5
 8001d02:	4343      	muls	r3, r0
 8001d04:	4345      	muls	r5, r0
 8001d06:	4648      	mov	r0, r9
 8001d08:	0c00      	lsrs	r0, r0, #16
 8001d0a:	4684      	mov	ip, r0
 8001d0c:	19db      	adds	r3, r3, r7
 8001d0e:	4463      	add	r3, ip
 8001d10:	429f      	cmp	r7, r3
 8001d12:	d903      	bls.n	8001d1c <__aeabi_ddiv+0x40c>
 8001d14:	2080      	movs	r0, #128	; 0x80
 8001d16:	0240      	lsls	r0, r0, #9
 8001d18:	4684      	mov	ip, r0
 8001d1a:	4465      	add	r5, ip
 8001d1c:	4648      	mov	r0, r9
 8001d1e:	0c1f      	lsrs	r7, r3, #16
 8001d20:	0400      	lsls	r0, r0, #16
 8001d22:	041b      	lsls	r3, r3, #16
 8001d24:	0c00      	lsrs	r0, r0, #16
 8001d26:	197d      	adds	r5, r7, r5
 8001d28:	1818      	adds	r0, r3, r0
 8001d2a:	42a9      	cmp	r1, r5
 8001d2c:	d200      	bcs.n	8001d30 <__aeabi_ddiv+0x420>
 8001d2e:	e084      	b.n	8001e3a <__aeabi_ddiv+0x52a>
 8001d30:	d100      	bne.n	8001d34 <__aeabi_ddiv+0x424>
 8001d32:	e07f      	b.n	8001e34 <__aeabi_ddiv+0x524>
 8001d34:	2301      	movs	r3, #1
 8001d36:	431a      	orrs	r2, r3
 8001d38:	e657      	b.n	80019ea <__aeabi_ddiv+0xda>
 8001d3a:	2380      	movs	r3, #128	; 0x80
 8001d3c:	464a      	mov	r2, r9
 8001d3e:	031b      	lsls	r3, r3, #12
 8001d40:	4313      	orrs	r3, r2
 8001d42:	031b      	lsls	r3, r3, #12
 8001d44:	0b1b      	lsrs	r3, r3, #12
 8001d46:	46aa      	mov	sl, r5
 8001d48:	4a6f      	ldr	r2, [pc, #444]	; (8001f08 <__aeabi_ddiv+0x5f8>)
 8001d4a:	e66f      	b.n	8001a2c <__aeabi_ddiv+0x11c>
 8001d4c:	42ba      	cmp	r2, r7
 8001d4e:	d900      	bls.n	8001d52 <__aeabi_ddiv+0x442>
 8001d50:	e735      	b.n	8001bbe <__aeabi_ddiv+0x2ae>
 8001d52:	464b      	mov	r3, r9
 8001d54:	07dc      	lsls	r4, r3, #31
 8001d56:	0858      	lsrs	r0, r3, #1
 8001d58:	087b      	lsrs	r3, r7, #1
 8001d5a:	431c      	orrs	r4, r3
 8001d5c:	07ff      	lsls	r7, r7, #31
 8001d5e:	e734      	b.n	8001bca <__aeabi_ddiv+0x2ba>
 8001d60:	2400      	movs	r4, #0
 8001d62:	42af      	cmp	r7, r5
 8001d64:	d289      	bcs.n	8001c7a <__aeabi_ddiv+0x36a>
 8001d66:	4447      	add	r7, r8
 8001d68:	4547      	cmp	r7, r8
 8001d6a:	41a4      	sbcs	r4, r4
 8001d6c:	465b      	mov	r3, fp
 8001d6e:	4264      	negs	r4, r4
 8001d70:	19a4      	adds	r4, r4, r6
 8001d72:	1864      	adds	r4, r4, r1
 8001d74:	3b01      	subs	r3, #1
 8001d76:	42a6      	cmp	r6, r4
 8001d78:	d21e      	bcs.n	8001db8 <__aeabi_ddiv+0x4a8>
 8001d7a:	42a0      	cmp	r0, r4
 8001d7c:	d86d      	bhi.n	8001e5a <__aeabi_ddiv+0x54a>
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_ddiv+0x472>
 8001d80:	e0b6      	b.n	8001ef0 <__aeabi_ddiv+0x5e0>
 8001d82:	1a24      	subs	r4, r4, r0
 8001d84:	469b      	mov	fp, r3
 8001d86:	e778      	b.n	8001c7a <__aeabi_ddiv+0x36a>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	465a      	mov	r2, fp
 8001d8c:	3b28      	subs	r3, #40	; 0x28
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	2700      	movs	r7, #0
 8001d92:	4691      	mov	r9, r2
 8001d94:	e688      	b.n	8001aa8 <__aeabi_ddiv+0x198>
 8001d96:	4658      	mov	r0, fp
 8001d98:	f001 f872 	bl	8002e80 <__clzsi2>
 8001d9c:	3020      	adds	r0, #32
 8001d9e:	e672      	b.n	8001a86 <__aeabi_ddiv+0x176>
 8001da0:	0003      	movs	r3, r0
 8001da2:	4652      	mov	r2, sl
 8001da4:	3b28      	subs	r3, #40	; 0x28
 8001da6:	409a      	lsls	r2, r3
 8001da8:	4693      	mov	fp, r2
 8001daa:	2200      	movs	r2, #0
 8001dac:	e6b4      	b.n	8001b18 <__aeabi_ddiv+0x208>
 8001dae:	4650      	mov	r0, sl
 8001db0:	f001 f866 	bl	8002e80 <__clzsi2>
 8001db4:	3020      	adds	r0, #32
 8001db6:	e69a      	b.n	8001aee <__aeabi_ddiv+0x1de>
 8001db8:	42a6      	cmp	r6, r4
 8001dba:	d1e2      	bne.n	8001d82 <__aeabi_ddiv+0x472>
 8001dbc:	45b8      	cmp	r8, r7
 8001dbe:	d9dc      	bls.n	8001d7a <__aeabi_ddiv+0x46a>
 8001dc0:	1a34      	subs	r4, r6, r0
 8001dc2:	469b      	mov	fp, r3
 8001dc4:	e759      	b.n	8001c7a <__aeabi_ddiv+0x36a>
 8001dc6:	2b1f      	cmp	r3, #31
 8001dc8:	dc65      	bgt.n	8001e96 <__aeabi_ddiv+0x586>
 8001dca:	4c50      	ldr	r4, [pc, #320]	; (8001f0c <__aeabi_ddiv+0x5fc>)
 8001dcc:	9900      	ldr	r1, [sp, #0]
 8001dce:	46a4      	mov	ip, r4
 8001dd0:	465c      	mov	r4, fp
 8001dd2:	4461      	add	r1, ip
 8001dd4:	0008      	movs	r0, r1
 8001dd6:	408c      	lsls	r4, r1
 8001dd8:	0011      	movs	r1, r2
 8001dda:	4082      	lsls	r2, r0
 8001ddc:	40d9      	lsrs	r1, r3
 8001dde:	1e50      	subs	r0, r2, #1
 8001de0:	4182      	sbcs	r2, r0
 8001de2:	430c      	orrs	r4, r1
 8001de4:	4314      	orrs	r4, r2
 8001de6:	465a      	mov	r2, fp
 8001de8:	40da      	lsrs	r2, r3
 8001dea:	0013      	movs	r3, r2
 8001dec:	0762      	lsls	r2, r4, #29
 8001dee:	d009      	beq.n	8001e04 <__aeabi_ddiv+0x4f4>
 8001df0:	220f      	movs	r2, #15
 8001df2:	4022      	ands	r2, r4
 8001df4:	2a04      	cmp	r2, #4
 8001df6:	d005      	beq.n	8001e04 <__aeabi_ddiv+0x4f4>
 8001df8:	0022      	movs	r2, r4
 8001dfa:	1d14      	adds	r4, r2, #4
 8001dfc:	4294      	cmp	r4, r2
 8001dfe:	4189      	sbcs	r1, r1
 8001e00:	4249      	negs	r1, r1
 8001e02:	185b      	adds	r3, r3, r1
 8001e04:	021a      	lsls	r2, r3, #8
 8001e06:	d562      	bpl.n	8001ece <__aeabi_ddiv+0x5be>
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2700      	movs	r7, #0
 8001e0e:	e60d      	b.n	8001a2c <__aeabi_ddiv+0x11c>
 8001e10:	428a      	cmp	r2, r1
 8001e12:	d800      	bhi.n	8001e16 <__aeabi_ddiv+0x506>
 8001e14:	e70a      	b.n	8001c2c <__aeabi_ddiv+0x31c>
 8001e16:	1e83      	subs	r3, r0, #2
 8001e18:	1989      	adds	r1, r1, r6
 8001e1a:	e707      	b.n	8001c2c <__aeabi_ddiv+0x31c>
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d100      	bne.n	8001e26 <__aeabi_ddiv+0x516>
 8001e24:	e5e6      	b.n	80019f4 <__aeabi_ddiv+0xe4>
 8001e26:	1d17      	adds	r7, r2, #4
 8001e28:	4297      	cmp	r7, r2
 8001e2a:	4192      	sbcs	r2, r2
 8001e2c:	4253      	negs	r3, r2
 8001e2e:	449b      	add	fp, r3
 8001e30:	08fa      	lsrs	r2, r7, #3
 8001e32:	e5e0      	b.n	80019f6 <__aeabi_ddiv+0xe6>
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d100      	bne.n	8001e3a <__aeabi_ddiv+0x52a>
 8001e38:	e5d7      	b.n	80019ea <__aeabi_ddiv+0xda>
 8001e3a:	1871      	adds	r1, r6, r1
 8001e3c:	1e53      	subs	r3, r2, #1
 8001e3e:	42b1      	cmp	r1, r6
 8001e40:	d327      	bcc.n	8001e92 <__aeabi_ddiv+0x582>
 8001e42:	42a9      	cmp	r1, r5
 8001e44:	d315      	bcc.n	8001e72 <__aeabi_ddiv+0x562>
 8001e46:	d058      	beq.n	8001efa <__aeabi_ddiv+0x5ea>
 8001e48:	001a      	movs	r2, r3
 8001e4a:	e773      	b.n	8001d34 <__aeabi_ddiv+0x424>
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	dc00      	bgt.n	8001e52 <__aeabi_ddiv+0x542>
 8001e50:	e604      	b.n	8001a5c <__aeabi_ddiv+0x14c>
 8001e52:	2301      	movs	r3, #1
 8001e54:	2200      	movs	r2, #0
 8001e56:	449b      	add	fp, r3
 8001e58:	e5cd      	b.n	80019f6 <__aeabi_ddiv+0xe6>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	4447      	add	r7, r8
 8001e5e:	4547      	cmp	r7, r8
 8001e60:	4189      	sbcs	r1, r1
 8001e62:	425b      	negs	r3, r3
 8001e64:	469c      	mov	ip, r3
 8001e66:	4249      	negs	r1, r1
 8001e68:	1989      	adds	r1, r1, r6
 8001e6a:	190c      	adds	r4, r1, r4
 8001e6c:	44e3      	add	fp, ip
 8001e6e:	1a24      	subs	r4, r4, r0
 8001e70:	e703      	b.n	8001c7a <__aeabi_ddiv+0x36a>
 8001e72:	4643      	mov	r3, r8
 8001e74:	005f      	lsls	r7, r3, #1
 8001e76:	4547      	cmp	r7, r8
 8001e78:	419b      	sbcs	r3, r3
 8001e7a:	46b8      	mov	r8, r7
 8001e7c:	425b      	negs	r3, r3
 8001e7e:	199e      	adds	r6, r3, r6
 8001e80:	3a02      	subs	r2, #2
 8001e82:	1989      	adds	r1, r1, r6
 8001e84:	42a9      	cmp	r1, r5
 8001e86:	d000      	beq.n	8001e8a <__aeabi_ddiv+0x57a>
 8001e88:	e754      	b.n	8001d34 <__aeabi_ddiv+0x424>
 8001e8a:	4540      	cmp	r0, r8
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_ddiv+0x580>
 8001e8e:	e751      	b.n	8001d34 <__aeabi_ddiv+0x424>
 8001e90:	e5ab      	b.n	80019ea <__aeabi_ddiv+0xda>
 8001e92:	001a      	movs	r2, r3
 8001e94:	e7f6      	b.n	8001e84 <__aeabi_ddiv+0x574>
 8001e96:	211f      	movs	r1, #31
 8001e98:	465f      	mov	r7, fp
 8001e9a:	4249      	negs	r1, r1
 8001e9c:	1b0c      	subs	r4, r1, r4
 8001e9e:	40e7      	lsrs	r7, r4
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	d007      	beq.n	8001eb4 <__aeabi_ddiv+0x5a4>
 8001ea4:	491a      	ldr	r1, [pc, #104]	; (8001f10 <__aeabi_ddiv+0x600>)
 8001ea6:	9b00      	ldr	r3, [sp, #0]
 8001ea8:	468c      	mov	ip, r1
 8001eaa:	4463      	add	r3, ip
 8001eac:	0018      	movs	r0, r3
 8001eae:	465b      	mov	r3, fp
 8001eb0:	4083      	lsls	r3, r0
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	1e50      	subs	r0, r2, #1
 8001eb6:	4182      	sbcs	r2, r0
 8001eb8:	433a      	orrs	r2, r7
 8001eba:	2707      	movs	r7, #7
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	4017      	ands	r7, r2
 8001ec0:	d009      	beq.n	8001ed6 <__aeabi_ddiv+0x5c6>
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	4011      	ands	r1, r2
 8001ec8:	0014      	movs	r4, r2
 8001eca:	2904      	cmp	r1, #4
 8001ecc:	d195      	bne.n	8001dfa <__aeabi_ddiv+0x4ea>
 8001ece:	0022      	movs	r2, r4
 8001ed0:	075f      	lsls	r7, r3, #29
 8001ed2:	025b      	lsls	r3, r3, #9
 8001ed4:	0b1b      	lsrs	r3, r3, #12
 8001ed6:	08d2      	lsrs	r2, r2, #3
 8001ed8:	4317      	orrs	r7, r2
 8001eda:	2200      	movs	r2, #0
 8001edc:	e5a6      	b.n	8001a2c <__aeabi_ddiv+0x11c>
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	4659      	mov	r1, fp
 8001ee2:	031b      	lsls	r3, r3, #12
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	031b      	lsls	r3, r3, #12
 8001ee8:	0017      	movs	r7, r2
 8001eea:	0b1b      	lsrs	r3, r3, #12
 8001eec:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <__aeabi_ddiv+0x5f8>)
 8001eee:	e59d      	b.n	8001a2c <__aeabi_ddiv+0x11c>
 8001ef0:	42bd      	cmp	r5, r7
 8001ef2:	d8b2      	bhi.n	8001e5a <__aeabi_ddiv+0x54a>
 8001ef4:	469b      	mov	fp, r3
 8001ef6:	2400      	movs	r4, #0
 8001ef8:	e6bf      	b.n	8001c7a <__aeabi_ddiv+0x36a>
 8001efa:	4580      	cmp	r8, r0
 8001efc:	d3b9      	bcc.n	8001e72 <__aeabi_ddiv+0x562>
 8001efe:	001a      	movs	r2, r3
 8001f00:	e7c3      	b.n	8001e8a <__aeabi_ddiv+0x57a>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	000003ff 	.word	0x000003ff
 8001f08:	000007ff 	.word	0x000007ff
 8001f0c:	0000041e 	.word	0x0000041e
 8001f10:	0000043e 	.word	0x0000043e

08001f14 <__eqdf2>:
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	464f      	mov	r7, r9
 8001f18:	4646      	mov	r6, r8
 8001f1a:	46d6      	mov	lr, sl
 8001f1c:	4684      	mov	ip, r0
 8001f1e:	b5c0      	push	{r6, r7, lr}
 8001f20:	4680      	mov	r8, r0
 8001f22:	4e19      	ldr	r6, [pc, #100]	; (8001f88 <__eqdf2+0x74>)
 8001f24:	0318      	lsls	r0, r3, #12
 8001f26:	030f      	lsls	r7, r1, #12
 8001f28:	004d      	lsls	r5, r1, #1
 8001f2a:	0b00      	lsrs	r0, r0, #12
 8001f2c:	005c      	lsls	r4, r3, #1
 8001f2e:	4682      	mov	sl, r0
 8001f30:	0b3f      	lsrs	r7, r7, #12
 8001f32:	0d6d      	lsrs	r5, r5, #21
 8001f34:	0fc9      	lsrs	r1, r1, #31
 8001f36:	4691      	mov	r9, r2
 8001f38:	0d64      	lsrs	r4, r4, #21
 8001f3a:	0fdb      	lsrs	r3, r3, #31
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	42b5      	cmp	r5, r6
 8001f40:	d00a      	beq.n	8001f58 <__eqdf2+0x44>
 8001f42:	42b4      	cmp	r4, r6
 8001f44:	d003      	beq.n	8001f4e <__eqdf2+0x3a>
 8001f46:	42a5      	cmp	r5, r4
 8001f48:	d101      	bne.n	8001f4e <__eqdf2+0x3a>
 8001f4a:	4557      	cmp	r7, sl
 8001f4c:	d00c      	beq.n	8001f68 <__eqdf2+0x54>
 8001f4e:	bc1c      	pop	{r2, r3, r4}
 8001f50:	4690      	mov	r8, r2
 8001f52:	4699      	mov	r9, r3
 8001f54:	46a2      	mov	sl, r4
 8001f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f58:	4666      	mov	r6, ip
 8001f5a:	433e      	orrs	r6, r7
 8001f5c:	d1f7      	bne.n	8001f4e <__eqdf2+0x3a>
 8001f5e:	42ac      	cmp	r4, r5
 8001f60:	d1f5      	bne.n	8001f4e <__eqdf2+0x3a>
 8001f62:	4654      	mov	r4, sl
 8001f64:	4314      	orrs	r4, r2
 8001f66:	d1f2      	bne.n	8001f4e <__eqdf2+0x3a>
 8001f68:	2001      	movs	r0, #1
 8001f6a:	45c8      	cmp	r8, r9
 8001f6c:	d1ef      	bne.n	8001f4e <__eqdf2+0x3a>
 8001f6e:	4299      	cmp	r1, r3
 8001f70:	d007      	beq.n	8001f82 <__eqdf2+0x6e>
 8001f72:	2d00      	cmp	r5, #0
 8001f74:	d1eb      	bne.n	8001f4e <__eqdf2+0x3a>
 8001f76:	4663      	mov	r3, ip
 8001f78:	431f      	orrs	r7, r3
 8001f7a:	0038      	movs	r0, r7
 8001f7c:	1e47      	subs	r7, r0, #1
 8001f7e:	41b8      	sbcs	r0, r7
 8001f80:	e7e5      	b.n	8001f4e <__eqdf2+0x3a>
 8001f82:	2000      	movs	r0, #0
 8001f84:	e7e3      	b.n	8001f4e <__eqdf2+0x3a>
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	000007ff 	.word	0x000007ff

08001f8c <__gedf2>:
 8001f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8e:	464f      	mov	r7, r9
 8001f90:	4646      	mov	r6, r8
 8001f92:	46d6      	mov	lr, sl
 8001f94:	004d      	lsls	r5, r1, #1
 8001f96:	b5c0      	push	{r6, r7, lr}
 8001f98:	030e      	lsls	r6, r1, #12
 8001f9a:	0fc9      	lsrs	r1, r1, #31
 8001f9c:	468a      	mov	sl, r1
 8001f9e:	492c      	ldr	r1, [pc, #176]	; (8002050 <__gedf2+0xc4>)
 8001fa0:	031f      	lsls	r7, r3, #12
 8001fa2:	005c      	lsls	r4, r3, #1
 8001fa4:	4680      	mov	r8, r0
 8001fa6:	0b36      	lsrs	r6, r6, #12
 8001fa8:	0d6d      	lsrs	r5, r5, #21
 8001faa:	4691      	mov	r9, r2
 8001fac:	0b3f      	lsrs	r7, r7, #12
 8001fae:	0d64      	lsrs	r4, r4, #21
 8001fb0:	0fdb      	lsrs	r3, r3, #31
 8001fb2:	428d      	cmp	r5, r1
 8001fb4:	d01e      	beq.n	8001ff4 <__gedf2+0x68>
 8001fb6:	428c      	cmp	r4, r1
 8001fb8:	d016      	beq.n	8001fe8 <__gedf2+0x5c>
 8001fba:	2d00      	cmp	r5, #0
 8001fbc:	d11e      	bne.n	8001ffc <__gedf2+0x70>
 8001fbe:	4330      	orrs	r0, r6
 8001fc0:	4684      	mov	ip, r0
 8001fc2:	2c00      	cmp	r4, #0
 8001fc4:	d101      	bne.n	8001fca <__gedf2+0x3e>
 8001fc6:	433a      	orrs	r2, r7
 8001fc8:	d023      	beq.n	8002012 <__gedf2+0x86>
 8001fca:	4662      	mov	r2, ip
 8001fcc:	2a00      	cmp	r2, #0
 8001fce:	d01a      	beq.n	8002006 <__gedf2+0x7a>
 8001fd0:	459a      	cmp	sl, r3
 8001fd2:	d029      	beq.n	8002028 <__gedf2+0x9c>
 8001fd4:	4651      	mov	r1, sl
 8001fd6:	2002      	movs	r0, #2
 8001fd8:	3901      	subs	r1, #1
 8001fda:	4008      	ands	r0, r1
 8001fdc:	3801      	subs	r0, #1
 8001fde:	bc1c      	pop	{r2, r3, r4}
 8001fe0:	4690      	mov	r8, r2
 8001fe2:	4699      	mov	r9, r3
 8001fe4:	46a2      	mov	sl, r4
 8001fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fe8:	0039      	movs	r1, r7
 8001fea:	4311      	orrs	r1, r2
 8001fec:	d0e5      	beq.n	8001fba <__gedf2+0x2e>
 8001fee:	2002      	movs	r0, #2
 8001ff0:	4240      	negs	r0, r0
 8001ff2:	e7f4      	b.n	8001fde <__gedf2+0x52>
 8001ff4:	4330      	orrs	r0, r6
 8001ff6:	d1fa      	bne.n	8001fee <__gedf2+0x62>
 8001ff8:	42ac      	cmp	r4, r5
 8001ffa:	d00f      	beq.n	800201c <__gedf2+0x90>
 8001ffc:	2c00      	cmp	r4, #0
 8001ffe:	d10f      	bne.n	8002020 <__gedf2+0x94>
 8002000:	433a      	orrs	r2, r7
 8002002:	d0e7      	beq.n	8001fd4 <__gedf2+0x48>
 8002004:	e00c      	b.n	8002020 <__gedf2+0x94>
 8002006:	2201      	movs	r2, #1
 8002008:	3b01      	subs	r3, #1
 800200a:	4393      	bics	r3, r2
 800200c:	0018      	movs	r0, r3
 800200e:	3001      	adds	r0, #1
 8002010:	e7e5      	b.n	8001fde <__gedf2+0x52>
 8002012:	4663      	mov	r3, ip
 8002014:	2000      	movs	r0, #0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0e1      	beq.n	8001fde <__gedf2+0x52>
 800201a:	e7db      	b.n	8001fd4 <__gedf2+0x48>
 800201c:	433a      	orrs	r2, r7
 800201e:	d1e6      	bne.n	8001fee <__gedf2+0x62>
 8002020:	459a      	cmp	sl, r3
 8002022:	d1d7      	bne.n	8001fd4 <__gedf2+0x48>
 8002024:	42a5      	cmp	r5, r4
 8002026:	dcd5      	bgt.n	8001fd4 <__gedf2+0x48>
 8002028:	42a5      	cmp	r5, r4
 800202a:	db05      	blt.n	8002038 <__gedf2+0xac>
 800202c:	42be      	cmp	r6, r7
 800202e:	d8d1      	bhi.n	8001fd4 <__gedf2+0x48>
 8002030:	d008      	beq.n	8002044 <__gedf2+0xb8>
 8002032:	2000      	movs	r0, #0
 8002034:	42be      	cmp	r6, r7
 8002036:	d2d2      	bcs.n	8001fde <__gedf2+0x52>
 8002038:	4650      	mov	r0, sl
 800203a:	2301      	movs	r3, #1
 800203c:	3801      	subs	r0, #1
 800203e:	4398      	bics	r0, r3
 8002040:	3001      	adds	r0, #1
 8002042:	e7cc      	b.n	8001fde <__gedf2+0x52>
 8002044:	45c8      	cmp	r8, r9
 8002046:	d8c5      	bhi.n	8001fd4 <__gedf2+0x48>
 8002048:	2000      	movs	r0, #0
 800204a:	45c8      	cmp	r8, r9
 800204c:	d3f4      	bcc.n	8002038 <__gedf2+0xac>
 800204e:	e7c6      	b.n	8001fde <__gedf2+0x52>
 8002050:	000007ff 	.word	0x000007ff

08002054 <__ledf2>:
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002056:	464f      	mov	r7, r9
 8002058:	4646      	mov	r6, r8
 800205a:	46d6      	mov	lr, sl
 800205c:	004d      	lsls	r5, r1, #1
 800205e:	b5c0      	push	{r6, r7, lr}
 8002060:	030e      	lsls	r6, r1, #12
 8002062:	0fc9      	lsrs	r1, r1, #31
 8002064:	468a      	mov	sl, r1
 8002066:	492e      	ldr	r1, [pc, #184]	; (8002120 <__ledf2+0xcc>)
 8002068:	031f      	lsls	r7, r3, #12
 800206a:	005c      	lsls	r4, r3, #1
 800206c:	4680      	mov	r8, r0
 800206e:	0b36      	lsrs	r6, r6, #12
 8002070:	0d6d      	lsrs	r5, r5, #21
 8002072:	4691      	mov	r9, r2
 8002074:	0b3f      	lsrs	r7, r7, #12
 8002076:	0d64      	lsrs	r4, r4, #21
 8002078:	0fdb      	lsrs	r3, r3, #31
 800207a:	428d      	cmp	r5, r1
 800207c:	d018      	beq.n	80020b0 <__ledf2+0x5c>
 800207e:	428c      	cmp	r4, r1
 8002080:	d011      	beq.n	80020a6 <__ledf2+0x52>
 8002082:	2d00      	cmp	r5, #0
 8002084:	d118      	bne.n	80020b8 <__ledf2+0x64>
 8002086:	4330      	orrs	r0, r6
 8002088:	4684      	mov	ip, r0
 800208a:	2c00      	cmp	r4, #0
 800208c:	d11e      	bne.n	80020cc <__ledf2+0x78>
 800208e:	433a      	orrs	r2, r7
 8002090:	d11c      	bne.n	80020cc <__ledf2+0x78>
 8002092:	4663      	mov	r3, ip
 8002094:	2000      	movs	r0, #0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d030      	beq.n	80020fc <__ledf2+0xa8>
 800209a:	4651      	mov	r1, sl
 800209c:	2002      	movs	r0, #2
 800209e:	3901      	subs	r1, #1
 80020a0:	4008      	ands	r0, r1
 80020a2:	3801      	subs	r0, #1
 80020a4:	e02a      	b.n	80020fc <__ledf2+0xa8>
 80020a6:	0039      	movs	r1, r7
 80020a8:	4311      	orrs	r1, r2
 80020aa:	d0ea      	beq.n	8002082 <__ledf2+0x2e>
 80020ac:	2002      	movs	r0, #2
 80020ae:	e025      	b.n	80020fc <__ledf2+0xa8>
 80020b0:	4330      	orrs	r0, r6
 80020b2:	d1fb      	bne.n	80020ac <__ledf2+0x58>
 80020b4:	42ac      	cmp	r4, r5
 80020b6:	d026      	beq.n	8002106 <__ledf2+0xb2>
 80020b8:	2c00      	cmp	r4, #0
 80020ba:	d126      	bne.n	800210a <__ledf2+0xb6>
 80020bc:	433a      	orrs	r2, r7
 80020be:	d124      	bne.n	800210a <__ledf2+0xb6>
 80020c0:	4651      	mov	r1, sl
 80020c2:	2002      	movs	r0, #2
 80020c4:	3901      	subs	r1, #1
 80020c6:	4008      	ands	r0, r1
 80020c8:	3801      	subs	r0, #1
 80020ca:	e017      	b.n	80020fc <__ledf2+0xa8>
 80020cc:	4662      	mov	r2, ip
 80020ce:	2a00      	cmp	r2, #0
 80020d0:	d00f      	beq.n	80020f2 <__ledf2+0x9e>
 80020d2:	459a      	cmp	sl, r3
 80020d4:	d1e1      	bne.n	800209a <__ledf2+0x46>
 80020d6:	42a5      	cmp	r5, r4
 80020d8:	db05      	blt.n	80020e6 <__ledf2+0x92>
 80020da:	42be      	cmp	r6, r7
 80020dc:	d8dd      	bhi.n	800209a <__ledf2+0x46>
 80020de:	d019      	beq.n	8002114 <__ledf2+0xc0>
 80020e0:	2000      	movs	r0, #0
 80020e2:	42be      	cmp	r6, r7
 80020e4:	d20a      	bcs.n	80020fc <__ledf2+0xa8>
 80020e6:	4650      	mov	r0, sl
 80020e8:	2301      	movs	r3, #1
 80020ea:	3801      	subs	r0, #1
 80020ec:	4398      	bics	r0, r3
 80020ee:	3001      	adds	r0, #1
 80020f0:	e004      	b.n	80020fc <__ledf2+0xa8>
 80020f2:	2201      	movs	r2, #1
 80020f4:	3b01      	subs	r3, #1
 80020f6:	4393      	bics	r3, r2
 80020f8:	0018      	movs	r0, r3
 80020fa:	3001      	adds	r0, #1
 80020fc:	bc1c      	pop	{r2, r3, r4}
 80020fe:	4690      	mov	r8, r2
 8002100:	4699      	mov	r9, r3
 8002102:	46a2      	mov	sl, r4
 8002104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002106:	433a      	orrs	r2, r7
 8002108:	d1d0      	bne.n	80020ac <__ledf2+0x58>
 800210a:	459a      	cmp	sl, r3
 800210c:	d1c5      	bne.n	800209a <__ledf2+0x46>
 800210e:	42a5      	cmp	r5, r4
 8002110:	dcc3      	bgt.n	800209a <__ledf2+0x46>
 8002112:	e7e0      	b.n	80020d6 <__ledf2+0x82>
 8002114:	45c8      	cmp	r8, r9
 8002116:	d8c0      	bhi.n	800209a <__ledf2+0x46>
 8002118:	2000      	movs	r0, #0
 800211a:	45c8      	cmp	r8, r9
 800211c:	d3e3      	bcc.n	80020e6 <__ledf2+0x92>
 800211e:	e7ed      	b.n	80020fc <__ledf2+0xa8>
 8002120:	000007ff 	.word	0x000007ff

08002124 <__aeabi_dmul>:
 8002124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002126:	4657      	mov	r7, sl
 8002128:	46de      	mov	lr, fp
 800212a:	464e      	mov	r6, r9
 800212c:	4645      	mov	r5, r8
 800212e:	b5e0      	push	{r5, r6, r7, lr}
 8002130:	4683      	mov	fp, r0
 8002132:	0006      	movs	r6, r0
 8002134:	030f      	lsls	r7, r1, #12
 8002136:	0048      	lsls	r0, r1, #1
 8002138:	b087      	sub	sp, #28
 800213a:	4692      	mov	sl, r2
 800213c:	001d      	movs	r5, r3
 800213e:	0b3f      	lsrs	r7, r7, #12
 8002140:	0d40      	lsrs	r0, r0, #21
 8002142:	0fcc      	lsrs	r4, r1, #31
 8002144:	2800      	cmp	r0, #0
 8002146:	d100      	bne.n	800214a <__aeabi_dmul+0x26>
 8002148:	e06f      	b.n	800222a <__aeabi_dmul+0x106>
 800214a:	4bde      	ldr	r3, [pc, #888]	; (80024c4 <__aeabi_dmul+0x3a0>)
 800214c:	4298      	cmp	r0, r3
 800214e:	d038      	beq.n	80021c2 <__aeabi_dmul+0x9e>
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	00ff      	lsls	r7, r7, #3
 8002154:	041b      	lsls	r3, r3, #16
 8002156:	431f      	orrs	r7, r3
 8002158:	0f73      	lsrs	r3, r6, #29
 800215a:	433b      	orrs	r3, r7
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	4bda      	ldr	r3, [pc, #872]	; (80024c8 <__aeabi_dmul+0x3a4>)
 8002160:	2700      	movs	r7, #0
 8002162:	4699      	mov	r9, r3
 8002164:	2300      	movs	r3, #0
 8002166:	469b      	mov	fp, r3
 8002168:	00f6      	lsls	r6, r6, #3
 800216a:	4481      	add	r9, r0
 800216c:	032b      	lsls	r3, r5, #12
 800216e:	0069      	lsls	r1, r5, #1
 8002170:	0b1b      	lsrs	r3, r3, #12
 8002172:	4652      	mov	r2, sl
 8002174:	4698      	mov	r8, r3
 8002176:	0d49      	lsrs	r1, r1, #21
 8002178:	0fed      	lsrs	r5, r5, #31
 800217a:	2900      	cmp	r1, #0
 800217c:	d100      	bne.n	8002180 <__aeabi_dmul+0x5c>
 800217e:	e085      	b.n	800228c <__aeabi_dmul+0x168>
 8002180:	4bd0      	ldr	r3, [pc, #832]	; (80024c4 <__aeabi_dmul+0x3a0>)
 8002182:	4299      	cmp	r1, r3
 8002184:	d100      	bne.n	8002188 <__aeabi_dmul+0x64>
 8002186:	e073      	b.n	8002270 <__aeabi_dmul+0x14c>
 8002188:	4643      	mov	r3, r8
 800218a:	00da      	lsls	r2, r3, #3
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	041b      	lsls	r3, r3, #16
 8002190:	4313      	orrs	r3, r2
 8002192:	4652      	mov	r2, sl
 8002194:	48cc      	ldr	r0, [pc, #816]	; (80024c8 <__aeabi_dmul+0x3a4>)
 8002196:	0f52      	lsrs	r2, r2, #29
 8002198:	4684      	mov	ip, r0
 800219a:	4313      	orrs	r3, r2
 800219c:	4652      	mov	r2, sl
 800219e:	2000      	movs	r0, #0
 80021a0:	4461      	add	r1, ip
 80021a2:	00d2      	lsls	r2, r2, #3
 80021a4:	4489      	add	r9, r1
 80021a6:	0021      	movs	r1, r4
 80021a8:	4069      	eors	r1, r5
 80021aa:	9100      	str	r1, [sp, #0]
 80021ac:	468c      	mov	ip, r1
 80021ae:	2101      	movs	r1, #1
 80021b0:	4449      	add	r1, r9
 80021b2:	468a      	mov	sl, r1
 80021b4:	2f0f      	cmp	r7, #15
 80021b6:	d900      	bls.n	80021ba <__aeabi_dmul+0x96>
 80021b8:	e090      	b.n	80022dc <__aeabi_dmul+0x1b8>
 80021ba:	49c4      	ldr	r1, [pc, #784]	; (80024cc <__aeabi_dmul+0x3a8>)
 80021bc:	00bf      	lsls	r7, r7, #2
 80021be:	59cf      	ldr	r7, [r1, r7]
 80021c0:	46bf      	mov	pc, r7
 80021c2:	465b      	mov	r3, fp
 80021c4:	433b      	orrs	r3, r7
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	d000      	beq.n	80021cc <__aeabi_dmul+0xa8>
 80021ca:	e16a      	b.n	80024a2 <__aeabi_dmul+0x37e>
 80021cc:	2302      	movs	r3, #2
 80021ce:	2708      	movs	r7, #8
 80021d0:	2600      	movs	r6, #0
 80021d2:	4681      	mov	r9, r0
 80021d4:	469b      	mov	fp, r3
 80021d6:	e7c9      	b.n	800216c <__aeabi_dmul+0x48>
 80021d8:	0032      	movs	r2, r6
 80021da:	4658      	mov	r0, fp
 80021dc:	9b01      	ldr	r3, [sp, #4]
 80021de:	4661      	mov	r1, ip
 80021e0:	9100      	str	r1, [sp, #0]
 80021e2:	2802      	cmp	r0, #2
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dmul+0xc4>
 80021e6:	e075      	b.n	80022d4 <__aeabi_dmul+0x1b0>
 80021e8:	2803      	cmp	r0, #3
 80021ea:	d100      	bne.n	80021ee <__aeabi_dmul+0xca>
 80021ec:	e1fe      	b.n	80025ec <__aeabi_dmul+0x4c8>
 80021ee:	2801      	cmp	r0, #1
 80021f0:	d000      	beq.n	80021f4 <__aeabi_dmul+0xd0>
 80021f2:	e12c      	b.n	800244e <__aeabi_dmul+0x32a>
 80021f4:	2300      	movs	r3, #0
 80021f6:	2700      	movs	r7, #0
 80021f8:	2600      	movs	r6, #0
 80021fa:	2500      	movs	r5, #0
 80021fc:	033f      	lsls	r7, r7, #12
 80021fe:	0d2a      	lsrs	r2, r5, #20
 8002200:	0b3f      	lsrs	r7, r7, #12
 8002202:	48b3      	ldr	r0, [pc, #716]	; (80024d0 <__aeabi_dmul+0x3ac>)
 8002204:	0512      	lsls	r2, r2, #20
 8002206:	433a      	orrs	r2, r7
 8002208:	4002      	ands	r2, r0
 800220a:	051b      	lsls	r3, r3, #20
 800220c:	4313      	orrs	r3, r2
 800220e:	9a00      	ldr	r2, [sp, #0]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	07d1      	lsls	r1, r2, #31
 8002214:	085b      	lsrs	r3, r3, #1
 8002216:	430b      	orrs	r3, r1
 8002218:	0030      	movs	r0, r6
 800221a:	0019      	movs	r1, r3
 800221c:	b007      	add	sp, #28
 800221e:	bc3c      	pop	{r2, r3, r4, r5}
 8002220:	4690      	mov	r8, r2
 8002222:	4699      	mov	r9, r3
 8002224:	46a2      	mov	sl, r4
 8002226:	46ab      	mov	fp, r5
 8002228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800222a:	465b      	mov	r3, fp
 800222c:	433b      	orrs	r3, r7
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	d100      	bne.n	8002234 <__aeabi_dmul+0x110>
 8002232:	e12f      	b.n	8002494 <__aeabi_dmul+0x370>
 8002234:	2f00      	cmp	r7, #0
 8002236:	d100      	bne.n	800223a <__aeabi_dmul+0x116>
 8002238:	e1a5      	b.n	8002586 <__aeabi_dmul+0x462>
 800223a:	0038      	movs	r0, r7
 800223c:	f000 fe20 	bl	8002e80 <__clzsi2>
 8002240:	0003      	movs	r3, r0
 8002242:	3b0b      	subs	r3, #11
 8002244:	2b1c      	cmp	r3, #28
 8002246:	dd00      	ble.n	800224a <__aeabi_dmul+0x126>
 8002248:	e196      	b.n	8002578 <__aeabi_dmul+0x454>
 800224a:	221d      	movs	r2, #29
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	465a      	mov	r2, fp
 8002250:	0001      	movs	r1, r0
 8002252:	40da      	lsrs	r2, r3
 8002254:	465e      	mov	r6, fp
 8002256:	3908      	subs	r1, #8
 8002258:	408f      	lsls	r7, r1
 800225a:	0013      	movs	r3, r2
 800225c:	408e      	lsls	r6, r1
 800225e:	433b      	orrs	r3, r7
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	4b9c      	ldr	r3, [pc, #624]	; (80024d4 <__aeabi_dmul+0x3b0>)
 8002264:	2700      	movs	r7, #0
 8002266:	1a1b      	subs	r3, r3, r0
 8002268:	4699      	mov	r9, r3
 800226a:	2300      	movs	r3, #0
 800226c:	469b      	mov	fp, r3
 800226e:	e77d      	b.n	800216c <__aeabi_dmul+0x48>
 8002270:	4641      	mov	r1, r8
 8002272:	4653      	mov	r3, sl
 8002274:	430b      	orrs	r3, r1
 8002276:	4993      	ldr	r1, [pc, #588]	; (80024c4 <__aeabi_dmul+0x3a0>)
 8002278:	468c      	mov	ip, r1
 800227a:	44e1      	add	r9, ip
 800227c:	2b00      	cmp	r3, #0
 800227e:	d000      	beq.n	8002282 <__aeabi_dmul+0x15e>
 8002280:	e11a      	b.n	80024b8 <__aeabi_dmul+0x394>
 8002282:	2202      	movs	r2, #2
 8002284:	2002      	movs	r0, #2
 8002286:	4317      	orrs	r7, r2
 8002288:	2200      	movs	r2, #0
 800228a:	e78c      	b.n	80021a6 <__aeabi_dmul+0x82>
 800228c:	4313      	orrs	r3, r2
 800228e:	d100      	bne.n	8002292 <__aeabi_dmul+0x16e>
 8002290:	e10d      	b.n	80024ae <__aeabi_dmul+0x38a>
 8002292:	4643      	mov	r3, r8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d100      	bne.n	800229a <__aeabi_dmul+0x176>
 8002298:	e181      	b.n	800259e <__aeabi_dmul+0x47a>
 800229a:	4640      	mov	r0, r8
 800229c:	f000 fdf0 	bl	8002e80 <__clzsi2>
 80022a0:	0002      	movs	r2, r0
 80022a2:	3a0b      	subs	r2, #11
 80022a4:	2a1c      	cmp	r2, #28
 80022a6:	dd00      	ble.n	80022aa <__aeabi_dmul+0x186>
 80022a8:	e172      	b.n	8002590 <__aeabi_dmul+0x46c>
 80022aa:	0001      	movs	r1, r0
 80022ac:	4643      	mov	r3, r8
 80022ae:	3908      	subs	r1, #8
 80022b0:	408b      	lsls	r3, r1
 80022b2:	4698      	mov	r8, r3
 80022b4:	231d      	movs	r3, #29
 80022b6:	1a9a      	subs	r2, r3, r2
 80022b8:	4653      	mov	r3, sl
 80022ba:	40d3      	lsrs	r3, r2
 80022bc:	001a      	movs	r2, r3
 80022be:	4643      	mov	r3, r8
 80022c0:	4313      	orrs	r3, r2
 80022c2:	4652      	mov	r2, sl
 80022c4:	408a      	lsls	r2, r1
 80022c6:	4649      	mov	r1, r9
 80022c8:	1a08      	subs	r0, r1, r0
 80022ca:	4982      	ldr	r1, [pc, #520]	; (80024d4 <__aeabi_dmul+0x3b0>)
 80022cc:	4689      	mov	r9, r1
 80022ce:	4481      	add	r9, r0
 80022d0:	2000      	movs	r0, #0
 80022d2:	e768      	b.n	80021a6 <__aeabi_dmul+0x82>
 80022d4:	4b7b      	ldr	r3, [pc, #492]	; (80024c4 <__aeabi_dmul+0x3a0>)
 80022d6:	2700      	movs	r7, #0
 80022d8:	2600      	movs	r6, #0
 80022da:	e78e      	b.n	80021fa <__aeabi_dmul+0xd6>
 80022dc:	0c14      	lsrs	r4, r2, #16
 80022de:	0412      	lsls	r2, r2, #16
 80022e0:	0c12      	lsrs	r2, r2, #16
 80022e2:	0011      	movs	r1, r2
 80022e4:	0c37      	lsrs	r7, r6, #16
 80022e6:	0436      	lsls	r6, r6, #16
 80022e8:	0c35      	lsrs	r5, r6, #16
 80022ea:	4379      	muls	r1, r7
 80022ec:	0028      	movs	r0, r5
 80022ee:	468c      	mov	ip, r1
 80022f0:	002e      	movs	r6, r5
 80022f2:	4360      	muls	r0, r4
 80022f4:	4460      	add	r0, ip
 80022f6:	4683      	mov	fp, r0
 80022f8:	4356      	muls	r6, r2
 80022fa:	0021      	movs	r1, r4
 80022fc:	0c30      	lsrs	r0, r6, #16
 80022fe:	4680      	mov	r8, r0
 8002300:	4658      	mov	r0, fp
 8002302:	4379      	muls	r1, r7
 8002304:	4440      	add	r0, r8
 8002306:	9102      	str	r1, [sp, #8]
 8002308:	4584      	cmp	ip, r0
 800230a:	d906      	bls.n	800231a <__aeabi_dmul+0x1f6>
 800230c:	4688      	mov	r8, r1
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	0249      	lsls	r1, r1, #9
 8002312:	468c      	mov	ip, r1
 8002314:	44e0      	add	r8, ip
 8002316:	4641      	mov	r1, r8
 8002318:	9102      	str	r1, [sp, #8]
 800231a:	0436      	lsls	r6, r6, #16
 800231c:	0c01      	lsrs	r1, r0, #16
 800231e:	0c36      	lsrs	r6, r6, #16
 8002320:	0400      	lsls	r0, r0, #16
 8002322:	468b      	mov	fp, r1
 8002324:	1981      	adds	r1, r0, r6
 8002326:	0c1e      	lsrs	r6, r3, #16
 8002328:	041b      	lsls	r3, r3, #16
 800232a:	0c1b      	lsrs	r3, r3, #16
 800232c:	9103      	str	r1, [sp, #12]
 800232e:	0019      	movs	r1, r3
 8002330:	4379      	muls	r1, r7
 8002332:	468c      	mov	ip, r1
 8002334:	0028      	movs	r0, r5
 8002336:	4375      	muls	r5, r6
 8002338:	4465      	add	r5, ip
 800233a:	46a8      	mov	r8, r5
 800233c:	4358      	muls	r0, r3
 800233e:	0c05      	lsrs	r5, r0, #16
 8002340:	4445      	add	r5, r8
 8002342:	4377      	muls	r7, r6
 8002344:	42a9      	cmp	r1, r5
 8002346:	d903      	bls.n	8002350 <__aeabi_dmul+0x22c>
 8002348:	2180      	movs	r1, #128	; 0x80
 800234a:	0249      	lsls	r1, r1, #9
 800234c:	468c      	mov	ip, r1
 800234e:	4467      	add	r7, ip
 8002350:	0c29      	lsrs	r1, r5, #16
 8002352:	468c      	mov	ip, r1
 8002354:	0039      	movs	r1, r7
 8002356:	0400      	lsls	r0, r0, #16
 8002358:	0c00      	lsrs	r0, r0, #16
 800235a:	042d      	lsls	r5, r5, #16
 800235c:	182d      	adds	r5, r5, r0
 800235e:	4461      	add	r1, ip
 8002360:	44ab      	add	fp, r5
 8002362:	9105      	str	r1, [sp, #20]
 8002364:	4659      	mov	r1, fp
 8002366:	9104      	str	r1, [sp, #16]
 8002368:	9901      	ldr	r1, [sp, #4]
 800236a:	040f      	lsls	r7, r1, #16
 800236c:	0c3f      	lsrs	r7, r7, #16
 800236e:	0c08      	lsrs	r0, r1, #16
 8002370:	0039      	movs	r1, r7
 8002372:	4351      	muls	r1, r2
 8002374:	4342      	muls	r2, r0
 8002376:	4690      	mov	r8, r2
 8002378:	0002      	movs	r2, r0
 800237a:	468c      	mov	ip, r1
 800237c:	0c09      	lsrs	r1, r1, #16
 800237e:	468b      	mov	fp, r1
 8002380:	4362      	muls	r2, r4
 8002382:	437c      	muls	r4, r7
 8002384:	4444      	add	r4, r8
 8002386:	445c      	add	r4, fp
 8002388:	45a0      	cmp	r8, r4
 800238a:	d903      	bls.n	8002394 <__aeabi_dmul+0x270>
 800238c:	2180      	movs	r1, #128	; 0x80
 800238e:	0249      	lsls	r1, r1, #9
 8002390:	4688      	mov	r8, r1
 8002392:	4442      	add	r2, r8
 8002394:	0c21      	lsrs	r1, r4, #16
 8002396:	4688      	mov	r8, r1
 8002398:	4661      	mov	r1, ip
 800239a:	0409      	lsls	r1, r1, #16
 800239c:	0c09      	lsrs	r1, r1, #16
 800239e:	468c      	mov	ip, r1
 80023a0:	0039      	movs	r1, r7
 80023a2:	4359      	muls	r1, r3
 80023a4:	4343      	muls	r3, r0
 80023a6:	4370      	muls	r0, r6
 80023a8:	437e      	muls	r6, r7
 80023aa:	0c0f      	lsrs	r7, r1, #16
 80023ac:	18f6      	adds	r6, r6, r3
 80023ae:	0424      	lsls	r4, r4, #16
 80023b0:	19be      	adds	r6, r7, r6
 80023b2:	4464      	add	r4, ip
 80023b4:	4442      	add	r2, r8
 80023b6:	468c      	mov	ip, r1
 80023b8:	42b3      	cmp	r3, r6
 80023ba:	d903      	bls.n	80023c4 <__aeabi_dmul+0x2a0>
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	025b      	lsls	r3, r3, #9
 80023c0:	4698      	mov	r8, r3
 80023c2:	4440      	add	r0, r8
 80023c4:	9b02      	ldr	r3, [sp, #8]
 80023c6:	4661      	mov	r1, ip
 80023c8:	4698      	mov	r8, r3
 80023ca:	9b04      	ldr	r3, [sp, #16]
 80023cc:	0437      	lsls	r7, r6, #16
 80023ce:	4443      	add	r3, r8
 80023d0:	469b      	mov	fp, r3
 80023d2:	45ab      	cmp	fp, r5
 80023d4:	41ad      	sbcs	r5, r5
 80023d6:	426b      	negs	r3, r5
 80023d8:	040d      	lsls	r5, r1, #16
 80023da:	9905      	ldr	r1, [sp, #20]
 80023dc:	0c2d      	lsrs	r5, r5, #16
 80023de:	468c      	mov	ip, r1
 80023e0:	197f      	adds	r7, r7, r5
 80023e2:	4467      	add	r7, ip
 80023e4:	18fd      	adds	r5, r7, r3
 80023e6:	46a8      	mov	r8, r5
 80023e8:	465d      	mov	r5, fp
 80023ea:	192d      	adds	r5, r5, r4
 80023ec:	42a5      	cmp	r5, r4
 80023ee:	41a4      	sbcs	r4, r4
 80023f0:	4693      	mov	fp, r2
 80023f2:	4264      	negs	r4, r4
 80023f4:	46a4      	mov	ip, r4
 80023f6:	44c3      	add	fp, r8
 80023f8:	44dc      	add	ip, fp
 80023fa:	428f      	cmp	r7, r1
 80023fc:	41bf      	sbcs	r7, r7
 80023fe:	4598      	cmp	r8, r3
 8002400:	419b      	sbcs	r3, r3
 8002402:	4593      	cmp	fp, r2
 8002404:	4192      	sbcs	r2, r2
 8002406:	45a4      	cmp	ip, r4
 8002408:	41a4      	sbcs	r4, r4
 800240a:	425b      	negs	r3, r3
 800240c:	427f      	negs	r7, r7
 800240e:	431f      	orrs	r7, r3
 8002410:	0c36      	lsrs	r6, r6, #16
 8002412:	4252      	negs	r2, r2
 8002414:	4264      	negs	r4, r4
 8002416:	19bf      	adds	r7, r7, r6
 8002418:	4322      	orrs	r2, r4
 800241a:	18bf      	adds	r7, r7, r2
 800241c:	4662      	mov	r2, ip
 800241e:	1838      	adds	r0, r7, r0
 8002420:	0243      	lsls	r3, r0, #9
 8002422:	0dd2      	lsrs	r2, r2, #23
 8002424:	9903      	ldr	r1, [sp, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	026a      	lsls	r2, r5, #9
 800242a:	430a      	orrs	r2, r1
 800242c:	1e50      	subs	r0, r2, #1
 800242e:	4182      	sbcs	r2, r0
 8002430:	4661      	mov	r1, ip
 8002432:	0ded      	lsrs	r5, r5, #23
 8002434:	432a      	orrs	r2, r5
 8002436:	024e      	lsls	r6, r1, #9
 8002438:	4332      	orrs	r2, r6
 800243a:	01d9      	lsls	r1, r3, #7
 800243c:	d400      	bmi.n	8002440 <__aeabi_dmul+0x31c>
 800243e:	e0b3      	b.n	80025a8 <__aeabi_dmul+0x484>
 8002440:	2601      	movs	r6, #1
 8002442:	0850      	lsrs	r0, r2, #1
 8002444:	4032      	ands	r2, r6
 8002446:	4302      	orrs	r2, r0
 8002448:	07de      	lsls	r6, r3, #31
 800244a:	4332      	orrs	r2, r6
 800244c:	085b      	lsrs	r3, r3, #1
 800244e:	4c22      	ldr	r4, [pc, #136]	; (80024d8 <__aeabi_dmul+0x3b4>)
 8002450:	4454      	add	r4, sl
 8002452:	2c00      	cmp	r4, #0
 8002454:	dd62      	ble.n	800251c <__aeabi_dmul+0x3f8>
 8002456:	0751      	lsls	r1, r2, #29
 8002458:	d009      	beq.n	800246e <__aeabi_dmul+0x34a>
 800245a:	200f      	movs	r0, #15
 800245c:	4010      	ands	r0, r2
 800245e:	2804      	cmp	r0, #4
 8002460:	d005      	beq.n	800246e <__aeabi_dmul+0x34a>
 8002462:	1d10      	adds	r0, r2, #4
 8002464:	4290      	cmp	r0, r2
 8002466:	4192      	sbcs	r2, r2
 8002468:	4252      	negs	r2, r2
 800246a:	189b      	adds	r3, r3, r2
 800246c:	0002      	movs	r2, r0
 800246e:	01d9      	lsls	r1, r3, #7
 8002470:	d504      	bpl.n	800247c <__aeabi_dmul+0x358>
 8002472:	2480      	movs	r4, #128	; 0x80
 8002474:	4819      	ldr	r0, [pc, #100]	; (80024dc <__aeabi_dmul+0x3b8>)
 8002476:	00e4      	lsls	r4, r4, #3
 8002478:	4003      	ands	r3, r0
 800247a:	4454      	add	r4, sl
 800247c:	4818      	ldr	r0, [pc, #96]	; (80024e0 <__aeabi_dmul+0x3bc>)
 800247e:	4284      	cmp	r4, r0
 8002480:	dd00      	ble.n	8002484 <__aeabi_dmul+0x360>
 8002482:	e727      	b.n	80022d4 <__aeabi_dmul+0x1b0>
 8002484:	075e      	lsls	r6, r3, #29
 8002486:	025b      	lsls	r3, r3, #9
 8002488:	08d2      	lsrs	r2, r2, #3
 800248a:	0b1f      	lsrs	r7, r3, #12
 800248c:	0563      	lsls	r3, r4, #21
 800248e:	4316      	orrs	r6, r2
 8002490:	0d5b      	lsrs	r3, r3, #21
 8002492:	e6b2      	b.n	80021fa <__aeabi_dmul+0xd6>
 8002494:	2300      	movs	r3, #0
 8002496:	4699      	mov	r9, r3
 8002498:	3301      	adds	r3, #1
 800249a:	2704      	movs	r7, #4
 800249c:	2600      	movs	r6, #0
 800249e:	469b      	mov	fp, r3
 80024a0:	e664      	b.n	800216c <__aeabi_dmul+0x48>
 80024a2:	2303      	movs	r3, #3
 80024a4:	9701      	str	r7, [sp, #4]
 80024a6:	4681      	mov	r9, r0
 80024a8:	270c      	movs	r7, #12
 80024aa:	469b      	mov	fp, r3
 80024ac:	e65e      	b.n	800216c <__aeabi_dmul+0x48>
 80024ae:	2201      	movs	r2, #1
 80024b0:	2001      	movs	r0, #1
 80024b2:	4317      	orrs	r7, r2
 80024b4:	2200      	movs	r2, #0
 80024b6:	e676      	b.n	80021a6 <__aeabi_dmul+0x82>
 80024b8:	2303      	movs	r3, #3
 80024ba:	2003      	movs	r0, #3
 80024bc:	431f      	orrs	r7, r3
 80024be:	4643      	mov	r3, r8
 80024c0:	e671      	b.n	80021a6 <__aeabi_dmul+0x82>
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	000007ff 	.word	0x000007ff
 80024c8:	fffffc01 	.word	0xfffffc01
 80024cc:	0801ca84 	.word	0x0801ca84
 80024d0:	800fffff 	.word	0x800fffff
 80024d4:	fffffc0d 	.word	0xfffffc0d
 80024d8:	000003ff 	.word	0x000003ff
 80024dc:	feffffff 	.word	0xfeffffff
 80024e0:	000007fe 	.word	0x000007fe
 80024e4:	2300      	movs	r3, #0
 80024e6:	2780      	movs	r7, #128	; 0x80
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	033f      	lsls	r7, r7, #12
 80024ec:	2600      	movs	r6, #0
 80024ee:	4b43      	ldr	r3, [pc, #268]	; (80025fc <__aeabi_dmul+0x4d8>)
 80024f0:	e683      	b.n	80021fa <__aeabi_dmul+0xd6>
 80024f2:	9b01      	ldr	r3, [sp, #4]
 80024f4:	0032      	movs	r2, r6
 80024f6:	46a4      	mov	ip, r4
 80024f8:	4658      	mov	r0, fp
 80024fa:	e670      	b.n	80021de <__aeabi_dmul+0xba>
 80024fc:	46ac      	mov	ip, r5
 80024fe:	e66e      	b.n	80021de <__aeabi_dmul+0xba>
 8002500:	2780      	movs	r7, #128	; 0x80
 8002502:	9901      	ldr	r1, [sp, #4]
 8002504:	033f      	lsls	r7, r7, #12
 8002506:	4239      	tst	r1, r7
 8002508:	d02d      	beq.n	8002566 <__aeabi_dmul+0x442>
 800250a:	423b      	tst	r3, r7
 800250c:	d12b      	bne.n	8002566 <__aeabi_dmul+0x442>
 800250e:	431f      	orrs	r7, r3
 8002510:	033f      	lsls	r7, r7, #12
 8002512:	0b3f      	lsrs	r7, r7, #12
 8002514:	9500      	str	r5, [sp, #0]
 8002516:	0016      	movs	r6, r2
 8002518:	4b38      	ldr	r3, [pc, #224]	; (80025fc <__aeabi_dmul+0x4d8>)
 800251a:	e66e      	b.n	80021fa <__aeabi_dmul+0xd6>
 800251c:	2501      	movs	r5, #1
 800251e:	1b2d      	subs	r5, r5, r4
 8002520:	2d38      	cmp	r5, #56	; 0x38
 8002522:	dd00      	ble.n	8002526 <__aeabi_dmul+0x402>
 8002524:	e666      	b.n	80021f4 <__aeabi_dmul+0xd0>
 8002526:	2d1f      	cmp	r5, #31
 8002528:	dc40      	bgt.n	80025ac <__aeabi_dmul+0x488>
 800252a:	4835      	ldr	r0, [pc, #212]	; (8002600 <__aeabi_dmul+0x4dc>)
 800252c:	001c      	movs	r4, r3
 800252e:	4450      	add	r0, sl
 8002530:	0016      	movs	r6, r2
 8002532:	4082      	lsls	r2, r0
 8002534:	4084      	lsls	r4, r0
 8002536:	40ee      	lsrs	r6, r5
 8002538:	1e50      	subs	r0, r2, #1
 800253a:	4182      	sbcs	r2, r0
 800253c:	4334      	orrs	r4, r6
 800253e:	4314      	orrs	r4, r2
 8002540:	40eb      	lsrs	r3, r5
 8002542:	0762      	lsls	r2, r4, #29
 8002544:	d009      	beq.n	800255a <__aeabi_dmul+0x436>
 8002546:	220f      	movs	r2, #15
 8002548:	4022      	ands	r2, r4
 800254a:	2a04      	cmp	r2, #4
 800254c:	d005      	beq.n	800255a <__aeabi_dmul+0x436>
 800254e:	0022      	movs	r2, r4
 8002550:	1d14      	adds	r4, r2, #4
 8002552:	4294      	cmp	r4, r2
 8002554:	4180      	sbcs	r0, r0
 8002556:	4240      	negs	r0, r0
 8002558:	181b      	adds	r3, r3, r0
 800255a:	021a      	lsls	r2, r3, #8
 800255c:	d53e      	bpl.n	80025dc <__aeabi_dmul+0x4b8>
 800255e:	2301      	movs	r3, #1
 8002560:	2700      	movs	r7, #0
 8002562:	2600      	movs	r6, #0
 8002564:	e649      	b.n	80021fa <__aeabi_dmul+0xd6>
 8002566:	2780      	movs	r7, #128	; 0x80
 8002568:	9b01      	ldr	r3, [sp, #4]
 800256a:	033f      	lsls	r7, r7, #12
 800256c:	431f      	orrs	r7, r3
 800256e:	033f      	lsls	r7, r7, #12
 8002570:	0b3f      	lsrs	r7, r7, #12
 8002572:	9400      	str	r4, [sp, #0]
 8002574:	4b21      	ldr	r3, [pc, #132]	; (80025fc <__aeabi_dmul+0x4d8>)
 8002576:	e640      	b.n	80021fa <__aeabi_dmul+0xd6>
 8002578:	0003      	movs	r3, r0
 800257a:	465a      	mov	r2, fp
 800257c:	3b28      	subs	r3, #40	; 0x28
 800257e:	409a      	lsls	r2, r3
 8002580:	2600      	movs	r6, #0
 8002582:	9201      	str	r2, [sp, #4]
 8002584:	e66d      	b.n	8002262 <__aeabi_dmul+0x13e>
 8002586:	4658      	mov	r0, fp
 8002588:	f000 fc7a 	bl	8002e80 <__clzsi2>
 800258c:	3020      	adds	r0, #32
 800258e:	e657      	b.n	8002240 <__aeabi_dmul+0x11c>
 8002590:	0003      	movs	r3, r0
 8002592:	4652      	mov	r2, sl
 8002594:	3b28      	subs	r3, #40	; 0x28
 8002596:	409a      	lsls	r2, r3
 8002598:	0013      	movs	r3, r2
 800259a:	2200      	movs	r2, #0
 800259c:	e693      	b.n	80022c6 <__aeabi_dmul+0x1a2>
 800259e:	4650      	mov	r0, sl
 80025a0:	f000 fc6e 	bl	8002e80 <__clzsi2>
 80025a4:	3020      	adds	r0, #32
 80025a6:	e67b      	b.n	80022a0 <__aeabi_dmul+0x17c>
 80025a8:	46ca      	mov	sl, r9
 80025aa:	e750      	b.n	800244e <__aeabi_dmul+0x32a>
 80025ac:	201f      	movs	r0, #31
 80025ae:	001e      	movs	r6, r3
 80025b0:	4240      	negs	r0, r0
 80025b2:	1b04      	subs	r4, r0, r4
 80025b4:	40e6      	lsrs	r6, r4
 80025b6:	2d20      	cmp	r5, #32
 80025b8:	d003      	beq.n	80025c2 <__aeabi_dmul+0x49e>
 80025ba:	4c12      	ldr	r4, [pc, #72]	; (8002604 <__aeabi_dmul+0x4e0>)
 80025bc:	4454      	add	r4, sl
 80025be:	40a3      	lsls	r3, r4
 80025c0:	431a      	orrs	r2, r3
 80025c2:	1e50      	subs	r0, r2, #1
 80025c4:	4182      	sbcs	r2, r0
 80025c6:	4332      	orrs	r2, r6
 80025c8:	2607      	movs	r6, #7
 80025ca:	2700      	movs	r7, #0
 80025cc:	4016      	ands	r6, r2
 80025ce:	d009      	beq.n	80025e4 <__aeabi_dmul+0x4c0>
 80025d0:	200f      	movs	r0, #15
 80025d2:	2300      	movs	r3, #0
 80025d4:	4010      	ands	r0, r2
 80025d6:	0014      	movs	r4, r2
 80025d8:	2804      	cmp	r0, #4
 80025da:	d1b9      	bne.n	8002550 <__aeabi_dmul+0x42c>
 80025dc:	0022      	movs	r2, r4
 80025de:	075e      	lsls	r6, r3, #29
 80025e0:	025b      	lsls	r3, r3, #9
 80025e2:	0b1f      	lsrs	r7, r3, #12
 80025e4:	08d2      	lsrs	r2, r2, #3
 80025e6:	4316      	orrs	r6, r2
 80025e8:	2300      	movs	r3, #0
 80025ea:	e606      	b.n	80021fa <__aeabi_dmul+0xd6>
 80025ec:	2780      	movs	r7, #128	; 0x80
 80025ee:	033f      	lsls	r7, r7, #12
 80025f0:	431f      	orrs	r7, r3
 80025f2:	033f      	lsls	r7, r7, #12
 80025f4:	0b3f      	lsrs	r7, r7, #12
 80025f6:	0016      	movs	r6, r2
 80025f8:	4b00      	ldr	r3, [pc, #0]	; (80025fc <__aeabi_dmul+0x4d8>)
 80025fa:	e5fe      	b.n	80021fa <__aeabi_dmul+0xd6>
 80025fc:	000007ff 	.word	0x000007ff
 8002600:	0000041e 	.word	0x0000041e
 8002604:	0000043e 	.word	0x0000043e

08002608 <__aeabi_dsub>:
 8002608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260a:	4657      	mov	r7, sl
 800260c:	464e      	mov	r6, r9
 800260e:	4645      	mov	r5, r8
 8002610:	46de      	mov	lr, fp
 8002612:	000c      	movs	r4, r1
 8002614:	0309      	lsls	r1, r1, #12
 8002616:	b5e0      	push	{r5, r6, r7, lr}
 8002618:	0a49      	lsrs	r1, r1, #9
 800261a:	0f46      	lsrs	r6, r0, #29
 800261c:	005f      	lsls	r7, r3, #1
 800261e:	4331      	orrs	r1, r6
 8002620:	031e      	lsls	r6, r3, #12
 8002622:	0fdb      	lsrs	r3, r3, #31
 8002624:	0a76      	lsrs	r6, r6, #9
 8002626:	469b      	mov	fp, r3
 8002628:	0f53      	lsrs	r3, r2, #29
 800262a:	4333      	orrs	r3, r6
 800262c:	4ec8      	ldr	r6, [pc, #800]	; (8002950 <__aeabi_dsub+0x348>)
 800262e:	0065      	lsls	r5, r4, #1
 8002630:	00c0      	lsls	r0, r0, #3
 8002632:	0fe4      	lsrs	r4, r4, #31
 8002634:	00d2      	lsls	r2, r2, #3
 8002636:	0d6d      	lsrs	r5, r5, #21
 8002638:	46a2      	mov	sl, r4
 800263a:	4681      	mov	r9, r0
 800263c:	0d7f      	lsrs	r7, r7, #21
 800263e:	469c      	mov	ip, r3
 8002640:	4690      	mov	r8, r2
 8002642:	42b7      	cmp	r7, r6
 8002644:	d100      	bne.n	8002648 <__aeabi_dsub+0x40>
 8002646:	e0b9      	b.n	80027bc <__aeabi_dsub+0x1b4>
 8002648:	465b      	mov	r3, fp
 800264a:	2601      	movs	r6, #1
 800264c:	4073      	eors	r3, r6
 800264e:	469b      	mov	fp, r3
 8002650:	1bee      	subs	r6, r5, r7
 8002652:	45a3      	cmp	fp, r4
 8002654:	d100      	bne.n	8002658 <__aeabi_dsub+0x50>
 8002656:	e083      	b.n	8002760 <__aeabi_dsub+0x158>
 8002658:	2e00      	cmp	r6, #0
 800265a:	dd63      	ble.n	8002724 <__aeabi_dsub+0x11c>
 800265c:	2f00      	cmp	r7, #0
 800265e:	d000      	beq.n	8002662 <__aeabi_dsub+0x5a>
 8002660:	e0b1      	b.n	80027c6 <__aeabi_dsub+0x1be>
 8002662:	4663      	mov	r3, ip
 8002664:	4313      	orrs	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dsub+0x62>
 8002668:	e123      	b.n	80028b2 <__aeabi_dsub+0x2aa>
 800266a:	1e73      	subs	r3, r6, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x6a>
 8002670:	e1ba      	b.n	80029e8 <__aeabi_dsub+0x3e0>
 8002672:	1a86      	subs	r6, r0, r2
 8002674:	4663      	mov	r3, ip
 8002676:	42b0      	cmp	r0, r6
 8002678:	4180      	sbcs	r0, r0
 800267a:	2501      	movs	r5, #1
 800267c:	1ac9      	subs	r1, r1, r3
 800267e:	4240      	negs	r0, r0
 8002680:	1a09      	subs	r1, r1, r0
 8002682:	020b      	lsls	r3, r1, #8
 8002684:	d400      	bmi.n	8002688 <__aeabi_dsub+0x80>
 8002686:	e147      	b.n	8002918 <__aeabi_dsub+0x310>
 8002688:	0249      	lsls	r1, r1, #9
 800268a:	0a4b      	lsrs	r3, r1, #9
 800268c:	4698      	mov	r8, r3
 800268e:	4643      	mov	r3, r8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d100      	bne.n	8002696 <__aeabi_dsub+0x8e>
 8002694:	e189      	b.n	80029aa <__aeabi_dsub+0x3a2>
 8002696:	4640      	mov	r0, r8
 8002698:	f000 fbf2 	bl	8002e80 <__clzsi2>
 800269c:	0003      	movs	r3, r0
 800269e:	3b08      	subs	r3, #8
 80026a0:	2b1f      	cmp	r3, #31
 80026a2:	dd00      	ble.n	80026a6 <__aeabi_dsub+0x9e>
 80026a4:	e17c      	b.n	80029a0 <__aeabi_dsub+0x398>
 80026a6:	2220      	movs	r2, #32
 80026a8:	0030      	movs	r0, r6
 80026aa:	1ad2      	subs	r2, r2, r3
 80026ac:	4641      	mov	r1, r8
 80026ae:	40d0      	lsrs	r0, r2
 80026b0:	4099      	lsls	r1, r3
 80026b2:	0002      	movs	r2, r0
 80026b4:	409e      	lsls	r6, r3
 80026b6:	430a      	orrs	r2, r1
 80026b8:	429d      	cmp	r5, r3
 80026ba:	dd00      	ble.n	80026be <__aeabi_dsub+0xb6>
 80026bc:	e16a      	b.n	8002994 <__aeabi_dsub+0x38c>
 80026be:	1b5d      	subs	r5, r3, r5
 80026c0:	1c6b      	adds	r3, r5, #1
 80026c2:	2b1f      	cmp	r3, #31
 80026c4:	dd00      	ble.n	80026c8 <__aeabi_dsub+0xc0>
 80026c6:	e194      	b.n	80029f2 <__aeabi_dsub+0x3ea>
 80026c8:	2120      	movs	r1, #32
 80026ca:	0010      	movs	r0, r2
 80026cc:	0035      	movs	r5, r6
 80026ce:	1ac9      	subs	r1, r1, r3
 80026d0:	408e      	lsls	r6, r1
 80026d2:	40da      	lsrs	r2, r3
 80026d4:	4088      	lsls	r0, r1
 80026d6:	40dd      	lsrs	r5, r3
 80026d8:	1e71      	subs	r1, r6, #1
 80026da:	418e      	sbcs	r6, r1
 80026dc:	0011      	movs	r1, r2
 80026de:	2207      	movs	r2, #7
 80026e0:	4328      	orrs	r0, r5
 80026e2:	2500      	movs	r5, #0
 80026e4:	4306      	orrs	r6, r0
 80026e6:	4032      	ands	r2, r6
 80026e8:	2a00      	cmp	r2, #0
 80026ea:	d009      	beq.n	8002700 <__aeabi_dsub+0xf8>
 80026ec:	230f      	movs	r3, #15
 80026ee:	4033      	ands	r3, r6
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d005      	beq.n	8002700 <__aeabi_dsub+0xf8>
 80026f4:	1d33      	adds	r3, r6, #4
 80026f6:	42b3      	cmp	r3, r6
 80026f8:	41b6      	sbcs	r6, r6
 80026fa:	4276      	negs	r6, r6
 80026fc:	1989      	adds	r1, r1, r6
 80026fe:	001e      	movs	r6, r3
 8002700:	020b      	lsls	r3, r1, #8
 8002702:	d400      	bmi.n	8002706 <__aeabi_dsub+0xfe>
 8002704:	e23d      	b.n	8002b82 <__aeabi_dsub+0x57a>
 8002706:	1c6a      	adds	r2, r5, #1
 8002708:	4b91      	ldr	r3, [pc, #580]	; (8002950 <__aeabi_dsub+0x348>)
 800270a:	0555      	lsls	r5, r2, #21
 800270c:	0d6d      	lsrs	r5, r5, #21
 800270e:	429a      	cmp	r2, r3
 8002710:	d100      	bne.n	8002714 <__aeabi_dsub+0x10c>
 8002712:	e119      	b.n	8002948 <__aeabi_dsub+0x340>
 8002714:	4a8f      	ldr	r2, [pc, #572]	; (8002954 <__aeabi_dsub+0x34c>)
 8002716:	08f6      	lsrs	r6, r6, #3
 8002718:	400a      	ands	r2, r1
 800271a:	0757      	lsls	r7, r2, #29
 800271c:	0252      	lsls	r2, r2, #9
 800271e:	4337      	orrs	r7, r6
 8002720:	0b12      	lsrs	r2, r2, #12
 8002722:	e09b      	b.n	800285c <__aeabi_dsub+0x254>
 8002724:	2e00      	cmp	r6, #0
 8002726:	d000      	beq.n	800272a <__aeabi_dsub+0x122>
 8002728:	e0c5      	b.n	80028b6 <__aeabi_dsub+0x2ae>
 800272a:	1c6e      	adds	r6, r5, #1
 800272c:	0576      	lsls	r6, r6, #21
 800272e:	0d76      	lsrs	r6, r6, #21
 8002730:	2e01      	cmp	r6, #1
 8002732:	dc00      	bgt.n	8002736 <__aeabi_dsub+0x12e>
 8002734:	e148      	b.n	80029c8 <__aeabi_dsub+0x3c0>
 8002736:	4667      	mov	r7, ip
 8002738:	1a86      	subs	r6, r0, r2
 800273a:	1bcb      	subs	r3, r1, r7
 800273c:	42b0      	cmp	r0, r6
 800273e:	41bf      	sbcs	r7, r7
 8002740:	427f      	negs	r7, r7
 8002742:	46b8      	mov	r8, r7
 8002744:	001f      	movs	r7, r3
 8002746:	4643      	mov	r3, r8
 8002748:	1aff      	subs	r7, r7, r3
 800274a:	003b      	movs	r3, r7
 800274c:	46b8      	mov	r8, r7
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	d500      	bpl.n	8002754 <__aeabi_dsub+0x14c>
 8002752:	e15f      	b.n	8002a14 <__aeabi_dsub+0x40c>
 8002754:	4337      	orrs	r7, r6
 8002756:	d19a      	bne.n	800268e <__aeabi_dsub+0x86>
 8002758:	2200      	movs	r2, #0
 800275a:	2400      	movs	r4, #0
 800275c:	2500      	movs	r5, #0
 800275e:	e079      	b.n	8002854 <__aeabi_dsub+0x24c>
 8002760:	2e00      	cmp	r6, #0
 8002762:	dc00      	bgt.n	8002766 <__aeabi_dsub+0x15e>
 8002764:	e0fa      	b.n	800295c <__aeabi_dsub+0x354>
 8002766:	2f00      	cmp	r7, #0
 8002768:	d100      	bne.n	800276c <__aeabi_dsub+0x164>
 800276a:	e08d      	b.n	8002888 <__aeabi_dsub+0x280>
 800276c:	4b78      	ldr	r3, [pc, #480]	; (8002950 <__aeabi_dsub+0x348>)
 800276e:	429d      	cmp	r5, r3
 8002770:	d067      	beq.n	8002842 <__aeabi_dsub+0x23a>
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	4667      	mov	r7, ip
 8002776:	041b      	lsls	r3, r3, #16
 8002778:	431f      	orrs	r7, r3
 800277a:	46bc      	mov	ip, r7
 800277c:	2e38      	cmp	r6, #56	; 0x38
 800277e:	dc00      	bgt.n	8002782 <__aeabi_dsub+0x17a>
 8002780:	e152      	b.n	8002a28 <__aeabi_dsub+0x420>
 8002782:	4663      	mov	r3, ip
 8002784:	4313      	orrs	r3, r2
 8002786:	1e5a      	subs	r2, r3, #1
 8002788:	4193      	sbcs	r3, r2
 800278a:	181e      	adds	r6, r3, r0
 800278c:	4286      	cmp	r6, r0
 800278e:	4180      	sbcs	r0, r0
 8002790:	4240      	negs	r0, r0
 8002792:	1809      	adds	r1, r1, r0
 8002794:	020b      	lsls	r3, r1, #8
 8002796:	d400      	bmi.n	800279a <__aeabi_dsub+0x192>
 8002798:	e0be      	b.n	8002918 <__aeabi_dsub+0x310>
 800279a:	4b6d      	ldr	r3, [pc, #436]	; (8002950 <__aeabi_dsub+0x348>)
 800279c:	3501      	adds	r5, #1
 800279e:	429d      	cmp	r5, r3
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x19c>
 80027a2:	e0d2      	b.n	800294a <__aeabi_dsub+0x342>
 80027a4:	4a6b      	ldr	r2, [pc, #428]	; (8002954 <__aeabi_dsub+0x34c>)
 80027a6:	0873      	lsrs	r3, r6, #1
 80027a8:	400a      	ands	r2, r1
 80027aa:	2101      	movs	r1, #1
 80027ac:	400e      	ands	r6, r1
 80027ae:	431e      	orrs	r6, r3
 80027b0:	0851      	lsrs	r1, r2, #1
 80027b2:	07d3      	lsls	r3, r2, #31
 80027b4:	2207      	movs	r2, #7
 80027b6:	431e      	orrs	r6, r3
 80027b8:	4032      	ands	r2, r6
 80027ba:	e795      	b.n	80026e8 <__aeabi_dsub+0xe0>
 80027bc:	001e      	movs	r6, r3
 80027be:	4316      	orrs	r6, r2
 80027c0:	d000      	beq.n	80027c4 <__aeabi_dsub+0x1bc>
 80027c2:	e745      	b.n	8002650 <__aeabi_dsub+0x48>
 80027c4:	e740      	b.n	8002648 <__aeabi_dsub+0x40>
 80027c6:	4b62      	ldr	r3, [pc, #392]	; (8002950 <__aeabi_dsub+0x348>)
 80027c8:	429d      	cmp	r5, r3
 80027ca:	d03a      	beq.n	8002842 <__aeabi_dsub+0x23a>
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	4667      	mov	r7, ip
 80027d0:	041b      	lsls	r3, r3, #16
 80027d2:	431f      	orrs	r7, r3
 80027d4:	46bc      	mov	ip, r7
 80027d6:	2e38      	cmp	r6, #56	; 0x38
 80027d8:	dd00      	ble.n	80027dc <__aeabi_dsub+0x1d4>
 80027da:	e0eb      	b.n	80029b4 <__aeabi_dsub+0x3ac>
 80027dc:	2e1f      	cmp	r6, #31
 80027de:	dc00      	bgt.n	80027e2 <__aeabi_dsub+0x1da>
 80027e0:	e13a      	b.n	8002a58 <__aeabi_dsub+0x450>
 80027e2:	0033      	movs	r3, r6
 80027e4:	4667      	mov	r7, ip
 80027e6:	3b20      	subs	r3, #32
 80027e8:	40df      	lsrs	r7, r3
 80027ea:	003b      	movs	r3, r7
 80027ec:	2e20      	cmp	r6, #32
 80027ee:	d005      	beq.n	80027fc <__aeabi_dsub+0x1f4>
 80027f0:	2740      	movs	r7, #64	; 0x40
 80027f2:	1bbf      	subs	r7, r7, r6
 80027f4:	4666      	mov	r6, ip
 80027f6:	40be      	lsls	r6, r7
 80027f8:	4332      	orrs	r2, r6
 80027fa:	4690      	mov	r8, r2
 80027fc:	4646      	mov	r6, r8
 80027fe:	1e72      	subs	r2, r6, #1
 8002800:	4196      	sbcs	r6, r2
 8002802:	4333      	orrs	r3, r6
 8002804:	e0da      	b.n	80029bc <__aeabi_dsub+0x3b4>
 8002806:	2b00      	cmp	r3, #0
 8002808:	d100      	bne.n	800280c <__aeabi_dsub+0x204>
 800280a:	e214      	b.n	8002c36 <__aeabi_dsub+0x62e>
 800280c:	4663      	mov	r3, ip
 800280e:	4313      	orrs	r3, r2
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x20c>
 8002812:	e168      	b.n	8002ae6 <__aeabi_dsub+0x4de>
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	074e      	lsls	r6, r1, #29
 8002818:	08c0      	lsrs	r0, r0, #3
 800281a:	08c9      	lsrs	r1, r1, #3
 800281c:	031b      	lsls	r3, r3, #12
 800281e:	4306      	orrs	r6, r0
 8002820:	4219      	tst	r1, r3
 8002822:	d008      	beq.n	8002836 <__aeabi_dsub+0x22e>
 8002824:	4660      	mov	r0, ip
 8002826:	08c0      	lsrs	r0, r0, #3
 8002828:	4218      	tst	r0, r3
 800282a:	d104      	bne.n	8002836 <__aeabi_dsub+0x22e>
 800282c:	4663      	mov	r3, ip
 800282e:	0001      	movs	r1, r0
 8002830:	08d2      	lsrs	r2, r2, #3
 8002832:	075e      	lsls	r6, r3, #29
 8002834:	4316      	orrs	r6, r2
 8002836:	00f3      	lsls	r3, r6, #3
 8002838:	4699      	mov	r9, r3
 800283a:	00c9      	lsls	r1, r1, #3
 800283c:	0f72      	lsrs	r2, r6, #29
 800283e:	4d44      	ldr	r5, [pc, #272]	; (8002950 <__aeabi_dsub+0x348>)
 8002840:	4311      	orrs	r1, r2
 8002842:	464b      	mov	r3, r9
 8002844:	08de      	lsrs	r6, r3, #3
 8002846:	4b42      	ldr	r3, [pc, #264]	; (8002950 <__aeabi_dsub+0x348>)
 8002848:	074f      	lsls	r7, r1, #29
 800284a:	4337      	orrs	r7, r6
 800284c:	08ca      	lsrs	r2, r1, #3
 800284e:	429d      	cmp	r5, r3
 8002850:	d100      	bne.n	8002854 <__aeabi_dsub+0x24c>
 8002852:	e06e      	b.n	8002932 <__aeabi_dsub+0x32a>
 8002854:	0312      	lsls	r2, r2, #12
 8002856:	056d      	lsls	r5, r5, #21
 8002858:	0b12      	lsrs	r2, r2, #12
 800285a:	0d6d      	lsrs	r5, r5, #21
 800285c:	2100      	movs	r1, #0
 800285e:	0312      	lsls	r2, r2, #12
 8002860:	0b13      	lsrs	r3, r2, #12
 8002862:	0d0a      	lsrs	r2, r1, #20
 8002864:	0512      	lsls	r2, r2, #20
 8002866:	431a      	orrs	r2, r3
 8002868:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <__aeabi_dsub+0x350>)
 800286a:	052d      	lsls	r5, r5, #20
 800286c:	4013      	ands	r3, r2
 800286e:	432b      	orrs	r3, r5
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	07e4      	lsls	r4, r4, #31
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	4323      	orrs	r3, r4
 8002878:	0038      	movs	r0, r7
 800287a:	0019      	movs	r1, r3
 800287c:	bc3c      	pop	{r2, r3, r4, r5}
 800287e:	4690      	mov	r8, r2
 8002880:	4699      	mov	r9, r3
 8002882:	46a2      	mov	sl, r4
 8002884:	46ab      	mov	fp, r5
 8002886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002888:	4663      	mov	r3, ip
 800288a:	4313      	orrs	r3, r2
 800288c:	d011      	beq.n	80028b2 <__aeabi_dsub+0x2aa>
 800288e:	1e73      	subs	r3, r6, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d000      	beq.n	8002896 <__aeabi_dsub+0x28e>
 8002894:	e107      	b.n	8002aa6 <__aeabi_dsub+0x49e>
 8002896:	1886      	adds	r6, r0, r2
 8002898:	4286      	cmp	r6, r0
 800289a:	4180      	sbcs	r0, r0
 800289c:	4461      	add	r1, ip
 800289e:	4240      	negs	r0, r0
 80028a0:	1809      	adds	r1, r1, r0
 80028a2:	2501      	movs	r5, #1
 80028a4:	020b      	lsls	r3, r1, #8
 80028a6:	d537      	bpl.n	8002918 <__aeabi_dsub+0x310>
 80028a8:	2502      	movs	r5, #2
 80028aa:	e77b      	b.n	80027a4 <__aeabi_dsub+0x19c>
 80028ac:	003e      	movs	r6, r7
 80028ae:	4661      	mov	r1, ip
 80028b0:	4691      	mov	r9, r2
 80028b2:	0035      	movs	r5, r6
 80028b4:	e7c5      	b.n	8002842 <__aeabi_dsub+0x23a>
 80028b6:	465c      	mov	r4, fp
 80028b8:	2d00      	cmp	r5, #0
 80028ba:	d000      	beq.n	80028be <__aeabi_dsub+0x2b6>
 80028bc:	e0e1      	b.n	8002a82 <__aeabi_dsub+0x47a>
 80028be:	000b      	movs	r3, r1
 80028c0:	4303      	orrs	r3, r0
 80028c2:	d0f3      	beq.n	80028ac <__aeabi_dsub+0x2a4>
 80028c4:	1c73      	adds	r3, r6, #1
 80028c6:	d100      	bne.n	80028ca <__aeabi_dsub+0x2c2>
 80028c8:	e1ac      	b.n	8002c24 <__aeabi_dsub+0x61c>
 80028ca:	4b21      	ldr	r3, [pc, #132]	; (8002950 <__aeabi_dsub+0x348>)
 80028cc:	429f      	cmp	r7, r3
 80028ce:	d100      	bne.n	80028d2 <__aeabi_dsub+0x2ca>
 80028d0:	e13a      	b.n	8002b48 <__aeabi_dsub+0x540>
 80028d2:	43f3      	mvns	r3, r6
 80028d4:	2b38      	cmp	r3, #56	; 0x38
 80028d6:	dd00      	ble.n	80028da <__aeabi_dsub+0x2d2>
 80028d8:	e16f      	b.n	8002bba <__aeabi_dsub+0x5b2>
 80028da:	2b1f      	cmp	r3, #31
 80028dc:	dd00      	ble.n	80028e0 <__aeabi_dsub+0x2d8>
 80028de:	e18c      	b.n	8002bfa <__aeabi_dsub+0x5f2>
 80028e0:	2520      	movs	r5, #32
 80028e2:	000e      	movs	r6, r1
 80028e4:	1aed      	subs	r5, r5, r3
 80028e6:	40ae      	lsls	r6, r5
 80028e8:	46b0      	mov	r8, r6
 80028ea:	0006      	movs	r6, r0
 80028ec:	46aa      	mov	sl, r5
 80028ee:	40de      	lsrs	r6, r3
 80028f0:	4645      	mov	r5, r8
 80028f2:	4335      	orrs	r5, r6
 80028f4:	002e      	movs	r6, r5
 80028f6:	4655      	mov	r5, sl
 80028f8:	40d9      	lsrs	r1, r3
 80028fa:	40a8      	lsls	r0, r5
 80028fc:	4663      	mov	r3, ip
 80028fe:	1e45      	subs	r5, r0, #1
 8002900:	41a8      	sbcs	r0, r5
 8002902:	1a5b      	subs	r3, r3, r1
 8002904:	469c      	mov	ip, r3
 8002906:	4330      	orrs	r0, r6
 8002908:	1a16      	subs	r6, r2, r0
 800290a:	42b2      	cmp	r2, r6
 800290c:	4192      	sbcs	r2, r2
 800290e:	4663      	mov	r3, ip
 8002910:	4252      	negs	r2, r2
 8002912:	1a99      	subs	r1, r3, r2
 8002914:	003d      	movs	r5, r7
 8002916:	e6b4      	b.n	8002682 <__aeabi_dsub+0x7a>
 8002918:	2207      	movs	r2, #7
 800291a:	4032      	ands	r2, r6
 800291c:	2a00      	cmp	r2, #0
 800291e:	d000      	beq.n	8002922 <__aeabi_dsub+0x31a>
 8002920:	e6e4      	b.n	80026ec <__aeabi_dsub+0xe4>
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <__aeabi_dsub+0x348>)
 8002924:	08f6      	lsrs	r6, r6, #3
 8002926:	074f      	lsls	r7, r1, #29
 8002928:	4337      	orrs	r7, r6
 800292a:	08ca      	lsrs	r2, r1, #3
 800292c:	429d      	cmp	r5, r3
 800292e:	d000      	beq.n	8002932 <__aeabi_dsub+0x32a>
 8002930:	e790      	b.n	8002854 <__aeabi_dsub+0x24c>
 8002932:	003b      	movs	r3, r7
 8002934:	4313      	orrs	r3, r2
 8002936:	d100      	bne.n	800293a <__aeabi_dsub+0x332>
 8002938:	e1a6      	b.n	8002c88 <__aeabi_dsub+0x680>
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	031b      	lsls	r3, r3, #12
 800293e:	431a      	orrs	r2, r3
 8002940:	0312      	lsls	r2, r2, #12
 8002942:	0b12      	lsrs	r2, r2, #12
 8002944:	4d02      	ldr	r5, [pc, #8]	; (8002950 <__aeabi_dsub+0x348>)
 8002946:	e789      	b.n	800285c <__aeabi_dsub+0x254>
 8002948:	0015      	movs	r5, r2
 800294a:	2200      	movs	r2, #0
 800294c:	2700      	movs	r7, #0
 800294e:	e785      	b.n	800285c <__aeabi_dsub+0x254>
 8002950:	000007ff 	.word	0x000007ff
 8002954:	ff7fffff 	.word	0xff7fffff
 8002958:	800fffff 	.word	0x800fffff
 800295c:	2e00      	cmp	r6, #0
 800295e:	d000      	beq.n	8002962 <__aeabi_dsub+0x35a>
 8002960:	e0c7      	b.n	8002af2 <__aeabi_dsub+0x4ea>
 8002962:	1c6b      	adds	r3, r5, #1
 8002964:	055e      	lsls	r6, r3, #21
 8002966:	0d76      	lsrs	r6, r6, #21
 8002968:	2e01      	cmp	r6, #1
 800296a:	dc00      	bgt.n	800296e <__aeabi_dsub+0x366>
 800296c:	e0f0      	b.n	8002b50 <__aeabi_dsub+0x548>
 800296e:	4dc8      	ldr	r5, [pc, #800]	; (8002c90 <__aeabi_dsub+0x688>)
 8002970:	42ab      	cmp	r3, r5
 8002972:	d100      	bne.n	8002976 <__aeabi_dsub+0x36e>
 8002974:	e0b9      	b.n	8002aea <__aeabi_dsub+0x4e2>
 8002976:	1885      	adds	r5, r0, r2
 8002978:	000a      	movs	r2, r1
 800297a:	4285      	cmp	r5, r0
 800297c:	4189      	sbcs	r1, r1
 800297e:	4462      	add	r2, ip
 8002980:	4249      	negs	r1, r1
 8002982:	1851      	adds	r1, r2, r1
 8002984:	2207      	movs	r2, #7
 8002986:	07ce      	lsls	r6, r1, #31
 8002988:	086d      	lsrs	r5, r5, #1
 800298a:	432e      	orrs	r6, r5
 800298c:	0849      	lsrs	r1, r1, #1
 800298e:	4032      	ands	r2, r6
 8002990:	001d      	movs	r5, r3
 8002992:	e6a9      	b.n	80026e8 <__aeabi_dsub+0xe0>
 8002994:	49bf      	ldr	r1, [pc, #764]	; (8002c94 <__aeabi_dsub+0x68c>)
 8002996:	1aed      	subs	r5, r5, r3
 8002998:	4011      	ands	r1, r2
 800299a:	2207      	movs	r2, #7
 800299c:	4032      	ands	r2, r6
 800299e:	e6a3      	b.n	80026e8 <__aeabi_dsub+0xe0>
 80029a0:	0032      	movs	r2, r6
 80029a2:	3828      	subs	r0, #40	; 0x28
 80029a4:	4082      	lsls	r2, r0
 80029a6:	2600      	movs	r6, #0
 80029a8:	e686      	b.n	80026b8 <__aeabi_dsub+0xb0>
 80029aa:	0030      	movs	r0, r6
 80029ac:	f000 fa68 	bl	8002e80 <__clzsi2>
 80029b0:	3020      	adds	r0, #32
 80029b2:	e673      	b.n	800269c <__aeabi_dsub+0x94>
 80029b4:	4663      	mov	r3, ip
 80029b6:	4313      	orrs	r3, r2
 80029b8:	1e5a      	subs	r2, r3, #1
 80029ba:	4193      	sbcs	r3, r2
 80029bc:	1ac6      	subs	r6, r0, r3
 80029be:	42b0      	cmp	r0, r6
 80029c0:	4180      	sbcs	r0, r0
 80029c2:	4240      	negs	r0, r0
 80029c4:	1a09      	subs	r1, r1, r0
 80029c6:	e65c      	b.n	8002682 <__aeabi_dsub+0x7a>
 80029c8:	000e      	movs	r6, r1
 80029ca:	4667      	mov	r7, ip
 80029cc:	4306      	orrs	r6, r0
 80029ce:	4317      	orrs	r7, r2
 80029d0:	2d00      	cmp	r5, #0
 80029d2:	d15e      	bne.n	8002a92 <__aeabi_dsub+0x48a>
 80029d4:	2e00      	cmp	r6, #0
 80029d6:	d000      	beq.n	80029da <__aeabi_dsub+0x3d2>
 80029d8:	e0f3      	b.n	8002bc2 <__aeabi_dsub+0x5ba>
 80029da:	2f00      	cmp	r7, #0
 80029dc:	d100      	bne.n	80029e0 <__aeabi_dsub+0x3d8>
 80029de:	e11e      	b.n	8002c1e <__aeabi_dsub+0x616>
 80029e0:	465c      	mov	r4, fp
 80029e2:	4661      	mov	r1, ip
 80029e4:	4691      	mov	r9, r2
 80029e6:	e72c      	b.n	8002842 <__aeabi_dsub+0x23a>
 80029e8:	4fa9      	ldr	r7, [pc, #676]	; (8002c90 <__aeabi_dsub+0x688>)
 80029ea:	42be      	cmp	r6, r7
 80029ec:	d07b      	beq.n	8002ae6 <__aeabi_dsub+0x4de>
 80029ee:	001e      	movs	r6, r3
 80029f0:	e6f1      	b.n	80027d6 <__aeabi_dsub+0x1ce>
 80029f2:	0010      	movs	r0, r2
 80029f4:	3d1f      	subs	r5, #31
 80029f6:	40e8      	lsrs	r0, r5
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	d003      	beq.n	8002a04 <__aeabi_dsub+0x3fc>
 80029fc:	2140      	movs	r1, #64	; 0x40
 80029fe:	1acb      	subs	r3, r1, r3
 8002a00:	409a      	lsls	r2, r3
 8002a02:	4316      	orrs	r6, r2
 8002a04:	1e73      	subs	r3, r6, #1
 8002a06:	419e      	sbcs	r6, r3
 8002a08:	2207      	movs	r2, #7
 8002a0a:	4306      	orrs	r6, r0
 8002a0c:	4032      	ands	r2, r6
 8002a0e:	2100      	movs	r1, #0
 8002a10:	2500      	movs	r5, #0
 8002a12:	e783      	b.n	800291c <__aeabi_dsub+0x314>
 8002a14:	1a16      	subs	r6, r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	42b2      	cmp	r2, r6
 8002a1a:	4180      	sbcs	r0, r0
 8002a1c:	1a59      	subs	r1, r3, r1
 8002a1e:	4240      	negs	r0, r0
 8002a20:	1a0b      	subs	r3, r1, r0
 8002a22:	4698      	mov	r8, r3
 8002a24:	465c      	mov	r4, fp
 8002a26:	e632      	b.n	800268e <__aeabi_dsub+0x86>
 8002a28:	2e1f      	cmp	r6, #31
 8002a2a:	dd00      	ble.n	8002a2e <__aeabi_dsub+0x426>
 8002a2c:	e0ab      	b.n	8002b86 <__aeabi_dsub+0x57e>
 8002a2e:	2720      	movs	r7, #32
 8002a30:	1bbb      	subs	r3, r7, r6
 8002a32:	469a      	mov	sl, r3
 8002a34:	4663      	mov	r3, ip
 8002a36:	4657      	mov	r7, sl
 8002a38:	40bb      	lsls	r3, r7
 8002a3a:	4699      	mov	r9, r3
 8002a3c:	0013      	movs	r3, r2
 8002a3e:	464f      	mov	r7, r9
 8002a40:	40f3      	lsrs	r3, r6
 8002a42:	431f      	orrs	r7, r3
 8002a44:	003b      	movs	r3, r7
 8002a46:	4657      	mov	r7, sl
 8002a48:	40ba      	lsls	r2, r7
 8002a4a:	1e57      	subs	r7, r2, #1
 8002a4c:	41ba      	sbcs	r2, r7
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	4662      	mov	r2, ip
 8002a52:	40f2      	lsrs	r2, r6
 8002a54:	1889      	adds	r1, r1, r2
 8002a56:	e698      	b.n	800278a <__aeabi_dsub+0x182>
 8002a58:	2720      	movs	r7, #32
 8002a5a:	1bbb      	subs	r3, r7, r6
 8002a5c:	469a      	mov	sl, r3
 8002a5e:	4663      	mov	r3, ip
 8002a60:	4657      	mov	r7, sl
 8002a62:	40bb      	lsls	r3, r7
 8002a64:	4699      	mov	r9, r3
 8002a66:	0013      	movs	r3, r2
 8002a68:	464f      	mov	r7, r9
 8002a6a:	40f3      	lsrs	r3, r6
 8002a6c:	431f      	orrs	r7, r3
 8002a6e:	003b      	movs	r3, r7
 8002a70:	4657      	mov	r7, sl
 8002a72:	40ba      	lsls	r2, r7
 8002a74:	1e57      	subs	r7, r2, #1
 8002a76:	41ba      	sbcs	r2, r7
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	4662      	mov	r2, ip
 8002a7c:	40f2      	lsrs	r2, r6
 8002a7e:	1a89      	subs	r1, r1, r2
 8002a80:	e79c      	b.n	80029bc <__aeabi_dsub+0x3b4>
 8002a82:	4b83      	ldr	r3, [pc, #524]	; (8002c90 <__aeabi_dsub+0x688>)
 8002a84:	429f      	cmp	r7, r3
 8002a86:	d05f      	beq.n	8002b48 <__aeabi_dsub+0x540>
 8002a88:	2580      	movs	r5, #128	; 0x80
 8002a8a:	042d      	lsls	r5, r5, #16
 8002a8c:	4273      	negs	r3, r6
 8002a8e:	4329      	orrs	r1, r5
 8002a90:	e720      	b.n	80028d4 <__aeabi_dsub+0x2cc>
 8002a92:	2e00      	cmp	r6, #0
 8002a94:	d10c      	bne.n	8002ab0 <__aeabi_dsub+0x4a8>
 8002a96:	2f00      	cmp	r7, #0
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x494>
 8002a9a:	e0d0      	b.n	8002c3e <__aeabi_dsub+0x636>
 8002a9c:	465c      	mov	r4, fp
 8002a9e:	4661      	mov	r1, ip
 8002aa0:	4691      	mov	r9, r2
 8002aa2:	4d7b      	ldr	r5, [pc, #492]	; (8002c90 <__aeabi_dsub+0x688>)
 8002aa4:	e6cd      	b.n	8002842 <__aeabi_dsub+0x23a>
 8002aa6:	4f7a      	ldr	r7, [pc, #488]	; (8002c90 <__aeabi_dsub+0x688>)
 8002aa8:	42be      	cmp	r6, r7
 8002aaa:	d01c      	beq.n	8002ae6 <__aeabi_dsub+0x4de>
 8002aac:	001e      	movs	r6, r3
 8002aae:	e665      	b.n	800277c <__aeabi_dsub+0x174>
 8002ab0:	2f00      	cmp	r7, #0
 8002ab2:	d018      	beq.n	8002ae6 <__aeabi_dsub+0x4de>
 8002ab4:	08c0      	lsrs	r0, r0, #3
 8002ab6:	074e      	lsls	r6, r1, #29
 8002ab8:	4306      	orrs	r6, r0
 8002aba:	2080      	movs	r0, #128	; 0x80
 8002abc:	08c9      	lsrs	r1, r1, #3
 8002abe:	0300      	lsls	r0, r0, #12
 8002ac0:	4201      	tst	r1, r0
 8002ac2:	d008      	beq.n	8002ad6 <__aeabi_dsub+0x4ce>
 8002ac4:	4663      	mov	r3, ip
 8002ac6:	08dc      	lsrs	r4, r3, #3
 8002ac8:	4204      	tst	r4, r0
 8002aca:	d104      	bne.n	8002ad6 <__aeabi_dsub+0x4ce>
 8002acc:	0021      	movs	r1, r4
 8002ace:	46da      	mov	sl, fp
 8002ad0:	08d2      	lsrs	r2, r2, #3
 8002ad2:	075e      	lsls	r6, r3, #29
 8002ad4:	4316      	orrs	r6, r2
 8002ad6:	00f3      	lsls	r3, r6, #3
 8002ad8:	4699      	mov	r9, r3
 8002ada:	2401      	movs	r4, #1
 8002adc:	4653      	mov	r3, sl
 8002ade:	00c9      	lsls	r1, r1, #3
 8002ae0:	0f72      	lsrs	r2, r6, #29
 8002ae2:	4311      	orrs	r1, r2
 8002ae4:	401c      	ands	r4, r3
 8002ae6:	4d6a      	ldr	r5, [pc, #424]	; (8002c90 <__aeabi_dsub+0x688>)
 8002ae8:	e6ab      	b.n	8002842 <__aeabi_dsub+0x23a>
 8002aea:	001d      	movs	r5, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	2700      	movs	r7, #0
 8002af0:	e6b4      	b.n	800285c <__aeabi_dsub+0x254>
 8002af2:	2d00      	cmp	r5, #0
 8002af4:	d159      	bne.n	8002baa <__aeabi_dsub+0x5a2>
 8002af6:	000b      	movs	r3, r1
 8002af8:	4303      	orrs	r3, r0
 8002afa:	d100      	bne.n	8002afe <__aeabi_dsub+0x4f6>
 8002afc:	e6d6      	b.n	80028ac <__aeabi_dsub+0x2a4>
 8002afe:	1c73      	adds	r3, r6, #1
 8002b00:	d100      	bne.n	8002b04 <__aeabi_dsub+0x4fc>
 8002b02:	e0b2      	b.n	8002c6a <__aeabi_dsub+0x662>
 8002b04:	4b62      	ldr	r3, [pc, #392]	; (8002c90 <__aeabi_dsub+0x688>)
 8002b06:	429f      	cmp	r7, r3
 8002b08:	d01e      	beq.n	8002b48 <__aeabi_dsub+0x540>
 8002b0a:	43f3      	mvns	r3, r6
 8002b0c:	2b38      	cmp	r3, #56	; 0x38
 8002b0e:	dc6f      	bgt.n	8002bf0 <__aeabi_dsub+0x5e8>
 8002b10:	2b1f      	cmp	r3, #31
 8002b12:	dd00      	ble.n	8002b16 <__aeabi_dsub+0x50e>
 8002b14:	e097      	b.n	8002c46 <__aeabi_dsub+0x63e>
 8002b16:	2520      	movs	r5, #32
 8002b18:	000e      	movs	r6, r1
 8002b1a:	1aed      	subs	r5, r5, r3
 8002b1c:	40ae      	lsls	r6, r5
 8002b1e:	46b0      	mov	r8, r6
 8002b20:	0006      	movs	r6, r0
 8002b22:	46aa      	mov	sl, r5
 8002b24:	40de      	lsrs	r6, r3
 8002b26:	4645      	mov	r5, r8
 8002b28:	4335      	orrs	r5, r6
 8002b2a:	002e      	movs	r6, r5
 8002b2c:	4655      	mov	r5, sl
 8002b2e:	40a8      	lsls	r0, r5
 8002b30:	40d9      	lsrs	r1, r3
 8002b32:	1e45      	subs	r5, r0, #1
 8002b34:	41a8      	sbcs	r0, r5
 8002b36:	448c      	add	ip, r1
 8002b38:	4306      	orrs	r6, r0
 8002b3a:	18b6      	adds	r6, r6, r2
 8002b3c:	4296      	cmp	r6, r2
 8002b3e:	4192      	sbcs	r2, r2
 8002b40:	4251      	negs	r1, r2
 8002b42:	4461      	add	r1, ip
 8002b44:	003d      	movs	r5, r7
 8002b46:	e625      	b.n	8002794 <__aeabi_dsub+0x18c>
 8002b48:	003d      	movs	r5, r7
 8002b4a:	4661      	mov	r1, ip
 8002b4c:	4691      	mov	r9, r2
 8002b4e:	e678      	b.n	8002842 <__aeabi_dsub+0x23a>
 8002b50:	000b      	movs	r3, r1
 8002b52:	4303      	orrs	r3, r0
 8002b54:	2d00      	cmp	r5, #0
 8002b56:	d000      	beq.n	8002b5a <__aeabi_dsub+0x552>
 8002b58:	e655      	b.n	8002806 <__aeabi_dsub+0x1fe>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f5      	beq.n	8002b4a <__aeabi_dsub+0x542>
 8002b5e:	4663      	mov	r3, ip
 8002b60:	4313      	orrs	r3, r2
 8002b62:	d100      	bne.n	8002b66 <__aeabi_dsub+0x55e>
 8002b64:	e66d      	b.n	8002842 <__aeabi_dsub+0x23a>
 8002b66:	1886      	adds	r6, r0, r2
 8002b68:	4286      	cmp	r6, r0
 8002b6a:	4180      	sbcs	r0, r0
 8002b6c:	4461      	add	r1, ip
 8002b6e:	4240      	negs	r0, r0
 8002b70:	1809      	adds	r1, r1, r0
 8002b72:	2200      	movs	r2, #0
 8002b74:	020b      	lsls	r3, r1, #8
 8002b76:	d400      	bmi.n	8002b7a <__aeabi_dsub+0x572>
 8002b78:	e6d0      	b.n	800291c <__aeabi_dsub+0x314>
 8002b7a:	4b46      	ldr	r3, [pc, #280]	; (8002c94 <__aeabi_dsub+0x68c>)
 8002b7c:	3501      	adds	r5, #1
 8002b7e:	4019      	ands	r1, r3
 8002b80:	e5b2      	b.n	80026e8 <__aeabi_dsub+0xe0>
 8002b82:	46b1      	mov	r9, r6
 8002b84:	e65d      	b.n	8002842 <__aeabi_dsub+0x23a>
 8002b86:	0033      	movs	r3, r6
 8002b88:	4667      	mov	r7, ip
 8002b8a:	3b20      	subs	r3, #32
 8002b8c:	40df      	lsrs	r7, r3
 8002b8e:	003b      	movs	r3, r7
 8002b90:	2e20      	cmp	r6, #32
 8002b92:	d005      	beq.n	8002ba0 <__aeabi_dsub+0x598>
 8002b94:	2740      	movs	r7, #64	; 0x40
 8002b96:	1bbf      	subs	r7, r7, r6
 8002b98:	4666      	mov	r6, ip
 8002b9a:	40be      	lsls	r6, r7
 8002b9c:	4332      	orrs	r2, r6
 8002b9e:	4690      	mov	r8, r2
 8002ba0:	4646      	mov	r6, r8
 8002ba2:	1e72      	subs	r2, r6, #1
 8002ba4:	4196      	sbcs	r6, r2
 8002ba6:	4333      	orrs	r3, r6
 8002ba8:	e5ef      	b.n	800278a <__aeabi_dsub+0x182>
 8002baa:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <__aeabi_dsub+0x688>)
 8002bac:	429f      	cmp	r7, r3
 8002bae:	d0cb      	beq.n	8002b48 <__aeabi_dsub+0x540>
 8002bb0:	2580      	movs	r5, #128	; 0x80
 8002bb2:	042d      	lsls	r5, r5, #16
 8002bb4:	4273      	negs	r3, r6
 8002bb6:	4329      	orrs	r1, r5
 8002bb8:	e7a8      	b.n	8002b0c <__aeabi_dsub+0x504>
 8002bba:	4308      	orrs	r0, r1
 8002bbc:	1e41      	subs	r1, r0, #1
 8002bbe:	4188      	sbcs	r0, r1
 8002bc0:	e6a2      	b.n	8002908 <__aeabi_dsub+0x300>
 8002bc2:	2f00      	cmp	r7, #0
 8002bc4:	d100      	bne.n	8002bc8 <__aeabi_dsub+0x5c0>
 8002bc6:	e63c      	b.n	8002842 <__aeabi_dsub+0x23a>
 8002bc8:	4663      	mov	r3, ip
 8002bca:	1a86      	subs	r6, r0, r2
 8002bcc:	1acf      	subs	r7, r1, r3
 8002bce:	42b0      	cmp	r0, r6
 8002bd0:	419b      	sbcs	r3, r3
 8002bd2:	425b      	negs	r3, r3
 8002bd4:	1afb      	subs	r3, r7, r3
 8002bd6:	4698      	mov	r8, r3
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	d54e      	bpl.n	8002c7a <__aeabi_dsub+0x672>
 8002bdc:	1a16      	subs	r6, r2, r0
 8002bde:	4663      	mov	r3, ip
 8002be0:	42b2      	cmp	r2, r6
 8002be2:	4192      	sbcs	r2, r2
 8002be4:	1a59      	subs	r1, r3, r1
 8002be6:	4252      	negs	r2, r2
 8002be8:	1a89      	subs	r1, r1, r2
 8002bea:	465c      	mov	r4, fp
 8002bec:	2200      	movs	r2, #0
 8002bee:	e57b      	b.n	80026e8 <__aeabi_dsub+0xe0>
 8002bf0:	4301      	orrs	r1, r0
 8002bf2:	000e      	movs	r6, r1
 8002bf4:	1e71      	subs	r1, r6, #1
 8002bf6:	418e      	sbcs	r6, r1
 8002bf8:	e79f      	b.n	8002b3a <__aeabi_dsub+0x532>
 8002bfa:	001d      	movs	r5, r3
 8002bfc:	000e      	movs	r6, r1
 8002bfe:	3d20      	subs	r5, #32
 8002c00:	40ee      	lsrs	r6, r5
 8002c02:	46b0      	mov	r8, r6
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d004      	beq.n	8002c12 <__aeabi_dsub+0x60a>
 8002c08:	2540      	movs	r5, #64	; 0x40
 8002c0a:	1aeb      	subs	r3, r5, r3
 8002c0c:	4099      	lsls	r1, r3
 8002c0e:	4308      	orrs	r0, r1
 8002c10:	4681      	mov	r9, r0
 8002c12:	4648      	mov	r0, r9
 8002c14:	4643      	mov	r3, r8
 8002c16:	1e41      	subs	r1, r0, #1
 8002c18:	4188      	sbcs	r0, r1
 8002c1a:	4318      	orrs	r0, r3
 8002c1c:	e674      	b.n	8002908 <__aeabi_dsub+0x300>
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2400      	movs	r4, #0
 8002c22:	e617      	b.n	8002854 <__aeabi_dsub+0x24c>
 8002c24:	1a16      	subs	r6, r2, r0
 8002c26:	4663      	mov	r3, ip
 8002c28:	42b2      	cmp	r2, r6
 8002c2a:	4192      	sbcs	r2, r2
 8002c2c:	1a59      	subs	r1, r3, r1
 8002c2e:	4252      	negs	r2, r2
 8002c30:	1a89      	subs	r1, r1, r2
 8002c32:	003d      	movs	r5, r7
 8002c34:	e525      	b.n	8002682 <__aeabi_dsub+0x7a>
 8002c36:	4661      	mov	r1, ip
 8002c38:	4691      	mov	r9, r2
 8002c3a:	4d15      	ldr	r5, [pc, #84]	; (8002c90 <__aeabi_dsub+0x688>)
 8002c3c:	e601      	b.n	8002842 <__aeabi_dsub+0x23a>
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	2400      	movs	r4, #0
 8002c42:	0312      	lsls	r2, r2, #12
 8002c44:	e679      	b.n	800293a <__aeabi_dsub+0x332>
 8002c46:	001d      	movs	r5, r3
 8002c48:	000e      	movs	r6, r1
 8002c4a:	3d20      	subs	r5, #32
 8002c4c:	40ee      	lsrs	r6, r5
 8002c4e:	46b0      	mov	r8, r6
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d004      	beq.n	8002c5e <__aeabi_dsub+0x656>
 8002c54:	2540      	movs	r5, #64	; 0x40
 8002c56:	1aeb      	subs	r3, r5, r3
 8002c58:	4099      	lsls	r1, r3
 8002c5a:	4308      	orrs	r0, r1
 8002c5c:	4681      	mov	r9, r0
 8002c5e:	464e      	mov	r6, r9
 8002c60:	4643      	mov	r3, r8
 8002c62:	1e71      	subs	r1, r6, #1
 8002c64:	418e      	sbcs	r6, r1
 8002c66:	431e      	orrs	r6, r3
 8002c68:	e767      	b.n	8002b3a <__aeabi_dsub+0x532>
 8002c6a:	1886      	adds	r6, r0, r2
 8002c6c:	4296      	cmp	r6, r2
 8002c6e:	419b      	sbcs	r3, r3
 8002c70:	4461      	add	r1, ip
 8002c72:	425b      	negs	r3, r3
 8002c74:	18c9      	adds	r1, r1, r3
 8002c76:	003d      	movs	r5, r7
 8002c78:	e58c      	b.n	8002794 <__aeabi_dsub+0x18c>
 8002c7a:	4647      	mov	r7, r8
 8002c7c:	4337      	orrs	r7, r6
 8002c7e:	d0ce      	beq.n	8002c1e <__aeabi_dsub+0x616>
 8002c80:	2207      	movs	r2, #7
 8002c82:	4641      	mov	r1, r8
 8002c84:	4032      	ands	r2, r6
 8002c86:	e649      	b.n	800291c <__aeabi_dsub+0x314>
 8002c88:	2700      	movs	r7, #0
 8002c8a:	003a      	movs	r2, r7
 8002c8c:	e5e6      	b.n	800285c <__aeabi_dsub+0x254>
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	000007ff 	.word	0x000007ff
 8002c94:	ff7fffff 	.word	0xff7fffff

08002c98 <__aeabi_d2iz>:
 8002c98:	b530      	push	{r4, r5, lr}
 8002c9a:	4d14      	ldr	r5, [pc, #80]	; (8002cec <__aeabi_d2iz+0x54>)
 8002c9c:	030a      	lsls	r2, r1, #12
 8002c9e:	004b      	lsls	r3, r1, #1
 8002ca0:	0b12      	lsrs	r2, r2, #12
 8002ca2:	0d5b      	lsrs	r3, r3, #21
 8002ca4:	0fc9      	lsrs	r1, r1, #31
 8002ca6:	2400      	movs	r4, #0
 8002ca8:	42ab      	cmp	r3, r5
 8002caa:	dd11      	ble.n	8002cd0 <__aeabi_d2iz+0x38>
 8002cac:	4c10      	ldr	r4, [pc, #64]	; (8002cf0 <__aeabi_d2iz+0x58>)
 8002cae:	42a3      	cmp	r3, r4
 8002cb0:	dc10      	bgt.n	8002cd4 <__aeabi_d2iz+0x3c>
 8002cb2:	2480      	movs	r4, #128	; 0x80
 8002cb4:	0364      	lsls	r4, r4, #13
 8002cb6:	4322      	orrs	r2, r4
 8002cb8:	4c0e      	ldr	r4, [pc, #56]	; (8002cf4 <__aeabi_d2iz+0x5c>)
 8002cba:	1ae4      	subs	r4, r4, r3
 8002cbc:	2c1f      	cmp	r4, #31
 8002cbe:	dd0c      	ble.n	8002cda <__aeabi_d2iz+0x42>
 8002cc0:	480d      	ldr	r0, [pc, #52]	; (8002cf8 <__aeabi_d2iz+0x60>)
 8002cc2:	1ac3      	subs	r3, r0, r3
 8002cc4:	40da      	lsrs	r2, r3
 8002cc6:	0013      	movs	r3, r2
 8002cc8:	425c      	negs	r4, r3
 8002cca:	2900      	cmp	r1, #0
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_d2iz+0x38>
 8002cce:	001c      	movs	r4, r3
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	bd30      	pop	{r4, r5, pc}
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <__aeabi_d2iz+0x64>)
 8002cd6:	18cc      	adds	r4, r1, r3
 8002cd8:	e7fa      	b.n	8002cd0 <__aeabi_d2iz+0x38>
 8002cda:	4d09      	ldr	r5, [pc, #36]	; (8002d00 <__aeabi_d2iz+0x68>)
 8002cdc:	40e0      	lsrs	r0, r4
 8002cde:	46ac      	mov	ip, r5
 8002ce0:	4463      	add	r3, ip
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	0013      	movs	r3, r2
 8002ce6:	4303      	orrs	r3, r0
 8002ce8:	e7ee      	b.n	8002cc8 <__aeabi_d2iz+0x30>
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	000003fe 	.word	0x000003fe
 8002cf0:	0000041d 	.word	0x0000041d
 8002cf4:	00000433 	.word	0x00000433
 8002cf8:	00000413 	.word	0x00000413
 8002cfc:	7fffffff 	.word	0x7fffffff
 8002d00:	fffffbed 	.word	0xfffffbed

08002d04 <__aeabi_i2d>:
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d02d      	beq.n	8002d66 <__aeabi_i2d+0x62>
 8002d0a:	17c3      	asrs	r3, r0, #31
 8002d0c:	18c5      	adds	r5, r0, r3
 8002d0e:	405d      	eors	r5, r3
 8002d10:	0fc4      	lsrs	r4, r0, #31
 8002d12:	0028      	movs	r0, r5
 8002d14:	f000 f8b4 	bl	8002e80 <__clzsi2>
 8002d18:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <__aeabi_i2d+0x6c>)
 8002d1a:	1a1b      	subs	r3, r3, r0
 8002d1c:	055b      	lsls	r3, r3, #21
 8002d1e:	0d5b      	lsrs	r3, r3, #21
 8002d20:	280a      	cmp	r0, #10
 8002d22:	dd15      	ble.n	8002d50 <__aeabi_i2d+0x4c>
 8002d24:	380b      	subs	r0, #11
 8002d26:	4085      	lsls	r5, r0
 8002d28:	2200      	movs	r2, #0
 8002d2a:	032d      	lsls	r5, r5, #12
 8002d2c:	0b2d      	lsrs	r5, r5, #12
 8002d2e:	2100      	movs	r1, #0
 8002d30:	0010      	movs	r0, r2
 8002d32:	032d      	lsls	r5, r5, #12
 8002d34:	0d0a      	lsrs	r2, r1, #20
 8002d36:	0b2d      	lsrs	r5, r5, #12
 8002d38:	0512      	lsls	r2, r2, #20
 8002d3a:	432a      	orrs	r2, r5
 8002d3c:	4d0d      	ldr	r5, [pc, #52]	; (8002d74 <__aeabi_i2d+0x70>)
 8002d3e:	051b      	lsls	r3, r3, #20
 8002d40:	402a      	ands	r2, r5
 8002d42:	4313      	orrs	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	07e4      	lsls	r4, r4, #31
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	4323      	orrs	r3, r4
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	bd70      	pop	{r4, r5, r6, pc}
 8002d50:	0002      	movs	r2, r0
 8002d52:	0029      	movs	r1, r5
 8002d54:	3215      	adds	r2, #21
 8002d56:	4091      	lsls	r1, r2
 8002d58:	000a      	movs	r2, r1
 8002d5a:	210b      	movs	r1, #11
 8002d5c:	1a08      	subs	r0, r1, r0
 8002d5e:	40c5      	lsrs	r5, r0
 8002d60:	032d      	lsls	r5, r5, #12
 8002d62:	0b2d      	lsrs	r5, r5, #12
 8002d64:	e7e3      	b.n	8002d2e <__aeabi_i2d+0x2a>
 8002d66:	2400      	movs	r4, #0
 8002d68:	2300      	movs	r3, #0
 8002d6a:	2500      	movs	r5, #0
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	e7de      	b.n	8002d2e <__aeabi_i2d+0x2a>
 8002d70:	0000041e 	.word	0x0000041e
 8002d74:	800fffff 	.word	0x800fffff

08002d78 <__aeabi_ui2d>:
 8002d78:	b510      	push	{r4, lr}
 8002d7a:	1e04      	subs	r4, r0, #0
 8002d7c:	d025      	beq.n	8002dca <__aeabi_ui2d+0x52>
 8002d7e:	f000 f87f 	bl	8002e80 <__clzsi2>
 8002d82:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <__aeabi_ui2d+0x5c>)
 8002d84:	1a1b      	subs	r3, r3, r0
 8002d86:	055b      	lsls	r3, r3, #21
 8002d88:	0d5b      	lsrs	r3, r3, #21
 8002d8a:	280a      	cmp	r0, #10
 8002d8c:	dd12      	ble.n	8002db4 <__aeabi_ui2d+0x3c>
 8002d8e:	380b      	subs	r0, #11
 8002d90:	4084      	lsls	r4, r0
 8002d92:	2200      	movs	r2, #0
 8002d94:	0324      	lsls	r4, r4, #12
 8002d96:	0b24      	lsrs	r4, r4, #12
 8002d98:	2100      	movs	r1, #0
 8002d9a:	0010      	movs	r0, r2
 8002d9c:	0324      	lsls	r4, r4, #12
 8002d9e:	0d0a      	lsrs	r2, r1, #20
 8002da0:	0b24      	lsrs	r4, r4, #12
 8002da2:	0512      	lsls	r2, r2, #20
 8002da4:	4322      	orrs	r2, r4
 8002da6:	4c0c      	ldr	r4, [pc, #48]	; (8002dd8 <__aeabi_ui2d+0x60>)
 8002da8:	051b      	lsls	r3, r3, #20
 8002daa:	4022      	ands	r2, r4
 8002dac:	4313      	orrs	r3, r2
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	0859      	lsrs	r1, r3, #1
 8002db2:	bd10      	pop	{r4, pc}
 8002db4:	0002      	movs	r2, r0
 8002db6:	0021      	movs	r1, r4
 8002db8:	3215      	adds	r2, #21
 8002dba:	4091      	lsls	r1, r2
 8002dbc:	000a      	movs	r2, r1
 8002dbe:	210b      	movs	r1, #11
 8002dc0:	1a08      	subs	r0, r1, r0
 8002dc2:	40c4      	lsrs	r4, r0
 8002dc4:	0324      	lsls	r4, r4, #12
 8002dc6:	0b24      	lsrs	r4, r4, #12
 8002dc8:	e7e6      	b.n	8002d98 <__aeabi_ui2d+0x20>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2400      	movs	r4, #0
 8002dce:	2200      	movs	r2, #0
 8002dd0:	e7e2      	b.n	8002d98 <__aeabi_ui2d+0x20>
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	0000041e 	.word	0x0000041e
 8002dd8:	800fffff 	.word	0x800fffff

08002ddc <__aeabi_f2d>:
 8002ddc:	0041      	lsls	r1, r0, #1
 8002dde:	0e09      	lsrs	r1, r1, #24
 8002de0:	1c4b      	adds	r3, r1, #1
 8002de2:	b570      	push	{r4, r5, r6, lr}
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	0246      	lsls	r6, r0, #9
 8002de8:	0a75      	lsrs	r5, r6, #9
 8002dea:	0fc4      	lsrs	r4, r0, #31
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	dd14      	ble.n	8002e1a <__aeabi_f2d+0x3e>
 8002df0:	23e0      	movs	r3, #224	; 0xe0
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	076d      	lsls	r5, r5, #29
 8002df6:	0b36      	lsrs	r6, r6, #12
 8002df8:	18cb      	adds	r3, r1, r3
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	0d0a      	lsrs	r2, r1, #20
 8002dfe:	0028      	movs	r0, r5
 8002e00:	0512      	lsls	r2, r2, #20
 8002e02:	4d1c      	ldr	r5, [pc, #112]	; (8002e74 <__aeabi_f2d+0x98>)
 8002e04:	4332      	orrs	r2, r6
 8002e06:	055b      	lsls	r3, r3, #21
 8002e08:	402a      	ands	r2, r5
 8002e0a:	085b      	lsrs	r3, r3, #1
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	07e4      	lsls	r4, r4, #31
 8002e12:	085b      	lsrs	r3, r3, #1
 8002e14:	4323      	orrs	r3, r4
 8002e16:	0019      	movs	r1, r3
 8002e18:	bd70      	pop	{r4, r5, r6, pc}
 8002e1a:	2900      	cmp	r1, #0
 8002e1c:	d114      	bne.n	8002e48 <__aeabi_f2d+0x6c>
 8002e1e:	2d00      	cmp	r5, #0
 8002e20:	d01e      	beq.n	8002e60 <__aeabi_f2d+0x84>
 8002e22:	0028      	movs	r0, r5
 8002e24:	f000 f82c 	bl	8002e80 <__clzsi2>
 8002e28:	280a      	cmp	r0, #10
 8002e2a:	dc1c      	bgt.n	8002e66 <__aeabi_f2d+0x8a>
 8002e2c:	230b      	movs	r3, #11
 8002e2e:	002a      	movs	r2, r5
 8002e30:	1a1b      	subs	r3, r3, r0
 8002e32:	40da      	lsrs	r2, r3
 8002e34:	0003      	movs	r3, r0
 8002e36:	3315      	adds	r3, #21
 8002e38:	409d      	lsls	r5, r3
 8002e3a:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <__aeabi_f2d+0x9c>)
 8002e3c:	0312      	lsls	r2, r2, #12
 8002e3e:	1a1b      	subs	r3, r3, r0
 8002e40:	055b      	lsls	r3, r3, #21
 8002e42:	0b16      	lsrs	r6, r2, #12
 8002e44:	0d5b      	lsrs	r3, r3, #21
 8002e46:	e7d8      	b.n	8002dfa <__aeabi_f2d+0x1e>
 8002e48:	2d00      	cmp	r5, #0
 8002e4a:	d006      	beq.n	8002e5a <__aeabi_f2d+0x7e>
 8002e4c:	0b32      	lsrs	r2, r6, #12
 8002e4e:	2680      	movs	r6, #128	; 0x80
 8002e50:	0336      	lsls	r6, r6, #12
 8002e52:	076d      	lsls	r5, r5, #29
 8002e54:	4316      	orrs	r6, r2
 8002e56:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <__aeabi_f2d+0xa0>)
 8002e58:	e7cf      	b.n	8002dfa <__aeabi_f2d+0x1e>
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <__aeabi_f2d+0xa0>)
 8002e5c:	2600      	movs	r6, #0
 8002e5e:	e7cc      	b.n	8002dfa <__aeabi_f2d+0x1e>
 8002e60:	2300      	movs	r3, #0
 8002e62:	2600      	movs	r6, #0
 8002e64:	e7c9      	b.n	8002dfa <__aeabi_f2d+0x1e>
 8002e66:	0003      	movs	r3, r0
 8002e68:	002a      	movs	r2, r5
 8002e6a:	3b0b      	subs	r3, #11
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	2500      	movs	r5, #0
 8002e70:	e7e3      	b.n	8002e3a <__aeabi_f2d+0x5e>
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	800fffff 	.word	0x800fffff
 8002e78:	00000389 	.word	0x00000389
 8002e7c:	000007ff 	.word	0x000007ff

08002e80 <__clzsi2>:
 8002e80:	211c      	movs	r1, #28
 8002e82:	2301      	movs	r3, #1
 8002e84:	041b      	lsls	r3, r3, #16
 8002e86:	4298      	cmp	r0, r3
 8002e88:	d301      	bcc.n	8002e8e <__clzsi2+0xe>
 8002e8a:	0c00      	lsrs	r0, r0, #16
 8002e8c:	3910      	subs	r1, #16
 8002e8e:	0a1b      	lsrs	r3, r3, #8
 8002e90:	4298      	cmp	r0, r3
 8002e92:	d301      	bcc.n	8002e98 <__clzsi2+0x18>
 8002e94:	0a00      	lsrs	r0, r0, #8
 8002e96:	3908      	subs	r1, #8
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	4298      	cmp	r0, r3
 8002e9c:	d301      	bcc.n	8002ea2 <__clzsi2+0x22>
 8002e9e:	0900      	lsrs	r0, r0, #4
 8002ea0:	3904      	subs	r1, #4
 8002ea2:	a202      	add	r2, pc, #8	; (adr r2, 8002eac <__clzsi2+0x2c>)
 8002ea4:	5c10      	ldrb	r0, [r2, r0]
 8002ea6:	1840      	adds	r0, r0, r1
 8002ea8:	4770      	bx	lr
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	02020304 	.word	0x02020304
 8002eb0:	01010101 	.word	0x01010101
	...

08002ebc <__clzdi2>:
 8002ebc:	b510      	push	{r4, lr}
 8002ebe:	2900      	cmp	r1, #0
 8002ec0:	d103      	bne.n	8002eca <__clzdi2+0xe>
 8002ec2:	f7ff ffdd 	bl	8002e80 <__clzsi2>
 8002ec6:	3020      	adds	r0, #32
 8002ec8:	e002      	b.n	8002ed0 <__clzdi2+0x14>
 8002eca:	1c08      	adds	r0, r1, #0
 8002ecc:	f7ff ffd8 	bl	8002e80 <__clzsi2>
 8002ed0:	bd10      	pop	{r4, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)

08002ed4 <__divdi3>:
 8002ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ed6:	464e      	mov	r6, r9
 8002ed8:	4657      	mov	r7, sl
 8002eda:	46de      	mov	lr, fp
 8002edc:	4645      	mov	r5, r8
 8002ede:	b5e0      	push	{r5, r6, r7, lr}
 8002ee0:	000f      	movs	r7, r1
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	0006      	movs	r6, r0
 8002ee8:	4689      	mov	r9, r1
 8002eea:	2f00      	cmp	r7, #0
 8002eec:	da06      	bge.n	8002efc <__divdi3+0x28>
 8002eee:	0039      	movs	r1, r7
 8002ef0:	2700      	movs	r7, #0
 8002ef2:	4246      	negs	r6, r0
 8002ef4:	418f      	sbcs	r7, r1
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	4249      	negs	r1, r1
 8002efa:	4689      	mov	r9, r1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	da07      	bge.n	8002f10 <__divdi3+0x3c>
 8002f00:	4649      	mov	r1, r9
 8002f02:	43c9      	mvns	r1, r1
 8002f04:	0010      	movs	r0, r2
 8002f06:	4689      	mov	r9, r1
 8002f08:	0019      	movs	r1, r3
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	4242      	negs	r2, r0
 8002f0e:	418b      	sbcs	r3, r1
 8002f10:	0034      	movs	r4, r6
 8002f12:	003d      	movs	r5, r7
 8002f14:	4692      	mov	sl, r2
 8002f16:	4698      	mov	r8, r3
 8002f18:	42bb      	cmp	r3, r7
 8002f1a:	d869      	bhi.n	8002ff0 <__divdi3+0x11c>
 8002f1c:	d066      	beq.n	8002fec <__divdi3+0x118>
 8002f1e:	4641      	mov	r1, r8
 8002f20:	4650      	mov	r0, sl
 8002f22:	f7ff ffcb 	bl	8002ebc <__clzdi2>
 8002f26:	4683      	mov	fp, r0
 8002f28:	0039      	movs	r1, r7
 8002f2a:	0030      	movs	r0, r6
 8002f2c:	f7ff ffc6 	bl	8002ebc <__clzdi2>
 8002f30:	465b      	mov	r3, fp
 8002f32:	1a1b      	subs	r3, r3, r0
 8002f34:	469c      	mov	ip, r3
 8002f36:	3b20      	subs	r3, #32
 8002f38:	469b      	mov	fp, r3
 8002f3a:	d500      	bpl.n	8002f3e <__divdi3+0x6a>
 8002f3c:	e075      	b.n	800302a <__divdi3+0x156>
 8002f3e:	4651      	mov	r1, sl
 8002f40:	4658      	mov	r0, fp
 8002f42:	4081      	lsls	r1, r0
 8002f44:	000b      	movs	r3, r1
 8002f46:	4651      	mov	r1, sl
 8002f48:	4660      	mov	r0, ip
 8002f4a:	4081      	lsls	r1, r0
 8002f4c:	000a      	movs	r2, r1
 8002f4e:	42bb      	cmp	r3, r7
 8002f50:	d861      	bhi.n	8003016 <__divdi3+0x142>
 8002f52:	d05e      	beq.n	8003012 <__divdi3+0x13e>
 8002f54:	0034      	movs	r4, r6
 8002f56:	003d      	movs	r5, r7
 8002f58:	4659      	mov	r1, fp
 8002f5a:	1aa4      	subs	r4, r4, r2
 8002f5c:	419d      	sbcs	r5, r3
 8002f5e:	2900      	cmp	r1, #0
 8002f60:	da00      	bge.n	8002f64 <__divdi3+0x90>
 8002f62:	e07a      	b.n	800305a <__divdi3+0x186>
 8002f64:	2100      	movs	r1, #0
 8002f66:	2000      	movs	r0, #0
 8002f68:	2601      	movs	r6, #1
 8002f6a:	9000      	str	r0, [sp, #0]
 8002f6c:	9101      	str	r1, [sp, #4]
 8002f6e:	4659      	mov	r1, fp
 8002f70:	408e      	lsls	r6, r1
 8002f72:	9601      	str	r6, [sp, #4]
 8002f74:	4661      	mov	r1, ip
 8002f76:	2601      	movs	r6, #1
 8002f78:	408e      	lsls	r6, r1
 8002f7a:	4661      	mov	r1, ip
 8002f7c:	9600      	str	r6, [sp, #0]
 8002f7e:	2900      	cmp	r1, #0
 8002f80:	d050      	beq.n	8003024 <__divdi3+0x150>
 8002f82:	07d9      	lsls	r1, r3, #31
 8002f84:	0856      	lsrs	r6, r2, #1
 8002f86:	085f      	lsrs	r7, r3, #1
 8002f88:	430e      	orrs	r6, r1
 8002f8a:	4663      	mov	r3, ip
 8002f8c:	e00e      	b.n	8002fac <__divdi3+0xd8>
 8002f8e:	42af      	cmp	r7, r5
 8002f90:	d101      	bne.n	8002f96 <__divdi3+0xc2>
 8002f92:	42a6      	cmp	r6, r4
 8002f94:	d80c      	bhi.n	8002fb0 <__divdi3+0xdc>
 8002f96:	1ba4      	subs	r4, r4, r6
 8002f98:	41bd      	sbcs	r5, r7
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	1924      	adds	r4, r4, r4
 8002f9e:	416d      	adcs	r5, r5
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	1864      	adds	r4, r4, r1
 8002fa6:	4155      	adcs	r5, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d006      	beq.n	8002fba <__divdi3+0xe6>
 8002fac:	42af      	cmp	r7, r5
 8002fae:	d9ee      	bls.n	8002f8e <__divdi3+0xba>
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	1924      	adds	r4, r4, r4
 8002fb4:	416d      	adcs	r5, r5
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f8      	bne.n	8002fac <__divdi3+0xd8>
 8002fba:	9800      	ldr	r0, [sp, #0]
 8002fbc:	9901      	ldr	r1, [sp, #4]
 8002fbe:	465b      	mov	r3, fp
 8002fc0:	1900      	adds	r0, r0, r4
 8002fc2:	4169      	adcs	r1, r5
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	db3d      	blt.n	8003044 <__divdi3+0x170>
 8002fc8:	002e      	movs	r6, r5
 8002fca:	40de      	lsrs	r6, r3
 8002fcc:	4663      	mov	r3, ip
 8002fce:	002c      	movs	r4, r5
 8002fd0:	40dc      	lsrs	r4, r3
 8002fd2:	465b      	mov	r3, fp
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	db4b      	blt.n	8003070 <__divdi3+0x19c>
 8002fd8:	0034      	movs	r4, r6
 8002fda:	465d      	mov	r5, fp
 8002fdc:	40ac      	lsls	r4, r5
 8002fde:	0023      	movs	r3, r4
 8002fe0:	4664      	mov	r4, ip
 8002fe2:	40a6      	lsls	r6, r4
 8002fe4:	0032      	movs	r2, r6
 8002fe6:	1a80      	subs	r0, r0, r2
 8002fe8:	4199      	sbcs	r1, r3
 8002fea:	e003      	b.n	8002ff4 <__divdi3+0x120>
 8002fec:	42b2      	cmp	r2, r6
 8002fee:	d996      	bls.n	8002f1e <__divdi3+0x4a>
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	464b      	mov	r3, r9
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <__divdi3+0x130>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	000c      	movs	r4, r1
 8002ffe:	2100      	movs	r1, #0
 8003000:	4258      	negs	r0, r3
 8003002:	41a1      	sbcs	r1, r4
 8003004:	b003      	add	sp, #12
 8003006:	bc3c      	pop	{r2, r3, r4, r5}
 8003008:	4690      	mov	r8, r2
 800300a:	4699      	mov	r9, r3
 800300c:	46a2      	mov	sl, r4
 800300e:	46ab      	mov	fp, r5
 8003010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003012:	42b1      	cmp	r1, r6
 8003014:	d99e      	bls.n	8002f54 <__divdi3+0x80>
 8003016:	2100      	movs	r1, #0
 8003018:	2000      	movs	r0, #0
 800301a:	9000      	str	r0, [sp, #0]
 800301c:	9101      	str	r1, [sp, #4]
 800301e:	4661      	mov	r1, ip
 8003020:	2900      	cmp	r1, #0
 8003022:	d1ae      	bne.n	8002f82 <__divdi3+0xae>
 8003024:	9800      	ldr	r0, [sp, #0]
 8003026:	9901      	ldr	r1, [sp, #4]
 8003028:	e7e4      	b.n	8002ff4 <__divdi3+0x120>
 800302a:	2320      	movs	r3, #32
 800302c:	4662      	mov	r2, ip
 800302e:	4651      	mov	r1, sl
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	40d9      	lsrs	r1, r3
 8003034:	4640      	mov	r0, r8
 8003036:	9100      	str	r1, [sp, #0]
 8003038:	4661      	mov	r1, ip
 800303a:	4088      	lsls	r0, r1
 800303c:	0003      	movs	r3, r0
 800303e:	9900      	ldr	r1, [sp, #0]
 8003040:	430b      	orrs	r3, r1
 8003042:	e780      	b.n	8002f46 <__divdi3+0x72>
 8003044:	4662      	mov	r2, ip
 8003046:	2320      	movs	r3, #32
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	002a      	movs	r2, r5
 800304c:	409a      	lsls	r2, r3
 800304e:	0026      	movs	r6, r4
 8003050:	0013      	movs	r3, r2
 8003052:	4662      	mov	r2, ip
 8003054:	40d6      	lsrs	r6, r2
 8003056:	431e      	orrs	r6, r3
 8003058:	e7b8      	b.n	8002fcc <__divdi3+0xf8>
 800305a:	4661      	mov	r1, ip
 800305c:	2620      	movs	r6, #32
 800305e:	2701      	movs	r7, #1
 8003060:	1a76      	subs	r6, r6, r1
 8003062:	2000      	movs	r0, #0
 8003064:	2100      	movs	r1, #0
 8003066:	40f7      	lsrs	r7, r6
 8003068:	9000      	str	r0, [sp, #0]
 800306a:	9101      	str	r1, [sp, #4]
 800306c:	9701      	str	r7, [sp, #4]
 800306e:	e781      	b.n	8002f74 <__divdi3+0xa0>
 8003070:	4667      	mov	r7, ip
 8003072:	2320      	movs	r3, #32
 8003074:	4662      	mov	r2, ip
 8003076:	0035      	movs	r5, r6
 8003078:	40bc      	lsls	r4, r7
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	40dd      	lsrs	r5, r3
 800307e:	0023      	movs	r3, r4
 8003080:	432b      	orrs	r3, r5
 8003082:	e7ad      	b.n	8002fe0 <__divdi3+0x10c>

08003084 <BMEinit>:
BMP280_HandleTypedef bmp280;
I2C_HandleTypeDef hi2c1;
float pres, temp, hum;

void BMEinit()
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 2 */
	  bmp280_init_default_params(&bmp280.params);
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <BMEinit+0x2c>)
 800308a:	0018      	movs	r0, r3
 800308c:	f000 f838 	bl	8003100 <bmp280_init_default_params>
	  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8003090:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <BMEinit+0x30>)
 8003092:	2276      	movs	r2, #118	; 0x76
 8003094:	849a      	strh	r2, [r3, #36]	; 0x24
	  bmp280.i2c = &hi2c1;
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <BMEinit+0x30>)
 8003098:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <BMEinit+0x34>)
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
     /*bme INIt*/
	  bmp280_init(&bmp280, &bmp280.params);
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <BMEinit+0x2c>)
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <BMEinit+0x30>)
 80030a0:	0011      	movs	r1, r2
 80030a2:	0018      	movs	r0, r3
 80030a4:	f000 f9c2 	bl	800342c <bmp280_init>

}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	200014a4 	.word	0x200014a4
 80030b4:	20001478 	.word	0x20001478
 80030b8:	20001428 	.word	0x20001428

080030bc <BMERead>:
void BMERead(sensorBme280_t *sensor_data)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	 /* USER CODE BEGIN 3 */
		 	  	bmp280_read_float(&bmp280, &temp, &pres, &hum);
 80030c4:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <BMERead+0x34>)
 80030c6:	4a0b      	ldr	r2, [pc, #44]	; (80030f4 <BMERead+0x38>)
 80030c8:	490b      	ldr	r1, [pc, #44]	; (80030f8 <BMERead+0x3c>)
 80030ca:	480c      	ldr	r0, [pc, #48]	; (80030fc <BMERead+0x40>)
 80030cc:	f000 fd20 	bl	8003b10 <bmp280_read_float>
		 	  	sensor_data->pressureBME=pres;
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <BMERead+0x38>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	601a      	str	r2, [r3, #0]
		 	  	sensor_data->temperatureBME=temp;
 80030d8:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <BMERead+0x3c>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	605a      	str	r2, [r3, #4]
		 	  	sensor_data->humidityBME=hum;
 80030e0:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <BMERead+0x34>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	609a      	str	r2, [r3, #8]

	  /* USER CODE END 3 */
}
 80030e8:	46c0      	nop			; (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b002      	add	sp, #8
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	20001420 	.word	0x20001420
 80030f4:	20001424 	.word	0x20001424
 80030f8:	20001474 	.word	0x20001474
 80030fc:	20001478 	.word	0x20001478

08003100 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2203      	movs	r2, #3
 800310c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2203      	movs	r2, #3
 8003118:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2203      	movs	r2, #3
 800311e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2203      	movs	r2, #3
 8003124:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2203      	movs	r2, #3
 800312a:	715a      	strb	r2, [r3, #5]
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b002      	add	sp, #8
 8003132:	bd80      	pop	{r7, pc}

08003134 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b08b      	sub	sp, #44	; 0x2c
 8003138:	af04      	add	r7, sp, #16
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	240b      	movs	r4, #11
 8003140:	193b      	adds	r3, r7, r4
 8003142:	1c0a      	adds	r2, r1, #0
 8003144:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800314a:	2116      	movs	r1, #22
 800314c:	187a      	adds	r2, r7, r1
 800314e:	18db      	adds	r3, r3, r3
 8003150:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003156:	193b      	adds	r3, r7, r4
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	b29a      	uxth	r2, r3
 800315c:	187b      	adds	r3, r7, r1
 800315e:	8819      	ldrh	r1, [r3, #0]
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <read_register16+0x6c>)
 8003162:	9302      	str	r3, [sp, #8]
 8003164:	2302      	movs	r3, #2
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	2314      	movs	r3, #20
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2301      	movs	r3, #1
 8003170:	f007 f968 	bl	800a444 <HAL_I2C_Mem_Read>
 8003174:	1e03      	subs	r3, r0, #0
 8003176:	d10e      	bne.n	8003196 <read_register16+0x62>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8003178:	2114      	movs	r1, #20
 800317a:	187b      	adds	r3, r7, r1
 800317c:	785b      	ldrb	r3, [r3, #1]
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	b21a      	sxth	r2, r3
 8003182:	187b      	adds	r3, r7, r1
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	b21b      	sxth	r3, r3
 8003188:	4313      	orrs	r3, r2
 800318a:	b21b      	sxth	r3, r3
 800318c:	b29a      	uxth	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	801a      	strh	r2, [r3, #0]
		return true;
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <read_register16+0x64>
	} else
		return false;
 8003196:	2300      	movs	r3, #0

}
 8003198:	0018      	movs	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	b007      	add	sp, #28
 800319e:	bd90      	pop	{r4, r7, pc}
 80031a0:	00001388 	.word	0x00001388

080031a4 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80031a4:	b5b0      	push	{r4, r5, r7, lr}
 80031a6:	b08a      	sub	sp, #40	; 0x28
 80031a8:	af04      	add	r7, sp, #16
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	0008      	movs	r0, r1
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	0019      	movs	r1, r3
 80031b2:	240b      	movs	r4, #11
 80031b4:	193b      	adds	r3, r7, r4
 80031b6:	1c02      	adds	r2, r0, #0
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	250a      	movs	r5, #10
 80031bc:	197b      	adds	r3, r7, r5
 80031be:	1c0a      	adds	r2, r1, #0
 80031c0:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80031c6:	2116      	movs	r1, #22
 80031c8:	187a      	adds	r2, r7, r1
 80031ca:	18db      	adds	r3, r3, r3
 80031cc:	8013      	strh	r3, [r2, #0]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80031d2:	193b      	adds	r3, r7, r4
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	b29c      	uxth	r4, r3
 80031d8:	197b      	adds	r3, r7, r5
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	187a      	adds	r2, r7, r1
 80031e0:	8811      	ldrh	r1, [r2, #0]
 80031e2:	4a09      	ldr	r2, [pc, #36]	; (8003208 <read_data+0x64>)
 80031e4:	9202      	str	r2, [sp, #8]
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2301      	movs	r3, #1
 80031ee:	0022      	movs	r2, r4
 80031f0:	f007 f928 	bl	800a444 <HAL_I2C_Mem_Read>
 80031f4:	1e03      	subs	r3, r0, #0
 80031f6:	d101      	bne.n	80031fc <read_data+0x58>
		return 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e000      	b.n	80031fe <read_data+0x5a>
	else
		return 1;
 80031fc:	2301      	movs	r3, #1

}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	b006      	add	sp, #24
 8003204:	bdb0      	pop	{r4, r5, r7, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	00001388 	.word	0x00001388

0800320c <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2188      	movs	r1, #136	; 0x88
 800321a:	0018      	movs	r0, r3
 800321c:	f7ff ff8a 	bl	8003134 <read_register16>
 8003220:	1e03      	subs	r3, r0, #0
 8003222:	d100      	bne.n	8003226 <read_calibration_data+0x1a>
 8003224:	e06d      	b.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	1c9a      	adds	r2, r3, #2
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	218a      	movs	r1, #138	; 0x8a
 800322e:	0018      	movs	r0, r3
 8003230:	f7ff ff80 	bl	8003134 <read_register16>
 8003234:	1e03      	subs	r3, r0, #0
 8003236:	d100      	bne.n	800323a <read_calibration_data+0x2e>
 8003238:	e063      	b.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	1d1a      	adds	r2, r3, #4
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	218c      	movs	r1, #140	; 0x8c
 8003242:	0018      	movs	r0, r3
 8003244:	f7ff ff76 	bl	8003134 <read_register16>
 8003248:	1e03      	subs	r3, r0, #0
 800324a:	d05a      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	1d9a      	adds	r2, r3, #6
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	218e      	movs	r1, #142	; 0x8e
 8003254:	0018      	movs	r0, r3
 8003256:	f7ff ff6d 	bl	8003134 <read_register16>
 800325a:	1e03      	subs	r3, r0, #0
 800325c:	d051      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3308      	adds	r3, #8
 8003262:	001a      	movs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2190      	movs	r1, #144	; 0x90
 8003268:	0018      	movs	r0, r3
 800326a:	f7ff ff63 	bl	8003134 <read_register16>
 800326e:	1e03      	subs	r3, r0, #0
 8003270:	d047      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	330a      	adds	r3, #10
 8003276:	001a      	movs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2192      	movs	r1, #146	; 0x92
 800327c:	0018      	movs	r0, r3
 800327e:	f7ff ff59 	bl	8003134 <read_register16>
 8003282:	1e03      	subs	r3, r0, #0
 8003284:	d03d      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	330c      	adds	r3, #12
 800328a:	001a      	movs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2194      	movs	r1, #148	; 0x94
 8003290:	0018      	movs	r0, r3
 8003292:	f7ff ff4f 	bl	8003134 <read_register16>
 8003296:	1e03      	subs	r3, r0, #0
 8003298:	d033      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	330e      	adds	r3, #14
 800329e:	001a      	movs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2196      	movs	r1, #150	; 0x96
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7ff ff45 	bl	8003134 <read_register16>
 80032aa:	1e03      	subs	r3, r0, #0
 80032ac:	d029      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3310      	adds	r3, #16
 80032b2:	001a      	movs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2198      	movs	r1, #152	; 0x98
 80032b8:	0018      	movs	r0, r3
 80032ba:	f7ff ff3b 	bl	8003134 <read_register16>
 80032be:	1e03      	subs	r3, r0, #0
 80032c0:	d01f      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3312      	adds	r3, #18
 80032c6:	001a      	movs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	219a      	movs	r1, #154	; 0x9a
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7ff ff31 	bl	8003134 <read_register16>
 80032d2:	1e03      	subs	r3, r0, #0
 80032d4:	d015      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3314      	adds	r3, #20
 80032da:	001a      	movs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	219c      	movs	r1, #156	; 0x9c
 80032e0:	0018      	movs	r0, r3
 80032e2:	f7ff ff27 	bl	8003134 <read_register16>
 80032e6:	1e03      	subs	r3, r0, #0
 80032e8:	d00b      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3316      	adds	r3, #22
 80032ee:	001a      	movs	r2, r3
			&& read_register16(dev, 0x9e,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	219e      	movs	r1, #158	; 0x9e
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7ff ff1d 	bl	8003134 <read_register16>
 80032fa:	1e03      	subs	r3, r0, #0
 80032fc:	d001      	beq.n	8003302 <read_calibration_data+0xf6>

		return true;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <read_calibration_data+0xf8>
	}

	return false;
 8003302:	2300      	movs	r3, #0
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	b002      	add	sp, #8
 800330a:	bd80      	pop	{r7, pc}

0800330c <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3318      	adds	r3, #24
 8003318:	001a      	movs	r2, r3
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	2301      	movs	r3, #1
 800331e:	21a1      	movs	r1, #161	; 0xa1
 8003320:	f7ff ff40 	bl	80031a4 <read_data>
 8003324:	1e03      	subs	r3, r0, #0
 8003326:	d14d      	bne.n	80033c4 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	331a      	adds	r3, #26
 800332c:	001a      	movs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	21e1      	movs	r1, #225	; 0xe1
 8003332:	0018      	movs	r0, r3
 8003334:	f7ff fefe 	bl	8003134 <read_register16>
 8003338:	1e03      	subs	r3, r0, #0
 800333a:	d043      	beq.n	80033c4 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	331c      	adds	r3, #28
 8003340:	001a      	movs	r2, r3
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	2301      	movs	r3, #1
 8003346:	21e3      	movs	r1, #227	; 0xe3
 8003348:	f7ff ff2c 	bl	80031a4 <read_data>
 800334c:	1e03      	subs	r3, r0, #0
 800334e:	d139      	bne.n	80033c4 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe4, &h4)
 8003350:	230e      	movs	r3, #14
 8003352:	18fa      	adds	r2, r7, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	21e4      	movs	r1, #228	; 0xe4
 8003358:	0018      	movs	r0, r3
 800335a:	f7ff feeb 	bl	8003134 <read_register16>
 800335e:	1e03      	subs	r3, r0, #0
 8003360:	d030      	beq.n	80033c4 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe5, &h5)
 8003362:	230c      	movs	r3, #12
 8003364:	18fa      	adds	r2, r7, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	21e5      	movs	r1, #229	; 0xe5
 800336a:	0018      	movs	r0, r3
 800336c:	f7ff fee2 	bl	8003134 <read_register16>
 8003370:	1e03      	subs	r3, r0, #0
 8003372:	d027      	beq.n	80033c4 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3322      	adds	r3, #34	; 0x22
 8003378:	001a      	movs	r2, r3
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	2301      	movs	r3, #1
 800337e:	21e7      	movs	r1, #231	; 0xe7
 8003380:	f7ff ff10 	bl	80031a4 <read_data>
 8003384:	1e03      	subs	r3, r0, #0
 8003386:	d11d      	bne.n	80033c4 <read_hum_calibration_data+0xb8>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8003388:	210e      	movs	r1, #14
 800338a:	187b      	adds	r3, r7, r1
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	b21a      	sxth	r2, r3
 8003392:	23ff      	movs	r3, #255	; 0xff
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	4013      	ands	r3, r2
 8003398:	b21a      	sxth	r2, r3
 800339a:	187b      	adds	r3, r7, r1
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	121b      	asrs	r3, r3, #8
 80033a0:	b21b      	sxth	r3, r3
 80033a2:	210f      	movs	r1, #15
 80033a4:	400b      	ands	r3, r1
 80033a6:	b21b      	sxth	r3, r3
 80033a8:	4313      	orrs	r3, r2
 80033aa:	b21a      	sxth	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80033b0:	230c      	movs	r3, #12
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	091b      	lsrs	r3, r3, #4
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	b21a      	sxth	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	841a      	strh	r2, [r3, #32]

		return true;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <read_hum_calibration_data+0xba>
	}

	return false;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	0018      	movs	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b004      	add	sp, #16
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af04      	add	r7, sp, #16
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	0008      	movs	r0, r1
 80033da:	0011      	movs	r1, r2
 80033dc:	1cfb      	adds	r3, r7, #3
 80033de:	1c02      	adds	r2, r0, #0
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	1cbb      	adds	r3, r7, #2
 80033e4:	1c0a      	adds	r2, r1, #0
 80033e6:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80033ec:	210e      	movs	r1, #14
 80033ee:	187a      	adds	r2, r7, r1
 80033f0:	18db      	adds	r3, r3, r3
 80033f2:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80033f8:	1cfb      	adds	r3, r7, #3
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	187b      	adds	r3, r7, r1
 8003400:	8819      	ldrh	r1, [r3, #0]
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <write_register8+0x58>)
 8003404:	9302      	str	r3, [sp, #8]
 8003406:	2301      	movs	r3, #1
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	1cbb      	adds	r3, r7, #2
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	2301      	movs	r3, #1
 8003410:	f006 feea 	bl	800a1e8 <HAL_I2C_Mem_Write>
 8003414:	1e03      	subs	r3, r0, #0
 8003416:	d101      	bne.n	800341c <write_register8+0x4c>
		return false;
 8003418:	2300      	movs	r3, #0
 800341a:	e000      	b.n	800341e <write_register8+0x4e>
	else
		return true;
 800341c:	2301      	movs	r3, #1
}
 800341e:	0018      	movs	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	b004      	add	sp, #16
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	00002710 	.word	0x00002710

0800342c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800343a:	2b76      	cmp	r3, #118	; 0x76
 800343c:	d005      	beq.n	800344a <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003442:	2b77      	cmp	r3, #119	; 0x77
 8003444:	d001      	beq.n	800344a <bmp280_init+0x1e>

		return false;
 8003446:	2300      	movs	r3, #0
 8003448:	e0a4      	b.n	8003594 <bmp280_init+0x168>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3332      	adds	r3, #50	; 0x32
 800344e:	001a      	movs	r2, r3
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	2301      	movs	r3, #1
 8003454:	21d0      	movs	r1, #208	; 0xd0
 8003456:	f7ff fea5 	bl	80031a4 <read_data>
 800345a:	1e03      	subs	r3, r0, #0
 800345c:	d001      	beq.n	8003462 <bmp280_init+0x36>
		return false;
 800345e:	2300      	movs	r3, #0
 8003460:	e098      	b.n	8003594 <bmp280_init+0x168>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2232      	movs	r2, #50	; 0x32
 8003466:	5c9b      	ldrb	r3, [r3, r2]
 8003468:	2b58      	cmp	r3, #88	; 0x58
 800346a:	d006      	beq.n	800347a <bmp280_init+0x4e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2232      	movs	r2, #50	; 0x32
 8003470:	5c9b      	ldrb	r3, [r3, r2]
 8003472:	2b60      	cmp	r3, #96	; 0x60
 8003474:	d001      	beq.n	800347a <bmp280_init+0x4e>

		return false;
 8003476:	2300      	movs	r3, #0
 8003478:	e08c      	b.n	8003594 <bmp280_init+0x168>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	22b6      	movs	r2, #182	; 0xb6
 800347e:	21e0      	movs	r1, #224	; 0xe0
 8003480:	0018      	movs	r0, r3
 8003482:	f7ff ffa5 	bl	80033d0 <write_register8>
 8003486:	1e03      	subs	r3, r0, #0
 8003488:	d001      	beq.n	800348e <bmp280_init+0x62>
		return false;
 800348a:	2300      	movs	r3, #0
 800348c:	e082      	b.n	8003594 <bmp280_init+0x168>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 800348e:	230c      	movs	r3, #12
 8003490:	18fa      	adds	r2, r7, r3
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	2301      	movs	r3, #1
 8003496:	21f3      	movs	r1, #243	; 0xf3
 8003498:	f7ff fe84 	bl	80031a4 <read_data>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d1f6      	bne.n	800348e <bmp280_init+0x62>
				&& (status & 1) == 0)
 80034a0:	230c      	movs	r3, #12
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	001a      	movs	r2, r3
 80034a8:	2301      	movs	r3, #1
 80034aa:	4013      	ands	r3, r2
 80034ac:	d1ef      	bne.n	800348e <bmp280_init+0x62>
			break;
	}

	if (!read_calibration_data(dev)) {
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7ff feab 	bl	800320c <read_calibration_data>
 80034b6:	0003      	movs	r3, r0
 80034b8:	001a      	movs	r2, r3
 80034ba:	2301      	movs	r3, #1
 80034bc:	4053      	eors	r3, r2
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d100      	bne.n	80034c6 <bmp280_init+0x9a>
 80034c4:	e001      	b.n	80034ca <bmp280_init+0x9e>
		return false;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e064      	b.n	8003594 <bmp280_init+0x168>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2232      	movs	r2, #50	; 0x32
 80034ce:	5c9b      	ldrb	r3, [r3, r2]
 80034d0:	2b60      	cmp	r3, #96	; 0x60
 80034d2:	d10c      	bne.n	80034ee <bmp280_init+0xc2>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	0018      	movs	r0, r3
 80034d8:	f7ff ff18 	bl	800330c <read_hum_calibration_data>
 80034dc:	0003      	movs	r3, r0
 80034de:	001a      	movs	r2, r3
 80034e0:	2301      	movs	r3, #1
 80034e2:	4053      	eors	r3, r2
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <bmp280_init+0xc2>
		return false;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e052      	b.n	8003594 <bmp280_init+0x168>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	795b      	ldrb	r3, [r3, #5]
 80034f2:	015b      	lsls	r3, r3, #5
 80034f4:	b25a      	sxtb	r2, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	785b      	ldrb	r3, [r3, #1]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	b25b      	sxtb	r3, r3
 80034fe:	4313      	orrs	r3, r2
 8003500:	b25a      	sxtb	r2, r3
 8003502:	210f      	movs	r1, #15
 8003504:	187b      	adds	r3, r7, r1
 8003506:	701a      	strb	r2, [r3, #0]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8003508:	187b      	adds	r3, r7, r1
 800350a:	781a      	ldrb	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	21f5      	movs	r1, #245	; 0xf5
 8003510:	0018      	movs	r0, r3
 8003512:	f7ff ff5d 	bl	80033d0 <write_register8>
 8003516:	1e03      	subs	r3, r0, #0
 8003518:	d001      	beq.n	800351e <bmp280_init+0xf2>
		return false;
 800351a:	2300      	movs	r3, #0
 800351c:	e03a      	b.n	8003594 <bmp280_init+0x168>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d102      	bne.n	800352c <bmp280_init+0x100>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	78db      	ldrb	r3, [r3, #3]
 8003530:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8003532:	b25a      	sxtb	r2, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	789b      	ldrb	r3, [r3, #2]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	b25b      	sxtb	r3, r3
 800353c:	4313      	orrs	r3, r2
 800353e:	b25a      	sxtb	r2, r3
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	b25b      	sxtb	r3, r3
 8003546:	4313      	orrs	r3, r2
 8003548:	b25a      	sxtb	r2, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800354a:	230e      	movs	r3, #14
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	701a      	strb	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2232      	movs	r2, #50	; 0x32
 8003554:	5c9b      	ldrb	r3, [r3, r2]
 8003556:	2b60      	cmp	r3, #96	; 0x60
 8003558:	d10f      	bne.n	800357a <bmp280_init+0x14e>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800355a:	210d      	movs	r1, #13
 800355c:	187b      	adds	r3, r7, r1
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	7912      	ldrb	r2, [r2, #4]
 8003562:	701a      	strb	r2, [r3, #0]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8003564:	187b      	adds	r3, r7, r1
 8003566:	781a      	ldrb	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	21f2      	movs	r1, #242	; 0xf2
 800356c:	0018      	movs	r0, r3
 800356e:	f7ff ff2f 	bl	80033d0 <write_register8>
 8003572:	1e03      	subs	r3, r0, #0
 8003574:	d001      	beq.n	800357a <bmp280_init+0x14e>
			return false;
 8003576:	2300      	movs	r3, #0
 8003578:	e00c      	b.n	8003594 <bmp280_init+0x168>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800357a:	230e      	movs	r3, #14
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	21f4      	movs	r1, #244	; 0xf4
 8003584:	0018      	movs	r0, r3
 8003586:	f7ff ff23 	bl	80033d0 <write_register8>
 800358a:	1e03      	subs	r3, r0, #0
 800358c:	d001      	beq.n	8003592 <bmp280_init+0x166>
		return false;
 800358e:	2300      	movs	r3, #0
 8003590:	e000      	b.n	8003594 <bmp280_init+0x168>
	}

	return true;
 8003592:	2301      	movs	r3, #1
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b004      	add	sp, #16
 800359a:	bd80      	pop	{r7, pc}

0800359c <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	10da      	asrs	r2, r3, #3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	2102      	movs	r1, #2
 80035b8:	5e52      	ldrsh	r2, [r2, r1]
 80035ba:	4353      	muls	r3, r2
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80035bc:	12db      	asrs	r3, r3, #11
 80035be:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	111b      	asrs	r3, r3, #4
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	8812      	ldrh	r2, [r2, #0]
 80035c8:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	1112      	asrs	r2, r2, #4
 80035ce:	68f9      	ldr	r1, [r7, #12]
 80035d0:	8809      	ldrh	r1, [r1, #0]
 80035d2:	1a52      	subs	r2, r2, r1
 80035d4:	4353      	muls	r3, r2
 80035d6:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	2104      	movs	r1, #4
 80035dc:	5e52      	ldrsh	r2, [r2, r1]
 80035de:	4353      	muls	r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80035e0:	139b      	asrs	r3, r3, #14
 80035e2:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	18d2      	adds	r2, r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	0013      	movs	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	189b      	adds	r3, r3, r2
 80035f8:	3380      	adds	r3, #128	; 0x80
 80035fa:	121b      	asrs	r3, r3, #8
}
 80035fc:	0018      	movs	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	b006      	add	sp, #24
 8003602:	bd80      	pop	{r7, pc}

08003604 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8003604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003606:	b0af      	sub	sp, #188	; 0xbc
 8003608:	af00      	add	r7, sp, #0
 800360a:	239c      	movs	r3, #156	; 0x9c
 800360c:	18fc      	adds	r4, r7, r3
 800360e:	6020      	str	r0, [r4, #0]
 8003610:	2098      	movs	r0, #152	; 0x98
 8003612:	1838      	adds	r0, r7, r0
 8003614:	6001      	str	r1, [r0, #0]
 8003616:	2194      	movs	r1, #148	; 0x94
 8003618:	1878      	adds	r0, r7, r1
 800361a:	6002      	str	r2, [r0, #0]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800361c:	187a      	adds	r2, r7, r1
 800361e:	6813      	ldr	r3, [r2, #0]
 8003620:	65bb      	str	r3, [r7, #88]	; 0x58
 8003622:	17db      	asrs	r3, r3, #31
 8003624:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003626:	4bd0      	ldr	r3, [pc, #832]	; (8003968 <compensate_pressure+0x364>)
 8003628:	2401      	movs	r4, #1
 800362a:	4264      	negs	r4, r4
 800362c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800362e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003630:	18c9      	adds	r1, r1, r3
 8003632:	4162      	adcs	r2, r4
 8003634:	000b      	movs	r3, r1
 8003636:	0014      	movs	r4, r2
 8003638:	21b0      	movs	r1, #176	; 0xb0
 800363a:	187a      	adds	r2, r7, r1
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	6054      	str	r4, [r2, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8003640:	187a      	adds	r2, r7, r1
 8003642:	6853      	ldr	r3, [r2, #4]
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	1878      	adds	r0, r7, r1
 8003648:	6841      	ldr	r1, [r0, #4]
 800364a:	6800      	ldr	r0, [r0, #0]
 800364c:	f7fc ff8e 	bl	800056c <__aeabi_lmul>
 8003650:	0003      	movs	r3, r0
 8003652:	000c      	movs	r4, r1
 8003654:	0018      	movs	r0, r3
 8003656:	0021      	movs	r1, r4
 8003658:	239c      	movs	r3, #156	; 0x9c
 800365a:	18fa      	adds	r2, r7, r3
 800365c:	6813      	ldr	r3, [r2, #0]
 800365e:	2210      	movs	r2, #16
 8003660:	5e9b      	ldrsh	r3, [r3, r2]
 8003662:	653b      	str	r3, [r7, #80]	; 0x50
 8003664:	17db      	asrs	r3, r3, #31
 8003666:	657b      	str	r3, [r7, #84]	; 0x54
 8003668:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800366a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800366c:	f7fc ff7e 	bl	800056c <__aeabi_lmul>
 8003670:	0003      	movs	r3, r0
 8003672:	000c      	movs	r4, r1
 8003674:	20a8      	movs	r0, #168	; 0xa8
 8003676:	183a      	adds	r2, r7, r0
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	6054      	str	r4, [r2, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800367c:	239c      	movs	r3, #156	; 0x9c
 800367e:	18fa      	adds	r2, r7, r3
 8003680:	6813      	ldr	r3, [r2, #0]
 8003682:	220e      	movs	r2, #14
 8003684:	5e9b      	ldrsh	r3, [r3, r2]
 8003686:	64bb      	str	r3, [r7, #72]	; 0x48
 8003688:	17db      	asrs	r3, r3, #31
 800368a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800368c:	21b0      	movs	r1, #176	; 0xb0
 800368e:	187a      	adds	r2, r7, r1
 8003690:	6853      	ldr	r3, [r2, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003696:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003698:	f7fc ff68 	bl	800056c <__aeabi_lmul>
 800369c:	0003      	movs	r3, r0
 800369e:	000c      	movs	r4, r1
 80036a0:	0bda      	lsrs	r2, r3, #15
 80036a2:	0466      	lsls	r6, r4, #17
 80036a4:	4316      	orrs	r6, r2
 80036a6:	045d      	lsls	r5, r3, #17
 80036a8:	20a8      	movs	r0, #168	; 0xa8
 80036aa:	183a      	adds	r2, r7, r0
 80036ac:	6813      	ldr	r3, [r2, #0]
 80036ae:	6854      	ldr	r4, [r2, #4]
 80036b0:	195b      	adds	r3, r3, r5
 80036b2:	4174      	adcs	r4, r6
 80036b4:	183a      	adds	r2, r7, r0
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	6054      	str	r4, [r2, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80036ba:	269c      	movs	r6, #156	; 0x9c
 80036bc:	19bb      	adds	r3, r7, r6
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	220c      	movs	r2, #12
 80036c2:	5e9b      	ldrsh	r3, [r3, r2]
 80036c4:	643b      	str	r3, [r7, #64]	; 0x40
 80036c6:	17db      	asrs	r3, r3, #31
 80036c8:	647b      	str	r3, [r7, #68]	; 0x44
 80036ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d0:	2300      	movs	r3, #0
 80036d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80036d4:	183b      	adds	r3, r7, r0
 80036d6:	685c      	ldr	r4, [r3, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036de:	185b      	adds	r3, r3, r1
 80036e0:	4154      	adcs	r4, r2
 80036e2:	183a      	adds	r2, r7, r0
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	6054      	str	r4, [r2, #4]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80036e8:	25b0      	movs	r5, #176	; 0xb0
 80036ea:	197b      	adds	r3, r7, r5
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	1979      	adds	r1, r7, r5
 80036f2:	6808      	ldr	r0, [r1, #0]
 80036f4:	6849      	ldr	r1, [r1, #4]
 80036f6:	f7fc ff39 	bl	800056c <__aeabi_lmul>
 80036fa:	0003      	movs	r3, r0
 80036fc:	000c      	movs	r4, r1
 80036fe:	0018      	movs	r0, r3
 8003700:	0021      	movs	r1, r4
 8003702:	19bb      	adds	r3, r7, r6
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	220a      	movs	r2, #10
 8003708:	5e9b      	ldrsh	r3, [r3, r2]
 800370a:	633b      	str	r3, [r7, #48]	; 0x30
 800370c:	17db      	asrs	r3, r3, #31
 800370e:	637b      	str	r3, [r7, #52]	; 0x34
 8003710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003714:	f7fc ff2a 	bl	800056c <__aeabi_lmul>
 8003718:	0003      	movs	r3, r0
 800371a:	000c      	movs	r4, r1
 800371c:	0622      	lsls	r2, r4, #24
 800371e:	4694      	mov	ip, r2
 8003720:	0a19      	lsrs	r1, r3, #8
 8003722:	2088      	movs	r0, #136	; 0x88
 8003724:	183a      	adds	r2, r7, r0
 8003726:	6011      	str	r1, [r2, #0]
 8003728:	1839      	adds	r1, r7, r0
 800372a:	6809      	ldr	r1, [r1, #0]
 800372c:	4662      	mov	r2, ip
 800372e:	4311      	orrs	r1, r2
 8003730:	183a      	adds	r2, r7, r0
 8003732:	6011      	str	r1, [r2, #0]
 8003734:	1223      	asrs	r3, r4, #8
 8003736:	228c      	movs	r2, #140	; 0x8c
 8003738:	18ba      	adds	r2, r7, r2
 800373a:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800373c:	19bb      	adds	r3, r7, r6
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2208      	movs	r2, #8
 8003742:	5e9b      	ldrsh	r3, [r3, r2]
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28
 8003746:	17db      	asrs	r3, r3, #31
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374a:	197b      	adds	r3, r7, r5
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003752:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003754:	f7fc ff0a 	bl	800056c <__aeabi_lmul>
 8003758:	0003      	movs	r3, r0
 800375a:	000c      	movs	r4, r1
 800375c:	0d1a      	lsrs	r2, r3, #20
 800375e:	4694      	mov	ip, r2
 8003760:	0321      	lsls	r1, r4, #12
 8003762:	2084      	movs	r0, #132	; 0x84
 8003764:	183a      	adds	r2, r7, r0
 8003766:	6011      	str	r1, [r2, #0]
 8003768:	0001      	movs	r1, r0
 800376a:	0008      	movs	r0, r1
 800376c:	1879      	adds	r1, r7, r1
 800376e:	6809      	ldr	r1, [r1, #0]
 8003770:	4662      	mov	r2, ip
 8003772:	4311      	orrs	r1, r2
 8003774:	0002      	movs	r2, r0
 8003776:	18ba      	adds	r2, r7, r2
 8003778:	6011      	str	r1, [r2, #0]
 800377a:	031b      	lsls	r3, r3, #12
 800377c:	2280      	movs	r2, #128	; 0x80
 800377e:	18b9      	adds	r1, r7, r2
 8003780:	600b      	str	r3, [r1, #0]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8003782:	2088      	movs	r0, #136	; 0x88
 8003784:	183b      	adds	r3, r7, r0
 8003786:	685c      	ldr	r4, [r3, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	18ba      	adds	r2, r7, r2
 800378c:	6811      	ldr	r1, [r2, #0]
 800378e:	6852      	ldr	r2, [r2, #4]
 8003790:	185b      	adds	r3, r3, r1
 8003792:	4154      	adcs	r4, r2
 8003794:	197a      	adds	r2, r7, r5
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	6054      	str	r4, [r2, #4]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800379a:	197b      	adds	r3, r7, r5
 800379c:	6819      	ldr	r1, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	2300      	movs	r3, #0
 80037a2:	2480      	movs	r4, #128	; 0x80
 80037a4:	0224      	lsls	r4, r4, #8
 80037a6:	18c9      	adds	r1, r1, r3
 80037a8:	4162      	adcs	r2, r4
 80037aa:	0008      	movs	r0, r1
 80037ac:	0011      	movs	r1, r2
 80037ae:	19bb      	adds	r3, r7, r6
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	88db      	ldrh	r3, [r3, #6]
 80037b4:	623b      	str	r3, [r7, #32]
 80037b6:	2300      	movs	r3, #0
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ba:	6a3a      	ldr	r2, [r7, #32]
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	f7fc fed5 	bl	800056c <__aeabi_lmul>
 80037c2:	0003      	movs	r3, r0
 80037c4:	000c      	movs	r4, r1
 80037c6:	1062      	asrs	r2, r4, #1
 80037c8:	1979      	adds	r1, r7, r5
 80037ca:	600a      	str	r2, [r1, #0]
 80037cc:	17e3      	asrs	r3, r4, #31
 80037ce:	21b4      	movs	r1, #180	; 0xb4
 80037d0:	187a      	adds	r2, r7, r1
 80037d2:	6013      	str	r3, [r2, #0]

	if (var1 == 0) {
 80037d4:	197b      	adds	r3, r7, r5
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	187b      	adds	r3, r7, r1
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	431a      	orrs	r2, r3
 80037de:	d101      	bne.n	80037e4 <compensate_pressure+0x1e0>
		return 0;  // avoid exception caused by division by zero
 80037e0:	2300      	movs	r3, #0
 80037e2:	e0bd      	b.n	8003960 <compensate_pressure+0x35c>
	}

	p = 1048576 - adc_press;
 80037e4:	2398      	movs	r3, #152	; 0x98
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	2380      	movs	r3, #128	; 0x80
 80037ec:	035b      	lsls	r3, r3, #13
 80037ee:	1a9b      	subs	r3, r3, r2
 80037f0:	25a0      	movs	r5, #160	; 0xa0
 80037f2:	197a      	adds	r2, r7, r5
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	17db      	asrs	r3, r3, #31
 80037f8:	26a4      	movs	r6, #164	; 0xa4
 80037fa:	19ba      	adds	r2, r7, r6
 80037fc:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 80037fe:	197b      	adds	r3, r7, r5
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	105b      	asrs	r3, r3, #1
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	197b      	adds	r3, r7, r5
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	07db      	lsls	r3, r3, #31
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	20a8      	movs	r0, #168	; 0xa8
 8003810:	183b      	adds	r3, r7, r0
 8003812:	685c      	ldr	r4, [r3, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69b8      	ldr	r0, [r7, #24]
 8003818:	69f9      	ldr	r1, [r7, #28]
 800381a:	1ac0      	subs	r0, r0, r3
 800381c:	41a1      	sbcs	r1, r4
 800381e:	4a53      	ldr	r2, [pc, #332]	; (800396c <compensate_pressure+0x368>)
 8003820:	2300      	movs	r3, #0
 8003822:	f7fc fea3 	bl	800056c <__aeabi_lmul>
 8003826:	0003      	movs	r3, r0
 8003828:	000c      	movs	r4, r1
 800382a:	0018      	movs	r0, r3
 800382c:	0021      	movs	r1, r4
 800382e:	23b0      	movs	r3, #176	; 0xb0
 8003830:	18fa      	adds	r2, r7, r3
 8003832:	6853      	ldr	r3, [r2, #4]
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	f7fc fe55 	bl	80004e4 <__aeabi_ldivmod>
 800383a:	0003      	movs	r3, r0
 800383c:	000c      	movs	r4, r1
 800383e:	197a      	adds	r2, r7, r5
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	6054      	str	r4, [r2, #4]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8003844:	239c      	movs	r3, #156	; 0x9c
 8003846:	18fa      	adds	r2, r7, r3
 8003848:	6813      	ldr	r3, [r2, #0]
 800384a:	2216      	movs	r2, #22
 800384c:	5e9b      	ldrsh	r3, [r3, r2]
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	17db      	asrs	r3, r3, #31
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	19ba      	adds	r2, r7, r6
 8003856:	6813      	ldr	r3, [r2, #0]
 8003858:	04da      	lsls	r2, r3, #19
 800385a:	197c      	adds	r4, r7, r5
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	0b5b      	lsrs	r3, r3, #13
 8003860:	67bb      	str	r3, [r7, #120]	; 0x78
 8003862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003864:	4313      	orrs	r3, r2
 8003866:	67bb      	str	r3, [r7, #120]	; 0x78
 8003868:	19ba      	adds	r2, r7, r6
 800386a:	6813      	ldr	r3, [r2, #0]
 800386c:	135b      	asrs	r3, r3, #13
 800386e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003870:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003872:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003874:	6938      	ldr	r0, [r7, #16]
 8003876:	6979      	ldr	r1, [r7, #20]
 8003878:	f7fc fe78 	bl	800056c <__aeabi_lmul>
 800387c:	0003      	movs	r3, r0
 800387e:	000c      	movs	r4, r1
 8003880:	0018      	movs	r0, r3
 8003882:	0021      	movs	r1, r4
 8003884:	19ba      	adds	r2, r7, r6
 8003886:	6813      	ldr	r3, [r2, #0]
 8003888:	04da      	lsls	r2, r3, #19
 800388a:	197c      	adds	r4, r7, r5
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	0b5b      	lsrs	r3, r3, #13
 8003890:	673b      	str	r3, [r7, #112]	; 0x70
 8003892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003894:	4313      	orrs	r3, r2
 8003896:	673b      	str	r3, [r7, #112]	; 0x70
 8003898:	19ba      	adds	r2, r7, r6
 800389a:	6813      	ldr	r3, [r2, #0]
 800389c:	135b      	asrs	r3, r3, #13
 800389e:	677b      	str	r3, [r7, #116]	; 0x74
 80038a0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80038a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a4:	f7fc fe62 	bl	800056c <__aeabi_lmul>
 80038a8:	0003      	movs	r3, r0
 80038aa:	000c      	movs	r4, r1
 80038ac:	01e2      	lsls	r2, r4, #7
 80038ae:	0e59      	lsrs	r1, r3, #25
 80038b0:	430a      	orrs	r2, r1
 80038b2:	21b0      	movs	r1, #176	; 0xb0
 80038b4:	1879      	adds	r1, r7, r1
 80038b6:	600a      	str	r2, [r1, #0]
 80038b8:	1663      	asrs	r3, r4, #25
 80038ba:	22b4      	movs	r2, #180	; 0xb4
 80038bc:	18ba      	adds	r2, r7, r2
 80038be:	6013      	str	r3, [r2, #0]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80038c0:	269c      	movs	r6, #156	; 0x9c
 80038c2:	19ba      	adds	r2, r7, r6
 80038c4:	6813      	ldr	r3, [r2, #0]
 80038c6:	2214      	movs	r2, #20
 80038c8:	5e9b      	ldrsh	r3, [r3, r2]
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	17db      	asrs	r3, r3, #31
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	197a      	adds	r2, r7, r5
 80038d2:	6853      	ldr	r3, [r2, #4]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	68b8      	ldr	r0, [r7, #8]
 80038d8:	68f9      	ldr	r1, [r7, #12]
 80038da:	f7fc fe47 	bl	800056c <__aeabi_lmul>
 80038de:	0003      	movs	r3, r0
 80038e0:	000c      	movs	r4, r1
 80038e2:	0362      	lsls	r2, r4, #13
 80038e4:	0cd9      	lsrs	r1, r3, #19
 80038e6:	430a      	orrs	r2, r1
 80038e8:	20a8      	movs	r0, #168	; 0xa8
 80038ea:	1839      	adds	r1, r7, r0
 80038ec:	600a      	str	r2, [r1, #0]
 80038ee:	14e3      	asrs	r3, r4, #19
 80038f0:	22ac      	movs	r2, #172	; 0xac
 80038f2:	18ba      	adds	r2, r7, r2
 80038f4:	6013      	str	r3, [r2, #0]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80038f6:	197a      	adds	r2, r7, r5
 80038f8:	6811      	ldr	r1, [r2, #0]
 80038fa:	6852      	ldr	r2, [r2, #4]
 80038fc:	23b0      	movs	r3, #176	; 0xb0
 80038fe:	18fb      	adds	r3, r7, r3
 8003900:	685c      	ldr	r4, [r3, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	18c9      	adds	r1, r1, r3
 8003906:	4162      	adcs	r2, r4
 8003908:	183b      	adds	r3, r7, r0
 800390a:	685c      	ldr	r4, [r3, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	185b      	adds	r3, r3, r1
 8003910:	4154      	adcs	r4, r2
 8003912:	0622      	lsls	r2, r4, #24
 8003914:	0a19      	lsrs	r1, r3, #8
 8003916:	66b9      	str	r1, [r7, #104]	; 0x68
 8003918:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800391a:	4311      	orrs	r1, r2
 800391c:	66b9      	str	r1, [r7, #104]	; 0x68
 800391e:	1223      	asrs	r3, r4, #8
 8003920:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003922:	19bb      	adds	r3, r7, r6
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2212      	movs	r2, #18
 8003928:	5e9b      	ldrsh	r3, [r3, r2]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	17db      	asrs	r3, r3, #31
 800392e:	607b      	str	r3, [r7, #4]
 8003930:	6839      	ldr	r1, [r7, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	000b      	movs	r3, r1
 8003936:	0f1b      	lsrs	r3, r3, #28
 8003938:	0010      	movs	r0, r2
 800393a:	0100      	lsls	r0, r0, #4
 800393c:	6678      	str	r0, [r7, #100]	; 0x64
 800393e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003940:	4318      	orrs	r0, r3
 8003942:	6678      	str	r0, [r7, #100]	; 0x64
 8003944:	000b      	movs	r3, r1
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	663b      	str	r3, [r7, #96]	; 0x60
 800394a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800394c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800394e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003950:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003952:	185b      	adds	r3, r3, r1
 8003954:	4154      	adcs	r4, r2
 8003956:	197a      	adds	r2, r7, r5
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	6054      	str	r4, [r2, #4]
	return p;
 800395c:	197b      	adds	r3, r7, r5
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	0018      	movs	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	b02f      	add	sp, #188	; 0xbc
 8003966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003968:	fffe0c00 	.word	0xfffe0c00
 800396c:	00000c35 	.word	0x00000c35

08003970 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a2c      	ldr	r2, [pc, #176]	; (8003a30 <compensate_humidity+0xc0>)
 8003980:	4694      	mov	ip, r2
 8003982:	4463      	add	r3, ip
 8003984:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	039a      	lsls	r2, r3, #14
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	211e      	movs	r1, #30
 800398e:	5e5b      	ldrsh	r3, [r3, r1]
 8003990:	051b      	lsls	r3, r3, #20
 8003992:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2120      	movs	r1, #32
 8003998:	5e5b      	ldrsh	r3, [r3, r1]
 800399a:	0019      	movs	r1, r3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	434b      	muls	r3, r1
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2280      	movs	r2, #128	; 0x80
 80039a4:	01d2      	lsls	r2, r2, #7
 80039a6:	4694      	mov	ip, r2
 80039a8:	4463      	add	r3, ip
 80039aa:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	2122      	movs	r1, #34	; 0x22
 80039b0:	5652      	ldrsb	r2, [r2, r1]
 80039b2:	0011      	movs	r1, r2
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	434a      	muls	r2, r1
 80039b8:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	7f09      	ldrb	r1, [r1, #28]
 80039be:	0008      	movs	r0, r1
 80039c0:	6979      	ldr	r1, [r7, #20]
 80039c2:	4341      	muls	r1, r0
 80039c4:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80039c6:	2080      	movs	r0, #128	; 0x80
 80039c8:	0200      	lsls	r0, r0, #8
 80039ca:	4684      	mov	ip, r0
 80039cc:	4461      	add	r1, ip
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80039ce:	434a      	muls	r2, r1
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80039d0:	1292      	asrs	r2, r2, #10
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	0389      	lsls	r1, r1, #14
 80039d6:	468c      	mov	ip, r1
 80039d8:	4462      	add	r2, ip
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80039da:	68f9      	ldr	r1, [r7, #12]
 80039dc:	201a      	movs	r0, #26
 80039de:	5e09      	ldrsh	r1, [r1, r0]
 80039e0:	434a      	muls	r2, r1
 80039e2:	2180      	movs	r1, #128	; 0x80
 80039e4:	0189      	lsls	r1, r1, #6
 80039e6:	468c      	mov	ip, r1
 80039e8:	4462      	add	r2, ip
 80039ea:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80039ec:	4353      	muls	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	13db      	asrs	r3, r3, #15
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	13d2      	asrs	r2, r2, #15
 80039f8:	4353      	muls	r3, r2
 80039fa:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	7e12      	ldrb	r2, [r2, #24]
 8003a00:	4353      	muls	r3, r2
 8003a02:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	da00      	bge.n	8003a12 <compensate_humidity+0xa2>
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	22c8      	movs	r2, #200	; 0xc8
 8003a18:	0552      	lsls	r2, r2, #21
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	dd01      	ble.n	8003a22 <compensate_humidity+0xb2>
 8003a1e:	23c8      	movs	r3, #200	; 0xc8
 8003a20:	055b      	lsls	r3, r3, #21
 8003a22:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	131b      	asrs	r3, r3, #12
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b006      	add	sp, #24
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	fffed400 	.word	0xfffed400

08003a34 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08c      	sub	sp, #48	; 0x30
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2232      	movs	r2, #50	; 0x32
 8003a46:	5c9b      	ldrb	r3, [r3, r2]
 8003a48:	2b60      	cmp	r3, #96	; 0x60
 8003a4a:	d007      	beq.n	8003a5c <bmp280_read_fixed+0x28>
		if (humidity)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <bmp280_read_fixed+0x32>
 8003a62:	2308      	movs	r3, #8
 8003a64:	e000      	b.n	8003a68 <bmp280_read_fixed+0x34>
 8003a66:	2306      	movs	r3, #6
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2218      	movs	r2, #24
 8003a70:	18ba      	adds	r2, r7, r2
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	21f7      	movs	r1, #247	; 0xf7
 8003a76:	f7ff fb95 	bl	80031a4 <read_data>
 8003a7a:	1e03      	subs	r3, r0, #0
 8003a7c:	d001      	beq.n	8003a82 <bmp280_read_fixed+0x4e>
		return false;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e042      	b.n	8003b08 <bmp280_read_fixed+0xd4>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8003a82:	2118      	movs	r1, #24
 8003a84:	187b      	adds	r3, r7, r1
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	031a      	lsls	r2, r3, #12
 8003a8a:	187b      	adds	r3, r7, r1
 8003a8c:	785b      	ldrb	r3, [r3, #1]
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	4313      	orrs	r3, r2
 8003a92:	187a      	adds	r2, r7, r1
 8003a94:	7892      	ldrb	r2, [r2, #2]
 8003a96:	0912      	lsrs	r2, r2, #4
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8003a9e:	187b      	adds	r3, r7, r1
 8003aa0:	78db      	ldrb	r3, [r3, #3]
 8003aa2:	031a      	lsls	r2, r3, #12
 8003aa4:	187b      	adds	r3, r7, r1
 8003aa6:	791b      	ldrb	r3, [r3, #4]
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	187a      	adds	r2, r7, r1
 8003aae:	7952      	ldrb	r2, [r2, #5]
 8003ab0:	0912      	lsrs	r2, r2, #4
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8003ab8:	2314      	movs	r3, #20
 8003aba:	18fa      	adds	r2, r7, r3
 8003abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f7ff fd6b 	bl	800359c <compensate_temperature>
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f7ff fd96 	bl	8003604 <compensate_pressure>
 8003ad8:	0002      	movs	r2, r0
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d010      	beq.n	8003b06 <bmp280_read_fixed+0xd2>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8003ae4:	2218      	movs	r2, #24
 8003ae6:	18bb      	adds	r3, r7, r2
 8003ae8:	799b      	ldrb	r3, [r3, #6]
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	18ba      	adds	r2, r7, r2
 8003aee:	79d2      	ldrb	r2, [r2, #7]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	6a39      	ldr	r1, [r7, #32]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	0018      	movs	r0, r3
 8003afc:	f7ff ff38 	bl	8003970 <compensate_humidity>
 8003b00:	0002      	movs	r2, r0
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	601a      	str	r2, [r3, #0]
	}

	return true;
 8003b06:	2301      	movs	r3, #1
}
 8003b08:	0018      	movs	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b00c      	add	sp, #48	; 0x30
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <bmp280_read_float+0x1a>
 8003b24:	2314      	movs	r3, #20
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	e000      	b.n	8003b2c <bmp280_read_float+0x1c>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2218      	movs	r2, #24
 8003b2e:	18ba      	adds	r2, r7, r2
 8003b30:	211c      	movs	r1, #28
 8003b32:	1879      	adds	r1, r7, r1
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff ff7d 	bl	8003a34 <bmp280_read_fixed>
 8003b3a:	1e03      	subs	r3, r0, #0
 8003b3c:	d02d      	beq.n	8003b9a <bmp280_read_float+0x8a>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7fd fb3f 	bl	80011c4 <__aeabi_i2f>
 8003b46:	1c03      	adds	r3, r0, #0
 8003b48:	4916      	ldr	r1, [pc, #88]	; (8003ba4 <bmp280_read_float+0x94>)
 8003b4a:	1c18      	adds	r0, r3, #0
 8003b4c:	f7fc fe4c 	bl	80007e8 <__aeabi_fdiv>
 8003b50:	1c03      	adds	r3, r0, #0
 8003b52:	1c1a      	adds	r2, r3, #0
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f7fd fb7c 	bl	8001258 <__aeabi_ui2f>
 8003b60:	1c03      	adds	r3, r0, #0
 8003b62:	2187      	movs	r1, #135	; 0x87
 8003b64:	05c9      	lsls	r1, r1, #23
 8003b66:	1c18      	adds	r0, r3, #0
 8003b68:	f7fc fe3e 	bl	80007e8 <__aeabi_fdiv>
 8003b6c:	1c03      	adds	r3, r0, #0
 8003b6e:	1c1a      	adds	r2, r3, #0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	601a      	str	r2, [r3, #0]
		if (humidity)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <bmp280_read_float+0x86>
			*humidity = (float) fixed_humidity / 1024;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f7fd fb6b 	bl	8001258 <__aeabi_ui2f>
 8003b82:	1c03      	adds	r3, r0, #0
 8003b84:	2189      	movs	r1, #137	; 0x89
 8003b86:	05c9      	lsls	r1, r1, #23
 8003b88:	1c18      	adds	r0, r3, #0
 8003b8a:	f7fc fe2d 	bl	80007e8 <__aeabi_fdiv>
 8003b8e:	1c03      	adds	r3, r0, #0
 8003b90:	1c1a      	adds	r2, r3, #0
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	601a      	str	r2, [r3, #0]
		return true;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <bmp280_read_float+0x8c>
	}

	return false;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b008      	add	sp, #32
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	42c80000 	.word	0x42c80000

08003ba8 <DBG_Init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions ------------------------------------------------------- */

void DBG_Init(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
#ifdef DEBUG
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8003bae:	1d3b      	adds	r3, r7, #4
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	2314      	movs	r3, #20
 8003bb4:	001a      	movs	r2, r3
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	f017 fdbe 	bl	801b738 <memset>

  /* Enable the GPIO_B Clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bbc:	4b25      	ldr	r3, [pc, #148]	; (8003c54 <DBG_Init+0xac>)
 8003bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc0:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <DBG_Init+0xac>)
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bc8:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <DBG_Init+0xac>)
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	2202      	movs	r2, #2
 8003bce:	4013      	ands	r3, r2
 8003bd0:	603b      	str	r3, [r7, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]

  /* Configure the GPIO pin */
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8003bd4:	1d3b      	adds	r3, r7, #4
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	605a      	str	r2, [r3, #4]
  gpioinitstruct.Pull   = GPIO_PULLUP;
 8003bda:	1d3b      	adds	r3, r7, #4
 8003bdc:	2201      	movs	r2, #1
 8003bde:	609a      	str	r2, [r3, #8]
  gpioinitstruct.Speed  = GPIO_SPEED_HIGH;
 8003be0:	1d3b      	adds	r3, r7, #4
 8003be2:	2203      	movs	r2, #3
 8003be4:	60da      	str	r2, [r3, #12]

  gpioinitstruct.Pin    = (GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8003be6:	1d3b      	adds	r3, r7, #4
 8003be8:	22f0      	movs	r2, #240	; 0xf0
 8003bea:	0212      	lsls	r2, r2, #8
 8003bec:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8003bee:	1d3b      	adds	r3, r7, #4
 8003bf0:	4a19      	ldr	r2, [pc, #100]	; (8003c58 <DBG_Init+0xb0>)
 8003bf2:	0019      	movs	r1, r3
 8003bf4:	0010      	movs	r0, r2
 8003bf6:	f006 f8a9 	bl	8009d4c <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	015b      	lsls	r3, r3, #5
 8003bfe:	4816      	ldr	r0, [pc, #88]	; (8003c58 <DBG_Init+0xb0>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	0019      	movs	r1, r3
 8003c04:	f006 fa20 	bl	800a048 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003c08:	2380      	movs	r3, #128	; 0x80
 8003c0a:	019b      	lsls	r3, r3, #6
 8003c0c:	4812      	ldr	r0, [pc, #72]	; (8003c58 <DBG_Init+0xb0>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	0019      	movs	r1, r3
 8003c12:	f006 fa19 	bl	800a048 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	01db      	lsls	r3, r3, #7
 8003c1a:	480f      	ldr	r0, [pc, #60]	; (8003c58 <DBG_Init+0xb0>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	0019      	movs	r1, r3
 8003c20:	f006 fa12 	bl	800a048 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	480b      	ldr	r0, [pc, #44]	; (8003c58 <DBG_Init+0xb0>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	f006 fa0b 	bl	800a048 <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 8003c32:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <DBG_Init+0xac>)
 8003c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c36:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <DBG_Init+0xac>)
 8003c38:	2180      	movs	r1, #128	; 0x80
 8003c3a:	03c9      	lsls	r1, r1, #15
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 8003c40:	f005 f858 	bl	8008cf4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8003c44:	f005 f864 	bl	8008d10 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8003c48:	f005 f870 	bl	8008d2c <HAL_DBGMCU_EnableDBGStandbyMode>
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
  __HAL_RCC_DBGMCU_CLK_DISABLE();
#endif
}
 8003c4c:	46c0      	nop			; (mov r8, r8)
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b006      	add	sp, #24
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40021000 	.word	0x40021000
 8003c58:	50000400 	.word	0x50000400

08003c5c <Error_Handler>:

void Error_Handler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  PRINTF("Error_Handler\n\r");
 8003c60:	4b02      	ldr	r3, [pc, #8]	; (8003c6c <Error_Handler+0x10>)
 8003c62:	0018      	movs	r0, r3
 8003c64:	f017 fbdc 	bl	801b420 <TraceSend>
  while (1)
 8003c68:	e7fe      	b.n	8003c68 <Error_Handler+0xc>
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	0801c27c 	.word	0x0801c27c

08003c70 <HW_GPIO_Init>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] initStruct  GPIO_InitTypeDef intit structure
 * @retval none
 */
void HW_GPIO_Init(GPIO_TypeDef *port, uint16_t GPIO_Pin, GPIO_InitTypeDef *initStruct)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	; 0x28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	230a      	movs	r3, #10
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	1c0a      	adds	r2, r1, #0
 8003c80:	801a      	strh	r2, [r3, #0]

  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4a30      	ldr	r2, [pc, #192]	; (8003d48 <HW_GPIO_Init+0xd8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01b      	beq.n	8003cc2 <HW_GPIO_Init+0x52>
 8003c8a:	4a2f      	ldr	r2, [pc, #188]	; (8003d48 <HW_GPIO_Init+0xd8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d804      	bhi.n	8003c9a <HW_GPIO_Init+0x2a>
 8003c90:	22a0      	movs	r2, #160	; 0xa0
 8003c92:	05d2      	lsls	r2, r2, #23
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d007      	beq.n	8003ca8 <HW_GPIO_Init+0x38>
 8003c98:	e03a      	b.n	8003d10 <HW_GPIO_Init+0xa0>
 8003c9a:	4a2c      	ldr	r2, [pc, #176]	; (8003d4c <HW_GPIO_Init+0xdc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d01d      	beq.n	8003cdc <HW_GPIO_Init+0x6c>
 8003ca0:	4a2b      	ldr	r2, [pc, #172]	; (8003d50 <HW_GPIO_Init+0xe0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d027      	beq.n	8003cf6 <HW_GPIO_Init+0x86>
 8003ca6:	e033      	b.n	8003d10 <HW_GPIO_Init+0xa0>
 8003ca8:	4b2a      	ldr	r3, [pc, #168]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cac:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cae:	2101      	movs	r1, #1
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cb4:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	2201      	movs	r2, #1
 8003cba:	4013      	ands	r3, r2
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	e032      	b.n	8003d28 <HW_GPIO_Init+0xb8>
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc6:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cc8:	2102      	movs	r1, #2
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cce:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	623b      	str	r3, [r7, #32]
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	e025      	b.n	8003d28 <HW_GPIO_Init+0xb8>
 8003cdc:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce0:	4b1c      	ldr	r3, [pc, #112]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003ce2:	2104      	movs	r1, #4
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	2204      	movs	r2, #4
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	e018      	b.n	8003d28 <HW_GPIO_Init+0xb8>
 8003cf6:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfa:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cfc:	2108      	movs	r1, #8
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	2208      	movs	r2, #8
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	e00b      	b.n	8003d28 <HW_GPIO_Init+0xb8>
 8003d10:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003d16:	2180      	movs	r1, #128	; 0x80
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d1c:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	2280      	movs	r2, #128	; 0x80
 8003d22:	4013      	ands	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	697b      	ldr	r3, [r7, #20]

  initStruct->Pin = GPIO_Pin ;
 8003d28:	230a      	movs	r3, #10
 8003d2a:	18fb      	adds	r3, r7, r3
 8003d2c:	881a      	ldrh	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	601a      	str	r2, [r3, #0]

  HAL_GPIO_Init(port, initStruct);
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	0011      	movs	r1, r2
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f006 f807 	bl	8009d4c <HAL_GPIO_Init>
}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b00a      	add	sp, #40	; 0x28
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	50000400 	.word	0x50000400
 8003d4c:	50000800 	.word	0x50000800
 8003d50:	50000c00 	.word	0x50000c00
 8003d54:	40021000 	.word	0x40021000

08003d58 <HW_GPIO_SetIrq>:
 * @param [IN] prio       NVIC priority (0 is highest)
 * @param [IN] irqHandler  points to the  function to execute
 * @retval none
 */
void HW_GPIO_SetIrq(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t prio,  GpioIrqHandler *irqHandler)
{
 8003d58:	b5b0      	push	{r4, r5, r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	200a      	movs	r0, #10
 8003d66:	183b      	adds	r3, r7, r0
 8003d68:	1c0a      	adds	r2, r1, #0
 8003d6a:	801a      	strh	r2, [r3, #0]
  IRQn_Type IRQnb;

  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 8003d6c:	183b      	adds	r3, r7, r0
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	0018      	movs	r0, r3
 8003d72:	f000 f865 	bl	8003e40 <HW_GPIO_GetBitPos>
 8003d76:	0003      	movs	r3, r0
 8003d78:	617b      	str	r3, [r7, #20]

  if (irqHandler != NULL)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01d      	beq.n	8003dbc <HW_GPIO_SetIrq+0x64>
  {
    GpioIrq[ BitPos ] = irqHandler;
 8003d80:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <HW_GPIO_SetIrq+0x78>)
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	0092      	lsls	r2, r2, #2
 8003d86:	6839      	ldr	r1, [r7, #0]
 8003d88:	50d1      	str	r1, [r2, r3]

    IRQnb = MSP_GetIRQn(GPIO_Pin);
 8003d8a:	2513      	movs	r5, #19
 8003d8c:	197c      	adds	r4, r7, r5
 8003d8e:	230a      	movs	r3, #10
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	0018      	movs	r0, r3
 8003d96:	f001 fa48 	bl	800522a <MSP_GetIRQn>
 8003d9a:	0003      	movs	r3, r0
 8003d9c:	7023      	strb	r3, [r4, #0]

    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	197b      	adds	r3, r7, r5
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	b25b      	sxtb	r3, r3
 8003da6:	2200      	movs	r2, #0
 8003da8:	0018      	movs	r0, r3
 8003daa:	f005 fda7 	bl	80098fc <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ(IRQnb);
 8003dae:	197b      	adds	r3, r7, r5
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	b25b      	sxtb	r3, r3
 8003db4:	0018      	movs	r0, r3
 8003db6:	f005 fdb6 	bl	8009926 <HAL_NVIC_EnableIRQ>
  }
  else
  {
    GpioIrq[ BitPos ] = NULL;
  }
}
 8003dba:	e004      	b.n	8003dc6 <HW_GPIO_SetIrq+0x6e>
    GpioIrq[ BitPos ] = NULL;
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <HW_GPIO_SetIrq+0x78>)
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	0092      	lsls	r2, r2, #2
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	50d1      	str	r1, [r2, r3]
}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b006      	add	sp, #24
 8003dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	20000174 	.word	0x20000174

08003dd4 <HW_GPIO_IrqHandler>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval none
 */
void HW_GPIO_IrqHandler(uint16_t GPIO_Pin)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	0002      	movs	r2, r0
 8003ddc:	1dbb      	adds	r3, r7, #6
 8003dde:	801a      	strh	r2, [r3, #0]
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin);
 8003de0:	1dbb      	adds	r3, r7, #6
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	0018      	movs	r0, r3
 8003de6:	f000 f82b 	bl	8003e40 <HW_GPIO_GetBitPos>
 8003dea:	0003      	movs	r3, r0
 8003dec:	60fb      	str	r3, [r7, #12]

  if (GpioIrq[ BitPos ]  != NULL)
 8003dee:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <HW_GPIO_IrqHandler+0x3c>)
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	0092      	lsls	r2, r2, #2
 8003df4:	58d3      	ldr	r3, [r2, r3]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HW_GPIO_IrqHandler+0x32>
  {
    GpioIrq[ BitPos ](NULL);
 8003dfa:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HW_GPIO_IrqHandler+0x3c>)
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	0092      	lsls	r2, r2, #2
 8003e00:	58d3      	ldr	r3, [r2, r3]
 8003e02:	2000      	movs	r0, #0
 8003e04:	4798      	blx	r3
  }
}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b004      	add	sp, #16
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	20000174 	.word	0x20000174

08003e14 <HW_GPIO_Write>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] value New GPIO output value
 * @retval none
 */
void HW_GPIO_Write(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,  uint32_t value)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	200a      	movs	r0, #10
 8003e20:	183b      	adds	r3, r7, r0
 8003e22:	1c0a      	adds	r2, r1, #0
 8003e24:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (GPIO_PinState) value);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	183b      	adds	r3, r7, r0
 8003e2c:	8819      	ldrh	r1, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	0018      	movs	r0, r3
 8003e32:	f006 f909 	bl	800a048 <HAL_GPIO_WritePin>
}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b004      	add	sp, #16
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HW_GPIO_GetBitPos>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval the position of the bit
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	0002      	movs	r2, r0
 8003e48:	1dbb      	adds	r3, r7, #6
 8003e4a:	801a      	strh	r2, [r3, #0]
  uint8_t PinPos = 0;
 8003e4c:	230f      	movs	r3, #15
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	2200      	movs	r2, #0
 8003e52:	701a      	strb	r2, [r3, #0]

  if ((GPIO_Pin & 0xFF00) != 0)
 8003e54:	1dbb      	adds	r3, r7, #6
 8003e56:	881a      	ldrh	r2, [r3, #0]
 8003e58:	23ff      	movs	r3, #255	; 0xff
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d006      	beq.n	8003e6e <HW_GPIO_GetBitPos+0x2e>
  {
    PinPos |= 0x8;
 8003e60:	220f      	movs	r2, #15
 8003e62:	18bb      	adds	r3, r7, r2
 8003e64:	18ba      	adds	r2, r7, r2
 8003e66:	7812      	ldrb	r2, [r2, #0]
 8003e68:	2108      	movs	r1, #8
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	701a      	strb	r2, [r3, #0]
  }
  if ((GPIO_Pin & 0xF0F0) != 0)
 8003e6e:	1dbb      	adds	r3, r7, #6
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	4a14      	ldr	r2, [pc, #80]	; (8003ec4 <HW_GPIO_GetBitPos+0x84>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	d006      	beq.n	8003e86 <HW_GPIO_GetBitPos+0x46>
  {
    PinPos |= 0x4;
 8003e78:	220f      	movs	r2, #15
 8003e7a:	18bb      	adds	r3, r7, r2
 8003e7c:	18ba      	adds	r2, r7, r2
 8003e7e:	7812      	ldrb	r2, [r2, #0]
 8003e80:	2104      	movs	r1, #4
 8003e82:	430a      	orrs	r2, r1
 8003e84:	701a      	strb	r2, [r3, #0]
  }
  if ((GPIO_Pin & 0xCCCC) != 0)
 8003e86:	1dbb      	adds	r3, r7, #6
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	4a0f      	ldr	r2, [pc, #60]	; (8003ec8 <HW_GPIO_GetBitPos+0x88>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d006      	beq.n	8003e9e <HW_GPIO_GetBitPos+0x5e>
  {
    PinPos |= 0x2;
 8003e90:	220f      	movs	r2, #15
 8003e92:	18bb      	adds	r3, r7, r2
 8003e94:	18ba      	adds	r2, r7, r2
 8003e96:	7812      	ldrb	r2, [r2, #0]
 8003e98:	2102      	movs	r1, #2
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	701a      	strb	r2, [r3, #0]
  }
  if ((GPIO_Pin & 0xAAAA) != 0)
 8003e9e:	1dbb      	adds	r3, r7, #6
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <HW_GPIO_GetBitPos+0x8c>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d006      	beq.n	8003eb6 <HW_GPIO_GetBitPos+0x76>
  {
    PinPos |= 0x1;
 8003ea8:	220f      	movs	r2, #15
 8003eaa:	18bb      	adds	r3, r7, r2
 8003eac:	18ba      	adds	r2, r7, r2
 8003eae:	7812      	ldrb	r2, [r2, #0]
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	701a      	strb	r2, [r3, #0]
  }

  return PinPos;
 8003eb6:	230f      	movs	r3, #15
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	781b      	ldrb	r3, [r3, #0]
}
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	b004      	add	sp, #16
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	0000f0f0 	.word	0x0000f0f0
 8003ec8:	0000cccc 	.word	0x0000cccc
 8003ecc:	0000aaaa 	.word	0x0000aaaa

08003ed0 <LL_RTC_TIME_GetSubSecond>:
  * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	041b      	lsls	r3, r3, #16
 8003ede:	0c1b      	lsrs	r3, r3, #16
}
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b002      	add	sp, #8
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HW_RTC_Init>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
void HW_RTC_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  if (HW_RTC_Initalized == false)
 8003eec:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <HW_RTC_Init+0x2c>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	4053      	eors	r3, r2
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HW_RTC_Init+0x24>
  {
    HW_RTC_SetConfig();
 8003efa:	f000 f80d 	bl	8003f18 <HW_RTC_SetConfig>
    HW_RTC_SetAlarmConfig();
 8003efe:	f000 f991 	bl	8004224 <HW_RTC_SetAlarmConfig>
    HW_RTC_SetTimerContext();
 8003f02:	f000 f96d 	bl	80041e0 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 8003f06:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <HW_RTC_Init+0x2c>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	701a      	strb	r2, [r3, #0]
  }
}
 8003f0c:	46c0      	nop			; (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	200001b4 	.word	0x200001b4

08003f18 <HW_RTC_SetConfig>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
static void HW_RTC_SetConfig(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  RtcHandle.Instance = RTC;
 8003f1e:	4b27      	ldr	r3, [pc, #156]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f20:	4a27      	ldr	r2, [pc, #156]	; (8003fc0 <HW_RTC_SetConfig+0xa8>)
 8003f22:	601a      	str	r2, [r3, #0]

  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 8003f24:	4b25      	ldr	r3, [pc, #148]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	605a      	str	r2, [r3, #4]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 8003f2a:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f2c:	221f      	movs	r2, #31
 8003f2e:	609a      	str	r2, [r3, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 8003f30:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f32:	4a24      	ldr	r2, [pc, #144]	; (8003fc4 <HW_RTC_SetConfig+0xac>)
 8003f34:	60da      	str	r2, [r3, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 8003f36:	4b21      	ldr	r3, [pc, #132]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	611a      	str	r2, [r3, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003f3c:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	619a      	str	r2, [r3, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003f42:	4b1e      	ldr	r3, [pc, #120]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	61da      	str	r2, [r3, #28]

  HAL_RTC_Init(&RtcHandle);
 8003f48:	4b1c      	ldr	r3, [pc, #112]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f007 fe1e 	bl	800bb8c <HAL_RTC_Init>

  /*Monday 1st January 2016*/
  RTC_DateStruct.Year = 0;
 8003f50:	003b      	movs	r3, r7
 8003f52:	2200      	movs	r2, #0
 8003f54:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 8003f56:	003b      	movs	r3, r7
 8003f58:	2201      	movs	r2, #1
 8003f5a:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct.Date = 1;
 8003f5c:	003b      	movs	r3, r7
 8003f5e:	2201      	movs	r2, #1
 8003f60:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 8003f62:	003b      	movs	r3, r7
 8003f64:	2201      	movs	r2, #1
 8003f66:	701a      	strb	r2, [r3, #0]
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 8003f68:	0039      	movs	r1, r7
 8003f6a:	4b14      	ldr	r3, [pc, #80]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f007 ffca 	bl	800bf08 <HAL_RTC_SetDate>

  /*at 0:0:0*/
  RTC_TimeStruct.Hours = 0;
 8003f74:	1d3b      	adds	r3, r7, #4
 8003f76:	2200      	movs	r2, #0
 8003f78:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct.Minutes = 0;
 8003f7a:	1d3b      	adds	r3, r7, #4
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	705a      	strb	r2, [r3, #1]

  RTC_TimeStruct.Seconds = 0;
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	2200      	movs	r2, #0
 8003f84:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct.TimeFormat = 0;
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	2200      	movs	r2, #0
 8003f8a:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct.SubSeconds = 0;
 8003f8c:	1d3b      	adds	r3, r7, #4
 8003f8e:	2200      	movs	r2, #0
 8003f90:	605a      	str	r2, [r3, #4]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 8003f92:	1d3b      	adds	r3, r7, #4
 8003f94:	2200      	movs	r2, #0
 8003f96:	611a      	str	r2, [r3, #16]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 8003f98:	1d3b      	adds	r3, r7, #4
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	60da      	str	r2, [r3, #12]

  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 8003f9e:	1d39      	adds	r1, r7, #4
 8003fa0:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f007 fe8f 	bl	800bcc8 <HAL_RTC_SetTime>

  /*Enable Direct Read of the calendar registers (not through Shadow) */
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 8003faa:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003fac:	0018      	movs	r0, r3
 8003fae:	f008 fb54 	bl	800c65a <HAL_RTCEx_EnableBypassShadow>
}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	b006      	add	sp, #24
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	200001b8 	.word	0x200001b8
 8003fc0:	40002800 	.word	0x40002800
 8003fc4:	000003ff 	.word	0x000003ff

08003fc8 <HW_RTC_GetMinimumTimeout>:
 * @brief returns the wake up time in ticks
 * @param none
 * @retval wake up time in ticks
 */
uint32_t HW_RTC_GetMinimumTimeout(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  return (MIN_ALARM_DELAY);
 8003fcc:	2303      	movs	r3, #3
}
 8003fce:	0018      	movs	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HW_RTC_ms2Tick>:
 * @brief converts time in ms to time in ticks
 * @param [IN] time in milliseconds
 * @retval returns time in timer ticks
 */
uint32_t HW_RTC_ms2Tick(TimerTime_t timeMilliSec)
{
 8003fd4:	b5b0      	push	{r4, r5, r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /*return( ( timeMicroSec / RTC_ALARM_TIME_BASE ) ); */
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	000a      	movs	r2, r1
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	000b      	movs	r3, r1
 8003fe4:	0e51      	lsrs	r1, r2, #25
 8003fe6:	01dd      	lsls	r5, r3, #7
 8003fe8:	430d      	orrs	r5, r1
 8003fea:	01d4      	lsls	r4, r2, #7
 8003fec:	227d      	movs	r2, #125	; 0x7d
 8003fee:	2300      	movs	r3, #0
 8003ff0:	0020      	movs	r0, r4
 8003ff2:	0029      	movs	r1, r5
 8003ff4:	f7fc fa9a 	bl	800052c <__aeabi_uldivmod>
 8003ff8:	0003      	movs	r3, r0
 8003ffa:	000c      	movs	r4, r1
}
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b002      	add	sp, #8
 8004002:	bdb0      	pop	{r4, r5, r7, pc}

08004004 <HW_RTC_Tick2ms>:
 * @brief converts time in ticks to time in ms
 * @param [IN] time in timer ticks
 * @retval returns time in milliseconds
 */
TimerTime_t HW_RTC_Tick2ms(uint32_t tick)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /*return( ( timeMicroSec * RTC_ALARM_TIME_BASE ) ); */
  uint32_t seconds = tick >> N_PREDIV_S;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	0a9b      	lsrs	r3, r3, #10
 8004010:	60fb      	str	r3, [r7, #12]
  tick = tick & PREDIV_S;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	059b      	lsls	r3, r3, #22
 8004016:	0d9b      	lsrs	r3, r3, #22
 8004018:	607b      	str	r3, [r7, #4]
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	0013      	movs	r3, r2
 800401e:	015b      	lsls	r3, r3, #5
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	189b      	adds	r3, r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	0019      	movs	r1, r3
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	0013      	movs	r3, r2
 800402e:	015b      	lsls	r3, r3, #5
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	189b      	adds	r3, r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	0a9b      	lsrs	r3, r3, #10
 800403a:	18cb      	adds	r3, r1, r3
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b004      	add	sp, #16
 8004042:	bd80      	pop	{r7, pc}

08004044 <HW_RTC_SetAlarm>:
 * @brief Set the alarm
 * @note The alarm is set at now (read in this funtion) + timeout
 * @param timeout Duration of the Timer ticks
 */
void HW_RTC_SetAlarm(uint32_t timeout)
{
 8004044:	b590      	push	{r4, r7, lr}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 800404c:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <HW_RTC_SetAlarm+0x5c>)
 800404e:	2200      	movs	r2, #0
 8004050:	5e9b      	ldrsh	r3, [r3, r2]
 8004052:	3303      	adds	r3, #3
 8004054:	001c      	movs	r4, r3
 8004056:	f000 f825 	bl	80040a4 <HW_RTC_GetTimerElapsedTime>
 800405a:	0002      	movs	r2, r0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	429c      	cmp	r4, r3
 8004062:	d204      	bcs.n	800406e <HW_RTC_SetAlarm+0x2a>
  {
    LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 8004064:	2100      	movs	r1, #0
 8004066:	2004      	movs	r0, #4
 8004068:	f016 fb7c 	bl	801a764 <LPM_SetStopMode>
 800406c:	e003      	b.n	8004076 <HW_RTC_SetAlarm+0x32>
  }
  else
  {
    LPM_SetStopMode(LPM_RTC_Id, LPM_Disable);
 800406e:	2101      	movs	r1, #1
 8004070:	2004      	movs	r0, #4
 8004072:	f016 fb77 	bl	801a764 <LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if (LPM_GetMode() == LPM_StopMode)
 8004076:	f016 fbc7 	bl	801a808 <LPM_GetMode>
 800407a:	0003      	movs	r3, r0
 800407c:	2b01      	cmp	r3, #1
 800407e:	d106      	bne.n	800408e <HW_RTC_SetAlarm+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 8004080:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <HW_RTC_SetAlarm+0x5c>)
 8004082:	2200      	movs	r2, #0
 8004084:	5e9b      	ldrsh	r3, [r3, r2]
 8004086:	001a      	movs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	607b      	str	r3, [r7, #4]
  }

  HW_RTC_StartWakeUpAlarm(timeout);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	0018      	movs	r0, r3
 8004092:	f000 f8d5 	bl	8004240 <HW_RTC_StartWakeUpAlarm>
}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	46bd      	mov	sp, r7
 800409a:	b003      	add	sp, #12
 800409c:	bd90      	pop	{r4, r7, pc}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	200001b6 	.word	0x200001b6

080040a4 <HW_RTC_GetTimerElapsedTime>:
 * @brief Get the RTC timer elapsed time since the last Alarm was set
 * @param none
 * @retval RTC Elapsed time in ticks
 */
uint32_t HW_RTC_GetTimerElapsedTime(void)
{
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b089      	sub	sp, #36	; 0x24
 80040a8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80040aa:	2308      	movs	r3, #8
 80040ac:	18fa      	adds	r2, r7, r3
 80040ae:	1d3b      	adds	r3, r7, #4
 80040b0:	0011      	movs	r1, r2
 80040b2:	0018      	movs	r0, r3
 80040b4:	f000 fa30 	bl	8004518 <HW_RTC_GetCalendarValue>
 80040b8:	0003      	movs	r3, r0
 80040ba:	000c      	movs	r4, r1
 80040bc:	61fb      	str	r3, [r7, #28]

  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <HW_RTC_GetTimerElapsedTime+0x2c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	1ad3      	subs	r3, r2, r3
}
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b009      	add	sp, #36	; 0x24
 80040cc:	bd90      	pop	{r4, r7, pc}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	20000204 	.word	0x20000204

080040d4 <HW_RTC_GetTimerValue>:
 * @brief Get the RTC timer value
 * @param none
 * @retval RTC Timer value in ticks
 */
uint32_t HW_RTC_GetTimerValue(void)
{
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b089      	sub	sp, #36	; 0x24
 80040d8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80040da:	2308      	movs	r3, #8
 80040dc:	18fa      	adds	r2, r7, r3
 80040de:	1d3b      	adds	r3, r7, #4
 80040e0:	0011      	movs	r1, r2
 80040e2:	0018      	movs	r0, r3
 80040e4:	f000 fa18 	bl	8004518 <HW_RTC_GetCalendarValue>
 80040e8:	0003      	movs	r3, r0
 80040ea:	000c      	movs	r4, r1
 80040ec:	61fb      	str	r3, [r7, #28]

  return (CalendarValue);
 80040ee:	69fb      	ldr	r3, [r7, #28]
}
 80040f0:	0018      	movs	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b009      	add	sp, #36	; 0x24
 80040f6:	bd90      	pop	{r4, r7, pc}

080040f8 <HW_RTC_StopAlarm>:
 * @brief Stop the Alarm
 * @param none
 * @retval none
 */
void HW_RTC_StopAlarm(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 80040fc:	2380      	movs	r3, #128	; 0x80
 80040fe:	005a      	lsls	r2, r3, #1
 8004100:	4b0a      	ldr	r3, [pc, #40]	; (800412c <HW_RTC_StopAlarm+0x34>)
 8004102:	0011      	movs	r1, r2
 8004104:	0018      	movs	r0, r3
 8004106:	f008 f947 	bl	800c398 <HAL_RTC_DeactivateAlarm>
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <HW_RTC_StopAlarm+0x34>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	22ff      	movs	r2, #255	; 0xff
 8004112:	401a      	ands	r2, r3
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <HW_RTC_StopAlarm+0x34>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4905      	ldr	r1, [pc, #20]	; (8004130 <HW_RTC_StopAlarm+0x38>)
 800411a:	430a      	orrs	r2, r1
 800411c:	60da      	str	r2, [r3, #12]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HW_RTC_StopAlarm+0x3c>)
 8004120:	2280      	movs	r2, #128	; 0x80
 8004122:	0292      	lsls	r2, r2, #10
 8004124:	615a      	str	r2, [r3, #20]
}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	200001b8 	.word	0x200001b8
 8004130:	fffffe7f 	.word	0xfffffe7f
 8004134:	40010400 	.word	0x40010400

08004138 <HW_RTC_IrqHandler>:
 * @brief RTC IRQ Handler on the RTC Alarm
 * @param none
 * @retval none
 */
void HW_RTC_IrqHandler(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
  RTC_HandleTypeDef *hrtc = &RtcHandle;
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <HW_RTC_IrqHandler+0x5c>)
 8004140:	607b      	str	r3, [r7, #4]
  /* enable low power at irq*/
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 8004142:	2100      	movs	r1, #0
 8004144:	2004      	movs	r0, #4
 8004146:	f016 fb0d 	bl	801a764 <LPM_SetStopMode>

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HW_RTC_IrqHandler+0x60>)
 800414c:	2280      	movs	r2, #128	; 0x80
 800414e:	0292      	lsls	r2, r2, #10
 8004150:	615a      	str	r2, [r3, #20]

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	015b      	lsls	r3, r3, #5
 800415c:	4013      	ands	r3, r2
 800415e:	d014      	beq.n	800418a <HW_RTC_IrqHandler+0x52>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	2380      	movs	r3, #128	; 0x80
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	4013      	ands	r3, r2
 800416c:	d00d      	beq.n	800418a <HW_RTC_IrqHandler+0x52>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	22ff      	movs	r2, #255	; 0xff
 8004176:	401a      	ands	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4907      	ldr	r1, [pc, #28]	; (800419c <HW_RTC_IrqHandler+0x64>)
 800417e:	430a      	orrs	r2, r1
 8004180:	60da      	str	r2, [r3, #12]
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	0018      	movs	r0, r3
 8004186:	f001 f837 	bl	80051f8 <HAL_RTC_AlarmAEventCallback>
    }
  }
}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	b002      	add	sp, #8
 8004190:	bd80      	pop	{r7, pc}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	200001b8 	.word	0x200001b8
 8004198:	40010400 	.word	0x40010400
 800419c:	fffffe7f 	.word	0xfffffe7f

080041a0 <HW_RTC_DelayMs>:
 * @brief a delay of delay ms by polling RTC
 * @param delay in ms
 * @retval none
 */
void HW_RTC_DelayMs(uint32_t delay)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  TimerTime_t delayValue = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
  TimerTime_t timeout = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60bb      	str	r3, [r7, #8]

  delayValue = HW_RTC_ms2Tick(delay);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	0018      	movs	r0, r3
 80041b4:	f7ff ff0e 	bl	8003fd4 <HW_RTC_ms2Tick>
 80041b8:	0003      	movs	r3, r0
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = HW_RTC_GetTimerValue();
 80041bc:	f7ff ff8a 	bl	80040d4 <HW_RTC_GetTimerValue>
 80041c0:	0003      	movs	r3, r0
 80041c2:	60bb      	str	r3, [r7, #8]
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 80041c4:	e000      	b.n	80041c8 <HW_RTC_DelayMs+0x28>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	f7ff ff84 	bl	80040d4 <HW_RTC_GetTimerValue>
 80041cc:	0002      	movs	r2, r0
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d8f6      	bhi.n	80041c6 <HW_RTC_DelayMs+0x26>
  {
    __NOP();
  }
}
 80041d8:	46c0      	nop			; (mov r8, r8)
 80041da:	46bd      	mov	sp, r7
 80041dc:	b004      	add	sp, #16
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HW_RTC_SetTimerContext>:
 * @brief set Time Reference set also the RTC_DateStruct and RTC_TimeStruct
 * @param none
 * @retval Timer Value
 */
uint32_t HW_RTC_SetTimerContext(void)
{
 80041e0:	b5b0      	push	{r4, r5, r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  RtcTimerContext.Rtc_Time = (uint32_t) HW_RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 80041e4:	4a07      	ldr	r2, [pc, #28]	; (8004204 <HW_RTC_SetTimerContext+0x24>)
 80041e6:	4b08      	ldr	r3, [pc, #32]	; (8004208 <HW_RTC_SetTimerContext+0x28>)
 80041e8:	0011      	movs	r1, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f000 f994 	bl	8004518 <HW_RTC_GetCalendarValue>
 80041f0:	0003      	movs	r3, r0
 80041f2:	000c      	movs	r4, r1
 80041f4:	001a      	movs	r2, r3
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <HW_RTC_SetTimerContext+0x2c>)
 80041f8:	601a      	str	r2, [r3, #0]
  return (uint32_t) RtcTimerContext.Rtc_Time;
 80041fa:	4b04      	ldr	r3, [pc, #16]	; (800420c <HW_RTC_SetTimerContext+0x2c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
}
 80041fe:	0018      	movs	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	bdb0      	pop	{r4, r5, r7, pc}
 8004204:	20000208 	.word	0x20000208
 8004208:	2000021c 	.word	0x2000021c
 800420c:	20000204 	.word	0x20000204

08004210 <HW_RTC_GetTimerContext>:
 * @brief Get the RTC timer Reference
 * @param none
 * @retval Timer Value in  Ticks
 */
uint32_t HW_RTC_GetTimerContext(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  return RtcTimerContext.Rtc_Time;
 8004214:	4b02      	ldr	r3, [pc, #8]	; (8004220 <HW_RTC_GetTimerContext+0x10>)
 8004216:	681b      	ldr	r3, [r3, #0]
}
 8004218:	0018      	movs	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	20000204 	.word	0x20000204

08004224 <HW_RTC_SetAlarmConfig>:
 * @brief configure alarm at init
 * @param none
 * @retval none
 */
static void HW_RTC_SetAlarmConfig(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8004228:	2380      	movs	r3, #128	; 0x80
 800422a:	005a      	lsls	r2, r3, #1
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <HW_RTC_SetAlarmConfig+0x18>)
 800422e:	0011      	movs	r1, r2
 8004230:	0018      	movs	r0, r3
 8004232:	f008 f8b1 	bl	800c398 <HAL_RTC_DeactivateAlarm>
}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	200001b8 	.word	0x200001b8

08004240 <HW_RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void HW_RTC_StartWakeUpAlarm(uint32_t timeoutValue)
{
 8004240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004242:	b08d      	sub	sp, #52	; 0x34
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8004248:	242e      	movs	r4, #46	; 0x2e
 800424a:	193b      	adds	r3, r7, r4
 800424c:	2200      	movs	r2, #0
 800424e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8004250:	232c      	movs	r3, #44	; 0x2c
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	2200      	movs	r2, #0
 8004256:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 8004258:	232a      	movs	r3, #42	; 0x2a
 800425a:	18fb      	adds	r3, r7, r3
 800425c:	2200      	movs	r2, #0
 800425e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8004260:	2328      	movs	r3, #40	; 0x28
 8004262:	18fb      	adds	r3, r7, r3
 8004264:	2200      	movs	r2, #0
 8004266:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 8004268:	2526      	movs	r5, #38	; 0x26
 800426a:	197b      	adds	r3, r7, r5
 800426c:	2200      	movs	r2, #0
 800426e:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8004270:	2610      	movs	r6, #16
 8004272:	19ba      	adds	r2, r7, r6
 8004274:	4b9d      	ldr	r3, [pc, #628]	; (80044ec <HW_RTC_StartWakeUpAlarm+0x2ac>)
 8004276:	3304      	adds	r3, #4
 8004278:	cb23      	ldmia	r3!, {r0, r1, r5}
 800427a:	c223      	stmia	r2!, {r0, r1, r5}
 800427c:	cb03      	ldmia	r3!, {r0, r1}
 800427e:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8004280:	230c      	movs	r3, #12
 8004282:	001d      	movs	r5, r3
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	4a99      	ldr	r2, [pc, #612]	; (80044ec <HW_RTC_StartWakeUpAlarm+0x2ac>)
 8004288:	6992      	ldr	r2, [r2, #24]
 800428a:	601a      	str	r2, [r3, #0]

  HW_RTC_StopAlarm();
 800428c:	f7ff ff34 	bl	80040f8 <HW_RTC_StopAlarm>

  /*reverse counter */
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 8004290:	19bb      	adds	r3, r7, r6
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	b29a      	uxth	r2, r3
 8004296:	193b      	adds	r3, r7, r4
 8004298:	4995      	ldr	r1, [pc, #596]	; (80044f0 <HW_RTC_StartWakeUpAlarm+0x2b0>)
 800429a:	1a8a      	subs	r2, r1, r2
 800429c:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	059b      	lsls	r3, r3, #22
 80042a4:	0d9b      	lsrs	r3, r3, #22
 80042a6:	b299      	uxth	r1, r3
 80042a8:	193b      	adds	r3, r7, r4
 80042aa:	193a      	adds	r2, r7, r4
 80042ac:	8812      	ldrh	r2, [r2, #0]
 80042ae:	188a      	adds	r2, r1, r2
 80042b0:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	0a9b      	lsrs	r3, r3, #10
 80042b6:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 80042b8:	002b      	movs	r3, r5
 80042ba:	18fb      	adds	r3, r7, r3
 80042bc:	789a      	ldrb	r2, [r3, #2]
 80042be:	2526      	movs	r5, #38	; 0x26
 80042c0:	197b      	adds	r3, r7, r5
 80042c2:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 80042c4:	e00a      	b.n	80042dc <HW_RTC_StartWakeUpAlarm+0x9c>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a8a      	ldr	r2, [pc, #552]	; (80044f4 <HW_RTC_StartWakeUpAlarm+0x2b4>)
 80042ca:	4694      	mov	ip, r2
 80042cc:	4463      	add	r3, ip
 80042ce:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 80042d0:	2126      	movs	r1, #38	; 0x26
 80042d2:	187b      	adds	r3, r7, r1
 80042d4:	881a      	ldrh	r2, [r3, #0]
 80042d6:	187b      	adds	r3, r7, r1
 80042d8:	3201      	adds	r2, #1
 80042da:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a86      	ldr	r2, [pc, #536]	; (80044f8 <HW_RTC_StartWakeUpAlarm+0x2b8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d8f0      	bhi.n	80042c6 <HW_RTC_StartWakeUpAlarm+0x86>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 80042e4:	2310      	movs	r3, #16
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	781a      	ldrb	r2, [r3, #0]
 80042ea:	2328      	movs	r3, #40	; 0x28
 80042ec:	18fb      	adds	r3, r7, r3
 80042ee:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80042f0:	e00a      	b.n	8004308 <HW_RTC_StartWakeUpAlarm+0xc8>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a81      	ldr	r2, [pc, #516]	; (80044fc <HW_RTC_StartWakeUpAlarm+0x2bc>)
 80042f6:	4694      	mov	ip, r2
 80042f8:	4463      	add	r3, ip
 80042fa:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 80042fc:	2128      	movs	r1, #40	; 0x28
 80042fe:	187b      	adds	r3, r7, r1
 8004300:	881a      	ldrh	r2, [r3, #0]
 8004302:	187b      	adds	r3, r7, r1
 8004304:	3201      	adds	r2, #1
 8004306:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a7d      	ldr	r2, [pc, #500]	; (8004500 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d8f0      	bhi.n	80042f2 <HW_RTC_StartWakeUpAlarm+0xb2>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8004310:	2310      	movs	r3, #16
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	785a      	ldrb	r2, [r3, #1]
 8004316:	232a      	movs	r3, #42	; 0x2a
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800431c:	e008      	b.n	8004330 <HW_RTC_StartWakeUpAlarm+0xf0>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3b3c      	subs	r3, #60	; 0x3c
 8004322:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8004324:	212a      	movs	r1, #42	; 0x2a
 8004326:	187b      	adds	r3, r7, r1
 8004328:	881a      	ldrh	r2, [r3, #0]
 800432a:	187b      	adds	r3, r7, r1
 800432c:	3201      	adds	r2, #1
 800432e:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b3b      	cmp	r3, #59	; 0x3b
 8004334:	d8f3      	bhi.n	800431e <HW_RTC_StartWakeUpAlarm+0xde>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8004336:	2310      	movs	r3, #16
 8004338:	18fb      	adds	r3, r7, r3
 800433a:	789b      	ldrb	r3, [r3, #2]
 800433c:	b299      	uxth	r1, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	b29a      	uxth	r2, r3
 8004342:	232c      	movs	r3, #44	; 0x2c
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	188a      	adds	r2, r1, r2
 8004348:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (PREDIV_S + 1))
 800434a:	e00d      	b.n	8004368 <HW_RTC_StartWakeUpAlarm+0x128>
  {
    rtcAlarmSubSeconds -= (PREDIV_S + 1);
 800434c:	222e      	movs	r2, #46	; 0x2e
 800434e:	18bb      	adds	r3, r7, r2
 8004350:	18ba      	adds	r2, r7, r2
 8004352:	8812      	ldrh	r2, [r2, #0]
 8004354:	496b      	ldr	r1, [pc, #428]	; (8004504 <HW_RTC_StartWakeUpAlarm+0x2c4>)
 8004356:	468c      	mov	ip, r1
 8004358:	4462      	add	r2, ip
 800435a:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 800435c:	212c      	movs	r1, #44	; 0x2c
 800435e:	187b      	adds	r3, r7, r1
 8004360:	881a      	ldrh	r2, [r3, #0]
 8004362:	187b      	adds	r3, r7, r1
 8004364:	3201      	adds	r2, #1
 8004366:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (PREDIV_S + 1))
 8004368:	232e      	movs	r3, #46	; 0x2e
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	4a60      	ldr	r2, [pc, #384]	; (80044f0 <HW_RTC_StartWakeUpAlarm+0x2b0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d8eb      	bhi.n	800434c <HW_RTC_StartWakeUpAlarm+0x10c>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8004374:	e00b      	b.n	800438e <HW_RTC_StartWakeUpAlarm+0x14e>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8004376:	222c      	movs	r2, #44	; 0x2c
 8004378:	18bb      	adds	r3, r7, r2
 800437a:	18ba      	adds	r2, r7, r2
 800437c:	8812      	ldrh	r2, [r2, #0]
 800437e:	3a3c      	subs	r2, #60	; 0x3c
 8004380:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 8004382:	212a      	movs	r1, #42	; 0x2a
 8004384:	187b      	adds	r3, r7, r1
 8004386:	881a      	ldrh	r2, [r3, #0]
 8004388:	187b      	adds	r3, r7, r1
 800438a:	3201      	adds	r2, #1
 800438c:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 800438e:	232c      	movs	r3, #44	; 0x2c
 8004390:	18fb      	adds	r3, r7, r3
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	2b3b      	cmp	r3, #59	; 0x3b
 8004396:	d8ee      	bhi.n	8004376 <HW_RTC_StartWakeUpAlarm+0x136>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8004398:	e00b      	b.n	80043b2 <HW_RTC_StartWakeUpAlarm+0x172>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800439a:	222a      	movs	r2, #42	; 0x2a
 800439c:	18bb      	adds	r3, r7, r2
 800439e:	18ba      	adds	r2, r7, r2
 80043a0:	8812      	ldrh	r2, [r2, #0]
 80043a2:	3a3c      	subs	r2, #60	; 0x3c
 80043a4:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 80043a6:	2128      	movs	r1, #40	; 0x28
 80043a8:	187b      	adds	r3, r7, r1
 80043aa:	881a      	ldrh	r2, [r3, #0]
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	3201      	adds	r2, #1
 80043b0:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80043b2:	232a      	movs	r3, #42	; 0x2a
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	2b3b      	cmp	r3, #59	; 0x3b
 80043ba:	d8ee      	bhi.n	800439a <HW_RTC_StartWakeUpAlarm+0x15a>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80043bc:	e00b      	b.n	80043d6 <HW_RTC_StartWakeUpAlarm+0x196>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 80043be:	2228      	movs	r2, #40	; 0x28
 80043c0:	18bb      	adds	r3, r7, r2
 80043c2:	18ba      	adds	r2, r7, r2
 80043c4:	8812      	ldrh	r2, [r2, #0]
 80043c6:	3a18      	subs	r2, #24
 80043c8:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 80043ca:	2126      	movs	r1, #38	; 0x26
 80043cc:	187b      	adds	r3, r7, r1
 80043ce:	881a      	ldrh	r2, [r3, #0]
 80043d0:	187b      	adds	r3, r7, r1
 80043d2:	3201      	adds	r2, #1
 80043d4:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80043d6:	2328      	movs	r3, #40	; 0x28
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	2b17      	cmp	r3, #23
 80043de:	d8ee      	bhi.n	80043be <HW_RTC_StartWakeUpAlarm+0x17e>
  }

  if (RTC_DateStruct.Year % 4 == 0)
 80043e0:	230c      	movs	r3, #12
 80043e2:	18fb      	adds	r3, r7, r3
 80043e4:	78db      	ldrb	r3, [r3, #3]
 80043e6:	2203      	movs	r2, #3
 80043e8:	4013      	ands	r3, r2
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d11c      	bne.n	800442a <HW_RTC_StartWakeUpAlarm+0x1ea>
  {
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 80043f0:	230c      	movs	r3, #12
 80043f2:	18fb      	adds	r3, r7, r3
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	4a43      	ldr	r2, [pc, #268]	; (8004508 <HW_RTC_StartWakeUpAlarm+0x2c8>)
 80043fa:	5cd3      	ldrb	r3, [r2, r3]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2226      	movs	r2, #38	; 0x26
 8004400:	18ba      	adds	r2, r7, r2
 8004402:	8812      	ldrh	r2, [r2, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d92c      	bls.n	8004462 <HW_RTC_StartWakeUpAlarm+0x222>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8004408:	2426      	movs	r4, #38	; 0x26
 800440a:	193b      	adds	r3, r7, r4
 800440c:	8818      	ldrh	r0, [r3, #0]
 800440e:	230c      	movs	r3, #12
 8004410:	18fb      	adds	r3, r7, r3
 8004412:	785b      	ldrb	r3, [r3, #1]
 8004414:	3b01      	subs	r3, #1
 8004416:	4a3c      	ldr	r2, [pc, #240]	; (8004508 <HW_RTC_StartWakeUpAlarm+0x2c8>)
 8004418:	5cd3      	ldrb	r3, [r2, r3]
 800441a:	0019      	movs	r1, r3
 800441c:	f7fb ffe4 	bl	80003e8 <__aeabi_idivmod>
 8004420:	000b      	movs	r3, r1
 8004422:	001a      	movs	r2, r3
 8004424:	193b      	adds	r3, r7, r4
 8004426:	801a      	strh	r2, [r3, #0]
 8004428:	e01b      	b.n	8004462 <HW_RTC_StartWakeUpAlarm+0x222>
    }
  }
  else
  {
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800442a:	230c      	movs	r3, #12
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	785b      	ldrb	r3, [r3, #1]
 8004430:	3b01      	subs	r3, #1
 8004432:	4a36      	ldr	r2, [pc, #216]	; (800450c <HW_RTC_StartWakeUpAlarm+0x2cc>)
 8004434:	5cd3      	ldrb	r3, [r2, r3]
 8004436:	b29b      	uxth	r3, r3
 8004438:	2226      	movs	r2, #38	; 0x26
 800443a:	18ba      	adds	r2, r7, r2
 800443c:	8812      	ldrh	r2, [r2, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d90f      	bls.n	8004462 <HW_RTC_StartWakeUpAlarm+0x222>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8004442:	2426      	movs	r4, #38	; 0x26
 8004444:	193b      	adds	r3, r7, r4
 8004446:	8818      	ldrh	r0, [r3, #0]
 8004448:	230c      	movs	r3, #12
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	785b      	ldrb	r3, [r3, #1]
 800444e:	3b01      	subs	r3, #1
 8004450:	4a2e      	ldr	r2, [pc, #184]	; (800450c <HW_RTC_StartWakeUpAlarm+0x2cc>)
 8004452:	5cd3      	ldrb	r3, [r2, r3]
 8004454:	0019      	movs	r1, r3
 8004456:	f7fb ffc7 	bl	80003e8 <__aeabi_idivmod>
 800445a:	000b      	movs	r3, r1
 800445c:	001a      	movs	r2, r3
 800445e:	193b      	adds	r3, r7, r4
 8004460:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 8004462:	232e      	movs	r3, #46	; 0x2e
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	4a21      	ldr	r2, [pc, #132]	; (80044f0 <HW_RTC_StartWakeUpAlarm+0x2b0>)
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	001a      	movs	r2, r3
 800446e:	4b28      	ldr	r3, [pc, #160]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 8004470:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 8004472:	4b27      	ldr	r3, [pc, #156]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 8004474:	22a0      	movs	r2, #160	; 0xa0
 8004476:	0512      	lsls	r2, r2, #20
 8004478:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800447a:	232c      	movs	r3, #44	; 0x2c
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	b2da      	uxtb	r2, r3
 8004482:	4b23      	ldr	r3, [pc, #140]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 8004484:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8004486:	232a      	movs	r3, #42	; 0x2a
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b2da      	uxtb	r2, r3
 800448e:	4b20      	ldr	r3, [pc, #128]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 8004490:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8004492:	2328      	movs	r3, #40	; 0x28
 8004494:	18fb      	adds	r3, r7, r3
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 800449c:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 800449e:	2326      	movs	r3, #38	; 0x26
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b2d9      	uxtb	r1, r3
 80044a6:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80044a8:	2220      	movs	r2, #32
 80044aa:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80044ac:	2310      	movs	r3, #16
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	78da      	ldrb	r2, [r3, #3]
 80044b2:	4b17      	ldr	r3, [pc, #92]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80044b4:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80044b6:	4b16      	ldr	r3, [pc, #88]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80044bc:	4b14      	ldr	r3, [pc, #80]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80044be:	2200      	movs	r2, #0
 80044c0:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80044c2:	4b13      	ldr	r3, [pc, #76]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80044c4:	2280      	movs	r2, #128	; 0x80
 80044c6:	0052      	lsls	r2, r2, #1
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80044ca:	4b11      	ldr	r3, [pc, #68]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80044d0:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80044d6:	490e      	ldr	r1, [pc, #56]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80044d8:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <HW_RTC_StartWakeUpAlarm+0x2d4>)
 80044da:	2200      	movs	r2, #0
 80044dc:	0018      	movs	r0, r3
 80044de:	f007 fe0f 	bl	800c100 <HAL_RTC_SetAlarm_IT>
}
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b00d      	add	sp, #52	; 0x34
 80044e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	20000204 	.word	0x20000204
 80044f0:	000003ff 	.word	0x000003ff
 80044f4:	fffeae80 	.word	0xfffeae80
 80044f8:	0001517f 	.word	0x0001517f
 80044fc:	fffff1f0 	.word	0xfffff1f0
 8004500:	00000e0f 	.word	0x00000e0f
 8004504:	fffffc00 	.word	0xfffffc00
 8004508:	0801cad0 	.word	0x0801cad0
 800450c:	0801cac4 	.word	0x0801cac4
 8004510:	200001dc 	.word	0x200001dc
 8004514:	200001b8 	.word	0x200001b8

08004518 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8004518:	b5b0      	push	{r4, r5, r7, lr}
 800451a:	b08c      	sub	sp, #48	; 0x30
 800451c:	af00      	add	r7, sp, #0
 800451e:	6178      	str	r0, [r7, #20]
 8004520:	6139      	str	r1, [r7, #16]
  uint64_t calendarValue = 0;
 8004522:	2200      	movs	r2, #0
 8004524:	2300      	movs	r3, #0
 8004526:	62ba      	str	r2, [r7, #40]	; 0x28
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800452a:	6939      	ldr	r1, [r7, #16]
 800452c:	4b4b      	ldr	r3, [pc, #300]	; (800465c <HW_RTC_GetCalendarValue+0x144>)
 800452e:	2200      	movs	r2, #0
 8004530:	0018      	movs	r0, r3
 8004532:	f007 fc8d 	bl	800be50 <HAL_RTC_GetTime>

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
 8004536:	4b4a      	ldr	r3, [pc, #296]	; (8004660 <HW_RTC_GetCalendarValue+0x148>)
 8004538:	0018      	movs	r0, r3
 800453a:	f7ff fcc9 	bl	8003ed0 <LL_RTC_TIME_GetSubSecond>
 800453e:	0003      	movs	r3, r0
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 8004542:	6979      	ldr	r1, [r7, #20]
 8004544:	4b45      	ldr	r3, [pc, #276]	; (800465c <HW_RTC_GetCalendarValue+0x144>)
 8004546:	2200      	movs	r2, #0
 8004548:	0018      	movs	r0, r3
 800454a:	f007 fd8b 	bl	800c064 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800454e:	6939      	ldr	r1, [r7, #16]
 8004550:	4b42      	ldr	r3, [pc, #264]	; (800465c <HW_RTC_GetCalendarValue+0x144>)
 8004552:	2200      	movs	r2, #0
 8004554:	0018      	movs	r0, r3
 8004556:	f007 fc7b 	bl	800be50 <HAL_RTC_GetTime>

  }
  while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 800455a:	4b41      	ldr	r3, [pc, #260]	; (8004660 <HW_RTC_GetCalendarValue+0x148>)
 800455c:	0018      	movs	r0, r3
 800455e:	f7ff fcb7 	bl	8003ed0 <LL_RTC_TIME_GetSubSecond>
 8004562:	0002      	movs	r2, r0
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	4293      	cmp	r3, r2
 8004568:	d1e5      	bne.n	8004536 <HW_RTC_GetCalendarValue+0x1e>

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	78db      	ldrb	r3, [r3, #3]
 800456e:	001a      	movs	r2, r3
 8004570:	4b3c      	ldr	r3, [pc, #240]	; (8004664 <HW_RTC_GetCalendarValue+0x14c>)
 8004572:	4353      	muls	r3, r2
 8004574:	3303      	adds	r3, #3
 8004576:	089b      	lsrs	r3, r3, #2
 8004578:	623b      	str	r3, [r7, #32]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	78db      	ldrb	r3, [r3, #3]
 800457e:	2203      	movs	r2, #3
 8004580:	4013      	ands	r3, r2
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HW_RTC_GetCalendarValue+0x74>
 8004588:	4b37      	ldr	r3, [pc, #220]	; (8004668 <HW_RTC_GetCalendarValue+0x150>)
 800458a:	e000      	b.n	800458e <HW_RTC_GetCalendarValue+0x76>
 800458c:	4b37      	ldr	r3, [pc, #220]	; (800466c <HW_RTC_GetCalendarValue+0x154>)
 800458e:	61fb      	str	r3, [r7, #28]

  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	785b      	ldrb	r3, [r3, #1]
 8004594:	1e5a      	subs	r2, r3, #1
 8004596:	0013      	movs	r3, r2
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	189b      	adds	r3, r3, r2
 80045a0:	3301      	adds	r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	da00      	bge.n	80045a8 <HW_RTC_GetCalendarValue+0x90>
 80045a6:	3301      	adds	r3, #1
 80045a8:	105b      	asrs	r3, r3, #1
 80045aa:	0019      	movs	r1, r3
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	785b      	ldrb	r3, [r3, #1]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	40da      	lsrs	r2, r3
 80045b8:	0013      	movs	r3, r2
 80045ba:	2203      	movs	r2, #3
 80045bc:	4013      	ands	r3, r2
 80045be:	1acb      	subs	r3, r1, r3
 80045c0:	6a3a      	ldr	r2, [r7, #32]
 80045c2:	18d3      	adds	r3, r2, r3
 80045c4:	623b      	str	r3, [r7, #32]

  seconds += (RTC_DateStruct->Date - 1);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	789b      	ldrb	r3, [r3, #2]
 80045ca:	001a      	movs	r2, r3
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	18d3      	adds	r3, r2, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	623b      	str	r3, [r7, #32]

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;
 80045d4:	6a3a      	ldr	r2, [r7, #32]
 80045d6:	0013      	movs	r3, r2
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	189b      	adds	r3, r3, r2
 80045dc:	011a      	lsls	r2, r3, #4
 80045de:	1ad2      	subs	r2, r2, r3
 80045e0:	0113      	lsls	r3, r2, #4
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	01db      	lsls	r3, r3, #7
 80045e6:	623b      	str	r3, [r7, #32]

  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	789b      	ldrb	r3, [r3, #2]
 80045ec:	0019      	movs	r1, r3
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	001a      	movs	r2, r3
 80045f4:	0013      	movs	r3, r2
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	011a      	lsls	r2, r3, #4
 80045fc:	1ad2      	subs	r2, r2, r3
 80045fe:	0113      	lsls	r3, r2, #4
 8004600:	001a      	movs	r2, r3
 8004602:	0010      	movs	r0, r2
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	785b      	ldrb	r3, [r3, #1]
 8004608:	001a      	movs	r2, r3
 800460a:	0013      	movs	r3, r2
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	18c3      	adds	r3, r0, r3
 8004614:	18cb      	adds	r3, r1, r3
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 8004616:	6a3a      	ldr	r2, [r7, #32]
 8004618:	18d3      	adds	r3, r2, r3
 800461a:	623b      	str	r3, [r7, #32]



  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	0011      	movs	r1, r2
 800462a:	0d8d      	lsrs	r5, r1, #22
 800462c:	0013      	movs	r3, r2
 800462e:	029c      	lsls	r4, r3, #10
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	4a0e      	ldr	r2, [pc, #56]	; (8004670 <HW_RTC_GetCalendarValue+0x158>)
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	1912      	adds	r2, r2, r4
 8004644:	416b      	adcs	r3, r5
 8004646:	001c      	movs	r4, r3
 8004648:	0013      	movs	r3, r2
 800464a:	62bb      	str	r3, [r7, #40]	; 0x28
 800464c:	62fc      	str	r4, [r7, #44]	; 0x2c

  return (calendarValue);
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004650:	6afc      	ldr	r4, [r7, #44]	; 0x2c
}
 8004652:	0018      	movs	r0, r3
 8004654:	0021      	movs	r1, r4
 8004656:	46bd      	mov	sp, r7
 8004658:	b00c      	add	sp, #48	; 0x30
 800465a:	bdb0      	pop	{r4, r5, r7, pc}
 800465c:	200001b8 	.word	0x200001b8
 8004660:	40002800 	.word	0x40002800
 8004664:	000005b5 	.word	0x000005b5
 8004668:	00445550 	.word	0x00445550
 800466c:	0099aaa0 	.word	0x0099aaa0
 8004670:	000003ff 	.word	0x000003ff

08004674 <HW_RTC_GetCalendarTime>:
 * \param [IN]   pointer to ms
 *
 * \return uint32_t seconds
 */
uint32_t HW_RTC_GetCalendarTime(uint16_t *mSeconds)
{
 8004674:	b5b0      	push	{r4, r5, r7, lr}
 8004676:	b08c      	sub	sp, #48	; 0x30
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800467c:	230c      	movs	r3, #12
 800467e:	18fa      	adds	r2, r7, r3
 8004680:	2308      	movs	r3, #8
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	0011      	movs	r1, r2
 8004686:	0018      	movs	r0, r3
 8004688:	f7ff ff46 	bl	8004518 <HW_RTC_GetCalendarValue>
 800468c:	0002      	movs	r2, r0
 800468e:	000b      	movs	r3, r1
 8004690:	62ba      	str	r2, [r7, #40]	; 0x28
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	059b      	lsls	r3, r3, #22
 8004698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800469a:	0a94      	lsrs	r4, r2, #10
 800469c:	431c      	orrs	r4, r3
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	0a9d      	lsrs	r5, r3, #10
 80046a2:	0023      	movs	r3, r4
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24

  ticks = (uint32_t) calendarValue & PREDIV_S;
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	059b      	lsls	r3, r3, #22
 80046aa:	0d9b      	lsrs	r3, r3, #22
 80046ac:	623b      	str	r3, [r7, #32]

  *mSeconds = HW_RTC_Tick2ms(ticks);
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7ff fca7 	bl	8004004 <HW_RTC_Tick2ms>
 80046b6:	0003      	movs	r3, r0
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	801a      	strh	r2, [r3, #0]

  return seconds;
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046c0:	0018      	movs	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b00c      	add	sp, #48	; 0x30
 80046c6:	bdb0      	pop	{r4, r5, r7, pc}

080046c8 <HW_RTC_BKUPWrite>:

void HW_RTC_BKUPWrite(uint32_t Data0, uint32_t Data1)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <HW_RTC_BKUPWrite+0x2c>)
 80046d6:	2100      	movs	r1, #0
 80046d8:	0018      	movs	r0, r3
 80046da:	f007 ff94 	bl	800c606 <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <HW_RTC_BKUPWrite+0x2c>)
 80046e2:	2101      	movs	r1, #1
 80046e4:	0018      	movs	r0, r3
 80046e6:	f007 ff8e 	bl	800c606 <HAL_RTCEx_BKUPWrite>
}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b002      	add	sp, #8
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	200001b8 	.word	0x200001b8

080046f8 <HW_RTC_BKUPRead>:

void HW_RTC_BKUPRead(uint32_t *Data0, uint32_t *Data1)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <HW_RTC_BKUPRead+0x34>)
 8004704:	2100      	movs	r1, #0
 8004706:	0018      	movs	r0, r3
 8004708:	f007 ff93 	bl	800c632 <HAL_RTCEx_BKUPRead>
 800470c:	0002      	movs	r2, r0
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	601a      	str	r2, [r3, #0]
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <HW_RTC_BKUPRead+0x34>)
 8004714:	2101      	movs	r1, #1
 8004716:	0018      	movs	r0, r3
 8004718:	f007 ff8b 	bl	800c632 <HAL_RTCEx_BKUPRead>
 800471c:	0002      	movs	r2, r0
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	601a      	str	r2, [r3, #0]
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	46bd      	mov	sp, r7
 8004726:	b002      	add	sp, #8
 8004728:	bd80      	pop	{r7, pc}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	200001b8 	.word	0x200001b8

08004730 <HW_SPI_Init>:
 * @brief Initializes the SPI object and MCU peripheral
 *
 * @param [IN] none
 */
void HW_SPI_Init(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0

  /*##-1- Configure the SPI peripheral */
  /* Set the SPI parameters */

  hspi.Instance = SPI1;
 8004734:	4b1d      	ldr	r3, [pc, #116]	; (80047ac <HW_SPI_Init+0x7c>)
 8004736:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <HW_SPI_Init+0x80>)
 8004738:	601a      	str	r2, [r3, #0]

  hspi.Init.BaudRatePrescaler = SpiFrequency(10000000);
 800473a:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <HW_SPI_Init+0x84>)
 800473c:	0018      	movs	r0, r3
 800473e:	f000 f89b 	bl	8004878 <SpiFrequency>
 8004742:	0002      	movs	r2, r0
 8004744:	4b19      	ldr	r3, [pc, #100]	; (80047ac <HW_SPI_Init+0x7c>)
 8004746:	61da      	str	r2, [r3, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 8004748:	4b18      	ldr	r3, [pc, #96]	; (80047ac <HW_SPI_Init+0x7c>)
 800474a:	2200      	movs	r2, #0
 800474c:	609a      	str	r2, [r3, #8]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800474e:	4b17      	ldr	r3, [pc, #92]	; (80047ac <HW_SPI_Init+0x7c>)
 8004750:	2282      	movs	r2, #130	; 0x82
 8004752:	0052      	lsls	r2, r2, #1
 8004754:	605a      	str	r2, [r3, #4]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8004756:	4b15      	ldr	r3, [pc, #84]	; (80047ac <HW_SPI_Init+0x7c>)
 8004758:	2200      	movs	r2, #0
 800475a:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800475c:	4b13      	ldr	r3, [pc, #76]	; (80047ac <HW_SPI_Init+0x7c>)
 800475e:	2200      	movs	r2, #0
 8004760:	615a      	str	r2, [r3, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 8004762:	4b12      	ldr	r3, [pc, #72]	; (80047ac <HW_SPI_Init+0x7c>)
 8004764:	2200      	movs	r2, #0
 8004766:	60da      	str	r2, [r3, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004768:	4b10      	ldr	r3, [pc, #64]	; (80047ac <HW_SPI_Init+0x7c>)
 800476a:	2200      	movs	r2, #0
 800476c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800476e:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <HW_SPI_Init+0x7c>)
 8004770:	2200      	movs	r2, #0
 8004772:	621a      	str	r2, [r3, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 8004774:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <HW_SPI_Init+0x7c>)
 8004776:	2280      	movs	r2, #128	; 0x80
 8004778:	0092      	lsls	r2, r2, #2
 800477a:	619a      	str	r2, [r3, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <HW_SPI_Init+0x7c>)
 800477e:	2200      	movs	r2, #0
 8004780:	625a      	str	r2, [r3, #36]	; 0x24


  SPI_CLK_ENABLE();
 8004782:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <HW_SPI_Init+0x88>)
 8004784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004786:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <HW_SPI_Init+0x88>)
 8004788:	2180      	movs	r1, #128	; 0x80
 800478a:	0149      	lsls	r1, r1, #5
 800478c:	430a      	orrs	r2, r1
 800478e:	635a      	str	r2, [r3, #52]	; 0x34


  if (HAL_SPI_Init(&hspi) != HAL_OK)
 8004790:	4b06      	ldr	r3, [pc, #24]	; (80047ac <HW_SPI_Init+0x7c>)
 8004792:	0018      	movs	r0, r3
 8004794:	f007 ff96 	bl	800c6c4 <HAL_SPI_Init>
 8004798:	1e03      	subs	r3, r0, #0
 800479a:	d001      	beq.n	80047a0 <HW_SPI_Init+0x70>
  {
    /* Initialization Error */
    Error_Handler();
 800479c:	f7ff fa5e 	bl	8003c5c <Error_Handler>
  }

  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoInit();
 80047a0:	f000 f80c 	bl	80047bc <HW_SPI_IoInit>
}
 80047a4:	46c0      	nop			; (mov r8, r8)
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	20000220 	.word	0x20000220
 80047b0:	40013000 	.word	0x40013000
 80047b4:	00989680 	.word	0x00989680
 80047b8:	40021000 	.word	0x40021000

080047bc <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit();
}

void HW_SPI_IoInit(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	0018      	movs	r0, r3
 80047c6:	2314      	movs	r3, #20
 80047c8:	001a      	movs	r2, r3
 80047ca:	2100      	movs	r1, #0
 80047cc:	f016 ffb4 	bl	801b738 <memset>


  initStruct.Mode = GPIO_MODE_AF_PP;
 80047d0:	1d3b      	adds	r3, r7, #4
 80047d2:	2202      	movs	r2, #2
 80047d4:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL  ;
 80047d6:	1d3b      	adds	r3, r7, #4
 80047d8:	2200      	movs	r2, #0
 80047da:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80047dc:	1d3b      	adds	r3, r7, #4
 80047de:	2203      	movs	r2, #3
 80047e0:	60da      	str	r2, [r3, #12]
  initStruct.Alternate = SPI1_AF ;
 80047e2:	1d3b      	adds	r3, r7, #4
 80047e4:	2200      	movs	r2, #0
 80047e6:	611a      	str	r2, [r3, #16]

  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80047e8:	1d3b      	adds	r3, r7, #4
 80047ea:	4816      	ldr	r0, [pc, #88]	; (8004844 <HW_SPI_IoInit+0x88>)
 80047ec:	001a      	movs	r2, r3
 80047ee:	2108      	movs	r1, #8
 80047f0:	f7ff fa3e 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 80047f4:	1d3a      	adds	r2, r7, #4
 80047f6:	23a0      	movs	r3, #160	; 0xa0
 80047f8:	05db      	lsls	r3, r3, #23
 80047fa:	2140      	movs	r1, #64	; 0x40
 80047fc:	0018      	movs	r0, r3
 80047fe:	f7ff fa37 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 8004802:	1d3a      	adds	r2, r7, #4
 8004804:	23a0      	movs	r3, #160	; 0xa0
 8004806:	05db      	lsls	r3, r3, #23
 8004808:	2180      	movs	r1, #128	; 0x80
 800480a:	0018      	movs	r0, r3
 800480c:	f7ff fa30 	bl	8003c70 <HW_GPIO_Init>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004810:	1d3b      	adds	r3, r7, #4
 8004812:	2201      	movs	r2, #1
 8004814:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8004816:	1d3b      	adds	r3, r7, #4
 8004818:	2200      	movs	r2, #0
 800481a:	609a      	str	r2, [r3, #8]

  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 800481c:	1d3a      	adds	r2, r7, #4
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	0219      	lsls	r1, r3, #8
 8004822:	23a0      	movs	r3, #160	; 0xa0
 8004824:	05db      	lsls	r3, r3, #23
 8004826:	0018      	movs	r0, r3
 8004828:	f7ff fa22 	bl	8003c70 <HW_GPIO_Init>

  HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	0219      	lsls	r1, r3, #8
 8004830:	23a0      	movs	r3, #160	; 0xa0
 8004832:	05db      	lsls	r3, r3, #23
 8004834:	2201      	movs	r2, #1
 8004836:	0018      	movs	r0, r3
 8004838:	f7ff faec 	bl	8003e14 <HW_GPIO_Write>
}
 800483c:	46c0      	nop			; (mov r8, r8)
 800483e:	46bd      	mov	sp, r7
 8004840:	b006      	add	sp, #24
 8004842:	bd80      	pop	{r7, pc}
 8004844:	50000400 	.word	0x50000400

08004848 <HW_SPI_InOut>:
 *
 * @param [IN] outData Byte to be sent
 * @retval inData      Received byte.
 */
uint16_t HW_SPI_InOut(uint16_t txData)
{
 8004848:	b590      	push	{r4, r7, lr}
 800484a:	b087      	sub	sp, #28
 800484c:	af02      	add	r7, sp, #8
 800484e:	0002      	movs	r2, r0
 8004850:	1dbb      	adds	r3, r7, #6
 8004852:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 8004854:	240e      	movs	r4, #14
 8004856:	193a      	adds	r2, r7, r4
 8004858:	1db9      	adds	r1, r7, #6
 800485a:	4806      	ldr	r0, [pc, #24]	; (8004874 <HW_SPI_InOut+0x2c>)
 800485c:	2301      	movs	r3, #1
 800485e:	425b      	negs	r3, r3
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	2301      	movs	r3, #1
 8004864:	f007 ffa0 	bl	800c7a8 <HAL_SPI_TransmitReceive>

  return rxData;
 8004868:	193b      	adds	r3, r7, r4
 800486a:	881b      	ldrh	r3, [r3, #0]
}
 800486c:	0018      	movs	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	b005      	add	sp, #20
 8004872:	bd90      	pop	{r4, r7, pc}
 8004874:	20000220 	.word	0x20000220

08004878 <SpiFrequency>:

/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency(uint32_t hz)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t divisor = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
  uint32_t SysClkTmp = SystemCoreClock;
 8004884:	4b17      	ldr	r3, [pc, #92]	; (80048e4 <SpiFrequency+0x6c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	613b      	str	r3, [r7, #16]
  uint32_t baudRate;

  while (SysClkTmp > hz)
 800488a:	e008      	b.n	800489e <SpiFrequency+0x26>
  {
    divisor++;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	3301      	adds	r3, #1
 8004890:	617b      	str	r3, [r7, #20]
    SysClkTmp = (SysClkTmp >> 1);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	613b      	str	r3, [r7, #16]

    if (divisor >= 7)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2b06      	cmp	r3, #6
 800489c:	d804      	bhi.n	80048a8 <SpiFrequency+0x30>
  while (SysClkTmp > hz)
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d8f2      	bhi.n	800488c <SpiFrequency+0x14>
 80048a6:	e000      	b.n	80048aa <SpiFrequency+0x32>
    {
      break;
 80048a8:	46c0      	nop			; (mov r8, r8)
    }
  }

  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2204      	movs	r2, #4
 80048ae:	4013      	ands	r3, r2
 80048b0:	d101      	bne.n	80048b6 <SpiFrequency+0x3e>
 80048b2:	2200      	movs	r2, #0
 80048b4:	e000      	b.n	80048b8 <SpiFrequency+0x40>
 80048b6:	2220      	movs	r2, #32
             (((divisor & 0x2) == 0) ? 0x0 : SPI_CR1_BR_1) |
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2102      	movs	r1, #2
 80048bc:	400b      	ands	r3, r1
 80048be:	d101      	bne.n	80048c4 <SpiFrequency+0x4c>
 80048c0:	2300      	movs	r3, #0
 80048c2:	e000      	b.n	80048c6 <SpiFrequency+0x4e>
 80048c4:	2310      	movs	r3, #16
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 80048c6:	431a      	orrs	r2, r3
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2101      	movs	r1, #1
 80048cc:	400b      	ands	r3, r1
 80048ce:	d101      	bne.n	80048d4 <SpiFrequency+0x5c>
 80048d0:	2300      	movs	r3, #0
 80048d2:	e000      	b.n	80048d6 <SpiFrequency+0x5e>
 80048d4:	2308      	movs	r3, #8
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  return baudRate;
 80048da:	68fb      	ldr	r3, [r7, #12]
}
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	b006      	add	sp, #24
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000030 	.word	0x20000030

080048e8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;

/* i2c init function */

void MX_I2C1_Init(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c1.Instance = I2C1;
 80048ec:	4b1b      	ldr	r3, [pc, #108]	; (800495c <MX_I2C1_Init+0x74>)
 80048ee:	4a1c      	ldr	r2, [pc, #112]	; (8004960 <MX_I2C1_Init+0x78>)
 80048f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80048f2:	4b1a      	ldr	r3, [pc, #104]	; (800495c <MX_I2C1_Init+0x74>)
 80048f4:	4a1b      	ldr	r2, [pc, #108]	; (8004964 <MX_I2C1_Init+0x7c>)
 80048f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80048f8:	4b18      	ldr	r3, [pc, #96]	; (800495c <MX_I2C1_Init+0x74>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80048fe:	4b17      	ldr	r3, [pc, #92]	; (800495c <MX_I2C1_Init+0x74>)
 8004900:	2201      	movs	r2, #1
 8004902:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004904:	4b15      	ldr	r3, [pc, #84]	; (800495c <MX_I2C1_Init+0x74>)
 8004906:	2200      	movs	r2, #0
 8004908:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800490a:	4b14      	ldr	r3, [pc, #80]	; (800495c <MX_I2C1_Init+0x74>)
 800490c:	2200      	movs	r2, #0
 800490e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004910:	4b12      	ldr	r3, [pc, #72]	; (800495c <MX_I2C1_Init+0x74>)
 8004912:	2200      	movs	r2, #0
 8004914:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004916:	4b11      	ldr	r3, [pc, #68]	; (800495c <MX_I2C1_Init+0x74>)
 8004918:	2200      	movs	r2, #0
 800491a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800491c:	4b0f      	ldr	r3, [pc, #60]	; (800495c <MX_I2C1_Init+0x74>)
 800491e:	2200      	movs	r2, #0
 8004920:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004922:	4b0e      	ldr	r3, [pc, #56]	; (800495c <MX_I2C1_Init+0x74>)
 8004924:	0018      	movs	r0, r3
 8004926:	f005 fbc9 	bl	800a0bc <HAL_I2C_Init>
 800492a:	1e03      	subs	r3, r0, #0
 800492c:	d001      	beq.n	8004932 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800492e:	f7ff f995 	bl	8003c5c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <MX_I2C1_Init+0x74>)
 8004934:	2100      	movs	r1, #0
 8004936:	0018      	movs	r0, r3
 8004938:	f006 f8f6 	bl	800ab28 <HAL_I2CEx_ConfigAnalogFilter>
 800493c:	1e03      	subs	r3, r0, #0
 800493e:	d001      	beq.n	8004944 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004940:	f7ff f98c 	bl	8003c5c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <MX_I2C1_Init+0x74>)
 8004946:	2100      	movs	r1, #0
 8004948:	0018      	movs	r0, r3
 800494a:	f006 f939 	bl	800abc0 <HAL_I2CEx_ConfigDigitalFilter>
 800494e:	1e03      	subs	r3, r0, #0
 8004950:	d001      	beq.n	8004956 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004952:	f7ff f983 	bl	8003c5c <Error_Handler>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */


}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	20001428 	.word	0x20001428
 8004960:	40005400 	.word	0x40005400
 8004964:	00707cbb 	.word	0x00707cbb

08004968 <HAL_I2C_MspInit>:
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004970:	230c      	movs	r3, #12
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	0018      	movs	r0, r3
 8004976:	2314      	movs	r3, #20
 8004978:	001a      	movs	r2, r3
 800497a:	2100      	movs	r1, #0
 800497c:	f016 fedc 	bl	801b738 <memset>
  if(hi2c->Instance==I2C1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <HAL_I2C_MspInit+0x80>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d129      	bne.n	80049de <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800498a:	4b18      	ldr	r3, [pc, #96]	; (80049ec <HAL_I2C_MspInit+0x84>)
 800498c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498e:	4b17      	ldr	r3, [pc, #92]	; (80049ec <HAL_I2C_MspInit+0x84>)
 8004990:	2102      	movs	r1, #2
 8004992:	430a      	orrs	r2, r1
 8004994:	62da      	str	r2, [r3, #44]	; 0x2c
 8004996:	4b15      	ldr	r3, [pc, #84]	; (80049ec <HAL_I2C_MspInit+0x84>)
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	2202      	movs	r2, #2
 800499c:	4013      	ands	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80049a2:	210c      	movs	r1, #12
 80049a4:	187b      	adds	r3, r7, r1
 80049a6:	22c0      	movs	r2, #192	; 0xc0
 80049a8:	0092      	lsls	r2, r2, #2
 80049aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049ac:	187b      	adds	r3, r7, r1
 80049ae:	2212      	movs	r2, #18
 80049b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049b2:	187b      	adds	r3, r7, r1
 80049b4:	2201      	movs	r2, #1
 80049b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049b8:	187b      	adds	r3, r7, r1
 80049ba:	2203      	movs	r2, #3
 80049bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80049be:	187b      	adds	r3, r7, r1
 80049c0:	2204      	movs	r2, #4
 80049c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049c4:	187b      	adds	r3, r7, r1
 80049c6:	4a0a      	ldr	r2, [pc, #40]	; (80049f0 <HAL_I2C_MspInit+0x88>)
 80049c8:	0019      	movs	r1, r3
 80049ca:	0010      	movs	r0, r2
 80049cc:	f005 f9be 	bl	8009d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_I2C_MspInit+0x84>)
 80049d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <HAL_I2C_MspInit+0x84>)
 80049d6:	2180      	movs	r1, #128	; 0x80
 80049d8:	0389      	lsls	r1, r1, #14
 80049da:	430a      	orrs	r2, r1
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b008      	add	sp, #32
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	40005400 	.word	0x40005400
 80049ec:	40021000 	.word	0x40021000
 80049f0:	50000400 	.word	0x50000400

080049f4 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af02      	add	r7, sp, #8
 // char id[5];
  /* STM32 HAL library initialization*/
  HAL_Init();
 80049fa:	f004 f945 	bl	8008c88 <HAL_Init>

  /* Configure the system clock*/
  SystemClock_Config();
 80049fe:	f000 fd2d 	bl	800545c <SystemClock_Config>

  /* Configure the debug mode*/
  DBG_Init();
 8004a02:	f7ff f8d1 	bl	8003ba8 <DBG_Init>

  /* Configure the hardware*/
  HW_Init();
 8004a06:	f000 fc2b 	bl	8005260 <HW_Init>

  /* USER CODE BEGIN 1 */
  SensorINT();
 8004a0a:	f000 fb05 	bl	8005018 <SensorINT>
  /* USER CODE END 1 */
  /*Disbale Stand-by mode*/
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);
 8004a0e:	2101      	movs	r1, #1
 8004a10:	2001      	movs	r0, #1
 8004a12:	f015 fe75 	bl	801a700 <LPM_SetOffMode>

  PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__APP_VERSION >> 24), (uint8_t)(__APP_VERSION >> 16), (uint8_t)(__APP_VERSION >> 8), (uint8_t)__APP_VERSION);
 8004a16:	481d      	ldr	r0, [pc, #116]	; (8004a8c <main+0x98>)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	2203      	movs	r2, #3
 8004a20:	2101      	movs	r1, #1
 8004a22:	f016 fcfd 	bl	801b420 <TraceSend>
  PRINTF("MAC_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__LORA_MAC_VERSION >> 24), (uint8_t)(__LORA_MAC_VERSION >> 16), (uint8_t)(__LORA_MAC_VERSION >> 8), (uint8_t)__LORA_MAC_VERSION);
 8004a26:	481a      	ldr	r0, [pc, #104]	; (8004a90 <main+0x9c>)
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	2204      	movs	r2, #4
 8004a30:	2104      	movs	r1, #4
 8004a32:	f016 fcf5 	bl	801b420 <TraceSend>

  /* Configure the Lora Stack*/
  LORA_Init(&LoRaMainCallbacks, &LoRaParamInit);
 8004a36:	4a17      	ldr	r2, [pc, #92]	; (8004a94 <main+0xa0>)
 8004a38:	4b17      	ldr	r3, [pc, #92]	; (8004a98 <main+0xa4>)
 8004a3a:	0011      	movs	r1, r2
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f015 fb01 	bl	801a044 <LORA_Init>

  LORA_Join();
 8004a42:	f015 fca7 	bl	801a394 <LORA_Join>

  LoraStartTx(TX_ON_TIMER) ;
 8004a46:	2000      	movs	r0, #0
 8004a48:	f000 fa28 	bl	8004e9c <LoraStartTx>

  while (1)
  {

    if (AppProcessRequest == LORA_SET)
 8004a4c:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <main+0xa8>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d105      	bne.n	8004a60 <main+0x6c>
    {
      /*reset notification flag*/
      AppProcessRequest = LORA_RESET;
 8004a54:	4b11      	ldr	r3, [pc, #68]	; (8004a9c <main+0xa8>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	701a      	strb	r2, [r3, #0]
      /*Send*/
      Send(NULL);
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	f000 f834 	bl	8004ac8 <Send>
    }
    if (LoraMacProcessRequest == LORA_SET)
 8004a60:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <main+0xac>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d104      	bne.n	8004a72 <main+0x7e>
    {
      /*reset notification flag*/
      LoraMacProcessRequest = LORA_RESET;
 8004a68:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <main+0xac>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	701a      	strb	r2, [r3, #0]
      LoRaMacProcess();
 8004a6e:	f00c f811 	bl	8010a94 <LoRaMacProcess>
  __ASM volatile ("cpsid i" : : : "memory");
 8004a72:	b672      	cpsid	i
    /*If a flag is set at this point, mcu must not enter low power and must loop*/
    DISABLE_IRQ();

    /* if an interrupt has occurred after DISABLE_IRQ, it is kept pending
     * and cortex will not enter low power anyway  */
    if ((LoraMacProcessRequest != LORA_SET) && (AppProcessRequest != LORA_SET))
 8004a74:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <main+0xac>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d005      	beq.n	8004a88 <main+0x94>
 8004a7c:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <main+0xa8>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d001      	beq.n	8004a88 <main+0x94>
    {
#ifndef LOW_POWER_DISABLE
      LPM_EnterLowPower();
 8004a84:	f015 fea0 	bl	801a7c8 <LPM_EnterLowPower>
  __ASM volatile ("cpsie i" : : : "memory");
 8004a88:	b662      	cpsie	i
    if (AppProcessRequest == LORA_SET)
 8004a8a:	e7df      	b.n	8004a4c <main+0x58>
 8004a8c:	0801c28c 	.word	0x0801c28c
 8004a90:	0801c2b0 	.word	0x0801c2b0
 8004a94:	2000002c 	.word	0x2000002c
 8004a98:	20000008 	.word	0x20000008
 8004a9c:	200002b9 	.word	0x200002b9
 8004aa0:	200002b8 	.word	0x200002b8

08004aa4 <LoraMacProcessNotify>:
  }
}


void LoraMacProcessNotify(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  LoraMacProcessRequest = LORA_SET;
 8004aa8:	4b02      	ldr	r3, [pc, #8]	; (8004ab4 <LoraMacProcessNotify+0x10>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	701a      	strb	r2, [r3, #0]
}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	200002b8 	.word	0x200002b8

08004ab8 <LORA_HasJoined>:


static void LORA_HasJoined(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
#if( OVER_THE_AIR_ACTIVATION != 0 )
  PRINTF("JOINED\n\r");
#endif
  LORA_RequestClass(LORAWAN_DEFAULT_CLASS);
 8004abc:	2000      	movs	r0, #0
 8004abe:	f015 fd77 	bl	801a5b0 <LORA_RequestClass>
}
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <Send>:

static void Send(void *context)
{
 8004ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aca:	b08d      	sub	sp, #52	; 0x34
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  uint16_t pressure = 0;
 8004ad0:	232e      	movs	r3, #46	; 0x2e
 8004ad2:	18fb      	adds	r3, r7, r3
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	801a      	strh	r2, [r3, #0]
  int16_t temperature = 0;
 8004ad8:	232c      	movs	r3, #44	; 0x2c
 8004ada:	18fb      	adds	r3, r7, r3
 8004adc:	2200      	movs	r2, #0
 8004ade:	801a      	strh	r2, [r3, #0]
  uint16_t humidity = 0;
 8004ae0:	232a      	movs	r3, #42	; 0x2a
 8004ae2:	18fb      	adds	r3, r7, r3
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	801a      	strh	r2, [r3, #0]
  uint8_t batteryLevel;
  sensorBme280_t sensor_data;

  if (LORA_JoinStatus() != LORA_SET)
 8004ae8:	f015 fcde 	bl	801a4a8 <LORA_JoinStatus>
 8004aec:	0003      	movs	r3, r0
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d002      	beq.n	8004af8 <Send+0x30>
  {
    /*Not joined, try again later*/
    LORA_Join();
 8004af2:	f015 fc4f 	bl	801a394 <LORA_Join>
 8004af6:	e127      	b.n	8004d48 <Send+0x280>
    return;
  }

  TVL1(PRINTF("SEND REQUEST\n\r");)
#ifndef CAYENNE_LPP
  int32_t latitude, longitude = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t altitudeGps = 0;
 8004afc:	2422      	movs	r4, #34	; 0x22
 8004afe:	193b      	adds	r3, r7, r4
 8004b00:	2200      	movs	r2, #0
 8004b02:	801a      	strh	r2, [r3, #0]
#endif

#ifdef USE_B_L072Z_LRWAN1
  TimerInit(&TxLedTimer, OnTimerLedEvent);
 8004b04:	4a92      	ldr	r2, [pc, #584]	; (8004d50 <Send+0x288>)
 8004b06:	4b93      	ldr	r3, [pc, #588]	; (8004d54 <Send+0x28c>)
 8004b08:	0011      	movs	r1, r2
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	f016 fa21 	bl	801af52 <TimerInit>

  TimerSetValue(&TxLedTimer, 200);
 8004b10:	4b90      	ldr	r3, [pc, #576]	; (8004d54 <Send+0x28c>)
 8004b12:	21c8      	movs	r1, #200	; 0xc8
 8004b14:	0018      	movs	r0, r3
 8004b16:	f016 fb8d 	bl	801b234 <TimerSetValue>

  LED_On(LED_RED1) ;
 8004b1a:	2001      	movs	r0, #1
 8004b1c:	f001 faae 	bl	800607c <BSP_LED_On>

  TimerStart(&TxLedTimer);
 8004b20:	4b8c      	ldr	r3, [pc, #560]	; (8004d54 <Send+0x28c>)
 8004b22:	0018      	movs	r0, r3
 8004b24:	f016 fa34 	bl	801af90 <TimerStart>
#endif

//  BSP_sensor_Read(&sensor_data);
 // AnalogRead();
  BMERead(&sensor_data);
 8004b28:	2508      	movs	r5, #8
 8004b2a:	197b      	adds	r3, r7, r5
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7fe fac5 	bl	80030bc <BMERead>
  AppData.Buff[i++] = cchannel++;
  AppData.Buff[i++] = LPP_DATATYPE_DIGITAL_OUTPUT;
  AppData.Buff[i++] = AppLedStateOn;
#endif  /* REGION_XX915 */
#else  /* not CAYENNE_LPP */
  data.Port=LPP_APP_PORT;
 8004b32:	4b89      	ldr	r3, [pc, #548]	; (8004d58 <Send+0x290>)
 8004b34:	2263      	movs	r2, #99	; 0x63
 8004b36:	601a      	str	r2, [r3, #0]
  temperature = (int16_t)(sensor_data.temperatureBME*10);         /* in �C */
 8004b38:	197b      	adds	r3, r7, r5
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	4987      	ldr	r1, [pc, #540]	; (8004d5c <Send+0x294>)
 8004b3e:	1c18      	adds	r0, r3, #0
 8004b40:	f7fc f82a 	bl	8000b98 <__aeabi_fmul>
 8004b44:	1c03      	adds	r3, r0, #0
 8004b46:	262c      	movs	r6, #44	; 0x2c
 8004b48:	19bc      	adds	r4, r7, r6
 8004b4a:	1c18      	adds	r0, r3, #0
 8004b4c:	f7fc fb1a 	bl	8001184 <__aeabi_f2iz>
 8004b50:	0003      	movs	r3, r0
 8004b52:	8023      	strh	r3, [r4, #0]
  pressure    = (uint16_t)(sensor_data.pressureBME/10);      /* in hPa / 10 */
 8004b54:	197b      	adds	r3, r7, r5
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4980      	ldr	r1, [pc, #512]	; (8004d5c <Send+0x294>)
 8004b5a:	1c18      	adds	r0, r3, #0
 8004b5c:	f7fb fe44 	bl	80007e8 <__aeabi_fdiv>
 8004b60:	1c03      	adds	r3, r0, #0
 8004b62:	222e      	movs	r2, #46	; 0x2e
 8004b64:	18bc      	adds	r4, r7, r2
 8004b66:	1c18      	adds	r0, r3, #0
 8004b68:	f7fb fd2a 	bl	80005c0 <__aeabi_f2uiz>
 8004b6c:	0003      	movs	r3, r0
 8004b6e:	8023      	strh	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidityBME*10);            /* in %*10     */
 8004b70:	197b      	adds	r3, r7, r5
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4979      	ldr	r1, [pc, #484]	; (8004d5c <Send+0x294>)
 8004b76:	1c18      	adds	r0, r3, #0
 8004b78:	f7fc f80e 	bl	8000b98 <__aeabi_fmul>
 8004b7c:	1c03      	adds	r3, r0, #0
 8004b7e:	242a      	movs	r4, #42	; 0x2a
 8004b80:	193c      	adds	r4, r7, r4
 8004b82:	1c18      	adds	r0, r3, #0
 8004b84:	f7fb fd1c 	bl	80005c0 <__aeabi_f2uiz>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	8023      	strh	r3, [r4, #0]
 // data.temp=temperature;
 // data.pres=pressure;
 // data.hum=humidity;
  PRINTF("temperature = %d \r\n", temperature);
 8004b8c:	0035      	movs	r5, r6
 8004b8e:	197b      	adds	r3, r7, r5
 8004b90:	2200      	movs	r2, #0
 8004b92:	5e9a      	ldrsh	r2, [r3, r2]
 8004b94:	4b72      	ldr	r3, [pc, #456]	; (8004d60 <Send+0x298>)
 8004b96:	0011      	movs	r1, r2
 8004b98:	0018      	movs	r0, r3
 8004b9a:	f016 fc41 	bl	801b420 <TraceSend>
  PRINTF("humidity = %d\n\r", humidity);
 8004b9e:	242a      	movs	r4, #42	; 0x2a
 8004ba0:	193b      	adds	r3, r7, r4
 8004ba2:	881a      	ldrh	r2, [r3, #0]
 8004ba4:	4b6f      	ldr	r3, [pc, #444]	; (8004d64 <Send+0x29c>)
 8004ba6:	0011      	movs	r1, r2
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f016 fc39 	bl	801b420 <TraceSend>
  PRINTF("pressure = %d\n\r", pressure);
 8004bae:	222e      	movs	r2, #46	; 0x2e
 8004bb0:	0016      	movs	r6, r2
 8004bb2:	18bb      	adds	r3, r7, r2
 8004bb4:	881a      	ldrh	r2, [r3, #0]
 8004bb6:	4b6c      	ldr	r3, [pc, #432]	; (8004d68 <Send+0x2a0>)
 8004bb8:	0011      	movs	r1, r2
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f016 fc30 	bl	801b420 <TraceSend>
  //latitude = sensor_data.latitude;
  //longitude = sensor_data.longitude;
  uint32_t i = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61fb      	str	r3, [r7, #28]
 // data.BuffSize=sizeof(datas);

  batteryLevel = LORA_GetBatteryLevel();                      /* 1 (very low) to 254 (fully charged) */
 8004bc4:	231b      	movs	r3, #27
 8004bc6:	18fc      	adds	r4, r7, r3
 8004bc8:	f000 f9e8 	bl	8004f9c <LORA_GetBatteryLevel>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	7023      	strb	r3, [r4, #0]
  PRINTF("battery level = %d\n\r", batteryLevel);
 8004bd0:	231b      	movs	r3, #27
 8004bd2:	18fb      	adds	r3, r7, r3
 8004bd4:	781a      	ldrb	r2, [r3, #0]
 8004bd6:	4b65      	ldr	r3, [pc, #404]	; (8004d6c <Send+0x2a4>)
 8004bd8:	0011      	movs	r1, r2
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f016 fc20 	bl	801b420 <TraceSend>
  AppData.Port = LORAWAN_APP_PORT;
 8004be0:	4b63      	ldr	r3, [pc, #396]	; (8004d70 <Send+0x2a8>)
 8004be2:	2202      	movs	r2, #2
 8004be4:	715a      	strb	r2, [r3, #5]
  AppData.Buff[i++] = batteryLevel;
  AppData.Buff[i++] = 0;
  AppData.Buff[i++] = 0;
  AppData.Buff[i++] = 0;
#else  /* not REGION_XX915 */
  AppData.Buff[i++] = AppLedStateOn;
 8004be6:	4b62      	ldr	r3, [pc, #392]	; (8004d70 <Send+0x2a8>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	1c59      	adds	r1, r3, #1
 8004bee:	61f9      	str	r1, [r7, #28]
 8004bf0:	18d3      	adds	r3, r2, r3
 8004bf2:	4a60      	ldr	r2, [pc, #384]	; (8004d74 <Send+0x2ac>)
 8004bf4:	7812      	ldrb	r2, [r2, #0]
 8004bf6:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (pressure >> 8) & 0xFF;
 8004bf8:	19bb      	adds	r3, r7, r6
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	0a1b      	lsrs	r3, r3, #8
 8004bfe:	b298      	uxth	r0, r3
 8004c00:	4b5b      	ldr	r3, [pc, #364]	; (8004d70 <Send+0x2a8>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	1c59      	adds	r1, r3, #1
 8004c08:	61f9      	str	r1, [r7, #28]
 8004c0a:	18d3      	adds	r3, r2, r3
 8004c0c:	b2c2      	uxtb	r2, r0
 8004c0e:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = pressure & 0xFF;
 8004c10:	4b57      	ldr	r3, [pc, #348]	; (8004d70 <Send+0x2a8>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	1c59      	adds	r1, r3, #1
 8004c18:	61f9      	str	r1, [r7, #28]
 8004c1a:	18d3      	adds	r3, r2, r3
 8004c1c:	19ba      	adds	r2, r7, r6
 8004c1e:	8812      	ldrh	r2, [r2, #0]
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (temperature >> 8) & 0xFF;
 8004c24:	197b      	adds	r3, r7, r5
 8004c26:	2100      	movs	r1, #0
 8004c28:	5e5b      	ldrsh	r3, [r3, r1]
 8004c2a:	121b      	asrs	r3, r3, #8
 8004c2c:	b218      	sxth	r0, r3
 8004c2e:	4b50      	ldr	r3, [pc, #320]	; (8004d70 <Send+0x2a8>)
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	1c59      	adds	r1, r3, #1
 8004c36:	61f9      	str	r1, [r7, #28]
 8004c38:	18d3      	adds	r3, r2, r3
 8004c3a:	b2c2      	uxtb	r2, r0
 8004c3c:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = temperature & 0xFF;
 8004c3e:	4b4c      	ldr	r3, [pc, #304]	; (8004d70 <Send+0x2a8>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	1c59      	adds	r1, r3, #1
 8004c46:	61f9      	str	r1, [r7, #28]
 8004c48:	18d3      	adds	r3, r2, r3
 8004c4a:	197a      	adds	r2, r7, r5
 8004c4c:	8812      	ldrh	r2, [r2, #0]
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (humidity >> 8) & 0xFF;
 8004c52:	242a      	movs	r4, #42	; 0x2a
 8004c54:	193b      	adds	r3, r7, r4
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	b298      	uxth	r0, r3
 8004c5c:	4b44      	ldr	r3, [pc, #272]	; (8004d70 <Send+0x2a8>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	1c59      	adds	r1, r3, #1
 8004c64:	61f9      	str	r1, [r7, #28]
 8004c66:	18d3      	adds	r3, r2, r3
 8004c68:	b2c2      	uxtb	r2, r0
 8004c6a:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = humidity & 0xFF;
 8004c6c:	4b40      	ldr	r3, [pc, #256]	; (8004d70 <Send+0x2a8>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	1c59      	adds	r1, r3, #1
 8004c74:	61f9      	str	r1, [r7, #28]
 8004c76:	18d3      	adds	r3, r2, r3
 8004c78:	193a      	adds	r2, r7, r4
 8004c7a:	8812      	ldrh	r2, [r2, #0]
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = batteryLevel;
 8004c80:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <Send+0x2a8>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	1c59      	adds	r1, r3, #1
 8004c88:	61f9      	str	r1, [r7, #28]
 8004c8a:	18d3      	adds	r3, r2, r3
 8004c8c:	221b      	movs	r2, #27
 8004c8e:	18ba      	adds	r2, r7, r2
 8004c90:	7812      	ldrb	r2, [r2, #0]
 8004c92:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (latitude >> 16) & 0xFF;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	1418      	asrs	r0, r3, #16
 8004c98:	4b35      	ldr	r3, [pc, #212]	; (8004d70 <Send+0x2a8>)
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	1c59      	adds	r1, r3, #1
 8004ca0:	61f9      	str	r1, [r7, #28]
 8004ca2:	18d3      	adds	r3, r2, r3
 8004ca4:	b2c2      	uxtb	r2, r0
 8004ca6:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (latitude >> 8) & 0xFF;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	1218      	asrs	r0, r3, #8
 8004cac:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <Send+0x2a8>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	1c59      	adds	r1, r3, #1
 8004cb4:	61f9      	str	r1, [r7, #28]
 8004cb6:	18d3      	adds	r3, r2, r3
 8004cb8:	b2c2      	uxtb	r2, r0
 8004cba:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = latitude & 0xFF;
 8004cbc:	4b2c      	ldr	r3, [pc, #176]	; (8004d70 <Send+0x2a8>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	1c59      	adds	r1, r3, #1
 8004cc4:	61f9      	str	r1, [r7, #28]
 8004cc6:	18d3      	adds	r3, r2, r3
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (longitude >> 16) & 0xFF;
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	1418      	asrs	r0, r3, #16
 8004cd2:	4b27      	ldr	r3, [pc, #156]	; (8004d70 <Send+0x2a8>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	1c59      	adds	r1, r3, #1
 8004cda:	61f9      	str	r1, [r7, #28]
 8004cdc:	18d3      	adds	r3, r2, r3
 8004cde:	b2c2      	uxtb	r2, r0
 8004ce0:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (longitude >> 8) & 0xFF;
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	1218      	asrs	r0, r3, #8
 8004ce6:	4b22      	ldr	r3, [pc, #136]	; (8004d70 <Send+0x2a8>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	1c59      	adds	r1, r3, #1
 8004cee:	61f9      	str	r1, [r7, #28]
 8004cf0:	18d3      	adds	r3, r2, r3
 8004cf2:	b2c2      	uxtb	r2, r0
 8004cf4:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = longitude & 0xFF;
 8004cf6:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <Send+0x2a8>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	1c59      	adds	r1, r3, #1
 8004cfe:	61f9      	str	r1, [r7, #28]
 8004d00:	18d3      	adds	r3, r2, r3
 8004d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (altitudeGps >> 8) & 0xFF;
 8004d08:	2422      	movs	r4, #34	; 0x22
 8004d0a:	193b      	adds	r3, r7, r4
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	0a1b      	lsrs	r3, r3, #8
 8004d10:	b298      	uxth	r0, r3
 8004d12:	4b17      	ldr	r3, [pc, #92]	; (8004d70 <Send+0x2a8>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	1c59      	adds	r1, r3, #1
 8004d1a:	61f9      	str	r1, [r7, #28]
 8004d1c:	18d3      	adds	r3, r2, r3
 8004d1e:	b2c2      	uxtb	r2, r0
 8004d20:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = altitudeGps & 0xFF;
 8004d22:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <Send+0x2a8>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	1c59      	adds	r1, r3, #1
 8004d2a:	61f9      	str	r1, [r7, #28]
 8004d2c:	18d3      	adds	r3, r2, r3
 8004d2e:	193a      	adds	r2, r7, r4
 8004d30:	8812      	ldrh	r2, [r2, #0]
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	701a      	strb	r2, [r3, #0]
#endif  /* REGION_XX915 */
#endif  /* CAYENNE_LPP */
  AppData.BuffSize = i;
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <Send+0x2a8>)
 8004d3c:	711a      	strb	r2, [r3, #4]
  LORA_send(&AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 8004d3e:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <Send+0x2a8>)
 8004d40:	2100      	movs	r1, #0
 8004d42:	0018      	movs	r0, r3
 8004d44:	f015 fbc6 	bl	801a4d4 <LORA_send>

  /* USER CODE END 3 */
}
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	b00d      	add	sp, #52	; 0x34
 8004d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	080050d9 	.word	0x080050d9
 8004d54:	200002d4 	.word	0x200002d4
 8004d58:	2000158c 	.word	0x2000158c
 8004d5c:	41200000 	.word	0x41200000
 8004d60:	0801c2d4 	.word	0x0801c2d4
 8004d64:	0801c2e8 	.word	0x0801c2e8
 8004d68:	0801c2f8 	.word	0x0801c2f8
 8004d6c:	0801c308 	.word	0x0801c308
 8004d70:	20000000 	.word	0x20000000
 8004d74:	200002ba 	.word	0x200002ba

08004d78 <LORA_RxData>:


static void LORA_RxData(lora_AppData_t *AppData)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 4 */
  PRINTF("PACKET RECEIVED ON PORT %d\n\r", AppData->Port);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	795b      	ldrb	r3, [r3, #5]
 8004d84:	001a      	movs	r2, r3
 8004d86:	4b37      	ldr	r3, [pc, #220]	; (8004e64 <LORA_RxData+0xec>)
 8004d88:	0011      	movs	r1, r2
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f016 fb48 	bl	801b420 <TraceSend>

  switch (AppData->Port)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	795b      	ldrb	r3, [r3, #5]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d004      	beq.n	8004da2 <LORA_RxData+0x2a>
 8004d98:	2b63      	cmp	r3, #99	; 0x63
 8004d9a:	d03e      	beq.n	8004e1a <LORA_RxData+0xa2>
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d01c      	beq.n	8004dda <LORA_RxData+0x62>
        LED_On(LED_BLUE) ;
      }
      break;
    }
    default:
      break;
 8004da0:	e05b      	b.n	8004e5a <LORA_RxData+0xe2>
      if (AppData->BuffSize == 1)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	791b      	ldrb	r3, [r3, #4]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d115      	bne.n	8004dd6 <LORA_RxData+0x5e>
        switch (AppData->Buff[0])
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d008      	beq.n	8004dc6 <LORA_RxData+0x4e>
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d00a      	beq.n	8004dce <LORA_RxData+0x56>
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d000      	beq.n	8004dbe <LORA_RxData+0x46>
            break;
 8004dbc:	e00c      	b.n	8004dd8 <LORA_RxData+0x60>
            LORA_RequestClass(CLASS_A);
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	f015 fbf6 	bl	801a5b0 <LORA_RequestClass>
            break;
 8004dc4:	e008      	b.n	8004dd8 <LORA_RxData+0x60>
            LORA_RequestClass(CLASS_B);
 8004dc6:	2001      	movs	r0, #1
 8004dc8:	f015 fbf2 	bl	801a5b0 <LORA_RequestClass>
            break;
 8004dcc:	e004      	b.n	8004dd8 <LORA_RxData+0x60>
            LORA_RequestClass(CLASS_C);
 8004dce:	2002      	movs	r0, #2
 8004dd0:	f015 fbee 	bl	801a5b0 <LORA_RequestClass>
            break;
 8004dd4:	e000      	b.n	8004dd8 <LORA_RxData+0x60>
      }
 8004dd6:	46c0      	nop			; (mov r8, r8)
      break;
 8004dd8:	e03f      	b.n	8004e5a <LORA_RxData+0xe2>
      if (AppData->BuffSize == 1)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	791b      	ldrb	r3, [r3, #4]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d13a      	bne.n	8004e58 <LORA_RxData+0xe0>
        AppLedStateOn = AppData->Buff[0] & 0x01;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2201      	movs	r2, #1
 8004dea:	4013      	ands	r3, r2
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	4b1e      	ldr	r3, [pc, #120]	; (8004e68 <LORA_RxData+0xf0>)
 8004df0:	701a      	strb	r2, [r3, #0]
        if (AppLedStateOn == RESET)
 8004df2:	4b1d      	ldr	r3, [pc, #116]	; (8004e68 <LORA_RxData+0xf0>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d107      	bne.n	8004e0a <LORA_RxData+0x92>
          PRINTF("LED OFF\n\r");
 8004dfa:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <LORA_RxData+0xf4>)
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f016 fb0f 	bl	801b420 <TraceSend>
          LED_Off(LED_BLUE) ;
 8004e02:	2002      	movs	r0, #2
 8004e04:	f001 f956 	bl	80060b4 <BSP_LED_Off>
      break;
 8004e08:	e026      	b.n	8004e58 <LORA_RxData+0xe0>
          PRINTF("LED ON\n\r");
 8004e0a:	4b19      	ldr	r3, [pc, #100]	; (8004e70 <LORA_RxData+0xf8>)
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f016 fb07 	bl	801b420 <TraceSend>
          LED_On(LED_BLUE) ;
 8004e12:	2002      	movs	r0, #2
 8004e14:	f001 f932 	bl	800607c <BSP_LED_On>
      break;
 8004e18:	e01e      	b.n	8004e58 <LORA_RxData+0xe0>
      AppLedStateOn = (AppData->Buff[2] == 100) ?  0x01 : 0x00;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	3302      	adds	r3, #2
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	3b64      	subs	r3, #100	; 0x64
 8004e24:	425a      	negs	r2, r3
 8004e26:	4153      	adcs	r3, r2
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	001a      	movs	r2, r3
 8004e2c:	4b0e      	ldr	r3, [pc, #56]	; (8004e68 <LORA_RxData+0xf0>)
 8004e2e:	701a      	strb	r2, [r3, #0]
      if (AppLedStateOn == RESET)
 8004e30:	4b0d      	ldr	r3, [pc, #52]	; (8004e68 <LORA_RxData+0xf0>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d107      	bne.n	8004e48 <LORA_RxData+0xd0>
        PRINTF("LED OFF\n\r");
 8004e38:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <LORA_RxData+0xf4>)
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f016 faf0 	bl	801b420 <TraceSend>
        LED_Off(LED_BLUE) ;
 8004e40:	2002      	movs	r0, #2
 8004e42:	f001 f937 	bl	80060b4 <BSP_LED_Off>
      break;
 8004e46:	e008      	b.n	8004e5a <LORA_RxData+0xe2>
        PRINTF("LED ON\n\r");
 8004e48:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <LORA_RxData+0xf8>)
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	f016 fae8 	bl	801b420 <TraceSend>
        LED_On(LED_BLUE) ;
 8004e50:	2002      	movs	r0, #2
 8004e52:	f001 f913 	bl	800607c <BSP_LED_On>
      break;
 8004e56:	e000      	b.n	8004e5a <LORA_RxData+0xe2>
      break;
 8004e58:	46c0      	nop			; (mov r8, r8)
  }
  /* USER CODE END 4 */
}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	b002      	add	sp, #8
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	0801c320 	.word	0x0801c320
 8004e68:	200002ba 	.word	0x200002ba
 8004e6c:	0801c340 	.word	0x0801c340
 8004e70:	0801c34c 	.word	0x0801c34c

08004e74 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /*Wait for next tx slot*/
  TimerStart(&TxTimer);
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <OnTxTimerEvent+0x20>)
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f016 f886 	bl	801af90 <TimerStart>

  AppProcessRequest = LORA_SET;
 8004e84:	4b04      	ldr	r3, [pc, #16]	; (8004e98 <OnTxTimerEvent+0x24>)
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b002      	add	sp, #8
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	200002bc 	.word	0x200002bc
 8004e98:	200002b9 	.word	0x200002b9

08004e9c <LoraStartTx>:

static void LoraStartTx(TxEventType_t EventType)
{
 8004e9c:	b590      	push	{r4, r7, lr}
 8004e9e:	b089      	sub	sp, #36	; 0x24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	0002      	movs	r2, r0
 8004ea4:	1dfb      	adds	r3, r7, #7
 8004ea6:	701a      	strb	r2, [r3, #0]
  if (EventType == TX_ON_TIMER)
 8004ea8:	1dfb      	adds	r3, r7, #7
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10f      	bne.n	8004ed0 <LoraStartTx+0x34>
  {
    /* send everytime timer elapses */
    TimerInit(&TxTimer, OnTxTimerEvent);
 8004eb0:	4a18      	ldr	r2, [pc, #96]	; (8004f14 <LoraStartTx+0x78>)
 8004eb2:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <LoraStartTx+0x7c>)
 8004eb4:	0011      	movs	r1, r2
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f016 f84b 	bl	801af52 <TimerInit>
    TimerSetValue(&TxTimer,  APP_TX_DUTYCYCLE);
 8004ebc:	4a17      	ldr	r2, [pc, #92]	; (8004f1c <LoraStartTx+0x80>)
 8004ebe:	4b16      	ldr	r3, [pc, #88]	; (8004f18 <LoraStartTx+0x7c>)
 8004ec0:	0011      	movs	r1, r2
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f016 f9b6 	bl	801b234 <TimerSetValue>
    OnTxTimerEvent(NULL);
 8004ec8:	2000      	movs	r0, #0
 8004eca:	f7ff ffd3 	bl	8004e74 <OnTxTimerEvent>
    initStruct.Speed = GPIO_SPEED_HIGH;

    HW_GPIO_Init(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, &initStruct);
    HW_GPIO_SetIrq(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, 0, Send);
  }
}
 8004ece:	e01c      	b.n	8004f0a <LoraStartTx+0x6e>
    GPIO_InitTypeDef initStruct = {0};
 8004ed0:	240c      	movs	r4, #12
 8004ed2:	193b      	adds	r3, r7, r4
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	2314      	movs	r3, #20
 8004ed8:	001a      	movs	r2, r3
 8004eda:	2100      	movs	r1, #0
 8004edc:	f016 fc2c 	bl	801b738 <memset>
    initStruct.Mode = GPIO_MODE_IT_RISING;
 8004ee0:	193b      	adds	r3, r7, r4
 8004ee2:	4a0f      	ldr	r2, [pc, #60]	; (8004f20 <LoraStartTx+0x84>)
 8004ee4:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_PULLUP;
 8004ee6:	193b      	adds	r3, r7, r4
 8004ee8:	2201      	movs	r2, #1
 8004eea:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8004eec:	193b      	adds	r3, r7, r4
 8004eee:	2203      	movs	r2, #3
 8004ef0:	60da      	str	r2, [r3, #12]
    HW_GPIO_Init(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, &initStruct);
 8004ef2:	193b      	adds	r3, r7, r4
 8004ef4:	480b      	ldr	r0, [pc, #44]	; (8004f24 <LoraStartTx+0x88>)
 8004ef6:	001a      	movs	r2, r3
 8004ef8:	2104      	movs	r1, #4
 8004efa:	f7fe feb9 	bl	8003c70 <HW_GPIO_Init>
    HW_GPIO_SetIrq(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, 0, Send);
 8004efe:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <LoraStartTx+0x8c>)
 8004f00:	4808      	ldr	r0, [pc, #32]	; (8004f24 <LoraStartTx+0x88>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	2104      	movs	r1, #4
 8004f06:	f7fe ff27 	bl	8003d58 <HW_GPIO_SetIrq>
}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b009      	add	sp, #36	; 0x24
 8004f10:	bd90      	pop	{r4, r7, pc}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	08004e75 	.word	0x08004e75
 8004f18:	200002bc 	.word	0x200002bc
 8004f1c:	00002710 	.word	0x00002710
 8004f20:	10110000 	.word	0x10110000
 8004f24:	50000400 	.word	0x50000400
 8004f28:	08004ac9 	.word	0x08004ac9

08004f2c <LORA_ConfirmClass>:

static void LORA_ConfirmClass(DeviceClass_t Class)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	0002      	movs	r2, r0
 8004f34:	1dfb      	adds	r3, r7, #7
 8004f36:	701a      	strb	r2, [r3, #0]
  PRINTF("switch to class %c done\n\r", "ABC"[Class]);
 8004f38:	1dfb      	adds	r3, r7, #7
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	4a0b      	ldr	r2, [pc, #44]	; (8004f6c <LORA_ConfirmClass+0x40>)
 8004f3e:	5cd3      	ldrb	r3, [r2, r3]
 8004f40:	001a      	movs	r2, r3
 8004f42:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <LORA_ConfirmClass+0x44>)
 8004f44:	0011      	movs	r1, r2
 8004f46:	0018      	movs	r0, r3
 8004f48:	f016 fa6a 	bl	801b420 <TraceSend>

  /*Optionnal*/
  /*informs the server that switch has occurred ASAP*/
  AppData.BuffSize = 0;
 8004f4c:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <LORA_ConfirmClass+0x48>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	711a      	strb	r2, [r3, #4]
  AppData.Port = LORAWAN_APP_PORT;
 8004f52:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <LORA_ConfirmClass+0x48>)
 8004f54:	2202      	movs	r2, #2
 8004f56:	715a      	strb	r2, [r3, #5]

  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 8004f58:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <LORA_ConfirmClass+0x48>)
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	0018      	movs	r0, r3
 8004f5e:	f015 fab9 	bl	801a4d4 <LORA_send>
}
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	46bd      	mov	sp, r7
 8004f66:	b002      	add	sp, #8
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	0801c374 	.word	0x0801c374
 8004f70:	0801c358 	.word	0x0801c358
 8004f74:	20000000 	.word	0x20000000

08004f78 <LORA_TxNeeded>:

static void LORA_TxNeeded(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  AppData.BuffSize = 0;
 8004f7c:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <LORA_TxNeeded+0x20>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	711a      	strb	r2, [r3, #4]
  AppData.Port = LORAWAN_APP_PORT;
 8004f82:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <LORA_TxNeeded+0x20>)
 8004f84:	2202      	movs	r2, #2
 8004f86:	715a      	strb	r2, [r3, #5]

  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 8004f88:	4b03      	ldr	r3, [pc, #12]	; (8004f98 <LORA_TxNeeded+0x20>)
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f015 faa1 	bl	801a4d4 <LORA_send>
}
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	20000000 	.word	0x20000000

08004f9c <LORA_GetBatteryLevel>:
  * @brief This function return the battery level
  * @param none
  * @retval the battery level  1 (very low) to 254 (fully charged)
  */
uint8_t LORA_GetBatteryLevel(void)
{
 8004f9c:	b590      	push	{r4, r7, lr}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
  uint16_t batteryLevelmV;
  uint8_t batteryLevel = 0;
 8004fa2:	1dfb      	adds	r3, r7, #7
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]

  batteryLevelmV = HW_GetBatteryLevel();
 8004fa8:	1d3c      	adds	r4, r7, #4
 8004faa:	f000 fba1 	bl	80056f0 <HW_GetBatteryLevel>
 8004fae:	0003      	movs	r3, r0
 8004fb0:	8023      	strh	r3, [r4, #0]


  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8004fb2:	1d3b      	adds	r3, r7, #4
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	4a15      	ldr	r2, [pc, #84]	; (800500c <LORA_GetBatteryLevel+0x70>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d903      	bls.n	8004fc4 <LORA_GetBatteryLevel+0x28>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8004fbc:	1dfb      	adds	r3, r7, #7
 8004fbe:	22fe      	movs	r2, #254	; 0xfe
 8004fc0:	701a      	strb	r2, [r3, #0]
 8004fc2:	e01c      	b.n	8004ffe <LORA_GetBatteryLevel+0x62>
  }
  else if (batteryLevelmV < VDD_MIN)
 8004fc4:	1d3b      	adds	r3, r7, #4
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	4a11      	ldr	r2, [pc, #68]	; (8005010 <LORA_GetBatteryLevel+0x74>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d803      	bhi.n	8004fd6 <LORA_GetBatteryLevel+0x3a>
  {
    batteryLevel = 0;
 8004fce:	1dfb      	adds	r3, r7, #7
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	e013      	b.n	8004ffe <LORA_GetBatteryLevel+0x62>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8004fd6:	1d3b      	adds	r3, r7, #4
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	4a0e      	ldr	r2, [pc, #56]	; (8005014 <LORA_GetBatteryLevel+0x78>)
 8004fdc:	4694      	mov	ip, r2
 8004fde:	4463      	add	r3, ip
 8004fe0:	001a      	movs	r2, r3
 8004fe2:	0013      	movs	r3, r2
 8004fe4:	01db      	lsls	r3, r3, #7
 8004fe6:	1a9b      	subs	r3, r3, r2
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	001a      	movs	r2, r3
 8004fec:	2396      	movs	r3, #150	; 0x96
 8004fee:	00d9      	lsls	r1, r3, #3
 8004ff0:	0010      	movs	r0, r2
 8004ff2:	f7fb f889 	bl	8000108 <__udivsi3>
 8004ff6:	0003      	movs	r3, r0
 8004ff8:	001a      	movs	r2, r3
 8004ffa:	1dfb      	adds	r3, r7, #7
 8004ffc:	701a      	strb	r2, [r3, #0]
  }

  return batteryLevel;
 8004ffe:	1dfb      	adds	r3, r7, #7
 8005000:	781b      	ldrb	r3, [r3, #0]
}
 8005002:	0018      	movs	r0, r3
 8005004:	46bd      	mov	sp, r7
 8005006:	b003      	add	sp, #12
 8005008:	bd90      	pop	{r4, r7, pc}
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	00000bb8 	.word	0x00000bb8
 8005010:	00000707 	.word	0x00000707
 8005014:	fffff8f8 	.word	0xfffff8f8

08005018 <SensorINT>:
void SensorINT()
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
	    GPIO_InitTypeDef initStruct = {0};
 800501e:	1d3b      	adds	r3, r7, #4
 8005020:	0018      	movs	r0, r3
 8005022:	2314      	movs	r3, #20
 8005024:	001a      	movs	r2, r3
 8005026:	2100      	movs	r1, #0
 8005028:	f016 fb86 	bl	801b738 <memset>

	    initStruct.Mode = GPIO_MODE_IT_RISING;
 800502c:	1d3b      	adds	r3, r7, #4
 800502e:	4a0d      	ldr	r2, [pc, #52]	; (8005064 <SensorINT+0x4c>)
 8005030:	605a      	str	r2, [r3, #4]
	    initStruct.Pull = GPIO_PULLUP;
 8005032:	1d3b      	adds	r3, r7, #4
 8005034:	2201      	movs	r2, #1
 8005036:	609a      	str	r2, [r3, #8]
	    initStruct.Speed = GPIO_SPEED_HIGH;
 8005038:	1d3b      	adds	r3, r7, #4
 800503a:	2203      	movs	r2, #3
 800503c:	60da      	str	r2, [r3, #12]

	    HW_GPIO_Init(GPIOB ,GPIO_PIN_14  , &initStruct);
 800503e:	1d3a      	adds	r2, r7, #4
 8005040:	2380      	movs	r3, #128	; 0x80
 8005042:	01db      	lsls	r3, r3, #7
 8005044:	4808      	ldr	r0, [pc, #32]	; (8005068 <SensorINT+0x50>)
 8005046:	0019      	movs	r1, r3
 8005048:	f7fe fe12 	bl	8003c70 <HW_GPIO_Init>
	    HW_GPIO_SetIrq(GPIOB ,GPIO_PIN_14  , 0, InterruptTest);
 800504c:	4a07      	ldr	r2, [pc, #28]	; (800506c <SensorINT+0x54>)
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	01d9      	lsls	r1, r3, #7
 8005052:	4805      	ldr	r0, [pc, #20]	; (8005068 <SensorINT+0x50>)
 8005054:	0013      	movs	r3, r2
 8005056:	2200      	movs	r2, #0
 8005058:	f7fe fe7e 	bl	8003d58 <HW_GPIO_SetIrq>
}
 800505c:	46c0      	nop			; (mov r8, r8)
 800505e:	46bd      	mov	sp, r7
 8005060:	b006      	add	sp, #24
 8005062:	bd80      	pop	{r7, pc}
 8005064:	10110000 	.word	0x10110000
 8005068:	50000400 	.word	0x50000400
 800506c:	08005071 	.word	0x08005071

08005070 <InterruptTest>:
void InterruptTest()
{   static int i=0;
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  //  char data[5];
	PRINTF("push button\r\n");
 8005074:	4b13      	ldr	r3, [pc, #76]	; (80050c4 <InterruptTest+0x54>)
 8005076:	0018      	movs	r0, r3
 8005078:	f016 f9d2 	bl	801b420 <TraceSend>
	i++;
 800507c:	4b12      	ldr	r3, [pc, #72]	; (80050c8 <InterruptTest+0x58>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <InterruptTest+0x58>)
 8005084:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);
 8005086:	4b11      	ldr	r3, [pc, #68]	; (80050cc <InterruptTest+0x5c>)
 8005088:	2201      	movs	r2, #1
 800508a:	2180      	movs	r1, #128	; 0x80
 800508c:	0018      	movs	r0, r3
 800508e:	f004 ffdb 	bl	800a048 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8005092:	23fa      	movs	r3, #250	; 0xfa
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	0018      	movs	r0, r3
 8005098:	f000 f832 	bl	8005100 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_RESET);
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <InterruptTest+0x5c>)
 800509e:	2200      	movs	r2, #0
 80050a0:	2180      	movs	r1, #128	; 0x80
 80050a2:	0018      	movs	r0, r3
 80050a4:	f004 ffd0 	bl	800a048 <HAL_GPIO_WritePin>
	sprintf(dat,"press=%d\r\n",i);
 80050a8:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <InterruptTest+0x58>)
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	4908      	ldr	r1, [pc, #32]	; (80050d0 <InterruptTest+0x60>)
 80050ae:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <InterruptTest+0x64>)
 80050b0:	0018      	movs	r0, r3
 80050b2:	f016 fb49 	bl	801b748 <siprintf>
	PRINTF(dat);
 80050b6:	4b07      	ldr	r3, [pc, #28]	; (80050d4 <InterruptTest+0x64>)
 80050b8:	0018      	movs	r0, r3
 80050ba:	f016 f9b1 	bl	801b420 <TraceSend>
}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	0801c378 	.word	0x0801c378
 80050c8:	200002ec 	.word	0x200002ec
 80050cc:	50000400 	.word	0x50000400
 80050d0:	0801c388 	.word	0x0801c388
 80050d4:	20001574 	.word	0x20001574

080050d8 <OnTimerLedEvent>:
	          PRINTF(msg);
}

#ifdef USE_B_L072Z_LRWAN1
static void OnTimerLedEvent(void *context)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  LED_Off(LED_RED1) ;
 80050e0:	2001      	movs	r0, #1
 80050e2:	f000 ffe7 	bl	80060b4 <BSP_LED_Off>
}
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	46bd      	mov	sp, r7
 80050ea:	b002      	add	sp, #8
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Return function status */
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	0018      	movs	r0, r3
 80050fa:	46bd      	mov	sp, r7
 80050fc:	b002      	add	sp, #8
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	0018      	movs	r0, r3
 800510c:	f7ff f848 	bl	80041a0 <HW_RTC_DelayMs>
}
 8005110:	46c0      	nop			; (mov r8, r8)
 8005112:	46bd      	mov	sp, r7
 8005114:	b002      	add	sp, #8
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 800511c:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <HAL_MspInit+0x40>)
 800511e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005120:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <HAL_MspInit+0x40>)
 8005122:	2180      	movs	r1, #128	; 0x80
 8005124:	0549      	lsls	r1, r1, #21
 8005126:	430a      	orrs	r2, r1
 8005128:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 800512a:	f005 fd95 	bl	800ac58 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 800512e:	f005 fe13 	bl	800ad58 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8005132:	4b0a      	ldr	r3, [pc, #40]	; (800515c <HAL_MspInit+0x44>)
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	4b09      	ldr	r3, [pc, #36]	; (800515c <HAL_MspInit+0x44>)
 8005138:	2108      	movs	r1, #8
 800513a:	430a      	orrs	r2, r1
 800513c:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 800513e:	4b07      	ldr	r3, [pc, #28]	; (800515c <HAL_MspInit+0x44>)
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <HAL_MspInit+0x44>)
 8005144:	2108      	movs	r1, #8
 8005146:	438a      	bics	r2, r1
 8005148:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 800514a:	f005 fdf7 	bl	800ad3c <HAL_PWREx_EnableFastWakeUp>
#else
  HAL_PWREx_DisableFastWakeUp();
#endif

  HW_GpioInit();
 800514e:	f000 f8fd 	bl	800534c <HW_GpioInit>
}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40021000 	.word	0x40021000
 800515c:	40022000 	.word	0x40022000

08005160 <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including
  *        the backup registers) and RCC_CSR register are set to their reset values.
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8005160:	b590      	push	{r4, r7, lr}
 8005162:	b09b      	sub	sp, #108	; 0x6c
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005168:	2430      	movs	r4, #48	; 0x30
 800516a:	193b      	adds	r3, r7, r4
 800516c:	0018      	movs	r0, r3
 800516e:	2338      	movs	r3, #56	; 0x38
 8005170:	001a      	movs	r2, r3
 8005172:	2100      	movs	r1, #0
 8005174:	f016 fae0 	bl	801b738 <memset>
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 8005178:	230c      	movs	r3, #12
 800517a:	18fb      	adds	r3, r7, r3
 800517c:	0018      	movs	r0, r3
 800517e:	2324      	movs	r3, #36	; 0x24
 8005180:	001a      	movs	r2, r3
 8005182:	2100      	movs	r1, #0
 8005184:	f016 fad8 	bl	801b738 <memset>

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 8005188:	193b      	adds	r3, r7, r4
 800518a:	2204      	movs	r2, #4
 800518c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800518e:	193b      	adds	r3, r7, r4
 8005190:	2200      	movs	r2, #0
 8005192:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005194:	193b      	adds	r3, r7, r4
 8005196:	2280      	movs	r2, #128	; 0x80
 8005198:	0052      	lsls	r2, r2, #1
 800519a:	609a      	str	r2, [r3, #8]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800519c:	193b      	adds	r3, r7, r4
 800519e:	0018      	movs	r0, r3
 80051a0:	f005 fde8 	bl	800ad74 <HAL_RCC_OscConfig>
 80051a4:	1e03      	subs	r3, r0, #0
 80051a6:	d001      	beq.n	80051ac <HAL_RTC_MspInit+0x4c>
  {
    Error_Handler();
 80051a8:	f7fe fd58 	bl	8003c5c <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80051ac:	210c      	movs	r1, #12
 80051ae:	187b      	adds	r3, r7, r1
 80051b0:	2220      	movs	r2, #32
 80051b2:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80051b4:	187b      	adds	r3, r7, r1
 80051b6:	2280      	movs	r2, #128	; 0x80
 80051b8:	0252      	lsls	r2, r2, #9
 80051ba:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80051bc:	187b      	adds	r3, r7, r1
 80051be:	0018      	movs	r0, r3
 80051c0:	f006 fb8c 	bl	800b8dc <HAL_RCCEx_PeriphCLKConfig>
 80051c4:	1e03      	subs	r3, r0, #0
 80051c6:	d001      	beq.n	80051cc <HAL_RTC_MspInit+0x6c>
  {
    Error_Handler();
 80051c8:	f7fe fd48 	bl	8003c5c <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 80051cc:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <HAL_RTC_MspInit+0x94>)
 80051ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051d0:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <HAL_RTC_MspInit+0x94>)
 80051d2:	2180      	movs	r1, #128	; 0x80
 80051d4:	02c9      	lsls	r1, r1, #11
 80051d6:	430a      	orrs	r2, r1
 80051d8:	651a      	str	r2, [r3, #80]	; 0x50

  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 80051da:	2200      	movs	r2, #0
 80051dc:	2100      	movs	r1, #0
 80051de:	2002      	movs	r0, #2
 80051e0:	f004 fb8c 	bl	80098fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80051e4:	2002      	movs	r0, #2
 80051e6:	f004 fb9e 	bl	8009926 <HAL_NVIC_EnableIRQ>
}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	46bd      	mov	sp, r7
 80051ee:	b01b      	add	sp, #108	; 0x6c
 80051f0:	bd90      	pop	{r4, r7, pc}
 80051f2:	46c0      	nop			; (mov r8, r8)
 80051f4:	40021000 	.word	0x40021000

080051f8 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  TimerIrqHandler();
 8005200:	f015 ff1a 	bl	801b038 <TimerIrqHandler>
}
 8005204:	46c0      	nop			; (mov r8, r8)
 8005206:	46bd      	mov	sp, r7
 8005208:	b002      	add	sp, #8
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	0002      	movs	r2, r0
 8005214:	1dbb      	adds	r3, r7, #6
 8005216:	801a      	strh	r2, [r3, #0]
  HW_GPIO_IrqHandler(GPIO_Pin);
 8005218:	1dbb      	adds	r3, r7, #6
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	0018      	movs	r0, r3
 800521e:	f7fe fdd9 	bl	8003dd4 <HW_GPIO_IrqHandler>
}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	46bd      	mov	sp, r7
 8005226:	b002      	add	sp, #8
 8005228:	bd80      	pop	{r7, pc}

0800522a <MSP_GetIRQn>:
  * @brief  Gets IRQ number as a function of the GPIO_Pin.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn(uint16_t GPIO_Pin)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	0002      	movs	r2, r0
 8005232:	1dbb      	adds	r3, r7, #6
 8005234:	801a      	strh	r2, [r3, #0]
  switch (GPIO_Pin)
 8005236:	1dbb      	adds	r3, r7, #6
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	2b04      	cmp	r3, #4
 800523c:	d009      	beq.n	8005252 <MSP_GetIRQn+0x28>
 800523e:	dc03      	bgt.n	8005248 <MSP_GetIRQn+0x1e>
 8005240:	3b01      	subs	r3, #1
 8005242:	2b01      	cmp	r3, #1
 8005244:	d807      	bhi.n	8005256 <MSP_GetIRQn+0x2c>
 8005246:	e002      	b.n	800524e <MSP_GetIRQn+0x24>
 8005248:	2b08      	cmp	r3, #8
 800524a:	d002      	beq.n	8005252 <MSP_GetIRQn+0x28>
 800524c:	e003      	b.n	8005256 <MSP_GetIRQn+0x2c>
  {
    case GPIO_PIN_0:
    case GPIO_PIN_1:
      return EXTI0_1_IRQn;
 800524e:	2305      	movs	r3, #5
 8005250:	e002      	b.n	8005258 <MSP_GetIRQn+0x2e>
    case GPIO_PIN_2:
    case GPIO_PIN_3:
      return EXTI2_3_IRQn;
 8005252:	2306      	movs	r3, #6
 8005254:	e000      	b.n	8005258 <MSP_GetIRQn+0x2e>
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
    default:
      return EXTI4_15_IRQn;
 8005256:	2307      	movs	r3, #7
  }
}
 8005258:	0018      	movs	r0, r3
 800525a:	46bd      	mov	sp, r7
 800525c:	b002      	add	sp, #8
 800525e:	bd80      	pop	{r7, pc}

08005260 <HW_Init>:
  * @brief This function initializes the hardware
  * @param None
  * @retval None
  */
void HW_Init(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  if (McuInitialized == false)
 8005264:	4b13      	ldr	r3, [pc, #76]	; (80052b4 <HW_Init+0x54>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2201      	movs	r2, #1
 800526a:	4053      	eors	r3, r2
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d01d      	beq.n	80052ae <HW_Init+0x4e>
#if defined( USE_BOOTLOADER )
    /* Set the Vector Table base location at 0x3000 */
    NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
#endif

    HW_AdcInit();
 8005272:	f000 fa6b 	bl	800574c <HW_AdcInit>

    Radio.IoInit();
 8005276:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <HW_Init+0x58>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4798      	blx	r3

    //12c init
    MX_I2C1_Init();
 800527c:	f7ff fb34 	bl	80048e8 <MX_I2C1_Init>

    HW_SPI_Init();
 8005280:	f7ff fa56 	bl	8004730 <HW_SPI_Init>


    HW_RTC_Init();
 8005284:	f7fe fe30 	bl	8003ee8 <HW_RTC_Init>

    TraceInit();
 8005288:	f016 f8b4 	bl	801b3f4 <TraceInit>

   // BSP_sensor_Init();
 //******** bme sensor init*********//
    BMEinit();
 800528c:	f7fd fefa 	bl	8003084 <BMEinit>
    BSP_LED_Init(LED1);
 8005290:	2000      	movs	r0, #0
 8005292:	f000 fe85 	bl	8005fa0 <BSP_LED_Init>
    BSP_LED_Init(LED2);
 8005296:	2001      	movs	r0, #1
 8005298:	f000 fe82 	bl	8005fa0 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 800529c:	2002      	movs	r0, #2
 800529e:	f000 fe7f 	bl	8005fa0 <BSP_LED_Init>
    BSP_LED_Init(LED4);
 80052a2:	2003      	movs	r0, #3
 80052a4:	f000 fe7c 	bl	8005fa0 <BSP_LED_Init>

    McuInitialized = true;
 80052a8:	4b02      	ldr	r3, [pc, #8]	; (80052b4 <HW_Init+0x54>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	701a      	strb	r2, [r3, #0]
  }
}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	2000034d 	.word	0x2000034d
 80052b8:	0801cb08 	.word	0x0801cb08

080052bc <HW_IoInit>:
  * @brief This function Initializes the hardware Ios
  * @param None
  * @retval None
  */
static void HW_IoInit(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  HW_SPI_IoInit();
 80052c0:	f7ff fa7c 	bl	80047bc <HW_SPI_IoInit>

  Radio.IoInit();
 80052c4:	4b03      	ldr	r3, [pc, #12]	; (80052d4 <HW_IoInit+0x18>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4798      	blx	r3

  vcom_IoInit();
 80052ca:	f000 fdbd 	bl	8005e48 <vcom_IoInit>
}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	0801cb08 	.word	0x0801cb08

080052d8 <HW_IoDeInit>:
  * @brief This function Deinitializes the hardware Ios
  * @param None
  * @retval None
  */
static void HW_IoDeInit(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
  /*  HW_SPI_IoDeInit( );*/
  GPIO_InitTypeDef initStruct = {0};
 80052de:	1d3b      	adds	r3, r7, #4
 80052e0:	0018      	movs	r0, r3
 80052e2:	2314      	movs	r3, #20
 80052e4:	001a      	movs	r2, r3
 80052e6:	2100      	movs	r1, #0
 80052e8:	f016 fa26 	bl	801b738 <memset>

  initStruct.Mode = GPIO_MODE_ANALOG;
 80052ec:	1d3b      	adds	r3, r7, #4
 80052ee:	2203      	movs	r2, #3
 80052f0:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 80052f2:	1d3b      	adds	r3, r7, #4
 80052f4:	2200      	movs	r2, #0
 80052f6:	609a      	str	r2, [r3, #8]
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 80052f8:	1d3a      	adds	r2, r7, #4
 80052fa:	23a0      	movs	r3, #160	; 0xa0
 80052fc:	05db      	lsls	r3, r3, #23
 80052fe:	2180      	movs	r1, #128	; 0x80
 8005300:	0018      	movs	r0, r3
 8005302:	f7fe fcb5 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 8005306:	1d3a      	adds	r2, r7, #4
 8005308:	23a0      	movs	r3, #160	; 0xa0
 800530a:	05db      	lsls	r3, r3, #23
 800530c:	2140      	movs	r1, #64	; 0x40
 800530e:	0018      	movs	r0, r3
 8005310:	f7fe fcae 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 8005314:	1d3b      	adds	r3, r7, #4
 8005316:	480b      	ldr	r0, [pc, #44]	; (8005344 <HW_IoDeInit+0x6c>)
 8005318:	001a      	movs	r2, r3
 800531a:	2108      	movs	r1, #8
 800531c:	f7fe fca8 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 8005320:	1d3a      	adds	r2, r7, #4
 8005322:	2380      	movs	r3, #128	; 0x80
 8005324:	0219      	lsls	r1, r3, #8
 8005326:	23a0      	movs	r3, #160	; 0xa0
 8005328:	05db      	lsls	r3, r3, #23
 800532a:	0018      	movs	r0, r3
 800532c:	f7fe fca0 	bl	8003c70 <HW_GPIO_Init>


  Radio.IoDeInit();
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <HW_IoDeInit+0x70>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4798      	blx	r3

  vcom_IoDeInit();
 8005336:	f000 fdd3 	bl	8005ee0 <vcom_IoDeInit>
}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	46bd      	mov	sp, r7
 800533e:	b006      	add	sp, #24
 8005340:	bd80      	pop	{r7, pc}
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	50000400 	.word	0x50000400
 8005348:	0801cb08 	.word	0x0801cb08

0800534c <HW_GpioInit>:


void HW_GpioInit(void)
{
 800534c:	b590      	push	{r4, r7, lr}
 800534e:	b08b      	sub	sp, #44	; 0x2c
 8005350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005352:	2414      	movs	r4, #20
 8005354:	193b      	adds	r3, r7, r4
 8005356:	0018      	movs	r0, r3
 8005358:	2314      	movs	r3, #20
 800535a:	001a      	movs	r2, r3
 800535c:	2100      	movs	r1, #0
 800535e:	f016 f9eb 	bl	801b738 <memset>

  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005362:	4b38      	ldr	r3, [pc, #224]	; (8005444 <HW_GpioInit+0xf8>)
 8005364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005366:	4b37      	ldr	r3, [pc, #220]	; (8005444 <HW_GpioInit+0xf8>)
 8005368:	2101      	movs	r1, #1
 800536a:	430a      	orrs	r2, r1
 800536c:	62da      	str	r2, [r3, #44]	; 0x2c
 800536e:	4b35      	ldr	r3, [pc, #212]	; (8005444 <HW_GpioInit+0xf8>)
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	2201      	movs	r2, #1
 8005374:	4013      	ands	r3, r2
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800537a:	4b32      	ldr	r3, [pc, #200]	; (8005444 <HW_GpioInit+0xf8>)
 800537c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537e:	4b31      	ldr	r3, [pc, #196]	; (8005444 <HW_GpioInit+0xf8>)
 8005380:	2102      	movs	r1, #2
 8005382:	430a      	orrs	r2, r1
 8005384:	62da      	str	r2, [r3, #44]	; 0x2c
 8005386:	4b2f      	ldr	r3, [pc, #188]	; (8005444 <HW_GpioInit+0xf8>)
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	2202      	movs	r2, #2
 800538c:	4013      	ands	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005392:	4b2c      	ldr	r3, [pc, #176]	; (8005444 <HW_GpioInit+0xf8>)
 8005394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005396:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <HW_GpioInit+0xf8>)
 8005398:	2104      	movs	r1, #4
 800539a:	430a      	orrs	r2, r1
 800539c:	62da      	str	r2, [r3, #44]	; 0x2c
 800539e:	4b29      	ldr	r3, [pc, #164]	; (8005444 <HW_GpioInit+0xf8>)
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	2204      	movs	r2, #4
 80053a4:	4013      	ands	r3, r2
 80053a6:	60bb      	str	r3, [r7, #8]
 80053a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80053aa:	4b26      	ldr	r3, [pc, #152]	; (8005444 <HW_GpioInit+0xf8>)
 80053ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ae:	4b25      	ldr	r3, [pc, #148]	; (8005444 <HW_GpioInit+0xf8>)
 80053b0:	2180      	movs	r1, #128	; 0x80
 80053b2:	430a      	orrs	r2, r1
 80053b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80053b6:	4b23      	ldr	r3, [pc, #140]	; (8005444 <HW_GpioInit+0xf8>)
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	2280      	movs	r2, #128	; 0x80
 80053bc:	4013      	ands	r3, r2
 80053be:	607b      	str	r3, [r7, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053c2:	193b      	adds	r3, r7, r4
 80053c4:	2203      	movs	r2, #3
 80053c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c8:	193b      	adds	r3, r7, r4
 80053ca:	2200      	movs	r2, #0
 80053cc:	609a      	str	r2, [r3, #8]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 80053ce:	193b      	adds	r3, r7, r4
 80053d0:	4a1d      	ldr	r2, [pc, #116]	; (8005448 <HW_GpioInit+0xfc>)
 80053d2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053d4:	193a      	adds	r2, r7, r4
 80053d6:	23a0      	movs	r3, #160	; 0xa0
 80053d8:	05db      	lsls	r3, r3, #23
 80053da:	0011      	movs	r1, r2
 80053dc:	0018      	movs	r0, r3
 80053de:	f004 fcb5 	bl	8009d4c <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 80053e2:	193b      	adds	r3, r7, r4
 80053e4:	4a19      	ldr	r2, [pc, #100]	; (800544c <HW_GpioInit+0x100>)
 80053e6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053e8:	193b      	adds	r3, r7, r4
 80053ea:	4a19      	ldr	r2, [pc, #100]	; (8005450 <HW_GpioInit+0x104>)
 80053ec:	0019      	movs	r1, r3
 80053ee:	0010      	movs	r0, r2
 80053f0:	f004 fcac 	bl	8009d4c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053f4:	193b      	adds	r3, r7, r4
 80053f6:	4a17      	ldr	r2, [pc, #92]	; (8005454 <HW_GpioInit+0x108>)
 80053f8:	0019      	movs	r1, r3
 80053fa:	0010      	movs	r0, r2
 80053fc:	f004 fca6 	bl	8009d4c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005400:	193b      	adds	r3, r7, r4
 8005402:	4a15      	ldr	r2, [pc, #84]	; (8005458 <HW_GpioInit+0x10c>)
 8005404:	0019      	movs	r1, r3
 8005406:	0010      	movs	r0, r2
 8005408:	f004 fca0 	bl	8009d4c <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 800540c:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <HW_GpioInit+0xf8>)
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <HW_GpioInit+0xf8>)
 8005412:	2101      	movs	r1, #1
 8005414:	438a      	bics	r2, r1
 8005416:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <HW_GpioInit+0xf8>)
 800541a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800541c:	4b09      	ldr	r3, [pc, #36]	; (8005444 <HW_GpioInit+0xf8>)
 800541e:	2102      	movs	r1, #2
 8005420:	438a      	bics	r2, r1
 8005422:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8005424:	4b07      	ldr	r3, [pc, #28]	; (8005444 <HW_GpioInit+0xf8>)
 8005426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005428:	4b06      	ldr	r3, [pc, #24]	; (8005444 <HW_GpioInit+0xf8>)
 800542a:	2104      	movs	r1, #4
 800542c:	438a      	bics	r2, r1
 800542e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8005430:	4b04      	ldr	r3, [pc, #16]	; (8005444 <HW_GpioInit+0xf8>)
 8005432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005434:	4b03      	ldr	r3, [pc, #12]	; (8005444 <HW_GpioInit+0xf8>)
 8005436:	2180      	movs	r1, #128	; 0x80
 8005438:	438a      	bics	r2, r1
 800543a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800543c:	46c0      	nop			; (mov r8, r8)
 800543e:	46bd      	mov	sp, r7
 8005440:	b00b      	add	sp, #44	; 0x2c
 8005442:	bd90      	pop	{r4, r7, pc}
 8005444:	40021000 	.word	0x40021000
 8005448:	00009fff 	.word	0x00009fff
 800544c:	0000ffff 	.word	0x0000ffff
 8005450:	50000400 	.word	0x50000400
 8005454:	50000800 	.word	0x50000800
 8005458:	50001c00 	.word	0x50001c00

0800545c <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config(void)
{
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b09d      	sub	sp, #116	; 0x74
 8005460:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005462:	235c      	movs	r3, #92	; 0x5c
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	0018      	movs	r0, r3
 8005468:	2314      	movs	r3, #20
 800546a:	001a      	movs	r2, r3
 800546c:	2100      	movs	r1, #0
 800546e:	f016 f963 	bl	801b738 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005472:	2424      	movs	r4, #36	; 0x24
 8005474:	193b      	adds	r3, r7, r4
 8005476:	0018      	movs	r0, r3
 8005478:	2338      	movs	r3, #56	; 0x38
 800547a:	001a      	movs	r2, r3
 800547c:	2100      	movs	r1, #0
 800547e:	f016 f95b 	bl	801b738 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005482:	003b      	movs	r3, r7
 8005484:	0018      	movs	r0, r3
 8005486:	2324      	movs	r3, #36	; 0x24
 8005488:	001a      	movs	r2, r3
 800548a:	2100      	movs	r1, #0
 800548c:	f016 f954 	bl	801b738 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8005490:	0021      	movs	r1, r4
 8005492:	187b      	adds	r3, r7, r1
 8005494:	2202      	movs	r2, #2
 8005496:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 8005498:	187b      	adds	r3, r7, r1
 800549a:	2200      	movs	r2, #0
 800549c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800549e:	187b      	adds	r3, r7, r1
 80054a0:	2201      	movs	r2, #1
 80054a2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80054a4:	187b      	adds	r3, r7, r1
 80054a6:	2210      	movs	r2, #16
 80054a8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 80054aa:	187b      	adds	r3, r7, r1
 80054ac:	2202      	movs	r2, #2
 80054ae:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 80054b0:	187b      	adds	r3, r7, r1
 80054b2:	2200      	movs	r2, #0
 80054b4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 80054b6:	187b      	adds	r3, r7, r1
 80054b8:	2280      	movs	r2, #128	; 0x80
 80054ba:	0312      	lsls	r2, r2, #12
 80054bc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 80054be:	187b      	adds	r3, r7, r1
 80054c0:	2280      	movs	r2, #128	; 0x80
 80054c2:	0412      	lsls	r2, r2, #16
 80054c4:	635a      	str	r2, [r3, #52]	; 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054c6:	187b      	adds	r3, r7, r1
 80054c8:	0018      	movs	r0, r3
 80054ca:	f005 fc53 	bl	800ad74 <HAL_RCC_OscConfig>
 80054ce:	1e03      	subs	r3, r0, #0
 80054d0:	d001      	beq.n	80054d6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80054d2:	f7fe fbc3 	bl	8003c5c <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 80054d6:	4b21      	ldr	r3, [pc, #132]	; (800555c <SystemClock_Config+0x100>)
 80054d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054da:	4b20      	ldr	r3, [pc, #128]	; (800555c <SystemClock_Config+0x100>)
 80054dc:	2180      	movs	r1, #128	; 0x80
 80054de:	0549      	lsls	r1, r1, #21
 80054e0:	430a      	orrs	r2, r1
 80054e2:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80054e4:	4b1e      	ldr	r3, [pc, #120]	; (8005560 <SystemClock_Config+0x104>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1e      	ldr	r2, [pc, #120]	; (8005564 <SystemClock_Config+0x108>)
 80054ea:	401a      	ands	r2, r3
 80054ec:	4b1c      	ldr	r3, [pc, #112]	; (8005560 <SystemClock_Config+0x104>)
 80054ee:	2180      	movs	r1, #128	; 0x80
 80054f0:	0109      	lsls	r1, r1, #4
 80054f2:	430a      	orrs	r2, r1
 80054f4:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	4b19      	ldr	r3, [pc, #100]	; (8005560 <SystemClock_Config+0x104>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	2210      	movs	r2, #16
 80054fe:	4013      	ands	r3, r2
 8005500:	2b10      	cmp	r3, #16
 8005502:	d0f9      	beq.n	80054f8 <SystemClock_Config+0x9c>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8005504:	215c      	movs	r1, #92	; 0x5c
 8005506:	187b      	adds	r3, r7, r1
 8005508:	220f      	movs	r2, #15
 800550a:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800550c:	187b      	adds	r3, r7, r1
 800550e:	2203      	movs	r2, #3
 8005510:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005512:	187b      	adds	r3, r7, r1
 8005514:	2200      	movs	r2, #0
 8005516:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005518:	187b      	adds	r3, r7, r1
 800551a:	2200      	movs	r2, #0
 800551c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800551e:	187b      	adds	r3, r7, r1
 8005520:	2200      	movs	r2, #0
 8005522:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005524:	187b      	adds	r3, r7, r1
 8005526:	2101      	movs	r1, #1
 8005528:	0018      	movs	r0, r3
 800552a:	f005 fff3 	bl	800b514 <HAL_RCC_ClockConfig>
 800552e:	1e03      	subs	r3, r0, #0
 8005530:	d001      	beq.n	8005536 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8005532:	f7fe fb93 	bl	8003c5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005536:	003b      	movs	r3, r7
 8005538:	2208      	movs	r2, #8
 800553a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800553c:	003b      	movs	r3, r7
 800553e:	2200      	movs	r2, #0
 8005540:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005542:	003b      	movs	r3, r7
 8005544:	0018      	movs	r0, r3
 8005546:	f006 f9c9 	bl	800b8dc <HAL_RCCEx_PeriphCLKConfig>
 800554a:	1e03      	subs	r3, r0, #0
 800554c:	d001      	beq.n	8005552 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800554e:	f7fe fb85 	bl	8003c5c <Error_Handler>
  }
}
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	46bd      	mov	sp, r7
 8005556:	b01d      	add	sp, #116	; 0x74
 8005558:	bd90      	pop	{r4, r7, pc}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	40021000 	.word	0x40021000
 8005560:	40007000 	.word	0x40007000
 8005564:	ffffe7ff 	.word	0xffffe7ff

08005568 <HW_GetRandomSeed>:
  * @note based on the device unique ID
  * @param None
  * @retval see
  */
uint32_t HW_GetRandomSeed(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  return ((*(uint32_t *)ID1) ^ (*(uint32_t *)ID2) ^ (*(uint32_t *)ID3));
 800556c:	4b05      	ldr	r3, [pc, #20]	; (8005584 <HW_GetRandomSeed+0x1c>)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <HW_GetRandomSeed+0x20>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	405a      	eors	r2, r3
 8005576:	4b05      	ldr	r3, [pc, #20]	; (800558c <HW_GetRandomSeed+0x24>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4053      	eors	r3, r2
}
 800557c:	0018      	movs	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	1ff80050 	.word	0x1ff80050
 8005588:	1ff80054 	.word	0x1ff80054
 800558c:	1ff80064 	.word	0x1ff80064

08005590 <HW_GetUniqueId>:
  * @brief This function return a unique ID
  * @param unique ID
  * @retval none
  */
void HW_GetUniqueId(uint8_t *id)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 8005598:	4b23      	ldr	r3, [pc, #140]	; (8005628 <HW_GetUniqueId+0x98>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	4b23      	ldr	r3, [pc, #140]	; (800562c <HW_GetUniqueId+0x9c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	18d3      	adds	r3, r2, r3
 80055a2:	0e1a      	lsrs	r2, r3, #24
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3307      	adds	r3, #7
 80055a8:	b2d2      	uxtb	r2, r2
 80055aa:	701a      	strb	r2, [r3, #0]
  id[6] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 16;
 80055ac:	4b1e      	ldr	r3, [pc, #120]	; (8005628 <HW_GetUniqueId+0x98>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	4b1e      	ldr	r3, [pc, #120]	; (800562c <HW_GetUniqueId+0x9c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	18d3      	adds	r3, r2, r3
 80055b6:	0c1a      	lsrs	r2, r3, #16
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3306      	adds	r3, #6
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	701a      	strb	r2, [r3, #0]
  id[5] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 8;
 80055c0:	4b19      	ldr	r3, [pc, #100]	; (8005628 <HW_GetUniqueId+0x98>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4b19      	ldr	r3, [pc, #100]	; (800562c <HW_GetUniqueId+0x9c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	18d3      	adds	r3, r2, r3
 80055ca:	0a1a      	lsrs	r2, r3, #8
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3305      	adds	r3, #5
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	701a      	strb	r2, [r3, #0]
  id[4] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3));
 80055d4:	4b14      	ldr	r3, [pc, #80]	; (8005628 <HW_GetUniqueId+0x98>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	b2d9      	uxtb	r1, r3
 80055da:	4b14      	ldr	r3, [pc, #80]	; (800562c <HW_GetUniqueId+0x9c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3304      	adds	r3, #4
 80055e4:	188a      	adds	r2, r1, r2
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]
  id[3] = ((*(uint32_t *)ID2)) >> 24;
 80055ea:	4b11      	ldr	r3, [pc, #68]	; (8005630 <HW_GetUniqueId+0xa0>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	0e1a      	lsrs	r2, r3, #24
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3303      	adds	r3, #3
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	701a      	strb	r2, [r3, #0]
  id[2] = ((*(uint32_t *)ID2)) >> 16;
 80055f8:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <HW_GetUniqueId+0xa0>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	0c1a      	lsrs	r2, r3, #16
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3302      	adds	r3, #2
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]
  id[1] = ((*(uint32_t *)ID2)) >> 8;
 8005606:	4b0a      	ldr	r3, [pc, #40]	; (8005630 <HW_GetUniqueId+0xa0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	0a1a      	lsrs	r2, r3, #8
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3301      	adds	r3, #1
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	701a      	strb	r2, [r3, #0]
  id[0] = ((*(uint32_t *)ID2));
 8005614:	4b06      	ldr	r3, [pc, #24]	; (8005630 <HW_GetUniqueId+0xa0>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	b2da      	uxtb	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	701a      	strb	r2, [r3, #0]
}
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	46bd      	mov	sp, r7
 8005622:	b002      	add	sp, #8
 8005624:	bd80      	pop	{r7, pc}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	1ff80050 	.word	0x1ff80050
 800562c:	1ff80064 	.word	0x1ff80064
 8005630:	1ff80054 	.word	0x1ff80054

08005634 <HW_GetTemperatureLevel>:

uint16_t HW_GetTemperatureLevel(void)
{
 8005634:	b590      	push	{r4, r7, lr}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
  uint16_t measuredLevel = 0;
 800563a:	1cbb      	adds	r3, r7, #2
 800563c:	2200      	movs	r2, #0
 800563e:	801a      	strh	r2, [r3, #0]
  uint32_t batteryLevelmV;
  uint16_t temperatureDegreeC;

  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 8005640:	1cbc      	adds	r4, r7, #2
 8005642:	4b25      	ldr	r3, [pc, #148]	; (80056d8 <HW_GetTemperatureLevel+0xa4>)
 8005644:	0018      	movs	r0, r3
 8005646:	f000 f8e5 	bl	8005814 <HW_AdcReadChannel>
 800564a:	0003      	movs	r3, r0
 800564c:	8023      	strh	r3, [r4, #0]

  if (measuredLevel == 0)
 800564e:	1cbb      	adds	r3, r7, #2
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d102      	bne.n	800565c <HW_GetTemperatureLevel+0x28>
  {
    batteryLevelmV = 0;
 8005656:	2300      	movs	r3, #0
 8005658:	607b      	str	r3, [r7, #4]
 800565a:	e00c      	b.n	8005676 <HW_GetTemperatureLevel+0x42>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 800565c:	4b1f      	ldr	r3, [pc, #124]	; (80056dc <HW_GetTemperatureLevel+0xa8>)
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	001a      	movs	r2, r3
 8005662:	4b1f      	ldr	r3, [pc, #124]	; (80056e0 <HW_GetTemperatureLevel+0xac>)
 8005664:	435a      	muls	r2, r3
 8005666:	1cbb      	adds	r3, r7, #2
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	0019      	movs	r1, r3
 800566c:	0010      	movs	r0, r2
 800566e:	f7fa fd4b 	bl	8000108 <__udivsi3>
 8005672:	0003      	movs	r3, r0
 8005674:	607b      	str	r3, [r7, #4]
  }
#if 0
  PRINTF("VDDA= %d\n\r", batteryLevelmV);
#endif

  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_TEMPSENSOR);
 8005676:	1cbc      	adds	r4, r7, #2
 8005678:	4b1a      	ldr	r3, [pc, #104]	; (80056e4 <HW_GetTemperatureLevel+0xb0>)
 800567a:	0018      	movs	r0, r3
 800567c:	f000 f8ca 	bl	8005814 <HW_AdcReadChannel>
 8005680:	0003      	movs	r3, r0
 8005682:	8023      	strh	r3, [r4, #0]

  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8005684:	1cbb      	adds	r3, r7, #2
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	4353      	muls	r3, r2
 800568c:	4914      	ldr	r1, [pc, #80]	; (80056e0 <HW_GetTemperatureLevel+0xac>)
 800568e:	0018      	movs	r0, r3
 8005690:	f7fa fd3a 	bl	8000108 <__udivsi3>
 8005694:	0003      	movs	r3, r0
 8005696:	001a      	movs	r2, r3
 8005698:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <HW_GetTemperatureLevel+0xb4>)
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	1ad2      	subs	r2, r2, r3
 800569e:	0013      	movs	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	189b      	adds	r3, r3, r2
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	021a      	lsls	r2, r3, #8
 80056a8:	4b10      	ldr	r3, [pc, #64]	; (80056ec <HW_GetTemperatureLevel+0xb8>)
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	0019      	movs	r1, r3
 80056ae:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <HW_GetTemperatureLevel+0xb4>)
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	1acb      	subs	r3, r1, r3
 80056b4:	0019      	movs	r1, r3
 80056b6:	0010      	movs	r0, r2
 80056b8:	f7fa fdb0 	bl	800021c <__divsi3>
 80056bc:	0003      	movs	r3, r0
 80056be:	b29a      	uxth	r2, r3
 80056c0:	003b      	movs	r3, r7
 80056c2:	21f0      	movs	r1, #240	; 0xf0
 80056c4:	0149      	lsls	r1, r1, #5
 80056c6:	468c      	mov	ip, r1
 80056c8:	4462      	add	r2, ip
 80056ca:	801a      	strh	r2, [r3, #0]
    uint16_t temperatureDegreeC_Frac = ((temperatureDegreeC - (temperatureDegreeC_Int << 8)) * 100) >> 8;
    PRINTF("temp= %d, %d,%d\n\r", temperatureDegreeC, temperatureDegreeC_Int, temperatureDegreeC_Frac);
  }
#endif

  return (uint16_t) temperatureDegreeC;
 80056cc:	003b      	movs	r3, r7
 80056ce:	881b      	ldrh	r3, [r3, #0]
}
 80056d0:	0018      	movs	r0, r3
 80056d2:	46bd      	mov	sp, r7
 80056d4:	b003      	add	sp, #12
 80056d6:	bd90      	pop	{r4, r7, pc}
 80056d8:	44020000 	.word	0x44020000
 80056dc:	1ff80078 	.word	0x1ff80078
 80056e0:	00000bb8 	.word	0x00000bb8
 80056e4:	48040000 	.word	0x48040000
 80056e8:	1ff8007a 	.word	0x1ff8007a
 80056ec:	1ff8007e 	.word	0x1ff8007e

080056f0 <HW_GetBatteryLevel>:
  * @brief This function return the battery level
  * @param none
  * @retval the battery level in mV
  */
uint16_t HW_GetBatteryLevel(void)
{
 80056f0:	b590      	push	{r4, r7, lr}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
  uint16_t measuredLevel = 0;
 80056f6:	1cbb      	adds	r3, r7, #2
 80056f8:	2200      	movs	r2, #0
 80056fa:	801a      	strh	r2, [r3, #0]
  uint32_t batteryLevelmV;

  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 80056fc:	1cbc      	adds	r4, r7, #2
 80056fe:	4b10      	ldr	r3, [pc, #64]	; (8005740 <HW_GetBatteryLevel+0x50>)
 8005700:	0018      	movs	r0, r3
 8005702:	f000 f887 	bl	8005814 <HW_AdcReadChannel>
 8005706:	0003      	movs	r3, r0
 8005708:	8023      	strh	r3, [r4, #0]

  if (measuredLevel == 0)
 800570a:	1cbb      	adds	r3, r7, #2
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d102      	bne.n	8005718 <HW_GetBatteryLevel+0x28>
  {
    batteryLevelmV = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	607b      	str	r3, [r7, #4]
 8005716:	e00c      	b.n	8005732 <HW_GetBatteryLevel+0x42>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 8005718:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <HW_GetBatteryLevel+0x54>)
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	001a      	movs	r2, r3
 800571e:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <HW_GetBatteryLevel+0x58>)
 8005720:	435a      	muls	r2, r3
 8005722:	1cbb      	adds	r3, r7, #2
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	0019      	movs	r1, r3
 8005728:	0010      	movs	r0, r2
 800572a:	f7fa fced 	bl	8000108 <__udivsi3>
 800572e:	0003      	movs	r3, r0
 8005730:	607b      	str	r3, [r7, #4]
  }

  return batteryLevelmV;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	b29b      	uxth	r3, r3
}
 8005736:	0018      	movs	r0, r3
 8005738:	46bd      	mov	sp, r7
 800573a:	b003      	add	sp, #12
 800573c:	bd90      	pop	{r4, r7, pc}
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	44020000 	.word	0x44020000
 8005744:	1ff80078 	.word	0x1ff80078
 8005748:	00000bb8 	.word	0x00000bb8

0800574c <HW_AdcInit>:
  * @brief This function initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcInit(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  if (AdcInitialized == false)
 8005750:	4b24      	ldr	r3, [pc, #144]	; (80057e4 <HW_AdcInit+0x98>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2201      	movs	r2, #1
 8005756:	4053      	eors	r3, r2
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d03e      	beq.n	80057dc <HW_AdcInit+0x90>
  {
    AdcInitialized = true;
 800575e:	4b21      	ldr	r3, [pc, #132]	; (80057e4 <HW_AdcInit+0x98>)
 8005760:	2201      	movs	r2, #1
 8005762:	701a      	strb	r2, [r3, #0]


    hadc.Instance  = ADC1;
 8005764:	4b20      	ldr	r3, [pc, #128]	; (80057e8 <HW_AdcInit+0x9c>)
 8005766:	4a21      	ldr	r2, [pc, #132]	; (80057ec <HW_AdcInit+0xa0>)
 8005768:	601a      	str	r2, [r3, #0]

    hadc.Init.OversamplingMode      = DISABLE;
 800576a:	4b1f      	ldr	r3, [pc, #124]	; (80057e8 <HW_AdcInit+0x9c>)
 800576c:	2200      	movs	r2, #0
 800576e:	63da      	str	r2, [r3, #60]	; 0x3c

    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005770:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <HW_AdcInit+0x9c>)
 8005772:	2280      	movs	r2, #128	; 0x80
 8005774:	0612      	lsls	r2, r2, #24
 8005776:	605a      	str	r2, [r3, #4]
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 8005778:	4b1b      	ldr	r3, [pc, #108]	; (80057e8 <HW_AdcInit+0x9c>)
 800577a:	2200      	movs	r2, #0
 800577c:	61da      	str	r2, [r3, #28]
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 800577e:	4b1a      	ldr	r3, [pc, #104]	; (80057e8 <HW_AdcInit+0x9c>)
 8005780:	2201      	movs	r2, #1
 8005782:	635a      	str	r2, [r3, #52]	; 0x34
    hadc.Init.LowPowerAutoWait      = DISABLE;
 8005784:	4b18      	ldr	r3, [pc, #96]	; (80057e8 <HW_AdcInit+0x9c>)
 8005786:	2200      	movs	r2, #0
 8005788:	619a      	str	r2, [r3, #24]

    hadc.Init.Resolution            = ADC_RESOLUTION_10B;
 800578a:	4b17      	ldr	r3, [pc, #92]	; (80057e8 <HW_AdcInit+0x9c>)
 800578c:	2208      	movs	r2, #8
 800578e:	609a      	str	r2, [r3, #8]
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8005790:	4b15      	ldr	r3, [pc, #84]	; (80057e8 <HW_AdcInit+0x9c>)
 8005792:	2207      	movs	r2, #7
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8005796:	4b14      	ldr	r3, [pc, #80]	; (80057e8 <HW_AdcInit+0x9c>)
 8005798:	2201      	movs	r2, #1
 800579a:	611a      	str	r2, [r3, #16]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 800579c:	4b12      	ldr	r3, [pc, #72]	; (80057e8 <HW_AdcInit+0x9c>)
 800579e:	2200      	movs	r2, #0
 80057a0:	60da      	str	r2, [r3, #12]
    hadc.Init.ContinuousConvMode    = DISABLE;
 80057a2:	4b11      	ldr	r3, [pc, #68]	; (80057e8 <HW_AdcInit+0x9c>)
 80057a4:	2220      	movs	r2, #32
 80057a6:	2100      	movs	r1, #0
 80057a8:	5499      	strb	r1, [r3, r2]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 80057aa:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <HW_AdcInit+0x9c>)
 80057ac:	2221      	movs	r2, #33	; 0x21
 80057ae:	2100      	movs	r1, #0
 80057b0:	5499      	strb	r1, [r3, r2]
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80057b2:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <HW_AdcInit+0x9c>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	629a      	str	r2, [r3, #40]	; 0x28
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 80057b8:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <HW_AdcInit+0x9c>)
 80057ba:	2204      	movs	r2, #4
 80057bc:	615a      	str	r2, [r3, #20]
    hadc.Init.DMAContinuousRequests = DISABLE;
 80057be:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <HW_AdcInit+0x9c>)
 80057c0:	222c      	movs	r2, #44	; 0x2c
 80057c2:	2100      	movs	r1, #0
 80057c4:	5499      	strb	r1, [r3, r2]

    ADCCLK_ENABLE();
 80057c6:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <HW_AdcInit+0xa4>)
 80057c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ca:	4b09      	ldr	r3, [pc, #36]	; (80057f0 <HW_AdcInit+0xa4>)
 80057cc:	2180      	movs	r1, #128	; 0x80
 80057ce:	0089      	lsls	r1, r1, #2
 80057d0:	430a      	orrs	r2, r1
 80057d2:	635a      	str	r2, [r3, #52]	; 0x34


    HAL_ADC_Init(&hadc);
 80057d4:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <HW_AdcInit+0x9c>)
 80057d6:	0018      	movs	r0, r3
 80057d8:	f003 fab6 	bl	8008d48 <HAL_ADC_Init>

  }
}
 80057dc:	46c0      	nop			; (mov r8, r8)
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	46c0      	nop			; (mov r8, r8)
 80057e4:	2000034c 	.word	0x2000034c
 80057e8:	200002f0 	.word	0x200002f0
 80057ec:	40012400 	.word	0x40012400
 80057f0:	40021000 	.word	0x40021000

080057f4 <HW_AdcDeInit>:
  * @brief This function De-initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcDeInit(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  AdcInitialized = false;
 80057f8:	4b04      	ldr	r3, [pc, #16]	; (800580c <HW_AdcDeInit+0x18>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	701a      	strb	r2, [r3, #0]
  HAL_ADC_DeInit(&hadc);
 80057fe:	4b04      	ldr	r3, [pc, #16]	; (8005810 <HW_AdcDeInit+0x1c>)
 8005800:	0018      	movs	r0, r3
 8005802:	f003 fc15 	bl	8009030 <HAL_ADC_DeInit>
}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	2000034c 	.word	0x2000034c
 8005810:	200002f0 	.word	0x200002f0

08005814 <HW_AdcReadChannel>:
  * @brief This function De-initializes the ADC
  * @param Channel
  * @retval Value
  */
uint16_t HW_AdcReadChannel(uint32_t Channel)
{
 8005814:	b590      	push	{r4, r7, lr}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef adcConf = {0};
 800581c:	230c      	movs	r3, #12
 800581e:	18fb      	adds	r3, r7, r3
 8005820:	0018      	movs	r0, r3
 8005822:	2308      	movs	r3, #8
 8005824:	001a      	movs	r2, r3
 8005826:	2100      	movs	r1, #0
 8005828:	f015 ff86 	bl	801b738 <memset>

  uint16_t adcData = 0;
 800582c:	2316      	movs	r3, #22
 800582e:	18fb      	adds	r3, r7, r3
 8005830:	2200      	movs	r2, #0
 8005832:	801a      	strh	r2, [r3, #0]

  HW_AdcInit();
 8005834:	f7ff ff8a 	bl	800574c <HW_AdcInit>

  if (AdcInitialized == true)
 8005838:	4b2f      	ldr	r3, [pc, #188]	; (80058f8 <HW_AdcReadChannel+0xe4>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d053      	beq.n	80058e8 <HW_AdcReadChannel+0xd4>
  {
    /* wait the the Vrefint used by adc is set */
    while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8005840:	46c0      	nop			; (mov r8, r8)
 8005842:	4b2e      	ldr	r3, [pc, #184]	; (80058fc <HW_AdcReadChannel+0xe8>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2208      	movs	r2, #8
 8005848:	4013      	ands	r3, r2
 800584a:	2b08      	cmp	r3, #8
 800584c:	d1f9      	bne.n	8005842 <HW_AdcReadChannel+0x2e>

    ADCCLK_ENABLE();
 800584e:	4b2c      	ldr	r3, [pc, #176]	; (8005900 <HW_AdcReadChannel+0xec>)
 8005850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005852:	4b2b      	ldr	r3, [pc, #172]	; (8005900 <HW_AdcReadChannel+0xec>)
 8005854:	2180      	movs	r1, #128	; 0x80
 8005856:	0089      	lsls	r1, r1, #2
 8005858:	430a      	orrs	r2, r1
 800585a:	635a      	str	r2, [r3, #52]	; 0x34

    /*calibrate ADC if any calibraiton hardware*/
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 800585c:	4b29      	ldr	r3, [pc, #164]	; (8005904 <HW_AdcReadChannel+0xf0>)
 800585e:	2100      	movs	r1, #0
 8005860:	0018      	movs	r0, r3
 8005862:	f003 ff31 	bl	80096c8 <HAL_ADCEx_Calibration_Start>

    /* Deselects all channels*/
    adcConf.Channel = ADC_CHANNEL_MASK;
 8005866:	210c      	movs	r1, #12
 8005868:	187b      	adds	r3, r7, r1
 800586a:	4a27      	ldr	r2, [pc, #156]	; (8005908 <HW_AdcReadChannel+0xf4>)
 800586c:	601a      	str	r2, [r3, #0]
    adcConf.Rank = ADC_RANK_NONE;
 800586e:	187b      	adds	r3, r7, r1
 8005870:	4a26      	ldr	r2, [pc, #152]	; (800590c <HW_AdcReadChannel+0xf8>)
 8005872:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 8005874:	000c      	movs	r4, r1
 8005876:	187a      	adds	r2, r7, r1
 8005878:	4b22      	ldr	r3, [pc, #136]	; (8005904 <HW_AdcReadChannel+0xf0>)
 800587a:	0011      	movs	r1, r2
 800587c:	0018      	movs	r0, r3
 800587e:	f003 fd79 	bl	8009374 <HAL_ADC_ConfigChannel>

    /* configure adc channel */
    adcConf.Channel = Channel;
 8005882:	0021      	movs	r1, r4
 8005884:	187b      	adds	r3, r7, r1
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	601a      	str	r2, [r3, #0]
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 800588a:	187b      	adds	r3, r7, r1
 800588c:	2280      	movs	r2, #128	; 0x80
 800588e:	0152      	lsls	r2, r2, #5
 8005890:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 8005892:	187a      	adds	r2, r7, r1
 8005894:	4b1b      	ldr	r3, [pc, #108]	; (8005904 <HW_AdcReadChannel+0xf0>)
 8005896:	0011      	movs	r1, r2
 8005898:	0018      	movs	r0, r3
 800589a:	f003 fd6b 	bl	8009374 <HAL_ADC_ConfigChannel>

    /* Start the conversion process */
    HAL_ADC_Start(&hadc);
 800589e:	4b19      	ldr	r3, [pc, #100]	; (8005904 <HW_AdcReadChannel+0xf0>)
 80058a0:	0018      	movs	r0, r3
 80058a2:	f003 fc71 	bl	8009188 <HAL_ADC_Start>

    /* Wait for the end of conversion */
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80058a6:	2301      	movs	r3, #1
 80058a8:	425a      	negs	r2, r3
 80058aa:	4b16      	ldr	r3, [pc, #88]	; (8005904 <HW_AdcReadChannel+0xf0>)
 80058ac:	0011      	movs	r1, r2
 80058ae:	0018      	movs	r0, r3
 80058b0:	f003 fcbe 	bl	8009230 <HAL_ADC_PollForConversion>

    /* Get the converted value of regular channel */
    adcData = HAL_ADC_GetValue(&hadc);
 80058b4:	4b13      	ldr	r3, [pc, #76]	; (8005904 <HW_AdcReadChannel+0xf0>)
 80058b6:	0018      	movs	r0, r3
 80058b8:	f003 fd50 	bl	800935c <HAL_ADC_GetValue>
 80058bc:	0002      	movs	r2, r0
 80058be:	2316      	movs	r3, #22
 80058c0:	18fb      	adds	r3, r7, r3
 80058c2:	801a      	strh	r2, [r3, #0]

    __HAL_ADC_DISABLE(&hadc) ;
 80058c4:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <HW_AdcReadChannel+0xf0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <HW_AdcReadChannel+0xf0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2102      	movs	r1, #2
 80058d0:	430a      	orrs	r2, r1
 80058d2:	609a      	str	r2, [r3, #8]
 80058d4:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <HW_AdcReadChannel+0xf0>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2203      	movs	r2, #3
 80058da:	601a      	str	r2, [r3, #0]

    ADCCLK_DISABLE();
 80058dc:	4b08      	ldr	r3, [pc, #32]	; (8005900 <HW_AdcReadChannel+0xec>)
 80058de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058e0:	4b07      	ldr	r3, [pc, #28]	; (8005900 <HW_AdcReadChannel+0xec>)
 80058e2:	490b      	ldr	r1, [pc, #44]	; (8005910 <HW_AdcReadChannel+0xfc>)
 80058e4:	400a      	ands	r2, r1
 80058e6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return adcData;
 80058e8:	2316      	movs	r3, #22
 80058ea:	18fb      	adds	r3, r7, r3
 80058ec:	881b      	ldrh	r3, [r3, #0]
}
 80058ee:	0018      	movs	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	b007      	add	sp, #28
 80058f4:	bd90      	pop	{r4, r7, pc}
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	2000034c 	.word	0x2000034c
 80058fc:	40007000 	.word	0x40007000
 8005900:	40021000 	.word	0x40021000
 8005904:	200002f0 	.word	0x200002f0
 8005908:	0007ffff 	.word	0x0007ffff
 800590c:	00001001 	.word	0x00001001
 8005910:	fffffdff 	.word	0xfffffdff

08005914 <LPM_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterStopMode(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800591a:	f3ef 8310 	mrs	r3, PRIMASK
 800591e:	607b      	str	r3, [r7, #4]
  return(result);
 8005920:	687b      	ldr	r3, [r7, #4]
  BACKUP_PRIMASK();
 8005922:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8005924:	b672      	cpsid	i

  DISABLE_IRQ();

  HW_IoDeInit();
 8005926:	f7ff fcd7 	bl	80052d8 <HW_IoDeInit>

  HW_AdcDeInit();
 800592a:	f7ff ff63 	bl	80057f4 <HW_AdcDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 800592e:	4b09      	ldr	r3, [pc, #36]	; (8005954 <LPM_EnterStopMode+0x40>)
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4b08      	ldr	r3, [pc, #32]	; (8005954 <LPM_EnterStopMode+0x40>)
 8005934:	2104      	movs	r1, #4
 8005936:	430a      	orrs	r2, r1
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f383 8810 	msr	PRIMASK, r3

  RESTORE_PRIMASK();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8005944:	2101      	movs	r1, #1
 8005946:	2001      	movs	r0, #1
 8005948:	f005 f9c4 	bl	800acd4 <HAL_PWR_EnterSTOPMode>
}
 800594c:	46c0      	nop			; (mov r8, r8)
 800594e:	46bd      	mov	sp, r7
 8005950:	b004      	add	sp, #16
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40007000 	.word	0x40007000

08005958 <LPM_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void LPM_ExitStopMode(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800595e:	f3ef 8310 	mrs	r3, PRIMASK
 8005962:	60bb      	str	r3, [r7, #8]
  return(result);
 8005964:	68bb      	ldr	r3, [r7, #8]
  /* Disable IRQ while the MCU is not running on HSI */

  BACKUP_PRIMASK();
 8005966:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8005968:	b672      	cpsid	i

  DISABLE_IRQ();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 800596a:	4b19      	ldr	r3, [pc, #100]	; (80059d0 <LPM_ExitStopMode+0x78>)
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4b18      	ldr	r3, [pc, #96]	; (80059d0 <LPM_ExitStopMode+0x78>)
 8005970:	2101      	movs	r1, #1
 8005972:	430a      	orrs	r2, r1
 8005974:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <LPM_ExitStopMode+0x78>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2204      	movs	r2, #4
 800597e:	4013      	ands	r3, r2
 8005980:	d0fa      	beq.n	8005978 <LPM_ExitStopMode+0x20>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8005982:	4b13      	ldr	r3, [pc, #76]	; (80059d0 <LPM_ExitStopMode+0x78>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <LPM_ExitStopMode+0x78>)
 8005988:	2180      	movs	r1, #128	; 0x80
 800598a:	0449      	lsls	r1, r1, #17
 800598c:	430a      	orrs	r2, r1
 800598e:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 8005990:	46c0      	nop			; (mov r8, r8)
 8005992:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <LPM_ExitStopMode+0x78>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	2380      	movs	r3, #128	; 0x80
 8005998:	049b      	lsls	r3, r3, #18
 800599a:	4013      	ands	r3, r2
 800599c:	d0f9      	beq.n	8005992 <LPM_ExitStopMode+0x3a>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 800599e:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <LPM_ExitStopMode+0x78>)
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <LPM_ExitStopMode+0x78>)
 80059a4:	2103      	movs	r1, #3
 80059a6:	430a      	orrs	r2, r1
 80059a8:	60da      	str	r2, [r3, #12]

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80059aa:	46c0      	nop			; (mov r8, r8)
 80059ac:	4b08      	ldr	r3, [pc, #32]	; (80059d0 <LPM_ExitStopMode+0x78>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	220c      	movs	r2, #12
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b0c      	cmp	r3, #12
 80059b6:	d1f9      	bne.n	80059ac <LPM_ExitStopMode+0x54>

  /*initilizes the peripherals*/
  HW_IoInit();
 80059b8:	f7ff fc80 	bl	80052bc <HW_IoInit>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f383 8810 	msr	PRIMASK, r3

  RESTORE_PRIMASK();
}
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	46bd      	mov	sp, r7
 80059ca:	b004      	add	sp, #16
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	40021000 	.word	0x40021000

080059d4 <LPM_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterSleepMode(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80059d8:	2101      	movs	r1, #1
 80059da:	2000      	movs	r0, #0
 80059dc:	f005 f94a 	bl	800ac74 <HAL_PWR_EnterSLEEPMode>
}
 80059e0:	46c0      	nop			; (mov r8, r8)
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <NMI_Handler>:
  * @param  None
  * @retval None
  */

void NMI_Handler(void)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	af00      	add	r7, sp, #0
}
 80059ea:	46c0      	nop			; (mov r8, r8)
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HardFault_Handler>:
  * @retval None
  */


void HardFault_Handler(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  __ASM volatile ("nop");
 80059f4:	46c0      	nop			; (mov r8, r8)
  while (1)
  {
    __NOP();
 80059f6:	e7fd      	b.n	80059f4 <HardFault_Handler+0x4>

080059f8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
}
 80059fc:	46c0      	nop			; (mov r8, r8)
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	af00      	add	r7, sp, #0
}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8005a10:	f003 f95a 	bl	8008cc8 <HAL_IncTick>
}
 8005a14:	46c0      	nop			; (mov r8, r8)
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <USART2_IRQHandler>:
  */
/*void PPP_IRQHandler(void)
{
}*/
void USARTx_IRQHandler(void)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	af00      	add	r7, sp, #0
  vcom_IRQHandler();
 8005a1e:	f000 f929 	bl	8005c74 <vcom_IRQHandler>
}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <DMA1_Channel4_5_6_7_IRQHandler>:

void USARTx_DMA_TX_IRQHandler(void)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	af00      	add	r7, sp, #0
  vcom_DMA_TX_IRQHandler();
 8005a2c:	f000 f916 	bl	8005c5c <vcom_DMA_TX_IRQHandler>
}
 8005a30:	46c0      	nop			; (mov r8, r8)
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	af00      	add	r7, sp, #0
  HW_RTC_IrqHandler();
 8005a3a:	f7fe fb7d 	bl	8004138 <HW_RTC_IrqHandler>
}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005a48:	2001      	movs	r0, #1
 8005a4a:	f004 fb1b 	bl	800a084 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005a4e:	2002      	movs	r0, #2
 8005a50:	f004 fb18 	bl	800a084 <HAL_GPIO_EXTI_IRQHandler>
}
 8005a54:	46c0      	nop			; (mov r8, r8)
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005a5e:	2004      	movs	r0, #4
 8005a60:	f004 fb10 	bl	800a084 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005a64:	2008      	movs	r0, #8
 8005a66:	f004 fb0d 	bl	800a084 <HAL_GPIO_EXTI_IRQHandler>
}
 8005a6a:	46c0      	nop			; (mov r8, r8)
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005a74:	2010      	movs	r0, #16
 8005a76:	f004 fb05 	bl	800a084 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005a7a:	2020      	movs	r0, #32
 8005a7c:	f004 fb02 	bl	800a084 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8005a80:	2040      	movs	r0, #64	; 0x40
 8005a82:	f004 faff 	bl	800a084 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005a86:	2080      	movs	r0, #128	; 0x80
 8005a88:	f004 fafc 	bl	800a084 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005a8c:	2380      	movs	r3, #128	; 0x80
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	0018      	movs	r0, r3
 8005a92:	f004 faf7 	bl	800a084 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005a96:	2380      	movs	r3, #128	; 0x80
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f004 faf2 	bl	800a084 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005aa0:	2380      	movs	r3, #128	; 0x80
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f004 faed 	bl	800a084 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8005aaa:	2380      	movs	r3, #128	; 0x80
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	0018      	movs	r0, r3
 8005ab0:	f004 fae8 	bl	800a084 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005ab4:	2380      	movs	r3, #128	; 0x80
 8005ab6:	015b      	lsls	r3, r3, #5
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f004 fae3 	bl	800a084 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005abe:	2380      	movs	r3, #128	; 0x80
 8005ac0:	019b      	lsls	r3, r3, #6
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f004 fade 	bl	800a084 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005ac8:	2380      	movs	r3, #128	; 0x80
 8005aca:	01db      	lsls	r3, r3, #7
 8005acc:	0018      	movs	r0, r3
 8005ace:	f004 fad9 	bl	800a084 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005ad2:	2380      	movs	r3, #128	; 0x80
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f004 fad4 	bl	800a084 <HAL_GPIO_EXTI_IRQHandler>
}
 8005adc:	46c0      	nop			; (mov r8, r8)
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005aec:	4b11      	ldr	r3, [pc, #68]	; (8005b34 <_sbrk+0x50>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d102      	bne.n	8005afa <_sbrk+0x16>
		heap_end = &end;
 8005af4:	4b0f      	ldr	r3, [pc, #60]	; (8005b34 <_sbrk+0x50>)
 8005af6:	4a10      	ldr	r2, [pc, #64]	; (8005b38 <_sbrk+0x54>)
 8005af8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005afa:	4b0e      	ldr	r3, [pc, #56]	; (8005b34 <_sbrk+0x50>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005b00:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <_sbrk+0x50>)
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	18d3      	adds	r3, r2, r3
 8005b08:	466a      	mov	r2, sp
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d907      	bls.n	8005b1e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005b0e:	f015 fde9 	bl	801b6e4 <__errno>
 8005b12:	0003      	movs	r3, r0
 8005b14:	220c      	movs	r2, #12
 8005b16:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	425b      	negs	r3, r3
 8005b1c:	e006      	b.n	8005b2c <_sbrk+0x48>
	}

	heap_end += incr;
 8005b1e:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <_sbrk+0x50>)
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	18d2      	adds	r2, r2, r3
 8005b26:	4b03      	ldr	r3, [pc, #12]	; (8005b34 <_sbrk+0x50>)
 8005b28:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
}
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	b004      	add	sp, #16
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20000350 	.word	0x20000350
 8005b38:	200016a0 	.word	0x200016a0

08005b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8005b40:	4b17      	ldr	r3, [pc, #92]	; (8005ba0 <SystemInit+0x64>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	4b16      	ldr	r3, [pc, #88]	; (8005ba0 <SystemInit+0x64>)
 8005b46:	2180      	movs	r1, #128	; 0x80
 8005b48:	0049      	lsls	r1, r1, #1
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8005b4e:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <SystemInit+0x64>)
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	4b13      	ldr	r3, [pc, #76]	; (8005ba0 <SystemInit+0x64>)
 8005b54:	4913      	ldr	r1, [pc, #76]	; (8005ba4 <SystemInit+0x68>)
 8005b56:	400a      	ands	r2, r1
 8005b58:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8005b5a:	4b11      	ldr	r3, [pc, #68]	; (8005ba0 <SystemInit+0x64>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <SystemInit+0x64>)
 8005b60:	4911      	ldr	r1, [pc, #68]	; (8005ba8 <SystemInit+0x6c>)
 8005b62:	400a      	ands	r2, r1
 8005b64:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005b66:	4b0e      	ldr	r3, [pc, #56]	; (8005ba0 <SystemInit+0x64>)
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <SystemInit+0x64>)
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	438a      	bics	r2, r1
 8005b70:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8005b72:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <SystemInit+0x64>)
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <SystemInit+0x64>)
 8005b78:	490c      	ldr	r1, [pc, #48]	; (8005bac <SystemInit+0x70>)
 8005b7a:	400a      	ands	r2, r1
 8005b7c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8005b7e:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <SystemInit+0x64>)
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <SystemInit+0x64>)
 8005b84:	490a      	ldr	r1, [pc, #40]	; (8005bb0 <SystemInit+0x74>)
 8005b86:	400a      	ands	r2, r1
 8005b88:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <SystemInit+0x64>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b90:	4b08      	ldr	r3, [pc, #32]	; (8005bb4 <SystemInit+0x78>)
 8005b92:	2280      	movs	r2, #128	; 0x80
 8005b94:	0512      	lsls	r2, r2, #20
 8005b96:	609a      	str	r2, [r3, #8]
#endif
}
 8005b98:	46c0      	nop			; (mov r8, r8)
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	88ff400c 	.word	0x88ff400c
 8005ba8:	fef6fff6 	.word	0xfef6fff6
 8005bac:	fffbffff 	.word	0xfffbffff
 8005bb0:	ff02ffff 	.word	0xff02ffff
 8005bb4:	e000ed00 	.word	0xe000ed00

08005bb8 <vcom_Init>:

static void (*TxCpltCallback)(void);
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(void (*TxCb)(void))
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]

  /*Record Tx complete for DMA*/
  TxCpltCallback = TxCb;
 8005bc0:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <vcom_Init+0x54>)
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	601a      	str	r2, [r3, #0]
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 8005bc6:	4b12      	ldr	r3, [pc, #72]	; (8005c10 <vcom_Init+0x58>)
 8005bc8:	4a12      	ldr	r2, [pc, #72]	; (8005c14 <vcom_Init+0x5c>)
 8005bca:	601a      	str	r2, [r3, #0]

  UartHandle.Init.BaudRate   = 115200;
 8005bcc:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <vcom_Init+0x58>)
 8005bce:	22e1      	movs	r2, #225	; 0xe1
 8005bd0:	0252      	lsls	r2, r2, #9
 8005bd2:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8005bd4:	4b0e      	ldr	r3, [pc, #56]	; (8005c10 <vcom_Init+0x58>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8005bda:	4b0d      	ldr	r3, [pc, #52]	; (8005c10 <vcom_Init+0x58>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8005be0:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <vcom_Init+0x58>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8005be6:	4b0a      	ldr	r3, [pc, #40]	; (8005c10 <vcom_Init+0x58>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX;
 8005bec:	4b08      	ldr	r3, [pc, #32]	; (8005c10 <vcom_Init+0x58>)
 8005bee:	2208      	movs	r2, #8
 8005bf0:	615a      	str	r2, [r3, #20]

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8005bf2:	4b07      	ldr	r3, [pc, #28]	; (8005c10 <vcom_Init+0x58>)
 8005bf4:	0018      	movs	r0, r3
 8005bf6:	f007 f841 	bl	800cc7c <HAL_UART_Init>
 8005bfa:	1e03      	subs	r3, r0, #0
 8005bfc:	d001      	beq.n	8005c02 <vcom_Init+0x4a>
  {
    /* Initialization Error */
    Error_Handler();
 8005bfe:	f7fe f82d 	bl	8003c5c <Error_Handler>
  }
}
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	46bd      	mov	sp, r7
 8005c06:	b002      	add	sp, #8
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	200003d4 	.word	0x200003d4
 8005c10:	20000354 	.word	0x20000354
 8005c14:	40004400 	.word	0x40004400

08005c18 <vcom_Trace>:

void vcom_Trace(uint8_t *p_data, uint16_t size)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	000a      	movs	r2, r1
 8005c22:	1cbb      	adds	r3, r7, #2
 8005c24:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8005c26:	1cbb      	adds	r3, r7, #2
 8005c28:	881a      	ldrh	r2, [r3, #0]
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	4b03      	ldr	r3, [pc, #12]	; (8005c3c <vcom_Trace+0x24>)
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f007 f878 	bl	800cd24 <HAL_UART_Transmit_DMA>
}
 8005c34:	46c0      	nop			; (mov r8, r8)
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b002      	add	sp, #8
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	20000354 	.word	0x20000354

08005c40 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* buffer transmission complete*/
  TxCpltCallback();
 8005c48:	4b03      	ldr	r3, [pc, #12]	; (8005c58 <HAL_UART_TxCpltCallback+0x18>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4798      	blx	r3
}
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b002      	add	sp, #8
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	200003d4 	.word	0x200003d4

08005c5c <vcom_DMA_TX_IRQHandler>:

void vcom_DMA_TX_IRQHandler(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 8005c60:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <vcom_DMA_TX_IRQHandler+0x14>)
 8005c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c64:	0018      	movs	r0, r3
 8005c66:	f003 ff95 	bl	8009b94 <HAL_DMA_IRQHandler>
}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	20000354 	.word	0x20000354

08005c74 <vcom_IRQHandler>:

void vcom_IRQHandler(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UartHandle);
 8005c78:	4b03      	ldr	r3, [pc, #12]	; (8005c88 <vcom_IRQHandler+0x14>)
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f007 f8e2 	bl	800ce44 <HAL_UART_IRQHandler>
}
 8005c80:	46c0      	nop			; (mov r8, r8)
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	20000354 	.word	0x20000354

08005c8c <HAL_UART_MspInit>:
{
  HAL_UART_DeInit(&UartHandle);
}

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08c      	sub	sp, #48	; 0x30
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c94:	231c      	movs	r3, #28
 8005c96:	18fb      	adds	r3, r7, r3
 8005c98:	0018      	movs	r0, r3
 8005c9a:	2314      	movs	r3, #20
 8005c9c:	001a      	movs	r2, r3
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	f015 fd4a 	bl	801b738 <memset>
  if (huart->Instance == USARTx)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a60      	ldr	r2, [pc, #384]	; (8005e2c <HAL_UART_MspInit+0x1a0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d161      	bne.n	8005d72 <HAL_UART_MspInit+0xe6>
    static DMA_HandleTypeDef hdma_tx;


    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8005cae:	4b60      	ldr	r3, [pc, #384]	; (8005e30 <HAL_UART_MspInit+0x1a4>)
 8005cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb2:	4b5f      	ldr	r3, [pc, #380]	; (8005e30 <HAL_UART_MspInit+0x1a4>)
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cba:	4b5d      	ldr	r3, [pc, #372]	; (8005e30 <HAL_UART_MspInit+0x1a4>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
 8005cc4:	69bb      	ldr	r3, [r7, #24]
    USARTx_RX_GPIO_CLK_ENABLE();
 8005cc6:	4b5a      	ldr	r3, [pc, #360]	; (8005e30 <HAL_UART_MspInit+0x1a4>)
 8005cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cca:	4b59      	ldr	r3, [pc, #356]	; (8005e30 <HAL_UART_MspInit+0x1a4>)
 8005ccc:	2101      	movs	r1, #1
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cd2:	4b57      	ldr	r3, [pc, #348]	; (8005e30 <HAL_UART_MspInit+0x1a4>)
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	4013      	ands	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	697b      	ldr	r3, [r7, #20]

    /* Enable USARTx clock */
    USARTx_CLK_ENABLE();
 8005cde:	4b54      	ldr	r3, [pc, #336]	; (8005e30 <HAL_UART_MspInit+0x1a4>)
 8005ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ce2:	4b53      	ldr	r3, [pc, #332]	; (8005e30 <HAL_UART_MspInit+0x1a4>)
 8005ce4:	2180      	movs	r1, #128	; 0x80
 8005ce6:	0289      	lsls	r1, r1, #10
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 8005cec:	4b50      	ldr	r3, [pc, #320]	; (8005e30 <HAL_UART_MspInit+0x1a4>)
 8005cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cf0:	4b4f      	ldr	r3, [pc, #316]	; (8005e30 <HAL_UART_MspInit+0x1a4>)
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8005cf8:	4b4d      	ldr	r3, [pc, #308]	; (8005e30 <HAL_UART_MspInit+0x1a4>)
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	4013      	ands	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]
 8005d02:	693b      	ldr	r3, [r7, #16]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* UART  pin configuration  */
    vcom_IoInit();
 8005d04:	f000 f8a0 	bl	8005e48 <vcom_IoInit>

    /*##-3- Configure the DMA ##################################################*/
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8005d08:	4b4a      	ldr	r3, [pc, #296]	; (8005e34 <HAL_UART_MspInit+0x1a8>)
 8005d0a:	4a4b      	ldr	r2, [pc, #300]	; (8005e38 <HAL_UART_MspInit+0x1ac>)
 8005d0c:	601a      	str	r2, [r3, #0]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005d0e:	4b49      	ldr	r3, [pc, #292]	; (8005e34 <HAL_UART_MspInit+0x1a8>)
 8005d10:	2210      	movs	r2, #16
 8005d12:	609a      	str	r2, [r3, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005d14:	4b47      	ldr	r3, [pc, #284]	; (8005e34 <HAL_UART_MspInit+0x1a8>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	60da      	str	r2, [r3, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8005d1a:	4b46      	ldr	r3, [pc, #280]	; (8005e34 <HAL_UART_MspInit+0x1a8>)
 8005d1c:	2280      	movs	r2, #128	; 0x80
 8005d1e:	611a      	str	r2, [r3, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d20:	4b44      	ldr	r3, [pc, #272]	; (8005e34 <HAL_UART_MspInit+0x1a8>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	615a      	str	r2, [r3, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8005d26:	4b43      	ldr	r3, [pc, #268]	; (8005e34 <HAL_UART_MspInit+0x1a8>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	619a      	str	r2, [r3, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8005d2c:	4b41      	ldr	r3, [pc, #260]	; (8005e34 <HAL_UART_MspInit+0x1a8>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	61da      	str	r2, [r3, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8005d32:	4b40      	ldr	r3, [pc, #256]	; (8005e34 <HAL_UART_MspInit+0x1a8>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	621a      	str	r2, [r3, #32]
#ifndef STM32L152xE
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8005d38:	4b3e      	ldr	r3, [pc, #248]	; (8005e34 <HAL_UART_MspInit+0x1a8>)
 8005d3a:	2204      	movs	r2, #4
 8005d3c:	605a      	str	r2, [r3, #4]
#endif
    HAL_DMA_Init(&hdma_tx);
 8005d3e:	4b3d      	ldr	r3, [pc, #244]	; (8005e34 <HAL_UART_MspInit+0x1a8>)
 8005d40:	0018      	movs	r0, r3
 8005d42:	f003 fe01 	bl	8009948 <HAL_DMA_Init>

    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a3a      	ldr	r2, [pc, #232]	; (8005e34 <HAL_UART_MspInit+0x1a8>)
 8005d4a:	669a      	str	r2, [r3, #104]	; 0x68
 8005d4c:	4b39      	ldr	r3, [pc, #228]	; (8005e34 <HAL_UART_MspInit+0x1a8>)
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	629a      	str	r2, [r3, #40]	; 0x28

    /*##-4- Configure the NVIC for DMA #########################################*/
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8005d52:	2201      	movs	r2, #1
 8005d54:	2100      	movs	r1, #0
 8005d56:	200b      	movs	r0, #11
 8005d58:	f003 fdd0 	bl	80098fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8005d5c:	200b      	movs	r0, #11
 8005d5e:	f003 fde2 	bl	8009926 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8005d62:	2201      	movs	r2, #1
 8005d64:	2100      	movs	r1, #0
 8005d66:	201c      	movs	r0, #28
 8005d68:	f003 fdc8 	bl	80098fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8005d6c:	201c      	movs	r0, #28
 8005d6e:	f003 fdda 	bl	8009926 <HAL_NVIC_EnableIRQ>
  }
  if(huart->Instance==USART1)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a31      	ldr	r2, [pc, #196]	; (8005e3c <HAL_UART_MspInit+0x1b0>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d153      	bne.n	8005e24 <HAL_UART_MspInit+0x198>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
	/* USART1 clock enable */
	__HAL_RCC_USART1_CLK_ENABLE();
 8005d7c:	4b2c      	ldr	r3, [pc, #176]	; (8005e30 <HAL_UART_MspInit+0x1a4>)
 8005d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d80:	4b2b      	ldr	r3, [pc, #172]	; (8005e30 <HAL_UART_MspInit+0x1a4>)
 8005d82:	2180      	movs	r1, #128	; 0x80
 8005d84:	01c9      	lsls	r1, r1, #7
 8005d86:	430a      	orrs	r2, r1
 8005d88:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005d8a:	4b29      	ldr	r3, [pc, #164]	; (8005e30 <HAL_UART_MspInit+0x1a4>)
 8005d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8e:	4b28      	ldr	r3, [pc, #160]	; (8005e30 <HAL_UART_MspInit+0x1a4>)
 8005d90:	2101      	movs	r1, #1
 8005d92:	430a      	orrs	r2, r1
 8005d94:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d96:	4b26      	ldr	r3, [pc, #152]	; (8005e30 <HAL_UART_MspInit+0x1a4>)
 8005d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
	/**USART1 GPIO Configuration
	PA10     ------> USART1_RX
	PA9     ------> USART1_TX
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8005da2:	211c      	movs	r1, #28
 8005da4:	187b      	adds	r3, r7, r1
 8005da6:	22c0      	movs	r2, #192	; 0xc0
 8005da8:	00d2      	lsls	r2, r2, #3
 8005daa:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dac:	187b      	adds	r3, r7, r1
 8005dae:	2202      	movs	r2, #2
 8005db0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db2:	187b      	adds	r3, r7, r1
 8005db4:	2200      	movs	r2, #0
 8005db6:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005db8:	187b      	adds	r3, r7, r1
 8005dba:	2203      	movs	r2, #3
 8005dbc:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8005dbe:	187b      	adds	r3, r7, r1
 8005dc0:	2204      	movs	r2, #4
 8005dc2:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dc4:	187a      	adds	r2, r7, r1
 8005dc6:	23a0      	movs	r3, #160	; 0xa0
 8005dc8:	05db      	lsls	r3, r3, #23
 8005dca:	0011      	movs	r1, r2
 8005dcc:	0018      	movs	r0, r3
 8005dce:	f003 ffbd 	bl	8009d4c <HAL_GPIO_Init>

	/* USART1 DMA Init */
	/* USART1_RX Init */
	hdma_usart1_rx.Instance = DMA1_Channel3;
 8005dd2:	4b1b      	ldr	r3, [pc, #108]	; (8005e40 <HAL_UART_MspInit+0x1b4>)
 8005dd4:	4a1b      	ldr	r2, [pc, #108]	; (8005e44 <HAL_UART_MspInit+0x1b8>)
 8005dd6:	601a      	str	r2, [r3, #0]
	hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8005dd8:	4b19      	ldr	r3, [pc, #100]	; (8005e40 <HAL_UART_MspInit+0x1b4>)
 8005dda:	2203      	movs	r2, #3
 8005ddc:	605a      	str	r2, [r3, #4]
	hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005dde:	4b18      	ldr	r3, [pc, #96]	; (8005e40 <HAL_UART_MspInit+0x1b4>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	609a      	str	r2, [r3, #8]
	hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005de4:	4b16      	ldr	r3, [pc, #88]	; (8005e40 <HAL_UART_MspInit+0x1b4>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	60da      	str	r2, [r3, #12]
	hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005dea:	4b15      	ldr	r3, [pc, #84]	; (8005e40 <HAL_UART_MspInit+0x1b4>)
 8005dec:	2280      	movs	r2, #128	; 0x80
 8005dee:	611a      	str	r2, [r3, #16]
	hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005df0:	4b13      	ldr	r3, [pc, #76]	; (8005e40 <HAL_UART_MspInit+0x1b4>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	615a      	str	r2, [r3, #20]
	hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005df6:	4b12      	ldr	r3, [pc, #72]	; (8005e40 <HAL_UART_MspInit+0x1b4>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	619a      	str	r2, [r3, #24]
	hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005dfc:	4b10      	ldr	r3, [pc, #64]	; (8005e40 <HAL_UART_MspInit+0x1b4>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	61da      	str	r2, [r3, #28]
	hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e02:	4b0f      	ldr	r3, [pc, #60]	; (8005e40 <HAL_UART_MspInit+0x1b4>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	621a      	str	r2, [r3, #32]
	if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005e08:	4b0d      	ldr	r3, [pc, #52]	; (8005e40 <HAL_UART_MspInit+0x1b4>)
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f003 fd9c 	bl	8009948 <HAL_DMA_Init>
 8005e10:	1e03      	subs	r3, r0, #0
 8005e12:	d001      	beq.n	8005e18 <HAL_UART_MspInit+0x18c>
	{
	  Error_Handler();
 8005e14:	f7fd ff22 	bl	8003c5c <Error_Handler>
	}

	__HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a09      	ldr	r2, [pc, #36]	; (8005e40 <HAL_UART_MspInit+0x1b4>)
 8005e1c:	66da      	str	r2, [r3, #108]	; 0x6c
 8005e1e:	4b08      	ldr	r3, [pc, #32]	; (8005e40 <HAL_UART_MspInit+0x1b4>)
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005e24:	46c0      	nop			; (mov r8, r8)
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b00c      	add	sp, #48	; 0x30
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	40004400 	.word	0x40004400
 8005e30:	40021000 	.word	0x40021000
 8005e34:	200003d8 	.word	0x200003d8
 8005e38:	40020080 	.word	0x40020080
 8005e3c:	40013800 	.word	0x40013800
 8005e40:	200014ac 	.word	0x200014ac
 8005e44:	40020030 	.word	0x40020030

08005e48 <vcom_IoInit>:
  /*##-4- Disable the NVIC for DMA ###########################################*/
  HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
}

void vcom_IoInit(void)
{
 8005e48:	b590      	push	{r4, r7, lr}
 8005e4a:	b089      	sub	sp, #36	; 0x24
 8005e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8005e4e:	240c      	movs	r4, #12
 8005e50:	193b      	adds	r3, r7, r4
 8005e52:	0018      	movs	r0, r3
 8005e54:	2314      	movs	r3, #20
 8005e56:	001a      	movs	r2, r3
 8005e58:	2100      	movs	r1, #0
 8005e5a:	f015 fc6d 	bl	801b738 <memset>
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8005e5e:	4b1f      	ldr	r3, [pc, #124]	; (8005edc <vcom_IoInit+0x94>)
 8005e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e62:	4b1e      	ldr	r3, [pc, #120]	; (8005edc <vcom_IoInit+0x94>)
 8005e64:	2101      	movs	r1, #1
 8005e66:	430a      	orrs	r2, r1
 8005e68:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e6a:	4b1c      	ldr	r3, [pc, #112]	; (8005edc <vcom_IoInit+0x94>)
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	2201      	movs	r2, #1
 8005e70:	4013      	ands	r3, r2
 8005e72:	60bb      	str	r3, [r7, #8]
 8005e74:	68bb      	ldr	r3, [r7, #8]
  USARTx_RX_GPIO_CLK_ENABLE();
 8005e76:	4b19      	ldr	r3, [pc, #100]	; (8005edc <vcom_IoInit+0x94>)
 8005e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7a:	4b18      	ldr	r3, [pc, #96]	; (8005edc <vcom_IoInit+0x94>)
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e82:	4b16      	ldr	r3, [pc, #88]	; (8005edc <vcom_IoInit+0x94>)
 8005e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e86:	2201      	movs	r2, #1
 8005e88:	4013      	ands	r3, r2
 8005e8a:	607b      	str	r3, [r7, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8005e8e:	193b      	adds	r3, r7, r4
 8005e90:	2204      	movs	r2, #4
 8005e92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005e94:	193b      	adds	r3, r7, r4
 8005e96:	2202      	movs	r2, #2
 8005e98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005e9a:	193b      	adds	r3, r7, r4
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8005ea0:	193b      	adds	r3, r7, r4
 8005ea2:	2203      	movs	r2, #3
 8005ea4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8005ea6:	193b      	adds	r3, r7, r4
 8005ea8:	2204      	movs	r2, #4
 8005eaa:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8005eac:	193a      	adds	r2, r7, r4
 8005eae:	23a0      	movs	r3, #160	; 0xa0
 8005eb0:	05db      	lsls	r3, r3, #23
 8005eb2:	0011      	movs	r1, r2
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f003 ff49 	bl	8009d4c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8005eba:	193b      	adds	r3, r7, r4
 8005ebc:	2208      	movs	r2, #8
 8005ebe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8005ec0:	193b      	adds	r3, r7, r4
 8005ec2:	2204      	movs	r2, #4
 8005ec4:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8005ec6:	193a      	adds	r2, r7, r4
 8005ec8:	23a0      	movs	r3, #160	; 0xa0
 8005eca:	05db      	lsls	r3, r3, #23
 8005ecc:	0011      	movs	r1, r2
 8005ece:	0018      	movs	r0, r3
 8005ed0:	f003 ff3c 	bl	8009d4c <HAL_GPIO_Init>
}
 8005ed4:	46c0      	nop			; (mov r8, r8)
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	b009      	add	sp, #36	; 0x24
 8005eda:	bd90      	pop	{r4, r7, pc}
 8005edc:	40021000 	.word	0x40021000

08005ee0 <vcom_IoDeInit>:

void vcom_IoDeInit(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8005ee6:	1d3b      	adds	r3, r7, #4
 8005ee8:	0018      	movs	r0, r3
 8005eea:	2314      	movs	r3, #20
 8005eec:	001a      	movs	r2, r3
 8005eee:	2100      	movs	r1, #0
 8005ef0:	f015 fc22 	bl	801b738 <memset>

  USARTx_TX_GPIO_CLK_ENABLE();
 8005ef4:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <vcom_IoDeInit+0x68>)
 8005ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef8:	4b13      	ldr	r3, [pc, #76]	; (8005f48 <vcom_IoDeInit+0x68>)
 8005efa:	2101      	movs	r1, #1
 8005efc:	430a      	orrs	r2, r1
 8005efe:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f00:	4b11      	ldr	r3, [pc, #68]	; (8005f48 <vcom_IoDeInit+0x68>)
 8005f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f04:	2201      	movs	r2, #1
 8005f06:	4013      	ands	r3, r2
 8005f08:	603b      	str	r3, [r7, #0]
 8005f0a:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8005f0c:	1d3b      	adds	r3, r7, #4
 8005f0e:	2203      	movs	r2, #3
 8005f10:	605a      	str	r2, [r3, #4]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8005f12:	1d3b      	adds	r3, r7, #4
 8005f14:	2200      	movs	r2, #0
 8005f16:	609a      	str	r2, [r3, #8]

  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 8005f18:	1d3b      	adds	r3, r7, #4
 8005f1a:	2204      	movs	r2, #4
 8005f1c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 8005f1e:	1d3a      	adds	r2, r7, #4
 8005f20:	23a0      	movs	r3, #160	; 0xa0
 8005f22:	05db      	lsls	r3, r3, #23
 8005f24:	0011      	movs	r1, r2
 8005f26:	0018      	movs	r0, r3
 8005f28:	f003 ff10 	bl	8009d4c <HAL_GPIO_Init>

  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 8005f2c:	1d3b      	adds	r3, r7, #4
 8005f2e:	2208      	movs	r2, #8
 8005f30:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 8005f32:	1d3a      	adds	r2, r7, #4
 8005f34:	23a0      	movs	r3, #160	; 0xa0
 8005f36:	05db      	lsls	r3, r3, #23
 8005f38:	0011      	movs	r1, r2
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f003 ff06 	bl	8009d4c <HAL_GPIO_Init>
}
 8005f40:	46c0      	nop			; (mov r8, r8)
 8005f42:	46bd      	mov	sp, r7
 8005f44:	b006      	add	sp, #24
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	40021000 	.word	0x40021000

08005f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005f4c:	480d      	ldr	r0, [pc, #52]	; (8005f84 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8005f4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8005f50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005f52:	e003      	b.n	8005f5c <LoopCopyDataInit>

08005f54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005f54:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8005f56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005f58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005f5a:	3104      	adds	r1, #4

08005f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8005f5c:	480b      	ldr	r0, [pc, #44]	; (8005f8c <LoopForever+0xa>)
  ldr  r3, =_edata
 8005f5e:	4b0c      	ldr	r3, [pc, #48]	; (8005f90 <LoopForever+0xe>)
  adds  r2, r0, r1
 8005f60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005f62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005f64:	d3f6      	bcc.n	8005f54 <CopyDataInit>
  ldr  r2, =_sbss
 8005f66:	4a0b      	ldr	r2, [pc, #44]	; (8005f94 <LoopForever+0x12>)
  b  LoopFillZerobss
 8005f68:	e002      	b.n	8005f70 <LoopFillZerobss>

08005f6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8005f6a:	2300      	movs	r3, #0
  str  r3, [r2]
 8005f6c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f6e:	3204      	adds	r2, #4

08005f70 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8005f70:	4b09      	ldr	r3, [pc, #36]	; (8005f98 <LoopForever+0x16>)
  cmp  r2, r3
 8005f72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005f74:	d3f9      	bcc.n	8005f6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005f76:	f7ff fde1 	bl	8005b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f7a:	f015 fbb9 	bl	801b6f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f7e:	f7fe fd39 	bl	80049f4 <main>

08005f82 <LoopForever>:

LoopForever:
    b LoopForever
 8005f82:	e7fe      	b.n	8005f82 <LoopForever>
   ldr   r0, =_estack
 8005f84:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8005f88:	0801d480 	.word	0x0801d480
  ldr  r0, =_sdata
 8005f8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005f90:	20000158 	.word	0x20000158
  ldr  r2, =_sbss
 8005f94:	20000158 	.word	0x20000158
  ldr  r3, = _ebss
 8005f98:	2000169c 	.word	0x2000169c

08005f9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f9c:	e7fe      	b.n	8005f9c <ADC1_COMP_IRQHandler>
	...

08005fa0 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08c      	sub	sp, #48	; 0x30
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	0002      	movs	r2, r0
 8005fa8:	1dfb      	adds	r3, r7, #7
 8005faa:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE( Led );
 8005fac:	1dfb      	adds	r3, r7, #7
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d015      	beq.n	8005fe0 <BSP_LED_Init+0x40>
 8005fb4:	dc02      	bgt.n	8005fbc <BSP_LED_Init+0x1c>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d005      	beq.n	8005fc6 <BSP_LED_Init+0x26>
 8005fba:	e037      	b.n	800602c <BSP_LED_Init+0x8c>
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d01c      	beq.n	8005ffa <BSP_LED_Init+0x5a>
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d027      	beq.n	8006014 <BSP_LED_Init+0x74>
 8005fc4:	e032      	b.n	800602c <BSP_LED_Init+0x8c>
 8005fc6:	4b2a      	ldr	r3, [pc, #168]	; (8006070 <BSP_LED_Init+0xd0>)
 8005fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fca:	4b29      	ldr	r3, [pc, #164]	; (8006070 <BSP_LED_Init+0xd0>)
 8005fcc:	2102      	movs	r1, #2
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8005fd2:	4b27      	ldr	r3, [pc, #156]	; (8006070 <BSP_LED_Init+0xd0>)
 8005fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	4013      	ands	r3, r2
 8005fda:	61bb      	str	r3, [r7, #24]
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	e025      	b.n	800602c <BSP_LED_Init+0x8c>
 8005fe0:	4b23      	ldr	r3, [pc, #140]	; (8006070 <BSP_LED_Init+0xd0>)
 8005fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe4:	4b22      	ldr	r3, [pc, #136]	; (8006070 <BSP_LED_Init+0xd0>)
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	62da      	str	r2, [r3, #44]	; 0x2c
 8005fec:	4b20      	ldr	r3, [pc, #128]	; (8006070 <BSP_LED_Init+0xd0>)
 8005fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	e018      	b.n	800602c <BSP_LED_Init+0x8c>
 8005ffa:	4b1d      	ldr	r3, [pc, #116]	; (8006070 <BSP_LED_Init+0xd0>)
 8005ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffe:	4b1c      	ldr	r3, [pc, #112]	; (8006070 <BSP_LED_Init+0xd0>)
 8006000:	2102      	movs	r1, #2
 8006002:	430a      	orrs	r2, r1
 8006004:	62da      	str	r2, [r3, #44]	; 0x2c
 8006006:	4b1a      	ldr	r3, [pc, #104]	; (8006070 <BSP_LED_Init+0xd0>)
 8006008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600a:	2202      	movs	r2, #2
 800600c:	4013      	ands	r3, r2
 800600e:	613b      	str	r3, [r7, #16]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	e00b      	b.n	800602c <BSP_LED_Init+0x8c>
 8006014:	4b16      	ldr	r3, [pc, #88]	; (8006070 <BSP_LED_Init+0xd0>)
 8006016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006018:	4b15      	ldr	r3, [pc, #84]	; (8006070 <BSP_LED_Init+0xd0>)
 800601a:	2102      	movs	r1, #2
 800601c:	430a      	orrs	r2, r1
 800601e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006020:	4b13      	ldr	r3, [pc, #76]	; (8006070 <BSP_LED_Init+0xd0>)
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	2202      	movs	r2, #2
 8006026:	4013      	ands	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	46c0      	nop			; (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800602e:	1dfb      	adds	r3, r7, #7
 8006030:	781a      	ldrb	r2, [r3, #0]
 8006032:	4b10      	ldr	r3, [pc, #64]	; (8006074 <BSP_LED_Init+0xd4>)
 8006034:	0052      	lsls	r2, r2, #1
 8006036:	5ad3      	ldrh	r3, [r2, r3]
 8006038:	001a      	movs	r2, r3
 800603a:	211c      	movs	r1, #28
 800603c:	187b      	adds	r3, r7, r1
 800603e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006040:	187b      	adds	r3, r7, r1
 8006042:	2201      	movs	r2, #1
 8006044:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006046:	187b      	adds	r3, r7, r1
 8006048:	2200      	movs	r2, #0
 800604a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800604c:	187b      	adds	r3, r7, r1
 800604e:	2203      	movs	r2, #3
 8006050:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8006052:	1dfb      	adds	r3, r7, #7
 8006054:	781a      	ldrb	r2, [r3, #0]
 8006056:	4b08      	ldr	r3, [pc, #32]	; (8006078 <BSP_LED_Init+0xd8>)
 8006058:	0092      	lsls	r2, r2, #2
 800605a:	58d3      	ldr	r3, [r2, r3]
 800605c:	187a      	adds	r2, r7, r1
 800605e:	0011      	movs	r1, r2
 8006060:	0018      	movs	r0, r3
 8006062:	f003 fe73 	bl	8009d4c <HAL_GPIO_Init>
}
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	46bd      	mov	sp, r7
 800606a:	b00c      	add	sp, #48	; 0x30
 800606c:	bd80      	pop	{r7, pc}
 800606e:	46c0      	nop			; (mov r8, r8)
 8006070:	40021000 	.word	0x40021000
 8006074:	0801cb00 	.word	0x0801cb00
 8006078:	20000034 	.word	0x20000034

0800607c <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	0002      	movs	r2, r0
 8006084:	1dfb      	adds	r3, r7, #7
 8006086:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8006088:	1dfb      	adds	r3, r7, #7
 800608a:	781a      	ldrb	r2, [r3, #0]
 800608c:	4b07      	ldr	r3, [pc, #28]	; (80060ac <BSP_LED_On+0x30>)
 800608e:	0092      	lsls	r2, r2, #2
 8006090:	58d0      	ldr	r0, [r2, r3]
 8006092:	1dfb      	adds	r3, r7, #7
 8006094:	781a      	ldrb	r2, [r3, #0]
 8006096:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <BSP_LED_On+0x34>)
 8006098:	0052      	lsls	r2, r2, #1
 800609a:	5ad3      	ldrh	r3, [r2, r3]
 800609c:	2201      	movs	r2, #1
 800609e:	0019      	movs	r1, r3
 80060a0:	f003 ffd2 	bl	800a048 <HAL_GPIO_WritePin>
}
 80060a4:	46c0      	nop			; (mov r8, r8)
 80060a6:	46bd      	mov	sp, r7
 80060a8:	b002      	add	sp, #8
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20000034 	.word	0x20000034
 80060b0:	0801cb00 	.word	0x0801cb00

080060b4 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	0002      	movs	r2, r0
 80060bc:	1dfb      	adds	r3, r7, #7
 80060be:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80060c0:	1dfb      	adds	r3, r7, #7
 80060c2:	781a      	ldrb	r2, [r3, #0]
 80060c4:	4b07      	ldr	r3, [pc, #28]	; (80060e4 <BSP_LED_Off+0x30>)
 80060c6:	0092      	lsls	r2, r2, #2
 80060c8:	58d0      	ldr	r0, [r2, r3]
 80060ca:	1dfb      	adds	r3, r7, #7
 80060cc:	781a      	ldrb	r2, [r3, #0]
 80060ce:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <BSP_LED_Off+0x34>)
 80060d0:	0052      	lsls	r2, r2, #1
 80060d2:	5ad3      	ldrh	r3, [r2, r3]
 80060d4:	2200      	movs	r2, #0
 80060d6:	0019      	movs	r1, r3
 80060d8:	f003 ffb6 	bl	800a048 <HAL_GPIO_WritePin>
}
 80060dc:	46c0      	nop			; (mov r8, r8)
 80060de:	46bd      	mov	sp, r7
 80060e0:	b002      	add	sp, #8
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	20000034 	.word	0x20000034
 80060e8:	0801cb00 	.word	0x0801cb00

080060ec <SX1276GetWakeTime>:
    SX1276SetPublicNetwork,
    SX1276GetWakeupTime
};

uint32_t SX1276GetWakeTime( void )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  return  BOARD_WAKEUP_TIME;
 80060f0:	2305      	movs	r3, #5
}
 80060f2:	0018      	movs	r0, r3
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	0002      	movs	r2, r0
 8006100:	1dfb      	adds	r3, r7, #7
 8006102:	701a      	strb	r2, [r3, #0]

  if (state == SET )
 8006104:	1dfb      	adds	r3, r7, #7
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d10b      	bne.n	8006124 <SX1276SetXO+0x2c>
  {
    TCXO_ON(); 
 800610c:	2380      	movs	r3, #128	; 0x80
 800610e:	0159      	lsls	r1, r3, #5
 8006110:	23a0      	movs	r3, #160	; 0xa0
 8006112:	05db      	lsls	r3, r3, #23
 8006114:	2201      	movs	r2, #1
 8006116:	0018      	movs	r0, r3
 8006118:	f7fd fe7c 	bl	8003e14 <HW_GPIO_Write>
    
    DelayMs( BOARD_WAKEUP_TIME ); //start up time of TCXO
 800611c:	2005      	movs	r0, #5
 800611e:	f7fe ffef 	bl	8005100 <HAL_Delay>
  }
  else
  {
    TCXO_OFF(); 
  }
}
 8006122:	e007      	b.n	8006134 <SX1276SetXO+0x3c>
    TCXO_OFF(); 
 8006124:	2380      	movs	r3, #128	; 0x80
 8006126:	0159      	lsls	r1, r3, #5
 8006128:	23a0      	movs	r3, #160	; 0xa0
 800612a:	05db      	lsls	r3, r3, #23
 800612c:	2200      	movs	r2, #0
 800612e:	0018      	movs	r0, r3
 8006130:	f7fd fe70 	bl	8003e14 <HW_GPIO_Write>
}
 8006134:	46c0      	nop			; (mov r8, r8)
 8006136:	46bd      	mov	sp, r7
 8006138:	b002      	add	sp, #8
 800613a:	bd80      	pop	{r7, pc}

0800613c <SX1276IoInit>:
void SX1276IoInit( void )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 8006142:	1d3b      	adds	r3, r7, #4
 8006144:	0018      	movs	r0, r3
 8006146:	2314      	movs	r3, #20
 8006148:	001a      	movs	r2, r3
 800614a:	2100      	movs	r1, #0
 800614c:	f015 faf4 	bl	801b738 <memset>
  
  SX1276BoardInit( &BoardCallbacks );
 8006150:	4b1b      	ldr	r3, [pc, #108]	; (80061c0 <SX1276IoInit+0x84>)
 8006152:	0018      	movs	r0, r3
 8006154:	f000 fa6e 	bl	8006634 <SX1276BoardInit>
  
  initStruct.Mode =GPIO_MODE_IT_RISING;
 8006158:	1d3b      	adds	r3, r7, #4
 800615a:	4a1a      	ldr	r2, [pc, #104]	; (80061c4 <SX1276IoInit+0x88>)
 800615c:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 800615e:	1d3b      	adds	r3, r7, #4
 8006160:	2202      	movs	r2, #2
 8006162:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8006164:	1d3b      	adds	r3, r7, #4
 8006166:	2203      	movs	r2, #3
 8006168:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800616a:	1d3b      	adds	r3, r7, #4
 800616c:	4816      	ldr	r0, [pc, #88]	; (80061c8 <SX1276IoInit+0x8c>)
 800616e:	001a      	movs	r2, r3
 8006170:	2110      	movs	r1, #16
 8006172:	f7fd fd7d 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8006176:	1d3b      	adds	r3, r7, #4
 8006178:	4813      	ldr	r0, [pc, #76]	; (80061c8 <SX1276IoInit+0x8c>)
 800617a:	001a      	movs	r2, r3
 800617c:	2102      	movs	r1, #2
 800617e:	f7fd fd77 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8006182:	1d3b      	adds	r3, r7, #4
 8006184:	4810      	ldr	r0, [pc, #64]	; (80061c8 <SX1276IoInit+0x8c>)
 8006186:	001a      	movs	r2, r3
 8006188:	2101      	movs	r1, #1
 800618a:	f7fd fd71 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 800618e:	1d3a      	adds	r2, r7, #4
 8006190:	2380      	movs	r3, #128	; 0x80
 8006192:	019b      	lsls	r3, r3, #6
 8006194:	480d      	ldr	r0, [pc, #52]	; (80061cc <SX1276IoInit+0x90>)
 8006196:	0019      	movs	r1, r3
 8006198:	f7fd fd6a 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_4_PORT, RADIO_DIO_4_PIN, &initStruct );
#endif
#ifdef RADIO_DIO_5
  HW_GPIO_Init( RADIO_DIO_5_PORT, RADIO_DIO_5_PIN, &initStruct );
#endif
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 800619c:	1d3b      	adds	r3, r7, #4
 800619e:	2201      	movs	r2, #1
 80061a0:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;  
 80061a2:	1d3b      	adds	r3, r7, #4
 80061a4:	2200      	movs	r2, #0
 80061a6:	609a      	str	r2, [r3, #8]
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 80061a8:	1d3a      	adds	r2, r7, #4
 80061aa:	2380      	movs	r3, #128	; 0x80
 80061ac:	0159      	lsls	r1, r3, #5
 80061ae:	23a0      	movs	r3, #160	; 0xa0
 80061b0:	05db      	lsls	r3, r3, #23
 80061b2:	0018      	movs	r0, r3
 80061b4:	f7fd fd5c 	bl	8003c70 <HW_GPIO_Init>
}
 80061b8:	46c0      	nop			; (mov r8, r8)
 80061ba:	46bd      	mov	sp, r7
 80061bc:	b006      	add	sp, #24
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20000044 	.word	0x20000044
 80061c4:	10110000 	.word	0x10110000
 80061c8:	50000400 	.word	0x50000400
 80061cc:	50000800 	.word	0x50000800

080061d0 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4811      	ldr	r0, [pc, #68]	; (8006224 <SX1276IoIrqInit+0x54>)
 80061de:	2200      	movs	r2, #0
 80061e0:	2110      	movs	r1, #16
 80061e2:	f7fd fdb9 	bl	8003d58 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3304      	adds	r3, #4
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	480d      	ldr	r0, [pc, #52]	; (8006224 <SX1276IoIrqInit+0x54>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	2102      	movs	r1, #2
 80061f2:	f7fd fdb1 	bl	8003d58 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3308      	adds	r3, #8
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4809      	ldr	r0, [pc, #36]	; (8006224 <SX1276IoIrqInit+0x54>)
 80061fe:	2200      	movs	r2, #0
 8006200:	2101      	movs	r1, #1
 8006202:	f7fd fda9 	bl	8003d58 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	330c      	adds	r3, #12
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	2380      	movs	r3, #128	; 0x80
 800620e:	0199      	lsls	r1, r3, #6
 8006210:	4805      	ldr	r0, [pc, #20]	; (8006228 <SX1276IoIrqInit+0x58>)
 8006212:	0013      	movs	r3, r2
 8006214:	2200      	movs	r2, #0
 8006216:	f7fd fd9f 	bl	8003d58 <HW_GPIO_SetIrq>
}
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	46bd      	mov	sp, r7
 800621e:	b002      	add	sp, #8
 8006220:	bd80      	pop	{r7, pc}
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	50000400 	.word	0x50000400
 8006228:	50000800 	.word	0x50000800

0800622c <SX1276IoDeInit>:

void SX1276IoDeInit( void )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 8006232:	1d3b      	adds	r3, r7, #4
 8006234:	0018      	movs	r0, r3
 8006236:	2314      	movs	r3, #20
 8006238:	001a      	movs	r2, r3
 800623a:	2100      	movs	r1, #0
 800623c:	f015 fa7c 	bl	801b738 <memset>

  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 8006240:	1d3b      	adds	r3, r7, #4
 8006242:	4a11      	ldr	r2, [pc, #68]	; (8006288 <SX1276IoDeInit+0x5c>)
 8006244:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 8006246:	1d3b      	adds	r3, r7, #4
 8006248:	2202      	movs	r2, #2
 800624a:	609a      	str	r2, [r3, #8]
  
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 800624c:	1d3b      	adds	r3, r7, #4
 800624e:	480f      	ldr	r0, [pc, #60]	; (800628c <SX1276IoDeInit+0x60>)
 8006250:	001a      	movs	r2, r3
 8006252:	2110      	movs	r1, #16
 8006254:	f7fd fd0c 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8006258:	1d3b      	adds	r3, r7, #4
 800625a:	480c      	ldr	r0, [pc, #48]	; (800628c <SX1276IoDeInit+0x60>)
 800625c:	001a      	movs	r2, r3
 800625e:	2102      	movs	r1, #2
 8006260:	f7fd fd06 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 8006264:	1d3b      	adds	r3, r7, #4
 8006266:	4809      	ldr	r0, [pc, #36]	; (800628c <SX1276IoDeInit+0x60>)
 8006268:	001a      	movs	r2, r3
 800626a:	2101      	movs	r1, #1
 800626c:	f7fd fd00 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8006270:	1d3a      	adds	r2, r7, #4
 8006272:	2380      	movs	r3, #128	; 0x80
 8006274:	019b      	lsls	r3, r3, #6
 8006276:	4806      	ldr	r0, [pc, #24]	; (8006290 <SX1276IoDeInit+0x64>)
 8006278:	0019      	movs	r1, r3
 800627a:	f7fd fcf9 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_4_PORT, RADIO_DIO_4_PIN, &initStruct );
#endif
#ifdef RADIO_DIO_5
  HW_GPIO_Init( RADIO_DIO_5_PORT, RADIO_DIO_5_PIN, &initStruct );
#endif
}
 800627e:	46c0      	nop			; (mov r8, r8)
 8006280:	46bd      	mov	sp, r7
 8006282:	b006      	add	sp, #24
 8006284:	bd80      	pop	{r7, pc}
 8006286:	46c0      	nop			; (mov r8, r8)
 8006288:	10110000 	.word	0x10110000
 800628c:	50000400 	.word	0x50000400
 8006290:	50000800 	.word	0x50000800

08006294 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 8006294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	0002      	movs	r2, r0
 800629c:	1dfb      	adds	r3, r7, #7
 800629e:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 80062a0:	250f      	movs	r5, #15
 80062a2:	197b      	adds	r3, r7, r5
 80062a4:	2200      	movs	r2, #0
 80062a6:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 80062a8:	260e      	movs	r6, #14
 80062aa:	19bb      	adds	r3, r7, r6
 80062ac:	2200      	movs	r2, #0
 80062ae:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 80062b0:	197c      	adds	r4, r7, r5
 80062b2:	2009      	movs	r0, #9
 80062b4:	f001 fee8 	bl	8008088 <SX1276Read>
 80062b8:	0003      	movs	r3, r0
 80062ba:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 80062bc:	19bc      	adds	r4, r7, r6
 80062be:	204d      	movs	r0, #77	; 0x4d
 80062c0:	f001 fee2 	bl	8008088 <SX1276Read>
 80062c4:	0003      	movs	r3, r0
 80062c6:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 80062c8:	197b      	adds	r3, r7, r5
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	b25b      	sxtb	r3, r3
 80062ce:	227f      	movs	r2, #127	; 0x7f
 80062d0:	4013      	ands	r3, r2
 80062d2:	b25c      	sxtb	r4, r3
 80062d4:	1dfb      	adds	r3, r7, #7
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	b25b      	sxtb	r3, r3
 80062da:	0018      	movs	r0, r3
 80062dc:	f000 f8bb 	bl	8006456 <SX1276GetPaSelect>
 80062e0:	0003      	movs	r3, r0
 80062e2:	b25b      	sxtb	r3, r3
 80062e4:	4323      	orrs	r3, r4
 80062e6:	b25a      	sxtb	r2, r3
 80062e8:	197b      	adds	r3, r7, r5
 80062ea:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80062ec:	197b      	adds	r3, r7, r5
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	b25b      	sxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da67      	bge.n	80063c6 <SX1276SetRfTxPower+0x132>
    {
        if( power > 17 )
 80062f6:	1dfb      	adds	r3, r7, #7
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	b25b      	sxtb	r3, r3
 80062fc:	2b11      	cmp	r3, #17
 80062fe:	dd07      	ble.n	8006310 <SX1276SetRfTxPower+0x7c>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8006300:	220e      	movs	r2, #14
 8006302:	18bb      	adds	r3, r7, r2
 8006304:	18ba      	adds	r2, r7, r2
 8006306:	7812      	ldrb	r2, [r2, #0]
 8006308:	2107      	movs	r1, #7
 800630a:	430a      	orrs	r2, r1
 800630c:	701a      	strb	r2, [r3, #0]
 800630e:	e00b      	b.n	8006328 <SX1276SetRfTxPower+0x94>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8006310:	210e      	movs	r1, #14
 8006312:	187b      	adds	r3, r7, r1
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	b25b      	sxtb	r3, r3
 8006318:	2207      	movs	r2, #7
 800631a:	4393      	bics	r3, r2
 800631c:	b25b      	sxtb	r3, r3
 800631e:	2204      	movs	r2, #4
 8006320:	4313      	orrs	r3, r2
 8006322:	b25a      	sxtb	r2, r3
 8006324:	187b      	adds	r3, r7, r1
 8006326:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8006328:	230e      	movs	r3, #14
 800632a:	18fb      	adds	r3, r7, r3
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	2207      	movs	r2, #7
 8006330:	4013      	ands	r3, r2
 8006332:	2b07      	cmp	r3, #7
 8006334:	d123      	bne.n	800637e <SX1276SetRfTxPower+0xea>
        {
            if( power < 5 )
 8006336:	1dfb      	adds	r3, r7, #7
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	b25b      	sxtb	r3, r3
 800633c:	2b04      	cmp	r3, #4
 800633e:	dc02      	bgt.n	8006346 <SX1276SetRfTxPower+0xb2>
            {
                power = 5;
 8006340:	1dfb      	adds	r3, r7, #7
 8006342:	2205      	movs	r2, #5
 8006344:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 8006346:	1dfb      	adds	r3, r7, #7
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	b25b      	sxtb	r3, r3
 800634c:	2b14      	cmp	r3, #20
 800634e:	dd02      	ble.n	8006356 <SX1276SetRfTxPower+0xc2>
            {
                power = 20;
 8006350:	1dfb      	adds	r3, r7, #7
 8006352:	2214      	movs	r2, #20
 8006354:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8006356:	200f      	movs	r0, #15
 8006358:	183b      	adds	r3, r7, r0
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	b25b      	sxtb	r3, r3
 800635e:	220f      	movs	r2, #15
 8006360:	4393      	bics	r3, r2
 8006362:	b25a      	sxtb	r2, r3
 8006364:	1dfb      	adds	r3, r7, #7
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	3b05      	subs	r3, #5
 800636a:	b2db      	uxtb	r3, r3
 800636c:	b25b      	sxtb	r3, r3
 800636e:	210f      	movs	r1, #15
 8006370:	400b      	ands	r3, r1
 8006372:	b25b      	sxtb	r3, r3
 8006374:	4313      	orrs	r3, r2
 8006376:	b25a      	sxtb	r2, r3
 8006378:	183b      	adds	r3, r7, r0
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	e059      	b.n	8006432 <SX1276SetRfTxPower+0x19e>
        }
        else
        {
            if( power < 2 )
 800637e:	1dfb      	adds	r3, r7, #7
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	b25b      	sxtb	r3, r3
 8006384:	2b01      	cmp	r3, #1
 8006386:	dc02      	bgt.n	800638e <SX1276SetRfTxPower+0xfa>
            {
                power = 2;
 8006388:	1dfb      	adds	r3, r7, #7
 800638a:	2202      	movs	r2, #2
 800638c:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 800638e:	1dfb      	adds	r3, r7, #7
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	b25b      	sxtb	r3, r3
 8006394:	2b11      	cmp	r3, #17
 8006396:	dd02      	ble.n	800639e <SX1276SetRfTxPower+0x10a>
            {
                power = 17;
 8006398:	1dfb      	adds	r3, r7, #7
 800639a:	2211      	movs	r2, #17
 800639c:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800639e:	200f      	movs	r0, #15
 80063a0:	183b      	adds	r3, r7, r0
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	b25b      	sxtb	r3, r3
 80063a6:	220f      	movs	r2, #15
 80063a8:	4393      	bics	r3, r2
 80063aa:	b25a      	sxtb	r2, r3
 80063ac:	1dfb      	adds	r3, r7, #7
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	3b02      	subs	r3, #2
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	b25b      	sxtb	r3, r3
 80063b6:	210f      	movs	r1, #15
 80063b8:	400b      	ands	r3, r1
 80063ba:	b25b      	sxtb	r3, r3
 80063bc:	4313      	orrs	r3, r2
 80063be:	b25a      	sxtb	r2, r3
 80063c0:	183b      	adds	r3, r7, r0
 80063c2:	701a      	strb	r2, [r3, #0]
 80063c4:	e035      	b.n	8006432 <SX1276SetRfTxPower+0x19e>
        }
    }
    else
    {
        if( power > 0 )
 80063c6:	1dfb      	adds	r3, r7, #7
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	b25b      	sxtb	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dd18      	ble.n	8006402 <SX1276SetRfTxPower+0x16e>
        {
            if( power > 15 )
 80063d0:	1dfb      	adds	r3, r7, #7
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	b25b      	sxtb	r3, r3
 80063d6:	2b0f      	cmp	r3, #15
 80063d8:	dd02      	ble.n	80063e0 <SX1276SetRfTxPower+0x14c>
            {
                power = 15;
 80063da:	1dfb      	adds	r3, r7, #7
 80063dc:	220f      	movs	r2, #15
 80063de:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 80063e0:	210f      	movs	r1, #15
 80063e2:	187b      	adds	r3, r7, r1
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	b25b      	sxtb	r3, r3
 80063e8:	227f      	movs	r2, #127	; 0x7f
 80063ea:	4393      	bics	r3, r2
 80063ec:	b25b      	sxtb	r3, r3
 80063ee:	2270      	movs	r2, #112	; 0x70
 80063f0:	4313      	orrs	r3, r2
 80063f2:	b25a      	sxtb	r2, r3
 80063f4:	1dfb      	adds	r3, r7, #7
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	b25a      	sxtb	r2, r3
 80063fc:	187b      	adds	r3, r7, r1
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	e017      	b.n	8006432 <SX1276SetRfTxPower+0x19e>
        }
        else
        {
            if( power < -4 )
 8006402:	1dfb      	adds	r3, r7, #7
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	b25b      	sxtb	r3, r3
 8006408:	3304      	adds	r3, #4
 800640a:	da02      	bge.n	8006412 <SX1276SetRfTxPower+0x17e>
            {
                power = -4;
 800640c:	1dfb      	adds	r3, r7, #7
 800640e:	22fc      	movs	r2, #252	; 0xfc
 8006410:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8006412:	210f      	movs	r1, #15
 8006414:	187b      	adds	r3, r7, r1
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	b25b      	sxtb	r3, r3
 800641a:	227f      	movs	r2, #127	; 0x7f
 800641c:	4393      	bics	r3, r2
 800641e:	b25a      	sxtb	r2, r3
 8006420:	1dfb      	adds	r3, r7, #7
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	3304      	adds	r3, #4
 8006426:	b2db      	uxtb	r3, r3
 8006428:	b25b      	sxtb	r3, r3
 800642a:	4313      	orrs	r3, r2
 800642c:	b25a      	sxtb	r2, r3
 800642e:	187b      	adds	r3, r7, r1
 8006430:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8006432:	230f      	movs	r3, #15
 8006434:	18fb      	adds	r3, r7, r3
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	0019      	movs	r1, r3
 800643a:	2009      	movs	r0, #9
 800643c:	f001 fe10 	bl	8008060 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8006440:	230e      	movs	r3, #14
 8006442:	18fb      	adds	r3, r7, r3
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	0019      	movs	r1, r3
 8006448:	204d      	movs	r0, #77	; 0x4d
 800644a:	f001 fe09 	bl	8008060 <SX1276Write>
}
 800644e:	46c0      	nop			; (mov r8, r8)
 8006450:	46bd      	mov	sp, r7
 8006452:	b005      	add	sp, #20
 8006454:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006456 <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( int8_t power )
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b082      	sub	sp, #8
 800645a:	af00      	add	r7, sp, #0
 800645c:	0002      	movs	r2, r0
 800645e:	1dfb      	adds	r3, r7, #7
 8006460:	701a      	strb	r2, [r3, #0]
    if (power >14)
 8006462:	1dfb      	adds	r3, r7, #7
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	b25b      	sxtb	r3, r3
 8006468:	2b0e      	cmp	r3, #14
 800646a:	dd01      	ble.n	8006470 <SX1276GetPaSelect+0x1a>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 800646c:	2380      	movs	r3, #128	; 0x80
 800646e:	e000      	b.n	8006472 <SX1276GetPaSelect+0x1c>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 8006470:	2300      	movs	r3, #0
    }
}
 8006472:	0018      	movs	r0, r3
 8006474:	46bd      	mov	sp, r7
 8006476:	b002      	add	sp, #8
 8006478:	bd80      	pop	{r7, pc}

0800647a <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b082      	sub	sp, #8
 800647e:	af00      	add	r7, sp, #0
 8006480:	0002      	movs	r2, r0
 8006482:	1dfb      	adds	r3, r7, #7
 8006484:	701a      	strb	r2, [r3, #0]
    if( status == false )
 8006486:	1dfb      	adds	r3, r7, #7
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	2201      	movs	r2, #1
 800648c:	4053      	eors	r3, r2
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <SX1276SetAntSwLowPower+0x20>
    {
      SX1276AntSwInit( );
 8006494:	f000 f808 	bl	80064a8 <SX1276AntSwInit>
    }
    else 
    {
      SX1276AntSwDeInit( );
    }
}
 8006498:	e001      	b.n	800649e <SX1276SetAntSwLowPower+0x24>
      SX1276AntSwDeInit( );
 800649a:	f000 f845 	bl	8006528 <SX1276AntSwDeInit>
}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	46bd      	mov	sp, r7
 80064a2:	b002      	add	sp, #8
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <SX1276AntSwInit>:

static void SX1276AntSwInit( void )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 80064ae:	1d3b      	adds	r3, r7, #4
 80064b0:	0018      	movs	r0, r3
 80064b2:	2314      	movs	r3, #20
 80064b4:	001a      	movs	r2, r3
 80064b6:	2100      	movs	r1, #0
 80064b8:	f015 f93e 	bl	801b738 <memset>

  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80064bc:	1d3b      	adds	r3, r7, #4
 80064be:	2201      	movs	r2, #1
 80064c0:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL; 
 80064c2:	1d3b      	adds	r3, r7, #4
 80064c4:	2200      	movs	r2, #0
 80064c6:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80064c8:	1d3b      	adds	r3, r7, #4
 80064ca:	2203      	movs	r2, #3
 80064cc:	60da      	str	r2, [r3, #12]
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 80064ce:	1d3a      	adds	r2, r7, #4
 80064d0:	23a0      	movs	r3, #160	; 0xa0
 80064d2:	05db      	lsls	r3, r3, #23
 80064d4:	2102      	movs	r1, #2
 80064d6:	0018      	movs	r0, r3
 80064d8:	f7fd fbca 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 80064dc:	23a0      	movs	r3, #160	; 0xa0
 80064de:	05db      	lsls	r3, r3, #23
 80064e0:	2200      	movs	r2, #0
 80064e2:	2102      	movs	r1, #2
 80064e4:	0018      	movs	r0, r3
 80064e6:	f7fd fc95 	bl	8003e14 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 80064ea:	1d3b      	adds	r3, r7, #4
 80064ec:	480d      	ldr	r0, [pc, #52]	; (8006524 <SX1276AntSwInit+0x7c>)
 80064ee:	001a      	movs	r2, r3
 80064f0:	2102      	movs	r1, #2
 80064f2:	f7fd fbbd 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 80064f6:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <SX1276AntSwInit+0x7c>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	2102      	movs	r1, #2
 80064fc:	0018      	movs	r0, r3
 80064fe:	f7fd fc89 	bl	8003e14 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8006502:	1d3b      	adds	r3, r7, #4
 8006504:	4807      	ldr	r0, [pc, #28]	; (8006524 <SX1276AntSwInit+0x7c>)
 8006506:	001a      	movs	r2, r3
 8006508:	2104      	movs	r1, #4
 800650a:	f7fd fbb1 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 800650e:	4b05      	ldr	r3, [pc, #20]	; (8006524 <SX1276AntSwInit+0x7c>)
 8006510:	2200      	movs	r2, #0
 8006512:	2104      	movs	r1, #4
 8006514:	0018      	movs	r0, r3
 8006516:	f7fd fc7d 	bl	8003e14 <HW_GPIO_Write>
}
 800651a:	46c0      	nop			; (mov r8, r8)
 800651c:	46bd      	mov	sp, r7
 800651e:	b006      	add	sp, #24
 8006520:	bd80      	pop	{r7, pc}
 8006522:	46c0      	nop			; (mov r8, r8)
 8006524:	50000800 	.word	0x50000800

08006528 <SX1276AntSwDeInit>:

static void SX1276AntSwDeInit( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800652e:	1d3b      	adds	r3, r7, #4
 8006530:	0018      	movs	r0, r3
 8006532:	2314      	movs	r3, #20
 8006534:	001a      	movs	r2, r3
 8006536:	2100      	movs	r1, #0
 8006538:	f015 f8fe 	bl	801b738 <memset>

  initStruct.Mode = GPIO_MODE_ANALOG ;
 800653c:	1d3b      	adds	r3, r7, #4
 800653e:	2203      	movs	r2, #3
 8006540:	605a      	str	r2, [r3, #4]
  
  initStruct.Pull = GPIO_NOPULL;
 8006542:	1d3b      	adds	r3, r7, #4
 8006544:	2200      	movs	r2, #0
 8006546:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8006548:	1d3b      	adds	r3, r7, #4
 800654a:	2203      	movs	r2, #3
 800654c:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 800654e:	1d3a      	adds	r2, r7, #4
 8006550:	23a0      	movs	r3, #160	; 0xa0
 8006552:	05db      	lsls	r3, r3, #23
 8006554:	2102      	movs	r1, #2
 8006556:	0018      	movs	r0, r3
 8006558:	f7fd fb8a 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 800655c:	23a0      	movs	r3, #160	; 0xa0
 800655e:	05db      	lsls	r3, r3, #23
 8006560:	2200      	movs	r2, #0
 8006562:	2102      	movs	r1, #2
 8006564:	0018      	movs	r0, r3
 8006566:	f7fd fc55 	bl	8003e14 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 800656a:	1d3b      	adds	r3, r7, #4
 800656c:	480d      	ldr	r0, [pc, #52]	; (80065a4 <SX1276AntSwDeInit+0x7c>)
 800656e:	001a      	movs	r2, r3
 8006570:	2102      	movs	r1, #2
 8006572:	f7fd fb7d 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8006576:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <SX1276AntSwDeInit+0x7c>)
 8006578:	2200      	movs	r2, #0
 800657a:	2102      	movs	r1, #2
 800657c:	0018      	movs	r0, r3
 800657e:	f7fd fc49 	bl	8003e14 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 8006582:	1d3b      	adds	r3, r7, #4
 8006584:	4807      	ldr	r0, [pc, #28]	; (80065a4 <SX1276AntSwDeInit+0x7c>)
 8006586:	001a      	movs	r2, r3
 8006588:	2104      	movs	r1, #4
 800658a:	f7fd fb71 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 800658e:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <SX1276AntSwDeInit+0x7c>)
 8006590:	2200      	movs	r2, #0
 8006592:	2104      	movs	r1, #4
 8006594:	0018      	movs	r0, r3
 8006596:	f7fd fc3d 	bl	8003e14 <HW_GPIO_Write>
}
 800659a:	46c0      	nop			; (mov r8, r8)
 800659c:	46bd      	mov	sp, r7
 800659e:	b006      	add	sp, #24
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	50000800 	.word	0x50000800

080065a8 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 80065a8:	b590      	push	{r4, r7, lr}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	0002      	movs	r2, r0
 80065b0:	1dfb      	adds	r3, r7, #7
 80065b2:	701a      	strb	r2, [r3, #0]
 uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 80065b4:	230f      	movs	r3, #15
 80065b6:	18fc      	adds	r4, r7, r3
 80065b8:	2009      	movs	r0, #9
 80065ba:	f001 fd65 	bl	8008088 <SX1276Read>
 80065be:	0003      	movs	r3, r0
 80065c0:	7023      	strb	r3, [r4, #0]
    switch( opMode )
 80065c2:	1dfb      	adds	r3, r7, #7
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d116      	bne.n	80065f8 <SX1276SetAntSw+0x50>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80065ca:	230f      	movs	r3, #15
 80065cc:	18fb      	adds	r3, r7, r3
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	b25b      	sxtb	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	da06      	bge.n	80065e4 <SX1276SetAntSw+0x3c>
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 1 );
 80065d6:	4b10      	ldr	r3, [pc, #64]	; (8006618 <SX1276SetAntSw+0x70>)
 80065d8:	2201      	movs	r2, #1
 80065da:	2102      	movs	r1, #2
 80065dc:	0018      	movs	r0, r3
 80065de:	f7fd fc19 	bl	8003e14 <HW_GPIO_Write>
 80065e2:	e005      	b.n	80065f0 <SX1276SetAntSw+0x48>
      }
      else
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
 80065e4:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <SX1276SetAntSw+0x70>)
 80065e6:	2201      	movs	r2, #1
 80065e8:	2104      	movs	r1, #4
 80065ea:	0018      	movs	r0, r3
 80065ec:	f7fd fc12 	bl	8003e14 <HW_GPIO_Write>
      }
      SX1276.RxTx = 1;
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <SX1276SetAntSw+0x74>)
 80065f2:	2201      	movs	r2, #1
 80065f4:	701a      	strb	r2, [r3, #0]
        break;
 80065f6:	e00a      	b.n	800660e <SX1276SetAntSw+0x66>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
     SX1276.RxTx = 0;
 80065f8:	4b08      	ldr	r3, [pc, #32]	; (800661c <SX1276SetAntSw+0x74>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	701a      	strb	r2, [r3, #0]
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 80065fe:	23a0      	movs	r3, #160	; 0xa0
 8006600:	05db      	lsls	r3, r3, #23
 8006602:	2201      	movs	r2, #1
 8006604:	2102      	movs	r1, #2
 8006606:	0018      	movs	r0, r3
 8006608:	f7fd fc04 	bl	8003e14 <HW_GPIO_Write>
     break;
 800660c:	46c0      	nop			; (mov r8, r8)
    }
}
 800660e:	46c0      	nop			; (mov r8, r8)
 8006610:	46bd      	mov	sp, r7
 8006612:	b005      	add	sp, #20
 8006614:	bd90      	pop	{r4, r7, pc}
 8006616:	46c0      	nop			; (mov r8, r8)
 8006618:	50000800 	.word	0x50000800
 800661c:	200015c8 	.word	0x200015c8

08006620 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 8006628:	2301      	movs	r3, #1
}
 800662a:	0018      	movs	r0, r3
 800662c:	46bd      	mov	sp, r7
 800662e:	b002      	add	sp, #8
 8006630:	bd80      	pop	{r7, pc}
	...

08006634 <SX1276BoardInit>:

/*
 * Radio driver functions implementation
 */
void SX1276BoardInit( LoRaBoardCallback_t *callbacks )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
    LoRaBoardCallbacks =callbacks;
 800663c:	4b03      	ldr	r3, [pc, #12]	; (800664c <SX1276BoardInit+0x18>)
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	601a      	str	r2, [r3, #0]
}
 8006642:	46c0      	nop			; (mov r8, r8)
 8006644:	46bd      	mov	sp, r7
 8006646:	b002      	add	sp, #8
 8006648:	bd80      	pop	{r7, pc}
 800664a:	46c0      	nop			; (mov r8, r8)
 800664c:	20000524 	.word	0x20000524

08006650 <SX1276Init>:

uint32_t SX1276Init( RadioEvents_t *events )
{
 8006650:	b590      	push	{r4, r7, lr}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 8006658:	4b33      	ldr	r3, [pc, #204]	; (8006728 <SX1276Init+0xd8>)
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800665e:	4a33      	ldr	r2, [pc, #204]	; (800672c <SX1276Init+0xdc>)
 8006660:	4b33      	ldr	r3, [pc, #204]	; (8006730 <SX1276Init+0xe0>)
 8006662:	0011      	movs	r1, r2
 8006664:	0018      	movs	r0, r3
 8006666:	f014 fc74 	bl	801af52 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 800666a:	4a30      	ldr	r2, [pc, #192]	; (800672c <SX1276Init+0xdc>)
 800666c:	4b31      	ldr	r3, [pc, #196]	; (8006734 <SX1276Init+0xe4>)
 800666e:	0011      	movs	r1, r2
 8006670:	0018      	movs	r0, r3
 8006672:	f014 fc6e 	bl	801af52 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8006676:	4a2d      	ldr	r2, [pc, #180]	; (800672c <SX1276Init+0xdc>)
 8006678:	4b2f      	ldr	r3, [pc, #188]	; (8006738 <SX1276Init+0xe8>)
 800667a:	0011      	movs	r1, r2
 800667c:	0018      	movs	r0, r3
 800667e:	f014 fc68 	bl	801af52 <TimerInit>

    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 8006682:	4b2e      	ldr	r3, [pc, #184]	; (800673c <SX1276Init+0xec>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2001      	movs	r0, #1
 800668a:	4798      	blx	r3

    SX1276Reset( );
 800668c:	f001 fc0a 	bl	8007ea4 <SX1276Reset>

    RxChainCalibration( );
 8006690:	f000 f93c 	bl	800690c <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006694:	2000      	movs	r0, #0
 8006696:	f001 fc39 	bl	8007f0c <SX1276SetOpMode>

    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 800669a:	4b28      	ldr	r3, [pc, #160]	; (800673c <SX1276Init+0xec>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	4a27      	ldr	r2, [pc, #156]	; (8006740 <SX1276Init+0xf0>)
 80066a2:	0010      	movs	r0, r2
 80066a4:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80066a6:	230f      	movs	r3, #15
 80066a8:	18fb      	adds	r3, r7, r3
 80066aa:	2200      	movs	r2, #0
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	e025      	b.n	80066fc <SX1276Init+0xac>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 80066b0:	240f      	movs	r4, #15
 80066b2:	193b      	adds	r3, r7, r4
 80066b4:	781a      	ldrb	r2, [r3, #0]
 80066b6:	4923      	ldr	r1, [pc, #140]	; (8006744 <SX1276Init+0xf4>)
 80066b8:	0013      	movs	r3, r2
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	189b      	adds	r3, r3, r2
 80066be:	5c5b      	ldrb	r3, [r3, r1]
 80066c0:	0018      	movs	r0, r3
 80066c2:	f001 fc73 	bl	8007fac <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80066c6:	193b      	adds	r3, r7, r4
 80066c8:	781a      	ldrb	r2, [r3, #0]
 80066ca:	491e      	ldr	r1, [pc, #120]	; (8006744 <SX1276Init+0xf4>)
 80066cc:	0013      	movs	r3, r2
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	189b      	adds	r3, r3, r2
 80066d2:	18cb      	adds	r3, r1, r3
 80066d4:	3301      	adds	r3, #1
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	b298      	uxth	r0, r3
 80066da:	193b      	adds	r3, r7, r4
 80066dc:	781a      	ldrb	r2, [r3, #0]
 80066de:	4919      	ldr	r1, [pc, #100]	; (8006744 <SX1276Init+0xf4>)
 80066e0:	0013      	movs	r3, r2
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	189b      	adds	r3, r3, r2
 80066e6:	18cb      	adds	r3, r1, r3
 80066e8:	3302      	adds	r3, #2
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	0019      	movs	r1, r3
 80066ee:	f001 fcb7 	bl	8008060 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80066f2:	193b      	adds	r3, r7, r4
 80066f4:	781a      	ldrb	r2, [r3, #0]
 80066f6:	193b      	adds	r3, r7, r4
 80066f8:	3201      	adds	r2, #1
 80066fa:	701a      	strb	r2, [r3, #0]
 80066fc:	230f      	movs	r3, #15
 80066fe:	18fb      	adds	r3, r7, r3
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	2b0f      	cmp	r3, #15
 8006704:	d9d4      	bls.n	80066b0 <SX1276Init+0x60>
    }

    SX1276SetModem( MODEM_FSK );
 8006706:	2000      	movs	r0, #0
 8006708:	f001 fc50 	bl	8007fac <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 800670c:	4b0e      	ldr	r3, [pc, #56]	; (8006748 <SX1276Init+0xf8>)
 800670e:	2200      	movs	r2, #0
 8006710:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 8006712:	4b0a      	ldr	r3, [pc, #40]	; (800673c <SX1276Init+0xec>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	4798      	blx	r3
 800671a:	0003      	movs	r3, r0
 800671c:	3302      	adds	r3, #2
}
 800671e:	0018      	movs	r0, r3
 8006720:	46bd      	mov	sp, r7
 8006722:	b005      	add	sp, #20
 8006724:	bd90      	pop	{r4, r7, pc}
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	20000420 	.word	0x20000420
 800672c:	080082c9 	.word	0x080082c9
 8006730:	20001598 	.word	0x20001598
 8006734:	20001630 	.word	0x20001630
 8006738:	200015b0 	.word	0x200015b0
 800673c:	20000524 	.word	0x20000524
 8006740:	2000005c 	.word	0x2000005c
 8006744:	0801cb7c 	.word	0x0801cb7c
 8006748:	200015c8 	.word	0x200015c8

0800674c <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 8006750:	4b02      	ldr	r3, [pc, #8]	; (800675c <SX1276GetStatus+0x10>)
 8006752:	791b      	ldrb	r3, [r3, #4]
}
 8006754:	0018      	movs	r0, r3
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	200015c8 	.word	0x200015c8

08006760 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8006760:	b590      	push	{r4, r7, lr}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 8006768:	4b1d      	ldr	r3, [pc, #116]	; (80067e0 <SX1276SetChannel+0x80>)
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	491c      	ldr	r1, [pc, #112]	; (80067e4 <SX1276SetChannel+0x84>)
 8006772:	0018      	movs	r0, r3
 8006774:	f7f9 fcc8 	bl	8000108 <__udivsi3>
 8006778:	0003      	movs	r3, r0
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	6979      	ldr	r1, [r7, #20]
 800677e:	000b      	movs	r3, r1
 8006780:	015b      	lsls	r3, r3, #5
 8006782:	1a5b      	subs	r3, r3, r1
 8006784:	019a      	lsls	r2, r3, #6
 8006786:	1ad2      	subs	r2, r2, r3
 8006788:	00d2      	lsls	r2, r2, #3
 800678a:	1853      	adds	r3, r2, r1
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	613b      	str	r3, [r7, #16]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	021c      	lsls	r4, r3, #8
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	4a13      	ldr	r2, [pc, #76]	; (80067e8 <SX1276SetChannel+0x88>)
 800679c:	4694      	mov	ip, r2
 800679e:	4463      	add	r3, ip
 80067a0:	4910      	ldr	r1, [pc, #64]	; (80067e4 <SX1276SetChannel+0x84>)
 80067a2:	0018      	movs	r0, r3
 80067a4:	f7f9 fcb0 	bl	8000108 <__udivsi3>
 80067a8:	0003      	movs	r3, r0
 80067aa:	18e3      	adds	r3, r4, r3
 80067ac:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	0c1b      	lsrs	r3, r3, #16
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	0019      	movs	r1, r3
 80067b6:	2006      	movs	r0, #6
 80067b8:	f001 fc52 	bl	8008060 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	0a1b      	lsrs	r3, r3, #8
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	0019      	movs	r1, r3
 80067c4:	2007      	movs	r0, #7
 80067c6:	f001 fc4b 	bl	8008060 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	0019      	movs	r1, r3
 80067d0:	2008      	movs	r0, #8
 80067d2:	f001 fc45 	bl	8008060 <SX1276Write>
}
 80067d6:	46c0      	nop			; (mov r8, r8)
 80067d8:	46bd      	mov	sp, r7
 80067da:	b007      	add	sp, #28
 80067dc:	bd90      	pop	{r4, r7, pc}
 80067de:	46c0      	nop			; (mov r8, r8)
 80067e0:	200015c8 	.word	0x200015c8
 80067e4:	00003d09 	.word	0x00003d09
 80067e8:	00001e84 	.word	0x00001e84

080067ec <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80067ec:	b5b0      	push	{r4, r5, r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	0011      	movs	r1, r2
 80067f6:	607b      	str	r3, [r7, #4]
 80067f8:	230f      	movs	r3, #15
 80067fa:	18fb      	adds	r3, r7, r3
 80067fc:	1c02      	adds	r2, r0, #0
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	230c      	movs	r3, #12
 8006802:	18fb      	adds	r3, r7, r3
 8006804:	1c0a      	adds	r2, r1, #0
 8006806:	801a      	strh	r2, [r3, #0]
    bool status = true;
 8006808:	2317      	movs	r3, #23
 800680a:	18fb      	adds	r3, r7, r3
 800680c:	2201      	movs	r2, #1
 800680e:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8006810:	2314      	movs	r3, #20
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	2200      	movs	r2, #0
 8006816:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 8006818:	2300      	movs	r3, #0
 800681a:	613b      	str	r3, [r7, #16]

    if( SX1276GetStatus( ) != RF_IDLE )
 800681c:	f7ff ff96 	bl	800674c <SX1276GetStatus>
 8006820:	1e03      	subs	r3, r0, #0
 8006822:	d001      	beq.n	8006828 <SX1276IsChannelFree+0x3c>
    {
        return false;
 8006824:	2300      	movs	r3, #0
 8006826:	e039      	b.n	800689c <SX1276IsChannelFree+0xb0>
    }

    SX1276SetModem( modem );
 8006828:	230f      	movs	r3, #15
 800682a:	18fb      	adds	r3, r7, r3
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	0018      	movs	r0, r3
 8006830:	f001 fbbc 	bl	8007fac <SX1276SetModem>

    SX1276SetChannel( freq );
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	0018      	movs	r0, r3
 8006838:	f7ff ff92 	bl	8006760 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 800683c:	2005      	movs	r0, #5
 800683e:	f001 fb65 	bl	8007f0c <SX1276SetOpMode>

    DelayMs( 1 );
 8006842:	2001      	movs	r0, #1
 8006844:	f7fe fc5c 	bl	8005100 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8006848:	f014 fd19 	bl	801b27e <TimerGetCurrentTime>
 800684c:	0003      	movs	r3, r0
 800684e:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006850:	e017      	b.n	8006882 <SX1276IsChannelFree+0x96>
    {
        rssi = SX1276ReadRssi( modem );
 8006852:	2514      	movs	r5, #20
 8006854:	197c      	adds	r4, r7, r5
 8006856:	230f      	movs	r3, #15
 8006858:	18fb      	adds	r3, r7, r3
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	0018      	movs	r0, r3
 800685e:	f001 fad5 	bl	8007e0c <SX1276ReadRssi>
 8006862:	0003      	movs	r3, r0
 8006864:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 8006866:	197a      	adds	r2, r7, r5
 8006868:	230c      	movs	r3, #12
 800686a:	18fb      	adds	r3, r7, r3
 800686c:	2100      	movs	r1, #0
 800686e:	5e52      	ldrsh	r2, [r2, r1]
 8006870:	2100      	movs	r1, #0
 8006872:	5e5b      	ldrsh	r3, [r3, r1]
 8006874:	429a      	cmp	r2, r3
 8006876:	dd04      	ble.n	8006882 <SX1276IsChannelFree+0x96>
        {
            status = false;
 8006878:	2317      	movs	r3, #23
 800687a:	18fb      	adds	r3, r7, r3
 800687c:	2200      	movs	r2, #0
 800687e:	701a      	strb	r2, [r3, #0]
            break;
 8006880:	e007      	b.n	8006892 <SX1276IsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	0018      	movs	r0, r3
 8006886:	f014 fd0a 	bl	801b29e <TimerGetElapsedTime>
 800688a:	0002      	movs	r2, r0
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4293      	cmp	r3, r2
 8006890:	d8df      	bhi.n	8006852 <SX1276IsChannelFree+0x66>
        }
    }
    SX1276SetSleep( );
 8006892:	f000 ffdd 	bl	8007850 <SX1276SetSleep>
    return status;
 8006896:	2317      	movs	r3, #23
 8006898:	18fb      	adds	r3, r7, r3
 800689a:	781b      	ldrb	r3, [r3, #0]
}
 800689c:	0018      	movs	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	b006      	add	sp, #24
 80068a2:	bdb0      	pop	{r4, r5, r7, pc}

080068a4 <SX1276Random>:

uint32_t SX1276Random( void )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 80068ae:	2001      	movs	r0, #1
 80068b0:	f001 fb7c 	bl	8007fac <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80068b4:	21ff      	movs	r1, #255	; 0xff
 80068b6:	2011      	movs	r0, #17
 80068b8:	f001 fbd2 	bl	8008060 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80068bc:	2005      	movs	r0, #5
 80068be:	f001 fb25 	bl	8007f0c <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 80068c2:	1dfb      	adds	r3, r7, #7
 80068c4:	2200      	movs	r2, #0
 80068c6:	701a      	strb	r2, [r3, #0]
 80068c8:	e015      	b.n	80068f6 <SX1276Random+0x52>
    {
        DelayMs( 1 );
 80068ca:	2001      	movs	r0, #1
 80068cc:	f7fe fc18 	bl	8005100 <HAL_Delay>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80068d0:	202c      	movs	r0, #44	; 0x2c
 80068d2:	f001 fbd9 	bl	8008088 <SX1276Read>
 80068d6:	0003      	movs	r3, r0
 80068d8:	001a      	movs	r2, r3
 80068da:	2301      	movs	r3, #1
 80068dc:	401a      	ands	r2, r3
 80068de:	1dfb      	adds	r3, r7, #7
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	409a      	lsls	r2, r3
 80068e4:	0013      	movs	r3, r2
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 80068ec:	1dfb      	adds	r3, r7, #7
 80068ee:	781a      	ldrb	r2, [r3, #0]
 80068f0:	1dfb      	adds	r3, r7, #7
 80068f2:	3201      	adds	r2, #1
 80068f4:	701a      	strb	r2, [r3, #0]
 80068f6:	1dfb      	adds	r3, r7, #7
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b1f      	cmp	r3, #31
 80068fc:	d9e5      	bls.n	80068ca <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 80068fe:	f000 ffa7 	bl	8007850 <SX1276SetSleep>

    return rnd;
 8006902:	683b      	ldr	r3, [r7, #0]
}
 8006904:	0018      	movs	r0, r3
 8006906:	46bd      	mov	sp, r7
 8006908:	b002      	add	sp, #8
 800690a:	bd80      	pop	{r7, pc}

0800690c <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
void RxChainCalibration( void )
{
 800690c:	b590      	push	{r4, r7, lr}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8006912:	2317      	movs	r3, #23
 8006914:	18fc      	adds	r4, r7, r3
 8006916:	2009      	movs	r0, #9
 8006918:	f001 fbb6 	bl	8008088 <SX1276Read>
 800691c:	0003      	movs	r3, r0
 800691e:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8006920:	2006      	movs	r0, #6
 8006922:	f001 fbb1 	bl	8008088 <SX1276Read>
 8006926:	0003      	movs	r3, r0
 8006928:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800692a:	2007      	movs	r0, #7
 800692c:	f001 fbac 	bl	8008088 <SX1276Read>
 8006930:	0003      	movs	r3, r0
 8006932:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8006934:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8006936:	2008      	movs	r0, #8
 8006938:	f001 fba6 	bl	8008088 <SX1276Read>
 800693c:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800693e:	4323      	orrs	r3, r4
 8006940:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	0a1b      	lsrs	r3, r3, #8
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	021b      	lsls	r3, r3, #8
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	60bb      	str	r3, [r7, #8]
 8006952:	68f9      	ldr	r1, [r7, #12]
 8006954:	000b      	movs	r3, r1
 8006956:	015b      	lsls	r3, r3, #5
 8006958:	1a5b      	subs	r3, r3, r1
 800695a:	019a      	lsls	r2, r3, #6
 800695c:	1ad2      	subs	r2, r2, r3
 800695e:	00d2      	lsls	r2, r2, #3
 8006960:	1850      	adds	r0, r2, r1
 8006962:	68b9      	ldr	r1, [r7, #8]
 8006964:	000b      	movs	r3, r1
 8006966:	015b      	lsls	r3, r3, #5
 8006968:	1a5b      	subs	r3, r3, r1
 800696a:	019a      	lsls	r2, r3, #6
 800696c:	1ad2      	subs	r2, r2, r3
 800696e:	00d2      	lsls	r2, r2, #3
 8006970:	1853      	adds	r3, r2, r1
 8006972:	3380      	adds	r3, #128	; 0x80
 8006974:	0a1b      	lsrs	r3, r3, #8
 8006976:	18c3      	adds	r3, r0, r3
 8006978:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 800697a:	2100      	movs	r1, #0
 800697c:	2009      	movs	r0, #9
 800697e:	f001 fb6f 	bl	8008060 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8006982:	203b      	movs	r0, #59	; 0x3b
 8006984:	f001 fb80 	bl	8008088 <SX1276Read>
 8006988:	0003      	movs	r3, r0
 800698a:	001a      	movs	r2, r3
 800698c:	2340      	movs	r3, #64	; 0x40
 800698e:	4313      	orrs	r3, r2
 8006990:	b2db      	uxtb	r3, r3
 8006992:	0019      	movs	r1, r3
 8006994:	203b      	movs	r0, #59	; 0x3b
 8006996:	f001 fb63 	bl	8008060 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800699a:	46c0      	nop			; (mov r8, r8)
 800699c:	203b      	movs	r0, #59	; 0x3b
 800699e:	f001 fb73 	bl	8008088 <SX1276Read>
 80069a2:	0003      	movs	r3, r0
 80069a4:	001a      	movs	r2, r3
 80069a6:	2320      	movs	r3, #32
 80069a8:	4013      	ands	r3, r2
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d0f6      	beq.n	800699c <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 80069ae:	4b14      	ldr	r3, [pc, #80]	; (8006a00 <RxChainCalibration+0xf4>)
 80069b0:	0018      	movs	r0, r3
 80069b2:	f7ff fed5 	bl	8006760 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80069b6:	203b      	movs	r0, #59	; 0x3b
 80069b8:	f001 fb66 	bl	8008088 <SX1276Read>
 80069bc:	0003      	movs	r3, r0
 80069be:	001a      	movs	r2, r3
 80069c0:	2340      	movs	r3, #64	; 0x40
 80069c2:	4313      	orrs	r3, r2
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	0019      	movs	r1, r3
 80069c8:	203b      	movs	r0, #59	; 0x3b
 80069ca:	f001 fb49 	bl	8008060 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80069ce:	46c0      	nop			; (mov r8, r8)
 80069d0:	203b      	movs	r0, #59	; 0x3b
 80069d2:	f001 fb59 	bl	8008088 <SX1276Read>
 80069d6:	0003      	movs	r3, r0
 80069d8:	001a      	movs	r2, r3
 80069da:	2320      	movs	r3, #32
 80069dc:	4013      	ands	r3, r2
 80069de:	2b20      	cmp	r3, #32
 80069e0:	d0f6      	beq.n	80069d0 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80069e2:	2317      	movs	r3, #23
 80069e4:	18fb      	adds	r3, r7, r3
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	0019      	movs	r1, r3
 80069ea:	2009      	movs	r0, #9
 80069ec:	f001 fb38 	bl	8008060 <SX1276Write>
    SX1276SetChannel( initialFreq );
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	0018      	movs	r0, r3
 80069f4:	f7ff feb4 	bl	8006760 <SX1276SetChannel>
}
 80069f8:	46c0      	nop			; (mov r8, r8)
 80069fa:	46bd      	mov	sp, r7
 80069fc:	b007      	add	sp, #28
 80069fe:	bd90      	pop	{r4, r7, pc}
 8006a00:	33bca100 	.word	0x33bca100

08006a04 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8006a0c:	230f      	movs	r3, #15
 8006a0e:	18fb      	adds	r3, r7, r3
 8006a10:	2200      	movs	r2, #0
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	e021      	b.n	8006a5a <GetFskBandwidthRegValue+0x56>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8006a16:	230f      	movs	r3, #15
 8006a18:	18fb      	adds	r3, r7, r3
 8006a1a:	781a      	ldrb	r2, [r3, #0]
 8006a1c:	4b14      	ldr	r3, [pc, #80]	; (8006a70 <GetFskBandwidthRegValue+0x6c>)
 8006a1e:	00d2      	lsls	r2, r2, #3
 8006a20:	58d3      	ldr	r3, [r2, r3]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d312      	bcc.n	8006a4e <GetFskBandwidthRegValue+0x4a>
 8006a28:	230f      	movs	r3, #15
 8006a2a:	18fb      	adds	r3, r7, r3
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	4b0f      	ldr	r3, [pc, #60]	; (8006a70 <GetFskBandwidthRegValue+0x6c>)
 8006a32:	00d2      	lsls	r2, r2, #3
 8006a34:	58d3      	ldr	r3, [r2, r3]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d208      	bcs.n	8006a4e <GetFskBandwidthRegValue+0x4a>
        {
            return FskBandwidths[i].RegValue;
 8006a3c:	230f      	movs	r3, #15
 8006a3e:	18fb      	adds	r3, r7, r3
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	4a0b      	ldr	r2, [pc, #44]	; (8006a70 <GetFskBandwidthRegValue+0x6c>)
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	18d3      	adds	r3, r2, r3
 8006a48:	3304      	adds	r3, #4
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	e00b      	b.n	8006a66 <GetFskBandwidthRegValue+0x62>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8006a4e:	210f      	movs	r1, #15
 8006a50:	187b      	adds	r3, r7, r1
 8006a52:	781a      	ldrb	r2, [r3, #0]
 8006a54:	187b      	adds	r3, r7, r1
 8006a56:	3201      	adds	r2, #1
 8006a58:	701a      	strb	r2, [r3, #0]
 8006a5a:	230f      	movs	r3, #15
 8006a5c:	18fb      	adds	r3, r7, r3
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b14      	cmp	r3, #20
 8006a62:	d9d8      	bls.n	8006a16 <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8006a64:	e7fe      	b.n	8006a64 <GetFskBandwidthRegValue+0x60>
}
 8006a66:	0018      	movs	r0, r3
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	b004      	add	sp, #16
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	46c0      	nop			; (mov r8, r8)
 8006a70:	0801cbac 	.word	0x0801cbac

08006a74 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8006a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a76:	46c6      	mov	lr, r8
 8006a78:	b500      	push	{lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	607a      	str	r2, [r7, #4]
 8006a82:	0019      	movs	r1, r3
 8006a84:	240f      	movs	r4, #15
 8006a86:	193b      	adds	r3, r7, r4
 8006a88:	1c02      	adds	r2, r0, #0
 8006a8a:	701a      	strb	r2, [r3, #0]
 8006a8c:	230e      	movs	r3, #14
 8006a8e:	18fb      	adds	r3, r7, r3
 8006a90:	1c0a      	adds	r2, r1, #0
 8006a92:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8006a94:	193b      	adds	r3, r7, r4
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f001 fa87 	bl	8007fac <SX1276SetModem>

    switch( modem )
 8006a9e:	193b      	adds	r3, r7, r4
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <SX1276SetRxConfig+0x3a>
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d100      	bne.n	8006aac <SX1276SetRxConfig+0x38>
 8006aaa:	e100      	b.n	8006cae <SX1276SetRxConfig+0x23a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8006aac:	e274      	b.n	8006f98 <SX1276SetRxConfig+0x524>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8006aae:	4bc0      	ldr	r3, [pc, #768]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8006ab4:	4bbe      	ldr	r3, [pc, #760]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8006aba:	4bbd      	ldr	r3, [pc, #756]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006abe:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8006ac0:	4bbb      	ldr	r3, [pc, #748]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006ac2:	222c      	movs	r2, #44	; 0x2c
 8006ac4:	2108      	movs	r1, #8
 8006ac6:	468c      	mov	ip, r1
 8006ac8:	44bc      	add	ip, r7
 8006aca:	4462      	add	r2, ip
 8006acc:	2122      	movs	r1, #34	; 0x22
 8006ace:	7812      	ldrb	r2, [r2, #0]
 8006ad0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8006ad2:	4bb7      	ldr	r3, [pc, #732]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006ad4:	2130      	movs	r1, #48	; 0x30
 8006ad6:	2008      	movs	r0, #8
 8006ad8:	183a      	adds	r2, r7, r0
 8006ada:	1852      	adds	r2, r2, r1
 8006adc:	2123      	movs	r1, #35	; 0x23
 8006ade:	7812      	ldrb	r2, [r2, #0]
 8006ae0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8006ae2:	4bb3      	ldr	r3, [pc, #716]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006ae4:	2134      	movs	r1, #52	; 0x34
 8006ae6:	183a      	adds	r2, r7, r0
 8006ae8:	1852      	adds	r2, r2, r1
 8006aea:	2124      	movs	r1, #36	; 0x24
 8006aec:	7812      	ldrb	r2, [r2, #0]
 8006aee:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8006af0:	4baf      	ldr	r3, [pc, #700]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006af2:	2220      	movs	r2, #32
 8006af4:	2120      	movs	r1, #32
 8006af6:	468c      	mov	ip, r1
 8006af8:	2108      	movs	r1, #8
 8006afa:	4688      	mov	r8, r1
 8006afc:	44b8      	add	r8, r7
 8006afe:	44c4      	add	ip, r8
 8006b00:	4462      	add	r2, ip
 8006b02:	2125      	movs	r1, #37	; 0x25
 8006b04:	7812      	ldrb	r2, [r2, #0]
 8006b06:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8006b08:	4ba9      	ldr	r3, [pc, #676]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006b0a:	2224      	movs	r2, #36	; 0x24
 8006b0c:	2120      	movs	r1, #32
 8006b0e:	468c      	mov	ip, r1
 8006b10:	2108      	movs	r1, #8
 8006b12:	4688      	mov	r8, r1
 8006b14:	44b8      	add	r8, r7
 8006b16:	44c4      	add	ip, r8
 8006b18:	4462      	add	r2, ip
 8006b1a:	2126      	movs	r1, #38	; 0x26
 8006b1c:	7812      	ldrb	r2, [r2, #0]
 8006b1e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8006b20:	4ba3      	ldr	r3, [pc, #652]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006b22:	2624      	movs	r6, #36	; 0x24
 8006b24:	183a      	adds	r2, r7, r0
 8006b26:	1992      	adds	r2, r2, r6
 8006b28:	8812      	ldrh	r2, [r2, #0]
 8006b2a:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8006b2c:	2328      	movs	r3, #40	; 0x28
 8006b2e:	2208      	movs	r2, #8
 8006b30:	4694      	mov	ip, r2
 8006b32:	44bc      	add	ip, r7
 8006b34:	4463      	add	r3, ip
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f7fc f8e3 	bl	8002d04 <__aeabi_i2d>
 8006b3e:	0004      	movs	r4, r0
 8006b40:	000d      	movs	r5, r1
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7fc f918 	bl	8002d78 <__aeabi_ui2d>
 8006b48:	0002      	movs	r2, r0
 8006b4a:	000b      	movs	r3, r1
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	4999      	ldr	r1, [pc, #612]	; (8006db4 <SX1276SetRxConfig+0x340>)
 8006b50:	f7fa fede 	bl	8001910 <__aeabi_ddiv>
 8006b54:	0002      	movs	r2, r0
 8006b56:	000b      	movs	r3, r1
 8006b58:	0010      	movs	r0, r2
 8006b5a:	0019      	movs	r1, r3
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	4b96      	ldr	r3, [pc, #600]	; (8006db8 <SX1276SetRxConfig+0x344>)
 8006b60:	f7fb fae0 	bl	8002124 <__aeabi_dmul>
 8006b64:	0002      	movs	r2, r0
 8006b66:	000b      	movs	r3, r1
 8006b68:	0020      	movs	r0, r4
 8006b6a:	0029      	movs	r1, r5
 8006b6c:	f7fb fada 	bl	8002124 <__aeabi_dmul>
 8006b70:	0003      	movs	r3, r0
 8006b72:	000c      	movs	r4, r1
 8006b74:	0018      	movs	r0, r3
 8006b76:	0021      	movs	r1, r4
 8006b78:	2200      	movs	r2, #0
 8006b7a:	4b90      	ldr	r3, [pc, #576]	; (8006dbc <SX1276SetRxConfig+0x348>)
 8006b7c:	f7fb fad2 	bl	8002124 <__aeabi_dmul>
 8006b80:	0003      	movs	r3, r0
 8006b82:	000c      	movs	r4, r1
 8006b84:	0018      	movs	r0, r3
 8006b86:	0021      	movs	r1, r4
 8006b88:	f7f9 fd32 	bl	80005f0 <__aeabi_d2uiz>
 8006b8c:	0002      	movs	r2, r0
 8006b8e:	4b88      	ldr	r3, [pc, #544]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006b90:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7fc f8f0 	bl	8002d78 <__aeabi_ui2d>
 8006b98:	0003      	movs	r3, r0
 8006b9a:	000c      	movs	r4, r1
 8006b9c:	001a      	movs	r2, r3
 8006b9e:	0023      	movs	r3, r4
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	4987      	ldr	r1, [pc, #540]	; (8006dc0 <SX1276SetRxConfig+0x34c>)
 8006ba4:	f7fa feb4 	bl	8001910 <__aeabi_ddiv>
 8006ba8:	0003      	movs	r3, r0
 8006baa:	000c      	movs	r4, r1
 8006bac:	0018      	movs	r0, r3
 8006bae:	0021      	movs	r1, r4
 8006bb0:	f7f9 fd1e 	bl	80005f0 <__aeabi_d2uiz>
 8006bb4:	0003      	movs	r3, r0
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	0a1b      	lsrs	r3, r3, #8
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	0019      	movs	r1, r3
 8006bc2:	2002      	movs	r0, #2
 8006bc4:	f001 fa4c 	bl	8008060 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	0019      	movs	r1, r3
 8006bce:	2003      	movs	r0, #3
 8006bd0:	f001 fa46 	bl	8008060 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	f7ff ff14 	bl	8006a04 <GetFskBandwidthRegValue>
 8006bdc:	0003      	movs	r3, r0
 8006bde:	0019      	movs	r1, r3
 8006be0:	2012      	movs	r0, #18
 8006be2:	f001 fa3d 	bl	8008060 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8006be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be8:	0018      	movs	r0, r3
 8006bea:	f7ff ff0b 	bl	8006a04 <GetFskBandwidthRegValue>
 8006bee:	0003      	movs	r3, r0
 8006bf0:	0019      	movs	r1, r3
 8006bf2:	2013      	movs	r0, #19
 8006bf4:	f001 fa34 	bl	8008060 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8006bf8:	2008      	movs	r0, #8
 8006bfa:	0004      	movs	r4, r0
 8006bfc:	183b      	adds	r3, r7, r0
 8006bfe:	199b      	adds	r3, r3, r6
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	0a1b      	lsrs	r3, r3, #8
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	0019      	movs	r1, r3
 8006c0a:	2025      	movs	r0, #37	; 0x25
 8006c0c:	f001 fa28 	bl	8008060 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8006c10:	193b      	adds	r3, r7, r4
 8006c12:	199b      	adds	r3, r3, r6
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	0019      	movs	r1, r3
 8006c1a:	2026      	movs	r0, #38	; 0x26
 8006c1c:	f001 fa20 	bl	8008060 <SX1276Write>
            if( fixLen == 1 )
 8006c20:	222c      	movs	r2, #44	; 0x2c
 8006c22:	193b      	adds	r3, r7, r4
 8006c24:	189b      	adds	r3, r3, r2
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <SX1276SetRxConfig+0x1ce>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8006c2c:	2330      	movs	r3, #48	; 0x30
 8006c2e:	2208      	movs	r2, #8
 8006c30:	4694      	mov	ip, r2
 8006c32:	44bc      	add	ip, r7
 8006c34:	4463      	add	r3, ip
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	0019      	movs	r1, r3
 8006c3a:	2032      	movs	r0, #50	; 0x32
 8006c3c:	f001 fa10 	bl	8008060 <SX1276Write>
 8006c40:	e003      	b.n	8006c4a <SX1276SetRxConfig+0x1d6>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8006c42:	21ff      	movs	r1, #255	; 0xff
 8006c44:	2032      	movs	r0, #50	; 0x32
 8006c46:	f001 fa0b 	bl	8008060 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8006c4a:	2030      	movs	r0, #48	; 0x30
 8006c4c:	f001 fa1c 	bl	8008088 <SX1276Read>
 8006c50:	0003      	movs	r3, r0
 8006c52:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8006c54:	226f      	movs	r2, #111	; 0x6f
 8006c56:	4013      	ands	r3, r2
 8006c58:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006c5a:	232c      	movs	r3, #44	; 0x2c
 8006c5c:	2108      	movs	r1, #8
 8006c5e:	468c      	mov	ip, r1
 8006c60:	44bc      	add	ip, r7
 8006c62:	4463      	add	r3, ip
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <SX1276SetRxConfig+0x1fa>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	e001      	b.n	8006c72 <SX1276SetRxConfig+0x1fe>
 8006c6e:	2380      	movs	r3, #128	; 0x80
 8006c70:	425b      	negs	r3, r3
 8006c72:	4313      	orrs	r3, r2
 8006c74:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8006c76:	2334      	movs	r3, #52	; 0x34
 8006c78:	2108      	movs	r1, #8
 8006c7a:	468c      	mov	ip, r1
 8006c7c:	44bc      	add	ip, r7
 8006c7e:	4463      	add	r3, ip
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006c84:	b25b      	sxtb	r3, r3
 8006c86:	4313      	orrs	r3, r2
 8006c88:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	0019      	movs	r1, r3
 8006c8e:	2030      	movs	r0, #48	; 0x30
 8006c90:	f001 f9e6 	bl	8008060 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8006c94:	2031      	movs	r0, #49	; 0x31
 8006c96:	f001 f9f7 	bl	8008088 <SX1276Read>
 8006c9a:	0003      	movs	r3, r0
 8006c9c:	001a      	movs	r2, r3
 8006c9e:	2340      	movs	r3, #64	; 0x40
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	0019      	movs	r1, r3
 8006ca6:	2031      	movs	r0, #49	; 0x31
 8006ca8:	f001 f9da 	bl	8008060 <SX1276Write>
        break;
 8006cac:	e174      	b.n	8006f98 <SX1276SetRxConfig+0x524>
            if( bandwidth > 2 )
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d900      	bls.n	8006cb6 <SX1276SetRxConfig+0x242>
                while( 1 );
 8006cb4:	e7fe      	b.n	8006cb4 <SX1276SetRxConfig+0x240>
            bandwidth += 7;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	3307      	adds	r3, #7
 8006cba:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8006cbc:	4b3c      	ldr	r3, [pc, #240]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8006cc2:	4b3b      	ldr	r3, [pc, #236]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8006cc8:	4b39      	ldr	r3, [pc, #228]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006cca:	220e      	movs	r2, #14
 8006ccc:	18ba      	adds	r2, r7, r2
 8006cce:	214d      	movs	r1, #77	; 0x4d
 8006cd0:	7812      	ldrb	r2, [r2, #0]
 8006cd2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8006cd4:	4b36      	ldr	r3, [pc, #216]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006cd6:	2224      	movs	r2, #36	; 0x24
 8006cd8:	2108      	movs	r1, #8
 8006cda:	468c      	mov	ip, r1
 8006cdc:	44bc      	add	ip, r7
 8006cde:	4462      	add	r2, ip
 8006ce0:	214e      	movs	r1, #78	; 0x4e
 8006ce2:	8812      	ldrh	r2, [r2, #0]
 8006ce4:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8006ce6:	4b32      	ldr	r3, [pc, #200]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006ce8:	222c      	movs	r2, #44	; 0x2c
 8006cea:	2108      	movs	r1, #8
 8006cec:	468c      	mov	ip, r1
 8006cee:	44bc      	add	ip, r7
 8006cf0:	4462      	add	r2, ip
 8006cf2:	2150      	movs	r1, #80	; 0x50
 8006cf4:	7812      	ldrb	r2, [r2, #0]
 8006cf6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8006cf8:	4b2d      	ldr	r3, [pc, #180]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006cfa:	2230      	movs	r2, #48	; 0x30
 8006cfc:	2108      	movs	r1, #8
 8006cfe:	468c      	mov	ip, r1
 8006d00:	44bc      	add	ip, r7
 8006d02:	4462      	add	r2, ip
 8006d04:	2151      	movs	r1, #81	; 0x51
 8006d06:	7812      	ldrb	r2, [r2, #0]
 8006d08:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8006d0a:	4b29      	ldr	r3, [pc, #164]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006d0c:	2234      	movs	r2, #52	; 0x34
 8006d0e:	2108      	movs	r1, #8
 8006d10:	468c      	mov	ip, r1
 8006d12:	44bc      	add	ip, r7
 8006d14:	4462      	add	r2, ip
 8006d16:	2152      	movs	r1, #82	; 0x52
 8006d18:	7812      	ldrb	r2, [r2, #0]
 8006d1a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8006d1c:	4b24      	ldr	r3, [pc, #144]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006d1e:	2238      	movs	r2, #56	; 0x38
 8006d20:	2108      	movs	r1, #8
 8006d22:	468c      	mov	ip, r1
 8006d24:	44bc      	add	ip, r7
 8006d26:	4462      	add	r2, ip
 8006d28:	2153      	movs	r1, #83	; 0x53
 8006d2a:	7812      	ldrb	r2, [r2, #0]
 8006d2c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8006d2e:	4b20      	ldr	r3, [pc, #128]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006d30:	223c      	movs	r2, #60	; 0x3c
 8006d32:	2108      	movs	r1, #8
 8006d34:	468c      	mov	ip, r1
 8006d36:	44bc      	add	ip, r7
 8006d38:	4462      	add	r2, ip
 8006d3a:	2154      	movs	r1, #84	; 0x54
 8006d3c:	7812      	ldrb	r2, [r2, #0]
 8006d3e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8006d40:	4b1b      	ldr	r3, [pc, #108]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006d42:	2220      	movs	r2, #32
 8006d44:	2120      	movs	r1, #32
 8006d46:	468c      	mov	ip, r1
 8006d48:	2108      	movs	r1, #8
 8006d4a:	4688      	mov	r8, r1
 8006d4c:	44b8      	add	r8, r7
 8006d4e:	44c4      	add	ip, r8
 8006d50:	4462      	add	r2, ip
 8006d52:	2155      	movs	r1, #85	; 0x55
 8006d54:	7812      	ldrb	r2, [r2, #0]
 8006d56:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8006d58:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006d5a:	2224      	movs	r2, #36	; 0x24
 8006d5c:	2120      	movs	r1, #32
 8006d5e:	468c      	mov	ip, r1
 8006d60:	2108      	movs	r1, #8
 8006d62:	4688      	mov	r8, r1
 8006d64:	44b8      	add	r8, r7
 8006d66:	44c4      	add	ip, r8
 8006d68:	4462      	add	r2, ip
 8006d6a:	2156      	movs	r1, #86	; 0x56
 8006d6c:	7812      	ldrb	r2, [r2, #0]
 8006d6e:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b0c      	cmp	r3, #12
 8006d74:	d902      	bls.n	8006d7c <SX1276SetRxConfig+0x308>
                datarate = 12;
 8006d76:	230c      	movs	r3, #12
 8006d78:	607b      	str	r3, [r7, #4]
 8006d7a:	e004      	b.n	8006d86 <SX1276SetRxConfig+0x312>
            else if( datarate < 6 )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b05      	cmp	r3, #5
 8006d80:	d801      	bhi.n	8006d86 <SX1276SetRxConfig+0x312>
                datarate = 6;
 8006d82:	2306      	movs	r3, #6
 8006d84:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b07      	cmp	r3, #7
 8006d8a:	d105      	bne.n	8006d98 <SX1276SetRxConfig+0x324>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b0b      	cmp	r3, #11
 8006d90:	d008      	beq.n	8006da4 <SX1276SetRxConfig+0x330>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b0c      	cmp	r3, #12
 8006d96:	d005      	beq.n	8006da4 <SX1276SetRxConfig+0x330>
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	d112      	bne.n	8006dc4 <SX1276SetRxConfig+0x350>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b0c      	cmp	r3, #12
 8006da2:	d10f      	bne.n	8006dc4 <SX1276SetRxConfig+0x350>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8006da4:	4b02      	ldr	r3, [pc, #8]	; (8006db0 <SX1276SetRxConfig+0x33c>)
 8006da6:	224c      	movs	r2, #76	; 0x4c
 8006da8:	2101      	movs	r1, #1
 8006daa:	5499      	strb	r1, [r3, r2]
 8006dac:	e00e      	b.n	8006dcc <SX1276SetRxConfig+0x358>
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	200015c8 	.word	0x200015c8
 8006db4:	3ff00000 	.word	0x3ff00000
 8006db8:	40200000 	.word	0x40200000
 8006dbc:	408f4000 	.word	0x408f4000
 8006dc0:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8006dc4:	4b77      	ldr	r3, [pc, #476]	; (8006fa4 <SX1276SetRxConfig+0x530>)
 8006dc6:	224c      	movs	r2, #76	; 0x4c
 8006dc8:	2100      	movs	r1, #0
 8006dca:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8006dcc:	201d      	movs	r0, #29
 8006dce:	f001 f95b 	bl	8008088 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	011b      	lsls	r3, r3, #4
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	230e      	movs	r3, #14
 8006ddc:	18fb      	adds	r3, r7, r3
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	18db      	adds	r3, r3, r3
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	4313      	orrs	r3, r2
 8006de6:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006de8:	242c      	movs	r4, #44	; 0x2c
 8006dea:	2608      	movs	r6, #8
 8006dec:	19bb      	adds	r3, r7, r6
 8006dee:	191b      	adds	r3, r3, r4
 8006df0:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006df2:	4313      	orrs	r3, r2
 8006df4:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006df6:	0019      	movs	r1, r3
 8006df8:	201d      	movs	r0, #29
 8006dfa:	f001 f931 	bl	8008060 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8006dfe:	201e      	movs	r0, #30
 8006e00:	f001 f942 	bl	8008088 <SX1276Read>
 8006e04:	0003      	movs	r3, r0
 8006e06:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8006e08:	2308      	movs	r3, #8
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	011b      	lsls	r3, r3, #4
 8006e14:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8006e16:	4313      	orrs	r3, r2
 8006e18:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8006e1a:	2334      	movs	r3, #52	; 0x34
 8006e1c:	2108      	movs	r1, #8
 8006e1e:	468c      	mov	ip, r1
 8006e20:	44bc      	add	ip, r7
 8006e22:	4463      	add	r3, ip
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8006e2e:	2528      	movs	r5, #40	; 0x28
 8006e30:	19bb      	adds	r3, r7, r6
 8006e32:	195b      	adds	r3, r3, r5
 8006e34:	881b      	ldrh	r3, [r3, #0]
 8006e36:	0a1b      	lsrs	r3, r3, #8
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2103      	movs	r1, #3
 8006e3e:	400b      	ands	r3, r1
 8006e40:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8006e42:	4313      	orrs	r3, r2
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	0019      	movs	r1, r3
 8006e48:	201e      	movs	r0, #30
 8006e4a:	f001 f909 	bl	8008060 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8006e4e:	2026      	movs	r0, #38	; 0x26
 8006e50:	f001 f91a 	bl	8008088 <SX1276Read>
 8006e54:	0003      	movs	r3, r0
 8006e56:	b25b      	sxtb	r3, r3
 8006e58:	2208      	movs	r2, #8
 8006e5a:	4393      	bics	r3, r2
 8006e5c:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006e5e:	4b51      	ldr	r3, [pc, #324]	; (8006fa4 <SX1276SetRxConfig+0x530>)
 8006e60:	214c      	movs	r1, #76	; 0x4c
 8006e62:	5c5b      	ldrb	r3, [r3, r1]
 8006e64:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8006e66:	b25b      	sxtb	r3, r3
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	0019      	movs	r1, r3
 8006e70:	2026      	movs	r0, #38	; 0x26
 8006e72:	f001 f8f5 	bl	8008060 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8006e76:	19bb      	adds	r3, r7, r6
 8006e78:	195b      	adds	r3, r3, r5
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	0019      	movs	r1, r3
 8006e80:	201f      	movs	r0, #31
 8006e82:	f001 f8ed 	bl	8008060 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8006e86:	2524      	movs	r5, #36	; 0x24
 8006e88:	19bb      	adds	r3, r7, r6
 8006e8a:	195b      	adds	r3, r3, r5
 8006e8c:	881b      	ldrh	r3, [r3, #0]
 8006e8e:	0a1b      	lsrs	r3, r3, #8
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	0019      	movs	r1, r3
 8006e96:	2020      	movs	r0, #32
 8006e98:	f001 f8e2 	bl	8008060 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8006e9c:	19bb      	adds	r3, r7, r6
 8006e9e:	195b      	adds	r3, r3, r5
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	0019      	movs	r1, r3
 8006ea6:	2021      	movs	r0, #33	; 0x21
 8006ea8:	f001 f8da 	bl	8008060 <SX1276Write>
            if( fixLen == 1 )
 8006eac:	19bb      	adds	r3, r7, r6
 8006eae:	191b      	adds	r3, r3, r4
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d009      	beq.n	8006eca <SX1276SetRxConfig+0x456>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8006eb6:	2330      	movs	r3, #48	; 0x30
 8006eb8:	2208      	movs	r2, #8
 8006eba:	4694      	mov	ip, r2
 8006ebc:	44bc      	add	ip, r7
 8006ebe:	4463      	add	r3, ip
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	0019      	movs	r1, r3
 8006ec4:	2022      	movs	r0, #34	; 0x22
 8006ec6:	f001 f8cb 	bl	8008060 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006eca:	4b36      	ldr	r3, [pc, #216]	; (8006fa4 <SX1276SetRxConfig+0x530>)
 8006ecc:	2253      	movs	r2, #83	; 0x53
 8006ece:	5c9b      	ldrb	r3, [r3, r2]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d013      	beq.n	8006efc <SX1276SetRxConfig+0x488>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8006ed4:	2044      	movs	r0, #68	; 0x44
 8006ed6:	f001 f8d7 	bl	8008088 <SX1276Read>
 8006eda:	0003      	movs	r3, r0
 8006edc:	001a      	movs	r2, r3
 8006ede:	2380      	movs	r3, #128	; 0x80
 8006ee0:	425b      	negs	r3, r3
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	0019      	movs	r1, r3
 8006ee8:	2044      	movs	r0, #68	; 0x44
 8006eea:	f001 f8b9 	bl	8008060 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8006eee:	4b2d      	ldr	r3, [pc, #180]	; (8006fa4 <SX1276SetRxConfig+0x530>)
 8006ef0:	2254      	movs	r2, #84	; 0x54
 8006ef2:	5c9b      	ldrb	r3, [r3, r2]
 8006ef4:	0019      	movs	r1, r3
 8006ef6:	2024      	movs	r0, #36	; 0x24
 8006ef8:	f001 f8b2 	bl	8008060 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	2b09      	cmp	r3, #9
 8006f00:	d10d      	bne.n	8006f1e <SX1276SetRxConfig+0x4aa>
 8006f02:	4b28      	ldr	r3, [pc, #160]	; (8006fa4 <SX1276SetRxConfig+0x530>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	4a28      	ldr	r2, [pc, #160]	; (8006fa8 <SX1276SetRxConfig+0x534>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d908      	bls.n	8006f1e <SX1276SetRxConfig+0x4aa>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8006f0c:	2102      	movs	r1, #2
 8006f0e:	2036      	movs	r0, #54	; 0x36
 8006f10:	f001 f8a6 	bl	8008060 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8006f14:	2164      	movs	r1, #100	; 0x64
 8006f16:	203a      	movs	r0, #58	; 0x3a
 8006f18:	f001 f8a2 	bl	8008060 <SX1276Write>
 8006f1c:	e00f      	b.n	8006f3e <SX1276SetRxConfig+0x4ca>
            else if( bandwidth == 9 )
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b09      	cmp	r3, #9
 8006f22:	d108      	bne.n	8006f36 <SX1276SetRxConfig+0x4c2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8006f24:	2102      	movs	r1, #2
 8006f26:	2036      	movs	r0, #54	; 0x36
 8006f28:	f001 f89a 	bl	8008060 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8006f2c:	217f      	movs	r1, #127	; 0x7f
 8006f2e:	203a      	movs	r0, #58	; 0x3a
 8006f30:	f001 f896 	bl	8008060 <SX1276Write>
 8006f34:	e003      	b.n	8006f3e <SX1276SetRxConfig+0x4ca>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8006f36:	2103      	movs	r1, #3
 8006f38:	2036      	movs	r0, #54	; 0x36
 8006f3a:	f001 f891 	bl	8008060 <SX1276Write>
            if( datarate == 6 )
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b06      	cmp	r3, #6
 8006f42:	d114      	bne.n	8006f6e <SX1276SetRxConfig+0x4fa>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006f44:	2031      	movs	r0, #49	; 0x31
 8006f46:	f001 f89f 	bl	8008088 <SX1276Read>
 8006f4a:	0003      	movs	r3, r0
 8006f4c:	b25b      	sxtb	r3, r3
 8006f4e:	2207      	movs	r2, #7
 8006f50:	4393      	bics	r3, r2
 8006f52:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006f54:	2205      	movs	r2, #5
 8006f56:	4313      	orrs	r3, r2
 8006f58:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	0019      	movs	r1, r3
 8006f5e:	2031      	movs	r0, #49	; 0x31
 8006f60:	f001 f87e 	bl	8008060 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006f64:	210c      	movs	r1, #12
 8006f66:	2037      	movs	r0, #55	; 0x37
 8006f68:	f001 f87a 	bl	8008060 <SX1276Write>
        break;
 8006f6c:	e013      	b.n	8006f96 <SX1276SetRxConfig+0x522>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006f6e:	2031      	movs	r0, #49	; 0x31
 8006f70:	f001 f88a 	bl	8008088 <SX1276Read>
 8006f74:	0003      	movs	r3, r0
 8006f76:	b25b      	sxtb	r3, r3
 8006f78:	2207      	movs	r2, #7
 8006f7a:	4393      	bics	r3, r2
 8006f7c:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006f7e:	2203      	movs	r2, #3
 8006f80:	4313      	orrs	r3, r2
 8006f82:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	0019      	movs	r1, r3
 8006f88:	2031      	movs	r0, #49	; 0x31
 8006f8a:	f001 f869 	bl	8008060 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006f8e:	210a      	movs	r1, #10
 8006f90:	2037      	movs	r0, #55	; 0x37
 8006f92:	f001 f865 	bl	8008060 <SX1276Write>
        break;
 8006f96:	46c0      	nop			; (mov r8, r8)
}
 8006f98:	46c0      	nop			; (mov r8, r8)
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	b004      	add	sp, #16
 8006f9e:	bc04      	pop	{r2}
 8006fa0:	4690      	mov	r8, r2
 8006fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa4:	200015c8 	.word	0x200015c8
 8006fa8:	1f4add40 	.word	0x1f4add40

08006fac <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8006fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60ba      	str	r2, [r7, #8]
 8006fb4:	607b      	str	r3, [r7, #4]
 8006fb6:	240f      	movs	r4, #15
 8006fb8:	193b      	adds	r3, r7, r4
 8006fba:	1c02      	adds	r2, r0, #0
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	250e      	movs	r5, #14
 8006fc0:	197b      	adds	r3, r7, r5
 8006fc2:	1c0a      	adds	r2, r1, #0
 8006fc4:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8006fc6:	193b      	adds	r3, r7, r4
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	0018      	movs	r0, r3
 8006fcc:	f000 ffee 	bl	8007fac <SX1276SetModem>

    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8006fd0:	4be5      	ldr	r3, [pc, #916]	; (8007368 <SX1276SetTxConfig+0x3bc>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	197a      	adds	r2, r7, r5
 8006fd8:	7812      	ldrb	r2, [r2, #0]
 8006fda:	b252      	sxtb	r2, r2
 8006fdc:	0010      	movs	r0, r2
 8006fde:	4798      	blx	r3

    switch( modem )
 8006fe0:	193b      	adds	r3, r7, r4
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <SX1276SetTxConfig+0x44>
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d100      	bne.n	8006fee <SX1276SetTxConfig+0x42>
 8006fec:	e0b1      	b.n	8007152 <SX1276SetTxConfig+0x1a6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8006fee:	e1d8      	b.n	80073a2 <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.Fsk.Power = power;
 8006ff0:	4bde      	ldr	r3, [pc, #888]	; (800736c <SX1276SetTxConfig+0x3c0>)
 8006ff2:	220e      	movs	r2, #14
 8006ff4:	18ba      	adds	r2, r7, r2
 8006ff6:	7812      	ldrb	r2, [r2, #0]
 8006ff8:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8006ffa:	4bdc      	ldr	r3, [pc, #880]	; (800736c <SX1276SetTxConfig+0x3c0>)
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8007000:	4bda      	ldr	r3, [pc, #872]	; (800736c <SX1276SetTxConfig+0x3c0>)
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8007006:	4bd9      	ldr	r3, [pc, #868]	; (800736c <SX1276SetTxConfig+0x3c0>)
 8007008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800700a:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800700c:	4bd7      	ldr	r3, [pc, #860]	; (800736c <SX1276SetTxConfig+0x3c0>)
 800700e:	2528      	movs	r5, #40	; 0x28
 8007010:	2408      	movs	r4, #8
 8007012:	193a      	adds	r2, r7, r4
 8007014:	1952      	adds	r2, r2, r5
 8007016:	8812      	ldrh	r2, [r2, #0]
 8007018:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800701a:	4bd4      	ldr	r3, [pc, #848]	; (800736c <SX1276SetTxConfig+0x3c0>)
 800701c:	262c      	movs	r6, #44	; 0x2c
 800701e:	193a      	adds	r2, r7, r4
 8007020:	1992      	adds	r2, r2, r6
 8007022:	2122      	movs	r1, #34	; 0x22
 8007024:	7812      	ldrb	r2, [r2, #0]
 8007026:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8007028:	4bd0      	ldr	r3, [pc, #832]	; (800736c <SX1276SetTxConfig+0x3c0>)
 800702a:	2230      	movs	r2, #48	; 0x30
 800702c:	2108      	movs	r1, #8
 800702e:	468c      	mov	ip, r1
 8007030:	44bc      	add	ip, r7
 8007032:	4462      	add	r2, ip
 8007034:	2124      	movs	r1, #36	; 0x24
 8007036:	7812      	ldrb	r2, [r2, #0]
 8007038:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800703a:	4bcc      	ldr	r3, [pc, #816]	; (800736c <SX1276SetTxConfig+0x3c0>)
 800703c:	223c      	movs	r2, #60	; 0x3c
 800703e:	2108      	movs	r1, #8
 8007040:	468c      	mov	ip, r1
 8007042:	44bc      	add	ip, r7
 8007044:	4462      	add	r2, ip
 8007046:	2125      	movs	r1, #37	; 0x25
 8007048:	7812      	ldrb	r2, [r2, #0]
 800704a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800704c:	4bc7      	ldr	r3, [pc, #796]	; (800736c <SX1276SetTxConfig+0x3c0>)
 800704e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007050:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8007052:	68b8      	ldr	r0, [r7, #8]
 8007054:	f7fb fe90 	bl	8002d78 <__aeabi_ui2d>
 8007058:	2200      	movs	r2, #0
 800705a:	4bc5      	ldr	r3, [pc, #788]	; (8007370 <SX1276SetTxConfig+0x3c4>)
 800705c:	f7fa fc58 	bl	8001910 <__aeabi_ddiv>
 8007060:	0003      	movs	r3, r0
 8007062:	000c      	movs	r4, r1
 8007064:	0018      	movs	r0, r3
 8007066:	0021      	movs	r1, r4
 8007068:	f7f9 fac2 	bl	80005f0 <__aeabi_d2uiz>
 800706c:	0003      	movs	r3, r0
 800706e:	b29b      	uxth	r3, r3
 8007070:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	0a1b      	lsrs	r3, r3, #8
 8007076:	b2db      	uxtb	r3, r3
 8007078:	0019      	movs	r1, r3
 800707a:	2004      	movs	r0, #4
 800707c:	f000 fff0 	bl	8008060 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	0019      	movs	r1, r3
 8007086:	2005      	movs	r0, #5
 8007088:	f000 ffea 	bl	8008060 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 800708c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800708e:	f7fb fe73 	bl	8002d78 <__aeabi_ui2d>
 8007092:	0003      	movs	r3, r0
 8007094:	000c      	movs	r4, r1
 8007096:	001a      	movs	r2, r3
 8007098:	0023      	movs	r3, r4
 800709a:	2000      	movs	r0, #0
 800709c:	49b5      	ldr	r1, [pc, #724]	; (8007374 <SX1276SetTxConfig+0x3c8>)
 800709e:	f7fa fc37 	bl	8001910 <__aeabi_ddiv>
 80070a2:	0003      	movs	r3, r0
 80070a4:	000c      	movs	r4, r1
 80070a6:	0018      	movs	r0, r3
 80070a8:	0021      	movs	r1, r4
 80070aa:	f7f9 faa1 	bl	80005f0 <__aeabi_d2uiz>
 80070ae:	0003      	movs	r3, r0
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	0a1b      	lsrs	r3, r3, #8
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	0019      	movs	r1, r3
 80070bc:	2002      	movs	r0, #2
 80070be:	f000 ffcf 	bl	8008060 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80070c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	0019      	movs	r1, r3
 80070c8:	2003      	movs	r0, #3
 80070ca:	f000 ffc9 	bl	8008060 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80070ce:	2408      	movs	r4, #8
 80070d0:	193b      	adds	r3, r7, r4
 80070d2:	195b      	adds	r3, r3, r5
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	0a1b      	lsrs	r3, r3, #8
 80070d8:	b29b      	uxth	r3, r3
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	0019      	movs	r1, r3
 80070de:	2025      	movs	r0, #37	; 0x25
 80070e0:	f000 ffbe 	bl	8008060 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 80070e4:	193b      	adds	r3, r7, r4
 80070e6:	195b      	adds	r3, r3, r5
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	0019      	movs	r1, r3
 80070ee:	2026      	movs	r0, #38	; 0x26
 80070f0:	f000 ffb6 	bl	8008060 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 80070f4:	2030      	movs	r0, #48	; 0x30
 80070f6:	f000 ffc7 	bl	8008088 <SX1276Read>
 80070fa:	0003      	movs	r3, r0
 80070fc:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 80070fe:	226f      	movs	r2, #111	; 0x6f
 8007100:	4013      	ands	r3, r2
 8007102:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8007104:	193b      	adds	r3, r7, r4
 8007106:	199b      	adds	r3, r3, r6
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <SX1276SetTxConfig+0x166>
 800710e:	2300      	movs	r3, #0
 8007110:	e001      	b.n	8007116 <SX1276SetTxConfig+0x16a>
 8007112:	2380      	movs	r3, #128	; 0x80
 8007114:	425b      	negs	r3, r3
 8007116:	4313      	orrs	r3, r2
 8007118:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 800711a:	2330      	movs	r3, #48	; 0x30
 800711c:	2108      	movs	r1, #8
 800711e:	468c      	mov	ip, r1
 8007120:	44bc      	add	ip, r7
 8007122:	4463      	add	r3, ip
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8007128:	b25b      	sxtb	r3, r3
 800712a:	4313      	orrs	r3, r2
 800712c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800712e:	b2db      	uxtb	r3, r3
 8007130:	0019      	movs	r1, r3
 8007132:	2030      	movs	r0, #48	; 0x30
 8007134:	f000 ff94 	bl	8008060 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8007138:	2031      	movs	r0, #49	; 0x31
 800713a:	f000 ffa5 	bl	8008088 <SX1276Read>
 800713e:	0003      	movs	r3, r0
 8007140:	001a      	movs	r2, r3
 8007142:	2340      	movs	r3, #64	; 0x40
 8007144:	4313      	orrs	r3, r2
 8007146:	b2db      	uxtb	r3, r3
 8007148:	0019      	movs	r1, r3
 800714a:	2031      	movs	r0, #49	; 0x31
 800714c:	f000 ff88 	bl	8008060 <SX1276Write>
        break;
 8007150:	e127      	b.n	80073a2 <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.LoRa.Power = power;
 8007152:	4b86      	ldr	r3, [pc, #536]	; (800736c <SX1276SetTxConfig+0x3c0>)
 8007154:	220e      	movs	r2, #14
 8007156:	18ba      	adds	r2, r7, r2
 8007158:	2140      	movs	r1, #64	; 0x40
 800715a:	7812      	ldrb	r2, [r2, #0]
 800715c:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b02      	cmp	r3, #2
 8007162:	d900      	bls.n	8007166 <SX1276SetTxConfig+0x1ba>
                while( 1 );
 8007164:	e7fe      	b.n	8007164 <SX1276SetTxConfig+0x1b8>
            bandwidth += 7;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3307      	adds	r3, #7
 800716a:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800716c:	4b7f      	ldr	r3, [pc, #508]	; (800736c <SX1276SetTxConfig+0x3c0>)
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8007172:	4b7e      	ldr	r3, [pc, #504]	; (800736c <SX1276SetTxConfig+0x3c0>)
 8007174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007176:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8007178:	4b7c      	ldr	r3, [pc, #496]	; (800736c <SX1276SetTxConfig+0x3c0>)
 800717a:	2224      	movs	r2, #36	; 0x24
 800717c:	2108      	movs	r1, #8
 800717e:	468c      	mov	ip, r1
 8007180:	44bc      	add	ip, r7
 8007182:	4462      	add	r2, ip
 8007184:	214d      	movs	r1, #77	; 0x4d
 8007186:	7812      	ldrb	r2, [r2, #0]
 8007188:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800718a:	4b78      	ldr	r3, [pc, #480]	; (800736c <SX1276SetTxConfig+0x3c0>)
 800718c:	2228      	movs	r2, #40	; 0x28
 800718e:	2108      	movs	r1, #8
 8007190:	468c      	mov	ip, r1
 8007192:	44bc      	add	ip, r7
 8007194:	4462      	add	r2, ip
 8007196:	214e      	movs	r1, #78	; 0x4e
 8007198:	8812      	ldrh	r2, [r2, #0]
 800719a:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800719c:	4b73      	ldr	r3, [pc, #460]	; (800736c <SX1276SetTxConfig+0x3c0>)
 800719e:	222c      	movs	r2, #44	; 0x2c
 80071a0:	2108      	movs	r1, #8
 80071a2:	468c      	mov	ip, r1
 80071a4:	44bc      	add	ip, r7
 80071a6:	4462      	add	r2, ip
 80071a8:	2150      	movs	r1, #80	; 0x50
 80071aa:	7812      	ldrb	r2, [r2, #0]
 80071ac:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80071ae:	4b6f      	ldr	r3, [pc, #444]	; (800736c <SX1276SetTxConfig+0x3c0>)
 80071b0:	2234      	movs	r2, #52	; 0x34
 80071b2:	2108      	movs	r1, #8
 80071b4:	468c      	mov	ip, r1
 80071b6:	44bc      	add	ip, r7
 80071b8:	4462      	add	r2, ip
 80071ba:	2153      	movs	r1, #83	; 0x53
 80071bc:	7812      	ldrb	r2, [r2, #0]
 80071be:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80071c0:	4b6a      	ldr	r3, [pc, #424]	; (800736c <SX1276SetTxConfig+0x3c0>)
 80071c2:	2238      	movs	r2, #56	; 0x38
 80071c4:	2108      	movs	r1, #8
 80071c6:	468c      	mov	ip, r1
 80071c8:	44bc      	add	ip, r7
 80071ca:	4462      	add	r2, ip
 80071cc:	2154      	movs	r1, #84	; 0x54
 80071ce:	7812      	ldrb	r2, [r2, #0]
 80071d0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80071d2:	4b66      	ldr	r3, [pc, #408]	; (800736c <SX1276SetTxConfig+0x3c0>)
 80071d4:	2230      	movs	r2, #48	; 0x30
 80071d6:	2108      	movs	r1, #8
 80071d8:	468c      	mov	ip, r1
 80071da:	44bc      	add	ip, r7
 80071dc:	4462      	add	r2, ip
 80071de:	2152      	movs	r1, #82	; 0x52
 80071e0:	7812      	ldrb	r2, [r2, #0]
 80071e2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80071e4:	4b61      	ldr	r3, [pc, #388]	; (800736c <SX1276SetTxConfig+0x3c0>)
 80071e6:	223c      	movs	r2, #60	; 0x3c
 80071e8:	2108      	movs	r1, #8
 80071ea:	468c      	mov	ip, r1
 80071ec:	44bc      	add	ip, r7
 80071ee:	4462      	add	r2, ip
 80071f0:	2155      	movs	r1, #85	; 0x55
 80071f2:	7812      	ldrb	r2, [r2, #0]
 80071f4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80071f6:	4b5d      	ldr	r3, [pc, #372]	; (800736c <SX1276SetTxConfig+0x3c0>)
 80071f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071fa:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 80071fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fe:	2b0c      	cmp	r3, #12
 8007200:	d902      	bls.n	8007208 <SX1276SetTxConfig+0x25c>
                datarate = 12;
 8007202:	230c      	movs	r3, #12
 8007204:	62bb      	str	r3, [r7, #40]	; 0x28
 8007206:	e004      	b.n	8007212 <SX1276SetTxConfig+0x266>
            else if( datarate < 6 )
 8007208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720a:	2b05      	cmp	r3, #5
 800720c:	d801      	bhi.n	8007212 <SX1276SetTxConfig+0x266>
                datarate = 6;
 800720e:	2306      	movs	r3, #6
 8007210:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b07      	cmp	r3, #7
 8007216:	d105      	bne.n	8007224 <SX1276SetTxConfig+0x278>
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	2b0b      	cmp	r3, #11
 800721c:	d008      	beq.n	8007230 <SX1276SetTxConfig+0x284>
 800721e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007220:	2b0c      	cmp	r3, #12
 8007222:	d005      	beq.n	8007230 <SX1276SetTxConfig+0x284>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2b08      	cmp	r3, #8
 8007228:	d107      	bne.n	800723a <SX1276SetTxConfig+0x28e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800722a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722c:	2b0c      	cmp	r3, #12
 800722e:	d104      	bne.n	800723a <SX1276SetTxConfig+0x28e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8007230:	4b4e      	ldr	r3, [pc, #312]	; (800736c <SX1276SetTxConfig+0x3c0>)
 8007232:	224c      	movs	r2, #76	; 0x4c
 8007234:	2101      	movs	r1, #1
 8007236:	5499      	strb	r1, [r3, r2]
 8007238:	e003      	b.n	8007242 <SX1276SetTxConfig+0x296>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800723a:	4b4c      	ldr	r3, [pc, #304]	; (800736c <SX1276SetTxConfig+0x3c0>)
 800723c:	224c      	movs	r2, #76	; 0x4c
 800723e:	2100      	movs	r1, #0
 8007240:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007242:	4b4a      	ldr	r3, [pc, #296]	; (800736c <SX1276SetTxConfig+0x3c0>)
 8007244:	2253      	movs	r2, #83	; 0x53
 8007246:	5c9b      	ldrb	r3, [r3, r2]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d013      	beq.n	8007274 <SX1276SetTxConfig+0x2c8>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800724c:	2044      	movs	r0, #68	; 0x44
 800724e:	f000 ff1b 	bl	8008088 <SX1276Read>
 8007252:	0003      	movs	r3, r0
 8007254:	001a      	movs	r2, r3
 8007256:	2380      	movs	r3, #128	; 0x80
 8007258:	425b      	negs	r3, r3
 800725a:	4313      	orrs	r3, r2
 800725c:	b2db      	uxtb	r3, r3
 800725e:	0019      	movs	r1, r3
 8007260:	2044      	movs	r0, #68	; 0x44
 8007262:	f000 fefd 	bl	8008060 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8007266:	4b41      	ldr	r3, [pc, #260]	; (800736c <SX1276SetTxConfig+0x3c0>)
 8007268:	2254      	movs	r2, #84	; 0x54
 800726a:	5c9b      	ldrb	r3, [r3, r2]
 800726c:	0019      	movs	r1, r3
 800726e:	2024      	movs	r0, #36	; 0x24
 8007270:	f000 fef6 	bl	8008060 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8007274:	201d      	movs	r0, #29
 8007276:	f000 ff07 	bl	8008088 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	011b      	lsls	r3, r3, #4
 8007280:	b2da      	uxtb	r2, r3
 8007282:	2324      	movs	r3, #36	; 0x24
 8007284:	2108      	movs	r1, #8
 8007286:	468c      	mov	ip, r1
 8007288:	44bc      	add	ip, r7
 800728a:	4463      	add	r3, ip
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	18db      	adds	r3, r3, r3
 8007290:	b2db      	uxtb	r3, r3
 8007292:	4313      	orrs	r3, r2
 8007294:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8007296:	232c      	movs	r3, #44	; 0x2c
 8007298:	2108      	movs	r1, #8
 800729a:	468c      	mov	ip, r1
 800729c:	44bc      	add	ip, r7
 800729e:	4463      	add	r3, ip
 80072a0:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80072a2:	4313      	orrs	r3, r2
 80072a4:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80072a6:	0019      	movs	r1, r3
 80072a8:	201d      	movs	r0, #29
 80072aa:	f000 fed9 	bl	8008060 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80072ae:	201e      	movs	r0, #30
 80072b0:	f000 feea 	bl	8008088 <SX1276Read>
 80072b4:	0003      	movs	r3, r0
 80072b6:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 80072b8:	230b      	movs	r3, #11
 80072ba:	4013      	ands	r3, r2
 80072bc:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80072be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	011b      	lsls	r3, r3, #4
 80072c4:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 80072c6:	4313      	orrs	r3, r2
 80072c8:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80072ca:	2330      	movs	r3, #48	; 0x30
 80072cc:	2108      	movs	r1, #8
 80072ce:	468c      	mov	ip, r1
 80072d0:	44bc      	add	ip, r7
 80072d2:	4463      	add	r3, ip
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 80072da:	4313      	orrs	r3, r2
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	0019      	movs	r1, r3
 80072e0:	201e      	movs	r0, #30
 80072e2:	f000 febd 	bl	8008060 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80072e6:	2026      	movs	r0, #38	; 0x26
 80072e8:	f000 fece 	bl	8008088 <SX1276Read>
 80072ec:	0003      	movs	r3, r0
 80072ee:	b25b      	sxtb	r3, r3
 80072f0:	2208      	movs	r2, #8
 80072f2:	4393      	bics	r3, r2
 80072f4:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80072f6:	4b1d      	ldr	r3, [pc, #116]	; (800736c <SX1276SetTxConfig+0x3c0>)
 80072f8:	214c      	movs	r1, #76	; 0x4c
 80072fa:	5c5b      	ldrb	r3, [r3, r1]
 80072fc:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80072fe:	b25b      	sxtb	r3, r3
 8007300:	4313      	orrs	r3, r2
 8007302:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8007304:	b2db      	uxtb	r3, r3
 8007306:	0019      	movs	r1, r3
 8007308:	2026      	movs	r0, #38	; 0x26
 800730a:	f000 fea9 	bl	8008060 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800730e:	2428      	movs	r4, #40	; 0x28
 8007310:	2508      	movs	r5, #8
 8007312:	197b      	adds	r3, r7, r5
 8007314:	191b      	adds	r3, r3, r4
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	0a1b      	lsrs	r3, r3, #8
 800731a:	b29b      	uxth	r3, r3
 800731c:	b2db      	uxtb	r3, r3
 800731e:	0019      	movs	r1, r3
 8007320:	2020      	movs	r0, #32
 8007322:	f000 fe9d 	bl	8008060 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8007326:	197b      	adds	r3, r7, r5
 8007328:	191b      	adds	r3, r3, r4
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	0019      	movs	r1, r3
 8007330:	2021      	movs	r0, #33	; 0x21
 8007332:	f000 fe95 	bl	8008060 <SX1276Write>
            if( datarate == 6 )
 8007336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007338:	2b06      	cmp	r3, #6
 800733a:	d11d      	bne.n	8007378 <SX1276SetTxConfig+0x3cc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800733c:	2031      	movs	r0, #49	; 0x31
 800733e:	f000 fea3 	bl	8008088 <SX1276Read>
 8007342:	0003      	movs	r3, r0
 8007344:	b25b      	sxtb	r3, r3
 8007346:	2207      	movs	r2, #7
 8007348:	4393      	bics	r3, r2
 800734a:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800734c:	2205      	movs	r2, #5
 800734e:	4313      	orrs	r3, r2
 8007350:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8007352:	b2db      	uxtb	r3, r3
 8007354:	0019      	movs	r1, r3
 8007356:	2031      	movs	r0, #49	; 0x31
 8007358:	f000 fe82 	bl	8008060 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800735c:	210c      	movs	r1, #12
 800735e:	2037      	movs	r0, #55	; 0x37
 8007360:	f000 fe7e 	bl	8008060 <SX1276Write>
        break;
 8007364:	e01c      	b.n	80073a0 <SX1276SetTxConfig+0x3f4>
 8007366:	46c0      	nop			; (mov r8, r8)
 8007368:	20000524 	.word	0x20000524
 800736c:	200015c8 	.word	0x200015c8
 8007370:	404e8480 	.word	0x404e8480
 8007374:	417e8480 	.word	0x417e8480
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007378:	2031      	movs	r0, #49	; 0x31
 800737a:	f000 fe85 	bl	8008088 <SX1276Read>
 800737e:	0003      	movs	r3, r0
 8007380:	b25b      	sxtb	r3, r3
 8007382:	2207      	movs	r2, #7
 8007384:	4393      	bics	r3, r2
 8007386:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8007388:	2203      	movs	r2, #3
 800738a:	4313      	orrs	r3, r2
 800738c:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800738e:	b2db      	uxtb	r3, r3
 8007390:	0019      	movs	r1, r3
 8007392:	2031      	movs	r0, #49	; 0x31
 8007394:	f000 fe64 	bl	8008060 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8007398:	210a      	movs	r1, #10
 800739a:	2037      	movs	r0, #55	; 0x37
 800739c:	f000 fe60 	bl	8008060 <SX1276Write>
        break;
 80073a0:	46c0      	nop			; (mov r8, r8)
}
 80073a2:	46c0      	nop			; (mov r8, r8)
 80073a4:	46bd      	mov	sp, r7
 80073a6:	b005      	add	sp, #20
 80073a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073aa:	46c0      	nop			; (mov r8, r8)

080073ac <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 80073ac:	b5b0      	push	{r4, r5, r7, lr}
 80073ae:	b094      	sub	sp, #80	; 0x50
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	0002      	movs	r2, r0
 80073b4:	1dfb      	adds	r3, r7, #7
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	1dbb      	adds	r3, r7, #6
 80073ba:	1c0a      	adds	r2, r1, #0
 80073bc:	701a      	strb	r2, [r3, #0]
    uint32_t airTime = 0;
 80073be:	2300      	movs	r3, #0
 80073c0:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 80073c2:	1dfb      	adds	r3, r7, #7
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <SX1276GetTimeOnAir+0x26>
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d100      	bne.n	80073d0 <SX1276GetTimeOnAir+0x24>
 80073ce:	e086      	b.n	80074de <SX1276GetTimeOnAir+0x132>
 80073d0:	e164      	b.n	800769c <SX1276GetTimeOnAir+0x2f0>
    {
    case MODEM_FSK:
        {
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80073d2:	4bb5      	ldr	r3, [pc, #724]	; (80076a8 <SX1276GetTimeOnAir+0x2fc>)
 80073d4:	8c1b      	ldrh	r3, [r3, #32]
 80073d6:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80073d8:	2027      	movs	r0, #39	; 0x27
 80073da:	f000 fe55 	bl	8008088 <SX1276Read>
 80073de:	0003      	movs	r3, r0
 80073e0:	001a      	movs	r2, r3
 80073e2:	23f8      	movs	r3, #248	; 0xf8
 80073e4:	439a      	bics	r2, r3
 80073e6:	0013      	movs	r3, r2
 80073e8:	3301      	adds	r3, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80073ea:	18e3      	adds	r3, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80073ec:	0018      	movs	r0, r3
 80073ee:	f7fb fc89 	bl	8002d04 <__aeabi_i2d>
 80073f2:	0004      	movs	r4, r0
 80073f4:	000d      	movs	r5, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 80073f6:	4bac      	ldr	r3, [pc, #688]	; (80076a8 <SX1276GetTimeOnAir+0x2fc>)
 80073f8:	2222      	movs	r2, #34	; 0x22
 80073fa:	5c9b      	ldrb	r3, [r3, r2]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <SX1276GetTimeOnAir+0x5a>
 8007400:	2000      	movs	r0, #0
 8007402:	2100      	movs	r1, #0
 8007404:	e001      	b.n	800740a <SX1276GetTimeOnAir+0x5e>
 8007406:	2000      	movs	r0, #0
 8007408:	49a8      	ldr	r1, [pc, #672]	; (80076ac <SX1276GetTimeOnAir+0x300>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 800740a:	0022      	movs	r2, r4
 800740c:	002b      	movs	r3, r5
 800740e:	f7f9 ff63 	bl	80012d8 <__aeabi_dadd>
 8007412:	0003      	movs	r3, r0
 8007414:	000c      	movs	r4, r1
 8007416:	0025      	movs	r5, r4
 8007418:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800741a:	2030      	movs	r0, #48	; 0x30
 800741c:	f000 fe34 	bl	8008088 <SX1276Read>
 8007420:	0003      	movs	r3, r0
 8007422:	001a      	movs	r2, r3
 8007424:	23f9      	movs	r3, #249	; 0xf9
 8007426:	439a      	bics	r2, r3
 8007428:	1e13      	subs	r3, r2, #0
 800742a:	d002      	beq.n	8007432 <SX1276GetTimeOnAir+0x86>
 800742c:	2000      	movs	r0, #0
 800742e:	499f      	ldr	r1, [pc, #636]	; (80076ac <SX1276GetTimeOnAir+0x300>)
 8007430:	e001      	b.n	8007436 <SX1276GetTimeOnAir+0x8a>
 8007432:	2000      	movs	r0, #0
 8007434:	2100      	movs	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8007436:	0022      	movs	r2, r4
 8007438:	002b      	movs	r3, r5
 800743a:	f7f9 ff4d 	bl	80012d8 <__aeabi_dadd>
 800743e:	0003      	movs	r3, r0
 8007440:	000c      	movs	r4, r1
 8007442:	0025      	movs	r5, r4
 8007444:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8007446:	1dbb      	adds	r3, r7, #6
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	0018      	movs	r0, r3
 800744c:	f7fb fc5a 	bl	8002d04 <__aeabi_i2d>
 8007450:	0002      	movs	r2, r0
 8007452:	000b      	movs	r3, r1
 8007454:	0020      	movs	r0, r4
 8007456:	0029      	movs	r1, r5
 8007458:	f7f9 ff3e 	bl	80012d8 <__aeabi_dadd>
 800745c:	0003      	movs	r3, r0
 800745e:	000c      	movs	r4, r1
 8007460:	0025      	movs	r5, r4
 8007462:	001c      	movs	r4, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8007464:	4b90      	ldr	r3, [pc, #576]	; (80076a8 <SX1276GetTimeOnAir+0x2fc>)
 8007466:	2224      	movs	r2, #36	; 0x24
 8007468:	5c9b      	ldrb	r3, [r3, r2]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <SX1276GetTimeOnAir+0xca>
 800746e:	2000      	movs	r0, #0
 8007470:	2180      	movs	r1, #128	; 0x80
 8007472:	05c9      	lsls	r1, r1, #23
 8007474:	e001      	b.n	800747a <SX1276GetTimeOnAir+0xce>
 8007476:	2000      	movs	r0, #0
 8007478:	2100      	movs	r1, #0
                                     pktLen +
 800747a:	0022      	movs	r2, r4
 800747c:	002b      	movs	r3, r5
 800747e:	f7f9 ff2b 	bl	80012d8 <__aeabi_dadd>
 8007482:	0003      	movs	r3, r0
 8007484:	000c      	movs	r4, r1
 8007486:	0018      	movs	r0, r3
 8007488:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800748a:	2200      	movs	r2, #0
 800748c:	4b88      	ldr	r3, [pc, #544]	; (80076b0 <SX1276GetTimeOnAir+0x304>)
 800748e:	f7fa fe49 	bl	8002124 <__aeabi_dmul>
 8007492:	0003      	movs	r3, r0
 8007494:	000c      	movs	r4, r1
 8007496:	0025      	movs	r5, r4
 8007498:	001c      	movs	r4, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
 800749a:	4b83      	ldr	r3, [pc, #524]	; (80076a8 <SX1276GetTimeOnAir+0x2fc>)
 800749c:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800749e:	0018      	movs	r0, r3
 80074a0:	f7fb fc6a 	bl	8002d78 <__aeabi_ui2d>
 80074a4:	0002      	movs	r2, r0
 80074a6:	000b      	movs	r3, r1
 80074a8:	0020      	movs	r0, r4
 80074aa:	0029      	movs	r1, r5
 80074ac:	f7fa fa30 	bl	8001910 <__aeabi_ddiv>
 80074b0:	0003      	movs	r3, r0
 80074b2:	000c      	movs	r4, r1
 80074b4:	0018      	movs	r0, r3
 80074b6:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80074b8:	2200      	movs	r2, #0
 80074ba:	4b7e      	ldr	r3, [pc, #504]	; (80076b4 <SX1276GetTimeOnAir+0x308>)
 80074bc:	f7fa fe32 	bl	8002124 <__aeabi_dmul>
 80074c0:	0003      	movs	r3, r0
 80074c2:	000c      	movs	r4, r1
 80074c4:	0018      	movs	r0, r3
 80074c6:	0021      	movs	r1, r4
 80074c8:	f014 fe82 	bl	801c1d0 <round>
 80074cc:	0003      	movs	r3, r0
 80074ce:	000c      	movs	r4, r1
 80074d0:	0018      	movs	r0, r3
 80074d2:	0021      	movs	r1, r4
 80074d4:	f7f9 f88c 	bl	80005f0 <__aeabi_d2uiz>
 80074d8:	0003      	movs	r3, r0
 80074da:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 80074dc:	e0de      	b.n	800769c <SX1276GetTimeOnAir+0x2f0>
    case MODEM_LORA:
        {
            double bw = 0.0;
 80074de:	2300      	movs	r3, #0
 80074e0:	2400      	movs	r4, #0
 80074e2:	643b      	str	r3, [r7, #64]	; 0x40
 80074e4:	647c      	str	r4, [r7, #68]	; 0x44
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 80074e6:	4b70      	ldr	r3, [pc, #448]	; (80076a8 <SX1276GetTimeOnAir+0x2fc>)
 80074e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ea:	2b08      	cmp	r3, #8
 80074ec:	d008      	beq.n	8007500 <SX1276GetTimeOnAir+0x154>
 80074ee:	2b09      	cmp	r3, #9
 80074f0:	d00b      	beq.n	800750a <SX1276GetTimeOnAir+0x15e>
 80074f2:	2b07      	cmp	r3, #7
 80074f4:	d10e      	bne.n	8007514 <SX1276GetTimeOnAir+0x168>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 62500;
            //    break;
            case 7: // 125 kHz
                bw = 125000;
 80074f6:	2300      	movs	r3, #0
 80074f8:	4c6f      	ldr	r4, [pc, #444]	; (80076b8 <SX1276GetTimeOnAir+0x30c>)
 80074fa:	643b      	str	r3, [r7, #64]	; 0x40
 80074fc:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 80074fe:	e009      	b.n	8007514 <SX1276GetTimeOnAir+0x168>
            case 8: // 250 kHz
                bw = 250000;
 8007500:	2300      	movs	r3, #0
 8007502:	4c6e      	ldr	r4, [pc, #440]	; (80076bc <SX1276GetTimeOnAir+0x310>)
 8007504:	643b      	str	r3, [r7, #64]	; 0x40
 8007506:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8007508:	e004      	b.n	8007514 <SX1276GetTimeOnAir+0x168>
            case 9: // 500 kHz
                bw = 500000;
 800750a:	2300      	movs	r3, #0
 800750c:	4c6c      	ldr	r4, [pc, #432]	; (80076c0 <SX1276GetTimeOnAir+0x314>)
 800750e:	643b      	str	r3, [r7, #64]	; 0x40
 8007510:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8007512:	46c0      	nop			; (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8007514:	4b64      	ldr	r3, [pc, #400]	; (80076a8 <SX1276GetTimeOnAir+0x2fc>)
 8007516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007518:	2201      	movs	r2, #1
 800751a:	409a      	lsls	r2, r3
 800751c:	0013      	movs	r3, r2
 800751e:	0018      	movs	r0, r3
 8007520:	f7fb fbf0 	bl	8002d04 <__aeabi_i2d>
 8007524:	0003      	movs	r3, r0
 8007526:	000c      	movs	r4, r1
 8007528:	001a      	movs	r2, r3
 800752a:	0023      	movs	r3, r4
 800752c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800752e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007530:	f7fa f9ee 	bl	8001910 <__aeabi_ddiv>
 8007534:	0003      	movs	r3, r0
 8007536:	000c      	movs	r4, r1
 8007538:	63bb      	str	r3, [r7, #56]	; 0x38
 800753a:	63fc      	str	r4, [r7, #60]	; 0x3c
            double ts = 1 / rs;
 800753c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800753e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007540:	2000      	movs	r0, #0
 8007542:	495a      	ldr	r1, [pc, #360]	; (80076ac <SX1276GetTimeOnAir+0x300>)
 8007544:	f7fa f9e4 	bl	8001910 <__aeabi_ddiv>
 8007548:	0003      	movs	r3, r0
 800754a:	000c      	movs	r4, r1
 800754c:	633b      	str	r3, [r7, #48]	; 0x30
 800754e:	637c      	str	r4, [r7, #52]	; 0x34
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8007550:	4b55      	ldr	r3, [pc, #340]	; (80076a8 <SX1276GetTimeOnAir+0x2fc>)
 8007552:	224e      	movs	r2, #78	; 0x4e
 8007554:	5a9b      	ldrh	r3, [r3, r2]
 8007556:	0018      	movs	r0, r3
 8007558:	f7fb fbd4 	bl	8002d04 <__aeabi_i2d>
 800755c:	2200      	movs	r2, #0
 800755e:	4b59      	ldr	r3, [pc, #356]	; (80076c4 <SX1276GetTimeOnAir+0x318>)
 8007560:	f7f9 feba 	bl	80012d8 <__aeabi_dadd>
 8007564:	0003      	movs	r3, r0
 8007566:	000c      	movs	r4, r1
 8007568:	001a      	movs	r2, r3
 800756a:	0023      	movs	r3, r4
 800756c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800756e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007570:	f7fa fdd8 	bl	8002124 <__aeabi_dmul>
 8007574:	0003      	movs	r3, r0
 8007576:	000c      	movs	r4, r1
 8007578:	62bb      	str	r3, [r7, #40]	; 0x28
 800757a:	62fc      	str	r4, [r7, #44]	; 0x2c
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800757c:	1dbb      	adds	r3, r7, #6
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	001a      	movs	r2, r3
 8007584:	4b48      	ldr	r3, [pc, #288]	; (80076a8 <SX1276GetTimeOnAir+0x2fc>)
 8007586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 800758c:	4a46      	ldr	r2, [pc, #280]	; (80076a8 <SX1276GetTimeOnAir+0x2fc>)
 800758e:	2152      	movs	r1, #82	; 0x52
 8007590:	5c52      	ldrb	r2, [r2, r1]
 8007592:	0112      	lsls	r2, r2, #4
 8007594:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8007596:	4b44      	ldr	r3, [pc, #272]	; (80076a8 <SX1276GetTimeOnAir+0x2fc>)
 8007598:	2150      	movs	r1, #80	; 0x50
 800759a:	5c5b      	ldrb	r3, [r3, r1]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d001      	beq.n	80075a4 <SX1276GetTimeOnAir+0x1f8>
 80075a0:	2314      	movs	r3, #20
 80075a2:	e000      	b.n	80075a6 <SX1276GetTimeOnAir+0x1fa>
 80075a4:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80075aa:	0018      	movs	r0, r3
 80075ac:	f7fb fbe4 	bl	8002d78 <__aeabi_ui2d>
 80075b0:	0004      	movs	r4, r0
 80075b2:	000d      	movs	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 80075b4:	4b3c      	ldr	r3, [pc, #240]	; (80076a8 <SX1276GetTimeOnAir+0x2fc>)
 80075b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80075b8:	4b3b      	ldr	r3, [pc, #236]	; (80076a8 <SX1276GetTimeOnAir+0x2fc>)
 80075ba:	214c      	movs	r1, #76	; 0x4c
 80075bc:	5c5b      	ldrb	r3, [r3, r1]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <SX1276GetTimeOnAir+0x21a>
 80075c2:	2302      	movs	r3, #2
 80075c4:	e000      	b.n	80075c8 <SX1276GetTimeOnAir+0x21c>
 80075c6:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	0018      	movs	r0, r3
 80075ce:	f7fb fbd3 	bl	8002d78 <__aeabi_ui2d>
 80075d2:	0002      	movs	r2, r0
 80075d4:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80075d6:	0020      	movs	r0, r4
 80075d8:	0029      	movs	r1, r5
 80075da:	f7fa f999 	bl	8001910 <__aeabi_ddiv>
 80075de:	0003      	movs	r3, r0
 80075e0:	000c      	movs	r4, r1
 80075e2:	0018      	movs	r0, r3
 80075e4:	0021      	movs	r1, r4
 80075e6:	f014 fcef 	bl	801bfc8 <ceil>
 80075ea:	0004      	movs	r4, r0
 80075ec:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 80075ee:	4b2e      	ldr	r3, [pc, #184]	; (80076a8 <SX1276GetTimeOnAir+0x2fc>)
 80075f0:	224d      	movs	r2, #77	; 0x4d
 80075f2:	5c9b      	ldrb	r3, [r3, r2]
 80075f4:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80075f6:	0018      	movs	r0, r3
 80075f8:	f7fb fb84 	bl	8002d04 <__aeabi_i2d>
 80075fc:	0002      	movs	r2, r0
 80075fe:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8007600:	0020      	movs	r0, r4
 8007602:	0029      	movs	r1, r5
 8007604:	f7fa fd8e 	bl	8002124 <__aeabi_dmul>
 8007608:	0003      	movs	r3, r0
 800760a:	000c      	movs	r4, r1
 800760c:	623b      	str	r3, [r7, #32]
 800760e:	627c      	str	r4, [r7, #36]	; 0x24
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8007610:	2200      	movs	r2, #0
 8007612:	2300      	movs	r3, #0
 8007614:	6a38      	ldr	r0, [r7, #32]
 8007616:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007618:	f7f8 ff16 	bl	8000448 <__aeabi_dcmpgt>
 800761c:	1e03      	subs	r3, r0, #0
 800761e:	d008      	beq.n	8007632 <SX1276GetTimeOnAir+0x286>
 8007620:	2200      	movs	r2, #0
 8007622:	4b23      	ldr	r3, [pc, #140]	; (80076b0 <SX1276GetTimeOnAir+0x304>)
 8007624:	6a38      	ldr	r0, [r7, #32]
 8007626:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007628:	f7f9 fe56 	bl	80012d8 <__aeabi_dadd>
 800762c:	0003      	movs	r3, r0
 800762e:	000c      	movs	r4, r1
 8007630:	e001      	b.n	8007636 <SX1276GetTimeOnAir+0x28a>
 8007632:	2300      	movs	r3, #0
 8007634:	4c1e      	ldr	r4, [pc, #120]	; (80076b0 <SX1276GetTimeOnAir+0x304>)
 8007636:	61bb      	str	r3, [r7, #24]
 8007638:	61fc      	str	r4, [r7, #28]
            double tPayload = nPayload * ts;
 800763a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800763c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800763e:	69b8      	ldr	r0, [r7, #24]
 8007640:	69f9      	ldr	r1, [r7, #28]
 8007642:	f7fa fd6f 	bl	8002124 <__aeabi_dmul>
 8007646:	0003      	movs	r3, r0
 8007648:	000c      	movs	r4, r1
 800764a:	613b      	str	r3, [r7, #16]
 800764c:	617c      	str	r4, [r7, #20]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007654:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007656:	f7f9 fe3f 	bl	80012d8 <__aeabi_dadd>
 800765a:	0003      	movs	r3, r0
 800765c:	000c      	movs	r4, r1
 800765e:	60bb      	str	r3, [r7, #8]
 8007660:	60fc      	str	r4, [r7, #12]
            // return ms secs
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 8007662:	2200      	movs	r2, #0
 8007664:	4b13      	ldr	r3, [pc, #76]	; (80076b4 <SX1276GetTimeOnAir+0x308>)
 8007666:	68b8      	ldr	r0, [r7, #8]
 8007668:	68f9      	ldr	r1, [r7, #12]
 800766a:	f7fa fd5b 	bl	8002124 <__aeabi_dmul>
 800766e:	0003      	movs	r3, r0
 8007670:	000c      	movs	r4, r1
 8007672:	0018      	movs	r0, r3
 8007674:	0021      	movs	r1, r4
 8007676:	4a14      	ldr	r2, [pc, #80]	; (80076c8 <SX1276GetTimeOnAir+0x31c>)
 8007678:	4b14      	ldr	r3, [pc, #80]	; (80076cc <SX1276GetTimeOnAir+0x320>)
 800767a:	f7f9 fe2d 	bl	80012d8 <__aeabi_dadd>
 800767e:	0003      	movs	r3, r0
 8007680:	000c      	movs	r4, r1
 8007682:	0018      	movs	r0, r3
 8007684:	0021      	movs	r1, r4
 8007686:	f014 fd21 	bl	801c0cc <floor>
 800768a:	0003      	movs	r3, r0
 800768c:	000c      	movs	r4, r1
 800768e:	0018      	movs	r0, r3
 8007690:	0021      	movs	r1, r4
 8007692:	f7f8 ffad 	bl	80005f0 <__aeabi_d2uiz>
 8007696:	0003      	movs	r3, r0
 8007698:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 800769a:	46c0      	nop			; (mov r8, r8)
    }
    return airTime;
 800769c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800769e:	0018      	movs	r0, r3
 80076a0:	46bd      	mov	sp, r7
 80076a2:	b014      	add	sp, #80	; 0x50
 80076a4:	bdb0      	pop	{r4, r5, r7, pc}
 80076a6:	46c0      	nop			; (mov r8, r8)
 80076a8:	200015c8 	.word	0x200015c8
 80076ac:	3ff00000 	.word	0x3ff00000
 80076b0:	40200000 	.word	0x40200000
 80076b4:	408f4000 	.word	0x408f4000
 80076b8:	40fe8480 	.word	0x40fe8480
 80076bc:	410e8480 	.word	0x410e8480
 80076c0:	411e8480 	.word	0x411e8480
 80076c4:	40110000 	.word	0x40110000
 80076c8:	d916872b 	.word	0xd916872b
 80076cc:	3feff7ce 	.word	0x3feff7ce

080076d0 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	000a      	movs	r2, r1
 80076da:	1cfb      	adds	r3, r7, #3
 80076dc:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 80076e2:	4b59      	ldr	r3, [pc, #356]	; (8007848 <SX1276Send+0x178>)
 80076e4:	795b      	ldrb	r3, [r3, #5]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <SX1276Send+0x20>
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d04c      	beq.n	8007788 <SX1276Send+0xb8>
 80076ee:	e0a2      	b.n	8007836 <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80076f0:	4b55      	ldr	r3, [pc, #340]	; (8007848 <SX1276Send+0x178>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 80076f6:	1cfb      	adds	r3, r7, #3
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	4b52      	ldr	r3, [pc, #328]	; (8007848 <SX1276Send+0x178>)
 80076fe:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 8007700:	4b51      	ldr	r3, [pc, #324]	; (8007848 <SX1276Send+0x178>)
 8007702:	2222      	movs	r2, #34	; 0x22
 8007704:	5c9b      	ldrb	r3, [r3, r2]
 8007706:	2201      	movs	r2, #1
 8007708:	4053      	eors	r3, r2
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8007710:	1cfb      	adds	r3, r7, #3
 8007712:	2101      	movs	r1, #1
 8007714:	0018      	movs	r0, r3
 8007716:	f000 fd51 	bl	80081bc <SX1276WriteFifo>
 800771a:	e005      	b.n	8007728 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 800771c:	1cfb      	adds	r3, r7, #3
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	0019      	movs	r1, r3
 8007722:	2032      	movs	r0, #50	; 0x32
 8007724:	f000 fc9c 	bl	8008060 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8007728:	1cfb      	adds	r3, r7, #3
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d009      	beq.n	8007744 <SX1276Send+0x74>
 8007730:	1cfb      	adds	r3, r7, #3
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b40      	cmp	r3, #64	; 0x40
 8007736:	d805      	bhi.n	8007744 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8007738:	1cfb      	adds	r3, r7, #3
 800773a:	7819      	ldrb	r1, [r3, #0]
 800773c:	4b42      	ldr	r3, [pc, #264]	; (8007848 <SX1276Send+0x178>)
 800773e:	223f      	movs	r2, #63	; 0x3f
 8007740:	5499      	strb	r1, [r3, r2]
 8007742:	e00b      	b.n	800775c <SX1276Send+0x8c>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 8007744:	1cfb      	adds	r3, r7, #3
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	b29a      	uxth	r2, r3
 800774a:	6879      	ldr	r1, [r7, #4]
 800774c:	4b3f      	ldr	r3, [pc, #252]	; (800784c <SX1276Send+0x17c>)
 800774e:	0018      	movs	r0, r3
 8007750:	f013 ff6e 	bl	801b630 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8007754:	4b3c      	ldr	r3, [pc, #240]	; (8007848 <SX1276Send+0x178>)
 8007756:	223f      	movs	r2, #63	; 0x3f
 8007758:	2120      	movs	r1, #32
 800775a:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800775c:	4b3a      	ldr	r3, [pc, #232]	; (8007848 <SX1276Send+0x178>)
 800775e:	223f      	movs	r2, #63	; 0x3f
 8007760:	5c9a      	ldrb	r2, [r3, r2]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	0011      	movs	r1, r2
 8007766:	0018      	movs	r0, r3
 8007768:	f000 fd28 	bl	80081bc <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800776c:	4b36      	ldr	r3, [pc, #216]	; (8007848 <SX1276Send+0x178>)
 800776e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8007770:	4b35      	ldr	r3, [pc, #212]	; (8007848 <SX1276Send+0x178>)
 8007772:	213f      	movs	r1, #63	; 0x3f
 8007774:	5c5b      	ldrb	r3, [r3, r1]
 8007776:	b29b      	uxth	r3, r3
 8007778:	18d3      	adds	r3, r2, r3
 800777a:	b29a      	uxth	r2, r3
 800777c:	4b32      	ldr	r3, [pc, #200]	; (8007848 <SX1276Send+0x178>)
 800777e:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8007780:	4b31      	ldr	r3, [pc, #196]	; (8007848 <SX1276Send+0x178>)
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007784:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007786:	e056      	b.n	8007836 <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8007788:	4b2f      	ldr	r3, [pc, #188]	; (8007848 <SX1276Send+0x178>)
 800778a:	2255      	movs	r2, #85	; 0x55
 800778c:	5c9b      	ldrb	r3, [r3, r2]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d011      	beq.n	80077b6 <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8007792:	2033      	movs	r0, #51	; 0x33
 8007794:	f000 fc78 	bl	8008088 <SX1276Read>
 8007798:	0003      	movs	r3, r0
 800779a:	001a      	movs	r2, r3
 800779c:	2341      	movs	r3, #65	; 0x41
 800779e:	439a      	bics	r2, r3
 80077a0:	0013      	movs	r3, r2
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	0019      	movs	r1, r3
 80077a6:	2033      	movs	r0, #51	; 0x33
 80077a8:	f000 fc5a 	bl	8008060 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80077ac:	2119      	movs	r1, #25
 80077ae:	203b      	movs	r0, #59	; 0x3b
 80077b0:	f000 fc56 	bl	8008060 <SX1276Write>
 80077b4:	e013      	b.n	80077de <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80077b6:	2033      	movs	r0, #51	; 0x33
 80077b8:	f000 fc66 	bl	8008088 <SX1276Read>
 80077bc:	0003      	movs	r3, r0
 80077be:	b25b      	sxtb	r3, r3
 80077c0:	2241      	movs	r2, #65	; 0x41
 80077c2:	4393      	bics	r3, r2
 80077c4:	b25b      	sxtb	r3, r3
 80077c6:	2201      	movs	r2, #1
 80077c8:	4313      	orrs	r3, r2
 80077ca:	b25b      	sxtb	r3, r3
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	0019      	movs	r1, r3
 80077d0:	2033      	movs	r0, #51	; 0x33
 80077d2:	f000 fc45 	bl	8008060 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80077d6:	211d      	movs	r1, #29
 80077d8:	203b      	movs	r0, #59	; 0x3b
 80077da:	f000 fc41 	bl	8008060 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 80077de:	1cfb      	adds	r3, r7, #3
 80077e0:	7819      	ldrb	r1, [r3, #0]
 80077e2:	4b19      	ldr	r3, [pc, #100]	; (8007848 <SX1276Send+0x178>)
 80077e4:	2264      	movs	r2, #100	; 0x64
 80077e6:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 80077e8:	1cfb      	adds	r3, r7, #3
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	0019      	movs	r1, r3
 80077ee:	2022      	movs	r0, #34	; 0x22
 80077f0:	f000 fc36 	bl	8008060 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 80077f4:	2100      	movs	r1, #0
 80077f6:	200e      	movs	r0, #14
 80077f8:	f000 fc32 	bl	8008060 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80077fc:	2100      	movs	r1, #0
 80077fe:	200d      	movs	r0, #13
 8007800:	f000 fc2e 	bl	8008060 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8007804:	2001      	movs	r0, #1
 8007806:	f000 fc3f 	bl	8008088 <SX1276Read>
 800780a:	0003      	movs	r3, r0
 800780c:	001a      	movs	r2, r3
 800780e:	23f8      	movs	r3, #248	; 0xf8
 8007810:	439a      	bics	r2, r3
 8007812:	1e13      	subs	r3, r2, #0
 8007814:	d104      	bne.n	8007820 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 8007816:	f000 f841 	bl	800789c <SX1276SetStby>
                DelayMs( 1 );
 800781a:	2001      	movs	r0, #1
 800781c:	f7fd fc70 	bl	8005100 <HAL_Delay>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8007820:	1cfb      	adds	r3, r7, #3
 8007822:	781a      	ldrb	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	0011      	movs	r1, r2
 8007828:	0018      	movs	r0, r3
 800782a:	f000 fcc7 	bl	80081bc <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800782e:	4b06      	ldr	r3, [pc, #24]	; (8007848 <SX1276Send+0x178>)
 8007830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007832:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007834:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	0018      	movs	r0, r3
 800783a:	f000 f9dd 	bl	8007bf8 <SX1276SetTx>
}
 800783e:	46c0      	nop			; (mov r8, r8)
 8007840:	46bd      	mov	sp, r7
 8007842:	b004      	add	sp, #16
 8007844:	bd80      	pop	{r7, pc}
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	200015c8 	.word	0x200015c8
 800784c:	20000424 	.word	0x20000424

08007850 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8007854:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <SX1276SetSleep+0x38>)
 8007856:	0018      	movs	r0, r3
 8007858:	f013 fc72 	bl	801b140 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800785c:	4b0b      	ldr	r3, [pc, #44]	; (800788c <SX1276SetSleep+0x3c>)
 800785e:	0018      	movs	r0, r3
 8007860:	f013 fc6e 	bl	801b140 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8007864:	4b0a      	ldr	r3, [pc, #40]	; (8007890 <SX1276SetSleep+0x40>)
 8007866:	0018      	movs	r0, r3
 8007868:	f013 fc6a 	bl	801b140 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800786c:	2000      	movs	r0, #0
 800786e:	f000 fb4d 	bl	8007f0c <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    LoRaBoardCallbacks->SX1276BoardSetXO( RESET );
 8007872:	4b08      	ldr	r3, [pc, #32]	; (8007894 <SX1276SetSleep+0x44>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2000      	movs	r0, #0
 800787a:	4798      	blx	r3

    SX1276.Settings.State = RF_IDLE;
 800787c:	4b06      	ldr	r3, [pc, #24]	; (8007898 <SX1276SetSleep+0x48>)
 800787e:	2200      	movs	r2, #0
 8007880:	711a      	strb	r2, [r3, #4]
}
 8007882:	46c0      	nop			; (mov r8, r8)
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20001630 	.word	0x20001630
 800788c:	20001598 	.word	0x20001598
 8007890:	200015b0 	.word	0x200015b0
 8007894:	20000524 	.word	0x20000524
 8007898:	200015c8 	.word	0x200015c8

0800789c <SX1276SetStby>:

void SX1276SetStby( void )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80078a0:	4b0a      	ldr	r3, [pc, #40]	; (80078cc <SX1276SetStby+0x30>)
 80078a2:	0018      	movs	r0, r3
 80078a4:	f013 fc4c 	bl	801b140 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80078a8:	4b09      	ldr	r3, [pc, #36]	; (80078d0 <SX1276SetStby+0x34>)
 80078aa:	0018      	movs	r0, r3
 80078ac:	f013 fc48 	bl	801b140 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80078b0:	4b08      	ldr	r3, [pc, #32]	; (80078d4 <SX1276SetStby+0x38>)
 80078b2:	0018      	movs	r0, r3
 80078b4:	f013 fc44 	bl	801b140 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80078b8:	2001      	movs	r0, #1
 80078ba:	f000 fb27 	bl	8007f0c <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80078be:	4b06      	ldr	r3, [pc, #24]	; (80078d8 <SX1276SetStby+0x3c>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	711a      	strb	r2, [r3, #4]
}
 80078c4:	46c0      	nop			; (mov r8, r8)
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	46c0      	nop			; (mov r8, r8)
 80078cc:	20001630 	.word	0x20001630
 80078d0:	20001598 	.word	0x20001598
 80078d4:	200015b0 	.word	0x200015b0
 80078d8:	200015c8 	.word	0x200015c8

080078dc <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 80078e4:	230f      	movs	r3, #15
 80078e6:	18fb      	adds	r3, r7, r3
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]
    TimerStop( &TxTimeoutTimer );
 80078ec:	4bb6      	ldr	r3, [pc, #728]	; (8007bc8 <SX1276SetRx+0x2ec>)
 80078ee:	0018      	movs	r0, r3
 80078f0:	f013 fc26 	bl	801b140 <TimerStop>

    switch( SX1276.Settings.Modem )
 80078f4:	4bb5      	ldr	r3, [pc, #724]	; (8007bcc <SX1276SetRx+0x2f0>)
 80078f6:	795b      	ldrb	r3, [r3, #5]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <SX1276SetRx+0x26>
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d041      	beq.n	8007984 <SX1276SetRx+0xa8>
 8007900:	e128      	b.n	8007b54 <SX1276SetRx+0x278>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8007902:	230f      	movs	r3, #15
 8007904:	18fb      	adds	r3, r7, r3
 8007906:	4ab1      	ldr	r2, [pc, #708]	; (8007bcc <SX1276SetRx+0x2f0>)
 8007908:	2126      	movs	r1, #38	; 0x26
 800790a:	5c52      	ldrb	r2, [r2, r1]
 800790c:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800790e:	2040      	movs	r0, #64	; 0x40
 8007910:	f000 fbba 	bl	8008088 <SX1276Read>
 8007914:	0003      	movs	r3, r0
 8007916:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8007918:	2203      	movs	r2, #3
 800791a:	4013      	ands	r3, r2
 800791c:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 800791e:	220c      	movs	r2, #12
 8007920:	4313      	orrs	r3, r2
 8007922:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8007924:	b2db      	uxtb	r3, r3
 8007926:	0019      	movs	r1, r3
 8007928:	2040      	movs	r0, #64	; 0x40
 800792a:	f000 fb99 	bl	8008060 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800792e:	2041      	movs	r0, #65	; 0x41
 8007930:	f000 fbaa 	bl	8008088 <SX1276Read>
 8007934:	0003      	movs	r3, r0
 8007936:	001a      	movs	r2, r3
 8007938:	233f      	movs	r3, #63	; 0x3f
 800793a:	425b      	negs	r3, r3
 800793c:	4313      	orrs	r3, r2
 800793e:	b2db      	uxtb	r3, r3
 8007940:	0019      	movs	r1, r3
 8007942:	2041      	movs	r0, #65	; 0x41
 8007944:	f000 fb8c 	bl	8008060 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8007948:	2035      	movs	r0, #53	; 0x35
 800794a:	f000 fb9d 	bl	8008088 <SX1276Read>
 800794e:	0003      	movs	r3, r0
 8007950:	001a      	movs	r2, r3
 8007952:	233f      	movs	r3, #63	; 0x3f
 8007954:	4013      	ands	r3, r2
 8007956:	b2d9      	uxtb	r1, r3
 8007958:	4b9c      	ldr	r3, [pc, #624]	; (8007bcc <SX1276SetRx+0x2f0>)
 800795a:	223e      	movs	r2, #62	; 0x3e
 800795c:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800795e:	211e      	movs	r1, #30
 8007960:	200d      	movs	r0, #13
 8007962:	f000 fb7d 	bl	8008060 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8007966:	4b99      	ldr	r3, [pc, #612]	; (8007bcc <SX1276SetRx+0x2f0>)
 8007968:	2230      	movs	r2, #48	; 0x30
 800796a:	2100      	movs	r1, #0
 800796c:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800796e:	4b97      	ldr	r3, [pc, #604]	; (8007bcc <SX1276SetRx+0x2f0>)
 8007970:	2231      	movs	r2, #49	; 0x31
 8007972:	2100      	movs	r1, #0
 8007974:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8007976:	4b95      	ldr	r3, [pc, #596]	; (8007bcc <SX1276SetRx+0x2f0>)
 8007978:	2200      	movs	r2, #0
 800797a:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800797c:	4b93      	ldr	r3, [pc, #588]	; (8007bcc <SX1276SetRx+0x2f0>)
 800797e:	2200      	movs	r2, #0
 8007980:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 8007982:	e0e7      	b.n	8007b54 <SX1276SetRx+0x278>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8007984:	4b91      	ldr	r3, [pc, #580]	; (8007bcc <SX1276SetRx+0x2f0>)
 8007986:	2255      	movs	r2, #85	; 0x55
 8007988:	5c9b      	ldrb	r3, [r3, r2]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d010      	beq.n	80079b0 <SX1276SetRx+0xd4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800798e:	2033      	movs	r0, #51	; 0x33
 8007990:	f000 fb7a 	bl	8008088 <SX1276Read>
 8007994:	0003      	movs	r3, r0
 8007996:	001a      	movs	r2, r3
 8007998:	2341      	movs	r3, #65	; 0x41
 800799a:	4313      	orrs	r3, r2
 800799c:	b2db      	uxtb	r3, r3
 800799e:	0019      	movs	r1, r3
 80079a0:	2033      	movs	r0, #51	; 0x33
 80079a2:	f000 fb5d 	bl	8008060 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80079a6:	2119      	movs	r1, #25
 80079a8:	203b      	movs	r0, #59	; 0x3b
 80079aa:	f000 fb59 	bl	8008060 <SX1276Write>
 80079ae:	e013      	b.n	80079d8 <SX1276SetRx+0xfc>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80079b0:	2033      	movs	r0, #51	; 0x33
 80079b2:	f000 fb69 	bl	8008088 <SX1276Read>
 80079b6:	0003      	movs	r3, r0
 80079b8:	b25b      	sxtb	r3, r3
 80079ba:	2241      	movs	r2, #65	; 0x41
 80079bc:	4393      	bics	r3, r2
 80079be:	b25b      	sxtb	r3, r3
 80079c0:	2201      	movs	r2, #1
 80079c2:	4313      	orrs	r3, r2
 80079c4:	b25b      	sxtb	r3, r3
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	0019      	movs	r1, r3
 80079ca:	2033      	movs	r0, #51	; 0x33
 80079cc:	f000 fb48 	bl	8008060 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80079d0:	211d      	movs	r1, #29
 80079d2:	203b      	movs	r0, #59	; 0x3b
 80079d4:	f000 fb44 	bl	8008060 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80079d8:	4b7c      	ldr	r3, [pc, #496]	; (8007bcc <SX1276SetRx+0x2f0>)
 80079da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d900      	bls.n	80079e2 <SX1276SetRx+0x106>
 80079e0:	e076      	b.n	8007ad0 <SX1276SetRx+0x1f4>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80079e2:	2031      	movs	r0, #49	; 0x31
 80079e4:	f000 fb50 	bl	8008088 <SX1276Read>
 80079e8:	0003      	movs	r3, r0
 80079ea:	001a      	movs	r2, r3
 80079ec:	237f      	movs	r3, #127	; 0x7f
 80079ee:	4013      	ands	r3, r2
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	0019      	movs	r1, r3
 80079f4:	2031      	movs	r0, #49	; 0x31
 80079f6:	f000 fb33 	bl	8008060 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 80079fa:	2100      	movs	r1, #0
 80079fc:	2030      	movs	r0, #48	; 0x30
 80079fe:	f000 fb2f 	bl	8008060 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8007a02:	4b72      	ldr	r3, [pc, #456]	; (8007bcc <SX1276SetRx+0x2f0>)
 8007a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a06:	2b08      	cmp	r3, #8
 8007a08:	d86f      	bhi.n	8007aea <SX1276SetRx+0x20e>
 8007a0a:	009a      	lsls	r2, r3, #2
 8007a0c:	4b70      	ldr	r3, [pc, #448]	; (8007bd0 <SX1276SetRx+0x2f4>)
 8007a0e:	18d3      	adds	r3, r2, r3
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8007a14:	2148      	movs	r1, #72	; 0x48
 8007a16:	202f      	movs	r0, #47	; 0x2f
 8007a18:	f000 fb22 	bl	8008060 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8007a1c:	4b6b      	ldr	r3, [pc, #428]	; (8007bcc <SX1276SetRx+0x2f0>)
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	4a6c      	ldr	r2, [pc, #432]	; (8007bd4 <SX1276SetRx+0x2f8>)
 8007a22:	4694      	mov	ip, r2
 8007a24:	4463      	add	r3, ip
 8007a26:	0018      	movs	r0, r3
 8007a28:	f7fe fe9a 	bl	8006760 <SX1276SetChannel>
                    break;
 8007a2c:	e05d      	b.n	8007aea <SX1276SetRx+0x20e>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8007a2e:	2144      	movs	r1, #68	; 0x44
 8007a30:	202f      	movs	r0, #47	; 0x2f
 8007a32:	f000 fb15 	bl	8008060 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8007a36:	4b65      	ldr	r3, [pc, #404]	; (8007bcc <SX1276SetRx+0x2f0>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	4a67      	ldr	r2, [pc, #412]	; (8007bd8 <SX1276SetRx+0x2fc>)
 8007a3c:	4694      	mov	ip, r2
 8007a3e:	4463      	add	r3, ip
 8007a40:	0018      	movs	r0, r3
 8007a42:	f7fe fe8d 	bl	8006760 <SX1276SetChannel>
                    break;
 8007a46:	e050      	b.n	8007aea <SX1276SetRx+0x20e>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8007a48:	2144      	movs	r1, #68	; 0x44
 8007a4a:	202f      	movs	r0, #47	; 0x2f
 8007a4c:	f000 fb08 	bl	8008060 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8007a50:	4b5e      	ldr	r3, [pc, #376]	; (8007bcc <SX1276SetRx+0x2f0>)
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	4a61      	ldr	r2, [pc, #388]	; (8007bdc <SX1276SetRx+0x300>)
 8007a56:	4694      	mov	ip, r2
 8007a58:	4463      	add	r3, ip
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	f7fe fe80 	bl	8006760 <SX1276SetChannel>
                    break;
 8007a60:	e043      	b.n	8007aea <SX1276SetRx+0x20e>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8007a62:	2144      	movs	r1, #68	; 0x44
 8007a64:	202f      	movs	r0, #47	; 0x2f
 8007a66:	f000 fafb 	bl	8008060 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8007a6a:	4b58      	ldr	r3, [pc, #352]	; (8007bcc <SX1276SetRx+0x2f0>)
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	4a5c      	ldr	r2, [pc, #368]	; (8007be0 <SX1276SetRx+0x304>)
 8007a70:	4694      	mov	ip, r2
 8007a72:	4463      	add	r3, ip
 8007a74:	0018      	movs	r0, r3
 8007a76:	f7fe fe73 	bl	8006760 <SX1276SetChannel>
                    break;
 8007a7a:	e036      	b.n	8007aea <SX1276SetRx+0x20e>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8007a7c:	2144      	movs	r1, #68	; 0x44
 8007a7e:	202f      	movs	r0, #47	; 0x2f
 8007a80:	f000 faee 	bl	8008060 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8007a84:	4b51      	ldr	r3, [pc, #324]	; (8007bcc <SX1276SetRx+0x2f0>)
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	4a56      	ldr	r2, [pc, #344]	; (8007be4 <SX1276SetRx+0x308>)
 8007a8a:	4694      	mov	ip, r2
 8007a8c:	4463      	add	r3, ip
 8007a8e:	0018      	movs	r0, r3
 8007a90:	f7fe fe66 	bl	8006760 <SX1276SetChannel>
                    break;
 8007a94:	e029      	b.n	8007aea <SX1276SetRx+0x20e>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8007a96:	2144      	movs	r1, #68	; 0x44
 8007a98:	202f      	movs	r0, #47	; 0x2f
 8007a9a:	f000 fae1 	bl	8008060 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8007a9e:	4b4b      	ldr	r3, [pc, #300]	; (8007bcc <SX1276SetRx+0x2f0>)
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	4a51      	ldr	r2, [pc, #324]	; (8007be8 <SX1276SetRx+0x30c>)
 8007aa4:	4694      	mov	ip, r2
 8007aa6:	4463      	add	r3, ip
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	f7fe fe59 	bl	8006760 <SX1276SetChannel>
                    break;
 8007aae:	e01c      	b.n	8007aea <SX1276SetRx+0x20e>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8007ab0:	2140      	movs	r1, #64	; 0x40
 8007ab2:	202f      	movs	r0, #47	; 0x2f
 8007ab4:	f000 fad4 	bl	8008060 <SX1276Write>
                    break;
 8007ab8:	e017      	b.n	8007aea <SX1276SetRx+0x20e>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8007aba:	2140      	movs	r1, #64	; 0x40
 8007abc:	202f      	movs	r0, #47	; 0x2f
 8007abe:	f000 facf 	bl	8008060 <SX1276Write>
                    break;
 8007ac2:	e012      	b.n	8007aea <SX1276SetRx+0x20e>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8007ac4:	2140      	movs	r1, #64	; 0x40
 8007ac6:	202f      	movs	r0, #47	; 0x2f
 8007ac8:	f000 faca 	bl	8008060 <SX1276Write>
                    break;
 8007acc:	46c0      	nop			; (mov r8, r8)
 8007ace:	e00c      	b.n	8007aea <SX1276SetRx+0x20e>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8007ad0:	2031      	movs	r0, #49	; 0x31
 8007ad2:	f000 fad9 	bl	8008088 <SX1276Read>
 8007ad6:	0003      	movs	r3, r0
 8007ad8:	001a      	movs	r2, r3
 8007ada:	2380      	movs	r3, #128	; 0x80
 8007adc:	425b      	negs	r3, r3
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	0019      	movs	r1, r3
 8007ae4:	2031      	movs	r0, #49	; 0x31
 8007ae6:	f000 fabb 	bl	8008060 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8007aea:	230f      	movs	r3, #15
 8007aec:	18fb      	adds	r3, r7, r3
 8007aee:	4a37      	ldr	r2, [pc, #220]	; (8007bcc <SX1276SetRx+0x2f0>)
 8007af0:	2156      	movs	r1, #86	; 0x56
 8007af2:	5c52      	ldrb	r2, [r2, r1]
 8007af4:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007af6:	4b35      	ldr	r3, [pc, #212]	; (8007bcc <SX1276SetRx+0x2f0>)
 8007af8:	2253      	movs	r2, #83	; 0x53
 8007afa:	5c9b      	ldrb	r3, [r3, r2]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d010      	beq.n	8007b22 <SX1276SetRx+0x246>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8007b00:	211d      	movs	r1, #29
 8007b02:	2011      	movs	r0, #17
 8007b04:	f000 faac 	bl	8008060 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8007b08:	2040      	movs	r0, #64	; 0x40
 8007b0a:	f000 fabd 	bl	8008088 <SX1276Read>
 8007b0e:	0003      	movs	r3, r0
 8007b10:	001a      	movs	r2, r3
 8007b12:	2333      	movs	r3, #51	; 0x33
 8007b14:	4013      	ands	r3, r2
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	0019      	movs	r1, r3
 8007b1a:	2040      	movs	r0, #64	; 0x40
 8007b1c:	f000 faa0 	bl	8008060 <SX1276Write>
 8007b20:	e00f      	b.n	8007b42 <SX1276SetRx+0x266>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8007b22:	211f      	movs	r1, #31
 8007b24:	2011      	movs	r0, #17
 8007b26:	f000 fa9b 	bl	8008060 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8007b2a:	2040      	movs	r0, #64	; 0x40
 8007b2c:	f000 faac 	bl	8008088 <SX1276Read>
 8007b30:	0003      	movs	r3, r0
 8007b32:	001a      	movs	r2, r3
 8007b34:	233f      	movs	r3, #63	; 0x3f
 8007b36:	4013      	ands	r3, r2
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	0019      	movs	r1, r3
 8007b3c:	2040      	movs	r0, #64	; 0x40
 8007b3e:	f000 fa8f 	bl	8008060 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8007b42:	2100      	movs	r1, #0
 8007b44:	200f      	movs	r0, #15
 8007b46:	f000 fa8b 	bl	8008060 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	200d      	movs	r0, #13
 8007b4e:	f000 fa87 	bl	8008060 <SX1276Write>
        }
        break;
 8007b52:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8007b54:	2380      	movs	r3, #128	; 0x80
 8007b56:	005a      	lsls	r2, r3, #1
 8007b58:	4b24      	ldr	r3, [pc, #144]	; (8007bec <SX1276SetRx+0x310>)
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	f013 fdeb 	bl	801b738 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 8007b62:	4b1a      	ldr	r3, [pc, #104]	; (8007bcc <SX1276SetRx+0x2f0>)
 8007b64:	2201      	movs	r2, #1
 8007b66:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d009      	beq.n	8007b82 <SX1276SetRx+0x2a6>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	4b1f      	ldr	r3, [pc, #124]	; (8007bf0 <SX1276SetRx+0x314>)
 8007b72:	0011      	movs	r1, r2
 8007b74:	0018      	movs	r0, r3
 8007b76:	f013 fb5d 	bl	801b234 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8007b7a:	4b1d      	ldr	r3, [pc, #116]	; (8007bf0 <SX1276SetRx+0x314>)
 8007b7c:	0018      	movs	r0, r3
 8007b7e:	f013 fa07 	bl	801af90 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8007b82:	4b12      	ldr	r3, [pc, #72]	; (8007bcc <SX1276SetRx+0x2f0>)
 8007b84:	795b      	ldrb	r3, [r3, #5]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10e      	bne.n	8007ba8 <SX1276SetRx+0x2cc>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8007b8a:	2005      	movs	r0, #5
 8007b8c:	f000 f9be 	bl	8007f0c <SX1276SetOpMode>

        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8007b90:	4b0e      	ldr	r3, [pc, #56]	; (8007bcc <SX1276SetRx+0x2f0>)
 8007b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b94:	4b17      	ldr	r3, [pc, #92]	; (8007bf4 <SX1276SetRx+0x318>)
 8007b96:	0011      	movs	r1, r2
 8007b98:	0018      	movs	r0, r3
 8007b9a:	f013 fb4b 	bl	801b234 <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 8007b9e:	4b15      	ldr	r3, [pc, #84]	; (8007bf4 <SX1276SetRx+0x318>)
 8007ba0:	0018      	movs	r0, r3
 8007ba2:	f013 f9f5 	bl	801af90 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8007ba6:	e00b      	b.n	8007bc0 <SX1276SetRx+0x2e4>
        if( rxContinuous == true )
 8007ba8:	230f      	movs	r3, #15
 8007baa:	18fb      	adds	r3, r7, r3
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <SX1276SetRx+0x2de>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8007bb2:	2005      	movs	r0, #5
 8007bb4:	f000 f9aa 	bl	8007f0c <SX1276SetOpMode>
}
 8007bb8:	e002      	b.n	8007bc0 <SX1276SetRx+0x2e4>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8007bba:	2006      	movs	r0, #6
 8007bbc:	f000 f9a6 	bl	8007f0c <SX1276SetOpMode>
}
 8007bc0:	46c0      	nop			; (mov r8, r8)
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	b004      	add	sp, #16
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	20001598 	.word	0x20001598
 8007bcc:	200015c8 	.word	0x200015c8
 8007bd0:	0801cc5c 	.word	0x0801cc5c
 8007bd4:	00001e82 	.word	0x00001e82
 8007bd8:	000028b4 	.word	0x000028b4
 8007bdc:	00003d04 	.word	0x00003d04
 8007be0:	0000515e 	.word	0x0000515e
 8007be4:	00007a12 	.word	0x00007a12
 8007be8:	0000a2c6 	.word	0x0000a2c6
 8007bec:	20000424 	.word	0x20000424
 8007bf0:	20001630 	.word	0x20001630
 8007bf4:	200015b0 	.word	0x200015b0

08007bf8 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 8007c00:	4b3a      	ldr	r3, [pc, #232]	; (8007cec <SX1276SetTx+0xf4>)
 8007c02:	0018      	movs	r0, r3
 8007c04:	f013 fa9c 	bl	801b140 <TimerStop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	4b39      	ldr	r3, [pc, #228]	; (8007cf0 <SX1276SetTx+0xf8>)
 8007c0c:	0011      	movs	r1, r2
 8007c0e:	0018      	movs	r0, r3
 8007c10:	f013 fb10 	bl	801b234 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 8007c14:	4b37      	ldr	r3, [pc, #220]	; (8007cf4 <SX1276SetTx+0xfc>)
 8007c16:	795b      	ldrb	r3, [r3, #5]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <SX1276SetTx+0x2a>
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d028      	beq.n	8007c72 <SX1276SetTx+0x7a>
 8007c20:	e056      	b.n	8007cd0 <SX1276SetTx+0xd8>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8007c22:	2040      	movs	r0, #64	; 0x40
 8007c24:	f000 fa30 	bl	8008088 <SX1276Read>
 8007c28:	0003      	movs	r3, r0
 8007c2a:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8007c2c:	2203      	movs	r2, #3
 8007c2e:	4013      	ands	r3, r2
 8007c30:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8007c32:	2210      	movs	r2, #16
 8007c34:	4313      	orrs	r3, r2
 8007c36:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	0019      	movs	r1, r3
 8007c3c:	2040      	movs	r0, #64	; 0x40
 8007c3e:	f000 fa0f 	bl	8008060 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8007c42:	2041      	movs	r0, #65	; 0x41
 8007c44:	f000 fa20 	bl	8008088 <SX1276Read>
 8007c48:	0003      	movs	r3, r0
 8007c4a:	001a      	movs	r2, r3
 8007c4c:	233e      	movs	r3, #62	; 0x3e
 8007c4e:	4013      	ands	r3, r2
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	0019      	movs	r1, r3
 8007c54:	2041      	movs	r0, #65	; 0x41
 8007c56:	f000 fa03 	bl	8008060 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8007c5a:	2035      	movs	r0, #53	; 0x35
 8007c5c:	f000 fa14 	bl	8008088 <SX1276Read>
 8007c60:	0003      	movs	r3, r0
 8007c62:	001a      	movs	r2, r3
 8007c64:	233f      	movs	r3, #63	; 0x3f
 8007c66:	4013      	ands	r3, r2
 8007c68:	b2d9      	uxtb	r1, r3
 8007c6a:	4b22      	ldr	r3, [pc, #136]	; (8007cf4 <SX1276SetTx+0xfc>)
 8007c6c:	223e      	movs	r2, #62	; 0x3e
 8007c6e:	5499      	strb	r1, [r3, r2]
        }
        break;
 8007c70:	e02e      	b.n	8007cd0 <SX1276SetTx+0xd8>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007c72:	4b20      	ldr	r3, [pc, #128]	; (8007cf4 <SX1276SetTx+0xfc>)
 8007c74:	2253      	movs	r2, #83	; 0x53
 8007c76:	5c9b      	ldrb	r3, [r3, r2]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d014      	beq.n	8007ca6 <SX1276SetTx+0xae>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8007c7c:	21f5      	movs	r1, #245	; 0xf5
 8007c7e:	2011      	movs	r0, #17
 8007c80:	f000 f9ee 	bl	8008060 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8007c84:	2040      	movs	r0, #64	; 0x40
 8007c86:	f000 f9ff 	bl	8008088 <SX1276Read>
 8007c8a:	0003      	movs	r3, r0
 8007c8c:	b25b      	sxtb	r3, r3
 8007c8e:	2233      	movs	r2, #51	; 0x33
 8007c90:	4013      	ands	r3, r2
 8007c92:	b25b      	sxtb	r3, r3
 8007c94:	2240      	movs	r2, #64	; 0x40
 8007c96:	4313      	orrs	r3, r2
 8007c98:	b25b      	sxtb	r3, r3
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	0019      	movs	r1, r3
 8007c9e:	2040      	movs	r0, #64	; 0x40
 8007ca0:	f000 f9de 	bl	8008060 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8007ca4:	e013      	b.n	8007cce <SX1276SetTx+0xd6>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8007ca6:	21f7      	movs	r1, #247	; 0xf7
 8007ca8:	2011      	movs	r0, #17
 8007caa:	f000 f9d9 	bl	8008060 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8007cae:	2040      	movs	r0, #64	; 0x40
 8007cb0:	f000 f9ea 	bl	8008088 <SX1276Read>
 8007cb4:	0003      	movs	r3, r0
 8007cb6:	b25b      	sxtb	r3, r3
 8007cb8:	223f      	movs	r2, #63	; 0x3f
 8007cba:	4013      	ands	r3, r2
 8007cbc:	b25b      	sxtb	r3, r3
 8007cbe:	2240      	movs	r2, #64	; 0x40
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	b25b      	sxtb	r3, r3
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	0019      	movs	r1, r3
 8007cc8:	2040      	movs	r0, #64	; 0x40
 8007cca:	f000 f9c9 	bl	8008060 <SX1276Write>
        break;
 8007cce:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 8007cd0:	4b08      	ldr	r3, [pc, #32]	; (8007cf4 <SX1276SetTx+0xfc>)
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8007cd6:	4b06      	ldr	r3, [pc, #24]	; (8007cf0 <SX1276SetTx+0xf8>)
 8007cd8:	0018      	movs	r0, r3
 8007cda:	f013 f959 	bl	801af90 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8007cde:	2003      	movs	r0, #3
 8007ce0:	f000 f914 	bl	8007f0c <SX1276SetOpMode>
}
 8007ce4:	46c0      	nop			; (mov r8, r8)
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	b002      	add	sp, #8
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	20001630 	.word	0x20001630
 8007cf0:	20001598 	.word	0x20001598
 8007cf4:	200015c8 	.word	0x200015c8

08007cf8 <SX1276StartCad>:

void SX1276StartCad( void )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8007cfc:	4b11      	ldr	r3, [pc, #68]	; (8007d44 <SX1276StartCad+0x4c>)
 8007cfe:	795b      	ldrb	r3, [r3, #5]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d01a      	beq.n	8007d3a <SX1276StartCad+0x42>
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d000      	beq.n	8007d0a <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 8007d08:	e018      	b.n	8007d3c <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8007d0a:	21fa      	movs	r1, #250	; 0xfa
 8007d0c:	2011      	movs	r0, #17
 8007d0e:	f000 f9a7 	bl	8008060 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8007d12:	2040      	movs	r0, #64	; 0x40
 8007d14:	f000 f9b8 	bl	8008088 <SX1276Read>
 8007d18:	0003      	movs	r3, r0
 8007d1a:	001a      	movs	r2, r3
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	439a      	bics	r2, r3
 8007d20:	0013      	movs	r3, r2
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	0019      	movs	r1, r3
 8007d26:	2040      	movs	r0, #64	; 0x40
 8007d28:	f000 f99a 	bl	8008060 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8007d2c:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <SX1276StartCad+0x4c>)
 8007d2e:	2203      	movs	r2, #3
 8007d30:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8007d32:	2007      	movs	r0, #7
 8007d34:	f000 f8ea 	bl	8007f0c <SX1276SetOpMode>
        break;
 8007d38:	e000      	b.n	8007d3c <SX1276StartCad+0x44>
        break;
 8007d3a:	46c0      	nop			; (mov r8, r8)
    }
}
 8007d3c:	46c0      	nop			; (mov r8, r8)
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	46c0      	nop			; (mov r8, r8)
 8007d44:	200015c8 	.word	0x200015c8

08007d48 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08e      	sub	sp, #56	; 0x38
 8007d4c:	af0a      	add	r7, sp, #40	; 0x28
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	0008      	movs	r0, r1
 8007d52:	0011      	movs	r1, r2
 8007d54:	1cfb      	adds	r3, r7, #3
 8007d56:	1c02      	adds	r2, r0, #0
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	003b      	movs	r3, r7
 8007d5c:	1c0a      	adds	r2, r1, #0
 8007d5e:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8007d60:	003b      	movs	r3, r7
 8007d62:	881a      	ldrh	r2, [r3, #0]
 8007d64:	0013      	movs	r3, r2
 8007d66:	015b      	lsls	r3, r3, #5
 8007d68:	1a9b      	subs	r3, r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	189b      	adds	r3, r3, r2
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	0018      	movs	r0, r3
 8007d76:	f7fe fcf3 	bl	8006760 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8007d7a:	1cfb      	adds	r3, r7, #3
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	5659      	ldrsb	r1, [r3, r1]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	9308      	str	r3, [sp, #32]
 8007d84:	2300      	movs	r3, #0
 8007d86:	9307      	str	r3, [sp, #28]
 8007d88:	2300      	movs	r3, #0
 8007d8a:	9306      	str	r3, [sp, #24]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	9305      	str	r3, [sp, #20]
 8007d90:	2300      	movs	r3, #0
 8007d92:	9304      	str	r3, [sp, #16]
 8007d94:	2300      	movs	r3, #0
 8007d96:	9303      	str	r3, [sp, #12]
 8007d98:	2305      	movs	r3, #5
 8007d9a:	9302      	str	r3, [sp, #8]
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	2396      	movs	r3, #150	; 0x96
 8007da2:	015b      	lsls	r3, r3, #5
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	2300      	movs	r3, #0
 8007da8:	2200      	movs	r2, #0
 8007daa:	2000      	movs	r0, #0
 8007dac:	f7ff f8fe 	bl	8006fac <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8007db0:	2031      	movs	r0, #49	; 0x31
 8007db2:	f000 f969 	bl	8008088 <SX1276Read>
 8007db6:	0003      	movs	r3, r0
 8007db8:	001a      	movs	r2, r3
 8007dba:	2340      	movs	r3, #64	; 0x40
 8007dbc:	439a      	bics	r2, r3
 8007dbe:	0013      	movs	r3, r2
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	0019      	movs	r1, r3
 8007dc4:	2031      	movs	r0, #49	; 0x31
 8007dc6:	f000 f94b 	bl	8008060 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8007dca:	21f0      	movs	r1, #240	; 0xf0
 8007dcc:	2040      	movs	r0, #64	; 0x40
 8007dce:	f000 f947 	bl	8008060 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8007dd2:	21a0      	movs	r1, #160	; 0xa0
 8007dd4:	2041      	movs	r0, #65	; 0x41
 8007dd6:	f000 f943 	bl	8008060 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	4b09      	ldr	r3, [pc, #36]	; (8007e04 <SX1276SetTxContinuousWave+0xbc>)
 8007dde:	0011      	movs	r1, r2
 8007de0:	0018      	movs	r0, r3
 8007de2:	f013 fa27 	bl	801b234 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 8007de6:	4b08      	ldr	r3, [pc, #32]	; (8007e08 <SX1276SetTxContinuousWave+0xc0>)
 8007de8:	2202      	movs	r2, #2
 8007dea:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8007dec:	4b05      	ldr	r3, [pc, #20]	; (8007e04 <SX1276SetTxContinuousWave+0xbc>)
 8007dee:	0018      	movs	r0, r3
 8007df0:	f013 f8ce 	bl	801af90 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8007df4:	2003      	movs	r0, #3
 8007df6:	f000 f889 	bl	8007f0c <SX1276SetOpMode>
}
 8007dfa:	46c0      	nop			; (mov r8, r8)
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	b004      	add	sp, #16
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	46c0      	nop			; (mov r8, r8)
 8007e04:	20001598 	.word	0x20001598
 8007e08:	200015c8 	.word	0x200015c8

08007e0c <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	0002      	movs	r2, r0
 8007e14:	1dfb      	adds	r3, r7, #7
 8007e16:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8007e18:	230e      	movs	r3, #14
 8007e1a:	18fb      	adds	r3, r7, r3
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	801a      	strh	r2, [r3, #0]

    switch( modem )
 8007e20:	1dfb      	adds	r3, r7, #7
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d002      	beq.n	8007e2e <SX1276ReadRssi+0x22>
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d00d      	beq.n	8007e48 <SX1276ReadRssi+0x3c>
 8007e2c:	e027      	b.n	8007e7e <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8007e2e:	2011      	movs	r0, #17
 8007e30:	f000 f92a 	bl	8008088 <SX1276Read>
 8007e34:	0003      	movs	r3, r0
 8007e36:	085b      	lsrs	r3, r3, #1
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	425b      	negs	r3, r3
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	230e      	movs	r3, #14
 8007e42:	18fb      	adds	r3, r7, r3
 8007e44:	801a      	strh	r2, [r3, #0]
        break;
 8007e46:	e020      	b.n	8007e8a <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8007e48:	4b14      	ldr	r3, [pc, #80]	; (8007e9c <SX1276ReadRssi+0x90>)
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	4a14      	ldr	r2, [pc, #80]	; (8007ea0 <SX1276ReadRssi+0x94>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d90a      	bls.n	8007e68 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8007e52:	201b      	movs	r0, #27
 8007e54:	f000 f918 	bl	8008088 <SX1276Read>
 8007e58:	0003      	movs	r3, r0
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	3b9d      	subs	r3, #157	; 0x9d
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	230e      	movs	r3, #14
 8007e62:	18fb      	adds	r3, r7, r3
 8007e64:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 8007e66:	e010      	b.n	8007e8a <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8007e68:	201b      	movs	r0, #27
 8007e6a:	f000 f90d 	bl	8008088 <SX1276Read>
 8007e6e:	0003      	movs	r3, r0
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	3ba4      	subs	r3, #164	; 0xa4
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	230e      	movs	r3, #14
 8007e78:	18fb      	adds	r3, r7, r3
 8007e7a:	801a      	strh	r2, [r3, #0]
        break;
 8007e7c:	e005      	b.n	8007e8a <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 8007e7e:	230e      	movs	r3, #14
 8007e80:	18fb      	adds	r3, r7, r3
 8007e82:	2201      	movs	r2, #1
 8007e84:	4252      	negs	r2, r2
 8007e86:	801a      	strh	r2, [r3, #0]
        break;
 8007e88:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 8007e8a:	230e      	movs	r3, #14
 8007e8c:	18fb      	adds	r3, r7, r3
 8007e8e:	2200      	movs	r2, #0
 8007e90:	5e9b      	ldrsh	r3, [r3, r2]
}
 8007e92:	0018      	movs	r0, r3
 8007e94:	46bd      	mov	sp, r7
 8007e96:	b004      	add	sp, #16
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	46c0      	nop			; (mov r8, r8)
 8007e9c:	200015c8 	.word	0x200015c8
 8007ea0:	1f4add40 	.word	0x1f4add40

08007ea4 <SX1276Reset>:

void SX1276Reset( void )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct = { 0 };
 8007eaa:	1d3b      	adds	r3, r7, #4
 8007eac:	0018      	movs	r0, r3
 8007eae:	2314      	movs	r3, #20
 8007eb0:	001a      	movs	r2, r3
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	f013 fc40 	bl	801b738 <memset>

    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8007eb8:	1d3b      	adds	r3, r7, #4
 8007eba:	2201      	movs	r2, #1
 8007ebc:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_NOPULL;
 8007ebe:	1d3b      	adds	r3, r7, #4
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8007ec4:	1d3b      	adds	r3, r7, #4
 8007ec6:	2203      	movs	r2, #3
 8007ec8:	60da      	str	r2, [r3, #12]

    // Set RESET pin to 0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8007eca:	1d3b      	adds	r3, r7, #4
 8007ecc:	480e      	ldr	r0, [pc, #56]	; (8007f08 <SX1276Reset+0x64>)
 8007ece:	001a      	movs	r2, r3
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	f7fb fecd 	bl	8003c70 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 8007ed6:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <SX1276Reset+0x64>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2101      	movs	r1, #1
 8007edc:	0018      	movs	r0, r3
 8007ede:	f7fb ff99 	bl	8003e14 <HW_GPIO_Write>

    // Wait 1 ms
    DelayMs( 1 );
 8007ee2:	2001      	movs	r0, #1
 8007ee4:	f7fd f90c 	bl	8005100 <HAL_Delay>

    // Configure RESET as input
    initStruct.Mode = GPIO_NOPULL;
 8007ee8:	1d3b      	adds	r3, r7, #4
 8007eea:	2200      	movs	r2, #0
 8007eec:	605a      	str	r2, [r3, #4]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8007eee:	1d3b      	adds	r3, r7, #4
 8007ef0:	4805      	ldr	r0, [pc, #20]	; (8007f08 <SX1276Reset+0x64>)
 8007ef2:	001a      	movs	r2, r3
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	f7fb febb 	bl	8003c70 <HW_GPIO_Init>

    // Wait 6 ms
    DelayMs( 6 );
 8007efa:	2006      	movs	r0, #6
 8007efc:	f7fd f900 	bl	8005100 <HAL_Delay>
}
 8007f00:	46c0      	nop			; (mov r8, r8)
 8007f02:	46bd      	mov	sp, r7
 8007f04:	b006      	add	sp, #24
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	50000800 	.word	0x50000800

08007f0c <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	0002      	movs	r2, r0
 8007f14:	1dfb      	adds	r3, r7, #7
 8007f16:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 8007f18:	1dfb      	adds	r3, r7, #7
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d11c      	bne.n	8007f5a <SX1276SetOpMode+0x4e>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8007f20:	2001      	movs	r0, #1
 8007f22:	f000 f8b1 	bl	8008088 <SX1276Read>
 8007f26:	0003      	movs	r3, r0
 8007f28:	b25b      	sxtb	r3, r3
 8007f2a:	2207      	movs	r2, #7
 8007f2c:	4393      	bics	r3, r2
 8007f2e:	b25a      	sxtb	r2, r3
 8007f30:	1dfb      	adds	r3, r7, #7
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	b25b      	sxtb	r3, r3
 8007f36:	4313      	orrs	r3, r2
 8007f38:	b25b      	sxtb	r3, r3
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	0019      	movs	r1, r3
 8007f3e:	2001      	movs	r0, #1
 8007f40:	f000 f88e 	bl	8008060 <SX1276Write>
      
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 8007f44:	4b18      	ldr	r3, [pc, #96]	; (8007fa8 <SX1276SetOpMode+0x9c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	2001      	movs	r0, #1
 8007f4c:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8007f4e:	4b16      	ldr	r3, [pc, #88]	; (8007fa8 <SX1276SetOpMode+0x9c>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2000      	movs	r0, #0
 8007f56:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 8007f58:	e022      	b.n	8007fa0 <SX1276SetOpMode+0x94>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 8007f5a:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <SX1276SetOpMode+0x9c>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2001      	movs	r0, #1
 8007f62:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 8007f64:	4b10      	ldr	r3, [pc, #64]	; (8007fa8 <SX1276SetOpMode+0x9c>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 8007f6e:	4b0e      	ldr	r3, [pc, #56]	; (8007fa8 <SX1276SetOpMode+0x9c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	1dfa      	adds	r2, r7, #7
 8007f76:	7812      	ldrb	r2, [r2, #0]
 8007f78:	0010      	movs	r0, r2
 8007f7a:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8007f7c:	2001      	movs	r0, #1
 8007f7e:	f000 f883 	bl	8008088 <SX1276Read>
 8007f82:	0003      	movs	r3, r0
 8007f84:	b25b      	sxtb	r3, r3
 8007f86:	2207      	movs	r2, #7
 8007f88:	4393      	bics	r3, r2
 8007f8a:	b25a      	sxtb	r2, r3
 8007f8c:	1dfb      	adds	r3, r7, #7
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	b25b      	sxtb	r3, r3
 8007f92:	4313      	orrs	r3, r2
 8007f94:	b25b      	sxtb	r3, r3
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	0019      	movs	r1, r3
 8007f9a:	2001      	movs	r0, #1
 8007f9c:	f000 f860 	bl	8008060 <SX1276Write>
}
 8007fa0:	46c0      	nop			; (mov r8, r8)
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	b002      	add	sp, #8
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	20000524 	.word	0x20000524

08007fac <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	0002      	movs	r2, r0
 8007fb4:	1dfb      	adds	r3, r7, #7
 8007fb6:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8007fb8:	2001      	movs	r0, #1
 8007fba:	f000 f865 	bl	8008088 <SX1276Read>
 8007fbe:	0003      	movs	r3, r0
 8007fc0:	b25b      	sxtb	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	da03      	bge.n	8007fce <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 8007fc6:	4b25      	ldr	r3, [pc, #148]	; (800805c <SX1276SetModem+0xb0>)
 8007fc8:	2201      	movs	r2, #1
 8007fca:	715a      	strb	r2, [r3, #5]
 8007fcc:	e002      	b.n	8007fd4 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 8007fce:	4b23      	ldr	r3, [pc, #140]	; (800805c <SX1276SetModem+0xb0>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 8007fd4:	4b21      	ldr	r3, [pc, #132]	; (800805c <SX1276SetModem+0xb0>)
 8007fd6:	795b      	ldrb	r3, [r3, #5]
 8007fd8:	1dfa      	adds	r2, r7, #7
 8007fda:	7812      	ldrb	r2, [r2, #0]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d039      	beq.n	8008054 <SX1276SetModem+0xa8>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8007fe0:	4b1e      	ldr	r3, [pc, #120]	; (800805c <SX1276SetModem+0xb0>)
 8007fe2:	1dfa      	adds	r2, r7, #7
 8007fe4:	7812      	ldrb	r2, [r2, #0]
 8007fe6:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 8007fe8:	4b1c      	ldr	r3, [pc, #112]	; (800805c <SX1276SetModem+0xb0>)
 8007fea:	795b      	ldrb	r3, [r3, #5]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d017      	beq.n	8008020 <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	f7ff ff8b 	bl	8007f0c <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8007ff6:	2001      	movs	r0, #1
 8007ff8:	f000 f846 	bl	8008088 <SX1276Read>
 8007ffc:	0003      	movs	r3, r0
 8007ffe:	001a      	movs	r2, r3
 8008000:	237f      	movs	r3, #127	; 0x7f
 8008002:	4013      	ands	r3, r2
 8008004:	b2db      	uxtb	r3, r3
 8008006:	0019      	movs	r1, r3
 8008008:	2001      	movs	r0, #1
 800800a:	f000 f829 	bl	8008060 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800800e:	2100      	movs	r1, #0
 8008010:	2040      	movs	r0, #64	; 0x40
 8008012:	f000 f825 	bl	8008060 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8008016:	2130      	movs	r1, #48	; 0x30
 8008018:	2041      	movs	r0, #65	; 0x41
 800801a:	f000 f821 	bl	8008060 <SX1276Write>
        break;
 800801e:	e01a      	b.n	8008056 <SX1276SetModem+0xaa>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008020:	2000      	movs	r0, #0
 8008022:	f7ff ff73 	bl	8007f0c <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8008026:	2001      	movs	r0, #1
 8008028:	f000 f82e 	bl	8008088 <SX1276Read>
 800802c:	0003      	movs	r3, r0
 800802e:	001a      	movs	r2, r3
 8008030:	2380      	movs	r3, #128	; 0x80
 8008032:	425b      	negs	r3, r3
 8008034:	4313      	orrs	r3, r2
 8008036:	b2db      	uxtb	r3, r3
 8008038:	0019      	movs	r1, r3
 800803a:	2001      	movs	r0, #1
 800803c:	f000 f810 	bl	8008060 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8008040:	2100      	movs	r1, #0
 8008042:	2040      	movs	r0, #64	; 0x40
 8008044:	f000 f80c 	bl	8008060 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8008048:	2100      	movs	r1, #0
 800804a:	2041      	movs	r0, #65	; 0x41
 800804c:	f000 f808 	bl	8008060 <SX1276Write>
        break;
 8008050:	46c0      	nop			; (mov r8, r8)
 8008052:	e000      	b.n	8008056 <SX1276SetModem+0xaa>
        return;
 8008054:	46c0      	nop			; (mov r8, r8)
    }
}
 8008056:	46bd      	mov	sp, r7
 8008058:	b002      	add	sp, #8
 800805a:	bd80      	pop	{r7, pc}
 800805c:	200015c8 	.word	0x200015c8

08008060 <SX1276Write>:

void SX1276Write( uint16_t addr, uint8_t data )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	0002      	movs	r2, r0
 8008068:	1dbb      	adds	r3, r7, #6
 800806a:	801a      	strh	r2, [r3, #0]
 800806c:	1d7b      	adds	r3, r7, #5
 800806e:	1c0a      	adds	r2, r1, #0
 8008070:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 8008072:	1d79      	adds	r1, r7, #5
 8008074:	1dbb      	adds	r3, r7, #6
 8008076:	881b      	ldrh	r3, [r3, #0]
 8008078:	2201      	movs	r2, #1
 800807a:	0018      	movs	r0, r3
 800807c:	f000 f818 	bl	80080b0 <SX1276WriteBuffer>
}
 8008080:	46c0      	nop			; (mov r8, r8)
 8008082:	46bd      	mov	sp, r7
 8008084:	b002      	add	sp, #8
 8008086:	bd80      	pop	{r7, pc}

08008088 <SX1276Read>:

uint8_t SX1276Read( uint16_t addr )
{
 8008088:	b590      	push	{r4, r7, lr}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	0002      	movs	r2, r0
 8008090:	1dbb      	adds	r3, r7, #6
 8008092:	801a      	strh	r2, [r3, #0]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8008094:	240f      	movs	r4, #15
 8008096:	1939      	adds	r1, r7, r4
 8008098:	1dbb      	adds	r3, r7, #6
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	2201      	movs	r2, #1
 800809e:	0018      	movs	r0, r3
 80080a0:	f000 f848 	bl	8008134 <SX1276ReadBuffer>
    return data;
 80080a4:	193b      	adds	r3, r7, r4
 80080a6:	781b      	ldrb	r3, [r3, #0]
}
 80080a8:	0018      	movs	r0, r3
 80080aa:	46bd      	mov	sp, r7
 80080ac:	b005      	add	sp, #20
 80080ae:	bd90      	pop	{r4, r7, pc}

080080b0 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80080b0:	b590      	push	{r4, r7, lr}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6039      	str	r1, [r7, #0]
 80080b8:	0011      	movs	r1, r2
 80080ba:	1dbb      	adds	r3, r7, #6
 80080bc:	1c02      	adds	r2, r0, #0
 80080be:	801a      	strh	r2, [r3, #0]
 80080c0:	1d7b      	adds	r3, r7, #5
 80080c2:	1c0a      	adds	r2, r1, #0
 80080c4:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 80080c6:	2380      	movs	r3, #128	; 0x80
 80080c8:	0219      	lsls	r1, r3, #8
 80080ca:	23a0      	movs	r3, #160	; 0xa0
 80080cc:	05db      	lsls	r3, r3, #23
 80080ce:	2200      	movs	r2, #0
 80080d0:	0018      	movs	r0, r3
 80080d2:	f7fb fe9f 	bl	8003e14 <HW_GPIO_Write>

    HW_SPI_InOut( addr | 0x80 );
 80080d6:	1dbb      	adds	r3, r7, #6
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	2280      	movs	r2, #128	; 0x80
 80080dc:	4313      	orrs	r3, r2
 80080de:	b29b      	uxth	r3, r3
 80080e0:	0018      	movs	r0, r3
 80080e2:	f7fc fbb1 	bl	8004848 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 80080e6:	230f      	movs	r3, #15
 80080e8:	18fb      	adds	r3, r7, r3
 80080ea:	2200      	movs	r2, #0
 80080ec:	701a      	strb	r2, [r3, #0]
 80080ee:	e00e      	b.n	800810e <SX1276WriteBuffer+0x5e>
    {
        HW_SPI_InOut( buffer[i] );
 80080f0:	240f      	movs	r4, #15
 80080f2:	193b      	adds	r3, r7, r4
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	18d3      	adds	r3, r2, r3
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	0018      	movs	r0, r3
 8008100:	f7fc fba2 	bl	8004848 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8008104:	193b      	adds	r3, r7, r4
 8008106:	781a      	ldrb	r2, [r3, #0]
 8008108:	193b      	adds	r3, r7, r4
 800810a:	3201      	adds	r2, #1
 800810c:	701a      	strb	r2, [r3, #0]
 800810e:	230f      	movs	r3, #15
 8008110:	18fa      	adds	r2, r7, r3
 8008112:	1d7b      	adds	r3, r7, #5
 8008114:	7812      	ldrb	r2, [r2, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	429a      	cmp	r2, r3
 800811a:	d3e9      	bcc.n	80080f0 <SX1276WriteBuffer+0x40>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 800811c:	2380      	movs	r3, #128	; 0x80
 800811e:	0219      	lsls	r1, r3, #8
 8008120:	23a0      	movs	r3, #160	; 0xa0
 8008122:	05db      	lsls	r3, r3, #23
 8008124:	2201      	movs	r2, #1
 8008126:	0018      	movs	r0, r3
 8008128:	f7fb fe74 	bl	8003e14 <HW_GPIO_Write>
}
 800812c:	46c0      	nop			; (mov r8, r8)
 800812e:	46bd      	mov	sp, r7
 8008130:	b005      	add	sp, #20
 8008132:	bd90      	pop	{r4, r7, pc}

08008134 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6039      	str	r1, [r7, #0]
 800813c:	0011      	movs	r1, r2
 800813e:	1dbb      	adds	r3, r7, #6
 8008140:	1c02      	adds	r2, r0, #0
 8008142:	801a      	strh	r2, [r3, #0]
 8008144:	1d7b      	adds	r3, r7, #5
 8008146:	1c0a      	adds	r2, r1, #0
 8008148:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 800814a:	2380      	movs	r3, #128	; 0x80
 800814c:	0219      	lsls	r1, r3, #8
 800814e:	23a0      	movs	r3, #160	; 0xa0
 8008150:	05db      	lsls	r3, r3, #23
 8008152:	2200      	movs	r2, #0
 8008154:	0018      	movs	r0, r3
 8008156:	f7fb fe5d 	bl	8003e14 <HW_GPIO_Write>

    HW_SPI_InOut( addr & 0x7F );
 800815a:	1dbb      	adds	r3, r7, #6
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	227f      	movs	r2, #127	; 0x7f
 8008160:	4013      	ands	r3, r2
 8008162:	b29b      	uxth	r3, r3
 8008164:	0018      	movs	r0, r3
 8008166:	f7fc fb6f 	bl	8004848 <HW_SPI_InOut>

    for( i = 0; i < size; i++ )
 800816a:	230f      	movs	r3, #15
 800816c:	18fb      	adds	r3, r7, r3
 800816e:	2200      	movs	r2, #0
 8008170:	701a      	strb	r2, [r3, #0]
 8008172:	e010      	b.n	8008196 <SX1276ReadBuffer+0x62>
    {
        buffer[i] = HW_SPI_InOut( 0 );
 8008174:	2000      	movs	r0, #0
 8008176:	f7fc fb67 	bl	8004848 <HW_SPI_InOut>
 800817a:	0003      	movs	r3, r0
 800817c:	0019      	movs	r1, r3
 800817e:	200f      	movs	r0, #15
 8008180:	183b      	adds	r3, r7, r0
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	18d3      	adds	r3, r2, r3
 8008188:	b2ca      	uxtb	r2, r1
 800818a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800818c:	183b      	adds	r3, r7, r0
 800818e:	781a      	ldrb	r2, [r3, #0]
 8008190:	183b      	adds	r3, r7, r0
 8008192:	3201      	adds	r2, #1
 8008194:	701a      	strb	r2, [r3, #0]
 8008196:	230f      	movs	r3, #15
 8008198:	18fa      	adds	r2, r7, r3
 800819a:	1d7b      	adds	r3, r7, #5
 800819c:	7812      	ldrb	r2, [r2, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d3e7      	bcc.n	8008174 <SX1276ReadBuffer+0x40>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80081a4:	2380      	movs	r3, #128	; 0x80
 80081a6:	0219      	lsls	r1, r3, #8
 80081a8:	23a0      	movs	r3, #160	; 0xa0
 80081aa:	05db      	lsls	r3, r3, #23
 80081ac:	2201      	movs	r2, #1
 80081ae:	0018      	movs	r0, r3
 80081b0:	f7fb fe30 	bl	8003e14 <HW_GPIO_Write>
}
 80081b4:	46c0      	nop			; (mov r8, r8)
 80081b6:	46bd      	mov	sp, r7
 80081b8:	b004      	add	sp, #16
 80081ba:	bd80      	pop	{r7, pc}

080081bc <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	000a      	movs	r2, r1
 80081c6:	1cfb      	adds	r3, r7, #3
 80081c8:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 80081ca:	1cfb      	adds	r3, r7, #3
 80081cc:	781a      	ldrb	r2, [r3, #0]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	0019      	movs	r1, r3
 80081d2:	2000      	movs	r0, #0
 80081d4:	f7ff ff6c 	bl	80080b0 <SX1276WriteBuffer>
}
 80081d8:	46c0      	nop			; (mov r8, r8)
 80081da:	46bd      	mov	sp, r7
 80081dc:	b002      	add	sp, #8
 80081de:	bd80      	pop	{r7, pc}

080081e0 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	000a      	movs	r2, r1
 80081ea:	1cfb      	adds	r3, r7, #3
 80081ec:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 80081ee:	1cfb      	adds	r3, r7, #3
 80081f0:	781a      	ldrb	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	0019      	movs	r1, r3
 80081f6:	2000      	movs	r0, #0
 80081f8:	f7ff ff9c 	bl	8008134 <SX1276ReadBuffer>
}
 80081fc:	46c0      	nop			; (mov r8, r8)
 80081fe:	46bd      	mov	sp, r7
 8008200:	b002      	add	sp, #8
 8008202:	bd80      	pop	{r7, pc}

08008204 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
 800820a:	0002      	movs	r2, r0
 800820c:	1dfb      	adds	r3, r7, #7
 800820e:	701a      	strb	r2, [r3, #0]
 8008210:	1dbb      	adds	r3, r7, #6
 8008212:	1c0a      	adds	r2, r1, #0
 8008214:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8008216:	1dfb      	adds	r3, r7, #7
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	0018      	movs	r0, r3
 800821c:	f7ff fec6 	bl	8007fac <SX1276SetModem>

    switch( modem )
 8008220:	1dfb      	adds	r3, r7, #7
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d002      	beq.n	800822e <SX1276SetMaxPayloadLength+0x2a>
 8008228:	2b01      	cmp	r3, #1
 800822a:	d00f      	beq.n	800824c <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 800822c:	e016      	b.n	800825c <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 800822e:	4b0d      	ldr	r3, [pc, #52]	; (8008264 <SX1276SetMaxPayloadLength+0x60>)
 8008230:	2222      	movs	r2, #34	; 0x22
 8008232:	5c9b      	ldrb	r3, [r3, r2]
 8008234:	2201      	movs	r2, #1
 8008236:	4053      	eors	r3, r2
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00d      	beq.n	800825a <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800823e:	1dbb      	adds	r3, r7, #6
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	0019      	movs	r1, r3
 8008244:	2032      	movs	r0, #50	; 0x32
 8008246:	f7ff ff0b 	bl	8008060 <SX1276Write>
        break;
 800824a:	e006      	b.n	800825a <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800824c:	1dbb      	adds	r3, r7, #6
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	0019      	movs	r1, r3
 8008252:	2023      	movs	r0, #35	; 0x23
 8008254:	f7ff ff04 	bl	8008060 <SX1276Write>
        break;
 8008258:	e000      	b.n	800825c <SX1276SetMaxPayloadLength+0x58>
        break;
 800825a:	46c0      	nop			; (mov r8, r8)
}
 800825c:	46c0      	nop			; (mov r8, r8)
 800825e:	46bd      	mov	sp, r7
 8008260:	b002      	add	sp, #8
 8008262:	bd80      	pop	{r7, pc}
 8008264:	200015c8 	.word	0x200015c8

08008268 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	0002      	movs	r2, r0
 8008270:	1dfb      	adds	r3, r7, #7
 8008272:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
 8008274:	2001      	movs	r0, #1
 8008276:	f7ff fe99 	bl	8007fac <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800827a:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <SX1276SetPublicNetwork+0x40>)
 800827c:	1dfa      	adds	r2, r7, #7
 800827e:	215c      	movs	r1, #92	; 0x5c
 8008280:	7812      	ldrb	r2, [r2, #0]
 8008282:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 8008284:	1dfb      	adds	r3, r7, #7
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d004      	beq.n	8008296 <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 800828c:	2134      	movs	r1, #52	; 0x34
 800828e:	2039      	movs	r0, #57	; 0x39
 8008290:	f7ff fee6 	bl	8008060 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 8008294:	e003      	b.n	800829e <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8008296:	2112      	movs	r1, #18
 8008298:	2039      	movs	r0, #57	; 0x39
 800829a:	f7ff fee1 	bl	8008060 <SX1276Write>
}
 800829e:	46c0      	nop			; (mov r8, r8)
 80082a0:	46bd      	mov	sp, r7
 80082a2:	b002      	add	sp, #8
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	46c0      	nop			; (mov r8, r8)
 80082a8:	200015c8 	.word	0x200015c8

080082ac <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	af00      	add	r7, sp, #0
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 80082b0:	4b04      	ldr	r3, [pc, #16]	; (80082c4 <SX1276GetWakeupTime+0x18>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	4798      	blx	r3
 80082b8:	0003      	movs	r3, r0
 80082ba:	3302      	adds	r3, #2
}
 80082bc:	0018      	movs	r0, r3
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	46c0      	nop			; (mov r8, r8)
 80082c4:	20000524 	.word	0x20000524

080082c8 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void* context )
{
 80082c8:	b590      	push	{r4, r7, lr}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 80082d0:	4b51      	ldr	r3, [pc, #324]	; (8008418 <SX1276OnTimeoutIrq+0x150>)
 80082d2:	791b      	ldrb	r3, [r3, #4]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d002      	beq.n	80082de <SX1276OnTimeoutIrq+0x16>
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d045      	beq.n	8008368 <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 80082dc:	e098      	b.n	8008410 <SX1276OnTimeoutIrq+0x148>
        if( SX1276.Settings.Modem == MODEM_FSK )
 80082de:	4b4e      	ldr	r3, [pc, #312]	; (8008418 <SX1276OnTimeoutIrq+0x150>)
 80082e0:	795b      	ldrb	r3, [r3, #5]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d132      	bne.n	800834c <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80082e6:	4b4c      	ldr	r3, [pc, #304]	; (8008418 <SX1276OnTimeoutIrq+0x150>)
 80082e8:	2230      	movs	r2, #48	; 0x30
 80082ea:	2100      	movs	r1, #0
 80082ec:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80082ee:	4b4a      	ldr	r3, [pc, #296]	; (8008418 <SX1276OnTimeoutIrq+0x150>)
 80082f0:	2231      	movs	r2, #49	; 0x31
 80082f2:	2100      	movs	r1, #0
 80082f4:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80082f6:	4b48      	ldr	r3, [pc, #288]	; (8008418 <SX1276OnTimeoutIrq+0x150>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80082fc:	4b46      	ldr	r3, [pc, #280]	; (8008418 <SX1276OnTimeoutIrq+0x150>)
 80082fe:	2200      	movs	r2, #0
 8008300:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8008302:	210b      	movs	r1, #11
 8008304:	203e      	movs	r0, #62	; 0x3e
 8008306:	f7ff feab 	bl	8008060 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800830a:	2110      	movs	r1, #16
 800830c:	203f      	movs	r0, #63	; 0x3f
 800830e:	f7ff fea7 	bl	8008060 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8008312:	4b41      	ldr	r3, [pc, #260]	; (8008418 <SX1276OnTimeoutIrq+0x150>)
 8008314:	2226      	movs	r2, #38	; 0x26
 8008316:	5c9b      	ldrb	r3, [r3, r2]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d010      	beq.n	800833e <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800831c:	200d      	movs	r0, #13
 800831e:	f7ff feb3 	bl	8008088 <SX1276Read>
 8008322:	0003      	movs	r3, r0
 8008324:	001a      	movs	r2, r3
 8008326:	2340      	movs	r3, #64	; 0x40
 8008328:	4313      	orrs	r3, r2
 800832a:	b2db      	uxtb	r3, r3
 800832c:	0019      	movs	r1, r3
 800832e:	200d      	movs	r0, #13
 8008330:	f7ff fe96 	bl	8008060 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8008334:	4b39      	ldr	r3, [pc, #228]	; (800841c <SX1276OnTimeoutIrq+0x154>)
 8008336:	0018      	movs	r0, r3
 8008338:	f012 fe2a 	bl	801af90 <TimerStart>
 800833c:	e006      	b.n	800834c <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 800833e:	4b36      	ldr	r3, [pc, #216]	; (8008418 <SX1276OnTimeoutIrq+0x150>)
 8008340:	2200      	movs	r2, #0
 8008342:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 8008344:	4b35      	ldr	r3, [pc, #212]	; (800841c <SX1276OnTimeoutIrq+0x154>)
 8008346:	0018      	movs	r0, r3
 8008348:	f012 fefa 	bl	801b140 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800834c:	4b34      	ldr	r3, [pc, #208]	; (8008420 <SX1276OnTimeoutIrq+0x158>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d05a      	beq.n	800840a <SX1276OnTimeoutIrq+0x142>
 8008354:	4b32      	ldr	r3, [pc, #200]	; (8008420 <SX1276OnTimeoutIrq+0x158>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d055      	beq.n	800840a <SX1276OnTimeoutIrq+0x142>
            RadioEvents->RxTimeout( );
 800835e:	4b30      	ldr	r3, [pc, #192]	; (8008420 <SX1276OnTimeoutIrq+0x158>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	4798      	blx	r3
        break;
 8008366:	e050      	b.n	800840a <SX1276OnTimeoutIrq+0x142>
        SX1276Reset( );
 8008368:	f7ff fd9c 	bl	8007ea4 <SX1276Reset>
        RxChainCalibration( );
 800836c:	f7fe face 	bl	800690c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8008370:	2000      	movs	r0, #0
 8008372:	f7ff fdcb 	bl	8007f0c <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8008376:	230f      	movs	r3, #15
 8008378:	18fb      	adds	r3, r7, r3
 800837a:	2200      	movs	r2, #0
 800837c:	701a      	strb	r2, [r3, #0]
 800837e:	e025      	b.n	80083cc <SX1276OnTimeoutIrq+0x104>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8008380:	240f      	movs	r4, #15
 8008382:	193b      	adds	r3, r7, r4
 8008384:	781a      	ldrb	r2, [r3, #0]
 8008386:	4927      	ldr	r1, [pc, #156]	; (8008424 <SX1276OnTimeoutIrq+0x15c>)
 8008388:	0013      	movs	r3, r2
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	189b      	adds	r3, r3, r2
 800838e:	5c5b      	ldrb	r3, [r3, r1]
 8008390:	0018      	movs	r0, r3
 8008392:	f7ff fe0b 	bl	8007fac <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8008396:	193b      	adds	r3, r7, r4
 8008398:	781a      	ldrb	r2, [r3, #0]
 800839a:	4922      	ldr	r1, [pc, #136]	; (8008424 <SX1276OnTimeoutIrq+0x15c>)
 800839c:	0013      	movs	r3, r2
 800839e:	005b      	lsls	r3, r3, #1
 80083a0:	189b      	adds	r3, r3, r2
 80083a2:	18cb      	adds	r3, r1, r3
 80083a4:	3301      	adds	r3, #1
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	b298      	uxth	r0, r3
 80083aa:	193b      	adds	r3, r7, r4
 80083ac:	781a      	ldrb	r2, [r3, #0]
 80083ae:	491d      	ldr	r1, [pc, #116]	; (8008424 <SX1276OnTimeoutIrq+0x15c>)
 80083b0:	0013      	movs	r3, r2
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	189b      	adds	r3, r3, r2
 80083b6:	18cb      	adds	r3, r1, r3
 80083b8:	3302      	adds	r3, #2
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	0019      	movs	r1, r3
 80083be:	f7ff fe4f 	bl	8008060 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80083c2:	193b      	adds	r3, r7, r4
 80083c4:	781a      	ldrb	r2, [r3, #0]
 80083c6:	193b      	adds	r3, r7, r4
 80083c8:	3201      	adds	r2, #1
 80083ca:	701a      	strb	r2, [r3, #0]
 80083cc:	230f      	movs	r3, #15
 80083ce:	18fb      	adds	r3, r7, r3
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	2b0f      	cmp	r3, #15
 80083d4:	d9d4      	bls.n	8008380 <SX1276OnTimeoutIrq+0xb8>
        SX1276SetModem( MODEM_FSK );
 80083d6:	2000      	movs	r0, #0
 80083d8:	f7ff fde8 	bl	8007fac <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 80083dc:	4b0e      	ldr	r3, [pc, #56]	; (8008418 <SX1276OnTimeoutIrq+0x150>)
 80083de:	225c      	movs	r2, #92	; 0x5c
 80083e0:	5c9b      	ldrb	r3, [r3, r2]
 80083e2:	0018      	movs	r0, r3
 80083e4:	f7ff ff40 	bl	8008268 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 80083e8:	4b0b      	ldr	r3, [pc, #44]	; (8008418 <SX1276OnTimeoutIrq+0x150>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80083ee:	4b0c      	ldr	r3, [pc, #48]	; (8008420 <SX1276OnTimeoutIrq+0x158>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00b      	beq.n	800840e <SX1276OnTimeoutIrq+0x146>
 80083f6:	4b0a      	ldr	r3, [pc, #40]	; (8008420 <SX1276OnTimeoutIrq+0x158>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d006      	beq.n	800840e <SX1276OnTimeoutIrq+0x146>
            RadioEvents->TxTimeout( );
 8008400:	4b07      	ldr	r3, [pc, #28]	; (8008420 <SX1276OnTimeoutIrq+0x158>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	4798      	blx	r3
        break;
 8008408:	e001      	b.n	800840e <SX1276OnTimeoutIrq+0x146>
        break;
 800840a:	46c0      	nop			; (mov r8, r8)
 800840c:	e000      	b.n	8008410 <SX1276OnTimeoutIrq+0x148>
        break;
 800840e:	46c0      	nop			; (mov r8, r8)
    }
}
 8008410:	46c0      	nop			; (mov r8, r8)
 8008412:	46bd      	mov	sp, r7
 8008414:	b005      	add	sp, #20
 8008416:	bd90      	pop	{r4, r7, pc}
 8008418:	200015c8 	.word	0x200015c8
 800841c:	200015b0 	.word	0x200015b0
 8008420:	20000420 	.word	0x20000420
 8008424:	0801cb7c 	.word	0x0801cb7c

08008428 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void* context )
{
 8008428:	b5b0      	push	{r4, r5, r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
    volatile uint8_t irqFlags = 0;
 8008430:	230d      	movs	r3, #13
 8008432:	18fb      	adds	r3, r7, r3
 8008434:	2200      	movs	r2, #0
 8008436:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 8008438:	4bca      	ldr	r3, [pc, #808]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 800843a:	791b      	ldrb	r3, [r3, #4]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d003      	beq.n	8008448 <SX1276OnDio0Irq+0x20>
 8008440:	2b02      	cmp	r3, #2
 8008442:	d100      	bne.n	8008446 <SX1276OnDio0Irq+0x1e>
 8008444:	e1f2      	b.n	800882c <SX1276OnDio0Irq+0x404>
                }
                break;
            }
            break;
        default:
            break;
 8008446:	e20f      	b.n	8008868 <SX1276OnDio0Irq+0x440>
            switch( SX1276.Settings.Modem )
 8008448:	4bc6      	ldr	r3, [pc, #792]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 800844a:	795b      	ldrb	r3, [r3, #5]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <SX1276OnDio0Irq+0x30>
 8008450:	2b01      	cmp	r3, #1
 8008452:	d100      	bne.n	8008456 <SX1276OnDio0Irq+0x2e>
 8008454:	e0eb      	b.n	800862e <SX1276OnDio0Irq+0x206>
                break;
 8008456:	e1e8      	b.n	800882a <SX1276OnDio0Irq+0x402>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8008458:	4bc2      	ldr	r3, [pc, #776]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 800845a:	2224      	movs	r2, #36	; 0x24
 800845c:	5c9b      	ldrb	r3, [r3, r2]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d057      	beq.n	8008512 <SX1276OnDio0Irq+0xea>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8008462:	203f      	movs	r0, #63	; 0x3f
 8008464:	f7ff fe10 	bl	8008088 <SX1276Read>
 8008468:	0003      	movs	r3, r0
 800846a:	001a      	movs	r2, r3
 800846c:	210d      	movs	r1, #13
 800846e:	187b      	adds	r3, r7, r1
 8008470:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8008472:	187b      	adds	r3, r7, r1
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	b2db      	uxtb	r3, r3
 8008478:	001a      	movs	r2, r3
 800847a:	2302      	movs	r3, #2
 800847c:	4013      	ands	r3, r2
 800847e:	2b02      	cmp	r3, #2
 8008480:	d047      	beq.n	8008512 <SX1276OnDio0Irq+0xea>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8008482:	210b      	movs	r1, #11
 8008484:	203e      	movs	r0, #62	; 0x3e
 8008486:	f7ff fdeb 	bl	8008060 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800848a:	2110      	movs	r1, #16
 800848c:	203f      	movs	r0, #63	; 0x3f
 800848e:	f7ff fde7 	bl	8008060 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8008492:	4bb5      	ldr	r3, [pc, #724]	; (8008768 <SX1276OnDio0Irq+0x340>)
 8008494:	0018      	movs	r0, r3
 8008496:	f012 fe53 	bl	801b140 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800849a:	4bb2      	ldr	r3, [pc, #712]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 800849c:	2226      	movs	r2, #38	; 0x26
 800849e:	5c9b      	ldrb	r3, [r3, r2]
 80084a0:	2201      	movs	r2, #1
 80084a2:	4053      	eors	r3, r2
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d007      	beq.n	80084ba <SX1276OnDio0Irq+0x92>
                            TimerStop( &RxTimeoutSyncWord );
 80084aa:	4bb0      	ldr	r3, [pc, #704]	; (800876c <SX1276OnDio0Irq+0x344>)
 80084ac:	0018      	movs	r0, r3
 80084ae:	f012 fe47 	bl	801b140 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 80084b2:	4bac      	ldr	r3, [pc, #688]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	711a      	strb	r2, [r3, #4]
 80084b8:	e00f      	b.n	80084da <SX1276OnDio0Irq+0xb2>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80084ba:	200d      	movs	r0, #13
 80084bc:	f7ff fde4 	bl	8008088 <SX1276Read>
 80084c0:	0003      	movs	r3, r0
 80084c2:	001a      	movs	r2, r3
 80084c4:	2340      	movs	r3, #64	; 0x40
 80084c6:	4313      	orrs	r3, r2
 80084c8:	b2db      	uxtb	r3, r3
 80084ca:	0019      	movs	r1, r3
 80084cc:	200d      	movs	r0, #13
 80084ce:	f7ff fdc7 	bl	8008060 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 80084d2:	4ba6      	ldr	r3, [pc, #664]	; (800876c <SX1276OnDio0Irq+0x344>)
 80084d4:	0018      	movs	r0, r3
 80084d6:	f012 fd5b 	bl	801af90 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80084da:	4ba5      	ldr	r3, [pc, #660]	; (8008770 <SX1276OnDio0Irq+0x348>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d008      	beq.n	80084f4 <SX1276OnDio0Irq+0xcc>
 80084e2:	4ba3      	ldr	r3, [pc, #652]	; (8008770 <SX1276OnDio0Irq+0x348>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <SX1276OnDio0Irq+0xcc>
                            RadioEvents->RxError( );
 80084ec:	4ba0      	ldr	r3, [pc, #640]	; (8008770 <SX1276OnDio0Irq+0x348>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80084f4:	4b9b      	ldr	r3, [pc, #620]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 80084f6:	2230      	movs	r2, #48	; 0x30
 80084f8:	2100      	movs	r1, #0
 80084fa:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80084fc:	4b99      	ldr	r3, [pc, #612]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 80084fe:	2231      	movs	r2, #49	; 0x31
 8008500:	2100      	movs	r1, #0
 8008502:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008504:	4b97      	ldr	r3, [pc, #604]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008506:	2200      	movs	r2, #0
 8008508:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800850a:	4b96      	ldr	r3, [pc, #600]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 800850c:	2200      	movs	r2, #0
 800850e:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 8008510:	e18b      	b.n	800882a <SX1276OnDio0Irq+0x402>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8008512:	4b94      	ldr	r3, [pc, #592]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008514:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8008516:	2b00      	cmp	r3, #0
 8008518:	d12d      	bne.n	8008576 <SX1276OnDio0Irq+0x14e>
 800851a:	4b92      	ldr	r3, [pc, #584]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 800851c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d129      	bne.n	8008576 <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8008522:	4b90      	ldr	r3, [pc, #576]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008524:	2222      	movs	r2, #34	; 0x22
 8008526:	5c9b      	ldrb	r3, [r3, r2]
 8008528:	2201      	movs	r2, #1
 800852a:	4053      	eors	r3, r2
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d005      	beq.n	800853e <SX1276OnDio0Irq+0x116>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8008532:	4b90      	ldr	r3, [pc, #576]	; (8008774 <SX1276OnDio0Irq+0x34c>)
 8008534:	2101      	movs	r1, #1
 8008536:	0018      	movs	r0, r3
 8008538:	f7ff fe52 	bl	80081e0 <SX1276ReadFifo>
 800853c:	e006      	b.n	800854c <SX1276OnDio0Irq+0x124>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800853e:	2032      	movs	r0, #50	; 0x32
 8008540:	f7ff fda2 	bl	8008088 <SX1276Read>
 8008544:	0003      	movs	r3, r0
 8008546:	b29a      	uxth	r2, r3
 8008548:	4b86      	ldr	r3, [pc, #536]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 800854a:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800854c:	4b85      	ldr	r3, [pc, #532]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 800854e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008550:	001a      	movs	r2, r3
 8008552:	4b89      	ldr	r3, [pc, #548]	; (8008778 <SX1276OnDio0Irq+0x350>)
 8008554:	18d0      	adds	r0, r2, r3
 8008556:	4b83      	ldr	r3, [pc, #524]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008558:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800855a:	b2da      	uxtb	r2, r3
 800855c:	4b81      	ldr	r3, [pc, #516]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 800855e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008560:	b2db      	uxtb	r3, r3
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	b2db      	uxtb	r3, r3
 8008566:	0019      	movs	r1, r3
 8008568:	f7ff fe3a 	bl	80081e0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800856c:	4b7d      	ldr	r3, [pc, #500]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 800856e:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8008570:	4b7c      	ldr	r3, [pc, #496]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008572:	879a      	strh	r2, [r3, #60]	; 0x3c
 8008574:	e013      	b.n	800859e <SX1276OnDio0Irq+0x176>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008576:	4b7b      	ldr	r3, [pc, #492]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008578:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800857a:	001a      	movs	r2, r3
 800857c:	4b7e      	ldr	r3, [pc, #504]	; (8008778 <SX1276OnDio0Irq+0x350>)
 800857e:	18d0      	adds	r0, r2, r3
 8008580:	4b78      	ldr	r3, [pc, #480]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008582:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8008584:	b2da      	uxtb	r2, r3
 8008586:	4b77      	ldr	r3, [pc, #476]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008588:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800858a:	b2db      	uxtb	r3, r3
 800858c:	1ad3      	subs	r3, r2, r3
 800858e:	b2db      	uxtb	r3, r3
 8008590:	0019      	movs	r1, r3
 8008592:	f7ff fe25 	bl	80081e0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008596:	4b73      	ldr	r3, [pc, #460]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008598:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800859a:	4b72      	ldr	r3, [pc, #456]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 800859c:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 800859e:	4b72      	ldr	r3, [pc, #456]	; (8008768 <SX1276OnDio0Irq+0x340>)
 80085a0:	0018      	movs	r0, r3
 80085a2:	f012 fdcd 	bl	801b140 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80085a6:	4b6f      	ldr	r3, [pc, #444]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 80085a8:	2226      	movs	r2, #38	; 0x26
 80085aa:	5c9b      	ldrb	r3, [r3, r2]
 80085ac:	2201      	movs	r2, #1
 80085ae:	4053      	eors	r3, r2
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d007      	beq.n	80085c6 <SX1276OnDio0Irq+0x19e>
                    SX1276.Settings.State = RF_IDLE;
 80085b6:	4b6b      	ldr	r3, [pc, #428]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 80085bc:	4b6b      	ldr	r3, [pc, #428]	; (800876c <SX1276OnDio0Irq+0x344>)
 80085be:	0018      	movs	r0, r3
 80085c0:	f012 fdbe 	bl	801b140 <TimerStop>
 80085c4:	e00f      	b.n	80085e6 <SX1276OnDio0Irq+0x1be>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80085c6:	200d      	movs	r0, #13
 80085c8:	f7ff fd5e 	bl	8008088 <SX1276Read>
 80085cc:	0003      	movs	r3, r0
 80085ce:	001a      	movs	r2, r3
 80085d0:	2340      	movs	r3, #64	; 0x40
 80085d2:	4313      	orrs	r3, r2
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	0019      	movs	r1, r3
 80085d8:	200d      	movs	r0, #13
 80085da:	f7ff fd41 	bl	8008060 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 80085de:	4b63      	ldr	r3, [pc, #396]	; (800876c <SX1276OnDio0Irq+0x344>)
 80085e0:	0018      	movs	r0, r3
 80085e2:	f012 fcd5 	bl	801af90 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80085e6:	4b62      	ldr	r3, [pc, #392]	; (8008770 <SX1276OnDio0Irq+0x348>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d010      	beq.n	8008610 <SX1276OnDio0Irq+0x1e8>
 80085ee:	4b60      	ldr	r3, [pc, #384]	; (8008770 <SX1276OnDio0Irq+0x348>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 80085f8:	4b5d      	ldr	r3, [pc, #372]	; (8008770 <SX1276OnDio0Irq+0x348>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	689c      	ldr	r4, [r3, #8]
 80085fe:	4b59      	ldr	r3, [pc, #356]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008600:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 8008602:	4b58      	ldr	r3, [pc, #352]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008604:	2232      	movs	r2, #50	; 0x32
 8008606:	569b      	ldrsb	r3, [r3, r2]
 8008608:	b21a      	sxth	r2, r3
 800860a:	485b      	ldr	r0, [pc, #364]	; (8008778 <SX1276OnDio0Irq+0x350>)
 800860c:	2300      	movs	r3, #0
 800860e:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8008610:	4b54      	ldr	r3, [pc, #336]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008612:	2230      	movs	r2, #48	; 0x30
 8008614:	2100      	movs	r1, #0
 8008616:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8008618:	4b52      	ldr	r3, [pc, #328]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 800861a:	2231      	movs	r2, #49	; 0x31
 800861c:	2100      	movs	r1, #0
 800861e:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008620:	4b50      	ldr	r3, [pc, #320]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008622:	2200      	movs	r2, #0
 8008624:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 8008626:	4b4f      	ldr	r3, [pc, #316]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008628:	2200      	movs	r2, #0
 800862a:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 800862c:	e0fd      	b.n	800882a <SX1276OnDio0Irq+0x402>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800862e:	2140      	movs	r1, #64	; 0x40
 8008630:	2012      	movs	r0, #18
 8008632:	f7ff fd15 	bl	8008060 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8008636:	2012      	movs	r0, #18
 8008638:	f7ff fd26 	bl	8008088 <SX1276Read>
 800863c:	0003      	movs	r3, r0
 800863e:	001a      	movs	r2, r3
 8008640:	210d      	movs	r1, #13
 8008642:	187b      	adds	r3, r7, r1
 8008644:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8008646:	187b      	adds	r3, r7, r1
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	b2db      	uxtb	r3, r3
 800864c:	001a      	movs	r2, r3
 800864e:	2320      	movs	r3, #32
 8008650:	4013      	ands	r3, r2
 8008652:	2b20      	cmp	r3, #32
 8008654:	d122      	bne.n	800869c <SX1276OnDio0Irq+0x274>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8008656:	2120      	movs	r1, #32
 8008658:	2012      	movs	r0, #18
 800865a:	f7ff fd01 	bl	8008060 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800865e:	4b41      	ldr	r3, [pc, #260]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008660:	2256      	movs	r2, #86	; 0x56
 8008662:	5c9b      	ldrb	r3, [r3, r2]
 8008664:	2201      	movs	r2, #1
 8008666:	4053      	eors	r3, r2
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d002      	beq.n	8008674 <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 800866e:	4b3d      	ldr	r3, [pc, #244]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008670:	2200      	movs	r2, #0
 8008672:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 8008674:	4b3c      	ldr	r3, [pc, #240]	; (8008768 <SX1276OnDio0Irq+0x340>)
 8008676:	0018      	movs	r0, r3
 8008678:	f012 fd62 	bl	801b140 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800867c:	4b3c      	ldr	r3, [pc, #240]	; (8008770 <SX1276OnDio0Irq+0x348>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d100      	bne.n	8008686 <SX1276OnDio0Irq+0x25e>
 8008684:	e0ce      	b.n	8008824 <SX1276OnDio0Irq+0x3fc>
 8008686:	4b3a      	ldr	r3, [pc, #232]	; (8008770 <SX1276OnDio0Irq+0x348>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d100      	bne.n	8008692 <SX1276OnDio0Irq+0x26a>
 8008690:	e0c8      	b.n	8008824 <SX1276OnDio0Irq+0x3fc>
                            RadioEvents->RxError( );
 8008692:	4b37      	ldr	r3, [pc, #220]	; (8008770 <SX1276OnDio0Irq+0x348>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	4798      	blx	r3
                        break;
 800869a:	e0c3      	b.n	8008824 <SX1276OnDio0Irq+0x3fc>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 800869c:	2019      	movs	r0, #25
 800869e:	f7ff fcf3 	bl	8008088 <SX1276Read>
 80086a2:	0003      	movs	r3, r0
 80086a4:	b25b      	sxtb	r3, r3
 80086a6:	3302      	adds	r3, #2
 80086a8:	109b      	asrs	r3, r3, #2
 80086aa:	b259      	sxtb	r1, r3
 80086ac:	4b2d      	ldr	r3, [pc, #180]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 80086ae:	2260      	movs	r2, #96	; 0x60
 80086b0:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 80086b2:	201a      	movs	r0, #26
 80086b4:	f7ff fce8 	bl	8008088 <SX1276Read>
 80086b8:	0003      	movs	r3, r0
 80086ba:	001a      	movs	r2, r3
 80086bc:	230e      	movs	r3, #14
 80086be:	18fb      	adds	r3, r7, r3
 80086c0:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80086c2:	4b28      	ldr	r3, [pc, #160]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 80086c4:	2260      	movs	r2, #96	; 0x60
 80086c6:	569b      	ldrsb	r3, [r3, r2]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	da34      	bge.n	8008736 <SX1276OnDio0Irq+0x30e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80086cc:	4b25      	ldr	r3, [pc, #148]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	4a2a      	ldr	r2, [pc, #168]	; (800877c <SX1276OnDio0Irq+0x354>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d917      	bls.n	8008706 <SX1276OnDio0Irq+0x2de>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80086d6:	210e      	movs	r1, #14
 80086d8:	187b      	adds	r3, r7, r1
 80086da:	2200      	movs	r2, #0
 80086dc:	5e9b      	ldrsh	r3, [r3, r2]
 80086de:	111b      	asrs	r3, r3, #4
 80086e0:	b21b      	sxth	r3, r3
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	187b      	adds	r3, r7, r1
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	18d3      	adds	r3, r2, r3
 80086ea:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 80086ec:	4b1d      	ldr	r3, [pc, #116]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 80086ee:	2160      	movs	r1, #96	; 0x60
 80086f0:	565b      	ldrsb	r3, [r3, r1]
 80086f2:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80086f4:	18d3      	adds	r3, r2, r3
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	3b9d      	subs	r3, #157	; 0x9d
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	b219      	sxth	r1, r3
 80086fe:	4b19      	ldr	r3, [pc, #100]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008700:	2262      	movs	r2, #98	; 0x62
 8008702:	5299      	strh	r1, [r3, r2]
 8008704:	e04d      	b.n	80087a2 <SX1276OnDio0Irq+0x37a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8008706:	210e      	movs	r1, #14
 8008708:	187b      	adds	r3, r7, r1
 800870a:	2200      	movs	r2, #0
 800870c:	5e9b      	ldrsh	r3, [r3, r2]
 800870e:	111b      	asrs	r3, r3, #4
 8008710:	b21b      	sxth	r3, r3
 8008712:	b29a      	uxth	r2, r3
 8008714:	187b      	adds	r3, r7, r1
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	18d3      	adds	r3, r2, r3
 800871a:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 800871c:	4b11      	ldr	r3, [pc, #68]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 800871e:	2160      	movs	r1, #96	; 0x60
 8008720:	565b      	ldrsb	r3, [r3, r1]
 8008722:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8008724:	18d3      	adds	r3, r2, r3
 8008726:	b29b      	uxth	r3, r3
 8008728:	3ba4      	subs	r3, #164	; 0xa4
 800872a:	b29b      	uxth	r3, r3
 800872c:	b219      	sxth	r1, r3
 800872e:	4b0d      	ldr	r3, [pc, #52]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008730:	2262      	movs	r2, #98	; 0x62
 8008732:	5299      	strh	r1, [r3, r2]
 8008734:	e035      	b.n	80087a2 <SX1276OnDio0Irq+0x37a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8008736:	4b0b      	ldr	r3, [pc, #44]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	4a10      	ldr	r2, [pc, #64]	; (800877c <SX1276OnDio0Irq+0x354>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d91f      	bls.n	8008780 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8008740:	210e      	movs	r1, #14
 8008742:	187b      	adds	r3, r7, r1
 8008744:	2200      	movs	r2, #0
 8008746:	5e9b      	ldrsh	r3, [r3, r2]
 8008748:	111b      	asrs	r3, r3, #4
 800874a:	b21b      	sxth	r3, r3
 800874c:	b29a      	uxth	r2, r3
 800874e:	187b      	adds	r3, r7, r1
 8008750:	881b      	ldrh	r3, [r3, #0]
 8008752:	18d3      	adds	r3, r2, r3
 8008754:	b29b      	uxth	r3, r3
 8008756:	3b9d      	subs	r3, #157	; 0x9d
 8008758:	b29b      	uxth	r3, r3
 800875a:	b219      	sxth	r1, r3
 800875c:	4b01      	ldr	r3, [pc, #4]	; (8008764 <SX1276OnDio0Irq+0x33c>)
 800875e:	2262      	movs	r2, #98	; 0x62
 8008760:	5299      	strh	r1, [r3, r2]
 8008762:	e01e      	b.n	80087a2 <SX1276OnDio0Irq+0x37a>
 8008764:	200015c8 	.word	0x200015c8
 8008768:	20001630 	.word	0x20001630
 800876c:	200015b0 	.word	0x200015b0
 8008770:	20000420 	.word	0x20000420
 8008774:	20001602 	.word	0x20001602
 8008778:	20000424 	.word	0x20000424
 800877c:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8008780:	210e      	movs	r1, #14
 8008782:	187b      	adds	r3, r7, r1
 8008784:	2200      	movs	r2, #0
 8008786:	5e9b      	ldrsh	r3, [r3, r2]
 8008788:	111b      	asrs	r3, r3, #4
 800878a:	b21b      	sxth	r3, r3
 800878c:	b29a      	uxth	r2, r3
 800878e:	187b      	adds	r3, r7, r1
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	18d3      	adds	r3, r2, r3
 8008794:	b29b      	uxth	r3, r3
 8008796:	3ba4      	subs	r3, #164	; 0xa4
 8008798:	b29b      	uxth	r3, r3
 800879a:	b219      	sxth	r1, r3
 800879c:	4b34      	ldr	r3, [pc, #208]	; (8008870 <SX1276OnDio0Irq+0x448>)
 800879e:	2262      	movs	r2, #98	; 0x62
 80087a0:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80087a2:	2013      	movs	r0, #19
 80087a4:	f7ff fc70 	bl	8008088 <SX1276Read>
 80087a8:	0003      	movs	r3, r0
 80087aa:	0019      	movs	r1, r3
 80087ac:	4b30      	ldr	r3, [pc, #192]	; (8008870 <SX1276OnDio0Irq+0x448>)
 80087ae:	2264      	movs	r2, #100	; 0x64
 80087b0:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 80087b2:	2010      	movs	r0, #16
 80087b4:	f7ff fc68 	bl	8008088 <SX1276Read>
 80087b8:	0003      	movs	r3, r0
 80087ba:	0019      	movs	r1, r3
 80087bc:	200d      	movs	r0, #13
 80087be:	f7ff fc4f 	bl	8008060 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80087c2:	4b2b      	ldr	r3, [pc, #172]	; (8008870 <SX1276OnDio0Irq+0x448>)
 80087c4:	2264      	movs	r2, #100	; 0x64
 80087c6:	5c9a      	ldrb	r2, [r3, r2]
 80087c8:	4b2a      	ldr	r3, [pc, #168]	; (8008874 <SX1276OnDio0Irq+0x44c>)
 80087ca:	0011      	movs	r1, r2
 80087cc:	0018      	movs	r0, r3
 80087ce:	f7ff fd07 	bl	80081e0 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80087d2:	4b27      	ldr	r3, [pc, #156]	; (8008870 <SX1276OnDio0Irq+0x448>)
 80087d4:	2256      	movs	r2, #86	; 0x56
 80087d6:	5c9b      	ldrb	r3, [r3, r2]
 80087d8:	2201      	movs	r2, #1
 80087da:	4053      	eors	r3, r2
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d002      	beq.n	80087e8 <SX1276OnDio0Irq+0x3c0>
                        SX1276.Settings.State = RF_IDLE;
 80087e2:	4b23      	ldr	r3, [pc, #140]	; (8008870 <SX1276OnDio0Irq+0x448>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 80087e8:	4b23      	ldr	r3, [pc, #140]	; (8008878 <SX1276OnDio0Irq+0x450>)
 80087ea:	0018      	movs	r0, r3
 80087ec:	f012 fca8 	bl	801b140 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80087f0:	4b22      	ldr	r3, [pc, #136]	; (800887c <SX1276OnDio0Irq+0x454>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d017      	beq.n	8008828 <SX1276OnDio0Irq+0x400>
 80087f8:	4b20      	ldr	r3, [pc, #128]	; (800887c <SX1276OnDio0Irq+0x454>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d012      	beq.n	8008828 <SX1276OnDio0Irq+0x400>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8008802:	4b1e      	ldr	r3, [pc, #120]	; (800887c <SX1276OnDio0Irq+0x454>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689c      	ldr	r4, [r3, #8]
 8008808:	4b19      	ldr	r3, [pc, #100]	; (8008870 <SX1276OnDio0Irq+0x448>)
 800880a:	2264      	movs	r2, #100	; 0x64
 800880c:	5c9b      	ldrb	r3, [r3, r2]
 800880e:	b299      	uxth	r1, r3
 8008810:	4b17      	ldr	r3, [pc, #92]	; (8008870 <SX1276OnDio0Irq+0x448>)
 8008812:	2262      	movs	r2, #98	; 0x62
 8008814:	5e9d      	ldrsh	r5, [r3, r2]
 8008816:	4b16      	ldr	r3, [pc, #88]	; (8008870 <SX1276OnDio0Irq+0x448>)
 8008818:	2260      	movs	r2, #96	; 0x60
 800881a:	569b      	ldrsb	r3, [r3, r2]
 800881c:	4815      	ldr	r0, [pc, #84]	; (8008874 <SX1276OnDio0Irq+0x44c>)
 800881e:	002a      	movs	r2, r5
 8008820:	47a0      	blx	r4
                break;
 8008822:	e001      	b.n	8008828 <SX1276OnDio0Irq+0x400>
                        break;
 8008824:	46c0      	nop			; (mov r8, r8)
 8008826:	e01f      	b.n	8008868 <SX1276OnDio0Irq+0x440>
                break;
 8008828:	46c0      	nop			; (mov r8, r8)
            break;
 800882a:	e01d      	b.n	8008868 <SX1276OnDio0Irq+0x440>
            TimerStop( &TxTimeoutTimer );
 800882c:	4b14      	ldr	r3, [pc, #80]	; (8008880 <SX1276OnDio0Irq+0x458>)
 800882e:	0018      	movs	r0, r3
 8008830:	f012 fc86 	bl	801b140 <TimerStop>
            switch( SX1276.Settings.Modem )
 8008834:	4b0e      	ldr	r3, [pc, #56]	; (8008870 <SX1276OnDio0Irq+0x448>)
 8008836:	795b      	ldrb	r3, [r3, #5]
 8008838:	2b01      	cmp	r3, #1
 800883a:	d103      	bne.n	8008844 <SX1276OnDio0Irq+0x41c>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800883c:	2108      	movs	r1, #8
 800883e:	2012      	movs	r0, #18
 8008840:	f7ff fc0e 	bl	8008060 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8008844:	4b0a      	ldr	r3, [pc, #40]	; (8008870 <SX1276OnDio0Irq+0x448>)
 8008846:	2200      	movs	r2, #0
 8008848:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800884a:	4b0c      	ldr	r3, [pc, #48]	; (800887c <SX1276OnDio0Irq+0x454>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d008      	beq.n	8008864 <SX1276OnDio0Irq+0x43c>
 8008852:	4b0a      	ldr	r3, [pc, #40]	; (800887c <SX1276OnDio0Irq+0x454>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d003      	beq.n	8008864 <SX1276OnDio0Irq+0x43c>
                    RadioEvents->TxDone( );
 800885c:	4b07      	ldr	r3, [pc, #28]	; (800887c <SX1276OnDio0Irq+0x454>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4798      	blx	r3
                break;
 8008864:	46c0      	nop			; (mov r8, r8)
            break;
 8008866:	46c0      	nop			; (mov r8, r8)
    }
}
 8008868:	46c0      	nop			; (mov r8, r8)
 800886a:	46bd      	mov	sp, r7
 800886c:	b004      	add	sp, #16
 800886e:	bdb0      	pop	{r4, r5, r7, pc}
 8008870:	200015c8 	.word	0x200015c8
 8008874:	20000424 	.word	0x20000424
 8008878:	20001630 	.word	0x20001630
 800887c:	20000420 	.word	0x20000420
 8008880:	20001598 	.word	0x20001598

08008884 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void* context )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 800888c:	4b63      	ldr	r3, [pc, #396]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 800888e:	791b      	ldrb	r3, [r3, #4]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d003      	beq.n	800889c <SX1276OnDio1Irq+0x18>
 8008894:	2b02      	cmp	r3, #2
 8008896:	d100      	bne.n	800889a <SX1276OnDio1Irq+0x16>
 8008898:	e07c      	b.n	8008994 <SX1276OnDio1Irq+0x110>
            default:
                break;
            }
            break;
        default:
            break;
 800889a:	e0ba      	b.n	8008a12 <SX1276OnDio1Irq+0x18e>
            switch( SX1276.Settings.Modem )
 800889c:	4b5f      	ldr	r3, [pc, #380]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 800889e:	795b      	ldrb	r3, [r3, #5]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <SX1276OnDio1Irq+0x26>
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d05b      	beq.n	8008960 <SX1276OnDio1Irq+0xdc>
                break;
 80088a8:	e073      	b.n	8008992 <SX1276OnDio1Irq+0x10e>
                TimerStop( &RxTimeoutSyncWord );
 80088aa:	4b5d      	ldr	r3, [pc, #372]	; (8008a20 <SX1276OnDio1Irq+0x19c>)
 80088ac:	0018      	movs	r0, r3
 80088ae:	f012 fc47 	bl	801b140 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80088b2:	4b5a      	ldr	r3, [pc, #360]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80088b4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d118      	bne.n	80088ec <SX1276OnDio1Irq+0x68>
 80088ba:	4b58      	ldr	r3, [pc, #352]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80088bc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d114      	bne.n	80088ec <SX1276OnDio1Irq+0x68>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80088c2:	4b56      	ldr	r3, [pc, #344]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80088c4:	2222      	movs	r2, #34	; 0x22
 80088c6:	5c9b      	ldrb	r3, [r3, r2]
 80088c8:	2201      	movs	r2, #1
 80088ca:	4053      	eors	r3, r2
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d005      	beq.n	80088de <SX1276OnDio1Irq+0x5a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80088d2:	4b54      	ldr	r3, [pc, #336]	; (8008a24 <SX1276OnDio1Irq+0x1a0>)
 80088d4:	2101      	movs	r1, #1
 80088d6:	0018      	movs	r0, r3
 80088d8:	f7ff fc82 	bl	80081e0 <SX1276ReadFifo>
 80088dc:	e006      	b.n	80088ec <SX1276OnDio1Irq+0x68>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80088de:	2032      	movs	r0, #50	; 0x32
 80088e0:	f7ff fbd2 	bl	8008088 <SX1276Read>
 80088e4:	0003      	movs	r3, r0
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	4b4c      	ldr	r3, [pc, #304]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80088ea:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80088ec:	4b4b      	ldr	r3, [pc, #300]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80088ee:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80088f0:	001a      	movs	r2, r3
 80088f2:	4b4a      	ldr	r3, [pc, #296]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80088f4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80088f6:	1ad3      	subs	r3, r2, r3
 80088f8:	4a48      	ldr	r2, [pc, #288]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80088fa:	213e      	movs	r1, #62	; 0x3e
 80088fc:	5c52      	ldrb	r2, [r2, r1]
 80088fe:	4293      	cmp	r3, r2
 8008900:	db19      	blt.n	8008936 <SX1276OnDio1Irq+0xb2>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8008902:	4b46      	ldr	r3, [pc, #280]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 8008904:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008906:	001a      	movs	r2, r3
 8008908:	4b47      	ldr	r3, [pc, #284]	; (8008a28 <SX1276OnDio1Irq+0x1a4>)
 800890a:	18d0      	adds	r0, r2, r3
 800890c:	4b43      	ldr	r3, [pc, #268]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 800890e:	223e      	movs	r2, #62	; 0x3e
 8008910:	5c9b      	ldrb	r3, [r3, r2]
 8008912:	3b01      	subs	r3, #1
 8008914:	b2db      	uxtb	r3, r3
 8008916:	0019      	movs	r1, r3
 8008918:	f7ff fc62 	bl	80081e0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 800891c:	4b3f      	ldr	r3, [pc, #252]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 800891e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8008920:	4b3e      	ldr	r3, [pc, #248]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 8008922:	213e      	movs	r1, #62	; 0x3e
 8008924:	5c5b      	ldrb	r3, [r3, r1]
 8008926:	b29b      	uxth	r3, r3
 8008928:	18d3      	adds	r3, r2, r3
 800892a:	b29b      	uxth	r3, r3
 800892c:	3b01      	subs	r3, #1
 800892e:	b29a      	uxth	r2, r3
 8008930:	4b3a      	ldr	r3, [pc, #232]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 8008932:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8008934:	e02d      	b.n	8008992 <SX1276OnDio1Irq+0x10e>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008936:	4b39      	ldr	r3, [pc, #228]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 8008938:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800893a:	001a      	movs	r2, r3
 800893c:	4b3a      	ldr	r3, [pc, #232]	; (8008a28 <SX1276OnDio1Irq+0x1a4>)
 800893e:	18d0      	adds	r0, r2, r3
 8008940:	4b36      	ldr	r3, [pc, #216]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 8008942:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8008944:	b2da      	uxtb	r2, r3
 8008946:	4b35      	ldr	r3, [pc, #212]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 8008948:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800894a:	b2db      	uxtb	r3, r3
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	b2db      	uxtb	r3, r3
 8008950:	0019      	movs	r1, r3
 8008952:	f7ff fc45 	bl	80081e0 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008956:	4b31      	ldr	r3, [pc, #196]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 8008958:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800895a:	4b30      	ldr	r3, [pc, #192]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 800895c:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 800895e:	e018      	b.n	8008992 <SX1276OnDio1Irq+0x10e>
                TimerStop( &RxTimeoutTimer );
 8008960:	4b32      	ldr	r3, [pc, #200]	; (8008a2c <SX1276OnDio1Irq+0x1a8>)
 8008962:	0018      	movs	r0, r3
 8008964:	f012 fbec 	bl	801b140 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8008968:	2180      	movs	r1, #128	; 0x80
 800896a:	2012      	movs	r0, #18
 800896c:	f7ff fb78 	bl	8008060 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8008970:	4b2a      	ldr	r3, [pc, #168]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 8008972:	2200      	movs	r2, #0
 8008974:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008976:	4b2e      	ldr	r3, [pc, #184]	; (8008a30 <SX1276OnDio1Irq+0x1ac>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d008      	beq.n	8008990 <SX1276OnDio1Irq+0x10c>
 800897e:	4b2c      	ldr	r3, [pc, #176]	; (8008a30 <SX1276OnDio1Irq+0x1ac>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d003      	beq.n	8008990 <SX1276OnDio1Irq+0x10c>
                    RadioEvents->RxTimeout( );
 8008988:	4b29      	ldr	r3, [pc, #164]	; (8008a30 <SX1276OnDio1Irq+0x1ac>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	4798      	blx	r3
                break;
 8008990:	46c0      	nop			; (mov r8, r8)
            break;
 8008992:	e03e      	b.n	8008a12 <SX1276OnDio1Irq+0x18e>
            switch( SX1276.Settings.Modem )
 8008994:	4b21      	ldr	r3, [pc, #132]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 8008996:	795b      	ldrb	r3, [r3, #5]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <SX1276OnDio1Irq+0x11e>
 800899c:	2b01      	cmp	r3, #1
 800899e:	d036      	beq.n	8008a0e <SX1276OnDio1Irq+0x18a>
                break;
 80089a0:	e036      	b.n	8008a10 <SX1276OnDio1Irq+0x18c>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80089a2:	4b1e      	ldr	r3, [pc, #120]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80089a4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80089a6:	001a      	movs	r2, r3
 80089a8:	4b1c      	ldr	r3, [pc, #112]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80089aa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	4a1b      	ldr	r2, [pc, #108]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80089b0:	213f      	movs	r1, #63	; 0x3f
 80089b2:	5c52      	ldrb	r2, [r2, r1]
 80089b4:	4293      	cmp	r3, r2
 80089b6:	dd15      	ble.n	80089e4 <SX1276OnDio1Irq+0x160>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80089b8:	4b18      	ldr	r3, [pc, #96]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80089ba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80089bc:	001a      	movs	r2, r3
 80089be:	4b1a      	ldr	r3, [pc, #104]	; (8008a28 <SX1276OnDio1Irq+0x1a4>)
 80089c0:	18d0      	adds	r0, r2, r3
 80089c2:	4b16      	ldr	r3, [pc, #88]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80089c4:	223f      	movs	r2, #63	; 0x3f
 80089c6:	5c9b      	ldrb	r3, [r3, r2]
 80089c8:	0019      	movs	r1, r3
 80089ca:	f7ff fbf7 	bl	80081bc <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80089ce:	4b13      	ldr	r3, [pc, #76]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80089d0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80089d2:	4b12      	ldr	r3, [pc, #72]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80089d4:	213f      	movs	r1, #63	; 0x3f
 80089d6:	5c5b      	ldrb	r3, [r3, r1]
 80089d8:	b29b      	uxth	r3, r3
 80089da:	18d3      	adds	r3, r2, r3
 80089dc:	b29a      	uxth	r2, r3
 80089de:	4b0f      	ldr	r3, [pc, #60]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80089e0:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 80089e2:	e015      	b.n	8008a10 <SX1276OnDio1Irq+0x18c>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80089e4:	4b0d      	ldr	r3, [pc, #52]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80089e6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80089e8:	001a      	movs	r2, r3
 80089ea:	4b0f      	ldr	r3, [pc, #60]	; (8008a28 <SX1276OnDio1Irq+0x1a4>)
 80089ec:	18d0      	adds	r0, r2, r3
 80089ee:	4b0b      	ldr	r3, [pc, #44]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80089f0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 80089f6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	0019      	movs	r1, r3
 8008a00:	f7ff fbdc 	bl	80081bc <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8008a04:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 8008a06:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8008a08:	4b04      	ldr	r3, [pc, #16]	; (8008a1c <SX1276OnDio1Irq+0x198>)
 8008a0a:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8008a0c:	e000      	b.n	8008a10 <SX1276OnDio1Irq+0x18c>
                break;
 8008a0e:	46c0      	nop			; (mov r8, r8)
            break;
 8008a10:	46c0      	nop			; (mov r8, r8)
    }
}
 8008a12:	46c0      	nop			; (mov r8, r8)
 8008a14:	46bd      	mov	sp, r7
 8008a16:	b002      	add	sp, #8
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	46c0      	nop			; (mov r8, r8)
 8008a1c:	200015c8 	.word	0x200015c8
 8008a20:	200015b0 	.word	0x200015b0
 8008a24:	20001602 	.word	0x20001602
 8008a28:	20000424 	.word	0x20000424
 8008a2c:	20001630 	.word	0x20001630
 8008a30:	20000420 	.word	0x20000420

08008a34 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void* context )
{
 8008a34:	b590      	push	{r4, r7, lr}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
    uint32_t afcChannel = 0;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	617b      	str	r3, [r7, #20]

    switch( SX1276.Settings.State )
 8008a40:	4b5c      	ldr	r3, [pc, #368]	; (8008bb4 <SX1276OnDio2Irq+0x180>)
 8008a42:	791b      	ldrb	r3, [r3, #4]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d003      	beq.n	8008a50 <SX1276OnDio2Irq+0x1c>
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d100      	bne.n	8008a4e <SX1276OnDio2Irq+0x1a>
 8008a4c:	e083      	b.n	8008b56 <SX1276OnDio2Irq+0x122>
            default:
                break;
            }
            break;
        default:
            break;
 8008a4e:	e0ad      	b.n	8008bac <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 8008a50:	4b58      	ldr	r3, [pc, #352]	; (8008bb4 <SX1276OnDio2Irq+0x180>)
 8008a52:	795b      	ldrb	r3, [r3, #5]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <SX1276OnDio2Irq+0x2a>
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d058      	beq.n	8008b0e <SX1276OnDio2Irq+0xda>
                break;
 8008a5c:	e07a      	b.n	8008b54 <SX1276OnDio2Irq+0x120>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8008a5e:	4b55      	ldr	r3, [pc, #340]	; (8008bb4 <SX1276OnDio2Irq+0x180>)
 8008a60:	2230      	movs	r2, #48	; 0x30
 8008a62:	2101      	movs	r1, #1
 8008a64:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8008a66:	4b53      	ldr	r3, [pc, #332]	; (8008bb4 <SX1276OnDio2Irq+0x180>)
 8008a68:	2230      	movs	r2, #48	; 0x30
 8008a6a:	5c9b      	ldrb	r3, [r3, r2]
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d16e      	bne.n	8008b4e <SX1276OnDio2Irq+0x11a>
 8008a70:	4b50      	ldr	r3, [pc, #320]	; (8008bb4 <SX1276OnDio2Irq+0x180>)
 8008a72:	2231      	movs	r2, #49	; 0x31
 8008a74:	5c9b      	ldrb	r3, [r3, r2]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d169      	bne.n	8008b4e <SX1276OnDio2Irq+0x11a>
                    TimerStop( &RxTimeoutSyncWord );
 8008a7a:	4b4f      	ldr	r3, [pc, #316]	; (8008bb8 <SX1276OnDio2Irq+0x184>)
 8008a7c:	0018      	movs	r0, r3
 8008a7e:	f012 fb5f 	bl	801b140 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8008a82:	4b4c      	ldr	r3, [pc, #304]	; (8008bb4 <SX1276OnDio2Irq+0x180>)
 8008a84:	2231      	movs	r2, #49	; 0x31
 8008a86:	2101      	movs	r1, #1
 8008a88:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8008a8a:	2011      	movs	r0, #17
 8008a8c:	f7ff fafc 	bl	8008088 <SX1276Read>
 8008a90:	0003      	movs	r3, r0
 8008a92:	085b      	lsrs	r3, r3, #1
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	425b      	negs	r3, r3
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	b259      	sxtb	r1, r3
 8008a9c:	4b45      	ldr	r3, [pc, #276]	; (8008bb4 <SX1276OnDio2Irq+0x180>)
 8008a9e:	2232      	movs	r2, #50	; 0x32
 8008aa0:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8008aa2:	201b      	movs	r0, #27
 8008aa4:	f7ff faf0 	bl	8008088 <SX1276Read>
 8008aa8:	0003      	movs	r3, r0
 8008aaa:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8008aac:	201c      	movs	r0, #28
 8008aae:	f7ff faeb 	bl	8008088 <SX1276Read>
 8008ab2:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8008ab4:	4323      	orrs	r3, r4
 8008ab6:	617b      	str	r3, [r7, #20]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	0a1b      	lsrs	r3, r3, #8
 8008abc:	613b      	str	r3, [r7, #16]
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	021b      	lsls	r3, r3, #8
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	60fb      	str	r3, [r7, #12]
 8008ac8:	6939      	ldr	r1, [r7, #16]
 8008aca:	000b      	movs	r3, r1
 8008acc:	015b      	lsls	r3, r3, #5
 8008ace:	1a5b      	subs	r3, r3, r1
 8008ad0:	019a      	lsls	r2, r3, #6
 8008ad2:	1ad2      	subs	r2, r2, r3
 8008ad4:	00d2      	lsls	r2, r2, #3
 8008ad6:	1850      	adds	r0, r2, r1
 8008ad8:	68f9      	ldr	r1, [r7, #12]
 8008ada:	000b      	movs	r3, r1
 8008adc:	015b      	lsls	r3, r3, #5
 8008ade:	1a5b      	subs	r3, r3, r1
 8008ae0:	019a      	lsls	r2, r3, #6
 8008ae2:	1ad2      	subs	r2, r2, r3
 8008ae4:	00d2      	lsls	r2, r2, #3
 8008ae6:	1853      	adds	r3, r2, r1
 8008ae8:	3380      	adds	r3, #128	; 0x80
 8008aea:	0a1b      	lsrs	r3, r3, #8
 8008aec:	18c3      	adds	r3, r0, r3
 8008aee:	001a      	movs	r2, r3
 8008af0:	4b30      	ldr	r3, [pc, #192]	; (8008bb4 <SX1276OnDio2Irq+0x180>)
 8008af2:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8008af4:	200c      	movs	r0, #12
 8008af6:	f7ff fac7 	bl	8008088 <SX1276Read>
 8008afa:	0003      	movs	r3, r0
 8008afc:	095b      	lsrs	r3, r3, #5
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2207      	movs	r2, #7
 8008b02:	4013      	ands	r3, r2
 8008b04:	b2d9      	uxtb	r1, r3
 8008b06:	4b2b      	ldr	r3, [pc, #172]	; (8008bb4 <SX1276OnDio2Irq+0x180>)
 8008b08:	2238      	movs	r2, #56	; 0x38
 8008b0a:	5499      	strb	r1, [r3, r2]
                break;
 8008b0c:	e01f      	b.n	8008b4e <SX1276OnDio2Irq+0x11a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008b0e:	4b29      	ldr	r3, [pc, #164]	; (8008bb4 <SX1276OnDio2Irq+0x180>)
 8008b10:	2253      	movs	r2, #83	; 0x53
 8008b12:	5c9b      	ldrb	r3, [r3, r2]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d01c      	beq.n	8008b52 <SX1276OnDio2Irq+0x11e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8008b18:	2102      	movs	r1, #2
 8008b1a:	2012      	movs	r0, #18
 8008b1c:	f7ff faa0 	bl	8008060 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8008b20:	4b26      	ldr	r3, [pc, #152]	; (8008bbc <SX1276OnDio2Irq+0x188>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d014      	beq.n	8008b52 <SX1276OnDio2Irq+0x11e>
 8008b28:	4b24      	ldr	r3, [pc, #144]	; (8008bbc <SX1276OnDio2Irq+0x188>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00f      	beq.n	8008b52 <SX1276OnDio2Irq+0x11e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8008b32:	4b22      	ldr	r3, [pc, #136]	; (8008bbc <SX1276OnDio2Irq+0x188>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	695c      	ldr	r4, [r3, #20]
 8008b38:	201c      	movs	r0, #28
 8008b3a:	f7ff faa5 	bl	8008088 <SX1276Read>
 8008b3e:	0003      	movs	r3, r0
 8008b40:	001a      	movs	r2, r3
 8008b42:	233f      	movs	r3, #63	; 0x3f
 8008b44:	4013      	ands	r3, r2
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	0018      	movs	r0, r3
 8008b4a:	47a0      	blx	r4
                break;
 8008b4c:	e001      	b.n	8008b52 <SX1276OnDio2Irq+0x11e>
                break;
 8008b4e:	46c0      	nop			; (mov r8, r8)
 8008b50:	e02c      	b.n	8008bac <SX1276OnDio2Irq+0x178>
                break;
 8008b52:	46c0      	nop			; (mov r8, r8)
            break;
 8008b54:	e02a      	b.n	8008bac <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 8008b56:	4b17      	ldr	r3, [pc, #92]	; (8008bb4 <SX1276OnDio2Irq+0x180>)
 8008b58:	795b      	ldrb	r3, [r3, #5]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d022      	beq.n	8008ba4 <SX1276OnDio2Irq+0x170>
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d000      	beq.n	8008b64 <SX1276OnDio2Irq+0x130>
                break;
 8008b62:	e022      	b.n	8008baa <SX1276OnDio2Irq+0x176>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008b64:	4b13      	ldr	r3, [pc, #76]	; (8008bb4 <SX1276OnDio2Irq+0x180>)
 8008b66:	2253      	movs	r2, #83	; 0x53
 8008b68:	5c9b      	ldrb	r3, [r3, r2]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d01c      	beq.n	8008ba8 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8008b6e:	2102      	movs	r1, #2
 8008b70:	2012      	movs	r0, #18
 8008b72:	f7ff fa75 	bl	8008060 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8008b76:	4b11      	ldr	r3, [pc, #68]	; (8008bbc <SX1276OnDio2Irq+0x188>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d014      	beq.n	8008ba8 <SX1276OnDio2Irq+0x174>
 8008b7e:	4b0f      	ldr	r3, [pc, #60]	; (8008bbc <SX1276OnDio2Irq+0x188>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00f      	beq.n	8008ba8 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8008b88:	4b0c      	ldr	r3, [pc, #48]	; (8008bbc <SX1276OnDio2Irq+0x188>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	695c      	ldr	r4, [r3, #20]
 8008b8e:	201c      	movs	r0, #28
 8008b90:	f7ff fa7a 	bl	8008088 <SX1276Read>
 8008b94:	0003      	movs	r3, r0
 8008b96:	001a      	movs	r2, r3
 8008b98:	233f      	movs	r3, #63	; 0x3f
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	0018      	movs	r0, r3
 8008ba0:	47a0      	blx	r4
                break;
 8008ba2:	e001      	b.n	8008ba8 <SX1276OnDio2Irq+0x174>
                break;
 8008ba4:	46c0      	nop			; (mov r8, r8)
 8008ba6:	e000      	b.n	8008baa <SX1276OnDio2Irq+0x176>
                break;
 8008ba8:	46c0      	nop			; (mov r8, r8)
            break;
 8008baa:	46c0      	nop			; (mov r8, r8)
    }
}
 8008bac:	46c0      	nop			; (mov r8, r8)
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	b007      	add	sp, #28
 8008bb2:	bd90      	pop	{r4, r7, pc}
 8008bb4:	200015c8 	.word	0x200015c8
 8008bb8:	200015b0 	.word	0x200015b0
 8008bbc:	20000420 	.word	0x20000420

08008bc0 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void* context )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8008bc8:	4b1e      	ldr	r3, [pc, #120]	; (8008c44 <SX1276OnDio3Irq+0x84>)
 8008bca:	795b      	ldrb	r3, [r3, #5]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d031      	beq.n	8008c34 <SX1276OnDio3Irq+0x74>
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d000      	beq.n	8008bd6 <SX1276OnDio3Irq+0x16>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8008bd4:	e031      	b.n	8008c3a <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8008bd6:	2012      	movs	r0, #18
 8008bd8:	f7ff fa56 	bl	8008088 <SX1276Read>
 8008bdc:	0003      	movs	r3, r0
 8008bde:	001a      	movs	r2, r3
 8008be0:	2301      	movs	r3, #1
 8008be2:	4013      	ands	r3, r2
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d112      	bne.n	8008c0e <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8008be8:	2105      	movs	r1, #5
 8008bea:	2012      	movs	r0, #18
 8008bec:	f7ff fa38 	bl	8008060 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008bf0:	4b15      	ldr	r3, [pc, #84]	; (8008c48 <SX1276OnDio3Irq+0x88>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d01f      	beq.n	8008c38 <SX1276OnDio3Irq+0x78>
 8008bf8:	4b13      	ldr	r3, [pc, #76]	; (8008c48 <SX1276OnDio3Irq+0x88>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d01a      	beq.n	8008c38 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 8008c02:	4b11      	ldr	r3, [pc, #68]	; (8008c48 <SX1276OnDio3Irq+0x88>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	2001      	movs	r0, #1
 8008c0a:	4798      	blx	r3
        break;
 8008c0c:	e014      	b.n	8008c38 <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8008c0e:	2104      	movs	r1, #4
 8008c10:	2012      	movs	r0, #18
 8008c12:	f7ff fa25 	bl	8008060 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008c16:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <SX1276OnDio3Irq+0x88>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00c      	beq.n	8008c38 <SX1276OnDio3Irq+0x78>
 8008c1e:	4b0a      	ldr	r3, [pc, #40]	; (8008c48 <SX1276OnDio3Irq+0x88>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d007      	beq.n	8008c38 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 8008c28:	4b07      	ldr	r3, [pc, #28]	; (8008c48 <SX1276OnDio3Irq+0x88>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	2000      	movs	r0, #0
 8008c30:	4798      	blx	r3
        break;
 8008c32:	e001      	b.n	8008c38 <SX1276OnDio3Irq+0x78>
        break;
 8008c34:	46c0      	nop			; (mov r8, r8)
 8008c36:	e000      	b.n	8008c3a <SX1276OnDio3Irq+0x7a>
        break;
 8008c38:	46c0      	nop			; (mov r8, r8)
    }
}
 8008c3a:	46c0      	nop			; (mov r8, r8)
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	b002      	add	sp, #8
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	46c0      	nop			; (mov r8, r8)
 8008c44:	200015c8 	.word	0x200015c8
 8008c48:	20000420 	.word	0x20000420

08008c4c <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void* context )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8008c54:	4b0b      	ldr	r3, [pc, #44]	; (8008c84 <SX1276OnDio4Irq+0x38>)
 8008c56:	795b      	ldrb	r3, [r3, #5]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <SX1276OnDio4Irq+0x16>
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d00a      	beq.n	8008c76 <SX1276OnDio4Irq+0x2a>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8008c60:	e00c      	b.n	8008c7c <SX1276OnDio4Irq+0x30>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8008c62:	4b08      	ldr	r3, [pc, #32]	; (8008c84 <SX1276OnDio4Irq+0x38>)
 8008c64:	2230      	movs	r2, #48	; 0x30
 8008c66:	5c9b      	ldrb	r3, [r3, r2]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d106      	bne.n	8008c7a <SX1276OnDio4Irq+0x2e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8008c6c:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <SX1276OnDio4Irq+0x38>)
 8008c6e:	2230      	movs	r2, #48	; 0x30
 8008c70:	2101      	movs	r1, #1
 8008c72:	5499      	strb	r1, [r3, r2]
        break;
 8008c74:	e001      	b.n	8008c7a <SX1276OnDio4Irq+0x2e>
        break;
 8008c76:	46c0      	nop			; (mov r8, r8)
 8008c78:	e000      	b.n	8008c7c <SX1276OnDio4Irq+0x30>
        break;
 8008c7a:	46c0      	nop			; (mov r8, r8)
    }
}
 8008c7c:	46c0      	nop			; (mov r8, r8)
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	b002      	add	sp, #8
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	200015c8 	.word	0x200015c8

08008c88 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008c8e:	1dfb      	adds	r3, r7, #7
 8008c90:	2200      	movs	r2, #0
 8008c92:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008c94:	4b0b      	ldr	r3, [pc, #44]	; (8008cc4 <HAL_Init+0x3c>)
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	4b0a      	ldr	r3, [pc, #40]	; (8008cc4 <HAL_Init+0x3c>)
 8008c9a:	2102      	movs	r1, #2
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008ca0:	2003      	movs	r0, #3
 8008ca2:	f7fc fa24 	bl	80050ee <HAL_InitTick>
 8008ca6:	1e03      	subs	r3, r0, #0
 8008ca8:	d003      	beq.n	8008cb2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8008caa:	1dfb      	adds	r3, r7, #7
 8008cac:	2201      	movs	r2, #1
 8008cae:	701a      	strb	r2, [r3, #0]
 8008cb0:	e001      	b.n	8008cb6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008cb2:	f7fc fa31 	bl	8005118 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008cb6:	1dfb      	adds	r3, r7, #7
 8008cb8:	781b      	ldrb	r3, [r3, #0]
}
 8008cba:	0018      	movs	r0, r3
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	b002      	add	sp, #8
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	46c0      	nop			; (mov r8, r8)
 8008cc4:	40022000 	.word	0x40022000

08008cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	af00      	add	r7, sp, #0
  uwTick++;
 8008ccc:	4b03      	ldr	r3, [pc, #12]	; (8008cdc <HAL_IncTick+0x14>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	4b02      	ldr	r3, [pc, #8]	; (8008cdc <HAL_IncTick+0x14>)
 8008cd4:	601a      	str	r2, [r3, #0]
}
 8008cd6:	46c0      	nop			; (mov r8, r8)
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	20001648 	.word	0x20001648

08008ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8008ce4:	4b02      	ldr	r3, [pc, #8]	; (8008cf0 <HAL_GetTick+0x10>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
}
 8008ce8:	0018      	movs	r0, r3
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	46c0      	nop			; (mov r8, r8)
 8008cf0:	20001648 	.word	0x20001648

08008cf4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8008cf8:	4b04      	ldr	r3, [pc, #16]	; (8008d0c <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	4b03      	ldr	r3, [pc, #12]	; (8008d0c <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8008cfe:	2101      	movs	r1, #1
 8008d00:	430a      	orrs	r2, r1
 8008d02:	605a      	str	r2, [r3, #4]
}
 8008d04:	46c0      	nop			; (mov r8, r8)
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	46c0      	nop			; (mov r8, r8)
 8008d0c:	40015800 	.word	0x40015800

08008d10 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8008d14:	4b04      	ldr	r3, [pc, #16]	; (8008d28 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8008d16:	685a      	ldr	r2, [r3, #4]
 8008d18:	4b03      	ldr	r3, [pc, #12]	; (8008d28 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8008d1a:	2102      	movs	r1, #2
 8008d1c:	430a      	orrs	r2, r1
 8008d1e:	605a      	str	r2, [r3, #4]
}
 8008d20:	46c0      	nop			; (mov r8, r8)
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	46c0      	nop			; (mov r8, r8)
 8008d28:	40015800 	.word	0x40015800

08008d2c <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8008d30:	4b04      	ldr	r3, [pc, #16]	; (8008d44 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	4b03      	ldr	r3, [pc, #12]	; (8008d44 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8008d36:	2104      	movs	r1, #4
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	605a      	str	r2, [r3, #4]
}
 8008d3c:	46c0      	nop			; (mov r8, r8)
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	46c0      	nop			; (mov r8, r8)
 8008d44:	40015800 	.word	0x40015800

08008d48 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d101      	bne.n	8008d5a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e159      	b.n	800900e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10a      	bne.n	8008d78 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2250      	movs	r2, #80	; 0x50
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	0018      	movs	r0, r3
 8008d74:	f000 f9f8 	bl	8009168 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d7c:	2210      	movs	r2, #16
 8008d7e:	4013      	ands	r3, r2
 8008d80:	2b10      	cmp	r3, #16
 8008d82:	d005      	beq.n	8008d90 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	2204      	movs	r2, #4
 8008d8c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8008d8e:	d00b      	beq.n	8008da8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d94:	2210      	movs	r2, #16
 8008d96:	431a      	orrs	r2, r3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2250      	movs	r2, #80	; 0x50
 8008da0:	2100      	movs	r1, #0
 8008da2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e132      	b.n	800900e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dac:	4a9a      	ldr	r2, [pc, #616]	; (8009018 <HAL_ADC_Init+0x2d0>)
 8008dae:	4013      	ands	r3, r2
 8008db0:	2202      	movs	r2, #2
 8008db2:	431a      	orrs	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	2203      	movs	r2, #3
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d108      	bne.n	8008dd8 <HAL_ADC_Init+0x90>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	4013      	ands	r3, r2
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d101      	bne.n	8008dd8 <HAL_ADC_Init+0x90>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e000      	b.n	8008dda <HAL_ADC_Init+0x92>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d149      	bne.n	8008e72 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685a      	ldr	r2, [r3, #4]
 8008de2:	23c0      	movs	r3, #192	; 0xc0
 8008de4:	061b      	lsls	r3, r3, #24
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d00b      	beq.n	8008e02 <HAL_ADC_Init+0xba>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	2380      	movs	r3, #128	; 0x80
 8008df0:	05db      	lsls	r3, r3, #23
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d005      	beq.n	8008e02 <HAL_ADC_Init+0xba>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	2380      	movs	r3, #128	; 0x80
 8008dfc:	061b      	lsls	r3, r3, #24
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d111      	bne.n	8008e26 <HAL_ADC_Init+0xde>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	691a      	ldr	r2, [r3, #16]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	0092      	lsls	r2, r2, #2
 8008e0e:	0892      	lsrs	r2, r2, #2
 8008e10:	611a      	str	r2, [r3, #16]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6919      	ldr	r1, [r3, #16]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	611a      	str	r2, [r3, #16]
 8008e24:	e014      	b.n	8008e50 <HAL_ADC_Init+0x108>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	691a      	ldr	r2, [r3, #16]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	0092      	lsls	r2, r2, #2
 8008e32:	0892      	lsrs	r2, r2, #2
 8008e34:	611a      	str	r2, [r3, #16]
 8008e36:	4b79      	ldr	r3, [pc, #484]	; (800901c <HAL_ADC_Init+0x2d4>)
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	4b78      	ldr	r3, [pc, #480]	; (800901c <HAL_ADC_Init+0x2d4>)
 8008e3c:	4978      	ldr	r1, [pc, #480]	; (8009020 <HAL_ADC_Init+0x2d8>)
 8008e3e:	400a      	ands	r2, r1
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	4b76      	ldr	r3, [pc, #472]	; (800901c <HAL_ADC_Init+0x2d4>)
 8008e44:	6819      	ldr	r1, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	4b74      	ldr	r3, [pc, #464]	; (800901c <HAL_ADC_Init+0x2d4>)
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68da      	ldr	r2, [r3, #12]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2118      	movs	r1, #24
 8008e5c:	438a      	bics	r2, r1
 8008e5e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68d9      	ldr	r1, [r3, #12]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	689a      	ldr	r2, [r3, #8]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8008e72:	4b6a      	ldr	r3, [pc, #424]	; (800901c <HAL_ADC_Init+0x2d4>)
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	4b69      	ldr	r3, [pc, #420]	; (800901c <HAL_ADC_Init+0x2d4>)
 8008e78:	496a      	ldr	r1, [pc, #424]	; (8009024 <HAL_ADC_Init+0x2dc>)
 8008e7a:	400a      	ands	r2, r1
 8008e7c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8008e7e:	4b67      	ldr	r3, [pc, #412]	; (800901c <HAL_ADC_Init+0x2d4>)
 8008e80:	6819      	ldr	r1, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e86:	065a      	lsls	r2, r3, #25
 8008e88:	4b64      	ldr	r3, [pc, #400]	; (800901c <HAL_ADC_Init+0x2d4>)
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	689a      	ldr	r2, [r3, #8]
 8008e94:	2380      	movs	r3, #128	; 0x80
 8008e96:	055b      	lsls	r3, r3, #21
 8008e98:	4013      	ands	r3, r2
 8008e9a:	d108      	bne.n	8008eae <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	689a      	ldr	r2, [r3, #8]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2180      	movs	r1, #128	; 0x80
 8008ea8:	0549      	lsls	r1, r1, #21
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68da      	ldr	r2, [r3, #12]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	495b      	ldr	r1, [pc, #364]	; (8009028 <HAL_ADC_Init+0x2e0>)
 8008eba:	400a      	ands	r2, r1
 8008ebc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68d9      	ldr	r1, [r3, #12]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d101      	bne.n	8008ed4 <HAL_ADC_Init+0x18c>
 8008ed0:	2304      	movs	r3, #4
 8008ed2:	e000      	b.n	8008ed6 <HAL_ADC_Init+0x18e>
 8008ed4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8008ed6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2020      	movs	r0, #32
 8008edc:	5c1b      	ldrb	r3, [r3, r0]
 8008ede:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8008ee0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	202c      	movs	r0, #44	; 0x2c
 8008ee6:	5c1b      	ldrb	r3, [r3, r0]
 8008ee8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8008eea:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8008ef0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8008ef8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8008f00:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	430a      	orrs	r2, r1
 8008f08:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f0e:	23c2      	movs	r3, #194	; 0xc2
 8008f10:	33ff      	adds	r3, #255	; 0xff
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d00b      	beq.n	8008f2e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68d9      	ldr	r1, [r3, #12]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8008f24:	431a      	orrs	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2221      	movs	r2, #33	; 0x21
 8008f32:	5c9b      	ldrb	r3, [r3, r2]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d11a      	bne.n	8008f6e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2220      	movs	r2, #32
 8008f3c:	5c9b      	ldrb	r3, [r3, r2]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d109      	bne.n	8008f56 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68da      	ldr	r2, [r3, #12]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	2180      	movs	r1, #128	; 0x80
 8008f4e:	0249      	lsls	r1, r1, #9
 8008f50:	430a      	orrs	r2, r1
 8008f52:	60da      	str	r2, [r3, #12]
 8008f54:	e00b      	b.n	8008f6e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f66:	2201      	movs	r2, #1
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d11f      	bne.n	8008fb6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	691a      	ldr	r2, [r3, #16]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	492a      	ldr	r1, [pc, #168]	; (800902c <HAL_ADC_Init+0x2e4>)
 8008f82:	400a      	ands	r2, r1
 8008f84:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	6919      	ldr	r1, [r3, #16]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8008f94:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8008f9a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	691a      	ldr	r2, [r3, #16]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2101      	movs	r1, #1
 8008fb0:	430a      	orrs	r2, r1
 8008fb2:	611a      	str	r2, [r3, #16]
 8008fb4:	e00e      	b.n	8008fd4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d107      	bne.n	8008fd4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	691a      	ldr	r2, [r3, #16]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2101      	movs	r1, #1
 8008fd0:	438a      	bics	r2, r1
 8008fd2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	695a      	ldr	r2, [r3, #20]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2107      	movs	r1, #7
 8008fe0:	438a      	bics	r2, r1
 8008fe2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	6959      	ldr	r1, [r3, #20]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009000:	2203      	movs	r2, #3
 8009002:	4393      	bics	r3, r2
 8009004:	2201      	movs	r2, #1
 8009006:	431a      	orrs	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	0018      	movs	r0, r3
 8009010:	46bd      	mov	sp, r7
 8009012:	b002      	add	sp, #8
 8009014:	bd80      	pop	{r7, pc}
 8009016:	46c0      	nop			; (mov r8, r8)
 8009018:	fffffefd 	.word	0xfffffefd
 800901c:	40012708 	.word	0x40012708
 8009020:	ffc3ffff 	.word	0xffc3ffff
 8009024:	fdffffff 	.word	0xfdffffff
 8009028:	fffe0219 	.word	0xfffe0219
 800902c:	fffffc03 	.word	0xfffffc03

08009030 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8009030:	b5b0      	push	{r4, r5, r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009038:	230f      	movs	r3, #15
 800903a:	18fb      	adds	r3, r7, r3
 800903c:	2200      	movs	r2, #0
 800903e:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e07e      	b.n	8009148 <HAL_ADC_DeInit+0x118>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800904e:	2202      	movs	r2, #2
 8009050:	431a      	orrs	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8009056:	250f      	movs	r5, #15
 8009058:	197c      	adds	r4, r7, r5
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	0018      	movs	r0, r3
 800905e:	f000 facf 	bl	8009600 <ADC_ConversionStop>
 8009062:	0003      	movs	r3, r0
 8009064:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8009066:	197b      	adds	r3, r7, r5
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10e      	bne.n	800908c <HAL_ADC_DeInit+0x5c>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800906e:	250f      	movs	r5, #15
 8009070:	197c      	adds	r4, r7, r5
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	0018      	movs	r0, r3
 8009076:	f000 fa63 	bl	8009540 <ADC_Disable>
 800907a:	0003      	movs	r3, r0
 800907c:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 800907e:	197b      	adds	r3, r7, r5
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d002      	beq.n	800908c <HAL_ADC_DeInit+0x5c>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 800908c:	230f      	movs	r3, #15
 800908e:	18fb      	adds	r3, r7, r3
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d051      	beq.n	800913a <HAL_ADC_DeInit+0x10a>
  {
    
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	492b      	ldr	r1, [pc, #172]	; (8009150 <HAL_ADC_DeInit+0x120>)
 80090a2:	400a      	ands	r2, r1
 80090a4:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
  
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a2a      	ldr	r2, [pc, #168]	; (8009154 <HAL_ADC_DeInit+0x124>)
 80090ac:	601a      	str	r2, [r3, #0]
    
    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	689a      	ldr	r2, [r3, #8]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4927      	ldr	r1, [pc, #156]	; (8009158 <HAL_ADC_DeInit+0x128>)
 80090ba:	400a      	ands	r2, r1
 80090bc:	609a      	str	r2, [r3, #8]
    
    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */
    
    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68da      	ldr	r2, [r3, #12]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4924      	ldr	r1, [pc, #144]	; (800915c <HAL_ADC_DeInit+0x12c>)
 80090ca:	400a      	ands	r2, r1
 80090cc:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
  
    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	691a      	ldr	r2, [r3, #16]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4921      	ldr	r1, [pc, #132]	; (8009160 <HAL_ADC_DeInit+0x130>)
 80090da:	400a      	ands	r2, r1
 80090dc:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
  
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	695a      	ldr	r2, [r3, #20]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2107      	movs	r1, #7
 80090ea:	438a      	bics	r2, r1
 80090ec:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	6a1a      	ldr	r2, [r3, #32]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	491a      	ldr	r1, [pc, #104]	; (8009164 <HAL_ADC_DeInit+0x134>)
 80090fa:	400a      	ands	r2, r1
 80090fc:	621a      	str	r2, [r3, #32]
    
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	22b4      	movs	r2, #180	; 0xb4
 8009104:	589a      	ldr	r2, [r3, r2]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	217f      	movs	r1, #127	; 0x7f
 800910c:	438a      	bics	r2, r1
 800910e:	21b4      	movs	r1, #180	; 0xb4
 8009110:	505a      	str	r2, [r3, r1]
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
  
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	22b4      	movs	r2, #180	; 0xb4
 8009118:	589a      	ldr	r2, [r3, r2]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	217f      	movs	r1, #127	; 0x7f
 8009120:	438a      	bics	r2, r1
 8009122:	21b4      	movs	r1, #180	; 0xb4
 8009124:	505a      	str	r2, [r3, r1]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	0018      	movs	r0, r3
 800912a:	f000 f825 	bl	8009178 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2250      	movs	r2, #80	; 0x50
 800913e:	2100      	movs	r1, #0
 8009140:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8009142:	230f      	movs	r3, #15
 8009144:	18fb      	adds	r3, r7, r3
 8009146:	781b      	ldrb	r3, [r3, #0]
}
 8009148:	0018      	movs	r0, r3
 800914a:	46bd      	mov	sp, r7
 800914c:	b004      	add	sp, #16
 800914e:	bdb0      	pop	{r4, r5, r7, pc}
 8009150:	fffff760 	.word	0xfffff760
 8009154:	0000089f 	.word	0x0000089f
 8009158:	efffffff 	.word	0xefffffff
 800915c:	833e0200 	.word	0x833e0200
 8009160:	3ffffc02 	.word	0x3ffffc02
 8009164:	f000f000 	.word	0xf000f000

08009168 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8009170:	46c0      	nop			; (mov r8, r8)
 8009172:	46bd      	mov	sp, r7
 8009174:	b002      	add	sp, #8
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_ADC_MspDeInit>:
  * @brief  DeInitialize the ADC MSP.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspDeInit must be implemented in the user file.
   */ 
}
 8009180:	46c0      	nop			; (mov r8, r8)
 8009182:	46bd      	mov	sp, r7
 8009184:	b002      	add	sp, #8
 8009186:	bd80      	pop	{r7, pc}

08009188 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8009188:	b590      	push	{r4, r7, lr}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009190:	230f      	movs	r3, #15
 8009192:	18fb      	adds	r3, r7, r3
 8009194:	2200      	movs	r2, #0
 8009196:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	2204      	movs	r2, #4
 80091a0:	4013      	ands	r3, r2
 80091a2:	d138      	bne.n	8009216 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2250      	movs	r2, #80	; 0x50
 80091a8:	5c9b      	ldrb	r3, [r3, r2]
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d101      	bne.n	80091b2 <HAL_ADC_Start+0x2a>
 80091ae:	2302      	movs	r3, #2
 80091b0:	e038      	b.n	8009224 <HAL_ADC_Start+0x9c>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2250      	movs	r2, #80	; 0x50
 80091b6:	2101      	movs	r1, #1
 80091b8:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	69db      	ldr	r3, [r3, #28]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d007      	beq.n	80091d2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80091c2:	230f      	movs	r3, #15
 80091c4:	18fc      	adds	r4, r7, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	0018      	movs	r0, r3
 80091ca:	f000 f959 	bl	8009480 <ADC_Enable>
 80091ce:	0003      	movs	r3, r0
 80091d0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80091d2:	230f      	movs	r3, #15
 80091d4:	18fb      	adds	r3, r7, r3
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d120      	bne.n	800921e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e0:	4a12      	ldr	r2, [pc, #72]	; (800922c <HAL_ADC_Start+0xa4>)
 80091e2:	4013      	ands	r3, r2
 80091e4:	2280      	movs	r2, #128	; 0x80
 80091e6:	0052      	lsls	r2, r2, #1
 80091e8:	431a      	orrs	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2250      	movs	r2, #80	; 0x50
 80091f8:	2100      	movs	r1, #0
 80091fa:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	221c      	movs	r2, #28
 8009202:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689a      	ldr	r2, [r3, #8]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2104      	movs	r1, #4
 8009210:	430a      	orrs	r2, r1
 8009212:	609a      	str	r2, [r3, #8]
 8009214:	e003      	b.n	800921e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009216:	230f      	movs	r3, #15
 8009218:	18fb      	adds	r3, r7, r3
 800921a:	2202      	movs	r2, #2
 800921c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800921e:	230f      	movs	r3, #15
 8009220:	18fb      	adds	r3, r7, r3
 8009222:	781b      	ldrb	r3, [r3, #0]
}
 8009224:	0018      	movs	r0, r3
 8009226:	46bd      	mov	sp, r7
 8009228:	b005      	add	sp, #20
 800922a:	bd90      	pop	{r4, r7, pc}
 800922c:	fffff0fe 	.word	0xfffff0fe

08009230 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800923e:	2300      	movs	r3, #0
 8009240:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	695b      	ldr	r3, [r3, #20]
 8009246:	2b08      	cmp	r3, #8
 8009248:	d102      	bne.n	8009250 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800924a:	2308      	movs	r3, #8
 800924c:	60fb      	str	r3, [r7, #12]
 800924e:	e014      	b.n	800927a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	2201      	movs	r2, #1
 8009258:	4013      	ands	r3, r2
 800925a:	2b01      	cmp	r3, #1
 800925c:	d10b      	bne.n	8009276 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009262:	2220      	movs	r2, #32
 8009264:	431a      	orrs	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2250      	movs	r2, #80	; 0x50
 800926e:	2100      	movs	r1, #0
 8009270:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e06c      	b.n	8009350 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8009276:	230c      	movs	r3, #12
 8009278:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800927a:	f7ff fd31 	bl	8008ce0 <HAL_GetTick>
 800927e:	0003      	movs	r3, r0
 8009280:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8009282:	e019      	b.n	80092b8 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	3301      	adds	r3, #1
 8009288:	d016      	beq.n	80092b8 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d007      	beq.n	80092a0 <HAL_ADC_PollForConversion+0x70>
 8009290:	f7ff fd26 	bl	8008ce0 <HAL_GetTick>
 8009294:	0002      	movs	r2, r0
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	429a      	cmp	r2, r3
 800929e:	d20b      	bcs.n	80092b8 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092a4:	2204      	movs	r2, #4
 80092a6:	431a      	orrs	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2250      	movs	r2, #80	; 0x50
 80092b0:	2100      	movs	r1, #0
 80092b2:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e04b      	b.n	8009350 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	4013      	ands	r3, r2
 80092c2:	d0df      	beq.n	8009284 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c8:	2280      	movs	r2, #128	; 0x80
 80092ca:	0092      	lsls	r2, r2, #2
 80092cc:	431a      	orrs	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68da      	ldr	r2, [r3, #12]
 80092d8:	23c0      	movs	r3, #192	; 0xc0
 80092da:	011b      	lsls	r3, r3, #4
 80092dc:	4013      	ands	r3, r2
 80092de:	d12e      	bne.n	800933e <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2220      	movs	r2, #32
 80092e4:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d129      	bne.n	800933e <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2208      	movs	r2, #8
 80092f2:	4013      	ands	r3, r2
 80092f4:	2b08      	cmp	r3, #8
 80092f6:	d122      	bne.n	800933e <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	2204      	movs	r2, #4
 8009300:	4013      	ands	r3, r2
 8009302:	d110      	bne.n	8009326 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	685a      	ldr	r2, [r3, #4]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	210c      	movs	r1, #12
 8009310:	438a      	bics	r2, r1
 8009312:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009318:	4a0f      	ldr	r2, [pc, #60]	; (8009358 <HAL_ADC_PollForConversion+0x128>)
 800931a:	4013      	ands	r3, r2
 800931c:	2201      	movs	r2, #1
 800931e:	431a      	orrs	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	655a      	str	r2, [r3, #84]	; 0x54
 8009324:	e00b      	b.n	800933e <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800932a:	2220      	movs	r2, #32
 800932c:	431a      	orrs	r2, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009336:	2201      	movs	r2, #1
 8009338:	431a      	orrs	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d103      	bne.n	800934e <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	220c      	movs	r2, #12
 800934c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	0018      	movs	r0, r3
 8009352:	46bd      	mov	sp, r7
 8009354:	b004      	add	sp, #16
 8009356:	bd80      	pop	{r7, pc}
 8009358:	fffffefe 	.word	0xfffffefe

0800935c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800936a:	0018      	movs	r0, r3
 800936c:	46bd      	mov	sp, r7
 800936e:	b002      	add	sp, #8
 8009370:	bd80      	pop	{r7, pc}
	...

08009374 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2250      	movs	r2, #80	; 0x50
 8009382:	5c9b      	ldrb	r3, [r3, r2]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d101      	bne.n	800938c <HAL_ADC_ConfigChannel+0x18>
 8009388:	2302      	movs	r3, #2
 800938a:	e06c      	b.n	8009466 <HAL_ADC_ConfigChannel+0xf2>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2250      	movs	r2, #80	; 0x50
 8009390:	2101      	movs	r1, #1
 8009392:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	2204      	movs	r2, #4
 800939c:	4013      	ands	r3, r2
 800939e:	d00b      	beq.n	80093b8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a4:	2220      	movs	r2, #32
 80093a6:	431a      	orrs	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2250      	movs	r2, #80	; 0x50
 80093b0:	2100      	movs	r1, #0
 80093b2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e056      	b.n	8009466 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	4a2c      	ldr	r2, [pc, #176]	; (8009470 <HAL_ADC_ConfigChannel+0xfc>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d028      	beq.n	8009414 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	035b      	lsls	r3, r3, #13
 80093ce:	0b5a      	lsrs	r2, r3, #13
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	430a      	orrs	r2, r1
 80093d6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	2380      	movs	r3, #128	; 0x80
 80093de:	02db      	lsls	r3, r3, #11
 80093e0:	4013      	ands	r3, r2
 80093e2:	d009      	beq.n	80093f8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80093e4:	4b23      	ldr	r3, [pc, #140]	; (8009474 <HAL_ADC_ConfigChannel+0x100>)
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	4b22      	ldr	r3, [pc, #136]	; (8009474 <HAL_ADC_ConfigChannel+0x100>)
 80093ea:	2180      	movs	r1, #128	; 0x80
 80093ec:	0409      	lsls	r1, r1, #16
 80093ee:	430a      	orrs	r2, r1
 80093f0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80093f2:	200a      	movs	r0, #10
 80093f4:	f000 f94a 	bl	800968c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	2380      	movs	r3, #128	; 0x80
 80093fe:	029b      	lsls	r3, r3, #10
 8009400:	4013      	ands	r3, r2
 8009402:	d02b      	beq.n	800945c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8009404:	4b1b      	ldr	r3, [pc, #108]	; (8009474 <HAL_ADC_ConfigChannel+0x100>)
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	4b1a      	ldr	r3, [pc, #104]	; (8009474 <HAL_ADC_ConfigChannel+0x100>)
 800940a:	2180      	movs	r1, #128	; 0x80
 800940c:	03c9      	lsls	r1, r1, #15
 800940e:	430a      	orrs	r2, r1
 8009410:	601a      	str	r2, [r3, #0]
 8009412:	e023      	b.n	800945c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	035b      	lsls	r3, r3, #13
 8009420:	0b5b      	lsrs	r3, r3, #13
 8009422:	43d9      	mvns	r1, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	400a      	ands	r2, r1
 800942a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	2380      	movs	r3, #128	; 0x80
 8009432:	02db      	lsls	r3, r3, #11
 8009434:	4013      	ands	r3, r2
 8009436:	d005      	beq.n	8009444 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8009438:	4b0e      	ldr	r3, [pc, #56]	; (8009474 <HAL_ADC_ConfigChannel+0x100>)
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	4b0d      	ldr	r3, [pc, #52]	; (8009474 <HAL_ADC_ConfigChannel+0x100>)
 800943e:	490e      	ldr	r1, [pc, #56]	; (8009478 <HAL_ADC_ConfigChannel+0x104>)
 8009440:	400a      	ands	r2, r1
 8009442:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	2380      	movs	r3, #128	; 0x80
 800944a:	029b      	lsls	r3, r3, #10
 800944c:	4013      	ands	r3, r2
 800944e:	d005      	beq.n	800945c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8009450:	4b08      	ldr	r3, [pc, #32]	; (8009474 <HAL_ADC_ConfigChannel+0x100>)
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	4b07      	ldr	r3, [pc, #28]	; (8009474 <HAL_ADC_ConfigChannel+0x100>)
 8009456:	4909      	ldr	r1, [pc, #36]	; (800947c <HAL_ADC_ConfigChannel+0x108>)
 8009458:	400a      	ands	r2, r1
 800945a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2250      	movs	r2, #80	; 0x50
 8009460:	2100      	movs	r1, #0
 8009462:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	0018      	movs	r0, r3
 8009468:	46bd      	mov	sp, r7
 800946a:	b002      	add	sp, #8
 800946c:	bd80      	pop	{r7, pc}
 800946e:	46c0      	nop			; (mov r8, r8)
 8009470:	00001001 	.word	0x00001001
 8009474:	40012708 	.word	0x40012708
 8009478:	ff7fffff 	.word	0xff7fffff
 800947c:	ffbfffff 	.word	0xffbfffff

08009480 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009488:	2300      	movs	r3, #0
 800948a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	2203      	movs	r2, #3
 8009494:	4013      	ands	r3, r2
 8009496:	2b01      	cmp	r3, #1
 8009498:	d108      	bne.n	80094ac <ADC_Enable+0x2c>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2201      	movs	r2, #1
 80094a2:	4013      	ands	r3, r2
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d101      	bne.n	80094ac <ADC_Enable+0x2c>
 80094a8:	2301      	movs	r3, #1
 80094aa:	e000      	b.n	80094ae <ADC_Enable+0x2e>
 80094ac:	2300      	movs	r3, #0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d13f      	bne.n	8009532 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	4a20      	ldr	r2, [pc, #128]	; (800953c <ADC_Enable+0xbc>)
 80094ba:	4013      	ands	r3, r2
 80094bc:	d00d      	beq.n	80094da <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094c2:	2210      	movs	r2, #16
 80094c4:	431a      	orrs	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ce:	2201      	movs	r2, #1
 80094d0:	431a      	orrs	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e02c      	b.n	8009534 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2101      	movs	r1, #1
 80094e6:	430a      	orrs	r2, r1
 80094e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80094ea:	2001      	movs	r0, #1
 80094ec:	f000 f8ce 	bl	800968c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80094f0:	f7ff fbf6 	bl	8008ce0 <HAL_GetTick>
 80094f4:	0003      	movs	r3, r0
 80094f6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80094f8:	e014      	b.n	8009524 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80094fa:	f7ff fbf1 	bl	8008ce0 <HAL_GetTick>
 80094fe:	0002      	movs	r2, r0
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	2b0a      	cmp	r3, #10
 8009506:	d90d      	bls.n	8009524 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950c:	2210      	movs	r2, #16
 800950e:	431a      	orrs	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009518:	2201      	movs	r2, #1
 800951a:	431a      	orrs	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e007      	b.n	8009534 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2201      	movs	r2, #1
 800952c:	4013      	ands	r3, r2
 800952e:	2b01      	cmp	r3, #1
 8009530:	d1e3      	bne.n	80094fa <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	0018      	movs	r0, r3
 8009536:	46bd      	mov	sp, r7
 8009538:	b004      	add	sp, #16
 800953a:	bd80      	pop	{r7, pc}
 800953c:	80000017 	.word	0x80000017

08009540 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009548:	2300      	movs	r3, #0
 800954a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	2203      	movs	r2, #3
 8009554:	4013      	ands	r3, r2
 8009556:	2b01      	cmp	r3, #1
 8009558:	d108      	bne.n	800956c <ADC_Disable+0x2c>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2201      	movs	r2, #1
 8009562:	4013      	ands	r3, r2
 8009564:	2b01      	cmp	r3, #1
 8009566:	d101      	bne.n	800956c <ADC_Disable+0x2c>
 8009568:	2301      	movs	r3, #1
 800956a:	e000      	b.n	800956e <ADC_Disable+0x2e>
 800956c:	2300      	movs	r3, #0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d041      	beq.n	80095f6 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	2205      	movs	r2, #5
 800957a:	4013      	ands	r3, r2
 800957c:	2b01      	cmp	r3, #1
 800957e:	d110      	bne.n	80095a2 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689a      	ldr	r2, [r3, #8]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2102      	movs	r1, #2
 800958c:	430a      	orrs	r2, r1
 800958e:	609a      	str	r2, [r3, #8]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2203      	movs	r2, #3
 8009596:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009598:	f7ff fba2 	bl	8008ce0 <HAL_GetTick>
 800959c:	0003      	movs	r3, r0
 800959e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80095a0:	e022      	b.n	80095e8 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a6:	2210      	movs	r2, #16
 80095a8:	431a      	orrs	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b2:	2201      	movs	r2, #1
 80095b4:	431a      	orrs	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e01c      	b.n	80095f8 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80095be:	f7ff fb8f 	bl	8008ce0 <HAL_GetTick>
 80095c2:	0002      	movs	r2, r0
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	2b0a      	cmp	r3, #10
 80095ca:	d90d      	bls.n	80095e8 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d0:	2210      	movs	r2, #16
 80095d2:	431a      	orrs	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095dc:	2201      	movs	r2, #1
 80095de:	431a      	orrs	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e007      	b.n	80095f8 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	2201      	movs	r2, #1
 80095f0:	4013      	ands	r3, r2
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d0e3      	beq.n	80095be <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	0018      	movs	r0, r3
 80095fa:	46bd      	mov	sp, r7
 80095fc:	b004      	add	sp, #16
 80095fe:	bd80      	pop	{r7, pc}

08009600 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009608:	2300      	movs	r3, #0
 800960a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	2204      	movs	r2, #4
 8009614:	4013      	ands	r3, r2
 8009616:	d034      	beq.n	8009682 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	2204      	movs	r2, #4
 8009620:	4013      	ands	r3, r2
 8009622:	2b04      	cmp	r3, #4
 8009624:	d10d      	bne.n	8009642 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	2202      	movs	r2, #2
 800962e:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8009630:	d107      	bne.n	8009642 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	689a      	ldr	r2, [r3, #8]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2110      	movs	r1, #16
 800963e:	430a      	orrs	r2, r1
 8009640:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009642:	f7ff fb4d 	bl	8008ce0 <HAL_GetTick>
 8009646:	0003      	movs	r3, r0
 8009648:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800964a:	e014      	b.n	8009676 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800964c:	f7ff fb48 	bl	8008ce0 <HAL_GetTick>
 8009650:	0002      	movs	r2, r0
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	2b0a      	cmp	r3, #10
 8009658:	d90d      	bls.n	8009676 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800965e:	2210      	movs	r2, #16
 8009660:	431a      	orrs	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800966a:	2201      	movs	r2, #1
 800966c:	431a      	orrs	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e006      	b.n	8009684 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	2204      	movs	r2, #4
 800967e:	4013      	ands	r3, r2
 8009680:	d1e4      	bne.n	800964c <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	0018      	movs	r0, r3
 8009686:	46bd      	mov	sp, r7
 8009688:	b004      	add	sp, #16
 800968a:	bd80      	pop	{r7, pc}

0800968c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8009694:	4b0a      	ldr	r3, [pc, #40]	; (80096c0 <ADC_DelayMicroSecond+0x34>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	490a      	ldr	r1, [pc, #40]	; (80096c4 <ADC_DelayMicroSecond+0x38>)
 800969a:	0018      	movs	r0, r3
 800969c:	f7f6 fd34 	bl	8000108 <__udivsi3>
 80096a0:	0003      	movs	r3, r0
 80096a2:	001a      	movs	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4353      	muls	r3, r2
 80096a8:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80096aa:	e002      	b.n	80096b2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	3b01      	subs	r3, #1
 80096b0:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1f9      	bne.n	80096ac <ADC_DelayMicroSecond+0x20>
  } 
}
 80096b8:	46c0      	nop			; (mov r8, r8)
 80096ba:	46bd      	mov	sp, r7
 80096bc:	b004      	add	sp, #16
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20000030 	.word	0x20000030
 80096c4:	000f4240 	.word	0x000f4240

080096c8 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80096d2:	2317      	movs	r3, #23
 80096d4:	18fb      	adds	r3, r7, r3
 80096d6:	2200      	movs	r2, #0
 80096d8:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80096de:	2300      	movs	r3, #0
 80096e0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2250      	movs	r2, #80	; 0x50
 80096e6:	5c9b      	ldrb	r3, [r3, r2]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d101      	bne.n	80096f0 <HAL_ADCEx_Calibration_Start+0x28>
 80096ec:	2302      	movs	r3, #2
 80096ee:	e07a      	b.n	80097e6 <HAL_ADCEx_Calibration_Start+0x11e>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2250      	movs	r2, #80	; 0x50
 80096f4:	2101      	movs	r1, #1
 80096f6:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	2203      	movs	r2, #3
 8009700:	4013      	ands	r3, r2
 8009702:	2b01      	cmp	r3, #1
 8009704:	d108      	bne.n	8009718 <HAL_ADCEx_Calibration_Start+0x50>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2201      	movs	r2, #1
 800970e:	4013      	ands	r3, r2
 8009710:	2b01      	cmp	r3, #1
 8009712:	d101      	bne.n	8009718 <HAL_ADCEx_Calibration_Start+0x50>
 8009714:	2301      	movs	r3, #1
 8009716:	e000      	b.n	800971a <HAL_ADCEx_Calibration_Start+0x52>
 8009718:	2300      	movs	r3, #0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d152      	bne.n	80097c4 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009722:	4a33      	ldr	r2, [pc, #204]	; (80097f0 <HAL_ADCEx_Calibration_Start+0x128>)
 8009724:	4013      	ands	r3, r2
 8009726:	2202      	movs	r2, #2
 8009728:	431a      	orrs	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	2203      	movs	r2, #3
 8009736:	4013      	ands	r3, r2
 8009738:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68da      	ldr	r2, [r3, #12]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2103      	movs	r1, #3
 8009746:	438a      	bics	r2, r1
 8009748:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689a      	ldr	r2, [r3, #8]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2180      	movs	r1, #128	; 0x80
 8009756:	0609      	lsls	r1, r1, #24
 8009758:	430a      	orrs	r2, r1
 800975a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800975c:	f7ff fac0 	bl	8008ce0 <HAL_GetTick>
 8009760:	0003      	movs	r3, r0
 8009762:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8009764:	e014      	b.n	8009790 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8009766:	f7ff fabb 	bl	8008ce0 <HAL_GetTick>
 800976a:	0002      	movs	r2, r0
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	2b0a      	cmp	r3, #10
 8009772:	d90d      	bls.n	8009790 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009778:	2212      	movs	r2, #18
 800977a:	4393      	bics	r3, r2
 800977c:	2210      	movs	r2, #16
 800977e:	431a      	orrs	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2250      	movs	r2, #80	; 0x50
 8009788:	2100      	movs	r1, #0
 800978a:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	e02a      	b.n	80097e6 <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	0fdb      	lsrs	r3, r3, #31
 8009798:	07da      	lsls	r2, r3, #31
 800979a:	2380      	movs	r3, #128	; 0x80
 800979c:	061b      	lsls	r3, r3, #24
 800979e:	429a      	cmp	r2, r3
 80097a0:	d0e1      	beq.n	8009766 <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68d9      	ldr	r1, [r3, #12]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	430a      	orrs	r2, r1
 80097b0:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b6:	2203      	movs	r2, #3
 80097b8:	4393      	bics	r3, r2
 80097ba:	2201      	movs	r2, #1
 80097bc:	431a      	orrs	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	655a      	str	r2, [r3, #84]	; 0x54
 80097c2:	e009      	b.n	80097d8 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c8:	2220      	movs	r2, #32
 80097ca:	431a      	orrs	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 80097d0:	2317      	movs	r3, #23
 80097d2:	18fb      	adds	r3, r7, r3
 80097d4:	2201      	movs	r2, #1
 80097d6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2250      	movs	r2, #80	; 0x50
 80097dc:	2100      	movs	r1, #0
 80097de:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80097e0:	2317      	movs	r3, #23
 80097e2:	18fb      	adds	r3, r7, r3
 80097e4:	781b      	ldrb	r3, [r3, #0]
}
 80097e6:	0018      	movs	r0, r3
 80097e8:	46bd      	mov	sp, r7
 80097ea:	b006      	add	sp, #24
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	46c0      	nop			; (mov r8, r8)
 80097f0:	fffffefd 	.word	0xfffffefd

080097f4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	0002      	movs	r2, r0
 80097fc:	1dfb      	adds	r3, r7, #7
 80097fe:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8009800:	1dfb      	adds	r3, r7, #7
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	001a      	movs	r2, r3
 8009806:	231f      	movs	r3, #31
 8009808:	401a      	ands	r2, r3
 800980a:	4b04      	ldr	r3, [pc, #16]	; (800981c <NVIC_EnableIRQ+0x28>)
 800980c:	2101      	movs	r1, #1
 800980e:	4091      	lsls	r1, r2
 8009810:	000a      	movs	r2, r1
 8009812:	601a      	str	r2, [r3, #0]
}
 8009814:	46c0      	nop			; (mov r8, r8)
 8009816:	46bd      	mov	sp, r7
 8009818:	b002      	add	sp, #8
 800981a:	bd80      	pop	{r7, pc}
 800981c:	e000e100 	.word	0xe000e100

08009820 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009820:	b590      	push	{r4, r7, lr}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	0002      	movs	r2, r0
 8009828:	6039      	str	r1, [r7, #0]
 800982a:	1dfb      	adds	r3, r7, #7
 800982c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800982e:	1dfb      	adds	r3, r7, #7
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	2b7f      	cmp	r3, #127	; 0x7f
 8009834:	d932      	bls.n	800989c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009836:	4a2f      	ldr	r2, [pc, #188]	; (80098f4 <NVIC_SetPriority+0xd4>)
 8009838:	1dfb      	adds	r3, r7, #7
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	0019      	movs	r1, r3
 800983e:	230f      	movs	r3, #15
 8009840:	400b      	ands	r3, r1
 8009842:	3b08      	subs	r3, #8
 8009844:	089b      	lsrs	r3, r3, #2
 8009846:	3306      	adds	r3, #6
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	18d3      	adds	r3, r2, r3
 800984c:	3304      	adds	r3, #4
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	1dfa      	adds	r2, r7, #7
 8009852:	7812      	ldrb	r2, [r2, #0]
 8009854:	0011      	movs	r1, r2
 8009856:	2203      	movs	r2, #3
 8009858:	400a      	ands	r2, r1
 800985a:	00d2      	lsls	r2, r2, #3
 800985c:	21ff      	movs	r1, #255	; 0xff
 800985e:	4091      	lsls	r1, r2
 8009860:	000a      	movs	r2, r1
 8009862:	43d2      	mvns	r2, r2
 8009864:	401a      	ands	r2, r3
 8009866:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	019b      	lsls	r3, r3, #6
 800986c:	22ff      	movs	r2, #255	; 0xff
 800986e:	401a      	ands	r2, r3
 8009870:	1dfb      	adds	r3, r7, #7
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	0018      	movs	r0, r3
 8009876:	2303      	movs	r3, #3
 8009878:	4003      	ands	r3, r0
 800987a:	00db      	lsls	r3, r3, #3
 800987c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800987e:	481d      	ldr	r0, [pc, #116]	; (80098f4 <NVIC_SetPriority+0xd4>)
 8009880:	1dfb      	adds	r3, r7, #7
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	001c      	movs	r4, r3
 8009886:	230f      	movs	r3, #15
 8009888:	4023      	ands	r3, r4
 800988a:	3b08      	subs	r3, #8
 800988c:	089b      	lsrs	r3, r3, #2
 800988e:	430a      	orrs	r2, r1
 8009890:	3306      	adds	r3, #6
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	18c3      	adds	r3, r0, r3
 8009896:	3304      	adds	r3, #4
 8009898:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800989a:	e027      	b.n	80098ec <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800989c:	4a16      	ldr	r2, [pc, #88]	; (80098f8 <NVIC_SetPriority+0xd8>)
 800989e:	1dfb      	adds	r3, r7, #7
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	b25b      	sxtb	r3, r3
 80098a4:	089b      	lsrs	r3, r3, #2
 80098a6:	33c0      	adds	r3, #192	; 0xc0
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	589b      	ldr	r3, [r3, r2]
 80098ac:	1dfa      	adds	r2, r7, #7
 80098ae:	7812      	ldrb	r2, [r2, #0]
 80098b0:	0011      	movs	r1, r2
 80098b2:	2203      	movs	r2, #3
 80098b4:	400a      	ands	r2, r1
 80098b6:	00d2      	lsls	r2, r2, #3
 80098b8:	21ff      	movs	r1, #255	; 0xff
 80098ba:	4091      	lsls	r1, r2
 80098bc:	000a      	movs	r2, r1
 80098be:	43d2      	mvns	r2, r2
 80098c0:	401a      	ands	r2, r3
 80098c2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	019b      	lsls	r3, r3, #6
 80098c8:	22ff      	movs	r2, #255	; 0xff
 80098ca:	401a      	ands	r2, r3
 80098cc:	1dfb      	adds	r3, r7, #7
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	0018      	movs	r0, r3
 80098d2:	2303      	movs	r3, #3
 80098d4:	4003      	ands	r3, r0
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80098da:	4807      	ldr	r0, [pc, #28]	; (80098f8 <NVIC_SetPriority+0xd8>)
 80098dc:	1dfb      	adds	r3, r7, #7
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	b25b      	sxtb	r3, r3
 80098e2:	089b      	lsrs	r3, r3, #2
 80098e4:	430a      	orrs	r2, r1
 80098e6:	33c0      	adds	r3, #192	; 0xc0
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	501a      	str	r2, [r3, r0]
}
 80098ec:	46c0      	nop			; (mov r8, r8)
 80098ee:	46bd      	mov	sp, r7
 80098f0:	b003      	add	sp, #12
 80098f2:	bd90      	pop	{r4, r7, pc}
 80098f4:	e000ed00 	.word	0xe000ed00
 80098f8:	e000e100 	.word	0xe000e100

080098fc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	60b9      	str	r1, [r7, #8]
 8009904:	607a      	str	r2, [r7, #4]
 8009906:	210f      	movs	r1, #15
 8009908:	187b      	adds	r3, r7, r1
 800990a:	1c02      	adds	r2, r0, #0
 800990c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	187b      	adds	r3, r7, r1
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	b25b      	sxtb	r3, r3
 8009916:	0011      	movs	r1, r2
 8009918:	0018      	movs	r0, r3
 800991a:	f7ff ff81 	bl	8009820 <NVIC_SetPriority>
}
 800991e:	46c0      	nop			; (mov r8, r8)
 8009920:	46bd      	mov	sp, r7
 8009922:	b004      	add	sp, #16
 8009924:	bd80      	pop	{r7, pc}

08009926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b082      	sub	sp, #8
 800992a:	af00      	add	r7, sp, #0
 800992c:	0002      	movs	r2, r0
 800992e:	1dfb      	adds	r3, r7, #7
 8009930:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009932:	1dfb      	adds	r3, r7, #7
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	b25b      	sxtb	r3, r3
 8009938:	0018      	movs	r0, r3
 800993a:	f7ff ff5b 	bl	80097f4 <NVIC_EnableIRQ>
}
 800993e:	46c0      	nop			; (mov r8, r8)
 8009940:	46bd      	mov	sp, r7
 8009942:	b002      	add	sp, #8
 8009944:	bd80      	pop	{r7, pc}
	...

08009948 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d101      	bne.n	800995a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e061      	b.n	8009a1e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a32      	ldr	r2, [pc, #200]	; (8009a28 <HAL_DMA_Init+0xe0>)
 8009960:	4694      	mov	ip, r2
 8009962:	4463      	add	r3, ip
 8009964:	2114      	movs	r1, #20
 8009966:	0018      	movs	r0, r3
 8009968:	f7f6 fbce 	bl	8000108 <__udivsi3>
 800996c:	0003      	movs	r3, r0
 800996e:	009a      	lsls	r2, r3, #2
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a2d      	ldr	r2, [pc, #180]	; (8009a2c <HAL_DMA_Init+0xe4>)
 8009978:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2225      	movs	r2, #37	; 0x25
 800997e:	2102      	movs	r1, #2
 8009980:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	4a28      	ldr	r2, [pc, #160]	; (8009a30 <HAL_DMA_Init+0xe8>)
 800998e:	4013      	ands	r3, r2
 8009990:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800999a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80099a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80099b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a1b      	ldr	r3, [r3, #32]
 80099b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	4313      	orrs	r3, r2
 80099be:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	689a      	ldr	r2, [r3, #8]
 80099cc:	2380      	movs	r3, #128	; 0x80
 80099ce:	01db      	lsls	r3, r3, #7
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d018      	beq.n	8009a06 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80099d4:	4b17      	ldr	r3, [pc, #92]	; (8009a34 <HAL_DMA_Init+0xec>)
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099dc:	211c      	movs	r1, #28
 80099de:	400b      	ands	r3, r1
 80099e0:	210f      	movs	r1, #15
 80099e2:	4099      	lsls	r1, r3
 80099e4:	000b      	movs	r3, r1
 80099e6:	43d9      	mvns	r1, r3
 80099e8:	4b12      	ldr	r3, [pc, #72]	; (8009a34 <HAL_DMA_Init+0xec>)
 80099ea:	400a      	ands	r2, r1
 80099ec:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80099ee:	4b11      	ldr	r3, [pc, #68]	; (8009a34 <HAL_DMA_Init+0xec>)
 80099f0:	6819      	ldr	r1, [r3, #0]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099fa:	201c      	movs	r0, #28
 80099fc:	4003      	ands	r3, r0
 80099fe:	409a      	lsls	r2, r3
 8009a00:	4b0c      	ldr	r3, [pc, #48]	; (8009a34 <HAL_DMA_Init+0xec>)
 8009a02:	430a      	orrs	r2, r1
 8009a04:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2225      	movs	r2, #37	; 0x25
 8009a10:	2101      	movs	r1, #1
 8009a12:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2224      	movs	r2, #36	; 0x24
 8009a18:	2100      	movs	r1, #0
 8009a1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	0018      	movs	r0, r3
 8009a20:	46bd      	mov	sp, r7
 8009a22:	b004      	add	sp, #16
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	46c0      	nop			; (mov r8, r8)
 8009a28:	bffdfff8 	.word	0xbffdfff8
 8009a2c:	40020000 	.word	0x40020000
 8009a30:	ffff800f 	.word	0xffff800f
 8009a34:	400200a8 	.word	0x400200a8

08009a38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
 8009a44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a46:	2317      	movs	r3, #23
 8009a48:	18fb      	adds	r3, r7, r3
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2224      	movs	r2, #36	; 0x24
 8009a52:	5c9b      	ldrb	r3, [r3, r2]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d101      	bne.n	8009a5c <HAL_DMA_Start_IT+0x24>
 8009a58:	2302      	movs	r3, #2
 8009a5a:	e04f      	b.n	8009afc <HAL_DMA_Start_IT+0xc4>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2224      	movs	r2, #36	; 0x24
 8009a60:	2101      	movs	r1, #1
 8009a62:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2225      	movs	r2, #37	; 0x25
 8009a68:	5c9b      	ldrb	r3, [r3, r2]
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d13a      	bne.n	8009ae6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2225      	movs	r2, #37	; 0x25
 8009a74:	2102      	movs	r1, #2
 8009a76:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2101      	movs	r1, #1
 8009a8a:	438a      	bics	r2, r1
 8009a8c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	68b9      	ldr	r1, [r7, #8]
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f000 f92b 	bl	8009cf0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d008      	beq.n	8009ab4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	210e      	movs	r1, #14
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	e00f      	b.n	8009ad4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2104      	movs	r1, #4
 8009ac0:	438a      	bics	r2, r1
 8009ac2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	210a      	movs	r1, #10
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2101      	movs	r1, #1
 8009ae0:	430a      	orrs	r2, r1
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	e007      	b.n	8009af6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2224      	movs	r2, #36	; 0x24
 8009aea:	2100      	movs	r1, #0
 8009aec:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8009aee:	2317      	movs	r3, #23
 8009af0:	18fb      	adds	r3, r7, r3
 8009af2:	2202      	movs	r2, #2
 8009af4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8009af6:	2317      	movs	r3, #23
 8009af8:	18fb      	adds	r3, r7, r3
 8009afa:	781b      	ldrb	r3, [r3, #0]
}
 8009afc:	0018      	movs	r0, r3
 8009afe:	46bd      	mov	sp, r7
 8009b00:	b006      	add	sp, #24
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b0c:	230f      	movs	r3, #15
 8009b0e:	18fb      	adds	r3, r7, r3
 8009b10:	2200      	movs	r2, #0
 8009b12:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2225      	movs	r2, #37	; 0x25
 8009b18:	5c9b      	ldrb	r3, [r3, r2]
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d007      	beq.n	8009b30 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2204      	movs	r2, #4
 8009b24:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009b26:	230f      	movs	r3, #15
 8009b28:	18fb      	adds	r3, r7, r3
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	701a      	strb	r2, [r3, #0]
 8009b2e:	e02a      	b.n	8009b86 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	210e      	movs	r1, #14
 8009b3c:	438a      	bics	r2, r1
 8009b3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	438a      	bics	r2, r1
 8009b4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b54:	221c      	movs	r2, #28
 8009b56:	401a      	ands	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	4091      	lsls	r1, r2
 8009b60:	000a      	movs	r2, r1
 8009b62:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2225      	movs	r2, #37	; 0x25
 8009b68:	2101      	movs	r1, #1
 8009b6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2224      	movs	r2, #36	; 0x24
 8009b70:	2100      	movs	r1, #0
 8009b72:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d004      	beq.n	8009b86 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	0010      	movs	r0, r2
 8009b84:	4798      	blx	r3
    }
  }
  return status;
 8009b86:	230f      	movs	r3, #15
 8009b88:	18fb      	adds	r3, r7, r3
 8009b8a:	781b      	ldrb	r3, [r3, #0]
}
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	b004      	add	sp, #16
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bb0:	221c      	movs	r2, #28
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	2204      	movs	r2, #4
 8009bb6:	409a      	lsls	r2, r3
 8009bb8:	0013      	movs	r3, r2
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	d026      	beq.n	8009c0e <HAL_DMA_IRQHandler+0x7a>
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2204      	movs	r2, #4
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	d022      	beq.n	8009c0e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	d107      	bne.n	8009be4 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2104      	movs	r1, #4
 8009be0:	438a      	bics	r2, r1
 8009be2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be8:	221c      	movs	r2, #28
 8009bea:	401a      	ands	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf0:	2104      	movs	r1, #4
 8009bf2:	4091      	lsls	r1, r2
 8009bf4:	000a      	movs	r2, r1
 8009bf6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d100      	bne.n	8009c02 <HAL_DMA_IRQHandler+0x6e>
 8009c00:	e071      	b.n	8009ce6 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	0010      	movs	r0, r2
 8009c0a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8009c0c:	e06b      	b.n	8009ce6 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c12:	221c      	movs	r2, #28
 8009c14:	4013      	ands	r3, r2
 8009c16:	2202      	movs	r2, #2
 8009c18:	409a      	lsls	r2, r3
 8009c1a:	0013      	movs	r3, r2
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	4013      	ands	r3, r2
 8009c20:	d02d      	beq.n	8009c7e <HAL_DMA_IRQHandler+0xea>
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	2202      	movs	r2, #2
 8009c26:	4013      	ands	r3, r2
 8009c28:	d029      	beq.n	8009c7e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2220      	movs	r2, #32
 8009c32:	4013      	ands	r3, r2
 8009c34:	d10b      	bne.n	8009c4e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	210a      	movs	r1, #10
 8009c42:	438a      	bics	r2, r1
 8009c44:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2225      	movs	r2, #37	; 0x25
 8009c4a:	2101      	movs	r1, #1
 8009c4c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c52:	221c      	movs	r2, #28
 8009c54:	401a      	ands	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5a:	2102      	movs	r1, #2
 8009c5c:	4091      	lsls	r1, r2
 8009c5e:	000a      	movs	r2, r1
 8009c60:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2224      	movs	r2, #36	; 0x24
 8009c66:	2100      	movs	r1, #0
 8009c68:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d039      	beq.n	8009ce6 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	0010      	movs	r0, r2
 8009c7a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009c7c:	e033      	b.n	8009ce6 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c82:	221c      	movs	r2, #28
 8009c84:	4013      	ands	r3, r2
 8009c86:	2208      	movs	r2, #8
 8009c88:	409a      	lsls	r2, r3
 8009c8a:	0013      	movs	r3, r2
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	4013      	ands	r3, r2
 8009c90:	d02a      	beq.n	8009ce8 <HAL_DMA_IRQHandler+0x154>
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	2208      	movs	r2, #8
 8009c96:	4013      	ands	r3, r2
 8009c98:	d026      	beq.n	8009ce8 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	210e      	movs	r1, #14
 8009ca6:	438a      	bics	r2, r1
 8009ca8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cae:	221c      	movs	r2, #28
 8009cb0:	401a      	ands	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb6:	2101      	movs	r1, #1
 8009cb8:	4091      	lsls	r1, r2
 8009cba:	000a      	movs	r2, r1
 8009cbc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2225      	movs	r2, #37	; 0x25
 8009cc8:	2101      	movs	r1, #1
 8009cca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2224      	movs	r2, #36	; 0x24
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d005      	beq.n	8009ce8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	0010      	movs	r0, r2
 8009ce4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009ce6:	46c0      	nop			; (mov r8, r8)
 8009ce8:	46c0      	nop			; (mov r8, r8)
}
 8009cea:	46bd      	mov	sp, r7
 8009cec:	b004      	add	sp, #16
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
 8009cfc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d02:	221c      	movs	r2, #28
 8009d04:	401a      	ands	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0a:	2101      	movs	r1, #1
 8009d0c:	4091      	lsls	r1, r2
 8009d0e:	000a      	movs	r2, r1
 8009d10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	2b10      	cmp	r3, #16
 8009d20:	d108      	bne.n	8009d34 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009d32:	e007      	b.n	8009d44 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	60da      	str	r2, [r3, #12]
}
 8009d44:	46c0      	nop			; (mov r8, r8)
 8009d46:	46bd      	mov	sp, r7
 8009d48:	b004      	add	sp, #16
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8009d62:	e155      	b.n	800a010 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2101      	movs	r1, #1
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	4091      	lsls	r1, r2
 8009d6e:	000a      	movs	r2, r1
 8009d70:	4013      	ands	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d100      	bne.n	8009d7c <HAL_GPIO_Init+0x30>
 8009d7a:	e146      	b.n	800a00a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d003      	beq.n	8009d8c <HAL_GPIO_Init+0x40>
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	2b12      	cmp	r3, #18
 8009d8a:	d123      	bne.n	8009dd4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	08da      	lsrs	r2, r3, #3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	3208      	adds	r2, #8
 8009d94:	0092      	lsls	r2, r2, #2
 8009d96:	58d3      	ldr	r3, [r2, r3]
 8009d98:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	2207      	movs	r2, #7
 8009d9e:	4013      	ands	r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	220f      	movs	r2, #15
 8009da4:	409a      	lsls	r2, r3
 8009da6:	0013      	movs	r3, r2
 8009da8:	43da      	mvns	r2, r3
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	4013      	ands	r3, r2
 8009dae:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	691a      	ldr	r2, [r3, #16]
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	2107      	movs	r1, #7
 8009db8:	400b      	ands	r3, r1
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	409a      	lsls	r2, r3
 8009dbe:	0013      	movs	r3, r2
 8009dc0:	693a      	ldr	r2, [r7, #16]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	08da      	lsrs	r2, r3, #3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	3208      	adds	r2, #8
 8009dce:	0092      	lsls	r2, r2, #2
 8009dd0:	6939      	ldr	r1, [r7, #16]
 8009dd2:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d00b      	beq.n	8009df4 <HAL_GPIO_Init+0xa8>
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d007      	beq.n	8009df4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009de8:	2b11      	cmp	r3, #17
 8009dea:	d003      	beq.n	8009df4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	2b12      	cmp	r3, #18
 8009df2:	d130      	bne.n	8009e56 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	005b      	lsls	r3, r3, #1
 8009dfe:	2203      	movs	r2, #3
 8009e00:	409a      	lsls	r2, r3
 8009e02:	0013      	movs	r3, r2
 8009e04:	43da      	mvns	r2, r3
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	4013      	ands	r3, r2
 8009e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	68da      	ldr	r2, [r3, #12]
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	005b      	lsls	r3, r3, #1
 8009e14:	409a      	lsls	r2, r3
 8009e16:	0013      	movs	r3, r2
 8009e18:	693a      	ldr	r2, [r7, #16]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	693a      	ldr	r2, [r7, #16]
 8009e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	409a      	lsls	r2, r3
 8009e30:	0013      	movs	r3, r2
 8009e32:	43da      	mvns	r2, r3
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	4013      	ands	r3, r2
 8009e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	091b      	lsrs	r3, r3, #4
 8009e40:	2201      	movs	r2, #1
 8009e42:	401a      	ands	r2, r3
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	409a      	lsls	r2, r3
 8009e48:	0013      	movs	r3, r2
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	005b      	lsls	r3, r3, #1
 8009e60:	2203      	movs	r2, #3
 8009e62:	409a      	lsls	r2, r3
 8009e64:	0013      	movs	r3, r2
 8009e66:	43da      	mvns	r2, r3
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	4013      	ands	r3, r2
 8009e6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	2203      	movs	r2, #3
 8009e74:	401a      	ands	r2, r3
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	409a      	lsls	r2, r3
 8009e7c:	0013      	movs	r3, r2
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	005b      	lsls	r3, r3, #1
 8009e94:	2203      	movs	r2, #3
 8009e96:	409a      	lsls	r2, r3
 8009e98:	0013      	movs	r3, r2
 8009e9a:	43da      	mvns	r2, r3
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	689a      	ldr	r2, [r3, #8]
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	005b      	lsls	r3, r3, #1
 8009eaa:	409a      	lsls	r2, r3
 8009eac:	0013      	movs	r3, r2
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	2380      	movs	r3, #128	; 0x80
 8009ec0:	055b      	lsls	r3, r3, #21
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	d100      	bne.n	8009ec8 <HAL_GPIO_Init+0x17c>
 8009ec6:	e0a0      	b.n	800a00a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ec8:	4b57      	ldr	r3, [pc, #348]	; (800a028 <HAL_GPIO_Init+0x2dc>)
 8009eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ecc:	4b56      	ldr	r3, [pc, #344]	; (800a028 <HAL_GPIO_Init+0x2dc>)
 8009ece:	2101      	movs	r1, #1
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8009ed4:	4a55      	ldr	r2, [pc, #340]	; (800a02c <HAL_GPIO_Init+0x2e0>)
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	089b      	lsrs	r3, r3, #2
 8009eda:	3302      	adds	r3, #2
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	589b      	ldr	r3, [r3, r2]
 8009ee0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	2203      	movs	r2, #3
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	220f      	movs	r2, #15
 8009eec:	409a      	lsls	r2, r3
 8009eee:	0013      	movs	r3, r2
 8009ef0:	43da      	mvns	r2, r3
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	23a0      	movs	r3, #160	; 0xa0
 8009efc:	05db      	lsls	r3, r3, #23
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d01f      	beq.n	8009f42 <HAL_GPIO_Init+0x1f6>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a4a      	ldr	r2, [pc, #296]	; (800a030 <HAL_GPIO_Init+0x2e4>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d019      	beq.n	8009f3e <HAL_GPIO_Init+0x1f2>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a49      	ldr	r2, [pc, #292]	; (800a034 <HAL_GPIO_Init+0x2e8>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d013      	beq.n	8009f3a <HAL_GPIO_Init+0x1ee>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a48      	ldr	r2, [pc, #288]	; (800a038 <HAL_GPIO_Init+0x2ec>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d00d      	beq.n	8009f36 <HAL_GPIO_Init+0x1ea>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a47      	ldr	r2, [pc, #284]	; (800a03c <HAL_GPIO_Init+0x2f0>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d007      	beq.n	8009f32 <HAL_GPIO_Init+0x1e6>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a46      	ldr	r2, [pc, #280]	; (800a040 <HAL_GPIO_Init+0x2f4>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d101      	bne.n	8009f2e <HAL_GPIO_Init+0x1e2>
 8009f2a:	2305      	movs	r3, #5
 8009f2c:	e00a      	b.n	8009f44 <HAL_GPIO_Init+0x1f8>
 8009f2e:	2306      	movs	r3, #6
 8009f30:	e008      	b.n	8009f44 <HAL_GPIO_Init+0x1f8>
 8009f32:	2304      	movs	r3, #4
 8009f34:	e006      	b.n	8009f44 <HAL_GPIO_Init+0x1f8>
 8009f36:	2303      	movs	r3, #3
 8009f38:	e004      	b.n	8009f44 <HAL_GPIO_Init+0x1f8>
 8009f3a:	2302      	movs	r3, #2
 8009f3c:	e002      	b.n	8009f44 <HAL_GPIO_Init+0x1f8>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e000      	b.n	8009f44 <HAL_GPIO_Init+0x1f8>
 8009f42:	2300      	movs	r3, #0
 8009f44:	697a      	ldr	r2, [r7, #20]
 8009f46:	2103      	movs	r1, #3
 8009f48:	400a      	ands	r2, r1
 8009f4a:	0092      	lsls	r2, r2, #2
 8009f4c:	4093      	lsls	r3, r2
 8009f4e:	693a      	ldr	r2, [r7, #16]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009f54:	4935      	ldr	r1, [pc, #212]	; (800a02c <HAL_GPIO_Init+0x2e0>)
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	089b      	lsrs	r3, r3, #2
 8009f5a:	3302      	adds	r3, #2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	693a      	ldr	r2, [r7, #16]
 8009f60:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009f62:	4b38      	ldr	r3, [pc, #224]	; (800a044 <HAL_GPIO_Init+0x2f8>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	43da      	mvns	r2, r3
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	4013      	ands	r3, r2
 8009f70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	685a      	ldr	r2, [r3, #4]
 8009f76:	2380      	movs	r3, #128	; 0x80
 8009f78:	025b      	lsls	r3, r3, #9
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	d003      	beq.n	8009f86 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8009f7e:	693a      	ldr	r2, [r7, #16]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8009f86:	4b2f      	ldr	r3, [pc, #188]	; (800a044 <HAL_GPIO_Init+0x2f8>)
 8009f88:	693a      	ldr	r2, [r7, #16]
 8009f8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8009f8c:	4b2d      	ldr	r3, [pc, #180]	; (800a044 <HAL_GPIO_Init+0x2f8>)
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	43da      	mvns	r2, r3
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	4013      	ands	r3, r2
 8009f9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	685a      	ldr	r2, [r3, #4]
 8009fa0:	2380      	movs	r3, #128	; 0x80
 8009fa2:	029b      	lsls	r3, r3, #10
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	d003      	beq.n	8009fb0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8009fa8:	693a      	ldr	r2, [r7, #16]
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8009fb0:	4b24      	ldr	r3, [pc, #144]	; (800a044 <HAL_GPIO_Init+0x2f8>)
 8009fb2:	693a      	ldr	r2, [r7, #16]
 8009fb4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009fb6:	4b23      	ldr	r3, [pc, #140]	; (800a044 <HAL_GPIO_Init+0x2f8>)
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	43da      	mvns	r2, r3
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	4013      	ands	r3, r2
 8009fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	685a      	ldr	r2, [r3, #4]
 8009fca:	2380      	movs	r3, #128	; 0x80
 8009fcc:	035b      	lsls	r3, r3, #13
 8009fce:	4013      	ands	r3, r2
 8009fd0:	d003      	beq.n	8009fda <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8009fda:	4b1a      	ldr	r3, [pc, #104]	; (800a044 <HAL_GPIO_Init+0x2f8>)
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8009fe0:	4b18      	ldr	r3, [pc, #96]	; (800a044 <HAL_GPIO_Init+0x2f8>)
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	43da      	mvns	r2, r3
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	4013      	ands	r3, r2
 8009fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	685a      	ldr	r2, [r3, #4]
 8009ff4:	2380      	movs	r3, #128	; 0x80
 8009ff6:	039b      	lsls	r3, r3, #14
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	d003      	beq.n	800a004 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8009ffc:	693a      	ldr	r2, [r7, #16]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	4313      	orrs	r3, r2
 800a002:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800a004:	4b0f      	ldr	r3, [pc, #60]	; (800a044 <HAL_GPIO_Init+0x2f8>)
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	3301      	adds	r3, #1
 800a00e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	40da      	lsrs	r2, r3
 800a018:	1e13      	subs	r3, r2, #0
 800a01a:	d000      	beq.n	800a01e <HAL_GPIO_Init+0x2d2>
 800a01c:	e6a2      	b.n	8009d64 <HAL_GPIO_Init+0x18>
  }
}
 800a01e:	46c0      	nop			; (mov r8, r8)
 800a020:	46bd      	mov	sp, r7
 800a022:	b006      	add	sp, #24
 800a024:	bd80      	pop	{r7, pc}
 800a026:	46c0      	nop			; (mov r8, r8)
 800a028:	40021000 	.word	0x40021000
 800a02c:	40010000 	.word	0x40010000
 800a030:	50000400 	.word	0x50000400
 800a034:	50000800 	.word	0x50000800
 800a038:	50000c00 	.word	0x50000c00
 800a03c:	50001000 	.word	0x50001000
 800a040:	50001c00 	.word	0x50001c00
 800a044:	40010400 	.word	0x40010400

0800a048 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	0008      	movs	r0, r1
 800a052:	0011      	movs	r1, r2
 800a054:	1cbb      	adds	r3, r7, #2
 800a056:	1c02      	adds	r2, r0, #0
 800a058:	801a      	strh	r2, [r3, #0]
 800a05a:	1c7b      	adds	r3, r7, #1
 800a05c:	1c0a      	adds	r2, r1, #0
 800a05e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800a060:	1c7b      	adds	r3, r7, #1
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d004      	beq.n	800a072 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a068:	1cbb      	adds	r3, r7, #2
 800a06a:	881a      	ldrh	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800a070:	e003      	b.n	800a07a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800a072:	1cbb      	adds	r3, r7, #2
 800a074:	881a      	ldrh	r2, [r3, #0]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a07a:	46c0      	nop			; (mov r8, r8)
 800a07c:	46bd      	mov	sp, r7
 800a07e:	b002      	add	sp, #8
 800a080:	bd80      	pop	{r7, pc}
	...

0800a084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	0002      	movs	r2, r0
 800a08c:	1dbb      	adds	r3, r7, #6
 800a08e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800a090:	4b09      	ldr	r3, [pc, #36]	; (800a0b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800a092:	695b      	ldr	r3, [r3, #20]
 800a094:	1dba      	adds	r2, r7, #6
 800a096:	8812      	ldrh	r2, [r2, #0]
 800a098:	4013      	ands	r3, r2
 800a09a:	d008      	beq.n	800a0ae <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a09c:	4b06      	ldr	r3, [pc, #24]	; (800a0b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800a09e:	1dba      	adds	r2, r7, #6
 800a0a0:	8812      	ldrh	r2, [r2, #0]
 800a0a2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a0a4:	1dbb      	adds	r3, r7, #6
 800a0a6:	881b      	ldrh	r3, [r3, #0]
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	f7fb f8af 	bl	800520c <HAL_GPIO_EXTI_Callback>
  }
}
 800a0ae:	46c0      	nop			; (mov r8, r8)
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	b002      	add	sp, #8
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	46c0      	nop			; (mov r8, r8)
 800a0b8:	40010400 	.word	0x40010400

0800a0bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d101      	bne.n	800a0ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e082      	b.n	800a1d4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2241      	movs	r2, #65	; 0x41
 800a0d2:	5c9b      	ldrb	r3, [r3, r2]
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d107      	bne.n	800a0ea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2240      	movs	r2, #64	; 0x40
 800a0de:	2100      	movs	r1, #0
 800a0e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	0018      	movs	r0, r3
 800a0e6:	f7fa fc3f 	bl	8004968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2241      	movs	r2, #65	; 0x41
 800a0ee:	2124      	movs	r1, #36	; 0x24
 800a0f0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2101      	movs	r1, #1
 800a0fe:	438a      	bics	r2, r1
 800a100:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4934      	ldr	r1, [pc, #208]	; (800a1dc <HAL_I2C_Init+0x120>)
 800a10c:	400a      	ands	r2, r1
 800a10e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	689a      	ldr	r2, [r3, #8]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4931      	ldr	r1, [pc, #196]	; (800a1e0 <HAL_I2C_Init+0x124>)
 800a11c:	400a      	ands	r2, r1
 800a11e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d108      	bne.n	800a13a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	689a      	ldr	r2, [r3, #8]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2180      	movs	r1, #128	; 0x80
 800a132:	0209      	lsls	r1, r1, #8
 800a134:	430a      	orrs	r2, r1
 800a136:	609a      	str	r2, [r3, #8]
 800a138:	e007      	b.n	800a14a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	689a      	ldr	r2, [r3, #8]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2184      	movs	r1, #132	; 0x84
 800a144:	0209      	lsls	r1, r1, #8
 800a146:	430a      	orrs	r2, r1
 800a148:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d104      	bne.n	800a15c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2280      	movs	r2, #128	; 0x80
 800a158:	0112      	lsls	r2, r2, #4
 800a15a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	685a      	ldr	r2, [r3, #4]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	491f      	ldr	r1, [pc, #124]	; (800a1e4 <HAL_I2C_Init+0x128>)
 800a168:	430a      	orrs	r2, r1
 800a16a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68da      	ldr	r2, [r3, #12]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	491a      	ldr	r1, [pc, #104]	; (800a1e0 <HAL_I2C_Init+0x124>)
 800a178:	400a      	ands	r2, r1
 800a17a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	691a      	ldr	r2, [r3, #16]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	695b      	ldr	r3, [r3, #20]
 800a184:	431a      	orrs	r2, r3
 800a186:	0011      	movs	r1, r2
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	021a      	lsls	r2, r3, #8
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	430a      	orrs	r2, r1
 800a194:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	69d9      	ldr	r1, [r3, #28]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a1a      	ldr	r2, [r3, #32]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	430a      	orrs	r2, r1
 800a1a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2101      	movs	r1, #1
 800a1b2:	430a      	orrs	r2, r1
 800a1b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2241      	movs	r2, #65	; 0x41
 800a1c0:	2120      	movs	r1, #32
 800a1c2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2242      	movs	r2, #66	; 0x42
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	b002      	add	sp, #8
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	f0ffffff 	.word	0xf0ffffff
 800a1e0:	ffff7fff 	.word	0xffff7fff
 800a1e4:	02008000 	.word	0x02008000

0800a1e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1e8:	b590      	push	{r4, r7, lr}
 800a1ea:	b089      	sub	sp, #36	; 0x24
 800a1ec:	af02      	add	r7, sp, #8
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	000c      	movs	r4, r1
 800a1f2:	0010      	movs	r0, r2
 800a1f4:	0019      	movs	r1, r3
 800a1f6:	230a      	movs	r3, #10
 800a1f8:	18fb      	adds	r3, r7, r3
 800a1fa:	1c22      	adds	r2, r4, #0
 800a1fc:	801a      	strh	r2, [r3, #0]
 800a1fe:	2308      	movs	r3, #8
 800a200:	18fb      	adds	r3, r7, r3
 800a202:	1c02      	adds	r2, r0, #0
 800a204:	801a      	strh	r2, [r3, #0]
 800a206:	1dbb      	adds	r3, r7, #6
 800a208:	1c0a      	adds	r2, r1, #0
 800a20a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2241      	movs	r2, #65	; 0x41
 800a210:	5c9b      	ldrb	r3, [r3, r2]
 800a212:	b2db      	uxtb	r3, r3
 800a214:	2b20      	cmp	r3, #32
 800a216:	d000      	beq.n	800a21a <HAL_I2C_Mem_Write+0x32>
 800a218:	e10c      	b.n	800a434 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d004      	beq.n	800a22a <HAL_I2C_Mem_Write+0x42>
 800a220:	232c      	movs	r3, #44	; 0x2c
 800a222:	18fb      	adds	r3, r7, r3
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d105      	bne.n	800a236 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2280      	movs	r2, #128	; 0x80
 800a22e:	0092      	lsls	r2, r2, #2
 800a230:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e0ff      	b.n	800a436 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2240      	movs	r2, #64	; 0x40
 800a23a:	5c9b      	ldrb	r3, [r3, r2]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d101      	bne.n	800a244 <HAL_I2C_Mem_Write+0x5c>
 800a240:	2302      	movs	r3, #2
 800a242:	e0f8      	b.n	800a436 <HAL_I2C_Mem_Write+0x24e>
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2240      	movs	r2, #64	; 0x40
 800a248:	2101      	movs	r1, #1
 800a24a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a24c:	f7fe fd48 	bl	8008ce0 <HAL_GetTick>
 800a250:	0003      	movs	r3, r0
 800a252:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a254:	2380      	movs	r3, #128	; 0x80
 800a256:	0219      	lsls	r1, r3, #8
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	9300      	str	r3, [sp, #0]
 800a25e:	2319      	movs	r3, #25
 800a260:	2201      	movs	r2, #1
 800a262:	f000 fb0b 	bl	800a87c <I2C_WaitOnFlagUntilTimeout>
 800a266:	1e03      	subs	r3, r0, #0
 800a268:	d001      	beq.n	800a26e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e0e3      	b.n	800a436 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2241      	movs	r2, #65	; 0x41
 800a272:	2121      	movs	r1, #33	; 0x21
 800a274:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2242      	movs	r2, #66	; 0x42
 800a27a:	2140      	movs	r1, #64	; 0x40
 800a27c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a288:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	222c      	movs	r2, #44	; 0x2c
 800a28e:	18ba      	adds	r2, r7, r2
 800a290:	8812      	ldrh	r2, [r2, #0]
 800a292:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2200      	movs	r2, #0
 800a298:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a29a:	1dbb      	adds	r3, r7, #6
 800a29c:	881c      	ldrh	r4, [r3, #0]
 800a29e:	2308      	movs	r3, #8
 800a2a0:	18fb      	adds	r3, r7, r3
 800a2a2:	881a      	ldrh	r2, [r3, #0]
 800a2a4:	230a      	movs	r3, #10
 800a2a6:	18fb      	adds	r3, r7, r3
 800a2a8:	8819      	ldrh	r1, [r3, #0]
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	9301      	str	r3, [sp, #4]
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	0023      	movs	r3, r4
 800a2b6:	f000 f9f9 	bl	800a6ac <I2C_RequestMemoryWrite>
 800a2ba:	1e03      	subs	r3, r0, #0
 800a2bc:	d005      	beq.n	800a2ca <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2240      	movs	r2, #64	; 0x40
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e0b5      	b.n	800a436 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	2bff      	cmp	r3, #255	; 0xff
 800a2d2:	d911      	bls.n	800a2f8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	22ff      	movs	r2, #255	; 0xff
 800a2d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	2380      	movs	r3, #128	; 0x80
 800a2e2:	045c      	lsls	r4, r3, #17
 800a2e4:	230a      	movs	r3, #10
 800a2e6:	18fb      	adds	r3, r7, r3
 800a2e8:	8819      	ldrh	r1, [r3, #0]
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	0023      	movs	r3, r4
 800a2f2:	f000 fbe3 	bl	800aabc <I2C_TransferConfig>
 800a2f6:	e012      	b.n	800a31e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a306:	b2da      	uxtb	r2, r3
 800a308:	2380      	movs	r3, #128	; 0x80
 800a30a:	049c      	lsls	r4, r3, #18
 800a30c:	230a      	movs	r3, #10
 800a30e:	18fb      	adds	r3, r7, r3
 800a310:	8819      	ldrh	r1, [r3, #0]
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	2300      	movs	r3, #0
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	0023      	movs	r3, r4
 800a31a:	f000 fbcf 	bl	800aabc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a31e:	697a      	ldr	r2, [r7, #20]
 800a320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	0018      	movs	r0, r3
 800a326:	f000 fae8 	bl	800a8fa <I2C_WaitOnTXISFlagUntilTimeout>
 800a32a:	1e03      	subs	r3, r0, #0
 800a32c:	d001      	beq.n	800a332 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e081      	b.n	800a436 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a336:	781a      	ldrb	r2, [r3, #0]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a342:	1c5a      	adds	r2, r3, #1
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	3b01      	subs	r3, #1
 800a350:	b29a      	uxth	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a35a:	3b01      	subs	r3, #1
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a366:	b29b      	uxth	r3, r3
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d03a      	beq.n	800a3e2 <HAL_I2C_Mem_Write+0x1fa>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a370:	2b00      	cmp	r3, #0
 800a372:	d136      	bne.n	800a3e2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a376:	68f8      	ldr	r0, [r7, #12]
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	0013      	movs	r3, r2
 800a37e:	2200      	movs	r2, #0
 800a380:	2180      	movs	r1, #128	; 0x80
 800a382:	f000 fa7b 	bl	800a87c <I2C_WaitOnFlagUntilTimeout>
 800a386:	1e03      	subs	r3, r0, #0
 800a388:	d001      	beq.n	800a38e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e053      	b.n	800a436 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a392:	b29b      	uxth	r3, r3
 800a394:	2bff      	cmp	r3, #255	; 0xff
 800a396:	d911      	bls.n	800a3bc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	22ff      	movs	r2, #255	; 0xff
 800a39c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	2380      	movs	r3, #128	; 0x80
 800a3a6:	045c      	lsls	r4, r3, #17
 800a3a8:	230a      	movs	r3, #10
 800a3aa:	18fb      	adds	r3, r7, r3
 800a3ac:	8819      	ldrh	r1, [r3, #0]
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	0023      	movs	r3, r4
 800a3b6:	f000 fb81 	bl	800aabc <I2C_TransferConfig>
 800a3ba:	e012      	b.n	800a3e2 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3ca:	b2da      	uxtb	r2, r3
 800a3cc:	2380      	movs	r3, #128	; 0x80
 800a3ce:	049c      	lsls	r4, r3, #18
 800a3d0:	230a      	movs	r3, #10
 800a3d2:	18fb      	adds	r3, r7, r3
 800a3d4:	8819      	ldrh	r1, [r3, #0]
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	2300      	movs	r3, #0
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	0023      	movs	r3, r4
 800a3de:	f000 fb6d 	bl	800aabc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d198      	bne.n	800a31e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3ec:	697a      	ldr	r2, [r7, #20]
 800a3ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	0018      	movs	r0, r3
 800a3f4:	f000 fac0 	bl	800a978 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a3f8:	1e03      	subs	r3, r0, #0
 800a3fa:	d001      	beq.n	800a400 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e01a      	b.n	800a436 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2220      	movs	r2, #32
 800a406:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	685a      	ldr	r2, [r3, #4]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	490b      	ldr	r1, [pc, #44]	; (800a440 <HAL_I2C_Mem_Write+0x258>)
 800a414:	400a      	ands	r2, r1
 800a416:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2241      	movs	r2, #65	; 0x41
 800a41c:	2120      	movs	r1, #32
 800a41e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2242      	movs	r2, #66	; 0x42
 800a424:	2100      	movs	r1, #0
 800a426:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2240      	movs	r2, #64	; 0x40
 800a42c:	2100      	movs	r1, #0
 800a42e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a430:	2300      	movs	r3, #0
 800a432:	e000      	b.n	800a436 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800a434:	2302      	movs	r3, #2
  }
}
 800a436:	0018      	movs	r0, r3
 800a438:	46bd      	mov	sp, r7
 800a43a:	b007      	add	sp, #28
 800a43c:	bd90      	pop	{r4, r7, pc}
 800a43e:	46c0      	nop			; (mov r8, r8)
 800a440:	fe00e800 	.word	0xfe00e800

0800a444 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a444:	b590      	push	{r4, r7, lr}
 800a446:	b089      	sub	sp, #36	; 0x24
 800a448:	af02      	add	r7, sp, #8
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	000c      	movs	r4, r1
 800a44e:	0010      	movs	r0, r2
 800a450:	0019      	movs	r1, r3
 800a452:	230a      	movs	r3, #10
 800a454:	18fb      	adds	r3, r7, r3
 800a456:	1c22      	adds	r2, r4, #0
 800a458:	801a      	strh	r2, [r3, #0]
 800a45a:	2308      	movs	r3, #8
 800a45c:	18fb      	adds	r3, r7, r3
 800a45e:	1c02      	adds	r2, r0, #0
 800a460:	801a      	strh	r2, [r3, #0]
 800a462:	1dbb      	adds	r3, r7, #6
 800a464:	1c0a      	adds	r2, r1, #0
 800a466:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2241      	movs	r2, #65	; 0x41
 800a46c:	5c9b      	ldrb	r3, [r3, r2]
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	2b20      	cmp	r3, #32
 800a472:	d000      	beq.n	800a476 <HAL_I2C_Mem_Read+0x32>
 800a474:	e110      	b.n	800a698 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800a476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d004      	beq.n	800a486 <HAL_I2C_Mem_Read+0x42>
 800a47c:	232c      	movs	r3, #44	; 0x2c
 800a47e:	18fb      	adds	r3, r7, r3
 800a480:	881b      	ldrh	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d105      	bne.n	800a492 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2280      	movs	r2, #128	; 0x80
 800a48a:	0092      	lsls	r2, r2, #2
 800a48c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	e103      	b.n	800a69a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2240      	movs	r2, #64	; 0x40
 800a496:	5c9b      	ldrb	r3, [r3, r2]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d101      	bne.n	800a4a0 <HAL_I2C_Mem_Read+0x5c>
 800a49c:	2302      	movs	r3, #2
 800a49e:	e0fc      	b.n	800a69a <HAL_I2C_Mem_Read+0x256>
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2240      	movs	r2, #64	; 0x40
 800a4a4:	2101      	movs	r1, #1
 800a4a6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a4a8:	f7fe fc1a 	bl	8008ce0 <HAL_GetTick>
 800a4ac:	0003      	movs	r3, r0
 800a4ae:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a4b0:	2380      	movs	r3, #128	; 0x80
 800a4b2:	0219      	lsls	r1, r3, #8
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	2319      	movs	r3, #25
 800a4bc:	2201      	movs	r2, #1
 800a4be:	f000 f9dd 	bl	800a87c <I2C_WaitOnFlagUntilTimeout>
 800a4c2:	1e03      	subs	r3, r0, #0
 800a4c4:	d001      	beq.n	800a4ca <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e0e7      	b.n	800a69a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2241      	movs	r2, #65	; 0x41
 800a4ce:	2122      	movs	r1, #34	; 0x22
 800a4d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2242      	movs	r2, #66	; 0x42
 800a4d6:	2140      	movs	r1, #64	; 0x40
 800a4d8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	222c      	movs	r2, #44	; 0x2c
 800a4ea:	18ba      	adds	r2, r7, r2
 800a4ec:	8812      	ldrh	r2, [r2, #0]
 800a4ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a4f6:	1dbb      	adds	r3, r7, #6
 800a4f8:	881c      	ldrh	r4, [r3, #0]
 800a4fa:	2308      	movs	r3, #8
 800a4fc:	18fb      	adds	r3, r7, r3
 800a4fe:	881a      	ldrh	r2, [r3, #0]
 800a500:	230a      	movs	r3, #10
 800a502:	18fb      	adds	r3, r7, r3
 800a504:	8819      	ldrh	r1, [r3, #0]
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	0023      	movs	r3, r4
 800a512:	f000 f92f 	bl	800a774 <I2C_RequestMemoryRead>
 800a516:	1e03      	subs	r3, r0, #0
 800a518:	d005      	beq.n	800a526 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2240      	movs	r2, #64	; 0x40
 800a51e:	2100      	movs	r1, #0
 800a520:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e0b9      	b.n	800a69a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	2bff      	cmp	r3, #255	; 0xff
 800a52e:	d911      	bls.n	800a554 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	22ff      	movs	r2, #255	; 0xff
 800a534:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a53a:	b2da      	uxtb	r2, r3
 800a53c:	2380      	movs	r3, #128	; 0x80
 800a53e:	045c      	lsls	r4, r3, #17
 800a540:	230a      	movs	r3, #10
 800a542:	18fb      	adds	r3, r7, r3
 800a544:	8819      	ldrh	r1, [r3, #0]
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	4b56      	ldr	r3, [pc, #344]	; (800a6a4 <HAL_I2C_Mem_Read+0x260>)
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	0023      	movs	r3, r4
 800a54e:	f000 fab5 	bl	800aabc <I2C_TransferConfig>
 800a552:	e012      	b.n	800a57a <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a558:	b29a      	uxth	r2, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a562:	b2da      	uxtb	r2, r3
 800a564:	2380      	movs	r3, #128	; 0x80
 800a566:	049c      	lsls	r4, r3, #18
 800a568:	230a      	movs	r3, #10
 800a56a:	18fb      	adds	r3, r7, r3
 800a56c:	8819      	ldrh	r1, [r3, #0]
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	4b4c      	ldr	r3, [pc, #304]	; (800a6a4 <HAL_I2C_Mem_Read+0x260>)
 800a572:	9300      	str	r3, [sp, #0]
 800a574:	0023      	movs	r3, r4
 800a576:	f000 faa1 	bl	800aabc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a57a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	0013      	movs	r3, r2
 800a584:	2200      	movs	r2, #0
 800a586:	2104      	movs	r1, #4
 800a588:	f000 f978 	bl	800a87c <I2C_WaitOnFlagUntilTimeout>
 800a58c:	1e03      	subs	r3, r0, #0
 800a58e:	d001      	beq.n	800a594 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800a590:	2301      	movs	r3, #1
 800a592:	e082      	b.n	800a69a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59e:	b2d2      	uxtb	r2, r2
 800a5a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a6:	1c5a      	adds	r2, r3, #1
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d03a      	beq.n	800a646 <HAL_I2C_Mem_Read+0x202>
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d136      	bne.n	800a646 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a5d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	0013      	movs	r3, r2
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2180      	movs	r1, #128	; 0x80
 800a5e6:	f000 f949 	bl	800a87c <I2C_WaitOnFlagUntilTimeout>
 800a5ea:	1e03      	subs	r3, r0, #0
 800a5ec:	d001      	beq.n	800a5f2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e053      	b.n	800a69a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	2bff      	cmp	r3, #255	; 0xff
 800a5fa:	d911      	bls.n	800a620 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	22ff      	movs	r2, #255	; 0xff
 800a600:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a606:	b2da      	uxtb	r2, r3
 800a608:	2380      	movs	r3, #128	; 0x80
 800a60a:	045c      	lsls	r4, r3, #17
 800a60c:	230a      	movs	r3, #10
 800a60e:	18fb      	adds	r3, r7, r3
 800a610:	8819      	ldrh	r1, [r3, #0]
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	2300      	movs	r3, #0
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	0023      	movs	r3, r4
 800a61a:	f000 fa4f 	bl	800aabc <I2C_TransferConfig>
 800a61e:	e012      	b.n	800a646 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a624:	b29a      	uxth	r2, r3
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	2380      	movs	r3, #128	; 0x80
 800a632:	049c      	lsls	r4, r3, #18
 800a634:	230a      	movs	r3, #10
 800a636:	18fb      	adds	r3, r7, r3
 800a638:	8819      	ldrh	r1, [r3, #0]
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	2300      	movs	r3, #0
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	0023      	movs	r3, r4
 800a642:	f000 fa3b 	bl	800aabc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d194      	bne.n	800a57a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a650:	697a      	ldr	r2, [r7, #20]
 800a652:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	0018      	movs	r0, r3
 800a658:	f000 f98e 	bl	800a978 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a65c:	1e03      	subs	r3, r0, #0
 800a65e:	d001      	beq.n	800a664 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e01a      	b.n	800a69a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2220      	movs	r2, #32
 800a66a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	685a      	ldr	r2, [r3, #4]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	490c      	ldr	r1, [pc, #48]	; (800a6a8 <HAL_I2C_Mem_Read+0x264>)
 800a678:	400a      	ands	r2, r1
 800a67a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2241      	movs	r2, #65	; 0x41
 800a680:	2120      	movs	r1, #32
 800a682:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2242      	movs	r2, #66	; 0x42
 800a688:	2100      	movs	r1, #0
 800a68a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2240      	movs	r2, #64	; 0x40
 800a690:	2100      	movs	r1, #0
 800a692:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a694:	2300      	movs	r3, #0
 800a696:	e000      	b.n	800a69a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800a698:	2302      	movs	r3, #2
  }
}
 800a69a:	0018      	movs	r0, r3
 800a69c:	46bd      	mov	sp, r7
 800a69e:	b007      	add	sp, #28
 800a6a0:	bd90      	pop	{r4, r7, pc}
 800a6a2:	46c0      	nop			; (mov r8, r8)
 800a6a4:	80002400 	.word	0x80002400
 800a6a8:	fe00e800 	.word	0xfe00e800

0800a6ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a6ac:	b5b0      	push	{r4, r5, r7, lr}
 800a6ae:	b086      	sub	sp, #24
 800a6b0:	af02      	add	r7, sp, #8
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	000c      	movs	r4, r1
 800a6b6:	0010      	movs	r0, r2
 800a6b8:	0019      	movs	r1, r3
 800a6ba:	250a      	movs	r5, #10
 800a6bc:	197b      	adds	r3, r7, r5
 800a6be:	1c22      	adds	r2, r4, #0
 800a6c0:	801a      	strh	r2, [r3, #0]
 800a6c2:	2308      	movs	r3, #8
 800a6c4:	18fb      	adds	r3, r7, r3
 800a6c6:	1c02      	adds	r2, r0, #0
 800a6c8:	801a      	strh	r2, [r3, #0]
 800a6ca:	1dbb      	adds	r3, r7, #6
 800a6cc:	1c0a      	adds	r2, r1, #0
 800a6ce:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a6d0:	1dbb      	adds	r3, r7, #6
 800a6d2:	881b      	ldrh	r3, [r3, #0]
 800a6d4:	b2da      	uxtb	r2, r3
 800a6d6:	2380      	movs	r3, #128	; 0x80
 800a6d8:	045c      	lsls	r4, r3, #17
 800a6da:	197b      	adds	r3, r7, r5
 800a6dc:	8819      	ldrh	r1, [r3, #0]
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	4b23      	ldr	r3, [pc, #140]	; (800a770 <I2C_RequestMemoryWrite+0xc4>)
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	0023      	movs	r3, r4
 800a6e6:	f000 f9e9 	bl	800aabc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6ec:	6a39      	ldr	r1, [r7, #32]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	0018      	movs	r0, r3
 800a6f2:	f000 f902 	bl	800a8fa <I2C_WaitOnTXISFlagUntilTimeout>
 800a6f6:	1e03      	subs	r3, r0, #0
 800a6f8:	d001      	beq.n	800a6fe <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e033      	b.n	800a766 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a6fe:	1dbb      	adds	r3, r7, #6
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d107      	bne.n	800a716 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a706:	2308      	movs	r3, #8
 800a708:	18fb      	adds	r3, r7, r3
 800a70a:	881b      	ldrh	r3, [r3, #0]
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	629a      	str	r2, [r3, #40]	; 0x28
 800a714:	e019      	b.n	800a74a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a716:	2308      	movs	r3, #8
 800a718:	18fb      	adds	r3, r7, r3
 800a71a:	881b      	ldrh	r3, [r3, #0]
 800a71c:	0a1b      	lsrs	r3, r3, #8
 800a71e:	b29b      	uxth	r3, r3
 800a720:	b2da      	uxtb	r2, r3
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a72a:	6a39      	ldr	r1, [r7, #32]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	0018      	movs	r0, r3
 800a730:	f000 f8e3 	bl	800a8fa <I2C_WaitOnTXISFlagUntilTimeout>
 800a734:	1e03      	subs	r3, r0, #0
 800a736:	d001      	beq.n	800a73c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	e014      	b.n	800a766 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a73c:	2308      	movs	r3, #8
 800a73e:	18fb      	adds	r3, r7, r3
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	b2da      	uxtb	r2, r3
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a74a:	6a3a      	ldr	r2, [r7, #32]
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	0013      	movs	r3, r2
 800a754:	2200      	movs	r2, #0
 800a756:	2180      	movs	r1, #128	; 0x80
 800a758:	f000 f890 	bl	800a87c <I2C_WaitOnFlagUntilTimeout>
 800a75c:	1e03      	subs	r3, r0, #0
 800a75e:	d001      	beq.n	800a764 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	e000      	b.n	800a766 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	0018      	movs	r0, r3
 800a768:	46bd      	mov	sp, r7
 800a76a:	b004      	add	sp, #16
 800a76c:	bdb0      	pop	{r4, r5, r7, pc}
 800a76e:	46c0      	nop			; (mov r8, r8)
 800a770:	80002000 	.word	0x80002000

0800a774 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a774:	b5b0      	push	{r4, r5, r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af02      	add	r7, sp, #8
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	000c      	movs	r4, r1
 800a77e:	0010      	movs	r0, r2
 800a780:	0019      	movs	r1, r3
 800a782:	250a      	movs	r5, #10
 800a784:	197b      	adds	r3, r7, r5
 800a786:	1c22      	adds	r2, r4, #0
 800a788:	801a      	strh	r2, [r3, #0]
 800a78a:	2308      	movs	r3, #8
 800a78c:	18fb      	adds	r3, r7, r3
 800a78e:	1c02      	adds	r2, r0, #0
 800a790:	801a      	strh	r2, [r3, #0]
 800a792:	1dbb      	adds	r3, r7, #6
 800a794:	1c0a      	adds	r2, r1, #0
 800a796:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a798:	1dbb      	adds	r3, r7, #6
 800a79a:	881b      	ldrh	r3, [r3, #0]
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	197b      	adds	r3, r7, r5
 800a7a0:	8819      	ldrh	r1, [r3, #0]
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	4b23      	ldr	r3, [pc, #140]	; (800a834 <I2C_RequestMemoryRead+0xc0>)
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	f000 f987 	bl	800aabc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b0:	6a39      	ldr	r1, [r7, #32]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	0018      	movs	r0, r3
 800a7b6:	f000 f8a0 	bl	800a8fa <I2C_WaitOnTXISFlagUntilTimeout>
 800a7ba:	1e03      	subs	r3, r0, #0
 800a7bc:	d001      	beq.n	800a7c2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e033      	b.n	800a82a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a7c2:	1dbb      	adds	r3, r7, #6
 800a7c4:	881b      	ldrh	r3, [r3, #0]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d107      	bne.n	800a7da <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a7ca:	2308      	movs	r3, #8
 800a7cc:	18fb      	adds	r3, r7, r3
 800a7ce:	881b      	ldrh	r3, [r3, #0]
 800a7d0:	b2da      	uxtb	r2, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	629a      	str	r2, [r3, #40]	; 0x28
 800a7d8:	e019      	b.n	800a80e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a7da:	2308      	movs	r3, #8
 800a7dc:	18fb      	adds	r3, r7, r3
 800a7de:	881b      	ldrh	r3, [r3, #0]
 800a7e0:	0a1b      	lsrs	r3, r3, #8
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	b2da      	uxtb	r2, r3
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ee:	6a39      	ldr	r1, [r7, #32]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	0018      	movs	r0, r3
 800a7f4:	f000 f881 	bl	800a8fa <I2C_WaitOnTXISFlagUntilTimeout>
 800a7f8:	1e03      	subs	r3, r0, #0
 800a7fa:	d001      	beq.n	800a800 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e014      	b.n	800a82a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a800:	2308      	movs	r3, #8
 800a802:	18fb      	adds	r3, r7, r3
 800a804:	881b      	ldrh	r3, [r3, #0]
 800a806:	b2da      	uxtb	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a80e:	6a3a      	ldr	r2, [r7, #32]
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	0013      	movs	r3, r2
 800a818:	2200      	movs	r2, #0
 800a81a:	2140      	movs	r1, #64	; 0x40
 800a81c:	f000 f82e 	bl	800a87c <I2C_WaitOnFlagUntilTimeout>
 800a820:	1e03      	subs	r3, r0, #0
 800a822:	d001      	beq.n	800a828 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	e000      	b.n	800a82a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	0018      	movs	r0, r3
 800a82c:	46bd      	mov	sp, r7
 800a82e:	b004      	add	sp, #16
 800a830:	bdb0      	pop	{r4, r5, r7, pc}
 800a832:	46c0      	nop			; (mov r8, r8)
 800a834:	80002000 	.word	0x80002000

0800a838 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	2202      	movs	r2, #2
 800a848:	4013      	ands	r3, r2
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d103      	bne.n	800a856 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2200      	movs	r2, #0
 800a854:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	2201      	movs	r2, #1
 800a85e:	4013      	ands	r3, r2
 800a860:	2b01      	cmp	r3, #1
 800a862:	d007      	beq.n	800a874 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	699a      	ldr	r2, [r3, #24]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2101      	movs	r1, #1
 800a870:	430a      	orrs	r2, r1
 800a872:	619a      	str	r2, [r3, #24]
  }
}
 800a874:	46c0      	nop			; (mov r8, r8)
 800a876:	46bd      	mov	sp, r7
 800a878:	b002      	add	sp, #8
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	603b      	str	r3, [r7, #0]
 800a888:	1dfb      	adds	r3, r7, #7
 800a88a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a88c:	e021      	b.n	800a8d2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	3301      	adds	r3, #1
 800a892:	d01e      	beq.n	800a8d2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a894:	f7fe fa24 	bl	8008ce0 <HAL_GetTick>
 800a898:	0002      	movs	r2, r0
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d302      	bcc.n	800a8aa <I2C_WaitOnFlagUntilTimeout+0x2e>
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d113      	bne.n	800a8d2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ae:	2220      	movs	r2, #32
 800a8b0:	431a      	orrs	r2, r3
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2241      	movs	r2, #65	; 0x41
 800a8ba:	2120      	movs	r1, #32
 800a8bc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2242      	movs	r2, #66	; 0x42
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2240      	movs	r2, #64	; 0x40
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e00f      	b.n	800a8f2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	4013      	ands	r3, r2
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	425a      	negs	r2, r3
 800a8e2:	4153      	adcs	r3, r2
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	001a      	movs	r2, r3
 800a8e8:	1dfb      	adds	r3, r7, #7
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d0ce      	beq.n	800a88e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	0018      	movs	r0, r3
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	b004      	add	sp, #16
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b084      	sub	sp, #16
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	60f8      	str	r0, [r7, #12]
 800a902:	60b9      	str	r1, [r7, #8]
 800a904:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a906:	e02b      	b.n	800a960 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	68b9      	ldr	r1, [r7, #8]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	0018      	movs	r0, r3
 800a910:	f000 f86e 	bl	800a9f0 <I2C_IsAcknowledgeFailed>
 800a914:	1e03      	subs	r3, r0, #0
 800a916:	d001      	beq.n	800a91c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	e029      	b.n	800a970 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	3301      	adds	r3, #1
 800a920:	d01e      	beq.n	800a960 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a922:	f7fe f9dd 	bl	8008ce0 <HAL_GetTick>
 800a926:	0002      	movs	r2, r0
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	1ad3      	subs	r3, r2, r3
 800a92c:	68ba      	ldr	r2, [r7, #8]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d302      	bcc.n	800a938 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d113      	bne.n	800a960 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a93c:	2220      	movs	r2, #32
 800a93e:	431a      	orrs	r2, r3
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2241      	movs	r2, #65	; 0x41
 800a948:	2120      	movs	r1, #32
 800a94a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2242      	movs	r2, #66	; 0x42
 800a950:	2100      	movs	r1, #0
 800a952:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2240      	movs	r2, #64	; 0x40
 800a958:	2100      	movs	r1, #0
 800a95a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	e007      	b.n	800a970 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	699b      	ldr	r3, [r3, #24]
 800a966:	2202      	movs	r2, #2
 800a968:	4013      	ands	r3, r2
 800a96a:	2b02      	cmp	r3, #2
 800a96c:	d1cc      	bne.n	800a908 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	0018      	movs	r0, r3
 800a972:	46bd      	mov	sp, r7
 800a974:	b004      	add	sp, #16
 800a976:	bd80      	pop	{r7, pc}

0800a978 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a984:	e028      	b.n	800a9d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	68b9      	ldr	r1, [r7, #8]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	0018      	movs	r0, r3
 800a98e:	f000 f82f 	bl	800a9f0 <I2C_IsAcknowledgeFailed>
 800a992:	1e03      	subs	r3, r0, #0
 800a994:	d001      	beq.n	800a99a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a996:	2301      	movs	r3, #1
 800a998:	e026      	b.n	800a9e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a99a:	f7fe f9a1 	bl	8008ce0 <HAL_GetTick>
 800a99e:	0002      	movs	r2, r0
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	68ba      	ldr	r2, [r7, #8]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d302      	bcc.n	800a9b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d113      	bne.n	800a9d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9b4:	2220      	movs	r2, #32
 800a9b6:	431a      	orrs	r2, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2241      	movs	r2, #65	; 0x41
 800a9c0:	2120      	movs	r1, #32
 800a9c2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2242      	movs	r2, #66	; 0x42
 800a9c8:	2100      	movs	r1, #0
 800a9ca:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2240      	movs	r2, #64	; 0x40
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e007      	b.n	800a9e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	2220      	movs	r2, #32
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	2b20      	cmp	r3, #32
 800a9e4:	d1cf      	bne.n	800a986 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	0018      	movs	r0, r3
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	b004      	add	sp, #16
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	2210      	movs	r2, #16
 800aa04:	4013      	ands	r3, r2
 800aa06:	2b10      	cmp	r3, #16
 800aa08:	d151      	bne.n	800aaae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa0a:	e021      	b.n	800aa50 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	d01e      	beq.n	800aa50 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa12:	f7fe f965 	bl	8008ce0 <HAL_GetTick>
 800aa16:	0002      	movs	r2, r0
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d302      	bcc.n	800aa28 <I2C_IsAcknowledgeFailed+0x38>
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d113      	bne.n	800aa50 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	431a      	orrs	r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2241      	movs	r2, #65	; 0x41
 800aa38:	2120      	movs	r1, #32
 800aa3a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2242      	movs	r2, #66	; 0x42
 800aa40:	2100      	movs	r1, #0
 800aa42:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2240      	movs	r2, #64	; 0x40
 800aa48:	2100      	movs	r1, #0
 800aa4a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e02f      	b.n	800aab0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	2220      	movs	r2, #32
 800aa58:	4013      	ands	r3, r2
 800aa5a:	2b20      	cmp	r3, #32
 800aa5c:	d1d6      	bne.n	800aa0c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2210      	movs	r2, #16
 800aa64:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2220      	movs	r2, #32
 800aa6c:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	0018      	movs	r0, r3
 800aa72:	f7ff fee1 	bl	800a838 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	490d      	ldr	r1, [pc, #52]	; (800aab8 <I2C_IsAcknowledgeFailed+0xc8>)
 800aa82:	400a      	ands	r2, r1
 800aa84:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa8a:	2204      	movs	r2, #4
 800aa8c:	431a      	orrs	r2, r3
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2241      	movs	r2, #65	; 0x41
 800aa96:	2120      	movs	r1, #32
 800aa98:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2242      	movs	r2, #66	; 0x42
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2240      	movs	r2, #64	; 0x40
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e000      	b.n	800aab0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	0018      	movs	r0, r3
 800aab2:	46bd      	mov	sp, r7
 800aab4:	b004      	add	sp, #16
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	fe00e800 	.word	0xfe00e800

0800aabc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800aabc:	b590      	push	{r4, r7, lr}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	0008      	movs	r0, r1
 800aac6:	0011      	movs	r1, r2
 800aac8:	607b      	str	r3, [r7, #4]
 800aaca:	240a      	movs	r4, #10
 800aacc:	193b      	adds	r3, r7, r4
 800aace:	1c02      	adds	r2, r0, #0
 800aad0:	801a      	strh	r2, [r3, #0]
 800aad2:	2009      	movs	r0, #9
 800aad4:	183b      	adds	r3, r7, r0
 800aad6:	1c0a      	adds	r2, r1, #0
 800aad8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	6a3a      	ldr	r2, [r7, #32]
 800aae2:	0d51      	lsrs	r1, r2, #21
 800aae4:	2280      	movs	r2, #128	; 0x80
 800aae6:	00d2      	lsls	r2, r2, #3
 800aae8:	400a      	ands	r2, r1
 800aaea:	490e      	ldr	r1, [pc, #56]	; (800ab24 <I2C_TransferConfig+0x68>)
 800aaec:	430a      	orrs	r2, r1
 800aaee:	43d2      	mvns	r2, r2
 800aaf0:	401a      	ands	r2, r3
 800aaf2:	0011      	movs	r1, r2
 800aaf4:	193b      	adds	r3, r7, r4
 800aaf6:	881b      	ldrh	r3, [r3, #0]
 800aaf8:	059b      	lsls	r3, r3, #22
 800aafa:	0d9a      	lsrs	r2, r3, #22
 800aafc:	183b      	adds	r3, r7, r0
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	0418      	lsls	r0, r3, #16
 800ab02:	23ff      	movs	r3, #255	; 0xff
 800ab04:	041b      	lsls	r3, r3, #16
 800ab06:	4003      	ands	r3, r0
 800ab08:	431a      	orrs	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	431a      	orrs	r2, r3
 800ab0e:	6a3b      	ldr	r3, [r7, #32]
 800ab10:	431a      	orrs	r2, r3
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	430a      	orrs	r2, r1
 800ab18:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800ab1a:	46c0      	nop			; (mov r8, r8)
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	b005      	add	sp, #20
 800ab20:	bd90      	pop	{r4, r7, pc}
 800ab22:	46c0      	nop			; (mov r8, r8)
 800ab24:	03ff63ff 	.word	0x03ff63ff

0800ab28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2241      	movs	r2, #65	; 0x41
 800ab36:	5c9b      	ldrb	r3, [r3, r2]
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b20      	cmp	r3, #32
 800ab3c:	d138      	bne.n	800abb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2240      	movs	r2, #64	; 0x40
 800ab42:	5c9b      	ldrb	r3, [r3, r2]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d101      	bne.n	800ab4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ab48:	2302      	movs	r3, #2
 800ab4a:	e032      	b.n	800abb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2240      	movs	r2, #64	; 0x40
 800ab50:	2101      	movs	r1, #1
 800ab52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2241      	movs	r2, #65	; 0x41
 800ab58:	2124      	movs	r1, #36	; 0x24
 800ab5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2101      	movs	r1, #1
 800ab68:	438a      	bics	r2, r1
 800ab6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4911      	ldr	r1, [pc, #68]	; (800abbc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800ab78:	400a      	ands	r2, r1
 800ab7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	6819      	ldr	r1, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	683a      	ldr	r2, [r7, #0]
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2101      	movs	r1, #1
 800ab98:	430a      	orrs	r2, r1
 800ab9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2241      	movs	r2, #65	; 0x41
 800aba0:	2120      	movs	r1, #32
 800aba2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2240      	movs	r2, #64	; 0x40
 800aba8:	2100      	movs	r1, #0
 800abaa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800abac:	2300      	movs	r3, #0
 800abae:	e000      	b.n	800abb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800abb0:	2302      	movs	r3, #2
  }
}
 800abb2:	0018      	movs	r0, r3
 800abb4:	46bd      	mov	sp, r7
 800abb6:	b002      	add	sp, #8
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	46c0      	nop			; (mov r8, r8)
 800abbc:	ffffefff 	.word	0xffffefff

0800abc0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2241      	movs	r2, #65	; 0x41
 800abce:	5c9b      	ldrb	r3, [r3, r2]
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	2b20      	cmp	r3, #32
 800abd4:	d139      	bne.n	800ac4a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2240      	movs	r2, #64	; 0x40
 800abda:	5c9b      	ldrb	r3, [r3, r2]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d101      	bne.n	800abe4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800abe0:	2302      	movs	r3, #2
 800abe2:	e033      	b.n	800ac4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2240      	movs	r2, #64	; 0x40
 800abe8:	2101      	movs	r1, #1
 800abea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2241      	movs	r2, #65	; 0x41
 800abf0:	2124      	movs	r1, #36	; 0x24
 800abf2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	2101      	movs	r1, #1
 800ac00:	438a      	bics	r2, r1
 800ac02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	4a11      	ldr	r2, [pc, #68]	; (800ac54 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800ac10:	4013      	ands	r3, r2
 800ac12:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	021b      	lsls	r3, r3, #8
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2101      	movs	r1, #1
 800ac32:	430a      	orrs	r2, r1
 800ac34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2241      	movs	r2, #65	; 0x41
 800ac3a:	2120      	movs	r1, #32
 800ac3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2240      	movs	r2, #64	; 0x40
 800ac42:	2100      	movs	r1, #0
 800ac44:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	e000      	b.n	800ac4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ac4a:	2302      	movs	r3, #2
  }
}
 800ac4c:	0018      	movs	r0, r3
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	b004      	add	sp, #16
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	fffff0ff 	.word	0xfffff0ff

0800ac58 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 800ac5c:	4b04      	ldr	r3, [pc, #16]	; (800ac70 <HAL_PWR_DisablePVD+0x18>)
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	4b03      	ldr	r3, [pc, #12]	; (800ac70 <HAL_PWR_DisablePVD+0x18>)
 800ac62:	2110      	movs	r1, #16
 800ac64:	438a      	bics	r2, r1
 800ac66:	601a      	str	r2, [r3, #0]
}
 800ac68:	46c0      	nop			; (mov r8, r8)
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	46c0      	nop			; (mov r8, r8)
 800ac70:	40007000 	.word	0x40007000

0800ac74 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	000a      	movs	r2, r1
 800ac7e:	1cfb      	adds	r3, r7, #3
 800ac80:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 800ac82:	2300      	movs	r3, #0
 800ac84:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 800ac86:	4b11      	ldr	r3, [pc, #68]	; (800accc <HAL_PWR_EnterSLEEPMode+0x58>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	60fb      	str	r3, [r7, #12]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2203      	movs	r2, #3
 800ac90:	4393      	bics	r3, r2
 800ac92:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 800ac9c:	4b0b      	ldr	r3, [pc, #44]	; (800accc <HAL_PWR_EnterSLEEPMode+0x58>)
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800aca2:	4b0b      	ldr	r3, [pc, #44]	; (800acd0 <HAL_PWR_EnterSLEEPMode+0x5c>)
 800aca4:	691a      	ldr	r2, [r3, #16]
 800aca6:	4b0a      	ldr	r3, [pc, #40]	; (800acd0 <HAL_PWR_EnterSLEEPMode+0x5c>)
 800aca8:	2104      	movs	r1, #4
 800acaa:	438a      	bics	r2, r1
 800acac:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800acae:	1cfb      	adds	r3, r7, #3
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d101      	bne.n	800acba <HAL_PWR_EnterSLEEPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800acb6:	bf30      	wfi
 800acb8:	e002      	b.n	800acc0 <HAL_PWR_EnterSLEEPMode+0x4c>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 800acba:	bf40      	sev
  __ASM volatile ("wfe");
 800acbc:	bf20      	wfe
 800acbe:	bf20      	wfe
  __ASM volatile ("nop");
 800acc0:	46c0      	nop			; (mov r8, r8)
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();

}
 800acc2:	46c0      	nop			; (mov r8, r8)
 800acc4:	46bd      	mov	sp, r7
 800acc6:	b004      	add	sp, #16
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	46c0      	nop			; (mov r8, r8)
 800accc:	40007000 	.word	0x40007000
 800acd0:	e000ed00 	.word	0xe000ed00

0800acd4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b084      	sub	sp, #16
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	000a      	movs	r2, r1
 800acde:	1cfb      	adds	r3, r7, #3
 800ace0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 800ace2:	2300      	movs	r3, #0
 800ace4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 800ace6:	4b13      	ldr	r3, [pc, #76]	; (800ad34 <HAL_PWR_EnterSTOPMode+0x60>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2203      	movs	r2, #3
 800acf0:	4393      	bics	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 800acfc:	4b0d      	ldr	r3, [pc, #52]	; (800ad34 <HAL_PWR_EnterSTOPMode+0x60>)
 800acfe:	68fa      	ldr	r2, [r7, #12]
 800ad00:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800ad02:	4b0d      	ldr	r3, [pc, #52]	; (800ad38 <HAL_PWR_EnterSTOPMode+0x64>)
 800ad04:	691a      	ldr	r2, [r3, #16]
 800ad06:	4b0c      	ldr	r3, [pc, #48]	; (800ad38 <HAL_PWR_EnterSTOPMode+0x64>)
 800ad08:	2104      	movs	r1, #4
 800ad0a:	430a      	orrs	r2, r1
 800ad0c:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800ad0e:	1cfb      	adds	r3, r7, #3
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d101      	bne.n	800ad1a <HAL_PWR_EnterSTOPMode+0x46>
  __ASM volatile ("wfi");
 800ad16:	bf30      	wfi
 800ad18:	e002      	b.n	800ad20 <HAL_PWR_EnterSTOPMode+0x4c>
  __ASM volatile ("sev");
 800ad1a:	bf40      	sev
  __ASM volatile ("wfe");
 800ad1c:	bf20      	wfe
 800ad1e:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800ad20:	4b05      	ldr	r3, [pc, #20]	; (800ad38 <HAL_PWR_EnterSTOPMode+0x64>)
 800ad22:	691a      	ldr	r2, [r3, #16]
 800ad24:	4b04      	ldr	r3, [pc, #16]	; (800ad38 <HAL_PWR_EnterSTOPMode+0x64>)
 800ad26:	2104      	movs	r1, #4
 800ad28:	438a      	bics	r2, r1
 800ad2a:	611a      	str	r2, [r3, #16]

}
 800ad2c:	46c0      	nop			; (mov r8, r8)
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	b004      	add	sp, #16
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	40007000 	.word	0x40007000
 800ad38:	e000ed00 	.word	0xe000ed00

0800ad3c <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 800ad40:	4b04      	ldr	r3, [pc, #16]	; (800ad54 <HAL_PWREx_EnableFastWakeUp+0x18>)
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	4b03      	ldr	r3, [pc, #12]	; (800ad54 <HAL_PWREx_EnableFastWakeUp+0x18>)
 800ad46:	2180      	movs	r1, #128	; 0x80
 800ad48:	00c9      	lsls	r1, r1, #3
 800ad4a:	430a      	orrs	r2, r1
 800ad4c:	601a      	str	r2, [r3, #0]
}
 800ad4e:	46c0      	nop			; (mov r8, r8)
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	40007000 	.word	0x40007000

0800ad58 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 800ad5c:	4b04      	ldr	r3, [pc, #16]	; (800ad70 <HAL_PWREx_EnableUltraLowPower+0x18>)
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	4b03      	ldr	r3, [pc, #12]	; (800ad70 <HAL_PWREx_EnableUltraLowPower+0x18>)
 800ad62:	2180      	movs	r1, #128	; 0x80
 800ad64:	0089      	lsls	r1, r1, #2
 800ad66:	430a      	orrs	r2, r1
 800ad68:	601a      	str	r2, [r3, #0]
}
 800ad6a:	46c0      	nop			; (mov r8, r8)
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	40007000 	.word	0x40007000

0800ad74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad74:	b5b0      	push	{r4, r5, r7, lr}
 800ad76:	b08a      	sub	sp, #40	; 0x28
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d102      	bne.n	800ad88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	f000 fbbc 	bl	800b500 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad88:	4bc8      	ldr	r3, [pc, #800]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	220c      	movs	r2, #12
 800ad8e:	4013      	ands	r3, r2
 800ad90:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ad92:	4bc6      	ldr	r3, [pc, #792]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800ad94:	68da      	ldr	r2, [r3, #12]
 800ad96:	2380      	movs	r3, #128	; 0x80
 800ad98:	025b      	lsls	r3, r3, #9
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2201      	movs	r2, #1
 800ada4:	4013      	ands	r3, r2
 800ada6:	d100      	bne.n	800adaa <HAL_RCC_OscConfig+0x36>
 800ada8:	e07e      	b.n	800aea8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	2b08      	cmp	r3, #8
 800adae:	d007      	beq.n	800adc0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	2b0c      	cmp	r3, #12
 800adb4:	d112      	bne.n	800addc <HAL_RCC_OscConfig+0x68>
 800adb6:	69ba      	ldr	r2, [r7, #24]
 800adb8:	2380      	movs	r3, #128	; 0x80
 800adba:	025b      	lsls	r3, r3, #9
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d10d      	bne.n	800addc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800adc0:	4bba      	ldr	r3, [pc, #744]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	2380      	movs	r3, #128	; 0x80
 800adc6:	029b      	lsls	r3, r3, #10
 800adc8:	4013      	ands	r3, r2
 800adca:	d100      	bne.n	800adce <HAL_RCC_OscConfig+0x5a>
 800adcc:	e06b      	b.n	800aea6 <HAL_RCC_OscConfig+0x132>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d167      	bne.n	800aea6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	f000 fb92 	bl	800b500 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685a      	ldr	r2, [r3, #4]
 800ade0:	2380      	movs	r3, #128	; 0x80
 800ade2:	025b      	lsls	r3, r3, #9
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d107      	bne.n	800adf8 <HAL_RCC_OscConfig+0x84>
 800ade8:	4bb0      	ldr	r3, [pc, #704]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	4baf      	ldr	r3, [pc, #700]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800adee:	2180      	movs	r1, #128	; 0x80
 800adf0:	0249      	lsls	r1, r1, #9
 800adf2:	430a      	orrs	r2, r1
 800adf4:	601a      	str	r2, [r3, #0]
 800adf6:	e027      	b.n	800ae48 <HAL_RCC_OscConfig+0xd4>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	685a      	ldr	r2, [r3, #4]
 800adfc:	23a0      	movs	r3, #160	; 0xa0
 800adfe:	02db      	lsls	r3, r3, #11
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d10e      	bne.n	800ae22 <HAL_RCC_OscConfig+0xae>
 800ae04:	4ba9      	ldr	r3, [pc, #676]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	4ba8      	ldr	r3, [pc, #672]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800ae0a:	2180      	movs	r1, #128	; 0x80
 800ae0c:	02c9      	lsls	r1, r1, #11
 800ae0e:	430a      	orrs	r2, r1
 800ae10:	601a      	str	r2, [r3, #0]
 800ae12:	4ba6      	ldr	r3, [pc, #664]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	4ba5      	ldr	r3, [pc, #660]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800ae18:	2180      	movs	r1, #128	; 0x80
 800ae1a:	0249      	lsls	r1, r1, #9
 800ae1c:	430a      	orrs	r2, r1
 800ae1e:	601a      	str	r2, [r3, #0]
 800ae20:	e012      	b.n	800ae48 <HAL_RCC_OscConfig+0xd4>
 800ae22:	4ba2      	ldr	r3, [pc, #648]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	4ba1      	ldr	r3, [pc, #644]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800ae28:	49a1      	ldr	r1, [pc, #644]	; (800b0b0 <HAL_RCC_OscConfig+0x33c>)
 800ae2a:	400a      	ands	r2, r1
 800ae2c:	601a      	str	r2, [r3, #0]
 800ae2e:	4b9f      	ldr	r3, [pc, #636]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	2380      	movs	r3, #128	; 0x80
 800ae34:	025b      	lsls	r3, r3, #9
 800ae36:	4013      	ands	r3, r2
 800ae38:	60fb      	str	r3, [r7, #12]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	4b9b      	ldr	r3, [pc, #620]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	4b9a      	ldr	r3, [pc, #616]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800ae42:	499c      	ldr	r1, [pc, #624]	; (800b0b4 <HAL_RCC_OscConfig+0x340>)
 800ae44:	400a      	ands	r2, r1
 800ae46:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d015      	beq.n	800ae7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae50:	f7fd ff46 	bl	8008ce0 <HAL_GetTick>
 800ae54:	0003      	movs	r3, r0
 800ae56:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ae58:	e009      	b.n	800ae6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ae5a:	f7fd ff41 	bl	8008ce0 <HAL_GetTick>
 800ae5e:	0002      	movs	r2, r0
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	2b64      	cmp	r3, #100	; 0x64
 800ae66:	d902      	bls.n	800ae6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ae68:	2303      	movs	r3, #3
 800ae6a:	f000 fb49 	bl	800b500 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ae6e:	4b8f      	ldr	r3, [pc, #572]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	2380      	movs	r3, #128	; 0x80
 800ae74:	029b      	lsls	r3, r3, #10
 800ae76:	4013      	ands	r3, r2
 800ae78:	d0ef      	beq.n	800ae5a <HAL_RCC_OscConfig+0xe6>
 800ae7a:	e015      	b.n	800aea8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae7c:	f7fd ff30 	bl	8008ce0 <HAL_GetTick>
 800ae80:	0003      	movs	r3, r0
 800ae82:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ae84:	e008      	b.n	800ae98 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ae86:	f7fd ff2b 	bl	8008ce0 <HAL_GetTick>
 800ae8a:	0002      	movs	r2, r0
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	1ad3      	subs	r3, r2, r3
 800ae90:	2b64      	cmp	r3, #100	; 0x64
 800ae92:	d901      	bls.n	800ae98 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800ae94:	2303      	movs	r3, #3
 800ae96:	e333      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ae98:	4b84      	ldr	r3, [pc, #528]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	2380      	movs	r3, #128	; 0x80
 800ae9e:	029b      	lsls	r3, r3, #10
 800aea0:	4013      	ands	r3, r2
 800aea2:	d1f0      	bne.n	800ae86 <HAL_RCC_OscConfig+0x112>
 800aea4:	e000      	b.n	800aea8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aea6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2202      	movs	r2, #2
 800aeae:	4013      	ands	r3, r2
 800aeb0:	d100      	bne.n	800aeb4 <HAL_RCC_OscConfig+0x140>
 800aeb2:	e098      	b.n	800afe6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800aeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebc:	2220      	movs	r2, #32
 800aebe:	4013      	ands	r3, r2
 800aec0:	d009      	beq.n	800aed6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800aec2:	4b7a      	ldr	r3, [pc, #488]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	4b79      	ldr	r3, [pc, #484]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800aec8:	2120      	movs	r1, #32
 800aeca:	430a      	orrs	r2, r1
 800aecc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800aece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed0:	2220      	movs	r2, #32
 800aed2:	4393      	bics	r3, r2
 800aed4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	2b04      	cmp	r3, #4
 800aeda:	d005      	beq.n	800aee8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	2b0c      	cmp	r3, #12
 800aee0:	d13d      	bne.n	800af5e <HAL_RCC_OscConfig+0x1ea>
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d13a      	bne.n	800af5e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800aee8:	4b70      	ldr	r3, [pc, #448]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2204      	movs	r2, #4
 800aeee:	4013      	ands	r3, r2
 800aef0:	d004      	beq.n	800aefc <HAL_RCC_OscConfig+0x188>
 800aef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d101      	bne.n	800aefc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	e301      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aefc:	4b6b      	ldr	r3, [pc, #428]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	4a6d      	ldr	r2, [pc, #436]	; (800b0b8 <HAL_RCC_OscConfig+0x344>)
 800af02:	4013      	ands	r3, r2
 800af04:	0019      	movs	r1, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	021a      	lsls	r2, r3, #8
 800af0c:	4b67      	ldr	r3, [pc, #412]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800af0e:	430a      	orrs	r2, r1
 800af10:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800af12:	4b66      	ldr	r3, [pc, #408]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2209      	movs	r2, #9
 800af18:	4393      	bics	r3, r2
 800af1a:	0019      	movs	r1, r3
 800af1c:	4b63      	ldr	r3, [pc, #396]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800af1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af20:	430a      	orrs	r2, r1
 800af22:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800af24:	f000 fc20 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800af28:	0001      	movs	r1, r0
 800af2a:	4b60      	ldr	r3, [pc, #384]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	091b      	lsrs	r3, r3, #4
 800af30:	220f      	movs	r2, #15
 800af32:	4013      	ands	r3, r2
 800af34:	4a61      	ldr	r2, [pc, #388]	; (800b0bc <HAL_RCC_OscConfig+0x348>)
 800af36:	5cd3      	ldrb	r3, [r2, r3]
 800af38:	000a      	movs	r2, r1
 800af3a:	40da      	lsrs	r2, r3
 800af3c:	4b60      	ldr	r3, [pc, #384]	; (800b0c0 <HAL_RCC_OscConfig+0x34c>)
 800af3e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800af40:	2513      	movs	r5, #19
 800af42:	197c      	adds	r4, r7, r5
 800af44:	2003      	movs	r0, #3
 800af46:	f7fa f8d2 	bl	80050ee <HAL_InitTick>
 800af4a:	0003      	movs	r3, r0
 800af4c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800af4e:	197b      	adds	r3, r7, r5
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d047      	beq.n	800afe6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800af56:	2313      	movs	r3, #19
 800af58:	18fb      	adds	r3, r7, r3
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	e2d0      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800af5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af60:	2b00      	cmp	r3, #0
 800af62:	d027      	beq.n	800afb4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800af64:	4b51      	ldr	r3, [pc, #324]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2209      	movs	r2, #9
 800af6a:	4393      	bics	r3, r2
 800af6c:	0019      	movs	r1, r3
 800af6e:	4b4f      	ldr	r3, [pc, #316]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800af70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af72:	430a      	orrs	r2, r1
 800af74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af76:	f7fd feb3 	bl	8008ce0 <HAL_GetTick>
 800af7a:	0003      	movs	r3, r0
 800af7c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af7e:	e008      	b.n	800af92 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800af80:	f7fd feae 	bl	8008ce0 <HAL_GetTick>
 800af84:	0002      	movs	r2, r0
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	1ad3      	subs	r3, r2, r3
 800af8a:	2b02      	cmp	r3, #2
 800af8c:	d901      	bls.n	800af92 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800af8e:	2303      	movs	r3, #3
 800af90:	e2b6      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af92:	4b46      	ldr	r3, [pc, #280]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2204      	movs	r2, #4
 800af98:	4013      	ands	r3, r2
 800af9a:	d0f1      	beq.n	800af80 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af9c:	4b43      	ldr	r3, [pc, #268]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	4a45      	ldr	r2, [pc, #276]	; (800b0b8 <HAL_RCC_OscConfig+0x344>)
 800afa2:	4013      	ands	r3, r2
 800afa4:	0019      	movs	r1, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	021a      	lsls	r2, r3, #8
 800afac:	4b3f      	ldr	r3, [pc, #252]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800afae:	430a      	orrs	r2, r1
 800afb0:	605a      	str	r2, [r3, #4]
 800afb2:	e018      	b.n	800afe6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800afb4:	4b3d      	ldr	r3, [pc, #244]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	4b3c      	ldr	r3, [pc, #240]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800afba:	2101      	movs	r1, #1
 800afbc:	438a      	bics	r2, r1
 800afbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afc0:	f7fd fe8e 	bl	8008ce0 <HAL_GetTick>
 800afc4:	0003      	movs	r3, r0
 800afc6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800afc8:	e008      	b.n	800afdc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800afca:	f7fd fe89 	bl	8008ce0 <HAL_GetTick>
 800afce:	0002      	movs	r2, r0
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	1ad3      	subs	r3, r2, r3
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d901      	bls.n	800afdc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800afd8:	2303      	movs	r3, #3
 800afda:	e291      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800afdc:	4b33      	ldr	r3, [pc, #204]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2204      	movs	r2, #4
 800afe2:	4013      	ands	r3, r2
 800afe4:	d1f1      	bne.n	800afca <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2210      	movs	r2, #16
 800afec:	4013      	ands	r3, r2
 800afee:	d100      	bne.n	800aff2 <HAL_RCC_OscConfig+0x27e>
 800aff0:	e09f      	b.n	800b132 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d13f      	bne.n	800b078 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800aff8:	4b2c      	ldr	r3, [pc, #176]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	2380      	movs	r3, #128	; 0x80
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	4013      	ands	r3, r2
 800b002:	d005      	beq.n	800b010 <HAL_RCC_OscConfig+0x29c>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	69db      	ldr	r3, [r3, #28]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d101      	bne.n	800b010 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	e277      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b010:	4b26      	ldr	r3, [pc, #152]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	4a2b      	ldr	r2, [pc, #172]	; (800b0c4 <HAL_RCC_OscConfig+0x350>)
 800b016:	4013      	ands	r3, r2
 800b018:	0019      	movs	r1, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b01e:	4b23      	ldr	r3, [pc, #140]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800b020:	430a      	orrs	r2, r1
 800b022:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b024:	4b21      	ldr	r3, [pc, #132]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	021b      	lsls	r3, r3, #8
 800b02a:	0a19      	lsrs	r1, r3, #8
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a1b      	ldr	r3, [r3, #32]
 800b030:	061a      	lsls	r2, r3, #24
 800b032:	4b1e      	ldr	r3, [pc, #120]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800b034:	430a      	orrs	r2, r1
 800b036:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b03c:	0b5b      	lsrs	r3, r3, #13
 800b03e:	3301      	adds	r3, #1
 800b040:	2280      	movs	r2, #128	; 0x80
 800b042:	0212      	lsls	r2, r2, #8
 800b044:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800b046:	4b19      	ldr	r3, [pc, #100]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	091b      	lsrs	r3, r3, #4
 800b04c:	210f      	movs	r1, #15
 800b04e:	400b      	ands	r3, r1
 800b050:	491a      	ldr	r1, [pc, #104]	; (800b0bc <HAL_RCC_OscConfig+0x348>)
 800b052:	5ccb      	ldrb	r3, [r1, r3]
 800b054:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800b056:	4b1a      	ldr	r3, [pc, #104]	; (800b0c0 <HAL_RCC_OscConfig+0x34c>)
 800b058:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800b05a:	2513      	movs	r5, #19
 800b05c:	197c      	adds	r4, r7, r5
 800b05e:	2003      	movs	r0, #3
 800b060:	f7fa f845 	bl	80050ee <HAL_InitTick>
 800b064:	0003      	movs	r3, r0
 800b066:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800b068:	197b      	adds	r3, r7, r5
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d060      	beq.n	800b132 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 800b070:	2313      	movs	r3, #19
 800b072:	18fb      	adds	r3, r7, r3
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	e243      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	69db      	ldr	r3, [r3, #28]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d03e      	beq.n	800b0fe <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b080:	4b0a      	ldr	r3, [pc, #40]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	4b09      	ldr	r3, [pc, #36]	; (800b0ac <HAL_RCC_OscConfig+0x338>)
 800b086:	2180      	movs	r1, #128	; 0x80
 800b088:	0049      	lsls	r1, r1, #1
 800b08a:	430a      	orrs	r2, r1
 800b08c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b08e:	f7fd fe27 	bl	8008ce0 <HAL_GetTick>
 800b092:	0003      	movs	r3, r0
 800b094:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800b096:	e017      	b.n	800b0c8 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b098:	f7fd fe22 	bl	8008ce0 <HAL_GetTick>
 800b09c:	0002      	movs	r2, r0
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	1ad3      	subs	r3, r2, r3
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d910      	bls.n	800b0c8 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	e22a      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
 800b0aa:	46c0      	nop			; (mov r8, r8)
 800b0ac:	40021000 	.word	0x40021000
 800b0b0:	fffeffff 	.word	0xfffeffff
 800b0b4:	fffbffff 	.word	0xfffbffff
 800b0b8:	ffffe0ff 	.word	0xffffe0ff
 800b0bc:	0801cadc 	.word	0x0801cadc
 800b0c0:	20000030 	.word	0x20000030
 800b0c4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800b0c8:	4bc6      	ldr	r3, [pc, #792]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	2380      	movs	r3, #128	; 0x80
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4013      	ands	r3, r2
 800b0d2:	d0e1      	beq.n	800b098 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b0d4:	4bc3      	ldr	r3, [pc, #780]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	4ac3      	ldr	r2, [pc, #780]	; (800b3e8 <HAL_RCC_OscConfig+0x674>)
 800b0da:	4013      	ands	r3, r2
 800b0dc:	0019      	movs	r1, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0e2:	4bc0      	ldr	r3, [pc, #768]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b0e4:	430a      	orrs	r2, r1
 800b0e6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b0e8:	4bbe      	ldr	r3, [pc, #760]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	021b      	lsls	r3, r3, #8
 800b0ee:	0a19      	lsrs	r1, r3, #8
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a1b      	ldr	r3, [r3, #32]
 800b0f4:	061a      	lsls	r2, r3, #24
 800b0f6:	4bbb      	ldr	r3, [pc, #748]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b0f8:	430a      	orrs	r2, r1
 800b0fa:	605a      	str	r2, [r3, #4]
 800b0fc:	e019      	b.n	800b132 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b0fe:	4bb9      	ldr	r3, [pc, #740]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	4bb8      	ldr	r3, [pc, #736]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b104:	49b9      	ldr	r1, [pc, #740]	; (800b3ec <HAL_RCC_OscConfig+0x678>)
 800b106:	400a      	ands	r2, r1
 800b108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b10a:	f7fd fde9 	bl	8008ce0 <HAL_GetTick>
 800b10e:	0003      	movs	r3, r0
 800b110:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800b112:	e008      	b.n	800b126 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b114:	f7fd fde4 	bl	8008ce0 <HAL_GetTick>
 800b118:	0002      	movs	r2, r0
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d901      	bls.n	800b126 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800b122:	2303      	movs	r3, #3
 800b124:	e1ec      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800b126:	4baf      	ldr	r3, [pc, #700]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	2380      	movs	r3, #128	; 0x80
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	4013      	ands	r3, r2
 800b130:	d1f0      	bne.n	800b114 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2208      	movs	r2, #8
 800b138:	4013      	ands	r3, r2
 800b13a:	d036      	beq.n	800b1aa <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	695b      	ldr	r3, [r3, #20]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d019      	beq.n	800b178 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b144:	4ba7      	ldr	r3, [pc, #668]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b146:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b148:	4ba6      	ldr	r3, [pc, #664]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b14a:	2101      	movs	r1, #1
 800b14c:	430a      	orrs	r2, r1
 800b14e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b150:	f7fd fdc6 	bl	8008ce0 <HAL_GetTick>
 800b154:	0003      	movs	r3, r0
 800b156:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b158:	e008      	b.n	800b16c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b15a:	f7fd fdc1 	bl	8008ce0 <HAL_GetTick>
 800b15e:	0002      	movs	r2, r0
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	2b02      	cmp	r3, #2
 800b166:	d901      	bls.n	800b16c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800b168:	2303      	movs	r3, #3
 800b16a:	e1c9      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b16c:	4b9d      	ldr	r3, [pc, #628]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b16e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b170:	2202      	movs	r2, #2
 800b172:	4013      	ands	r3, r2
 800b174:	d0f1      	beq.n	800b15a <HAL_RCC_OscConfig+0x3e6>
 800b176:	e018      	b.n	800b1aa <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b178:	4b9a      	ldr	r3, [pc, #616]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b17a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b17c:	4b99      	ldr	r3, [pc, #612]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b17e:	2101      	movs	r1, #1
 800b180:	438a      	bics	r2, r1
 800b182:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b184:	f7fd fdac 	bl	8008ce0 <HAL_GetTick>
 800b188:	0003      	movs	r3, r0
 800b18a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b18c:	e008      	b.n	800b1a0 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b18e:	f7fd fda7 	bl	8008ce0 <HAL_GetTick>
 800b192:	0002      	movs	r2, r0
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	1ad3      	subs	r3, r2, r3
 800b198:	2b02      	cmp	r3, #2
 800b19a:	d901      	bls.n	800b1a0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800b19c:	2303      	movs	r3, #3
 800b19e:	e1af      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b1a0:	4b90      	ldr	r3, [pc, #576]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b1a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1a4:	2202      	movs	r2, #2
 800b1a6:	4013      	ands	r3, r2
 800b1a8:	d1f1      	bne.n	800b18e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2204      	movs	r2, #4
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	d100      	bne.n	800b1b6 <HAL_RCC_OscConfig+0x442>
 800b1b4:	e0af      	b.n	800b316 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b1b6:	2323      	movs	r3, #35	; 0x23
 800b1b8:	18fb      	adds	r3, r7, r3
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b1be:	4b89      	ldr	r3, [pc, #548]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b1c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1c2:	2380      	movs	r3, #128	; 0x80
 800b1c4:	055b      	lsls	r3, r3, #21
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	d10a      	bne.n	800b1e0 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b1ca:	4b86      	ldr	r3, [pc, #536]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b1cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1ce:	4b85      	ldr	r3, [pc, #532]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b1d0:	2180      	movs	r1, #128	; 0x80
 800b1d2:	0549      	lsls	r1, r1, #21
 800b1d4:	430a      	orrs	r2, r1
 800b1d6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800b1d8:	2323      	movs	r3, #35	; 0x23
 800b1da:	18fb      	adds	r3, r7, r3
 800b1dc:	2201      	movs	r2, #1
 800b1de:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1e0:	4b83      	ldr	r3, [pc, #524]	; (800b3f0 <HAL_RCC_OscConfig+0x67c>)
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	2380      	movs	r3, #128	; 0x80
 800b1e6:	005b      	lsls	r3, r3, #1
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	d11a      	bne.n	800b222 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b1ec:	4b80      	ldr	r3, [pc, #512]	; (800b3f0 <HAL_RCC_OscConfig+0x67c>)
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	4b7f      	ldr	r3, [pc, #508]	; (800b3f0 <HAL_RCC_OscConfig+0x67c>)
 800b1f2:	2180      	movs	r1, #128	; 0x80
 800b1f4:	0049      	lsls	r1, r1, #1
 800b1f6:	430a      	orrs	r2, r1
 800b1f8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b1fa:	f7fd fd71 	bl	8008ce0 <HAL_GetTick>
 800b1fe:	0003      	movs	r3, r0
 800b200:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b202:	e008      	b.n	800b216 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b204:	f7fd fd6c 	bl	8008ce0 <HAL_GetTick>
 800b208:	0002      	movs	r2, r0
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	2b64      	cmp	r3, #100	; 0x64
 800b210:	d901      	bls.n	800b216 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800b212:	2303      	movs	r3, #3
 800b214:	e174      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b216:	4b76      	ldr	r3, [pc, #472]	; (800b3f0 <HAL_RCC_OscConfig+0x67c>)
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	2380      	movs	r3, #128	; 0x80
 800b21c:	005b      	lsls	r3, r3, #1
 800b21e:	4013      	ands	r3, r2
 800b220:	d0f0      	beq.n	800b204 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	689a      	ldr	r2, [r3, #8]
 800b226:	2380      	movs	r3, #128	; 0x80
 800b228:	005b      	lsls	r3, r3, #1
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d107      	bne.n	800b23e <HAL_RCC_OscConfig+0x4ca>
 800b22e:	4b6d      	ldr	r3, [pc, #436]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b232:	4b6c      	ldr	r3, [pc, #432]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b234:	2180      	movs	r1, #128	; 0x80
 800b236:	0049      	lsls	r1, r1, #1
 800b238:	430a      	orrs	r2, r1
 800b23a:	651a      	str	r2, [r3, #80]	; 0x50
 800b23c:	e031      	b.n	800b2a2 <HAL_RCC_OscConfig+0x52e>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d10c      	bne.n	800b260 <HAL_RCC_OscConfig+0x4ec>
 800b246:	4b67      	ldr	r3, [pc, #412]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b24a:	4b66      	ldr	r3, [pc, #408]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b24c:	4967      	ldr	r1, [pc, #412]	; (800b3ec <HAL_RCC_OscConfig+0x678>)
 800b24e:	400a      	ands	r2, r1
 800b250:	651a      	str	r2, [r3, #80]	; 0x50
 800b252:	4b64      	ldr	r3, [pc, #400]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b254:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b256:	4b63      	ldr	r3, [pc, #396]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b258:	4966      	ldr	r1, [pc, #408]	; (800b3f4 <HAL_RCC_OscConfig+0x680>)
 800b25a:	400a      	ands	r2, r1
 800b25c:	651a      	str	r2, [r3, #80]	; 0x50
 800b25e:	e020      	b.n	800b2a2 <HAL_RCC_OscConfig+0x52e>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	689a      	ldr	r2, [r3, #8]
 800b264:	23a0      	movs	r3, #160	; 0xa0
 800b266:	00db      	lsls	r3, r3, #3
 800b268:	429a      	cmp	r2, r3
 800b26a:	d10e      	bne.n	800b28a <HAL_RCC_OscConfig+0x516>
 800b26c:	4b5d      	ldr	r3, [pc, #372]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b26e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b270:	4b5c      	ldr	r3, [pc, #368]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b272:	2180      	movs	r1, #128	; 0x80
 800b274:	00c9      	lsls	r1, r1, #3
 800b276:	430a      	orrs	r2, r1
 800b278:	651a      	str	r2, [r3, #80]	; 0x50
 800b27a:	4b5a      	ldr	r3, [pc, #360]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b27c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b27e:	4b59      	ldr	r3, [pc, #356]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b280:	2180      	movs	r1, #128	; 0x80
 800b282:	0049      	lsls	r1, r1, #1
 800b284:	430a      	orrs	r2, r1
 800b286:	651a      	str	r2, [r3, #80]	; 0x50
 800b288:	e00b      	b.n	800b2a2 <HAL_RCC_OscConfig+0x52e>
 800b28a:	4b56      	ldr	r3, [pc, #344]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b28c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b28e:	4b55      	ldr	r3, [pc, #340]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b290:	4956      	ldr	r1, [pc, #344]	; (800b3ec <HAL_RCC_OscConfig+0x678>)
 800b292:	400a      	ands	r2, r1
 800b294:	651a      	str	r2, [r3, #80]	; 0x50
 800b296:	4b53      	ldr	r3, [pc, #332]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b29a:	4b52      	ldr	r3, [pc, #328]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b29c:	4955      	ldr	r1, [pc, #340]	; (800b3f4 <HAL_RCC_OscConfig+0x680>)
 800b29e:	400a      	ands	r2, r1
 800b2a0:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	689b      	ldr	r3, [r3, #8]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d015      	beq.n	800b2d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b2aa:	f7fd fd19 	bl	8008ce0 <HAL_GetTick>
 800b2ae:	0003      	movs	r3, r0
 800b2b0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b2b2:	e009      	b.n	800b2c8 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b2b4:	f7fd fd14 	bl	8008ce0 <HAL_GetTick>
 800b2b8:	0002      	movs	r2, r0
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	1ad3      	subs	r3, r2, r3
 800b2be:	4a4e      	ldr	r2, [pc, #312]	; (800b3f8 <HAL_RCC_OscConfig+0x684>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d901      	bls.n	800b2c8 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	e11b      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b2c8:	4b46      	ldr	r3, [pc, #280]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b2ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2cc:	2380      	movs	r3, #128	; 0x80
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	4013      	ands	r3, r2
 800b2d2:	d0ef      	beq.n	800b2b4 <HAL_RCC_OscConfig+0x540>
 800b2d4:	e014      	b.n	800b300 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b2d6:	f7fd fd03 	bl	8008ce0 <HAL_GetTick>
 800b2da:	0003      	movs	r3, r0
 800b2dc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b2de:	e009      	b.n	800b2f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b2e0:	f7fd fcfe 	bl	8008ce0 <HAL_GetTick>
 800b2e4:	0002      	movs	r2, r0
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	4a43      	ldr	r2, [pc, #268]	; (800b3f8 <HAL_RCC_OscConfig+0x684>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d901      	bls.n	800b2f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b2f0:	2303      	movs	r3, #3
 800b2f2:	e105      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b2f4:	4b3b      	ldr	r3, [pc, #236]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b2f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2f8:	2380      	movs	r3, #128	; 0x80
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	d1ef      	bne.n	800b2e0 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800b300:	2323      	movs	r3, #35	; 0x23
 800b302:	18fb      	adds	r3, r7, r3
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	2b01      	cmp	r3, #1
 800b308:	d105      	bne.n	800b316 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b30a:	4b36      	ldr	r3, [pc, #216]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b30c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b30e:	4b35      	ldr	r3, [pc, #212]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b310:	493a      	ldr	r1, [pc, #232]	; (800b3fc <HAL_RCC_OscConfig+0x688>)
 800b312:	400a      	ands	r2, r1
 800b314:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2220      	movs	r2, #32
 800b31c:	4013      	ands	r3, r2
 800b31e:	d049      	beq.n	800b3b4 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	699b      	ldr	r3, [r3, #24]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d026      	beq.n	800b376 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800b328:	4b2e      	ldr	r3, [pc, #184]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b32a:	689a      	ldr	r2, [r3, #8]
 800b32c:	4b2d      	ldr	r3, [pc, #180]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b32e:	2101      	movs	r1, #1
 800b330:	430a      	orrs	r2, r1
 800b332:	609a      	str	r2, [r3, #8]
 800b334:	4b2b      	ldr	r3, [pc, #172]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b338:	4b2a      	ldr	r3, [pc, #168]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b33a:	2101      	movs	r1, #1
 800b33c:	430a      	orrs	r2, r1
 800b33e:	635a      	str	r2, [r3, #52]	; 0x34
 800b340:	4b2f      	ldr	r3, [pc, #188]	; (800b400 <HAL_RCC_OscConfig+0x68c>)
 800b342:	6a1a      	ldr	r2, [r3, #32]
 800b344:	4b2e      	ldr	r3, [pc, #184]	; (800b400 <HAL_RCC_OscConfig+0x68c>)
 800b346:	2180      	movs	r1, #128	; 0x80
 800b348:	0189      	lsls	r1, r1, #6
 800b34a:	430a      	orrs	r2, r1
 800b34c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b34e:	f7fd fcc7 	bl	8008ce0 <HAL_GetTick>
 800b352:	0003      	movs	r3, r0
 800b354:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b356:	e008      	b.n	800b36a <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b358:	f7fd fcc2 	bl	8008ce0 <HAL_GetTick>
 800b35c:	0002      	movs	r2, r0
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	1ad3      	subs	r3, r2, r3
 800b362:	2b02      	cmp	r3, #2
 800b364:	d901      	bls.n	800b36a <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800b366:	2303      	movs	r3, #3
 800b368:	e0ca      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b36a:	4b1e      	ldr	r3, [pc, #120]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	2202      	movs	r2, #2
 800b370:	4013      	ands	r3, r2
 800b372:	d0f1      	beq.n	800b358 <HAL_RCC_OscConfig+0x5e4>
 800b374:	e01e      	b.n	800b3b4 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800b376:	4b1b      	ldr	r3, [pc, #108]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b378:	689a      	ldr	r2, [r3, #8]
 800b37a:	4b1a      	ldr	r3, [pc, #104]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b37c:	2101      	movs	r1, #1
 800b37e:	438a      	bics	r2, r1
 800b380:	609a      	str	r2, [r3, #8]
 800b382:	4b1f      	ldr	r3, [pc, #124]	; (800b400 <HAL_RCC_OscConfig+0x68c>)
 800b384:	6a1a      	ldr	r2, [r3, #32]
 800b386:	4b1e      	ldr	r3, [pc, #120]	; (800b400 <HAL_RCC_OscConfig+0x68c>)
 800b388:	491e      	ldr	r1, [pc, #120]	; (800b404 <HAL_RCC_OscConfig+0x690>)
 800b38a:	400a      	ands	r2, r1
 800b38c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b38e:	f7fd fca7 	bl	8008ce0 <HAL_GetTick>
 800b392:	0003      	movs	r3, r0
 800b394:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b396:	e008      	b.n	800b3aa <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b398:	f7fd fca2 	bl	8008ce0 <HAL_GetTick>
 800b39c:	0002      	movs	r2, r0
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	2b02      	cmp	r3, #2
 800b3a4:	d901      	bls.n	800b3aa <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	e0aa      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b3aa:	4b0e      	ldr	r3, [pc, #56]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	2202      	movs	r2, #2
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	d1f1      	bne.n	800b398 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d100      	bne.n	800b3be <HAL_RCC_OscConfig+0x64a>
 800b3bc:	e09f      	b.n	800b4fe <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	2b0c      	cmp	r3, #12
 800b3c2:	d100      	bne.n	800b3c6 <HAL_RCC_OscConfig+0x652>
 800b3c4:	e078      	b.n	800b4b8 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	d159      	bne.n	800b482 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b3ce:	4b05      	ldr	r3, [pc, #20]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	4b04      	ldr	r3, [pc, #16]	; (800b3e4 <HAL_RCC_OscConfig+0x670>)
 800b3d4:	490c      	ldr	r1, [pc, #48]	; (800b408 <HAL_RCC_OscConfig+0x694>)
 800b3d6:	400a      	ands	r2, r1
 800b3d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3da:	f7fd fc81 	bl	8008ce0 <HAL_GetTick>
 800b3de:	0003      	movs	r3, r0
 800b3e0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800b3e2:	e01c      	b.n	800b41e <HAL_RCC_OscConfig+0x6aa>
 800b3e4:	40021000 	.word	0x40021000
 800b3e8:	ffff1fff 	.word	0xffff1fff
 800b3ec:	fffffeff 	.word	0xfffffeff
 800b3f0:	40007000 	.word	0x40007000
 800b3f4:	fffffbff 	.word	0xfffffbff
 800b3f8:	00001388 	.word	0x00001388
 800b3fc:	efffffff 	.word	0xefffffff
 800b400:	40010000 	.word	0x40010000
 800b404:	ffffdfff 	.word	0xffffdfff
 800b408:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b40c:	f7fd fc68 	bl	8008ce0 <HAL_GetTick>
 800b410:	0002      	movs	r2, r0
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	2b02      	cmp	r3, #2
 800b418:	d901      	bls.n	800b41e <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800b41a:	2303      	movs	r3, #3
 800b41c:	e070      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800b41e:	4b3a      	ldr	r3, [pc, #232]	; (800b508 <HAL_RCC_OscConfig+0x794>)
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	2380      	movs	r3, #128	; 0x80
 800b424:	049b      	lsls	r3, r3, #18
 800b426:	4013      	ands	r3, r2
 800b428:	d1f0      	bne.n	800b40c <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b42a:	4b37      	ldr	r3, [pc, #220]	; (800b508 <HAL_RCC_OscConfig+0x794>)
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	4a37      	ldr	r2, [pc, #220]	; (800b50c <HAL_RCC_OscConfig+0x798>)
 800b430:	4013      	ands	r3, r2
 800b432:	0019      	movs	r1, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b43c:	431a      	orrs	r2, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b442:	431a      	orrs	r2, r3
 800b444:	4b30      	ldr	r3, [pc, #192]	; (800b508 <HAL_RCC_OscConfig+0x794>)
 800b446:	430a      	orrs	r2, r1
 800b448:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b44a:	4b2f      	ldr	r3, [pc, #188]	; (800b508 <HAL_RCC_OscConfig+0x794>)
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	4b2e      	ldr	r3, [pc, #184]	; (800b508 <HAL_RCC_OscConfig+0x794>)
 800b450:	2180      	movs	r1, #128	; 0x80
 800b452:	0449      	lsls	r1, r1, #17
 800b454:	430a      	orrs	r2, r1
 800b456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b458:	f7fd fc42 	bl	8008ce0 <HAL_GetTick>
 800b45c:	0003      	movs	r3, r0
 800b45e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800b460:	e008      	b.n	800b474 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b462:	f7fd fc3d 	bl	8008ce0 <HAL_GetTick>
 800b466:	0002      	movs	r2, r0
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	1ad3      	subs	r3, r2, r3
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	d901      	bls.n	800b474 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 800b470:	2303      	movs	r3, #3
 800b472:	e045      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800b474:	4b24      	ldr	r3, [pc, #144]	; (800b508 <HAL_RCC_OscConfig+0x794>)
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	2380      	movs	r3, #128	; 0x80
 800b47a:	049b      	lsls	r3, r3, #18
 800b47c:	4013      	ands	r3, r2
 800b47e:	d0f0      	beq.n	800b462 <HAL_RCC_OscConfig+0x6ee>
 800b480:	e03d      	b.n	800b4fe <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b482:	4b21      	ldr	r3, [pc, #132]	; (800b508 <HAL_RCC_OscConfig+0x794>)
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	4b20      	ldr	r3, [pc, #128]	; (800b508 <HAL_RCC_OscConfig+0x794>)
 800b488:	4921      	ldr	r1, [pc, #132]	; (800b510 <HAL_RCC_OscConfig+0x79c>)
 800b48a:	400a      	ands	r2, r1
 800b48c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b48e:	f7fd fc27 	bl	8008ce0 <HAL_GetTick>
 800b492:	0003      	movs	r3, r0
 800b494:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800b496:	e008      	b.n	800b4aa <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b498:	f7fd fc22 	bl	8008ce0 <HAL_GetTick>
 800b49c:	0002      	movs	r2, r0
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	1ad3      	subs	r3, r2, r3
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	d901      	bls.n	800b4aa <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	e02a      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800b4aa:	4b17      	ldr	r3, [pc, #92]	; (800b508 <HAL_RCC_OscConfig+0x794>)
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	2380      	movs	r3, #128	; 0x80
 800b4b0:	049b      	lsls	r3, r3, #18
 800b4b2:	4013      	ands	r3, r2
 800b4b4:	d1f0      	bne.n	800b498 <HAL_RCC_OscConfig+0x724>
 800b4b6:	e022      	b.n	800b4fe <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d101      	bne.n	800b4c4 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e01d      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b4c4:	4b10      	ldr	r3, [pc, #64]	; (800b508 <HAL_RCC_OscConfig+0x794>)
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b4ca:	69ba      	ldr	r2, [r7, #24]
 800b4cc:	2380      	movs	r3, #128	; 0x80
 800b4ce:	025b      	lsls	r3, r3, #9
 800b4d0:	401a      	ands	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d10f      	bne.n	800b4fa <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800b4da:	69ba      	ldr	r2, [r7, #24]
 800b4dc:	23f0      	movs	r3, #240	; 0xf0
 800b4de:	039b      	lsls	r3, r3, #14
 800b4e0:	401a      	ands	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d107      	bne.n	800b4fa <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800b4ea:	69ba      	ldr	r2, [r7, #24]
 800b4ec:	23c0      	movs	r3, #192	; 0xc0
 800b4ee:	041b      	lsls	r3, r3, #16
 800b4f0:	401a      	ands	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d001      	beq.n	800b4fe <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e000      	b.n	800b500 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	0018      	movs	r0, r3
 800b502:	46bd      	mov	sp, r7
 800b504:	b00a      	add	sp, #40	; 0x28
 800b506:	bdb0      	pop	{r4, r5, r7, pc}
 800b508:	40021000 	.word	0x40021000
 800b50c:	ff02ffff 	.word	0xff02ffff
 800b510:	feffffff 	.word	0xfeffffff

0800b514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b514:	b5b0      	push	{r4, r5, r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d101      	bne.n	800b528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b524:	2301      	movs	r3, #1
 800b526:	e10d      	b.n	800b744 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b528:	4b88      	ldr	r3, [pc, #544]	; (800b74c <HAL_RCC_ClockConfig+0x238>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2201      	movs	r2, #1
 800b52e:	4013      	ands	r3, r2
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	429a      	cmp	r2, r3
 800b534:	d911      	bls.n	800b55a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b536:	4b85      	ldr	r3, [pc, #532]	; (800b74c <HAL_RCC_ClockConfig+0x238>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2201      	movs	r2, #1
 800b53c:	4393      	bics	r3, r2
 800b53e:	0019      	movs	r1, r3
 800b540:	4b82      	ldr	r3, [pc, #520]	; (800b74c <HAL_RCC_ClockConfig+0x238>)
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	430a      	orrs	r2, r1
 800b546:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b548:	4b80      	ldr	r3, [pc, #512]	; (800b74c <HAL_RCC_ClockConfig+0x238>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2201      	movs	r2, #1
 800b54e:	4013      	ands	r3, r2
 800b550:	683a      	ldr	r2, [r7, #0]
 800b552:	429a      	cmp	r2, r3
 800b554:	d001      	beq.n	800b55a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800b556:	2301      	movs	r3, #1
 800b558:	e0f4      	b.n	800b744 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2202      	movs	r2, #2
 800b560:	4013      	ands	r3, r2
 800b562:	d009      	beq.n	800b578 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b564:	4b7a      	ldr	r3, [pc, #488]	; (800b750 <HAL_RCC_ClockConfig+0x23c>)
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	22f0      	movs	r2, #240	; 0xf0
 800b56a:	4393      	bics	r3, r2
 800b56c:	0019      	movs	r1, r3
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	689a      	ldr	r2, [r3, #8]
 800b572:	4b77      	ldr	r3, [pc, #476]	; (800b750 <HAL_RCC_ClockConfig+0x23c>)
 800b574:	430a      	orrs	r2, r1
 800b576:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2201      	movs	r2, #1
 800b57e:	4013      	ands	r3, r2
 800b580:	d100      	bne.n	800b584 <HAL_RCC_ClockConfig+0x70>
 800b582:	e089      	b.n	800b698 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	2b02      	cmp	r3, #2
 800b58a:	d107      	bne.n	800b59c <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b58c:	4b70      	ldr	r3, [pc, #448]	; (800b750 <HAL_RCC_ClockConfig+0x23c>)
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	2380      	movs	r3, #128	; 0x80
 800b592:	029b      	lsls	r3, r3, #10
 800b594:	4013      	ands	r3, r2
 800b596:	d120      	bne.n	800b5da <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	e0d3      	b.n	800b744 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	2b03      	cmp	r3, #3
 800b5a2:	d107      	bne.n	800b5b4 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b5a4:	4b6a      	ldr	r3, [pc, #424]	; (800b750 <HAL_RCC_ClockConfig+0x23c>)
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	2380      	movs	r3, #128	; 0x80
 800b5aa:	049b      	lsls	r3, r3, #18
 800b5ac:	4013      	ands	r3, r2
 800b5ae:	d114      	bne.n	800b5da <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e0c7      	b.n	800b744 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d106      	bne.n	800b5ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b5bc:	4b64      	ldr	r3, [pc, #400]	; (800b750 <HAL_RCC_ClockConfig+0x23c>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2204      	movs	r2, #4
 800b5c2:	4013      	ands	r3, r2
 800b5c4:	d109      	bne.n	800b5da <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	e0bc      	b.n	800b744 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800b5ca:	4b61      	ldr	r3, [pc, #388]	; (800b750 <HAL_RCC_ClockConfig+0x23c>)
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	2380      	movs	r3, #128	; 0x80
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	d101      	bne.n	800b5da <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e0b4      	b.n	800b744 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b5da:	4b5d      	ldr	r3, [pc, #372]	; (800b750 <HAL_RCC_ClockConfig+0x23c>)
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	2203      	movs	r2, #3
 800b5e0:	4393      	bics	r3, r2
 800b5e2:	0019      	movs	r1, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	685a      	ldr	r2, [r3, #4]
 800b5e8:	4b59      	ldr	r3, [pc, #356]	; (800b750 <HAL_RCC_ClockConfig+0x23c>)
 800b5ea:	430a      	orrs	r2, r1
 800b5ec:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b5ee:	f7fd fb77 	bl	8008ce0 <HAL_GetTick>
 800b5f2:	0003      	movs	r3, r0
 800b5f4:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	2b02      	cmp	r3, #2
 800b5fc:	d111      	bne.n	800b622 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b5fe:	e009      	b.n	800b614 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b600:	f7fd fb6e 	bl	8008ce0 <HAL_GetTick>
 800b604:	0002      	movs	r2, r0
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	1ad3      	subs	r3, r2, r3
 800b60a:	4a52      	ldr	r2, [pc, #328]	; (800b754 <HAL_RCC_ClockConfig+0x240>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d901      	bls.n	800b614 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800b610:	2303      	movs	r3, #3
 800b612:	e097      	b.n	800b744 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b614:	4b4e      	ldr	r3, [pc, #312]	; (800b750 <HAL_RCC_ClockConfig+0x23c>)
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	220c      	movs	r2, #12
 800b61a:	4013      	ands	r3, r2
 800b61c:	2b08      	cmp	r3, #8
 800b61e:	d1ef      	bne.n	800b600 <HAL_RCC_ClockConfig+0xec>
 800b620:	e03a      	b.n	800b698 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	2b03      	cmp	r3, #3
 800b628:	d111      	bne.n	800b64e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b62a:	e009      	b.n	800b640 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b62c:	f7fd fb58 	bl	8008ce0 <HAL_GetTick>
 800b630:	0002      	movs	r2, r0
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	1ad3      	subs	r3, r2, r3
 800b636:	4a47      	ldr	r2, [pc, #284]	; (800b754 <HAL_RCC_ClockConfig+0x240>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d901      	bls.n	800b640 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 800b63c:	2303      	movs	r3, #3
 800b63e:	e081      	b.n	800b744 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b640:	4b43      	ldr	r3, [pc, #268]	; (800b750 <HAL_RCC_ClockConfig+0x23c>)
 800b642:	68db      	ldr	r3, [r3, #12]
 800b644:	220c      	movs	r2, #12
 800b646:	4013      	ands	r3, r2
 800b648:	2b0c      	cmp	r3, #12
 800b64a:	d1ef      	bne.n	800b62c <HAL_RCC_ClockConfig+0x118>
 800b64c:	e024      	b.n	800b698 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	2b01      	cmp	r3, #1
 800b654:	d11b      	bne.n	800b68e <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b656:	e009      	b.n	800b66c <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b658:	f7fd fb42 	bl	8008ce0 <HAL_GetTick>
 800b65c:	0002      	movs	r2, r0
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	4a3c      	ldr	r2, [pc, #240]	; (800b754 <HAL_RCC_ClockConfig+0x240>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d901      	bls.n	800b66c <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800b668:	2303      	movs	r3, #3
 800b66a:	e06b      	b.n	800b744 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b66c:	4b38      	ldr	r3, [pc, #224]	; (800b750 <HAL_RCC_ClockConfig+0x23c>)
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	220c      	movs	r2, #12
 800b672:	4013      	ands	r3, r2
 800b674:	2b04      	cmp	r3, #4
 800b676:	d1ef      	bne.n	800b658 <HAL_RCC_ClockConfig+0x144>
 800b678:	e00e      	b.n	800b698 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b67a:	f7fd fb31 	bl	8008ce0 <HAL_GetTick>
 800b67e:	0002      	movs	r2, r0
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	4a33      	ldr	r2, [pc, #204]	; (800b754 <HAL_RCC_ClockConfig+0x240>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d901      	bls.n	800b68e <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800b68a:	2303      	movs	r3, #3
 800b68c:	e05a      	b.n	800b744 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b68e:	4b30      	ldr	r3, [pc, #192]	; (800b750 <HAL_RCC_ClockConfig+0x23c>)
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	220c      	movs	r2, #12
 800b694:	4013      	ands	r3, r2
 800b696:	d1f0      	bne.n	800b67a <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b698:	4b2c      	ldr	r3, [pc, #176]	; (800b74c <HAL_RCC_ClockConfig+0x238>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2201      	movs	r2, #1
 800b69e:	4013      	ands	r3, r2
 800b6a0:	683a      	ldr	r2, [r7, #0]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d211      	bcs.n	800b6ca <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6a6:	4b29      	ldr	r3, [pc, #164]	; (800b74c <HAL_RCC_ClockConfig+0x238>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	4393      	bics	r3, r2
 800b6ae:	0019      	movs	r1, r3
 800b6b0:	4b26      	ldr	r3, [pc, #152]	; (800b74c <HAL_RCC_ClockConfig+0x238>)
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	430a      	orrs	r2, r1
 800b6b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6b8:	4b24      	ldr	r3, [pc, #144]	; (800b74c <HAL_RCC_ClockConfig+0x238>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	4013      	ands	r3, r2
 800b6c0:	683a      	ldr	r2, [r7, #0]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d001      	beq.n	800b6ca <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	e03c      	b.n	800b744 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2204      	movs	r2, #4
 800b6d0:	4013      	ands	r3, r2
 800b6d2:	d009      	beq.n	800b6e8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b6d4:	4b1e      	ldr	r3, [pc, #120]	; (800b750 <HAL_RCC_ClockConfig+0x23c>)
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	4a1f      	ldr	r2, [pc, #124]	; (800b758 <HAL_RCC_ClockConfig+0x244>)
 800b6da:	4013      	ands	r3, r2
 800b6dc:	0019      	movs	r1, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	68da      	ldr	r2, [r3, #12]
 800b6e2:	4b1b      	ldr	r3, [pc, #108]	; (800b750 <HAL_RCC_ClockConfig+0x23c>)
 800b6e4:	430a      	orrs	r2, r1
 800b6e6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	2208      	movs	r2, #8
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	d00a      	beq.n	800b708 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b6f2:	4b17      	ldr	r3, [pc, #92]	; (800b750 <HAL_RCC_ClockConfig+0x23c>)
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	4a19      	ldr	r2, [pc, #100]	; (800b75c <HAL_RCC_ClockConfig+0x248>)
 800b6f8:	4013      	ands	r3, r2
 800b6fa:	0019      	movs	r1, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	691b      	ldr	r3, [r3, #16]
 800b700:	00da      	lsls	r2, r3, #3
 800b702:	4b13      	ldr	r3, [pc, #76]	; (800b750 <HAL_RCC_ClockConfig+0x23c>)
 800b704:	430a      	orrs	r2, r1
 800b706:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b708:	f000 f82e 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800b70c:	0001      	movs	r1, r0
 800b70e:	4b10      	ldr	r3, [pc, #64]	; (800b750 <HAL_RCC_ClockConfig+0x23c>)
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	091b      	lsrs	r3, r3, #4
 800b714:	220f      	movs	r2, #15
 800b716:	4013      	ands	r3, r2
 800b718:	4a11      	ldr	r2, [pc, #68]	; (800b760 <HAL_RCC_ClockConfig+0x24c>)
 800b71a:	5cd3      	ldrb	r3, [r2, r3]
 800b71c:	000a      	movs	r2, r1
 800b71e:	40da      	lsrs	r2, r3
 800b720:	4b10      	ldr	r3, [pc, #64]	; (800b764 <HAL_RCC_ClockConfig+0x250>)
 800b722:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800b724:	250b      	movs	r5, #11
 800b726:	197c      	adds	r4, r7, r5
 800b728:	2003      	movs	r0, #3
 800b72a:	f7f9 fce0 	bl	80050ee <HAL_InitTick>
 800b72e:	0003      	movs	r3, r0
 800b730:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800b732:	197b      	adds	r3, r7, r5
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d003      	beq.n	800b742 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800b73a:	230b      	movs	r3, #11
 800b73c:	18fb      	adds	r3, r7, r3
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	e000      	b.n	800b744 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800b742:	2300      	movs	r3, #0
}
 800b744:	0018      	movs	r0, r3
 800b746:	46bd      	mov	sp, r7
 800b748:	b004      	add	sp, #16
 800b74a:	bdb0      	pop	{r4, r5, r7, pc}
 800b74c:	40022000 	.word	0x40022000
 800b750:	40021000 	.word	0x40021000
 800b754:	00001388 	.word	0x00001388
 800b758:	fffff8ff 	.word	0xfffff8ff
 800b75c:	ffffc7ff 	.word	0xffffc7ff
 800b760:	0801cadc 	.word	0x0801cadc
 800b764:	20000030 	.word	0x20000030

0800b768 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800b76e:	4b3b      	ldr	r3, [pc, #236]	; (800b85c <HAL_RCC_GetSysClockFreq+0xf4>)
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	220c      	movs	r2, #12
 800b778:	4013      	ands	r3, r2
 800b77a:	2b08      	cmp	r3, #8
 800b77c:	d00e      	beq.n	800b79c <HAL_RCC_GetSysClockFreq+0x34>
 800b77e:	2b0c      	cmp	r3, #12
 800b780:	d00f      	beq.n	800b7a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800b782:	2b04      	cmp	r3, #4
 800b784:	d157      	bne.n	800b836 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800b786:	4b35      	ldr	r3, [pc, #212]	; (800b85c <HAL_RCC_GetSysClockFreq+0xf4>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2210      	movs	r2, #16
 800b78c:	4013      	ands	r3, r2
 800b78e:	d002      	beq.n	800b796 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800b790:	4b33      	ldr	r3, [pc, #204]	; (800b860 <HAL_RCC_GetSysClockFreq+0xf8>)
 800b792:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800b794:	e05d      	b.n	800b852 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800b796:	4b33      	ldr	r3, [pc, #204]	; (800b864 <HAL_RCC_GetSysClockFreq+0xfc>)
 800b798:	613b      	str	r3, [r7, #16]
      break;
 800b79a:	e05a      	b.n	800b852 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b79c:	4b32      	ldr	r3, [pc, #200]	; (800b868 <HAL_RCC_GetSysClockFreq+0x100>)
 800b79e:	613b      	str	r3, [r7, #16]
      break;
 800b7a0:	e057      	b.n	800b852 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	0c9b      	lsrs	r3, r3, #18
 800b7a6:	220f      	movs	r2, #15
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	4a30      	ldr	r2, [pc, #192]	; (800b86c <HAL_RCC_GetSysClockFreq+0x104>)
 800b7ac:	5cd3      	ldrb	r3, [r2, r3]
 800b7ae:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	0d9b      	lsrs	r3, r3, #22
 800b7b4:	2203      	movs	r2, #3
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b7bc:	4b27      	ldr	r3, [pc, #156]	; (800b85c <HAL_RCC_GetSysClockFreq+0xf4>)
 800b7be:	68da      	ldr	r2, [r3, #12]
 800b7c0:	2380      	movs	r3, #128	; 0x80
 800b7c2:	025b      	lsls	r3, r3, #9
 800b7c4:	4013      	ands	r3, r2
 800b7c6:	d00f      	beq.n	800b7e8 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800b7c8:	68b9      	ldr	r1, [r7, #8]
 800b7ca:	000a      	movs	r2, r1
 800b7cc:	0152      	lsls	r2, r2, #5
 800b7ce:	1a52      	subs	r2, r2, r1
 800b7d0:	0193      	lsls	r3, r2, #6
 800b7d2:	1a9b      	subs	r3, r3, r2
 800b7d4:	00db      	lsls	r3, r3, #3
 800b7d6:	185b      	adds	r3, r3, r1
 800b7d8:	025b      	lsls	r3, r3, #9
 800b7da:	6879      	ldr	r1, [r7, #4]
 800b7dc:	0018      	movs	r0, r3
 800b7de:	f7f4 fc93 	bl	8000108 <__udivsi3>
 800b7e2:	0003      	movs	r3, r0
 800b7e4:	617b      	str	r3, [r7, #20]
 800b7e6:	e023      	b.n	800b830 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800b7e8:	4b1c      	ldr	r3, [pc, #112]	; (800b85c <HAL_RCC_GetSysClockFreq+0xf4>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2210      	movs	r2, #16
 800b7ee:	4013      	ands	r3, r2
 800b7f0:	d00f      	beq.n	800b812 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800b7f2:	68b9      	ldr	r1, [r7, #8]
 800b7f4:	000a      	movs	r2, r1
 800b7f6:	0152      	lsls	r2, r2, #5
 800b7f8:	1a52      	subs	r2, r2, r1
 800b7fa:	0193      	lsls	r3, r2, #6
 800b7fc:	1a9b      	subs	r3, r3, r2
 800b7fe:	00db      	lsls	r3, r3, #3
 800b800:	185b      	adds	r3, r3, r1
 800b802:	021b      	lsls	r3, r3, #8
 800b804:	6879      	ldr	r1, [r7, #4]
 800b806:	0018      	movs	r0, r3
 800b808:	f7f4 fc7e 	bl	8000108 <__udivsi3>
 800b80c:	0003      	movs	r3, r0
 800b80e:	617b      	str	r3, [r7, #20]
 800b810:	e00e      	b.n	800b830 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800b812:	68b9      	ldr	r1, [r7, #8]
 800b814:	000a      	movs	r2, r1
 800b816:	0152      	lsls	r2, r2, #5
 800b818:	1a52      	subs	r2, r2, r1
 800b81a:	0193      	lsls	r3, r2, #6
 800b81c:	1a9b      	subs	r3, r3, r2
 800b81e:	00db      	lsls	r3, r3, #3
 800b820:	185b      	adds	r3, r3, r1
 800b822:	029b      	lsls	r3, r3, #10
 800b824:	6879      	ldr	r1, [r7, #4]
 800b826:	0018      	movs	r0, r3
 800b828:	f7f4 fc6e 	bl	8000108 <__udivsi3>
 800b82c:	0003      	movs	r3, r0
 800b82e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	613b      	str	r3, [r7, #16]
      break;
 800b834:	e00d      	b.n	800b852 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800b836:	4b09      	ldr	r3, [pc, #36]	; (800b85c <HAL_RCC_GetSysClockFreq+0xf4>)
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	0b5b      	lsrs	r3, r3, #13
 800b83c:	2207      	movs	r2, #7
 800b83e:	4013      	ands	r3, r2
 800b840:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	3301      	adds	r3, #1
 800b846:	2280      	movs	r2, #128	; 0x80
 800b848:	0212      	lsls	r2, r2, #8
 800b84a:	409a      	lsls	r2, r3
 800b84c:	0013      	movs	r3, r2
 800b84e:	613b      	str	r3, [r7, #16]
      break;
 800b850:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800b852:	693b      	ldr	r3, [r7, #16]
}
 800b854:	0018      	movs	r0, r3
 800b856:	46bd      	mov	sp, r7
 800b858:	b006      	add	sp, #24
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	40021000 	.word	0x40021000
 800b860:	003d0900 	.word	0x003d0900
 800b864:	00f42400 	.word	0x00f42400
 800b868:	007a1200 	.word	0x007a1200
 800b86c:	0801caf4 	.word	0x0801caf4

0800b870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b874:	4b02      	ldr	r3, [pc, #8]	; (800b880 <HAL_RCC_GetHCLKFreq+0x10>)
 800b876:	681b      	ldr	r3, [r3, #0]
}
 800b878:	0018      	movs	r0, r3
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	46c0      	nop			; (mov r8, r8)
 800b880:	20000030 	.word	0x20000030

0800b884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b888:	f7ff fff2 	bl	800b870 <HAL_RCC_GetHCLKFreq>
 800b88c:	0001      	movs	r1, r0
 800b88e:	4b06      	ldr	r3, [pc, #24]	; (800b8a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	0a1b      	lsrs	r3, r3, #8
 800b894:	2207      	movs	r2, #7
 800b896:	4013      	ands	r3, r2
 800b898:	4a04      	ldr	r2, [pc, #16]	; (800b8ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800b89a:	5cd3      	ldrb	r3, [r2, r3]
 800b89c:	40d9      	lsrs	r1, r3
 800b89e:	000b      	movs	r3, r1
}
 800b8a0:	0018      	movs	r0, r3
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	46c0      	nop			; (mov r8, r8)
 800b8a8:	40021000 	.word	0x40021000
 800b8ac:	0801caec 	.word	0x0801caec

0800b8b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b8b4:	f7ff ffdc 	bl	800b870 <HAL_RCC_GetHCLKFreq>
 800b8b8:	0001      	movs	r1, r0
 800b8ba:	4b06      	ldr	r3, [pc, #24]	; (800b8d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	0adb      	lsrs	r3, r3, #11
 800b8c0:	2207      	movs	r2, #7
 800b8c2:	4013      	ands	r3, r2
 800b8c4:	4a04      	ldr	r2, [pc, #16]	; (800b8d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b8c6:	5cd3      	ldrb	r3, [r2, r3]
 800b8c8:	40d9      	lsrs	r1, r3
 800b8ca:	000b      	movs	r3, r1
}
 800b8cc:	0018      	movs	r0, r3
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	46c0      	nop			; (mov r8, r8)
 800b8d4:	40021000 	.word	0x40021000
 800b8d8:	0801caec 	.word	0x0801caec

0800b8dc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b086      	sub	sp, #24
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2220      	movs	r2, #32
 800b8ea:	4013      	ands	r3, r2
 800b8ec:	d100      	bne.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x14>
 800b8ee:	e0c7      	b.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800b8f0:	2317      	movs	r3, #23
 800b8f2:	18fb      	adds	r3, r7, r3
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b8f8:	4b99      	ldr	r3, [pc, #612]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b8fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8fc:	2380      	movs	r3, #128	; 0x80
 800b8fe:	055b      	lsls	r3, r3, #21
 800b900:	4013      	ands	r3, r2
 800b902:	d10a      	bne.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b904:	4b96      	ldr	r3, [pc, #600]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b908:	4b95      	ldr	r3, [pc, #596]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b90a:	2180      	movs	r1, #128	; 0x80
 800b90c:	0549      	lsls	r1, r1, #21
 800b90e:	430a      	orrs	r2, r1
 800b910:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800b912:	2317      	movs	r3, #23
 800b914:	18fb      	adds	r3, r7, r3
 800b916:	2201      	movs	r2, #1
 800b918:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b91a:	4b92      	ldr	r3, [pc, #584]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	2380      	movs	r3, #128	; 0x80
 800b920:	005b      	lsls	r3, r3, #1
 800b922:	4013      	ands	r3, r2
 800b924:	d11a      	bne.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b926:	4b8f      	ldr	r3, [pc, #572]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	4b8e      	ldr	r3, [pc, #568]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800b92c:	2180      	movs	r1, #128	; 0x80
 800b92e:	0049      	lsls	r1, r1, #1
 800b930:	430a      	orrs	r2, r1
 800b932:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b934:	f7fd f9d4 	bl	8008ce0 <HAL_GetTick>
 800b938:	0003      	movs	r3, r0
 800b93a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b93c:	e008      	b.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b93e:	f7fd f9cf 	bl	8008ce0 <HAL_GetTick>
 800b942:	0002      	movs	r2, r0
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	1ad3      	subs	r3, r2, r3
 800b948:	2b64      	cmp	r3, #100	; 0x64
 800b94a:	d901      	bls.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 800b94c:	2303      	movs	r3, #3
 800b94e:	e102      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b950:	4b84      	ldr	r3, [pc, #528]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	2380      	movs	r3, #128	; 0x80
 800b956:	005b      	lsls	r3, r3, #1
 800b958:	4013      	ands	r3, r2
 800b95a:	d0f0      	beq.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800b95c:	4b80      	ldr	r3, [pc, #512]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	23c0      	movs	r3, #192	; 0xc0
 800b962:	039b      	lsls	r3, r3, #14
 800b964:	4013      	ands	r3, r2
 800b966:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685a      	ldr	r2, [r3, #4]
 800b96c:	23c0      	movs	r3, #192	; 0xc0
 800b96e:	039b      	lsls	r3, r3, #14
 800b970:	4013      	ands	r3, r2
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	429a      	cmp	r2, r3
 800b976:	d013      	beq.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	685a      	ldr	r2, [r3, #4]
 800b97c:	23c0      	movs	r3, #192	; 0xc0
 800b97e:	029b      	lsls	r3, r3, #10
 800b980:	401a      	ands	r2, r3
 800b982:	23c0      	movs	r3, #192	; 0xc0
 800b984:	029b      	lsls	r3, r3, #10
 800b986:	429a      	cmp	r2, r3
 800b988:	d10a      	bne.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b98a:	4b75      	ldr	r3, [pc, #468]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	2380      	movs	r3, #128	; 0x80
 800b990:	029b      	lsls	r3, r3, #10
 800b992:	401a      	ands	r2, r3
 800b994:	2380      	movs	r3, #128	; 0x80
 800b996:	029b      	lsls	r3, r3, #10
 800b998:	429a      	cmp	r2, r3
 800b99a:	d101      	bne.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	e0da      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800b9a0:	4b6f      	ldr	r3, [pc, #444]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b9a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b9a4:	23c0      	movs	r3, #192	; 0xc0
 800b9a6:	029b      	lsls	r3, r3, #10
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d03b      	beq.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	685a      	ldr	r2, [r3, #4]
 800b9b6:	23c0      	movs	r3, #192	; 0xc0
 800b9b8:	029b      	lsls	r3, r3, #10
 800b9ba:	4013      	ands	r3, r2
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d033      	beq.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2220      	movs	r2, #32
 800b9c8:	4013      	ands	r3, r2
 800b9ca:	d02e      	beq.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800b9cc:	4b64      	ldr	r3, [pc, #400]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b9ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d0:	4a65      	ldr	r2, [pc, #404]	; (800bb68 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b9d2:	4013      	ands	r3, r2
 800b9d4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b9d6:	4b62      	ldr	r3, [pc, #392]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b9d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b9da:	4b61      	ldr	r3, [pc, #388]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b9dc:	2180      	movs	r1, #128	; 0x80
 800b9de:	0309      	lsls	r1, r1, #12
 800b9e0:	430a      	orrs	r2, r1
 800b9e2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b9e4:	4b5e      	ldr	r3, [pc, #376]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b9e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b9e8:	4b5d      	ldr	r3, [pc, #372]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b9ea:	4960      	ldr	r1, [pc, #384]	; (800bb6c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800b9ec:	400a      	ands	r2, r1
 800b9ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800b9f0:	4b5b      	ldr	r3, [pc, #364]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b9f2:	68fa      	ldr	r2, [r7, #12]
 800b9f4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	2380      	movs	r3, #128	; 0x80
 800b9fa:	005b      	lsls	r3, r3, #1
 800b9fc:	4013      	ands	r3, r2
 800b9fe:	d014      	beq.n	800ba2a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ba00:	f7fd f96e 	bl	8008ce0 <HAL_GetTick>
 800ba04:	0003      	movs	r3, r0
 800ba06:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba08:	e009      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba0a:	f7fd f969 	bl	8008ce0 <HAL_GetTick>
 800ba0e:	0002      	movs	r2, r0
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	1ad3      	subs	r3, r2, r3
 800ba14:	4a56      	ldr	r2, [pc, #344]	; (800bb70 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d901      	bls.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800ba1a:	2303      	movs	r3, #3
 800ba1c:	e09b      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ba1e:	4b50      	ldr	r3, [pc, #320]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba22:	2380      	movs	r3, #128	; 0x80
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	4013      	ands	r3, r2
 800ba28:	d0ef      	beq.n	800ba0a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	685a      	ldr	r2, [r3, #4]
 800ba2e:	23c0      	movs	r3, #192	; 0xc0
 800ba30:	029b      	lsls	r3, r3, #10
 800ba32:	401a      	ands	r2, r3
 800ba34:	23c0      	movs	r3, #192	; 0xc0
 800ba36:	029b      	lsls	r3, r3, #10
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d10c      	bne.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800ba3c:	4b48      	ldr	r3, [pc, #288]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a4c      	ldr	r2, [pc, #304]	; (800bb74 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800ba42:	4013      	ands	r3, r2
 800ba44:	0019      	movs	r1, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	685a      	ldr	r2, [r3, #4]
 800ba4a:	23c0      	movs	r3, #192	; 0xc0
 800ba4c:	039b      	lsls	r3, r3, #14
 800ba4e:	401a      	ands	r2, r3
 800ba50:	4b43      	ldr	r3, [pc, #268]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba52:	430a      	orrs	r2, r1
 800ba54:	601a      	str	r2, [r3, #0]
 800ba56:	4b42      	ldr	r3, [pc, #264]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba58:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	685a      	ldr	r2, [r3, #4]
 800ba5e:	23c0      	movs	r3, #192	; 0xc0
 800ba60:	029b      	lsls	r3, r3, #10
 800ba62:	401a      	ands	r2, r3
 800ba64:	4b3e      	ldr	r3, [pc, #248]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba66:	430a      	orrs	r2, r1
 800ba68:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ba6a:	2317      	movs	r3, #23
 800ba6c:	18fb      	adds	r3, r7, r3
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d105      	bne.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ba74:	4b3a      	ldr	r3, [pc, #232]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba78:	4b39      	ldr	r3, [pc, #228]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba7a:	493f      	ldr	r1, [pc, #252]	; (800bb78 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800ba7c:	400a      	ands	r2, r1
 800ba7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2201      	movs	r2, #1
 800ba86:	4013      	ands	r3, r2
 800ba88:	d009      	beq.n	800ba9e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ba8a:	4b35      	ldr	r3, [pc, #212]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba8e:	2203      	movs	r2, #3
 800ba90:	4393      	bics	r3, r2
 800ba92:	0019      	movs	r1, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	689a      	ldr	r2, [r3, #8]
 800ba98:	4b31      	ldr	r3, [pc, #196]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba9a:	430a      	orrs	r2, r1
 800ba9c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2202      	movs	r2, #2
 800baa4:	4013      	ands	r3, r2
 800baa6:	d009      	beq.n	800babc <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800baa8:	4b2d      	ldr	r3, [pc, #180]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800baaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baac:	220c      	movs	r2, #12
 800baae:	4393      	bics	r3, r2
 800bab0:	0019      	movs	r1, r3
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	68da      	ldr	r2, [r3, #12]
 800bab6:	4b2a      	ldr	r3, [pc, #168]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800bab8:	430a      	orrs	r2, r1
 800baba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2204      	movs	r2, #4
 800bac2:	4013      	ands	r3, r2
 800bac4:	d009      	beq.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bac6:	4b26      	ldr	r3, [pc, #152]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800bac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baca:	4a2c      	ldr	r2, [pc, #176]	; (800bb7c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800bacc:	4013      	ands	r3, r2
 800bace:	0019      	movs	r1, r3
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	691a      	ldr	r2, [r3, #16]
 800bad4:	4b22      	ldr	r3, [pc, #136]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800bad6:	430a      	orrs	r2, r1
 800bad8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2208      	movs	r2, #8
 800bae0:	4013      	ands	r3, r2
 800bae2:	d009      	beq.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bae4:	4b1e      	ldr	r3, [pc, #120]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800bae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bae8:	4a25      	ldr	r2, [pc, #148]	; (800bb80 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800baea:	4013      	ands	r3, r2
 800baec:	0019      	movs	r1, r3
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	695a      	ldr	r2, [r3, #20]
 800baf2:	4b1b      	ldr	r3, [pc, #108]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800baf4:	430a      	orrs	r2, r1
 800baf6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	2380      	movs	r3, #128	; 0x80
 800bafe:	005b      	lsls	r3, r3, #1
 800bb00:	4013      	ands	r3, r2
 800bb02:	d009      	beq.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bb04:	4b16      	ldr	r3, [pc, #88]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800bb06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb08:	4a17      	ldr	r2, [pc, #92]	; (800bb68 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800bb0a:	4013      	ands	r3, r2
 800bb0c:	0019      	movs	r1, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	699a      	ldr	r2, [r3, #24]
 800bb12:	4b13      	ldr	r3, [pc, #76]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800bb14:	430a      	orrs	r2, r1
 800bb16:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	2240      	movs	r2, #64	; 0x40
 800bb1e:	4013      	ands	r3, r2
 800bb20:	d009      	beq.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bb22:	4b0f      	ldr	r3, [pc, #60]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800bb24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb26:	4a17      	ldr	r2, [pc, #92]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800bb28:	4013      	ands	r3, r2
 800bb2a:	0019      	movs	r1, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6a1a      	ldr	r2, [r3, #32]
 800bb30:	4b0b      	ldr	r3, [pc, #44]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800bb32:	430a      	orrs	r2, r1
 800bb34:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2280      	movs	r2, #128	; 0x80
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	d009      	beq.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800bb40:	4b07      	ldr	r3, [pc, #28]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800bb42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb44:	4a10      	ldr	r2, [pc, #64]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800bb46:	4013      	ands	r3, r2
 800bb48:	0019      	movs	r1, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	69da      	ldr	r2, [r3, #28]
 800bb4e:	4b04      	ldr	r3, [pc, #16]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800bb50:	430a      	orrs	r2, r1
 800bb52:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	0018      	movs	r0, r3
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	b006      	add	sp, #24
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	46c0      	nop			; (mov r8, r8)
 800bb60:	40021000 	.word	0x40021000
 800bb64:	40007000 	.word	0x40007000
 800bb68:	fffcffff 	.word	0xfffcffff
 800bb6c:	fff7ffff 	.word	0xfff7ffff
 800bb70:	00001388 	.word	0x00001388
 800bb74:	ffcfffff 	.word	0xffcfffff
 800bb78:	efffffff 	.word	0xefffffff
 800bb7c:	fffff3ff 	.word	0xfffff3ff
 800bb80:	ffffcfff 	.word	0xffffcfff
 800bb84:	fbffffff 	.word	0xfbffffff
 800bb88:	fff3ffff 	.word	0xfff3ffff

0800bb8c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d101      	bne.n	800bb9e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	e08e      	b.n	800bcbc <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2221      	movs	r2, #33	; 0x21
 800bba2:	5c9b      	ldrb	r3, [r3, r2]
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d107      	bne.n	800bbba <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2220      	movs	r2, #32
 800bbae:	2100      	movs	r1, #0
 800bbb0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	0018      	movs	r0, r3
 800bbb6:	f7f9 fad3 	bl	8005160 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2221      	movs	r2, #33	; 0x21
 800bbbe:	2102      	movs	r1, #2
 800bbc0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	22ca      	movs	r2, #202	; 0xca
 800bbc8:	625a      	str	r2, [r3, #36]	; 0x24
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2253      	movs	r2, #83	; 0x53
 800bbd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	0018      	movs	r0, r3
 800bbd6:	f000 fca6 	bl	800c526 <RTC_EnterInitMode>
 800bbda:	1e03      	subs	r3, r0, #0
 800bbdc:	d009      	beq.n	800bbf2 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	22ff      	movs	r2, #255	; 0xff
 800bbe4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2221      	movs	r2, #33	; 0x21
 800bbea:	2104      	movs	r1, #4
 800bbec:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e064      	b.n	800bcbc <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	689a      	ldr	r2, [r3, #8]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4931      	ldr	r1, [pc, #196]	; (800bcc4 <HAL_RTC_Init+0x138>)
 800bbfe:	400a      	ands	r2, r1
 800bc00:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	6899      	ldr	r1, [r3, #8]
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	685a      	ldr	r2, [r3, #4]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	431a      	orrs	r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	699b      	ldr	r3, [r3, #24]
 800bc16:	431a      	orrs	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	430a      	orrs	r2, r1
 800bc1e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	68d2      	ldr	r2, [r2, #12]
 800bc28:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	6919      	ldr	r1, [r3, #16]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	041a      	lsls	r2, r3, #16
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	430a      	orrs	r2, r1
 800bc3c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68da      	ldr	r2, [r3, #12]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2180      	movs	r1, #128	; 0x80
 800bc4a:	438a      	bics	r2, r1
 800bc4c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2103      	movs	r1, #3
 800bc5a:	438a      	bics	r2, r1
 800bc5c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	69da      	ldr	r2, [r3, #28]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	695b      	ldr	r3, [r3, #20]
 800bc6c:	431a      	orrs	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	430a      	orrs	r2, r1
 800bc74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	2220      	movs	r2, #32
 800bc7e:	4013      	ands	r3, r2
 800bc80:	d113      	bne.n	800bcaa <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	0018      	movs	r0, r3
 800bc86:	f000 fc27 	bl	800c4d8 <HAL_RTC_WaitForSynchro>
 800bc8a:	1e03      	subs	r3, r0, #0
 800bc8c:	d00d      	beq.n	800bcaa <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	22ff      	movs	r2, #255	; 0xff
 800bc94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2221      	movs	r2, #33	; 0x21
 800bc9a:	2104      	movs	r1, #4
 800bc9c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2220      	movs	r2, #32
 800bca2:	2100      	movs	r1, #0
 800bca4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	e008      	b.n	800bcbc <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	22ff      	movs	r2, #255	; 0xff
 800bcb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2221      	movs	r2, #33	; 0x21
 800bcb6:	2101      	movs	r1, #1
 800bcb8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800bcba:	2300      	movs	r3, #0
  }
}
 800bcbc:	0018      	movs	r0, r3
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	b002      	add	sp, #8
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	ff8fffbf 	.word	0xff8fffbf

0800bcc8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bcc8:	b590      	push	{r4, r7, lr}
 800bcca:	b087      	sub	sp, #28
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2220      	movs	r2, #32
 800bcd8:	5c9b      	ldrb	r3, [r3, r2]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d101      	bne.n	800bce2 <HAL_RTC_SetTime+0x1a>
 800bcde:	2302      	movs	r3, #2
 800bce0:	e0ad      	b.n	800be3e <HAL_RTC_SetTime+0x176>
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2220      	movs	r2, #32
 800bce6:	2101      	movs	r1, #1
 800bce8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2221      	movs	r2, #33	; 0x21
 800bcee:	2102      	movs	r1, #2
 800bcf0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d125      	bne.n	800bd44 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	2240      	movs	r2, #64	; 0x40
 800bd00:	4013      	ands	r3, r2
 800bd02:	d102      	bne.n	800bd0a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	2200      	movs	r2, #0
 800bd08:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	0018      	movs	r0, r3
 800bd10:	f000 fc33 	bl	800c57a <RTC_ByteToBcd2>
 800bd14:	0003      	movs	r3, r0
 800bd16:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	785b      	ldrb	r3, [r3, #1]
 800bd1c:	0018      	movs	r0, r3
 800bd1e:	f000 fc2c 	bl	800c57a <RTC_ByteToBcd2>
 800bd22:	0003      	movs	r3, r0
 800bd24:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bd26:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	789b      	ldrb	r3, [r3, #2]
 800bd2c:	0018      	movs	r0, r3
 800bd2e:	f000 fc24 	bl	800c57a <RTC_ByteToBcd2>
 800bd32:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800bd34:	0022      	movs	r2, r4
 800bd36:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	78db      	ldrb	r3, [r3, #3]
 800bd3c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	617b      	str	r3, [r7, #20]
 800bd42:	e017      	b.n	800bd74 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	2240      	movs	r2, #64	; 0x40
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	d102      	bne.n	800bd56 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2200      	movs	r2, #0
 800bd54:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	785b      	ldrb	r3, [r3, #1]
 800bd60:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bd62:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800bd64:	68ba      	ldr	r2, [r7, #8]
 800bd66:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800bd68:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	78db      	ldrb	r3, [r3, #3]
 800bd6e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bd70:	4313      	orrs	r3, r2
 800bd72:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	22ca      	movs	r2, #202	; 0xca
 800bd7a:	625a      	str	r2, [r3, #36]	; 0x24
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2253      	movs	r2, #83	; 0x53
 800bd82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	0018      	movs	r0, r3
 800bd88:	f000 fbcd 	bl	800c526 <RTC_EnterInitMode>
 800bd8c:	1e03      	subs	r3, r0, #0
 800bd8e:	d00d      	beq.n	800bdac <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	22ff      	movs	r2, #255	; 0xff
 800bd96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2221      	movs	r2, #33	; 0x21
 800bd9c:	2104      	movs	r1, #4
 800bd9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2220      	movs	r2, #32
 800bda4:	2100      	movs	r1, #0
 800bda6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e048      	b.n	800be3e <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	697a      	ldr	r2, [r7, #20]
 800bdb2:	4925      	ldr	r1, [pc, #148]	; (800be48 <HAL_RTC_SetTime+0x180>)
 800bdb4:	400a      	ands	r2, r1
 800bdb6:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	689a      	ldr	r2, [r3, #8]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4922      	ldr	r1, [pc, #136]	; (800be4c <HAL_RTC_SetTime+0x184>)
 800bdc4:	400a      	ands	r2, r1
 800bdc6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	6899      	ldr	r1, [r3, #8]
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	68da      	ldr	r2, [r3, #12]
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	691b      	ldr	r3, [r3, #16]
 800bdd6:	431a      	orrs	r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	430a      	orrs	r2, r1
 800bdde:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	68da      	ldr	r2, [r3, #12]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	2180      	movs	r1, #128	; 0x80
 800bdec:	438a      	bics	r2, r1
 800bdee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	2220      	movs	r2, #32
 800bdf8:	4013      	ands	r3, r2
 800bdfa:	d113      	bne.n	800be24 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	0018      	movs	r0, r3
 800be00:	f000 fb6a 	bl	800c4d8 <HAL_RTC_WaitForSynchro>
 800be04:	1e03      	subs	r3, r0, #0
 800be06:	d00d      	beq.n	800be24 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	22ff      	movs	r2, #255	; 0xff
 800be0e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2221      	movs	r2, #33	; 0x21
 800be14:	2104      	movs	r1, #4
 800be16:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2220      	movs	r2, #32
 800be1c:	2100      	movs	r1, #0
 800be1e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800be20:	2301      	movs	r3, #1
 800be22:	e00c      	b.n	800be3e <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	22ff      	movs	r2, #255	; 0xff
 800be2a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2221      	movs	r2, #33	; 0x21
 800be30:	2101      	movs	r1, #1
 800be32:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2220      	movs	r2, #32
 800be38:	2100      	movs	r1, #0
 800be3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800be3c:	2300      	movs	r3, #0
  }
}
 800be3e:	0018      	movs	r0, r3
 800be40:	46bd      	mov	sp, r7
 800be42:	b007      	add	sp, #28
 800be44:	bd90      	pop	{r4, r7, pc}
 800be46:	46c0      	nop			; (mov r8, r8)
 800be48:	007f7f7f 	.word	0x007f7f7f
 800be4c:	fffbffff 	.word	0xfffbffff

0800be50 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	045b      	lsls	r3, r3, #17
 800be6e:	0c5a      	lsrs	r2, r3, #17
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4a22      	ldr	r2, [pc, #136]	; (800bf04 <HAL_RTC_GetTime+0xb4>)
 800be7c:	4013      	ands	r3, r2
 800be7e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	0c1b      	lsrs	r3, r3, #16
 800be84:	b2db      	uxtb	r3, r3
 800be86:	223f      	movs	r2, #63	; 0x3f
 800be88:	4013      	ands	r3, r2
 800be8a:	b2da      	uxtb	r2, r3
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	0a1b      	lsrs	r3, r3, #8
 800be94:	b2db      	uxtb	r3, r3
 800be96:	227f      	movs	r2, #127	; 0x7f
 800be98:	4013      	ands	r3, r2
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	227f      	movs	r2, #127	; 0x7f
 800bea6:	4013      	ands	r3, r2
 800bea8:	b2da      	uxtb	r2, r3
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	0c1b      	lsrs	r3, r3, #16
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	2240      	movs	r2, #64	; 0x40
 800beb6:	4013      	ands	r3, r2
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d11a      	bne.n	800befa <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	0018      	movs	r0, r3
 800beca:	f000 fb7f 	bl	800c5cc <RTC_Bcd2ToByte>
 800bece:	0003      	movs	r3, r0
 800bed0:	001a      	movs	r2, r3
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	785b      	ldrb	r3, [r3, #1]
 800beda:	0018      	movs	r0, r3
 800bedc:	f000 fb76 	bl	800c5cc <RTC_Bcd2ToByte>
 800bee0:	0003      	movs	r3, r0
 800bee2:	001a      	movs	r2, r3
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	789b      	ldrb	r3, [r3, #2]
 800beec:	0018      	movs	r0, r3
 800beee:	f000 fb6d 	bl	800c5cc <RTC_Bcd2ToByte>
 800bef2:	0003      	movs	r3, r0
 800bef4:	001a      	movs	r2, r3
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800befa:	2300      	movs	r3, #0
}
 800befc:	0018      	movs	r0, r3
 800befe:	46bd      	mov	sp, r7
 800bf00:	b006      	add	sp, #24
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	007f7f7f 	.word	0x007f7f7f

0800bf08 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bf08:	b590      	push	{r4, r7, lr}
 800bf0a:	b087      	sub	sp, #28
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2220      	movs	r2, #32
 800bf18:	5c9b      	ldrb	r3, [r3, r2]
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d101      	bne.n	800bf22 <HAL_RTC_SetDate+0x1a>
 800bf1e:	2302      	movs	r3, #2
 800bf20:	e099      	b.n	800c056 <HAL_RTC_SetDate+0x14e>
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2220      	movs	r2, #32
 800bf26:	2101      	movs	r1, #1
 800bf28:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2221      	movs	r2, #33	; 0x21
 800bf2e:	2102      	movs	r1, #2
 800bf30:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d10e      	bne.n	800bf56 <HAL_RTC_SetDate+0x4e>
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	785b      	ldrb	r3, [r3, #1]
 800bf3c:	001a      	movs	r2, r3
 800bf3e:	2310      	movs	r3, #16
 800bf40:	4013      	ands	r3, r2
 800bf42:	d008      	beq.n	800bf56 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	785b      	ldrb	r3, [r3, #1]
 800bf48:	2210      	movs	r2, #16
 800bf4a:	4393      	bics	r3, r2
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	330a      	adds	r3, #10
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d11c      	bne.n	800bf96 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	78db      	ldrb	r3, [r3, #3]
 800bf60:	0018      	movs	r0, r3
 800bf62:	f000 fb0a 	bl	800c57a <RTC_ByteToBcd2>
 800bf66:	0003      	movs	r3, r0
 800bf68:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	785b      	ldrb	r3, [r3, #1]
 800bf6e:	0018      	movs	r0, r3
 800bf70:	f000 fb03 	bl	800c57a <RTC_ByteToBcd2>
 800bf74:	0003      	movs	r3, r0
 800bf76:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800bf78:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	789b      	ldrb	r3, [r3, #2]
 800bf7e:	0018      	movs	r0, r3
 800bf80:	f000 fafb 	bl	800c57a <RTC_ByteToBcd2>
 800bf84:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800bf86:	0022      	movs	r2, r4
 800bf88:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800bf90:	4313      	orrs	r3, r2
 800bf92:	617b      	str	r3, [r7, #20]
 800bf94:	e00e      	b.n	800bfb4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	78db      	ldrb	r3, [r3, #3]
 800bf9a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	785b      	ldrb	r3, [r3, #1]
 800bfa0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800bfa2:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800bfa4:	68ba      	ldr	r2, [r7, #8]
 800bfa6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800bfa8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	22ca      	movs	r2, #202	; 0xca
 800bfba:	625a      	str	r2, [r3, #36]	; 0x24
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2253      	movs	r2, #83	; 0x53
 800bfc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	0018      	movs	r0, r3
 800bfc8:	f000 faad 	bl	800c526 <RTC_EnterInitMode>
 800bfcc:	1e03      	subs	r3, r0, #0
 800bfce:	d00d      	beq.n	800bfec <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	22ff      	movs	r2, #255	; 0xff
 800bfd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2221      	movs	r2, #33	; 0x21
 800bfdc:	2104      	movs	r1, #4
 800bfde:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2220      	movs	r2, #32
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	e034      	b.n	800c056 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	697a      	ldr	r2, [r7, #20]
 800bff2:	491b      	ldr	r1, [pc, #108]	; (800c060 <HAL_RTC_SetDate+0x158>)
 800bff4:	400a      	ands	r2, r1
 800bff6:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68da      	ldr	r2, [r3, #12]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2180      	movs	r1, #128	; 0x80
 800c004:	438a      	bics	r2, r1
 800c006:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	2220      	movs	r2, #32
 800c010:	4013      	ands	r3, r2
 800c012:	d113      	bne.n	800c03c <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	0018      	movs	r0, r3
 800c018:	f000 fa5e 	bl	800c4d8 <HAL_RTC_WaitForSynchro>
 800c01c:	1e03      	subs	r3, r0, #0
 800c01e:	d00d      	beq.n	800c03c <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	22ff      	movs	r2, #255	; 0xff
 800c026:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2221      	movs	r2, #33	; 0x21
 800c02c:	2104      	movs	r1, #4
 800c02e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2220      	movs	r2, #32
 800c034:	2100      	movs	r1, #0
 800c036:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800c038:	2301      	movs	r3, #1
 800c03a:	e00c      	b.n	800c056 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	22ff      	movs	r2, #255	; 0xff
 800c042:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2221      	movs	r2, #33	; 0x21
 800c048:	2101      	movs	r1, #1
 800c04a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2220      	movs	r2, #32
 800c050:	2100      	movs	r1, #0
 800c052:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c054:	2300      	movs	r3, #0
  }
}
 800c056:	0018      	movs	r0, r3
 800c058:	46bd      	mov	sp, r7
 800c05a:	b007      	add	sp, #28
 800c05c:	bd90      	pop	{r4, r7, pc}
 800c05e:	46c0      	nop			; (mov r8, r8)
 800c060:	00ffff3f 	.word	0x00ffff3f

0800c064 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	4a21      	ldr	r2, [pc, #132]	; (800c0fc <HAL_RTC_GetDate+0x98>)
 800c078:	4013      	ands	r3, r2
 800c07a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	0c1b      	lsrs	r3, r3, #16
 800c080:	b2da      	uxtb	r2, r3
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	0a1b      	lsrs	r3, r3, #8
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	221f      	movs	r2, #31
 800c08e:	4013      	ands	r3, r2
 800c090:	b2da      	uxtb	r2, r3
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	b2db      	uxtb	r3, r3
 800c09a:	223f      	movs	r2, #63	; 0x3f
 800c09c:	4013      	ands	r3, r2
 800c09e:	b2da      	uxtb	r2, r3
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	0b5b      	lsrs	r3, r3, #13
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	2207      	movs	r2, #7
 800c0ac:	4013      	ands	r3, r2
 800c0ae:	b2da      	uxtb	r2, r3
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d11a      	bne.n	800c0f0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	78db      	ldrb	r3, [r3, #3]
 800c0be:	0018      	movs	r0, r3
 800c0c0:	f000 fa84 	bl	800c5cc <RTC_Bcd2ToByte>
 800c0c4:	0003      	movs	r3, r0
 800c0c6:	001a      	movs	r2, r3
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	785b      	ldrb	r3, [r3, #1]
 800c0d0:	0018      	movs	r0, r3
 800c0d2:	f000 fa7b 	bl	800c5cc <RTC_Bcd2ToByte>
 800c0d6:	0003      	movs	r3, r0
 800c0d8:	001a      	movs	r2, r3
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	789b      	ldrb	r3, [r3, #2]
 800c0e2:	0018      	movs	r0, r3
 800c0e4:	f000 fa72 	bl	800c5cc <RTC_Bcd2ToByte>
 800c0e8:	0003      	movs	r3, r0
 800c0ea:	001a      	movs	r2, r3
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c0f0:	2300      	movs	r3, #0
}
 800c0f2:	0018      	movs	r0, r3
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	b006      	add	sp, #24
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	46c0      	nop			; (mov r8, r8)
 800c0fc:	00ffff3f 	.word	0x00ffff3f

0800c100 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c100:	b590      	push	{r4, r7, lr}
 800c102:	b089      	sub	sp, #36	; 0x24
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2220      	movs	r2, #32
 800c110:	5c9b      	ldrb	r3, [r3, r2]
 800c112:	2b01      	cmp	r3, #1
 800c114:	d101      	bne.n	800c11a <HAL_RTC_SetAlarm_IT+0x1a>
 800c116:	2302      	movs	r3, #2
 800c118:	e130      	b.n	800c37c <HAL_RTC_SetAlarm_IT+0x27c>
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2220      	movs	r2, #32
 800c11e:	2101      	movs	r1, #1
 800c120:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2221      	movs	r2, #33	; 0x21
 800c126:	2102      	movs	r1, #2
 800c128:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d136      	bne.n	800c19e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	2240      	movs	r2, #64	; 0x40
 800c138:	4013      	ands	r3, r2
 800c13a:	d102      	bne.n	800c142 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	2200      	movs	r2, #0
 800c140:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	0018      	movs	r0, r3
 800c148:	f000 fa17 	bl	800c57a <RTC_ByteToBcd2>
 800c14c:	0003      	movs	r3, r0
 800c14e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	785b      	ldrb	r3, [r3, #1]
 800c154:	0018      	movs	r0, r3
 800c156:	f000 fa10 	bl	800c57a <RTC_ByteToBcd2>
 800c15a:	0003      	movs	r3, r0
 800c15c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c15e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	789b      	ldrb	r3, [r3, #2]
 800c164:	0018      	movs	r0, r3
 800c166:	f000 fa08 	bl	800c57a <RTC_ByteToBcd2>
 800c16a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c16c:	0022      	movs	r2, r4
 800c16e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	78db      	ldrb	r3, [r3, #3]
 800c174:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c176:	431a      	orrs	r2, r3
 800c178:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	2220      	movs	r2, #32
 800c17e:	5c9b      	ldrb	r3, [r3, r2]
 800c180:	0018      	movs	r0, r3
 800c182:	f000 f9fa 	bl	800c57a <RTC_ByteToBcd2>
 800c186:	0003      	movs	r3, r0
 800c188:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c18a:	0022      	movs	r2, r4
 800c18c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c192:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c198:	4313      	orrs	r3, r2
 800c19a:	61fb      	str	r3, [r7, #28]
 800c19c:	e022      	b.n	800c1e4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	2240      	movs	r2, #64	; 0x40
 800c1a6:	4013      	ands	r3, r2
 800c1a8:	d102      	bne.n	800c1b0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	785b      	ldrb	r3, [r3, #1]
 800c1ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c1bc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c1be:	68ba      	ldr	r2, [r7, #8]
 800c1c0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c1c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	78db      	ldrb	r3, [r3, #3]
 800c1c8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c1ca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	2120      	movs	r1, #32
 800c1d0:	5c5b      	ldrb	r3, [r3, r1]
 800c1d2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c1d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c1da:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	685a      	ldr	r2, [r3, #4]
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	699b      	ldr	r3, [r3, #24]
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	22ca      	movs	r2, #202	; 0xca
 800c1f6:	625a      	str	r2, [r3, #36]	; 0x24
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2253      	movs	r2, #83	; 0x53
 800c1fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c204:	2380      	movs	r3, #128	; 0x80
 800c206:	005b      	lsls	r3, r3, #1
 800c208:	429a      	cmp	r2, r3
 800c20a:	d14e      	bne.n	800c2aa <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	689a      	ldr	r2, [r3, #8]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	495b      	ldr	r1, [pc, #364]	; (800c384 <HAL_RTC_SetAlarm_IT+0x284>)
 800c218:	400a      	ands	r2, r1
 800c21a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	22ff      	movs	r2, #255	; 0xff
 800c224:	401a      	ands	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4957      	ldr	r1, [pc, #348]	; (800c388 <HAL_RTC_SetAlarm_IT+0x288>)
 800c22c:	430a      	orrs	r2, r1
 800c22e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c230:	f7fc fd56 	bl	8008ce0 <HAL_GetTick>
 800c234:	0003      	movs	r3, r0
 800c236:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c238:	e016      	b.n	800c268 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c23a:	f7fc fd51 	bl	8008ce0 <HAL_GetTick>
 800c23e:	0002      	movs	r2, r0
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	1ad2      	subs	r2, r2, r3
 800c244:	23fa      	movs	r3, #250	; 0xfa
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	429a      	cmp	r2, r3
 800c24a:	d90d      	bls.n	800c268 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	22ff      	movs	r2, #255	; 0xff
 800c252:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	2221      	movs	r2, #33	; 0x21
 800c258:	2103      	movs	r1, #3
 800c25a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2220      	movs	r2, #32
 800c260:	2100      	movs	r1, #0
 800c262:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c264:	2303      	movs	r3, #3
 800c266:	e089      	b.n	800c37c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	2201      	movs	r2, #1
 800c270:	4013      	ands	r3, r2
 800c272:	d0e2      	beq.n	800c23a <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	69fa      	ldr	r2, [r7, #28]
 800c27a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	69ba      	ldr	r2, [r7, #24]
 800c282:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	689a      	ldr	r2, [r3, #8]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	2180      	movs	r1, #128	; 0x80
 800c290:	0049      	lsls	r1, r1, #1
 800c292:	430a      	orrs	r2, r1
 800c294:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	689a      	ldr	r2, [r3, #8]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2180      	movs	r1, #128	; 0x80
 800c2a2:	0149      	lsls	r1, r1, #5
 800c2a4:	430a      	orrs	r2, r1
 800c2a6:	609a      	str	r2, [r3, #8]
 800c2a8:	e04d      	b.n	800c346 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	689a      	ldr	r2, [r3, #8]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4935      	ldr	r1, [pc, #212]	; (800c38c <HAL_RTC_SetAlarm_IT+0x28c>)
 800c2b6:	400a      	ands	r2, r1
 800c2b8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	22ff      	movs	r2, #255	; 0xff
 800c2c2:	401a      	ands	r2, r3
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4931      	ldr	r1, [pc, #196]	; (800c390 <HAL_RTC_SetAlarm_IT+0x290>)
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c2ce:	f7fc fd07 	bl	8008ce0 <HAL_GetTick>
 800c2d2:	0003      	movs	r3, r0
 800c2d4:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c2d6:	e016      	b.n	800c306 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c2d8:	f7fc fd02 	bl	8008ce0 <HAL_GetTick>
 800c2dc:	0002      	movs	r2, r0
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	1ad2      	subs	r2, r2, r3
 800c2e2:	23fa      	movs	r3, #250	; 0xfa
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d90d      	bls.n	800c306 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	22ff      	movs	r2, #255	; 0xff
 800c2f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2221      	movs	r2, #33	; 0x21
 800c2f6:	2103      	movs	r1, #3
 800c2f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2220      	movs	r2, #32
 800c2fe:	2100      	movs	r1, #0
 800c300:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c302:	2303      	movs	r3, #3
 800c304:	e03a      	b.n	800c37c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	2202      	movs	r2, #2
 800c30e:	4013      	ands	r3, r2
 800c310:	d0e2      	beq.n	800c2d8 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	69fa      	ldr	r2, [r7, #28]
 800c318:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	69ba      	ldr	r2, [r7, #24]
 800c320:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	689a      	ldr	r2, [r3, #8]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	2180      	movs	r1, #128	; 0x80
 800c32e:	0089      	lsls	r1, r1, #2
 800c330:	430a      	orrs	r2, r1
 800c332:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	689a      	ldr	r2, [r3, #8]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2180      	movs	r1, #128	; 0x80
 800c340:	0189      	lsls	r1, r1, #6
 800c342:	430a      	orrs	r2, r1
 800c344:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800c346:	4b13      	ldr	r3, [pc, #76]	; (800c394 <HAL_RTC_SetAlarm_IT+0x294>)
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	4b12      	ldr	r3, [pc, #72]	; (800c394 <HAL_RTC_SetAlarm_IT+0x294>)
 800c34c:	2180      	movs	r1, #128	; 0x80
 800c34e:	0289      	lsls	r1, r1, #10
 800c350:	430a      	orrs	r2, r1
 800c352:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800c354:	4b0f      	ldr	r3, [pc, #60]	; (800c394 <HAL_RTC_SetAlarm_IT+0x294>)
 800c356:	689a      	ldr	r2, [r3, #8]
 800c358:	4b0e      	ldr	r3, [pc, #56]	; (800c394 <HAL_RTC_SetAlarm_IT+0x294>)
 800c35a:	2180      	movs	r1, #128	; 0x80
 800c35c:	0289      	lsls	r1, r1, #10
 800c35e:	430a      	orrs	r2, r1
 800c360:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	22ff      	movs	r2, #255	; 0xff
 800c368:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2221      	movs	r2, #33	; 0x21
 800c36e:	2101      	movs	r1, #1
 800c370:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2220      	movs	r2, #32
 800c376:	2100      	movs	r1, #0
 800c378:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c37a:	2300      	movs	r3, #0
}
 800c37c:	0018      	movs	r0, r3
 800c37e:	46bd      	mov	sp, r7
 800c380:	b009      	add	sp, #36	; 0x24
 800c382:	bd90      	pop	{r4, r7, pc}
 800c384:	fffffeff 	.word	0xfffffeff
 800c388:	fffffe7f 	.word	0xfffffe7f
 800c38c:	fffffdff 	.word	0xfffffdff
 800c390:	fffffd7f 	.word	0xfffffd7f
 800c394:	40010400 	.word	0x40010400

0800c398 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2220      	movs	r2, #32
 800c3a6:	5c9b      	ldrb	r3, [r3, r2]
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d101      	bne.n	800c3b0 <HAL_RTC_DeactivateAlarm+0x18>
 800c3ac:	2302      	movs	r3, #2
 800c3ae:	e086      	b.n	800c4be <HAL_RTC_DeactivateAlarm+0x126>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2220      	movs	r2, #32
 800c3b4:	2101      	movs	r1, #1
 800c3b6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2221      	movs	r2, #33	; 0x21
 800c3bc:	2102      	movs	r1, #2
 800c3be:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	22ca      	movs	r2, #202	; 0xca
 800c3c6:	625a      	str	r2, [r3, #36]	; 0x24
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2253      	movs	r2, #83	; 0x53
 800c3ce:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800c3d0:	683a      	ldr	r2, [r7, #0]
 800c3d2:	2380      	movs	r3, #128	; 0x80
 800c3d4:	005b      	lsls	r3, r3, #1
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d132      	bne.n	800c440 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	689a      	ldr	r2, [r3, #8]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4938      	ldr	r1, [pc, #224]	; (800c4c8 <HAL_RTC_DeactivateAlarm+0x130>)
 800c3e6:	400a      	ands	r2, r1
 800c3e8:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	689a      	ldr	r2, [r3, #8]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4935      	ldr	r1, [pc, #212]	; (800c4cc <HAL_RTC_DeactivateAlarm+0x134>)
 800c3f6:	400a      	ands	r2, r1
 800c3f8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800c3fa:	f7fc fc71 	bl	8008ce0 <HAL_GetTick>
 800c3fe:	0003      	movs	r3, r0
 800c400:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c402:	e016      	b.n	800c432 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c404:	f7fc fc6c 	bl	8008ce0 <HAL_GetTick>
 800c408:	0002      	movs	r2, r0
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	1ad2      	subs	r2, r2, r3
 800c40e:	23fa      	movs	r3, #250	; 0xfa
 800c410:	009b      	lsls	r3, r3, #2
 800c412:	429a      	cmp	r2, r3
 800c414:	d90d      	bls.n	800c432 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	22ff      	movs	r2, #255	; 0xff
 800c41c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2221      	movs	r2, #33	; 0x21
 800c422:	2103      	movs	r1, #3
 800c424:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2220      	movs	r2, #32
 800c42a:	2100      	movs	r1, #0
 800c42c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c42e:	2303      	movs	r3, #3
 800c430:	e045      	b.n	800c4be <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	2201      	movs	r2, #1
 800c43a:	4013      	ands	r3, r2
 800c43c:	d0e2      	beq.n	800c404 <HAL_RTC_DeactivateAlarm+0x6c>
 800c43e:	e031      	b.n	800c4a4 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	689a      	ldr	r2, [r3, #8]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4921      	ldr	r1, [pc, #132]	; (800c4d0 <HAL_RTC_DeactivateAlarm+0x138>)
 800c44c:	400a      	ands	r2, r1
 800c44e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	689a      	ldr	r2, [r3, #8]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	491e      	ldr	r1, [pc, #120]	; (800c4d4 <HAL_RTC_DeactivateAlarm+0x13c>)
 800c45c:	400a      	ands	r2, r1
 800c45e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800c460:	f7fc fc3e 	bl	8008ce0 <HAL_GetTick>
 800c464:	0003      	movs	r3, r0
 800c466:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c468:	e016      	b.n	800c498 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c46a:	f7fc fc39 	bl	8008ce0 <HAL_GetTick>
 800c46e:	0002      	movs	r2, r0
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	1ad2      	subs	r2, r2, r3
 800c474:	23fa      	movs	r3, #250	; 0xfa
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	429a      	cmp	r2, r3
 800c47a:	d90d      	bls.n	800c498 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	22ff      	movs	r2, #255	; 0xff
 800c482:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2221      	movs	r2, #33	; 0x21
 800c488:	2103      	movs	r1, #3
 800c48a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2220      	movs	r2, #32
 800c490:	2100      	movs	r1, #0
 800c492:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c494:	2303      	movs	r3, #3
 800c496:	e012      	b.n	800c4be <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	68db      	ldr	r3, [r3, #12]
 800c49e:	2202      	movs	r2, #2
 800c4a0:	4013      	ands	r3, r2
 800c4a2:	d0e2      	beq.n	800c46a <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	22ff      	movs	r2, #255	; 0xff
 800c4aa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2221      	movs	r2, #33	; 0x21
 800c4b0:	2101      	movs	r1, #1
 800c4b2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2220      	movs	r2, #32
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c4bc:	2300      	movs	r3, #0
}
 800c4be:	0018      	movs	r0, r3
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	b004      	add	sp, #16
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	46c0      	nop			; (mov r8, r8)
 800c4c8:	fffffeff 	.word	0xfffffeff
 800c4cc:	ffffefff 	.word	0xffffefff
 800c4d0:	fffffdff 	.word	0xfffffdff
 800c4d4:	ffffdfff 	.word	0xffffdfff

0800c4d8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	68da      	ldr	r2, [r3, #12]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	21a0      	movs	r1, #160	; 0xa0
 800c4ec:	438a      	bics	r2, r1
 800c4ee:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800c4f0:	f7fc fbf6 	bl	8008ce0 <HAL_GetTick>
 800c4f4:	0003      	movs	r3, r0
 800c4f6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c4f8:	e00a      	b.n	800c510 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c4fa:	f7fc fbf1 	bl	8008ce0 <HAL_GetTick>
 800c4fe:	0002      	movs	r2, r0
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	1ad2      	subs	r2, r2, r3
 800c504:	23fa      	movs	r3, #250	; 0xfa
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	429a      	cmp	r2, r3
 800c50a:	d901      	bls.n	800c510 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c50c:	2303      	movs	r3, #3
 800c50e:	e006      	b.n	800c51e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	2220      	movs	r2, #32
 800c518:	4013      	ands	r3, r2
 800c51a:	d0ee      	beq.n	800c4fa <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	0018      	movs	r0, r3
 800c520:	46bd      	mov	sp, r7
 800c522:	b004      	add	sp, #16
 800c524:	bd80      	pop	{r7, pc}

0800c526 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b084      	sub	sp, #16
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	2240      	movs	r2, #64	; 0x40
 800c536:	4013      	ands	r3, r2
 800c538:	d11a      	bne.n	800c570 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2201      	movs	r2, #1
 800c540:	4252      	negs	r2, r2
 800c542:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c544:	f7fc fbcc 	bl	8008ce0 <HAL_GetTick>
 800c548:	0003      	movs	r3, r0
 800c54a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c54c:	e00a      	b.n	800c564 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c54e:	f7fc fbc7 	bl	8008ce0 <HAL_GetTick>
 800c552:	0002      	movs	r2, r0
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	1ad2      	subs	r2, r2, r3
 800c558:	23fa      	movs	r3, #250	; 0xfa
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d901      	bls.n	800c564 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800c560:	2303      	movs	r3, #3
 800c562:	e006      	b.n	800c572 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	2240      	movs	r2, #64	; 0x40
 800c56c:	4013      	ands	r3, r2
 800c56e:	d0ee      	beq.n	800c54e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800c570:	2300      	movs	r3, #0
}
 800c572:	0018      	movs	r0, r3
 800c574:	46bd      	mov	sp, r7
 800c576:	b004      	add	sp, #16
 800c578:	bd80      	pop	{r7, pc}

0800c57a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c57a:	b580      	push	{r7, lr}
 800c57c:	b084      	sub	sp, #16
 800c57e:	af00      	add	r7, sp, #0
 800c580:	0002      	movs	r2, r0
 800c582:	1dfb      	adds	r3, r7, #7
 800c584:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800c586:	2300      	movs	r3, #0
 800c588:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800c58a:	230b      	movs	r3, #11
 800c58c:	18fb      	adds	r3, r7, r3
 800c58e:	1dfa      	adds	r2, r7, #7
 800c590:	7812      	ldrb	r2, [r2, #0]
 800c592:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 800c594:	e008      	b.n	800c5a8 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	3301      	adds	r3, #1
 800c59a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800c59c:	220b      	movs	r2, #11
 800c59e:	18bb      	adds	r3, r7, r2
 800c5a0:	18ba      	adds	r2, r7, r2
 800c5a2:	7812      	ldrb	r2, [r2, #0]
 800c5a4:	3a0a      	subs	r2, #10
 800c5a6:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800c5a8:	230b      	movs	r3, #11
 800c5aa:	18fb      	adds	r3, r7, r3
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	2b09      	cmp	r3, #9
 800c5b0:	d8f1      	bhi.n	800c596 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	011b      	lsls	r3, r3, #4
 800c5b8:	b2da      	uxtb	r2, r3
 800c5ba:	230b      	movs	r3, #11
 800c5bc:	18fb      	adds	r3, r7, r3
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	b2db      	uxtb	r3, r3
}
 800c5c4:	0018      	movs	r0, r3
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	b004      	add	sp, #16
 800c5ca:	bd80      	pop	{r7, pc}

0800c5cc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	0002      	movs	r2, r0
 800c5d4:	1dfb      	adds	r3, r7, #7
 800c5d6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800c5d8:	1dfb      	adds	r3, r7, #7
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	091b      	lsrs	r3, r3, #4
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	001a      	movs	r2, r3
 800c5e2:	0013      	movs	r3, r2
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	189b      	adds	r3, r3, r2
 800c5e8:	005b      	lsls	r3, r3, #1
 800c5ea:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	b2da      	uxtb	r2, r3
 800c5f0:	1dfb      	adds	r3, r7, #7
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	210f      	movs	r1, #15
 800c5f6:	400b      	ands	r3, r1
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	18d3      	adds	r3, r2, r3
 800c5fc:	b2db      	uxtb	r3, r3
}
 800c5fe:	0018      	movs	r0, r3
 800c600:	46bd      	mov	sp, r7
 800c602:	b004      	add	sp, #16
 800c604:	bd80      	pop	{r7, pc}

0800c606 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800c606:	b580      	push	{r7, lr}
 800c608:	b086      	sub	sp, #24
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	60f8      	str	r0, [r7, #12]
 800c60e:	60b9      	str	r1, [r7, #8]
 800c610:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	3350      	adds	r3, #80	; 0x50
 800c618:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	697a      	ldr	r2, [r7, #20]
 800c620:	18d3      	adds	r3, r2, r3
 800c622:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	601a      	str	r2, [r3, #0]
}
 800c62a:	46c0      	nop			; (mov r8, r8)
 800c62c:	46bd      	mov	sp, r7
 800c62e:	b006      	add	sp, #24
 800c630:	bd80      	pop	{r7, pc}

0800c632 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800c632:	b580      	push	{r7, lr}
 800c634:	b084      	sub	sp, #16
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
 800c63a:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	3350      	adds	r3, #80	; 0x50
 800c642:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	18d3      	adds	r3, r2, r3
 800c64c:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
}
 800c652:	0018      	movs	r0, r3
 800c654:	46bd      	mov	sp, r7
 800c656:	b004      	add	sp, #16
 800c658:	bd80      	pop	{r7, pc}

0800c65a <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800c65a:	b580      	push	{r7, lr}
 800c65c:	b082      	sub	sp, #8
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2220      	movs	r2, #32
 800c666:	5c9b      	ldrb	r3, [r3, r2]
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d101      	bne.n	800c670 <HAL_RTCEx_EnableBypassShadow+0x16>
 800c66c:	2302      	movs	r3, #2
 800c66e:	e024      	b.n	800c6ba <HAL_RTCEx_EnableBypassShadow+0x60>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2220      	movs	r2, #32
 800c674:	2101      	movs	r1, #1
 800c676:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2221      	movs	r2, #33	; 0x21
 800c67c:	2102      	movs	r1, #2
 800c67e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	22ca      	movs	r2, #202	; 0xca
 800c686:	625a      	str	r2, [r3, #36]	; 0x24
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2253      	movs	r2, #83	; 0x53
 800c68e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	689a      	ldr	r2, [r3, #8]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2120      	movs	r1, #32
 800c69c:	430a      	orrs	r2, r1
 800c69e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	22ff      	movs	r2, #255	; 0xff
 800c6a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2221      	movs	r2, #33	; 0x21
 800c6ac:	2101      	movs	r1, #1
 800c6ae:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2220      	movs	r2, #32
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	0018      	movs	r0, r3
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	b002      	add	sp, #8
 800c6c0:	bd80      	pop	{r7, pc}
	...

0800c6c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d101      	bne.n	800c6d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	e059      	b.n	800c78a <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2251      	movs	r2, #81	; 0x51
 800c6e0:	5c9b      	ldrb	r3, [r3, r2]
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d107      	bne.n	800c6f8 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2250      	movs	r2, #80	; 0x50
 800c6ec:	2100      	movs	r1, #0
 800c6ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	0018      	movs	r0, r3
 800c6f4:	f000 f850 	bl	800c798 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2251      	movs	r2, #81	; 0x51
 800c6fc:	2102      	movs	r1, #2
 800c6fe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2140      	movs	r1, #64	; 0x40
 800c70c:	438a      	bics	r2, r1
 800c70e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	685a      	ldr	r2, [r3, #4]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	431a      	orrs	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	431a      	orrs	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	691b      	ldr	r3, [r3, #16]
 800c724:	431a      	orrs	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	695b      	ldr	r3, [r3, #20]
 800c72a:	431a      	orrs	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6999      	ldr	r1, [r3, #24]
 800c730:	2380      	movs	r3, #128	; 0x80
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	400b      	ands	r3, r1
 800c736:	431a      	orrs	r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	69db      	ldr	r3, [r3, #28]
 800c73c:	431a      	orrs	r2, r3
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6a1b      	ldr	r3, [r3, #32]
 800c742:	431a      	orrs	r2, r3
 800c744:	0011      	movs	r1, r2
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	430a      	orrs	r2, r1
 800c750:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	699b      	ldr	r3, [r3, #24]
 800c756:	0c1b      	lsrs	r3, r3, #16
 800c758:	2204      	movs	r2, #4
 800c75a:	4013      	ands	r3, r2
 800c75c:	0019      	movs	r1, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	430a      	orrs	r2, r1
 800c768:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	69da      	ldr	r2, [r3, #28]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4907      	ldr	r1, [pc, #28]	; (800c794 <HAL_SPI_Init+0xd0>)
 800c776:	400a      	ands	r2, r1
 800c778:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2200      	movs	r2, #0
 800c77e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2251      	movs	r2, #81	; 0x51
 800c784:	2101      	movs	r1, #1
 800c786:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c788:	2300      	movs	r3, #0
}
 800c78a:	0018      	movs	r0, r3
 800c78c:	46bd      	mov	sp, r7
 800c78e:	b002      	add	sp, #8
 800c790:	bd80      	pop	{r7, pc}
 800c792:	46c0      	nop			; (mov r8, r8)
 800c794:	fffff7ff 	.word	0xfffff7ff

0800c798 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800c7a0:	46c0      	nop			; (mov r8, r8)
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	b002      	add	sp, #8
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b08c      	sub	sp, #48	; 0x30
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]
 800c7b4:	001a      	movs	r2, r3
 800c7b6:	1cbb      	adds	r3, r7, #2
 800c7b8:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c7be:	232b      	movs	r3, #43	; 0x2b
 800c7c0:	18fb      	adds	r3, r7, r3
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2250      	movs	r2, #80	; 0x50
 800c7ca:	5c9b      	ldrb	r3, [r3, r2]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d101      	bne.n	800c7d4 <HAL_SPI_TransmitReceive+0x2c>
 800c7d0:	2302      	movs	r3, #2
 800c7d2:	e1a1      	b.n	800cb18 <HAL_SPI_TransmitReceive+0x370>
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2250      	movs	r2, #80	; 0x50
 800c7d8:	2101      	movs	r1, #1
 800c7da:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c7dc:	f7fc fa80 	bl	8008ce0 <HAL_GetTick>
 800c7e0:	0003      	movs	r3, r0
 800c7e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c7e4:	2023      	movs	r0, #35	; 0x23
 800c7e6:	183b      	adds	r3, r7, r0
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	2151      	movs	r1, #81	; 0x51
 800c7ec:	5c52      	ldrb	r2, [r2, r1]
 800c7ee:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c7f6:	231a      	movs	r3, #26
 800c7f8:	18fb      	adds	r3, r7, r3
 800c7fa:	1cba      	adds	r2, r7, #2
 800c7fc:	8812      	ldrh	r2, [r2, #0]
 800c7fe:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c800:	183b      	adds	r3, r7, r0
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	2b01      	cmp	r3, #1
 800c806:	d012      	beq.n	800c82e <HAL_SPI_TransmitReceive+0x86>
 800c808:	69fa      	ldr	r2, [r7, #28]
 800c80a:	2382      	movs	r3, #130	; 0x82
 800c80c:	005b      	lsls	r3, r3, #1
 800c80e:	429a      	cmp	r2, r3
 800c810:	d108      	bne.n	800c824 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d104      	bne.n	800c824 <HAL_SPI_TransmitReceive+0x7c>
 800c81a:	2323      	movs	r3, #35	; 0x23
 800c81c:	18fb      	adds	r3, r7, r3
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	2b04      	cmp	r3, #4
 800c822:	d004      	beq.n	800c82e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800c824:	232b      	movs	r3, #43	; 0x2b
 800c826:	18fb      	adds	r3, r7, r3
 800c828:	2202      	movs	r2, #2
 800c82a:	701a      	strb	r2, [r3, #0]
    goto error;
 800c82c:	e169      	b.n	800cb02 <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d006      	beq.n	800c842 <HAL_SPI_TransmitReceive+0x9a>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d003      	beq.n	800c842 <HAL_SPI_TransmitReceive+0x9a>
 800c83a:	1cbb      	adds	r3, r7, #2
 800c83c:	881b      	ldrh	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d104      	bne.n	800c84c <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800c842:	232b      	movs	r3, #43	; 0x2b
 800c844:	18fb      	adds	r3, r7, r3
 800c846:	2201      	movs	r2, #1
 800c848:	701a      	strb	r2, [r3, #0]
    goto error;
 800c84a:	e15a      	b.n	800cb02 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2251      	movs	r2, #81	; 0x51
 800c850:	5c9b      	ldrb	r3, [r3, r2]
 800c852:	b2db      	uxtb	r3, r3
 800c854:	2b04      	cmp	r3, #4
 800c856:	d003      	beq.n	800c860 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2251      	movs	r2, #81	; 0x51
 800c85c:	2105      	movs	r1, #5
 800c85e:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2200      	movs	r2, #0
 800c864:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	1cba      	adds	r2, r7, #2
 800c870:	8812      	ldrh	r2, [r2, #0]
 800c872:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	1cba      	adds	r2, r7, #2
 800c878:	8812      	ldrh	r2, [r2, #0]
 800c87a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	68ba      	ldr	r2, [r7, #8]
 800c880:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	1cba      	adds	r2, r7, #2
 800c886:	8812      	ldrh	r2, [r2, #0]
 800c888:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	1cba      	adds	r2, r7, #2
 800c88e:	8812      	ldrh	r2, [r2, #0]
 800c890:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2200      	movs	r2, #0
 800c896:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2200      	movs	r2, #0
 800c89c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	2240      	movs	r2, #64	; 0x40
 800c8a6:	4013      	ands	r3, r2
 800c8a8:	2b40      	cmp	r3, #64	; 0x40
 800c8aa:	d007      	beq.n	800c8bc <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2140      	movs	r1, #64	; 0x40
 800c8b8:	430a      	orrs	r2, r1
 800c8ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	68da      	ldr	r2, [r3, #12]
 800c8c0:	2380      	movs	r3, #128	; 0x80
 800c8c2:	011b      	lsls	r3, r3, #4
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d000      	beq.n	800c8ca <HAL_SPI_TransmitReceive+0x122>
 800c8c8:	e07a      	b.n	800c9c0 <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d004      	beq.n	800c8dc <HAL_SPI_TransmitReceive+0x134>
 800c8d2:	231a      	movs	r3, #26
 800c8d4:	18fb      	adds	r3, r7, r3
 800c8d6:	881b      	ldrh	r3, [r3, #0]
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d166      	bne.n	800c9aa <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8e0:	881a      	ldrh	r2, [r3, #0]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ec:	1c9a      	adds	r2, r3, #2
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	b29a      	uxth	r2, r3
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c900:	e053      	b.n	800c9aa <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	2202      	movs	r2, #2
 800c90a:	4013      	ands	r3, r2
 800c90c:	2b02      	cmp	r3, #2
 800c90e:	d11b      	bne.n	800c948 <HAL_SPI_TransmitReceive+0x1a0>
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c914:	b29b      	uxth	r3, r3
 800c916:	2b00      	cmp	r3, #0
 800c918:	d016      	beq.n	800c948 <HAL_SPI_TransmitReceive+0x1a0>
 800c91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d113      	bne.n	800c948 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c924:	881a      	ldrh	r2, [r3, #0]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c930:	1c9a      	adds	r2, r3, #2
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	3b01      	subs	r3, #1
 800c93e:	b29a      	uxth	r2, r3
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c944:	2300      	movs	r3, #0
 800c946:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	2201      	movs	r2, #1
 800c950:	4013      	ands	r3, r2
 800c952:	2b01      	cmp	r3, #1
 800c954:	d119      	bne.n	800c98a <HAL_SPI_TransmitReceive+0x1e2>
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d014      	beq.n	800c98a <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	68da      	ldr	r2, [r3, #12]
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c96a:	b292      	uxth	r2, r2
 800c96c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c972:	1c9a      	adds	r2, r3, #2
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	3b01      	subs	r3, #1
 800c980:	b29a      	uxth	r2, r3
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c986:	2301      	movs	r3, #1
 800c988:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c98a:	f7fc f9a9 	bl	8008ce0 <HAL_GetTick>
 800c98e:	0002      	movs	r2, r0
 800c990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c992:	1ad3      	subs	r3, r2, r3
 800c994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c996:	429a      	cmp	r2, r3
 800c998:	d807      	bhi.n	800c9aa <HAL_SPI_TransmitReceive+0x202>
 800c99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99c:	3301      	adds	r3, #1
 800c99e:	d004      	beq.n	800c9aa <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 800c9a0:	232b      	movs	r3, #43	; 0x2b
 800c9a2:	18fb      	adds	r3, r7, r3
 800c9a4:	2203      	movs	r2, #3
 800c9a6:	701a      	strb	r2, [r3, #0]
        goto error;
 800c9a8:	e0ab      	b.n	800cb02 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1a6      	bne.n	800c902 <HAL_SPI_TransmitReceive+0x15a>
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d1a1      	bne.n	800c902 <HAL_SPI_TransmitReceive+0x15a>
 800c9be:	e07f      	b.n	800cac0 <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d005      	beq.n	800c9d4 <HAL_SPI_TransmitReceive+0x22c>
 800c9c8:	231a      	movs	r3, #26
 800c9ca:	18fb      	adds	r3, r7, r3
 800c9cc:	881b      	ldrh	r3, [r3, #0]
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d000      	beq.n	800c9d4 <HAL_SPI_TransmitReceive+0x22c>
 800c9d2:	e06b      	b.n	800caac <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	330c      	adds	r3, #12
 800c9de:	7812      	ldrb	r2, [r2, #0]
 800c9e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9e6:	1c5a      	adds	r2, r3, #1
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	3b01      	subs	r3, #1
 800c9f4:	b29a      	uxth	r2, r3
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c9fa:	e057      	b.n	800caac <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	2202      	movs	r2, #2
 800ca04:	4013      	ands	r3, r2
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	d11c      	bne.n	800ca44 <HAL_SPI_TransmitReceive+0x29c>
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d017      	beq.n	800ca44 <HAL_SPI_TransmitReceive+0x29c>
 800ca14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d114      	bne.n	800ca44 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	330c      	adds	r3, #12
 800ca24:	7812      	ldrb	r2, [r2, #0]
 800ca26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca2c:	1c5a      	adds	r2, r3, #1
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ca40:	2300      	movs	r3, #0
 800ca42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	4013      	ands	r3, r2
 800ca4e:	2b01      	cmp	r3, #1
 800ca50:	d119      	bne.n	800ca86 <HAL_SPI_TransmitReceive+0x2de>
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d014      	beq.n	800ca86 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	68da      	ldr	r2, [r3, #12]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca66:	b2d2      	uxtb	r2, r2
 800ca68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca6e:	1c5a      	adds	r2, r3, #1
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ca82:	2301      	movs	r3, #1
 800ca84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ca86:	f7fc f92b 	bl	8008ce0 <HAL_GetTick>
 800ca8a:	0002      	movs	r2, r0
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	1ad3      	subs	r3, r2, r3
 800ca90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d802      	bhi.n	800ca9c <HAL_SPI_TransmitReceive+0x2f4>
 800ca96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca98:	3301      	adds	r3, #1
 800ca9a:	d102      	bne.n	800caa2 <HAL_SPI_TransmitReceive+0x2fa>
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d104      	bne.n	800caac <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 800caa2:	232b      	movs	r3, #43	; 0x2b
 800caa4:	18fb      	adds	r3, r7, r3
 800caa6:	2203      	movs	r2, #3
 800caa8:	701a      	strb	r2, [r3, #0]
        goto error;
 800caaa:	e02a      	b.n	800cb02 <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1a2      	bne.n	800c9fc <HAL_SPI_TransmitReceive+0x254>
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800caba:	b29b      	uxth	r3, r3
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d19d      	bne.n	800c9fc <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cac2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	0018      	movs	r0, r3
 800cac8:	f000 f89a 	bl	800cc00 <SPI_EndRxTxTransaction>
 800cacc:	1e03      	subs	r3, r0, #0
 800cace:	d007      	beq.n	800cae0 <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 800cad0:	232b      	movs	r3, #43	; 0x2b
 800cad2:	18fb      	adds	r3, r7, r3
 800cad4:	2201      	movs	r2, #1
 800cad6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2220      	movs	r2, #32
 800cadc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800cade:	e010      	b.n	800cb02 <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d10b      	bne.n	800cb00 <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cae8:	2300      	movs	r3, #0
 800caea:	617b      	str	r3, [r7, #20]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	617b      	str	r3, [r7, #20]
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	617b      	str	r3, [r7, #20]
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	e000      	b.n	800cb02 <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 800cb00:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2251      	movs	r2, #81	; 0x51
 800cb06:	2101      	movs	r1, #1
 800cb08:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2250      	movs	r2, #80	; 0x50
 800cb0e:	2100      	movs	r1, #0
 800cb10:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800cb12:	232b      	movs	r3, #43	; 0x2b
 800cb14:	18fb      	adds	r3, r7, r3
 800cb16:	781b      	ldrb	r3, [r3, #0]
}
 800cb18:	0018      	movs	r0, r3
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	b00c      	add	sp, #48	; 0x30
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	603b      	str	r3, [r7, #0]
 800cb2c:	1dfb      	adds	r3, r7, #7
 800cb2e:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cb30:	e050      	b.n	800cbd4 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	3301      	adds	r3, #1
 800cb36:	d04d      	beq.n	800cbd4 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800cb38:	f7fc f8d2 	bl	8008ce0 <HAL_GetTick>
 800cb3c:	0002      	movs	r2, r0
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	1ad3      	subs	r3, r2, r3
 800cb42:	683a      	ldr	r2, [r7, #0]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d902      	bls.n	800cb4e <SPI_WaitFlagStateUntilTimeout+0x2e>
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d142      	bne.n	800cbd4 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	685a      	ldr	r2, [r3, #4]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	21e0      	movs	r1, #224	; 0xe0
 800cb5a:	438a      	bics	r2, r1
 800cb5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	685a      	ldr	r2, [r3, #4]
 800cb62:	2382      	movs	r3, #130	; 0x82
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d113      	bne.n	800cb92 <SPI_WaitFlagStateUntilTimeout+0x72>
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	689a      	ldr	r2, [r3, #8]
 800cb6e:	2380      	movs	r3, #128	; 0x80
 800cb70:	021b      	lsls	r3, r3, #8
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d005      	beq.n	800cb82 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	689a      	ldr	r2, [r3, #8]
 800cb7a:	2380      	movs	r3, #128	; 0x80
 800cb7c:	00db      	lsls	r3, r3, #3
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d107      	bne.n	800cb92 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2140      	movs	r1, #64	; 0x40
 800cb8e:	438a      	bics	r2, r1
 800cb90:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb96:	2380      	movs	r3, #128	; 0x80
 800cb98:	019b      	lsls	r3, r3, #6
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d110      	bne.n	800cbc0 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4914      	ldr	r1, [pc, #80]	; (800cbfc <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800cbaa:	400a      	ands	r2, r1
 800cbac:	601a      	str	r2, [r3, #0]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	2180      	movs	r1, #128	; 0x80
 800cbba:	0189      	lsls	r1, r1, #6
 800cbbc:	430a      	orrs	r2, r1
 800cbbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2251      	movs	r2, #81	; 0x51
 800cbc4:	2101      	movs	r1, #1
 800cbc6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2250      	movs	r2, #80	; 0x50
 800cbcc:	2100      	movs	r1, #0
 800cbce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800cbd0:	2303      	movs	r3, #3
 800cbd2:	e00f      	b.n	800cbf4 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	689b      	ldr	r3, [r3, #8]
 800cbda:	68ba      	ldr	r2, [r7, #8]
 800cbdc:	4013      	ands	r3, r2
 800cbde:	68ba      	ldr	r2, [r7, #8]
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	425a      	negs	r2, r3
 800cbe4:	4153      	adcs	r3, r2
 800cbe6:	b2db      	uxtb	r3, r3
 800cbe8:	001a      	movs	r2, r3
 800cbea:	1dfb      	adds	r3, r7, #7
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d19f      	bne.n	800cb32 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	0018      	movs	r0, r3
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	b004      	add	sp, #16
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	ffffdfff 	.word	0xffffdfff

0800cc00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af02      	add	r7, sp, #8
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	685a      	ldr	r2, [r3, #4]
 800cc10:	2382      	movs	r3, #130	; 0x82
 800cc12:	005b      	lsls	r3, r3, #1
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d112      	bne.n	800cc3e <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cc18:	68ba      	ldr	r2, [r7, #8]
 800cc1a:	68f8      	ldr	r0, [r7, #12]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	9300      	str	r3, [sp, #0]
 800cc20:	0013      	movs	r3, r2
 800cc22:	2200      	movs	r2, #0
 800cc24:	2180      	movs	r1, #128	; 0x80
 800cc26:	f7ff ff7b 	bl	800cb20 <SPI_WaitFlagStateUntilTimeout>
 800cc2a:	1e03      	subs	r3, r0, #0
 800cc2c:	d020      	beq.n	800cc70 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc32:	2220      	movs	r2, #32
 800cc34:	431a      	orrs	r2, r3
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cc3a:	2303      	movs	r3, #3
 800cc3c:	e019      	b.n	800cc72 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2251      	movs	r2, #81	; 0x51
 800cc42:	5c9b      	ldrb	r3, [r3, r2]
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	2b05      	cmp	r3, #5
 800cc48:	d112      	bne.n	800cc70 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800cc4a:	68ba      	ldr	r2, [r7, #8]
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	9300      	str	r3, [sp, #0]
 800cc52:	0013      	movs	r3, r2
 800cc54:	2200      	movs	r2, #0
 800cc56:	2101      	movs	r1, #1
 800cc58:	f7ff ff62 	bl	800cb20 <SPI_WaitFlagStateUntilTimeout>
 800cc5c:	1e03      	subs	r3, r0, #0
 800cc5e:	d007      	beq.n	800cc70 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc64:	2220      	movs	r2, #32
 800cc66:	431a      	orrs	r2, r3
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800cc6c:	2303      	movs	r3, #3
 800cc6e:	e000      	b.n	800cc72 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 800cc70:	2300      	movs	r3, #0
}
 800cc72:	0018      	movs	r0, r3
 800cc74:	46bd      	mov	sp, r7
 800cc76:	b004      	add	sp, #16
 800cc78:	bd80      	pop	{r7, pc}
	...

0800cc7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d101      	bne.n	800cc8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e044      	b.n	800cd18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d107      	bne.n	800cca6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2270      	movs	r2, #112	; 0x70
 800cc9a:	2100      	movs	r1, #0
 800cc9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	0018      	movs	r0, r3
 800cca2:	f7f8 fff3 	bl	8005c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2224      	movs	r2, #36	; 0x24
 800ccaa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2101      	movs	r1, #1
 800ccb8:	438a      	bics	r2, r1
 800ccba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	0018      	movs	r0, r3
 800ccc0:	f000 f9f6 	bl	800d0b0 <UART_SetConfig>
 800ccc4:	0003      	movs	r3, r0
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d101      	bne.n	800ccce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ccca:	2301      	movs	r3, #1
 800cccc:	e024      	b.n	800cd18 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d003      	beq.n	800ccde <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	0018      	movs	r0, r3
 800ccda:	f000 fd1d 	bl	800d718 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	685a      	ldr	r2, [r3, #4]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	490d      	ldr	r1, [pc, #52]	; (800cd20 <HAL_UART_Init+0xa4>)
 800ccea:	400a      	ands	r2, r1
 800ccec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	689a      	ldr	r2, [r3, #8]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	212a      	movs	r1, #42	; 0x2a
 800ccfa:	438a      	bics	r2, r1
 800ccfc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	2101      	movs	r1, #1
 800cd0a:	430a      	orrs	r2, r1
 800cd0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	0018      	movs	r0, r3
 800cd12:	f000 fdb5 	bl	800d880 <UART_CheckIdleState>
 800cd16:	0003      	movs	r3, r0
}
 800cd18:	0018      	movs	r0, r3
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	b002      	add	sp, #8
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	ffffb7ff 	.word	0xffffb7ff

0800cd24 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	1dbb      	adds	r3, r7, #6
 800cd30:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd36:	2b20      	cmp	r3, #32
 800cd38:	d000      	beq.n	800cd3c <HAL_UART_Transmit_DMA+0x18>
 800cd3a:	e077      	b.n	800ce2c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d003      	beq.n	800cd4a <HAL_UART_Transmit_DMA+0x26>
 800cd42:	1dbb      	adds	r3, r7, #6
 800cd44:	881b      	ldrh	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d101      	bne.n	800cd4e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e06f      	b.n	800ce2e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	689a      	ldr	r2, [r3, #8]
 800cd52:	2380      	movs	r3, #128	; 0x80
 800cd54:	015b      	lsls	r3, r3, #5
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d109      	bne.n	800cd6e <HAL_UART_Transmit_DMA+0x4a>
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	691b      	ldr	r3, [r3, #16]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d105      	bne.n	800cd6e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	2201      	movs	r2, #1
 800cd66:	4013      	ands	r3, r2
 800cd68:	d001      	beq.n	800cd6e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	e05f      	b.n	800ce2e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2270      	movs	r2, #112	; 0x70
 800cd72:	5c9b      	ldrb	r3, [r3, r2]
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d101      	bne.n	800cd7c <HAL_UART_Transmit_DMA+0x58>
 800cd78:	2302      	movs	r3, #2
 800cd7a:	e058      	b.n	800ce2e <HAL_UART_Transmit_DMA+0x10a>
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2270      	movs	r2, #112	; 0x70
 800cd80:	2101      	movs	r1, #1
 800cd82:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	68ba      	ldr	r2, [r7, #8]
 800cd88:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	1dba      	adds	r2, r7, #6
 800cd8e:	2150      	movs	r1, #80	; 0x50
 800cd90:	8812      	ldrh	r2, [r2, #0]
 800cd92:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	1dba      	adds	r2, r7, #6
 800cd98:	2152      	movs	r1, #82	; 0x52
 800cd9a:	8812      	ldrh	r2, [r2, #0]
 800cd9c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2200      	movs	r2, #0
 800cda2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2221      	movs	r2, #33	; 0x21
 800cda8:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d02a      	beq.n	800ce08 <HAL_UART_Transmit_DMA+0xe4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cdb6:	4a20      	ldr	r2, [pc, #128]	; (800ce38 <HAL_UART_Transmit_DMA+0x114>)
 800cdb8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cdbe:	4a1f      	ldr	r2, [pc, #124]	; (800ce3c <HAL_UART_Transmit_DMA+0x118>)
 800cdc0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cdc6:	4a1e      	ldr	r2, [pc, #120]	; (800ce40 <HAL_UART_Transmit_DMA+0x11c>)
 800cdc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cdce:	2200      	movs	r2, #0
 800cdd0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdda:	0019      	movs	r1, r3
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	3328      	adds	r3, #40	; 0x28
 800cde2:	001a      	movs	r2, r3
 800cde4:	1dbb      	adds	r3, r7, #6
 800cde6:	881b      	ldrh	r3, [r3, #0]
 800cde8:	f7fc fe26 	bl	8009a38 <HAL_DMA_Start_IT>
 800cdec:	1e03      	subs	r3, r0, #0
 800cdee:	d00b      	beq.n	800ce08 <HAL_UART_Transmit_DMA+0xe4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2210      	movs	r2, #16
 800cdf4:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2270      	movs	r2, #112	; 0x70
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2220      	movs	r2, #32
 800ce02:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800ce04:	2301      	movs	r3, #1
 800ce06:	e012      	b.n	800ce2e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	2240      	movs	r2, #64	; 0x40
 800ce0e:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2270      	movs	r2, #112	; 0x70
 800ce14:	2100      	movs	r1, #0
 800ce16:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	689a      	ldr	r2, [r3, #8]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2180      	movs	r1, #128	; 0x80
 800ce24:	430a      	orrs	r2, r1
 800ce26:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	e000      	b.n	800ce2e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800ce2c:	2302      	movs	r3, #2
  }
}
 800ce2e:	0018      	movs	r0, r3
 800ce30:	46bd      	mov	sp, r7
 800ce32:	b004      	add	sp, #16
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	46c0      	nop			; (mov r8, r8)
 800ce38:	0800da09 	.word	0x0800da09
 800ce3c:	0800da5d 	.word	0x0800da5d
 800ce40:	0800da7b 	.word	0x0800da7b

0800ce44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b088      	sub	sp, #32
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	69db      	ldr	r3, [r3, #28]
 800ce52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	220f      	movs	r2, #15
 800ce68:	4013      	ands	r3, r2
 800ce6a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d112      	bne.n	800ce98 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ce72:	69fb      	ldr	r3, [r7, #28]
 800ce74:	2220      	movs	r2, #32
 800ce76:	4013      	ands	r3, r2
 800ce78:	d00e      	beq.n	800ce98 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	2220      	movs	r2, #32
 800ce7e:	4013      	ands	r3, r2
 800ce80:	d00a      	beq.n	800ce98 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d100      	bne.n	800ce8c <HAL_UART_IRQHandler+0x48>
 800ce8a:	e0f6      	b.n	800d07a <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	0010      	movs	r0, r2
 800ce94:	4798      	blx	r3
      }
      return;
 800ce96:	e0f0      	b.n	800d07a <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d100      	bne.n	800cea0 <HAL_UART_IRQHandler+0x5c>
 800ce9e:	e0b8      	b.n	800d012 <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	2201      	movs	r2, #1
 800cea4:	4013      	ands	r3, r2
 800cea6:	d105      	bne.n	800ceb4 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800cea8:	69ba      	ldr	r2, [r7, #24]
 800ceaa:	2390      	movs	r3, #144	; 0x90
 800ceac:	005b      	lsls	r3, r3, #1
 800ceae:	4013      	ands	r3, r2
 800ceb0:	d100      	bne.n	800ceb4 <HAL_UART_IRQHandler+0x70>
 800ceb2:	e0ae      	b.n	800d012 <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	4013      	ands	r3, r2
 800ceba:	d00e      	beq.n	800ceda <HAL_UART_IRQHandler+0x96>
 800cebc:	69ba      	ldr	r2, [r7, #24]
 800cebe:	2380      	movs	r3, #128	; 0x80
 800cec0:	005b      	lsls	r3, r3, #1
 800cec2:	4013      	ands	r3, r2
 800cec4:	d009      	beq.n	800ceda <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	2201      	movs	r2, #1
 800cecc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ced2:	2201      	movs	r2, #1
 800ced4:	431a      	orrs	r2, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	2202      	movs	r2, #2
 800cede:	4013      	ands	r3, r2
 800cee0:	d00d      	beq.n	800cefe <HAL_UART_IRQHandler+0xba>
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	2201      	movs	r2, #1
 800cee6:	4013      	ands	r3, r2
 800cee8:	d009      	beq.n	800cefe <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2202      	movs	r2, #2
 800cef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cef6:	2204      	movs	r2, #4
 800cef8:	431a      	orrs	r2, r3
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cefe:	69fb      	ldr	r3, [r7, #28]
 800cf00:	2204      	movs	r2, #4
 800cf02:	4013      	ands	r3, r2
 800cf04:	d00d      	beq.n	800cf22 <HAL_UART_IRQHandler+0xde>
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	2201      	movs	r2, #1
 800cf0a:	4013      	ands	r3, r2
 800cf0c:	d009      	beq.n	800cf22 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	2204      	movs	r2, #4
 800cf14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf1a:	2202      	movs	r2, #2
 800cf1c:	431a      	orrs	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	2208      	movs	r2, #8
 800cf26:	4013      	ands	r3, r2
 800cf28:	d011      	beq.n	800cf4e <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cf2a:	69bb      	ldr	r3, [r7, #24]
 800cf2c:	2220      	movs	r2, #32
 800cf2e:	4013      	ands	r3, r2
 800cf30:	d103      	bne.n	800cf3a <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	2201      	movs	r2, #1
 800cf36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cf38:	d009      	beq.n	800cf4e <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2208      	movs	r2, #8
 800cf40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf46:	2208      	movs	r2, #8
 800cf48:	431a      	orrs	r2, r3
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d100      	bne.n	800cf58 <HAL_UART_IRQHandler+0x114>
 800cf56:	e092      	b.n	800d07e <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	2220      	movs	r2, #32
 800cf5c:	4013      	ands	r3, r2
 800cf5e:	d00c      	beq.n	800cf7a <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	2220      	movs	r2, #32
 800cf64:	4013      	ands	r3, r2
 800cf66:	d008      	beq.n	800cf7a <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d004      	beq.n	800cf7a <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	0010      	movs	r0, r2
 800cf78:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf7e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	689b      	ldr	r3, [r3, #8]
 800cf86:	2240      	movs	r2, #64	; 0x40
 800cf88:	4013      	ands	r3, r2
 800cf8a:	2b40      	cmp	r3, #64	; 0x40
 800cf8c:	d003      	beq.n	800cf96 <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2208      	movs	r2, #8
 800cf92:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf94:	d033      	beq.n	800cffe <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	0018      	movs	r0, r3
 800cf9a:	f000 fd15 	bl	800d9c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	2240      	movs	r2, #64	; 0x40
 800cfa6:	4013      	ands	r3, r2
 800cfa8:	2b40      	cmp	r3, #64	; 0x40
 800cfaa:	d123      	bne.n	800cff4 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	689a      	ldr	r2, [r3, #8]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2140      	movs	r1, #64	; 0x40
 800cfb8:	438a      	bics	r2, r1
 800cfba:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d012      	beq.n	800cfea <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfc8:	4a30      	ldr	r2, [pc, #192]	; (800d08c <HAL_UART_IRQHandler+0x248>)
 800cfca:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfd0:	0018      	movs	r0, r3
 800cfd2:	f7fc fd97 	bl	8009b04 <HAL_DMA_Abort_IT>
 800cfd6:	1e03      	subs	r3, r0, #0
 800cfd8:	d019      	beq.n	800d00e <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfe4:	0018      	movs	r0, r3
 800cfe6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfe8:	e011      	b.n	800d00e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	0018      	movs	r0, r3
 800cfee:	f000 f857 	bl	800d0a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cff2:	e00c      	b.n	800d00e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	0018      	movs	r0, r3
 800cff8:	f000 f852 	bl	800d0a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cffc:	e007      	b.n	800d00e <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	0018      	movs	r0, r3
 800d002:	f000 f84d 	bl	800d0a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2200      	movs	r2, #0
 800d00a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800d00c:	e037      	b.n	800d07e <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d00e:	46c0      	nop			; (mov r8, r8)
    return;
 800d010:	e035      	b.n	800d07e <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d012:	69fa      	ldr	r2, [r7, #28]
 800d014:	2380      	movs	r3, #128	; 0x80
 800d016:	035b      	lsls	r3, r3, #13
 800d018:	4013      	ands	r3, r2
 800d01a:	d00e      	beq.n	800d03a <HAL_UART_IRQHandler+0x1f6>
 800d01c:	697a      	ldr	r2, [r7, #20]
 800d01e:	2380      	movs	r3, #128	; 0x80
 800d020:	03db      	lsls	r3, r3, #15
 800d022:	4013      	ands	r3, r2
 800d024:	d009      	beq.n	800d03a <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	2280      	movs	r2, #128	; 0x80
 800d02c:	0352      	lsls	r2, r2, #13
 800d02e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	0018      	movs	r0, r3
 800d034:	f000 fd91 	bl	800db5a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d038:	e024      	b.n	800d084 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d03a:	69fb      	ldr	r3, [r7, #28]
 800d03c:	2280      	movs	r2, #128	; 0x80
 800d03e:	4013      	ands	r3, r2
 800d040:	d00d      	beq.n	800d05e <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	2280      	movs	r2, #128	; 0x80
 800d046:	4013      	ands	r3, r2
 800d048:	d009      	beq.n	800d05e <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d017      	beq.n	800d082 <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	0010      	movs	r0, r2
 800d05a:	4798      	blx	r3
    }
    return;
 800d05c:	e011      	b.n	800d082 <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	2240      	movs	r2, #64	; 0x40
 800d062:	4013      	ands	r3, r2
 800d064:	d00e      	beq.n	800d084 <HAL_UART_IRQHandler+0x240>
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	2240      	movs	r2, #64	; 0x40
 800d06a:	4013      	ands	r3, r2
 800d06c:	d00a      	beq.n	800d084 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	0018      	movs	r0, r3
 800d072:	f000 fd58 	bl	800db26 <UART_EndTransmit_IT>
    return;
 800d076:	46c0      	nop			; (mov r8, r8)
 800d078:	e004      	b.n	800d084 <HAL_UART_IRQHandler+0x240>
      return;
 800d07a:	46c0      	nop			; (mov r8, r8)
 800d07c:	e002      	b.n	800d084 <HAL_UART_IRQHandler+0x240>
    return;
 800d07e:	46c0      	nop			; (mov r8, r8)
 800d080:	e000      	b.n	800d084 <HAL_UART_IRQHandler+0x240>
    return;
 800d082:	46c0      	nop			; (mov r8, r8)
  }

}
 800d084:	46bd      	mov	sp, r7
 800d086:	b008      	add	sp, #32
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	46c0      	nop			; (mov r8, r8)
 800d08c:	0800daf9 	.word	0x0800daf9

0800d090 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d098:	46c0      	nop			; (mov r8, r8)
 800d09a:	46bd      	mov	sp, r7
 800d09c:	b002      	add	sp, #8
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d0a8:	46c0      	nop			; (mov r8, r8)
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	b002      	add	sp, #8
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0b0:	b5b0      	push	{r4, r5, r7, lr}
 800d0b2:	b08e      	sub	sp, #56	; 0x38
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800d0b8:	231b      	movs	r3, #27
 800d0ba:	2218      	movs	r2, #24
 800d0bc:	4694      	mov	ip, r2
 800d0be:	44bc      	add	ip, r7
 800d0c0:	4463      	add	r3, ip
 800d0c2:	2210      	movs	r2, #16
 800d0c4:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0ca:	2313      	movs	r3, #19
 800d0cc:	2218      	movs	r2, #24
 800d0ce:	4694      	mov	ip, r2
 800d0d0:	44bc      	add	ip, r7
 800d0d2:	4463      	add	r3, ip
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0dc:	69fb      	ldr	r3, [r7, #28]
 800d0de:	689a      	ldr	r2, [r3, #8]
 800d0e0:	69fb      	ldr	r3, [r7, #28]
 800d0e2:	691b      	ldr	r3, [r3, #16]
 800d0e4:	431a      	orrs	r2, r3
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	695b      	ldr	r3, [r3, #20]
 800d0ea:	431a      	orrs	r2, r3
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	69db      	ldr	r3, [r3, #28]
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0f4:	69fb      	ldr	r3, [r7, #28]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	4aca      	ldr	r2, [pc, #808]	; (800d424 <UART_SetConfig+0x374>)
 800d0fc:	4013      	ands	r3, r2
 800d0fe:	0019      	movs	r1, r3
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d106:	430a      	orrs	r2, r1
 800d108:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	4ac5      	ldr	r2, [pc, #788]	; (800d428 <UART_SetConfig+0x378>)
 800d112:	4013      	ands	r3, r2
 800d114:	0019      	movs	r1, r3
 800d116:	69fb      	ldr	r3, [r7, #28]
 800d118:	68da      	ldr	r2, [r3, #12]
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	430a      	orrs	r2, r1
 800d120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	699b      	ldr	r3, [r3, #24]
 800d126:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4abf      	ldr	r2, [pc, #764]	; (800d42c <UART_SetConfig+0x37c>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d004      	beq.n	800d13c <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d132:	69fb      	ldr	r3, [r7, #28]
 800d134:	6a1b      	ldr	r3, [r3, #32]
 800d136:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d138:	4313      	orrs	r3, r2
 800d13a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	689b      	ldr	r3, [r3, #8]
 800d142:	4abb      	ldr	r2, [pc, #748]	; (800d430 <UART_SetConfig+0x380>)
 800d144:	4013      	ands	r3, r2
 800d146:	0019      	movs	r1, r3
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d14e:	430a      	orrs	r2, r1
 800d150:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d152:	69fb      	ldr	r3, [r7, #28]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4ab7      	ldr	r2, [pc, #732]	; (800d434 <UART_SetConfig+0x384>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d134      	bne.n	800d1c6 <UART_SetConfig+0x116>
 800d15c:	4bb6      	ldr	r3, [pc, #728]	; (800d438 <UART_SetConfig+0x388>)
 800d15e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d160:	2203      	movs	r2, #3
 800d162:	4013      	ands	r3, r2
 800d164:	2b01      	cmp	r3, #1
 800d166:	d015      	beq.n	800d194 <UART_SetConfig+0xe4>
 800d168:	d304      	bcc.n	800d174 <UART_SetConfig+0xc4>
 800d16a:	2b02      	cmp	r3, #2
 800d16c:	d00a      	beq.n	800d184 <UART_SetConfig+0xd4>
 800d16e:	2b03      	cmp	r3, #3
 800d170:	d018      	beq.n	800d1a4 <UART_SetConfig+0xf4>
 800d172:	e01f      	b.n	800d1b4 <UART_SetConfig+0x104>
 800d174:	231b      	movs	r3, #27
 800d176:	2218      	movs	r2, #24
 800d178:	4694      	mov	ip, r2
 800d17a:	44bc      	add	ip, r7
 800d17c:	4463      	add	r3, ip
 800d17e:	2201      	movs	r2, #1
 800d180:	701a      	strb	r2, [r3, #0]
 800d182:	e0c5      	b.n	800d310 <UART_SetConfig+0x260>
 800d184:	231b      	movs	r3, #27
 800d186:	2218      	movs	r2, #24
 800d188:	4694      	mov	ip, r2
 800d18a:	44bc      	add	ip, r7
 800d18c:	4463      	add	r3, ip
 800d18e:	2202      	movs	r2, #2
 800d190:	701a      	strb	r2, [r3, #0]
 800d192:	e0bd      	b.n	800d310 <UART_SetConfig+0x260>
 800d194:	231b      	movs	r3, #27
 800d196:	2218      	movs	r2, #24
 800d198:	4694      	mov	ip, r2
 800d19a:	44bc      	add	ip, r7
 800d19c:	4463      	add	r3, ip
 800d19e:	2204      	movs	r2, #4
 800d1a0:	701a      	strb	r2, [r3, #0]
 800d1a2:	e0b5      	b.n	800d310 <UART_SetConfig+0x260>
 800d1a4:	231b      	movs	r3, #27
 800d1a6:	2218      	movs	r2, #24
 800d1a8:	4694      	mov	ip, r2
 800d1aa:	44bc      	add	ip, r7
 800d1ac:	4463      	add	r3, ip
 800d1ae:	2208      	movs	r2, #8
 800d1b0:	701a      	strb	r2, [r3, #0]
 800d1b2:	e0ad      	b.n	800d310 <UART_SetConfig+0x260>
 800d1b4:	231b      	movs	r3, #27
 800d1b6:	2218      	movs	r2, #24
 800d1b8:	4694      	mov	ip, r2
 800d1ba:	44bc      	add	ip, r7
 800d1bc:	4463      	add	r3, ip
 800d1be:	2210      	movs	r2, #16
 800d1c0:	701a      	strb	r2, [r3, #0]
 800d1c2:	46c0      	nop			; (mov r8, r8)
 800d1c4:	e0a4      	b.n	800d310 <UART_SetConfig+0x260>
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	4a9c      	ldr	r2, [pc, #624]	; (800d43c <UART_SetConfig+0x38c>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d137      	bne.n	800d240 <UART_SetConfig+0x190>
 800d1d0:	4b99      	ldr	r3, [pc, #612]	; (800d438 <UART_SetConfig+0x388>)
 800d1d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1d4:	220c      	movs	r2, #12
 800d1d6:	4013      	ands	r3, r2
 800d1d8:	2b04      	cmp	r3, #4
 800d1da:	d018      	beq.n	800d20e <UART_SetConfig+0x15e>
 800d1dc:	d802      	bhi.n	800d1e4 <UART_SetConfig+0x134>
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d005      	beq.n	800d1ee <UART_SetConfig+0x13e>
 800d1e2:	e024      	b.n	800d22e <UART_SetConfig+0x17e>
 800d1e4:	2b08      	cmp	r3, #8
 800d1e6:	d00a      	beq.n	800d1fe <UART_SetConfig+0x14e>
 800d1e8:	2b0c      	cmp	r3, #12
 800d1ea:	d018      	beq.n	800d21e <UART_SetConfig+0x16e>
 800d1ec:	e01f      	b.n	800d22e <UART_SetConfig+0x17e>
 800d1ee:	231b      	movs	r3, #27
 800d1f0:	2218      	movs	r2, #24
 800d1f2:	4694      	mov	ip, r2
 800d1f4:	44bc      	add	ip, r7
 800d1f6:	4463      	add	r3, ip
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	701a      	strb	r2, [r3, #0]
 800d1fc:	e088      	b.n	800d310 <UART_SetConfig+0x260>
 800d1fe:	231b      	movs	r3, #27
 800d200:	2218      	movs	r2, #24
 800d202:	4694      	mov	ip, r2
 800d204:	44bc      	add	ip, r7
 800d206:	4463      	add	r3, ip
 800d208:	2202      	movs	r2, #2
 800d20a:	701a      	strb	r2, [r3, #0]
 800d20c:	e080      	b.n	800d310 <UART_SetConfig+0x260>
 800d20e:	231b      	movs	r3, #27
 800d210:	2218      	movs	r2, #24
 800d212:	4694      	mov	ip, r2
 800d214:	44bc      	add	ip, r7
 800d216:	4463      	add	r3, ip
 800d218:	2204      	movs	r2, #4
 800d21a:	701a      	strb	r2, [r3, #0]
 800d21c:	e078      	b.n	800d310 <UART_SetConfig+0x260>
 800d21e:	231b      	movs	r3, #27
 800d220:	2218      	movs	r2, #24
 800d222:	4694      	mov	ip, r2
 800d224:	44bc      	add	ip, r7
 800d226:	4463      	add	r3, ip
 800d228:	2208      	movs	r2, #8
 800d22a:	701a      	strb	r2, [r3, #0]
 800d22c:	e070      	b.n	800d310 <UART_SetConfig+0x260>
 800d22e:	231b      	movs	r3, #27
 800d230:	2218      	movs	r2, #24
 800d232:	4694      	mov	ip, r2
 800d234:	44bc      	add	ip, r7
 800d236:	4463      	add	r3, ip
 800d238:	2210      	movs	r2, #16
 800d23a:	701a      	strb	r2, [r3, #0]
 800d23c:	46c0      	nop			; (mov r8, r8)
 800d23e:	e067      	b.n	800d310 <UART_SetConfig+0x260>
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a7e      	ldr	r2, [pc, #504]	; (800d440 <UART_SetConfig+0x390>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d107      	bne.n	800d25a <UART_SetConfig+0x1aa>
 800d24a:	231b      	movs	r3, #27
 800d24c:	2218      	movs	r2, #24
 800d24e:	4694      	mov	ip, r2
 800d250:	44bc      	add	ip, r7
 800d252:	4463      	add	r3, ip
 800d254:	2200      	movs	r2, #0
 800d256:	701a      	strb	r2, [r3, #0]
 800d258:	e05a      	b.n	800d310 <UART_SetConfig+0x260>
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4a79      	ldr	r2, [pc, #484]	; (800d444 <UART_SetConfig+0x394>)
 800d260:	4293      	cmp	r3, r2
 800d262:	d107      	bne.n	800d274 <UART_SetConfig+0x1c4>
 800d264:	231b      	movs	r3, #27
 800d266:	2218      	movs	r2, #24
 800d268:	4694      	mov	ip, r2
 800d26a:	44bc      	add	ip, r7
 800d26c:	4463      	add	r3, ip
 800d26e:	2200      	movs	r2, #0
 800d270:	701a      	strb	r2, [r3, #0]
 800d272:	e04d      	b.n	800d310 <UART_SetConfig+0x260>
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4a6c      	ldr	r2, [pc, #432]	; (800d42c <UART_SetConfig+0x37c>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d141      	bne.n	800d302 <UART_SetConfig+0x252>
 800d27e:	4b6e      	ldr	r3, [pc, #440]	; (800d438 <UART_SetConfig+0x388>)
 800d280:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d282:	23c0      	movs	r3, #192	; 0xc0
 800d284:	011b      	lsls	r3, r3, #4
 800d286:	4013      	ands	r3, r2
 800d288:	2280      	movs	r2, #128	; 0x80
 800d28a:	00d2      	lsls	r2, r2, #3
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d01f      	beq.n	800d2d0 <UART_SetConfig+0x220>
 800d290:	2280      	movs	r2, #128	; 0x80
 800d292:	00d2      	lsls	r2, r2, #3
 800d294:	4293      	cmp	r3, r2
 800d296:	d802      	bhi.n	800d29e <UART_SetConfig+0x1ee>
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d009      	beq.n	800d2b0 <UART_SetConfig+0x200>
 800d29c:	e028      	b.n	800d2f0 <UART_SetConfig+0x240>
 800d29e:	2280      	movs	r2, #128	; 0x80
 800d2a0:	0112      	lsls	r2, r2, #4
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d00c      	beq.n	800d2c0 <UART_SetConfig+0x210>
 800d2a6:	22c0      	movs	r2, #192	; 0xc0
 800d2a8:	0112      	lsls	r2, r2, #4
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d018      	beq.n	800d2e0 <UART_SetConfig+0x230>
 800d2ae:	e01f      	b.n	800d2f0 <UART_SetConfig+0x240>
 800d2b0:	231b      	movs	r3, #27
 800d2b2:	2218      	movs	r2, #24
 800d2b4:	4694      	mov	ip, r2
 800d2b6:	44bc      	add	ip, r7
 800d2b8:	4463      	add	r3, ip
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	701a      	strb	r2, [r3, #0]
 800d2be:	e027      	b.n	800d310 <UART_SetConfig+0x260>
 800d2c0:	231b      	movs	r3, #27
 800d2c2:	2218      	movs	r2, #24
 800d2c4:	4694      	mov	ip, r2
 800d2c6:	44bc      	add	ip, r7
 800d2c8:	4463      	add	r3, ip
 800d2ca:	2202      	movs	r2, #2
 800d2cc:	701a      	strb	r2, [r3, #0]
 800d2ce:	e01f      	b.n	800d310 <UART_SetConfig+0x260>
 800d2d0:	231b      	movs	r3, #27
 800d2d2:	2218      	movs	r2, #24
 800d2d4:	4694      	mov	ip, r2
 800d2d6:	44bc      	add	ip, r7
 800d2d8:	4463      	add	r3, ip
 800d2da:	2204      	movs	r2, #4
 800d2dc:	701a      	strb	r2, [r3, #0]
 800d2de:	e017      	b.n	800d310 <UART_SetConfig+0x260>
 800d2e0:	231b      	movs	r3, #27
 800d2e2:	2218      	movs	r2, #24
 800d2e4:	4694      	mov	ip, r2
 800d2e6:	44bc      	add	ip, r7
 800d2e8:	4463      	add	r3, ip
 800d2ea:	2208      	movs	r2, #8
 800d2ec:	701a      	strb	r2, [r3, #0]
 800d2ee:	e00f      	b.n	800d310 <UART_SetConfig+0x260>
 800d2f0:	231b      	movs	r3, #27
 800d2f2:	2218      	movs	r2, #24
 800d2f4:	4694      	mov	ip, r2
 800d2f6:	44bc      	add	ip, r7
 800d2f8:	4463      	add	r3, ip
 800d2fa:	2210      	movs	r2, #16
 800d2fc:	701a      	strb	r2, [r3, #0]
 800d2fe:	46c0      	nop			; (mov r8, r8)
 800d300:	e006      	b.n	800d310 <UART_SetConfig+0x260>
 800d302:	231b      	movs	r3, #27
 800d304:	2218      	movs	r2, #24
 800d306:	4694      	mov	ip, r2
 800d308:	44bc      	add	ip, r7
 800d30a:	4463      	add	r3, ip
 800d30c:	2210      	movs	r2, #16
 800d30e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a45      	ldr	r2, [pc, #276]	; (800d42c <UART_SetConfig+0x37c>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d000      	beq.n	800d31c <UART_SetConfig+0x26c>
 800d31a:	e09d      	b.n	800d458 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d31c:	231b      	movs	r3, #27
 800d31e:	2218      	movs	r2, #24
 800d320:	4694      	mov	ip, r2
 800d322:	44bc      	add	ip, r7
 800d324:	4463      	add	r3, ip
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	2b02      	cmp	r3, #2
 800d32a:	d00d      	beq.n	800d348 <UART_SetConfig+0x298>
 800d32c:	dc02      	bgt.n	800d334 <UART_SetConfig+0x284>
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d005      	beq.n	800d33e <UART_SetConfig+0x28e>
 800d332:	e01d      	b.n	800d370 <UART_SetConfig+0x2c0>
 800d334:	2b04      	cmp	r3, #4
 800d336:	d012      	beq.n	800d35e <UART_SetConfig+0x2ae>
 800d338:	2b08      	cmp	r3, #8
 800d33a:	d015      	beq.n	800d368 <UART_SetConfig+0x2b8>
 800d33c:	e018      	b.n	800d370 <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800d33e:	f7fe faa1 	bl	800b884 <HAL_RCC_GetPCLK1Freq>
 800d342:	0003      	movs	r3, r0
 800d344:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d346:	e01b      	b.n	800d380 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d348:	4b3b      	ldr	r3, [pc, #236]	; (800d438 <UART_SetConfig+0x388>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2210      	movs	r2, #16
 800d34e:	4013      	ands	r3, r2
 800d350:	d002      	beq.n	800d358 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800d352:	4b3d      	ldr	r3, [pc, #244]	; (800d448 <UART_SetConfig+0x398>)
 800d354:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800d356:	e013      	b.n	800d380 <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800d358:	4b3c      	ldr	r3, [pc, #240]	; (800d44c <UART_SetConfig+0x39c>)
 800d35a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d35c:	e010      	b.n	800d380 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800d35e:	f7fe fa03 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800d362:	0003      	movs	r3, r0
 800d364:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d366:	e00b      	b.n	800d380 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800d368:	2380      	movs	r3, #128	; 0x80
 800d36a:	021b      	lsls	r3, r3, #8
 800d36c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d36e:	e007      	b.n	800d380 <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800d370:	2313      	movs	r3, #19
 800d372:	2218      	movs	r2, #24
 800d374:	4694      	mov	ip, r2
 800d376:	44bc      	add	ip, r7
 800d378:	4463      	add	r3, ip
 800d37a:	2201      	movs	r2, #1
 800d37c:	701a      	strb	r2, [r3, #0]
        break;
 800d37e:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800d380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d382:	2b00      	cmp	r3, #0
 800d384:	d100      	bne.n	800d388 <UART_SetConfig+0x2d8>
 800d386:	e1a6      	b.n	800d6d6 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d388:	69fb      	ldr	r3, [r7, #28]
 800d38a:	685a      	ldr	r2, [r3, #4]
 800d38c:	0013      	movs	r3, r2
 800d38e:	005b      	lsls	r3, r3, #1
 800d390:	189b      	adds	r3, r3, r2
 800d392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d394:	429a      	cmp	r2, r3
 800d396:	d305      	bcc.n	800d3a4 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d39e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d907      	bls.n	800d3b4 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 800d3a4:	2313      	movs	r3, #19
 800d3a6:	2218      	movs	r2, #24
 800d3a8:	4694      	mov	ip, r2
 800d3aa:	44bc      	add	ip, r7
 800d3ac:	4463      	add	r3, ip
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	701a      	strb	r2, [r3, #0]
 800d3b2:	e190      	b.n	800d6d6 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 800d3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b6:	613b      	str	r3, [r7, #16]
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	617b      	str	r3, [r7, #20]
 800d3bc:	6939      	ldr	r1, [r7, #16]
 800d3be:	697a      	ldr	r2, [r7, #20]
 800d3c0:	000b      	movs	r3, r1
 800d3c2:	0e1b      	lsrs	r3, r3, #24
 800d3c4:	0010      	movs	r0, r2
 800d3c6:	0205      	lsls	r5, r0, #8
 800d3c8:	431d      	orrs	r5, r3
 800d3ca:	000b      	movs	r3, r1
 800d3cc:	021c      	lsls	r4, r3, #8
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	085b      	lsrs	r3, r3, #1
 800d3d4:	60bb      	str	r3, [r7, #8]
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	60fb      	str	r3, [r7, #12]
 800d3da:	68b8      	ldr	r0, [r7, #8]
 800d3dc:	68f9      	ldr	r1, [r7, #12]
 800d3de:	1900      	adds	r0, r0, r4
 800d3e0:	4169      	adcs	r1, r5
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	603b      	str	r3, [r7, #0]
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	607b      	str	r3, [r7, #4]
 800d3ec:	683a      	ldr	r2, [r7, #0]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f7f3 f89c 	bl	800052c <__aeabi_uldivmod>
 800d3f4:	0003      	movs	r3, r0
 800d3f6:	000c      	movs	r4, r1
 800d3f8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fc:	4a14      	ldr	r2, [pc, #80]	; (800d450 <UART_SetConfig+0x3a0>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d908      	bls.n	800d414 <UART_SetConfig+0x364>
 800d402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d404:	4a13      	ldr	r2, [pc, #76]	; (800d454 <UART_SetConfig+0x3a4>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d804      	bhi.n	800d414 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d410:	60da      	str	r2, [r3, #12]
 800d412:	e160      	b.n	800d6d6 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 800d414:	2313      	movs	r3, #19
 800d416:	2218      	movs	r2, #24
 800d418:	4694      	mov	ip, r2
 800d41a:	44bc      	add	ip, r7
 800d41c:	4463      	add	r3, ip
 800d41e:	2201      	movs	r2, #1
 800d420:	701a      	strb	r2, [r3, #0]
 800d422:	e158      	b.n	800d6d6 <UART_SetConfig+0x626>
 800d424:	efff69f3 	.word	0xefff69f3
 800d428:	ffffcfff 	.word	0xffffcfff
 800d42c:	40004800 	.word	0x40004800
 800d430:	fffff4ff 	.word	0xfffff4ff
 800d434:	40013800 	.word	0x40013800
 800d438:	40021000 	.word	0x40021000
 800d43c:	40004400 	.word	0x40004400
 800d440:	40004c00 	.word	0x40004c00
 800d444:	40005000 	.word	0x40005000
 800d448:	003d0900 	.word	0x003d0900
 800d44c:	00f42400 	.word	0x00f42400
 800d450:	000002ff 	.word	0x000002ff
 800d454:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d458:	69fb      	ldr	r3, [r7, #28]
 800d45a:	69da      	ldr	r2, [r3, #28]
 800d45c:	2380      	movs	r3, #128	; 0x80
 800d45e:	021b      	lsls	r3, r3, #8
 800d460:	429a      	cmp	r2, r3
 800d462:	d000      	beq.n	800d466 <UART_SetConfig+0x3b6>
 800d464:	e0a9      	b.n	800d5ba <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 800d466:	231b      	movs	r3, #27
 800d468:	2218      	movs	r2, #24
 800d46a:	4694      	mov	ip, r2
 800d46c:	44bc      	add	ip, r7
 800d46e:	4463      	add	r3, ip
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	2b08      	cmp	r3, #8
 800d474:	d86d      	bhi.n	800d552 <UART_SetConfig+0x4a2>
 800d476:	009a      	lsls	r2, r3, #2
 800d478:	4b9f      	ldr	r3, [pc, #636]	; (800d6f8 <UART_SetConfig+0x648>)
 800d47a:	18d3      	adds	r3, r2, r3
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d480:	f7fe fa00 	bl	800b884 <HAL_RCC_GetPCLK1Freq>
 800d484:	0003      	movs	r3, r0
 800d486:	005a      	lsls	r2, r3, #1
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	085b      	lsrs	r3, r3, #1
 800d48e:	18d2      	adds	r2, r2, r3
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	0019      	movs	r1, r3
 800d496:	0010      	movs	r0, r2
 800d498:	f7f2 fe36 	bl	8000108 <__udivsi3>
 800d49c:	0003      	movs	r3, r0
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4a2:	e05e      	b.n	800d562 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800d4a4:	f7fe fa04 	bl	800b8b0 <HAL_RCC_GetPCLK2Freq>
 800d4a8:	0003      	movs	r3, r0
 800d4aa:	005a      	lsls	r2, r3, #1
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	085b      	lsrs	r3, r3, #1
 800d4b2:	18d2      	adds	r2, r2, r3
 800d4b4:	69fb      	ldr	r3, [r7, #28]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	0019      	movs	r1, r3
 800d4ba:	0010      	movs	r0, r2
 800d4bc:	f7f2 fe24 	bl	8000108 <__udivsi3>
 800d4c0:	0003      	movs	r3, r0
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d4c6:	e04c      	b.n	800d562 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4c8:	4b8c      	ldr	r3, [pc, #560]	; (800d6fc <UART_SetConfig+0x64c>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2210      	movs	r2, #16
 800d4ce:	4013      	ands	r3, r2
 800d4d0:	d00e      	beq.n	800d4f0 <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	085b      	lsrs	r3, r3, #1
 800d4d8:	4a89      	ldr	r2, [pc, #548]	; (800d700 <UART_SetConfig+0x650>)
 800d4da:	189a      	adds	r2, r3, r2
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	0019      	movs	r1, r3
 800d4e2:	0010      	movs	r0, r2
 800d4e4:	f7f2 fe10 	bl	8000108 <__udivsi3>
 800d4e8:	0003      	movs	r3, r0
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800d4ee:	e038      	b.n	800d562 <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	085b      	lsrs	r3, r3, #1
 800d4f6:	4a83      	ldr	r2, [pc, #524]	; (800d704 <UART_SetConfig+0x654>)
 800d4f8:	189a      	adds	r2, r3, r2
 800d4fa:	69fb      	ldr	r3, [r7, #28]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	0019      	movs	r1, r3
 800d500:	0010      	movs	r0, r2
 800d502:	f7f2 fe01 	bl	8000108 <__udivsi3>
 800d506:	0003      	movs	r3, r0
 800d508:	b29b      	uxth	r3, r3
 800d50a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d50c:	e029      	b.n	800d562 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800d50e:	f7fe f92b 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800d512:	0003      	movs	r3, r0
 800d514:	005a      	lsls	r2, r3, #1
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	685b      	ldr	r3, [r3, #4]
 800d51a:	085b      	lsrs	r3, r3, #1
 800d51c:	18d2      	adds	r2, r2, r3
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	0019      	movs	r1, r3
 800d524:	0010      	movs	r0, r2
 800d526:	f7f2 fdef 	bl	8000108 <__udivsi3>
 800d52a:	0003      	movs	r3, r0
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d530:	e017      	b.n	800d562 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	085b      	lsrs	r3, r3, #1
 800d538:	2280      	movs	r2, #128	; 0x80
 800d53a:	0252      	lsls	r2, r2, #9
 800d53c:	189a      	adds	r2, r3, r2
 800d53e:	69fb      	ldr	r3, [r7, #28]
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	0019      	movs	r1, r3
 800d544:	0010      	movs	r0, r2
 800d546:	f7f2 fddf 	bl	8000108 <__udivsi3>
 800d54a:	0003      	movs	r3, r0
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d550:	e007      	b.n	800d562 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800d552:	2313      	movs	r3, #19
 800d554:	2218      	movs	r2, #24
 800d556:	4694      	mov	ip, r2
 800d558:	44bc      	add	ip, r7
 800d55a:	4463      	add	r3, ip
 800d55c:	2201      	movs	r2, #1
 800d55e:	701a      	strb	r2, [r3, #0]
        break;
 800d560:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d564:	2b0f      	cmp	r3, #15
 800d566:	d920      	bls.n	800d5aa <UART_SetConfig+0x4fa>
 800d568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56a:	4a67      	ldr	r2, [pc, #412]	; (800d708 <UART_SetConfig+0x658>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d81c      	bhi.n	800d5aa <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d572:	b29a      	uxth	r2, r3
 800d574:	200a      	movs	r0, #10
 800d576:	2418      	movs	r4, #24
 800d578:	193b      	adds	r3, r7, r4
 800d57a:	181b      	adds	r3, r3, r0
 800d57c:	210f      	movs	r1, #15
 800d57e:	438a      	bics	r2, r1
 800d580:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d584:	085b      	lsrs	r3, r3, #1
 800d586:	b29b      	uxth	r3, r3
 800d588:	2207      	movs	r2, #7
 800d58a:	4013      	ands	r3, r2
 800d58c:	b299      	uxth	r1, r3
 800d58e:	193b      	adds	r3, r7, r4
 800d590:	181b      	adds	r3, r3, r0
 800d592:	193a      	adds	r2, r7, r4
 800d594:	1812      	adds	r2, r2, r0
 800d596:	8812      	ldrh	r2, [r2, #0]
 800d598:	430a      	orrs	r2, r1
 800d59a:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	193a      	adds	r2, r7, r4
 800d5a2:	1812      	adds	r2, r2, r0
 800d5a4:	8812      	ldrh	r2, [r2, #0]
 800d5a6:	60da      	str	r2, [r3, #12]
 800d5a8:	e095      	b.n	800d6d6 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 800d5aa:	2313      	movs	r3, #19
 800d5ac:	2218      	movs	r2, #24
 800d5ae:	4694      	mov	ip, r2
 800d5b0:	44bc      	add	ip, r7
 800d5b2:	4463      	add	r3, ip
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	701a      	strb	r2, [r3, #0]
 800d5b8:	e08d      	b.n	800d6d6 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 800d5ba:	231b      	movs	r3, #27
 800d5bc:	2218      	movs	r2, #24
 800d5be:	4694      	mov	ip, r2
 800d5c0:	44bc      	add	ip, r7
 800d5c2:	4463      	add	r3, ip
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	2b08      	cmp	r3, #8
 800d5c8:	d86a      	bhi.n	800d6a0 <UART_SetConfig+0x5f0>
 800d5ca:	009a      	lsls	r2, r3, #2
 800d5cc:	4b4f      	ldr	r3, [pc, #316]	; (800d70c <UART_SetConfig+0x65c>)
 800d5ce:	18d3      	adds	r3, r2, r3
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d5d4:	f7fe f956 	bl	800b884 <HAL_RCC_GetPCLK1Freq>
 800d5d8:	0002      	movs	r2, r0
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	085b      	lsrs	r3, r3, #1
 800d5e0:	18d2      	adds	r2, r2, r3
 800d5e2:	69fb      	ldr	r3, [r7, #28]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	0019      	movs	r1, r3
 800d5e8:	0010      	movs	r0, r2
 800d5ea:	f7f2 fd8d 	bl	8000108 <__udivsi3>
 800d5ee:	0003      	movs	r3, r0
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5f4:	e05c      	b.n	800d6b0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800d5f6:	f7fe f95b 	bl	800b8b0 <HAL_RCC_GetPCLK2Freq>
 800d5fa:	0002      	movs	r2, r0
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	085b      	lsrs	r3, r3, #1
 800d602:	18d2      	adds	r2, r2, r3
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	0019      	movs	r1, r3
 800d60a:	0010      	movs	r0, r2
 800d60c:	f7f2 fd7c 	bl	8000108 <__udivsi3>
 800d610:	0003      	movs	r3, r0
 800d612:	b29b      	uxth	r3, r3
 800d614:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d616:	e04b      	b.n	800d6b0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d618:	4b38      	ldr	r3, [pc, #224]	; (800d6fc <UART_SetConfig+0x64c>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	2210      	movs	r2, #16
 800d61e:	4013      	ands	r3, r2
 800d620:	d00e      	beq.n	800d640 <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800d622:	69fb      	ldr	r3, [r7, #28]
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	085b      	lsrs	r3, r3, #1
 800d628:	4a39      	ldr	r2, [pc, #228]	; (800d710 <UART_SetConfig+0x660>)
 800d62a:	189a      	adds	r2, r3, r2
 800d62c:	69fb      	ldr	r3, [r7, #28]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	0019      	movs	r1, r3
 800d632:	0010      	movs	r0, r2
 800d634:	f7f2 fd68 	bl	8000108 <__udivsi3>
 800d638:	0003      	movs	r3, r0
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800d63e:	e037      	b.n	800d6b0 <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	085b      	lsrs	r3, r3, #1
 800d646:	4a33      	ldr	r2, [pc, #204]	; (800d714 <UART_SetConfig+0x664>)
 800d648:	189a      	adds	r2, r3, r2
 800d64a:	69fb      	ldr	r3, [r7, #28]
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	0019      	movs	r1, r3
 800d650:	0010      	movs	r0, r2
 800d652:	f7f2 fd59 	bl	8000108 <__udivsi3>
 800d656:	0003      	movs	r3, r0
 800d658:	b29b      	uxth	r3, r3
 800d65a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d65c:	e028      	b.n	800d6b0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800d65e:	f7fe f883 	bl	800b768 <HAL_RCC_GetSysClockFreq>
 800d662:	0002      	movs	r2, r0
 800d664:	69fb      	ldr	r3, [r7, #28]
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	085b      	lsrs	r3, r3, #1
 800d66a:	18d2      	adds	r2, r2, r3
 800d66c:	69fb      	ldr	r3, [r7, #28]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	0019      	movs	r1, r3
 800d672:	0010      	movs	r0, r2
 800d674:	f7f2 fd48 	bl	8000108 <__udivsi3>
 800d678:	0003      	movs	r3, r0
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d67e:	e017      	b.n	800d6b0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800d680:	69fb      	ldr	r3, [r7, #28]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	085b      	lsrs	r3, r3, #1
 800d686:	2280      	movs	r2, #128	; 0x80
 800d688:	0212      	lsls	r2, r2, #8
 800d68a:	189a      	adds	r2, r3, r2
 800d68c:	69fb      	ldr	r3, [r7, #28]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	0019      	movs	r1, r3
 800d692:	0010      	movs	r0, r2
 800d694:	f7f2 fd38 	bl	8000108 <__udivsi3>
 800d698:	0003      	movs	r3, r0
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d69e:	e007      	b.n	800d6b0 <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800d6a0:	2313      	movs	r3, #19
 800d6a2:	2218      	movs	r2, #24
 800d6a4:	4694      	mov	ip, r2
 800d6a6:	44bc      	add	ip, r7
 800d6a8:	4463      	add	r3, ip
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	701a      	strb	r2, [r3, #0]
        break;
 800d6ae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b2:	2b0f      	cmp	r3, #15
 800d6b4:	d908      	bls.n	800d6c8 <UART_SetConfig+0x618>
 800d6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b8:	4a13      	ldr	r2, [pc, #76]	; (800d708 <UART_SetConfig+0x658>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d804      	bhi.n	800d6c8 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6c4:	60da      	str	r2, [r3, #12]
 800d6c6:	e006      	b.n	800d6d6 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 800d6c8:	2313      	movs	r3, #19
 800d6ca:	2218      	movs	r2, #24
 800d6cc:	4694      	mov	ip, r2
 800d6ce:	44bc      	add	ip, r7
 800d6d0:	4463      	add	r3, ip
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800d6e2:	2313      	movs	r3, #19
 800d6e4:	2218      	movs	r2, #24
 800d6e6:	4694      	mov	ip, r2
 800d6e8:	44bc      	add	ip, r7
 800d6ea:	4463      	add	r3, ip
 800d6ec:	781b      	ldrb	r3, [r3, #0]
}
 800d6ee:	0018      	movs	r0, r3
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	b00e      	add	sp, #56	; 0x38
 800d6f4:	bdb0      	pop	{r4, r5, r7, pc}
 800d6f6:	46c0      	nop			; (mov r8, r8)
 800d6f8:	0801cc80 	.word	0x0801cc80
 800d6fc:	40021000 	.word	0x40021000
 800d700:	007a1200 	.word	0x007a1200
 800d704:	01e84800 	.word	0x01e84800
 800d708:	0000ffff 	.word	0x0000ffff
 800d70c:	0801cca4 	.word	0x0801cca4
 800d710:	003d0900 	.word	0x003d0900
 800d714:	00f42400 	.word	0x00f42400

0800d718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d724:	2201      	movs	r2, #1
 800d726:	4013      	ands	r3, r2
 800d728:	d00b      	beq.n	800d742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	685b      	ldr	r3, [r3, #4]
 800d730:	4a4a      	ldr	r2, [pc, #296]	; (800d85c <UART_AdvFeatureConfig+0x144>)
 800d732:	4013      	ands	r3, r2
 800d734:	0019      	movs	r1, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	430a      	orrs	r2, r1
 800d740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d746:	2202      	movs	r2, #2
 800d748:	4013      	ands	r3, r2
 800d74a:	d00b      	beq.n	800d764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	4a43      	ldr	r2, [pc, #268]	; (800d860 <UART_AdvFeatureConfig+0x148>)
 800d754:	4013      	ands	r3, r2
 800d756:	0019      	movs	r1, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	430a      	orrs	r2, r1
 800d762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d768:	2204      	movs	r2, #4
 800d76a:	4013      	ands	r3, r2
 800d76c:	d00b      	beq.n	800d786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	4a3b      	ldr	r2, [pc, #236]	; (800d864 <UART_AdvFeatureConfig+0x14c>)
 800d776:	4013      	ands	r3, r2
 800d778:	0019      	movs	r1, r3
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	430a      	orrs	r2, r1
 800d784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d78a:	2208      	movs	r2, #8
 800d78c:	4013      	ands	r3, r2
 800d78e:	d00b      	beq.n	800d7a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	4a34      	ldr	r2, [pc, #208]	; (800d868 <UART_AdvFeatureConfig+0x150>)
 800d798:	4013      	ands	r3, r2
 800d79a:	0019      	movs	r1, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	430a      	orrs	r2, r1
 800d7a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ac:	2210      	movs	r2, #16
 800d7ae:	4013      	ands	r3, r2
 800d7b0:	d00b      	beq.n	800d7ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	689b      	ldr	r3, [r3, #8]
 800d7b8:	4a2c      	ldr	r2, [pc, #176]	; (800d86c <UART_AdvFeatureConfig+0x154>)
 800d7ba:	4013      	ands	r3, r2
 800d7bc:	0019      	movs	r1, r3
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	430a      	orrs	r2, r1
 800d7c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ce:	2220      	movs	r2, #32
 800d7d0:	4013      	ands	r3, r2
 800d7d2:	d00b      	beq.n	800d7ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	689b      	ldr	r3, [r3, #8]
 800d7da:	4a25      	ldr	r2, [pc, #148]	; (800d870 <UART_AdvFeatureConfig+0x158>)
 800d7dc:	4013      	ands	r3, r2
 800d7de:	0019      	movs	r1, r3
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	430a      	orrs	r2, r1
 800d7ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f0:	2240      	movs	r2, #64	; 0x40
 800d7f2:	4013      	ands	r3, r2
 800d7f4:	d01d      	beq.n	800d832 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	4a1d      	ldr	r2, [pc, #116]	; (800d874 <UART_AdvFeatureConfig+0x15c>)
 800d7fe:	4013      	ands	r3, r2
 800d800:	0019      	movs	r1, r3
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	430a      	orrs	r2, r1
 800d80c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d812:	2380      	movs	r3, #128	; 0x80
 800d814:	035b      	lsls	r3, r3, #13
 800d816:	429a      	cmp	r2, r3
 800d818:	d10b      	bne.n	800d832 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	685b      	ldr	r3, [r3, #4]
 800d820:	4a15      	ldr	r2, [pc, #84]	; (800d878 <UART_AdvFeatureConfig+0x160>)
 800d822:	4013      	ands	r3, r2
 800d824:	0019      	movs	r1, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	430a      	orrs	r2, r1
 800d830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d836:	2280      	movs	r2, #128	; 0x80
 800d838:	4013      	ands	r3, r2
 800d83a:	d00b      	beq.n	800d854 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	4a0e      	ldr	r2, [pc, #56]	; (800d87c <UART_AdvFeatureConfig+0x164>)
 800d844:	4013      	ands	r3, r2
 800d846:	0019      	movs	r1, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	430a      	orrs	r2, r1
 800d852:	605a      	str	r2, [r3, #4]
  }
}
 800d854:	46c0      	nop			; (mov r8, r8)
 800d856:	46bd      	mov	sp, r7
 800d858:	b002      	add	sp, #8
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	fffdffff 	.word	0xfffdffff
 800d860:	fffeffff 	.word	0xfffeffff
 800d864:	fffbffff 	.word	0xfffbffff
 800d868:	ffff7fff 	.word	0xffff7fff
 800d86c:	ffffefff 	.word	0xffffefff
 800d870:	ffffdfff 	.word	0xffffdfff
 800d874:	ffefffff 	.word	0xffefffff
 800d878:	ff9fffff 	.word	0xff9fffff
 800d87c:	fff7ffff 	.word	0xfff7ffff

0800d880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b086      	sub	sp, #24
 800d884:	af02      	add	r7, sp, #8
 800d886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2200      	movs	r2, #0
 800d88c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800d88e:	f7fb fa27 	bl	8008ce0 <HAL_GetTick>
 800d892:	0003      	movs	r3, r0
 800d894:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	2208      	movs	r2, #8
 800d89e:	4013      	ands	r3, r2
 800d8a0:	2b08      	cmp	r3, #8
 800d8a2:	d10d      	bne.n	800d8c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d8a4:	68fa      	ldr	r2, [r7, #12]
 800d8a6:	2380      	movs	r3, #128	; 0x80
 800d8a8:	0399      	lsls	r1, r3, #14
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	4b16      	ldr	r3, [pc, #88]	; (800d908 <UART_CheckIdleState+0x88>)
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	0013      	movs	r3, r2
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	f000 f82a 	bl	800d90c <UART_WaitOnFlagUntilTimeout>
 800d8b8:	1e03      	subs	r3, r0, #0
 800d8ba:	d001      	beq.n	800d8c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d8bc:	2303      	movs	r3, #3
 800d8be:	e01f      	b.n	800d900 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2204      	movs	r2, #4
 800d8c8:	4013      	ands	r3, r2
 800d8ca:	2b04      	cmp	r3, #4
 800d8cc:	d10d      	bne.n	800d8ea <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d8ce:	68fa      	ldr	r2, [r7, #12]
 800d8d0:	2380      	movs	r3, #128	; 0x80
 800d8d2:	03d9      	lsls	r1, r3, #15
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	4b0c      	ldr	r3, [pc, #48]	; (800d908 <UART_CheckIdleState+0x88>)
 800d8d8:	9300      	str	r3, [sp, #0]
 800d8da:	0013      	movs	r3, r2
 800d8dc:	2200      	movs	r2, #0
 800d8de:	f000 f815 	bl	800d90c <UART_WaitOnFlagUntilTimeout>
 800d8e2:	1e03      	subs	r3, r0, #0
 800d8e4:	d001      	beq.n	800d8ea <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d8e6:	2303      	movs	r3, #3
 800d8e8:	e00a      	b.n	800d900 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2220      	movs	r2, #32
 800d8ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2220      	movs	r2, #32
 800d8f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2270      	movs	r2, #112	; 0x70
 800d8fa:	2100      	movs	r1, #0
 800d8fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d8fe:	2300      	movs	r3, #0
}
 800d900:	0018      	movs	r0, r3
 800d902:	46bd      	mov	sp, r7
 800d904:	b004      	add	sp, #16
 800d906:	bd80      	pop	{r7, pc}
 800d908:	01ffffff 	.word	0x01ffffff

0800d90c <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	603b      	str	r3, [r7, #0]
 800d918:	1dfb      	adds	r3, r7, #7
 800d91a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d91c:	e029      	b.n	800d972 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d91e:	69bb      	ldr	r3, [r7, #24]
 800d920:	3301      	adds	r3, #1
 800d922:	d026      	beq.n	800d972 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d924:	f7fb f9dc 	bl	8008ce0 <HAL_GetTick>
 800d928:	0002      	movs	r2, r0
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	1ad3      	subs	r3, r2, r3
 800d92e:	69ba      	ldr	r2, [r7, #24]
 800d930:	429a      	cmp	r2, r3
 800d932:	d302      	bcc.n	800d93a <UART_WaitOnFlagUntilTimeout+0x2e>
 800d934:	69bb      	ldr	r3, [r7, #24]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d11b      	bne.n	800d972 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4915      	ldr	r1, [pc, #84]	; (800d99c <UART_WaitOnFlagUntilTimeout+0x90>)
 800d946:	400a      	ands	r2, r1
 800d948:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	689a      	ldr	r2, [r3, #8]
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2101      	movs	r1, #1
 800d956:	438a      	bics	r2, r1
 800d958:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2220      	movs	r2, #32
 800d95e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2220      	movs	r2, #32
 800d964:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2270      	movs	r2, #112	; 0x70
 800d96a:	2100      	movs	r1, #0
 800d96c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800d96e:	2303      	movs	r3, #3
 800d970:	e00f      	b.n	800d992 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	69db      	ldr	r3, [r3, #28]
 800d978:	68ba      	ldr	r2, [r7, #8]
 800d97a:	4013      	ands	r3, r2
 800d97c:	68ba      	ldr	r2, [r7, #8]
 800d97e:	1ad3      	subs	r3, r2, r3
 800d980:	425a      	negs	r2, r3
 800d982:	4153      	adcs	r3, r2
 800d984:	b2db      	uxtb	r3, r3
 800d986:	001a      	movs	r2, r3
 800d988:	1dfb      	adds	r3, r7, #7
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d0c6      	beq.n	800d91e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d990:	2300      	movs	r3, #0
}
 800d992:	0018      	movs	r0, r3
 800d994:	46bd      	mov	sp, r7
 800d996:	b004      	add	sp, #16
 800d998:	bd80      	pop	{r7, pc}
 800d99a:	46c0      	nop			; (mov r8, r8)
 800d99c:	fffffe5f 	.word	0xfffffe5f

0800d9a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	21c0      	movs	r1, #192	; 0xc0
 800d9b4:	438a      	bics	r2, r1
 800d9b6:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2220      	movs	r2, #32
 800d9bc:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d9be:	46c0      	nop			; (mov r8, r8)
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	b002      	add	sp, #8
 800d9c4:	bd80      	pop	{r7, pc}
	...

0800d9c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	490a      	ldr	r1, [pc, #40]	; (800da04 <UART_EndRxTransfer+0x3c>)
 800d9dc:	400a      	ands	r2, r1
 800d9de:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	689a      	ldr	r2, [r3, #8]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	2101      	movs	r1, #1
 800d9ec:	438a      	bics	r2, r1
 800d9ee:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2220      	movs	r2, #32
 800d9f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	661a      	str	r2, [r3, #96]	; 0x60
}
 800d9fc:	46c0      	nop			; (mov r8, r8)
 800d9fe:	46bd      	mov	sp, r7
 800da00:	b002      	add	sp, #8
 800da02:	bd80      	pop	{r7, pc}
 800da04:	fffffedf 	.word	0xfffffedf

0800da08 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da14:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	2220      	movs	r2, #32
 800da1e:	4013      	ands	r3, r2
 800da20:	d114      	bne.n	800da4c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2252      	movs	r2, #82	; 0x52
 800da26:	2100      	movs	r1, #0
 800da28:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	689a      	ldr	r2, [r3, #8]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2180      	movs	r1, #128	; 0x80
 800da36:	438a      	bics	r2, r1
 800da38:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2140      	movs	r1, #64	; 0x40
 800da46:	430a      	orrs	r2, r1
 800da48:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da4a:	e003      	b.n	800da54 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	0018      	movs	r0, r3
 800da50:	f7f8 f8f6 	bl	8005c40 <HAL_UART_TxCpltCallback>
}
 800da54:	46c0      	nop			; (mov r8, r8)
 800da56:	46bd      	mov	sp, r7
 800da58:	b004      	add	sp, #16
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da68:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	0018      	movs	r0, r3
 800da6e:	f7ff fb0f 	bl	800d090 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da72:	46c0      	nop			; (mov r8, r8)
 800da74:	46bd      	mov	sp, r7
 800da76:	b004      	add	sp, #16
 800da78:	bd80      	pop	{r7, pc}

0800da7a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800da7a:	b580      	push	{r7, lr}
 800da7c:	b086      	sub	sp, #24
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da86:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da8c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da92:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	689b      	ldr	r3, [r3, #8]
 800da9a:	2280      	movs	r2, #128	; 0x80
 800da9c:	4013      	ands	r3, r2
 800da9e:	2b80      	cmp	r3, #128	; 0x80
 800daa0:	d10a      	bne.n	800dab8 <UART_DMAError+0x3e>
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	2b21      	cmp	r3, #33	; 0x21
 800daa6:	d107      	bne.n	800dab8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	2252      	movs	r2, #82	; 0x52
 800daac:	2100      	movs	r1, #0
 800daae:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	0018      	movs	r0, r3
 800dab4:	f7ff ff74 	bl	800d9a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	689b      	ldr	r3, [r3, #8]
 800dabe:	2240      	movs	r2, #64	; 0x40
 800dac0:	4013      	ands	r3, r2
 800dac2:	2b40      	cmp	r3, #64	; 0x40
 800dac4:	d10a      	bne.n	800dadc <UART_DMAError+0x62>
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2b22      	cmp	r3, #34	; 0x22
 800daca:	d107      	bne.n	800dadc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	225a      	movs	r2, #90	; 0x5a
 800dad0:	2100      	movs	r1, #0
 800dad2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	0018      	movs	r0, r3
 800dad8:	f7ff ff76 	bl	800d9c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dae0:	2210      	movs	r2, #16
 800dae2:	431a      	orrs	r2, r3
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	0018      	movs	r0, r3
 800daec:	f7ff fad8 	bl	800d0a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800daf0:	46c0      	nop			; (mov r8, r8)
 800daf2:	46bd      	mov	sp, r7
 800daf4:	b006      	add	sp, #24
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b084      	sub	sp, #16
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	225a      	movs	r2, #90	; 0x5a
 800db0a:	2100      	movs	r1, #0
 800db0c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2252      	movs	r2, #82	; 0x52
 800db12:	2100      	movs	r1, #0
 800db14:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	0018      	movs	r0, r3
 800db1a:	f7ff fac1 	bl	800d0a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db1e:	46c0      	nop			; (mov r8, r8)
 800db20:	46bd      	mov	sp, r7
 800db22:	b004      	add	sp, #16
 800db24:	bd80      	pop	{r7, pc}

0800db26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800db26:	b580      	push	{r7, lr}
 800db28:	b082      	sub	sp, #8
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2140      	movs	r1, #64	; 0x40
 800db3a:	438a      	bics	r2, r1
 800db3c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2220      	movs	r2, #32
 800db42:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2200      	movs	r2, #0
 800db48:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	0018      	movs	r0, r3
 800db4e:	f7f8 f877 	bl	8005c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db52:	46c0      	nop			; (mov r8, r8)
 800db54:	46bd      	mov	sp, r7
 800db56:	b002      	add	sp, #8
 800db58:	bd80      	pop	{r7, pc}

0800db5a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b082      	sub	sp, #8
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800db62:	46c0      	nop			; (mov r8, r8)
 800db64:	46bd      	mov	sp, r7
 800db66:	b002      	add	sp, #8
 800db68:	bd80      	pop	{r7, pc}

0800db6a <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800db6a:	b580      	push	{r7, lr}
 800db6c:	b082      	sub	sp, #8
 800db6e:	af00      	add	r7, sp, #0
 800db70:	6078      	str	r0, [r7, #4]
 800db72:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	781a      	ldrb	r2, [r3, #0]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	3301      	adds	r3, #1
 800db80:	683a      	ldr	r2, [r7, #0]
 800db82:	7852      	ldrb	r2, [r2, #1]
 800db84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	3302      	adds	r3, #2
 800db8a:	683a      	ldr	r2, [r7, #0]
 800db8c:	7892      	ldrb	r2, [r2, #2]
 800db8e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	3303      	adds	r3, #3
 800db94:	683a      	ldr	r2, [r7, #0]
 800db96:	78d2      	ldrb	r2, [r2, #3]
 800db98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	3304      	adds	r3, #4
 800db9e:	683a      	ldr	r2, [r7, #0]
 800dba0:	7912      	ldrb	r2, [r2, #4]
 800dba2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	3305      	adds	r3, #5
 800dba8:	683a      	ldr	r2, [r7, #0]
 800dbaa:	7952      	ldrb	r2, [r2, #5]
 800dbac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	3306      	adds	r3, #6
 800dbb2:	683a      	ldr	r2, [r7, #0]
 800dbb4:	7992      	ldrb	r2, [r2, #6]
 800dbb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	3307      	adds	r3, #7
 800dbbc:	683a      	ldr	r2, [r7, #0]
 800dbbe:	79d2      	ldrb	r2, [r2, #7]
 800dbc0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	3308      	adds	r3, #8
 800dbc6:	683a      	ldr	r2, [r7, #0]
 800dbc8:	7a12      	ldrb	r2, [r2, #8]
 800dbca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	3309      	adds	r3, #9
 800dbd0:	683a      	ldr	r2, [r7, #0]
 800dbd2:	7a52      	ldrb	r2, [r2, #9]
 800dbd4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	330a      	adds	r3, #10
 800dbda:	683a      	ldr	r2, [r7, #0]
 800dbdc:	7a92      	ldrb	r2, [r2, #10]
 800dbde:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	330b      	adds	r3, #11
 800dbe4:	683a      	ldr	r2, [r7, #0]
 800dbe6:	7ad2      	ldrb	r2, [r2, #11]
 800dbe8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	330c      	adds	r3, #12
 800dbee:	683a      	ldr	r2, [r7, #0]
 800dbf0:	7b12      	ldrb	r2, [r2, #12]
 800dbf2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	330d      	adds	r3, #13
 800dbf8:	683a      	ldr	r2, [r7, #0]
 800dbfa:	7b52      	ldrb	r2, [r2, #13]
 800dbfc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	330e      	adds	r3, #14
 800dc02:	683a      	ldr	r2, [r7, #0]
 800dc04:	7b92      	ldrb	r2, [r2, #14]
 800dc06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	330f      	adds	r3, #15
 800dc0c:	683a      	ldr	r2, [r7, #0]
 800dc0e:	7bd2      	ldrb	r2, [r2, #15]
 800dc10:	701a      	strb	r2, [r3, #0]
#endif
}
 800dc12:	46c0      	nop			; (mov r8, r8)
 800dc14:	46bd      	mov	sp, r7
 800dc16:	b002      	add	sp, #8
 800dc18:	bd80      	pop	{r7, pc}

0800dc1a <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b084      	sub	sp, #16
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	60f8      	str	r0, [r7, #12]
 800dc22:	60b9      	str	r1, [r7, #8]
 800dc24:	1dfb      	adds	r3, r7, #7
 800dc26:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800dc28:	e007      	b.n	800dc3a <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800dc2a:	68ba      	ldr	r2, [r7, #8]
 800dc2c:	1c53      	adds	r3, r2, #1
 800dc2e:	60bb      	str	r3, [r7, #8]
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	1c59      	adds	r1, r3, #1
 800dc34:	60f9      	str	r1, [r7, #12]
 800dc36:	7812      	ldrb	r2, [r2, #0]
 800dc38:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800dc3a:	1dfb      	adds	r3, r7, #7
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	1dfa      	adds	r2, r7, #7
 800dc40:	1e59      	subs	r1, r3, #1
 800dc42:	7011      	strb	r1, [r2, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d1f0      	bne.n	800dc2a <copy_block_nn+0x10>
}
 800dc48:	46c0      	nop			; (mov r8, r8)
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	b004      	add	sp, #16
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	781a      	ldrb	r2, [r3, #0]
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	4053      	eors	r3, r2
 800dc64:	b2da      	uxtb	r2, r3
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	7819      	ldrb	r1, [r3, #0]
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	3301      	adds	r3, #1
 800dc74:	781a      	ldrb	r2, [r3, #0]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	3301      	adds	r3, #1
 800dc7a:	404a      	eors	r2, r1
 800dc7c:	b2d2      	uxtb	r2, r2
 800dc7e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	3302      	adds	r3, #2
 800dc84:	7819      	ldrb	r1, [r3, #0]
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	3302      	adds	r3, #2
 800dc8a:	781a      	ldrb	r2, [r3, #0]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	3302      	adds	r3, #2
 800dc90:	404a      	eors	r2, r1
 800dc92:	b2d2      	uxtb	r2, r2
 800dc94:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	3303      	adds	r3, #3
 800dc9a:	7819      	ldrb	r1, [r3, #0]
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	3303      	adds	r3, #3
 800dca0:	781a      	ldrb	r2, [r3, #0]
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	3303      	adds	r3, #3
 800dca6:	404a      	eors	r2, r1
 800dca8:	b2d2      	uxtb	r2, r2
 800dcaa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	3304      	adds	r3, #4
 800dcb0:	7819      	ldrb	r1, [r3, #0]
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	3304      	adds	r3, #4
 800dcb6:	781a      	ldrb	r2, [r3, #0]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	3304      	adds	r3, #4
 800dcbc:	404a      	eors	r2, r1
 800dcbe:	b2d2      	uxtb	r2, r2
 800dcc0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	3305      	adds	r3, #5
 800dcc6:	7819      	ldrb	r1, [r3, #0]
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	3305      	adds	r3, #5
 800dccc:	781a      	ldrb	r2, [r3, #0]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	3305      	adds	r3, #5
 800dcd2:	404a      	eors	r2, r1
 800dcd4:	b2d2      	uxtb	r2, r2
 800dcd6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	3306      	adds	r3, #6
 800dcdc:	7819      	ldrb	r1, [r3, #0]
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	3306      	adds	r3, #6
 800dce2:	781a      	ldrb	r2, [r3, #0]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	3306      	adds	r3, #6
 800dce8:	404a      	eors	r2, r1
 800dcea:	b2d2      	uxtb	r2, r2
 800dcec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	3307      	adds	r3, #7
 800dcf2:	7819      	ldrb	r1, [r3, #0]
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	3307      	adds	r3, #7
 800dcf8:	781a      	ldrb	r2, [r3, #0]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	3307      	adds	r3, #7
 800dcfe:	404a      	eors	r2, r1
 800dd00:	b2d2      	uxtb	r2, r2
 800dd02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	3308      	adds	r3, #8
 800dd08:	7819      	ldrb	r1, [r3, #0]
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	3308      	adds	r3, #8
 800dd0e:	781a      	ldrb	r2, [r3, #0]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	3308      	adds	r3, #8
 800dd14:	404a      	eors	r2, r1
 800dd16:	b2d2      	uxtb	r2, r2
 800dd18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	3309      	adds	r3, #9
 800dd1e:	7819      	ldrb	r1, [r3, #0]
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	3309      	adds	r3, #9
 800dd24:	781a      	ldrb	r2, [r3, #0]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	3309      	adds	r3, #9
 800dd2a:	404a      	eors	r2, r1
 800dd2c:	b2d2      	uxtb	r2, r2
 800dd2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	330a      	adds	r3, #10
 800dd34:	7819      	ldrb	r1, [r3, #0]
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	330a      	adds	r3, #10
 800dd3a:	781a      	ldrb	r2, [r3, #0]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	330a      	adds	r3, #10
 800dd40:	404a      	eors	r2, r1
 800dd42:	b2d2      	uxtb	r2, r2
 800dd44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	330b      	adds	r3, #11
 800dd4a:	7819      	ldrb	r1, [r3, #0]
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	330b      	adds	r3, #11
 800dd50:	781a      	ldrb	r2, [r3, #0]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	330b      	adds	r3, #11
 800dd56:	404a      	eors	r2, r1
 800dd58:	b2d2      	uxtb	r2, r2
 800dd5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	330c      	adds	r3, #12
 800dd60:	7819      	ldrb	r1, [r3, #0]
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	330c      	adds	r3, #12
 800dd66:	781a      	ldrb	r2, [r3, #0]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	330c      	adds	r3, #12
 800dd6c:	404a      	eors	r2, r1
 800dd6e:	b2d2      	uxtb	r2, r2
 800dd70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	330d      	adds	r3, #13
 800dd76:	7819      	ldrb	r1, [r3, #0]
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	330d      	adds	r3, #13
 800dd7c:	781a      	ldrb	r2, [r3, #0]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	330d      	adds	r3, #13
 800dd82:	404a      	eors	r2, r1
 800dd84:	b2d2      	uxtb	r2, r2
 800dd86:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	330e      	adds	r3, #14
 800dd8c:	7819      	ldrb	r1, [r3, #0]
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	330e      	adds	r3, #14
 800dd92:	781a      	ldrb	r2, [r3, #0]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	330e      	adds	r3, #14
 800dd98:	404a      	eors	r2, r1
 800dd9a:	b2d2      	uxtb	r2, r2
 800dd9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	330f      	adds	r3, #15
 800dda2:	7819      	ldrb	r1, [r3, #0]
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	330f      	adds	r3, #15
 800dda8:	781a      	ldrb	r2, [r3, #0]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	330f      	adds	r3, #15
 800ddae:	404a      	eors	r2, r1
 800ddb0:	b2d2      	uxtb	r2, r2
 800ddb2:	701a      	strb	r2, [r3, #0]
#endif
}
 800ddb4:	46c0      	nop			; (mov r8, r8)
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	b002      	add	sp, #8
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	60b9      	str	r1, [r7, #8]
 800ddc6:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	781a      	ldrb	r2, [r3, #0]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	4053      	eors	r3, r2
 800ddd2:	b2da      	uxtb	r2, r3
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	3301      	adds	r3, #1
 800dddc:	7819      	ldrb	r1, [r3, #0]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	3301      	adds	r3, #1
 800dde2:	781a      	ldrb	r2, [r3, #0]
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	3301      	adds	r3, #1
 800dde8:	404a      	eors	r2, r1
 800ddea:	b2d2      	uxtb	r2, r2
 800ddec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	3302      	adds	r3, #2
 800ddf2:	7819      	ldrb	r1, [r3, #0]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	3302      	adds	r3, #2
 800ddf8:	781a      	ldrb	r2, [r3, #0]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	3302      	adds	r3, #2
 800ddfe:	404a      	eors	r2, r1
 800de00:	b2d2      	uxtb	r2, r2
 800de02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	3303      	adds	r3, #3
 800de08:	7819      	ldrb	r1, [r3, #0]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	3303      	adds	r3, #3
 800de0e:	781a      	ldrb	r2, [r3, #0]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	3303      	adds	r3, #3
 800de14:	404a      	eors	r2, r1
 800de16:	b2d2      	uxtb	r2, r2
 800de18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	3304      	adds	r3, #4
 800de1e:	7819      	ldrb	r1, [r3, #0]
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	3304      	adds	r3, #4
 800de24:	781a      	ldrb	r2, [r3, #0]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	3304      	adds	r3, #4
 800de2a:	404a      	eors	r2, r1
 800de2c:	b2d2      	uxtb	r2, r2
 800de2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	3305      	adds	r3, #5
 800de34:	7819      	ldrb	r1, [r3, #0]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	3305      	adds	r3, #5
 800de3a:	781a      	ldrb	r2, [r3, #0]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	3305      	adds	r3, #5
 800de40:	404a      	eors	r2, r1
 800de42:	b2d2      	uxtb	r2, r2
 800de44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	3306      	adds	r3, #6
 800de4a:	7819      	ldrb	r1, [r3, #0]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	3306      	adds	r3, #6
 800de50:	781a      	ldrb	r2, [r3, #0]
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	3306      	adds	r3, #6
 800de56:	404a      	eors	r2, r1
 800de58:	b2d2      	uxtb	r2, r2
 800de5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	3307      	adds	r3, #7
 800de60:	7819      	ldrb	r1, [r3, #0]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	3307      	adds	r3, #7
 800de66:	781a      	ldrb	r2, [r3, #0]
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	3307      	adds	r3, #7
 800de6c:	404a      	eors	r2, r1
 800de6e:	b2d2      	uxtb	r2, r2
 800de70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	3308      	adds	r3, #8
 800de76:	7819      	ldrb	r1, [r3, #0]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	3308      	adds	r3, #8
 800de7c:	781a      	ldrb	r2, [r3, #0]
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	3308      	adds	r3, #8
 800de82:	404a      	eors	r2, r1
 800de84:	b2d2      	uxtb	r2, r2
 800de86:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	3309      	adds	r3, #9
 800de8c:	7819      	ldrb	r1, [r3, #0]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	3309      	adds	r3, #9
 800de92:	781a      	ldrb	r2, [r3, #0]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	3309      	adds	r3, #9
 800de98:	404a      	eors	r2, r1
 800de9a:	b2d2      	uxtb	r2, r2
 800de9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	330a      	adds	r3, #10
 800dea2:	7819      	ldrb	r1, [r3, #0]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	330a      	adds	r3, #10
 800dea8:	781a      	ldrb	r2, [r3, #0]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	330a      	adds	r3, #10
 800deae:	404a      	eors	r2, r1
 800deb0:	b2d2      	uxtb	r2, r2
 800deb2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	330b      	adds	r3, #11
 800deb8:	7819      	ldrb	r1, [r3, #0]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	330b      	adds	r3, #11
 800debe:	781a      	ldrb	r2, [r3, #0]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	330b      	adds	r3, #11
 800dec4:	404a      	eors	r2, r1
 800dec6:	b2d2      	uxtb	r2, r2
 800dec8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	330c      	adds	r3, #12
 800dece:	7819      	ldrb	r1, [r3, #0]
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	330c      	adds	r3, #12
 800ded4:	781a      	ldrb	r2, [r3, #0]
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	330c      	adds	r3, #12
 800deda:	404a      	eors	r2, r1
 800dedc:	b2d2      	uxtb	r2, r2
 800dede:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	330d      	adds	r3, #13
 800dee4:	7819      	ldrb	r1, [r3, #0]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	330d      	adds	r3, #13
 800deea:	781a      	ldrb	r2, [r3, #0]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	330d      	adds	r3, #13
 800def0:	404a      	eors	r2, r1
 800def2:	b2d2      	uxtb	r2, r2
 800def4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	330e      	adds	r3, #14
 800defa:	7819      	ldrb	r1, [r3, #0]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	330e      	adds	r3, #14
 800df00:	781a      	ldrb	r2, [r3, #0]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	330e      	adds	r3, #14
 800df06:	404a      	eors	r2, r1
 800df08:	b2d2      	uxtb	r2, r2
 800df0a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	330f      	adds	r3, #15
 800df10:	7819      	ldrb	r1, [r3, #0]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	330f      	adds	r3, #15
 800df16:	781a      	ldrb	r2, [r3, #0]
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	330f      	adds	r3, #15
 800df1c:	404a      	eors	r2, r1
 800df1e:	b2d2      	uxtb	r2, r2
 800df20:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800df22:	46c0      	nop			; (mov r8, r8)
 800df24:	46bd      	mov	sp, r7
 800df26:	b004      	add	sp, #16
 800df28:	bd80      	pop	{r7, pc}

0800df2a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b082      	sub	sp, #8
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
 800df32:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800df34:	683a      	ldr	r2, [r7, #0]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	0011      	movs	r1, r2
 800df3a:	0018      	movs	r0, r3
 800df3c:	f7ff fe88 	bl	800dc50 <xor_block>
}
 800df40:	46c0      	nop			; (mov r8, r8)
 800df42:	46bd      	mov	sp, r7
 800df44:	b002      	add	sp, #8
 800df46:	bd80      	pop	{r7, pc}

0800df48 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	001a      	movs	r2, r3
 800df56:	4b4c      	ldr	r3, [pc, #304]	; (800e088 <shift_sub_rows+0x140>)
 800df58:	5c9a      	ldrb	r2, [r3, r2]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	701a      	strb	r2, [r3, #0]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	3304      	adds	r3, #4
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	0019      	movs	r1, r3
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	3304      	adds	r3, #4
 800df6a:	4a47      	ldr	r2, [pc, #284]	; (800e088 <shift_sub_rows+0x140>)
 800df6c:	5c52      	ldrb	r2, [r2, r1]
 800df6e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	3308      	adds	r3, #8
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	0019      	movs	r1, r3
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	3308      	adds	r3, #8
 800df7c:	4a42      	ldr	r2, [pc, #264]	; (800e088 <shift_sub_rows+0x140>)
 800df7e:	5c52      	ldrb	r2, [r2, r1]
 800df80:	701a      	strb	r2, [r3, #0]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	330c      	adds	r3, #12
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	0019      	movs	r1, r3
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	330c      	adds	r3, #12
 800df8e:	4a3e      	ldr	r2, [pc, #248]	; (800e088 <shift_sub_rows+0x140>)
 800df90:	5c52      	ldrb	r2, [r2, r1]
 800df92:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800df94:	200f      	movs	r0, #15
 800df96:	183b      	adds	r3, r7, r0
 800df98:	687a      	ldr	r2, [r7, #4]
 800df9a:	7852      	ldrb	r2, [r2, #1]
 800df9c:	701a      	strb	r2, [r3, #0]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	3305      	adds	r3, #5
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	0019      	movs	r1, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	4a37      	ldr	r2, [pc, #220]	; (800e088 <shift_sub_rows+0x140>)
 800dfac:	5c52      	ldrb	r2, [r2, r1]
 800dfae:	701a      	strb	r2, [r3, #0]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	3309      	adds	r3, #9
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	0019      	movs	r1, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	3305      	adds	r3, #5
 800dfbc:	4a32      	ldr	r2, [pc, #200]	; (800e088 <shift_sub_rows+0x140>)
 800dfbe:	5c52      	ldrb	r2, [r2, r1]
 800dfc0:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	330d      	adds	r3, #13
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	0019      	movs	r1, r3
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	3309      	adds	r3, #9
 800dfce:	4a2e      	ldr	r2, [pc, #184]	; (800e088 <shift_sub_rows+0x140>)
 800dfd0:	5c52      	ldrb	r2, [r2, r1]
 800dfd2:	701a      	strb	r2, [r3, #0]
 800dfd4:	183b      	adds	r3, r7, r0
 800dfd6:	781a      	ldrb	r2, [r3, #0]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	330d      	adds	r3, #13
 800dfdc:	492a      	ldr	r1, [pc, #168]	; (800e088 <shift_sub_rows+0x140>)
 800dfde:	5c8a      	ldrb	r2, [r1, r2]
 800dfe0:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800dfe2:	183b      	adds	r3, r7, r0
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	7892      	ldrb	r2, [r2, #2]
 800dfe8:	701a      	strb	r2, [r3, #0]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	330a      	adds	r3, #10
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	0019      	movs	r1, r3
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	3302      	adds	r3, #2
 800dff6:	4a24      	ldr	r2, [pc, #144]	; (800e088 <shift_sub_rows+0x140>)
 800dff8:	5c52      	ldrb	r2, [r2, r1]
 800dffa:	701a      	strb	r2, [r3, #0]
 800dffc:	183b      	adds	r3, r7, r0
 800dffe:	781a      	ldrb	r2, [r3, #0]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	330a      	adds	r3, #10
 800e004:	4920      	ldr	r1, [pc, #128]	; (800e088 <shift_sub_rows+0x140>)
 800e006:	5c8a      	ldrb	r2, [r1, r2]
 800e008:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e00a:	183b      	adds	r3, r7, r0
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	7992      	ldrb	r2, [r2, #6]
 800e010:	701a      	strb	r2, [r3, #0]
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	330e      	adds	r3, #14
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	0019      	movs	r1, r3
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	3306      	adds	r3, #6
 800e01e:	4a1a      	ldr	r2, [pc, #104]	; (800e088 <shift_sub_rows+0x140>)
 800e020:	5c52      	ldrb	r2, [r2, r1]
 800e022:	701a      	strb	r2, [r3, #0]
 800e024:	183b      	adds	r3, r7, r0
 800e026:	781a      	ldrb	r2, [r3, #0]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	330e      	adds	r3, #14
 800e02c:	4916      	ldr	r1, [pc, #88]	; (800e088 <shift_sub_rows+0x140>)
 800e02e:	5c8a      	ldrb	r2, [r1, r2]
 800e030:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e032:	183b      	adds	r3, r7, r0
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	7bd2      	ldrb	r2, [r2, #15]
 800e038:	701a      	strb	r2, [r3, #0]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	330b      	adds	r3, #11
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	0019      	movs	r1, r3
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	330f      	adds	r3, #15
 800e046:	4a10      	ldr	r2, [pc, #64]	; (800e088 <shift_sub_rows+0x140>)
 800e048:	5c52      	ldrb	r2, [r2, r1]
 800e04a:	701a      	strb	r2, [r3, #0]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	3307      	adds	r3, #7
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	0019      	movs	r1, r3
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	330b      	adds	r3, #11
 800e058:	4a0b      	ldr	r2, [pc, #44]	; (800e088 <shift_sub_rows+0x140>)
 800e05a:	5c52      	ldrb	r2, [r2, r1]
 800e05c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	3303      	adds	r3, #3
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	0019      	movs	r1, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	3307      	adds	r3, #7
 800e06a:	4a07      	ldr	r2, [pc, #28]	; (800e088 <shift_sub_rows+0x140>)
 800e06c:	5c52      	ldrb	r2, [r2, r1]
 800e06e:	701a      	strb	r2, [r3, #0]
 800e070:	183b      	adds	r3, r7, r0
 800e072:	781a      	ldrb	r2, [r3, #0]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	3303      	adds	r3, #3
 800e078:	4903      	ldr	r1, [pc, #12]	; (800e088 <shift_sub_rows+0x140>)
 800e07a:	5c8a      	ldrb	r2, [r1, r2]
 800e07c:	701a      	strb	r2, [r3, #0]
}
 800e07e:	46c0      	nop			; (mov r8, r8)
 800e080:	46bd      	mov	sp, r7
 800e082:	b004      	add	sp, #16
 800e084:	bd80      	pop	{r7, pc}
 800e086:	46c0      	nop			; (mov r8, r8)
 800e088:	0801ccc8 	.word	0x0801ccc8

0800e08c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e08c:	b590      	push	{r4, r7, lr}
 800e08e:	b087      	sub	sp, #28
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800e094:	687a      	ldr	r2, [r7, #4]
 800e096:	2008      	movs	r0, #8
 800e098:	0004      	movs	r4, r0
 800e09a:	183b      	adds	r3, r7, r0
 800e09c:	0011      	movs	r1, r2
 800e09e:	0018      	movs	r0, r3
 800e0a0:	f7ff fd63 	bl	800db6a <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e0a4:	0020      	movs	r0, r4
 800e0a6:	183b      	adds	r3, r7, r0
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	001a      	movs	r2, r3
 800e0ac:	4be7      	ldr	r3, [pc, #924]	; (800e44c <mix_sub_columns+0x3c0>)
 800e0ae:	5c9a      	ldrb	r2, [r3, r2]
 800e0b0:	183b      	adds	r3, r7, r0
 800e0b2:	795b      	ldrb	r3, [r3, #5]
 800e0b4:	0019      	movs	r1, r3
 800e0b6:	4be6      	ldr	r3, [pc, #920]	; (800e450 <mix_sub_columns+0x3c4>)
 800e0b8:	5c5b      	ldrb	r3, [r3, r1]
 800e0ba:	4053      	eors	r3, r2
 800e0bc:	b2da      	uxtb	r2, r3
 800e0be:	183b      	adds	r3, r7, r0
 800e0c0:	7a9b      	ldrb	r3, [r3, #10]
 800e0c2:	0019      	movs	r1, r3
 800e0c4:	4be3      	ldr	r3, [pc, #908]	; (800e454 <mix_sub_columns+0x3c8>)
 800e0c6:	5c5b      	ldrb	r3, [r3, r1]
 800e0c8:	4053      	eors	r3, r2
 800e0ca:	b2da      	uxtb	r2, r3
 800e0cc:	183b      	adds	r3, r7, r0
 800e0ce:	7bdb      	ldrb	r3, [r3, #15]
 800e0d0:	0019      	movs	r1, r3
 800e0d2:	4be0      	ldr	r3, [pc, #896]	; (800e454 <mix_sub_columns+0x3c8>)
 800e0d4:	5c5b      	ldrb	r3, [r3, r1]
 800e0d6:	4053      	eors	r3, r2
 800e0d8:	b2da      	uxtb	r2, r3
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e0de:	183b      	adds	r3, r7, r0
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	001a      	movs	r2, r3
 800e0e4:	4bdb      	ldr	r3, [pc, #876]	; (800e454 <mix_sub_columns+0x3c8>)
 800e0e6:	5c9a      	ldrb	r2, [r3, r2]
 800e0e8:	183b      	adds	r3, r7, r0
 800e0ea:	795b      	ldrb	r3, [r3, #5]
 800e0ec:	0019      	movs	r1, r3
 800e0ee:	4bd7      	ldr	r3, [pc, #860]	; (800e44c <mix_sub_columns+0x3c0>)
 800e0f0:	5c5b      	ldrb	r3, [r3, r1]
 800e0f2:	4053      	eors	r3, r2
 800e0f4:	b2da      	uxtb	r2, r3
 800e0f6:	183b      	adds	r3, r7, r0
 800e0f8:	7a9b      	ldrb	r3, [r3, #10]
 800e0fa:	0019      	movs	r1, r3
 800e0fc:	4bd4      	ldr	r3, [pc, #848]	; (800e450 <mix_sub_columns+0x3c4>)
 800e0fe:	5c5b      	ldrb	r3, [r3, r1]
 800e100:	4053      	eors	r3, r2
 800e102:	b2d9      	uxtb	r1, r3
 800e104:	183b      	adds	r3, r7, r0
 800e106:	7bdb      	ldrb	r3, [r3, #15]
 800e108:	001a      	movs	r2, r3
 800e10a:	4bd2      	ldr	r3, [pc, #840]	; (800e454 <mix_sub_columns+0x3c8>)
 800e10c:	5c9a      	ldrb	r2, [r3, r2]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	3301      	adds	r3, #1
 800e112:	404a      	eors	r2, r1
 800e114:	b2d2      	uxtb	r2, r2
 800e116:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e118:	183b      	adds	r3, r7, r0
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	001a      	movs	r2, r3
 800e11e:	4bcd      	ldr	r3, [pc, #820]	; (800e454 <mix_sub_columns+0x3c8>)
 800e120:	5c9a      	ldrb	r2, [r3, r2]
 800e122:	183b      	adds	r3, r7, r0
 800e124:	795b      	ldrb	r3, [r3, #5]
 800e126:	0019      	movs	r1, r3
 800e128:	4bca      	ldr	r3, [pc, #808]	; (800e454 <mix_sub_columns+0x3c8>)
 800e12a:	5c5b      	ldrb	r3, [r3, r1]
 800e12c:	4053      	eors	r3, r2
 800e12e:	b2da      	uxtb	r2, r3
 800e130:	183b      	adds	r3, r7, r0
 800e132:	7a9b      	ldrb	r3, [r3, #10]
 800e134:	0019      	movs	r1, r3
 800e136:	4bc5      	ldr	r3, [pc, #788]	; (800e44c <mix_sub_columns+0x3c0>)
 800e138:	5c5b      	ldrb	r3, [r3, r1]
 800e13a:	4053      	eors	r3, r2
 800e13c:	b2d9      	uxtb	r1, r3
 800e13e:	183b      	adds	r3, r7, r0
 800e140:	7bdb      	ldrb	r3, [r3, #15]
 800e142:	001a      	movs	r2, r3
 800e144:	4bc2      	ldr	r3, [pc, #776]	; (800e450 <mix_sub_columns+0x3c4>)
 800e146:	5c9a      	ldrb	r2, [r3, r2]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	3302      	adds	r3, #2
 800e14c:	404a      	eors	r2, r1
 800e14e:	b2d2      	uxtb	r2, r2
 800e150:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e152:	183b      	adds	r3, r7, r0
 800e154:	781b      	ldrb	r3, [r3, #0]
 800e156:	001a      	movs	r2, r3
 800e158:	4bbd      	ldr	r3, [pc, #756]	; (800e450 <mix_sub_columns+0x3c4>)
 800e15a:	5c9a      	ldrb	r2, [r3, r2]
 800e15c:	183b      	adds	r3, r7, r0
 800e15e:	795b      	ldrb	r3, [r3, #5]
 800e160:	0019      	movs	r1, r3
 800e162:	4bbc      	ldr	r3, [pc, #752]	; (800e454 <mix_sub_columns+0x3c8>)
 800e164:	5c5b      	ldrb	r3, [r3, r1]
 800e166:	4053      	eors	r3, r2
 800e168:	b2da      	uxtb	r2, r3
 800e16a:	183b      	adds	r3, r7, r0
 800e16c:	7a9b      	ldrb	r3, [r3, #10]
 800e16e:	0019      	movs	r1, r3
 800e170:	4bb8      	ldr	r3, [pc, #736]	; (800e454 <mix_sub_columns+0x3c8>)
 800e172:	5c5b      	ldrb	r3, [r3, r1]
 800e174:	4053      	eors	r3, r2
 800e176:	b2d9      	uxtb	r1, r3
 800e178:	183b      	adds	r3, r7, r0
 800e17a:	7bdb      	ldrb	r3, [r3, #15]
 800e17c:	001a      	movs	r2, r3
 800e17e:	4bb3      	ldr	r3, [pc, #716]	; (800e44c <mix_sub_columns+0x3c0>)
 800e180:	5c9a      	ldrb	r2, [r3, r2]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	3303      	adds	r3, #3
 800e186:	404a      	eors	r2, r1
 800e188:	b2d2      	uxtb	r2, r2
 800e18a:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e18c:	183b      	adds	r3, r7, r0
 800e18e:	791b      	ldrb	r3, [r3, #4]
 800e190:	001a      	movs	r2, r3
 800e192:	4bae      	ldr	r3, [pc, #696]	; (800e44c <mix_sub_columns+0x3c0>)
 800e194:	5c9a      	ldrb	r2, [r3, r2]
 800e196:	183b      	adds	r3, r7, r0
 800e198:	7a5b      	ldrb	r3, [r3, #9]
 800e19a:	0019      	movs	r1, r3
 800e19c:	4bac      	ldr	r3, [pc, #688]	; (800e450 <mix_sub_columns+0x3c4>)
 800e19e:	5c5b      	ldrb	r3, [r3, r1]
 800e1a0:	4053      	eors	r3, r2
 800e1a2:	b2da      	uxtb	r2, r3
 800e1a4:	183b      	adds	r3, r7, r0
 800e1a6:	7b9b      	ldrb	r3, [r3, #14]
 800e1a8:	0019      	movs	r1, r3
 800e1aa:	4baa      	ldr	r3, [pc, #680]	; (800e454 <mix_sub_columns+0x3c8>)
 800e1ac:	5c5b      	ldrb	r3, [r3, r1]
 800e1ae:	4053      	eors	r3, r2
 800e1b0:	b2d9      	uxtb	r1, r3
 800e1b2:	183b      	adds	r3, r7, r0
 800e1b4:	78db      	ldrb	r3, [r3, #3]
 800e1b6:	001a      	movs	r2, r3
 800e1b8:	4ba6      	ldr	r3, [pc, #664]	; (800e454 <mix_sub_columns+0x3c8>)
 800e1ba:	5c9a      	ldrb	r2, [r3, r2]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	3304      	adds	r3, #4
 800e1c0:	404a      	eors	r2, r1
 800e1c2:	b2d2      	uxtb	r2, r2
 800e1c4:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e1c6:	183b      	adds	r3, r7, r0
 800e1c8:	791b      	ldrb	r3, [r3, #4]
 800e1ca:	001a      	movs	r2, r3
 800e1cc:	4ba1      	ldr	r3, [pc, #644]	; (800e454 <mix_sub_columns+0x3c8>)
 800e1ce:	5c9a      	ldrb	r2, [r3, r2]
 800e1d0:	183b      	adds	r3, r7, r0
 800e1d2:	7a5b      	ldrb	r3, [r3, #9]
 800e1d4:	0019      	movs	r1, r3
 800e1d6:	4b9d      	ldr	r3, [pc, #628]	; (800e44c <mix_sub_columns+0x3c0>)
 800e1d8:	5c5b      	ldrb	r3, [r3, r1]
 800e1da:	4053      	eors	r3, r2
 800e1dc:	b2da      	uxtb	r2, r3
 800e1de:	183b      	adds	r3, r7, r0
 800e1e0:	7b9b      	ldrb	r3, [r3, #14]
 800e1e2:	0019      	movs	r1, r3
 800e1e4:	4b9a      	ldr	r3, [pc, #616]	; (800e450 <mix_sub_columns+0x3c4>)
 800e1e6:	5c5b      	ldrb	r3, [r3, r1]
 800e1e8:	4053      	eors	r3, r2
 800e1ea:	b2d9      	uxtb	r1, r3
 800e1ec:	183b      	adds	r3, r7, r0
 800e1ee:	78db      	ldrb	r3, [r3, #3]
 800e1f0:	001a      	movs	r2, r3
 800e1f2:	4b98      	ldr	r3, [pc, #608]	; (800e454 <mix_sub_columns+0x3c8>)
 800e1f4:	5c9a      	ldrb	r2, [r3, r2]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	3305      	adds	r3, #5
 800e1fa:	404a      	eors	r2, r1
 800e1fc:	b2d2      	uxtb	r2, r2
 800e1fe:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e200:	183b      	adds	r3, r7, r0
 800e202:	791b      	ldrb	r3, [r3, #4]
 800e204:	001a      	movs	r2, r3
 800e206:	4b93      	ldr	r3, [pc, #588]	; (800e454 <mix_sub_columns+0x3c8>)
 800e208:	5c9a      	ldrb	r2, [r3, r2]
 800e20a:	183b      	adds	r3, r7, r0
 800e20c:	7a5b      	ldrb	r3, [r3, #9]
 800e20e:	0019      	movs	r1, r3
 800e210:	4b90      	ldr	r3, [pc, #576]	; (800e454 <mix_sub_columns+0x3c8>)
 800e212:	5c5b      	ldrb	r3, [r3, r1]
 800e214:	4053      	eors	r3, r2
 800e216:	b2da      	uxtb	r2, r3
 800e218:	183b      	adds	r3, r7, r0
 800e21a:	7b9b      	ldrb	r3, [r3, #14]
 800e21c:	0019      	movs	r1, r3
 800e21e:	4b8b      	ldr	r3, [pc, #556]	; (800e44c <mix_sub_columns+0x3c0>)
 800e220:	5c5b      	ldrb	r3, [r3, r1]
 800e222:	4053      	eors	r3, r2
 800e224:	b2d9      	uxtb	r1, r3
 800e226:	183b      	adds	r3, r7, r0
 800e228:	78db      	ldrb	r3, [r3, #3]
 800e22a:	001a      	movs	r2, r3
 800e22c:	4b88      	ldr	r3, [pc, #544]	; (800e450 <mix_sub_columns+0x3c4>)
 800e22e:	5c9a      	ldrb	r2, [r3, r2]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	3306      	adds	r3, #6
 800e234:	404a      	eors	r2, r1
 800e236:	b2d2      	uxtb	r2, r2
 800e238:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e23a:	183b      	adds	r3, r7, r0
 800e23c:	791b      	ldrb	r3, [r3, #4]
 800e23e:	001a      	movs	r2, r3
 800e240:	4b83      	ldr	r3, [pc, #524]	; (800e450 <mix_sub_columns+0x3c4>)
 800e242:	5c9a      	ldrb	r2, [r3, r2]
 800e244:	183b      	adds	r3, r7, r0
 800e246:	7a5b      	ldrb	r3, [r3, #9]
 800e248:	0019      	movs	r1, r3
 800e24a:	4b82      	ldr	r3, [pc, #520]	; (800e454 <mix_sub_columns+0x3c8>)
 800e24c:	5c5b      	ldrb	r3, [r3, r1]
 800e24e:	4053      	eors	r3, r2
 800e250:	b2da      	uxtb	r2, r3
 800e252:	183b      	adds	r3, r7, r0
 800e254:	7b9b      	ldrb	r3, [r3, #14]
 800e256:	0019      	movs	r1, r3
 800e258:	4b7e      	ldr	r3, [pc, #504]	; (800e454 <mix_sub_columns+0x3c8>)
 800e25a:	5c5b      	ldrb	r3, [r3, r1]
 800e25c:	4053      	eors	r3, r2
 800e25e:	b2d9      	uxtb	r1, r3
 800e260:	183b      	adds	r3, r7, r0
 800e262:	78db      	ldrb	r3, [r3, #3]
 800e264:	001a      	movs	r2, r3
 800e266:	4b79      	ldr	r3, [pc, #484]	; (800e44c <mix_sub_columns+0x3c0>)
 800e268:	5c9a      	ldrb	r2, [r3, r2]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	3307      	adds	r3, #7
 800e26e:	404a      	eors	r2, r1
 800e270:	b2d2      	uxtb	r2, r2
 800e272:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e274:	183b      	adds	r3, r7, r0
 800e276:	7a1b      	ldrb	r3, [r3, #8]
 800e278:	001a      	movs	r2, r3
 800e27a:	4b74      	ldr	r3, [pc, #464]	; (800e44c <mix_sub_columns+0x3c0>)
 800e27c:	5c9a      	ldrb	r2, [r3, r2]
 800e27e:	183b      	adds	r3, r7, r0
 800e280:	7b5b      	ldrb	r3, [r3, #13]
 800e282:	0019      	movs	r1, r3
 800e284:	4b72      	ldr	r3, [pc, #456]	; (800e450 <mix_sub_columns+0x3c4>)
 800e286:	5c5b      	ldrb	r3, [r3, r1]
 800e288:	4053      	eors	r3, r2
 800e28a:	b2da      	uxtb	r2, r3
 800e28c:	183b      	adds	r3, r7, r0
 800e28e:	789b      	ldrb	r3, [r3, #2]
 800e290:	0019      	movs	r1, r3
 800e292:	4b70      	ldr	r3, [pc, #448]	; (800e454 <mix_sub_columns+0x3c8>)
 800e294:	5c5b      	ldrb	r3, [r3, r1]
 800e296:	4053      	eors	r3, r2
 800e298:	b2d9      	uxtb	r1, r3
 800e29a:	183b      	adds	r3, r7, r0
 800e29c:	79db      	ldrb	r3, [r3, #7]
 800e29e:	001a      	movs	r2, r3
 800e2a0:	4b6c      	ldr	r3, [pc, #432]	; (800e454 <mix_sub_columns+0x3c8>)
 800e2a2:	5c9a      	ldrb	r2, [r3, r2]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	3308      	adds	r3, #8
 800e2a8:	404a      	eors	r2, r1
 800e2aa:	b2d2      	uxtb	r2, r2
 800e2ac:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e2ae:	183b      	adds	r3, r7, r0
 800e2b0:	7a1b      	ldrb	r3, [r3, #8]
 800e2b2:	001a      	movs	r2, r3
 800e2b4:	4b67      	ldr	r3, [pc, #412]	; (800e454 <mix_sub_columns+0x3c8>)
 800e2b6:	5c9a      	ldrb	r2, [r3, r2]
 800e2b8:	183b      	adds	r3, r7, r0
 800e2ba:	7b5b      	ldrb	r3, [r3, #13]
 800e2bc:	0019      	movs	r1, r3
 800e2be:	4b63      	ldr	r3, [pc, #396]	; (800e44c <mix_sub_columns+0x3c0>)
 800e2c0:	5c5b      	ldrb	r3, [r3, r1]
 800e2c2:	4053      	eors	r3, r2
 800e2c4:	b2da      	uxtb	r2, r3
 800e2c6:	183b      	adds	r3, r7, r0
 800e2c8:	789b      	ldrb	r3, [r3, #2]
 800e2ca:	0019      	movs	r1, r3
 800e2cc:	4b60      	ldr	r3, [pc, #384]	; (800e450 <mix_sub_columns+0x3c4>)
 800e2ce:	5c5b      	ldrb	r3, [r3, r1]
 800e2d0:	4053      	eors	r3, r2
 800e2d2:	b2d9      	uxtb	r1, r3
 800e2d4:	183b      	adds	r3, r7, r0
 800e2d6:	79db      	ldrb	r3, [r3, #7]
 800e2d8:	001a      	movs	r2, r3
 800e2da:	4b5e      	ldr	r3, [pc, #376]	; (800e454 <mix_sub_columns+0x3c8>)
 800e2dc:	5c9a      	ldrb	r2, [r3, r2]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	3309      	adds	r3, #9
 800e2e2:	404a      	eors	r2, r1
 800e2e4:	b2d2      	uxtb	r2, r2
 800e2e6:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e2e8:	183b      	adds	r3, r7, r0
 800e2ea:	7a1b      	ldrb	r3, [r3, #8]
 800e2ec:	001a      	movs	r2, r3
 800e2ee:	4b59      	ldr	r3, [pc, #356]	; (800e454 <mix_sub_columns+0x3c8>)
 800e2f0:	5c9a      	ldrb	r2, [r3, r2]
 800e2f2:	183b      	adds	r3, r7, r0
 800e2f4:	7b5b      	ldrb	r3, [r3, #13]
 800e2f6:	0019      	movs	r1, r3
 800e2f8:	4b56      	ldr	r3, [pc, #344]	; (800e454 <mix_sub_columns+0x3c8>)
 800e2fa:	5c5b      	ldrb	r3, [r3, r1]
 800e2fc:	4053      	eors	r3, r2
 800e2fe:	b2da      	uxtb	r2, r3
 800e300:	183b      	adds	r3, r7, r0
 800e302:	789b      	ldrb	r3, [r3, #2]
 800e304:	0019      	movs	r1, r3
 800e306:	4b51      	ldr	r3, [pc, #324]	; (800e44c <mix_sub_columns+0x3c0>)
 800e308:	5c5b      	ldrb	r3, [r3, r1]
 800e30a:	4053      	eors	r3, r2
 800e30c:	b2d9      	uxtb	r1, r3
 800e30e:	183b      	adds	r3, r7, r0
 800e310:	79db      	ldrb	r3, [r3, #7]
 800e312:	001a      	movs	r2, r3
 800e314:	4b4e      	ldr	r3, [pc, #312]	; (800e450 <mix_sub_columns+0x3c4>)
 800e316:	5c9a      	ldrb	r2, [r3, r2]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	330a      	adds	r3, #10
 800e31c:	404a      	eors	r2, r1
 800e31e:	b2d2      	uxtb	r2, r2
 800e320:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e322:	183b      	adds	r3, r7, r0
 800e324:	7a1b      	ldrb	r3, [r3, #8]
 800e326:	001a      	movs	r2, r3
 800e328:	4b49      	ldr	r3, [pc, #292]	; (800e450 <mix_sub_columns+0x3c4>)
 800e32a:	5c9a      	ldrb	r2, [r3, r2]
 800e32c:	183b      	adds	r3, r7, r0
 800e32e:	7b5b      	ldrb	r3, [r3, #13]
 800e330:	0019      	movs	r1, r3
 800e332:	4b48      	ldr	r3, [pc, #288]	; (800e454 <mix_sub_columns+0x3c8>)
 800e334:	5c5b      	ldrb	r3, [r3, r1]
 800e336:	4053      	eors	r3, r2
 800e338:	b2da      	uxtb	r2, r3
 800e33a:	183b      	adds	r3, r7, r0
 800e33c:	789b      	ldrb	r3, [r3, #2]
 800e33e:	0019      	movs	r1, r3
 800e340:	4b44      	ldr	r3, [pc, #272]	; (800e454 <mix_sub_columns+0x3c8>)
 800e342:	5c5b      	ldrb	r3, [r3, r1]
 800e344:	4053      	eors	r3, r2
 800e346:	b2d9      	uxtb	r1, r3
 800e348:	183b      	adds	r3, r7, r0
 800e34a:	79db      	ldrb	r3, [r3, #7]
 800e34c:	001a      	movs	r2, r3
 800e34e:	4b3f      	ldr	r3, [pc, #252]	; (800e44c <mix_sub_columns+0x3c0>)
 800e350:	5c9a      	ldrb	r2, [r3, r2]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	330b      	adds	r3, #11
 800e356:	404a      	eors	r2, r1
 800e358:	b2d2      	uxtb	r2, r2
 800e35a:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e35c:	183b      	adds	r3, r7, r0
 800e35e:	7b1b      	ldrb	r3, [r3, #12]
 800e360:	001a      	movs	r2, r3
 800e362:	4b3a      	ldr	r3, [pc, #232]	; (800e44c <mix_sub_columns+0x3c0>)
 800e364:	5c9a      	ldrb	r2, [r3, r2]
 800e366:	183b      	adds	r3, r7, r0
 800e368:	785b      	ldrb	r3, [r3, #1]
 800e36a:	0019      	movs	r1, r3
 800e36c:	4b38      	ldr	r3, [pc, #224]	; (800e450 <mix_sub_columns+0x3c4>)
 800e36e:	5c5b      	ldrb	r3, [r3, r1]
 800e370:	4053      	eors	r3, r2
 800e372:	b2da      	uxtb	r2, r3
 800e374:	183b      	adds	r3, r7, r0
 800e376:	799b      	ldrb	r3, [r3, #6]
 800e378:	0019      	movs	r1, r3
 800e37a:	4b36      	ldr	r3, [pc, #216]	; (800e454 <mix_sub_columns+0x3c8>)
 800e37c:	5c5b      	ldrb	r3, [r3, r1]
 800e37e:	4053      	eors	r3, r2
 800e380:	b2d9      	uxtb	r1, r3
 800e382:	183b      	adds	r3, r7, r0
 800e384:	7adb      	ldrb	r3, [r3, #11]
 800e386:	001a      	movs	r2, r3
 800e388:	4b32      	ldr	r3, [pc, #200]	; (800e454 <mix_sub_columns+0x3c8>)
 800e38a:	5c9a      	ldrb	r2, [r3, r2]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	330c      	adds	r3, #12
 800e390:	404a      	eors	r2, r1
 800e392:	b2d2      	uxtb	r2, r2
 800e394:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e396:	183b      	adds	r3, r7, r0
 800e398:	7b1b      	ldrb	r3, [r3, #12]
 800e39a:	001a      	movs	r2, r3
 800e39c:	4b2d      	ldr	r3, [pc, #180]	; (800e454 <mix_sub_columns+0x3c8>)
 800e39e:	5c9a      	ldrb	r2, [r3, r2]
 800e3a0:	183b      	adds	r3, r7, r0
 800e3a2:	785b      	ldrb	r3, [r3, #1]
 800e3a4:	0019      	movs	r1, r3
 800e3a6:	4b29      	ldr	r3, [pc, #164]	; (800e44c <mix_sub_columns+0x3c0>)
 800e3a8:	5c5b      	ldrb	r3, [r3, r1]
 800e3aa:	4053      	eors	r3, r2
 800e3ac:	b2da      	uxtb	r2, r3
 800e3ae:	183b      	adds	r3, r7, r0
 800e3b0:	799b      	ldrb	r3, [r3, #6]
 800e3b2:	0019      	movs	r1, r3
 800e3b4:	4b26      	ldr	r3, [pc, #152]	; (800e450 <mix_sub_columns+0x3c4>)
 800e3b6:	5c5b      	ldrb	r3, [r3, r1]
 800e3b8:	4053      	eors	r3, r2
 800e3ba:	b2d9      	uxtb	r1, r3
 800e3bc:	183b      	adds	r3, r7, r0
 800e3be:	7adb      	ldrb	r3, [r3, #11]
 800e3c0:	001a      	movs	r2, r3
 800e3c2:	4b24      	ldr	r3, [pc, #144]	; (800e454 <mix_sub_columns+0x3c8>)
 800e3c4:	5c9a      	ldrb	r2, [r3, r2]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	330d      	adds	r3, #13
 800e3ca:	404a      	eors	r2, r1
 800e3cc:	b2d2      	uxtb	r2, r2
 800e3ce:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e3d0:	183b      	adds	r3, r7, r0
 800e3d2:	7b1b      	ldrb	r3, [r3, #12]
 800e3d4:	001a      	movs	r2, r3
 800e3d6:	4b1f      	ldr	r3, [pc, #124]	; (800e454 <mix_sub_columns+0x3c8>)
 800e3d8:	5c9a      	ldrb	r2, [r3, r2]
 800e3da:	183b      	adds	r3, r7, r0
 800e3dc:	785b      	ldrb	r3, [r3, #1]
 800e3de:	0019      	movs	r1, r3
 800e3e0:	4b1c      	ldr	r3, [pc, #112]	; (800e454 <mix_sub_columns+0x3c8>)
 800e3e2:	5c5b      	ldrb	r3, [r3, r1]
 800e3e4:	4053      	eors	r3, r2
 800e3e6:	b2da      	uxtb	r2, r3
 800e3e8:	183b      	adds	r3, r7, r0
 800e3ea:	799b      	ldrb	r3, [r3, #6]
 800e3ec:	0019      	movs	r1, r3
 800e3ee:	4b17      	ldr	r3, [pc, #92]	; (800e44c <mix_sub_columns+0x3c0>)
 800e3f0:	5c5b      	ldrb	r3, [r3, r1]
 800e3f2:	4053      	eors	r3, r2
 800e3f4:	b2d9      	uxtb	r1, r3
 800e3f6:	183b      	adds	r3, r7, r0
 800e3f8:	7adb      	ldrb	r3, [r3, #11]
 800e3fa:	001a      	movs	r2, r3
 800e3fc:	4b14      	ldr	r3, [pc, #80]	; (800e450 <mix_sub_columns+0x3c4>)
 800e3fe:	5c9a      	ldrb	r2, [r3, r2]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	330e      	adds	r3, #14
 800e404:	404a      	eors	r2, r1
 800e406:	b2d2      	uxtb	r2, r2
 800e408:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e40a:	183b      	adds	r3, r7, r0
 800e40c:	7b1b      	ldrb	r3, [r3, #12]
 800e40e:	001a      	movs	r2, r3
 800e410:	4b0f      	ldr	r3, [pc, #60]	; (800e450 <mix_sub_columns+0x3c4>)
 800e412:	5c9a      	ldrb	r2, [r3, r2]
 800e414:	183b      	adds	r3, r7, r0
 800e416:	785b      	ldrb	r3, [r3, #1]
 800e418:	0019      	movs	r1, r3
 800e41a:	4b0e      	ldr	r3, [pc, #56]	; (800e454 <mix_sub_columns+0x3c8>)
 800e41c:	5c5b      	ldrb	r3, [r3, r1]
 800e41e:	4053      	eors	r3, r2
 800e420:	b2da      	uxtb	r2, r3
 800e422:	183b      	adds	r3, r7, r0
 800e424:	799b      	ldrb	r3, [r3, #6]
 800e426:	0019      	movs	r1, r3
 800e428:	4b0a      	ldr	r3, [pc, #40]	; (800e454 <mix_sub_columns+0x3c8>)
 800e42a:	5c5b      	ldrb	r3, [r3, r1]
 800e42c:	4053      	eors	r3, r2
 800e42e:	b2d9      	uxtb	r1, r3
 800e430:	183b      	adds	r3, r7, r0
 800e432:	7adb      	ldrb	r3, [r3, #11]
 800e434:	001a      	movs	r2, r3
 800e436:	4b05      	ldr	r3, [pc, #20]	; (800e44c <mix_sub_columns+0x3c0>)
 800e438:	5c9a      	ldrb	r2, [r3, r2]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	330f      	adds	r3, #15
 800e43e:	404a      	eors	r2, r1
 800e440:	b2d2      	uxtb	r2, r2
 800e442:	701a      	strb	r2, [r3, #0]
  }
 800e444:	46c0      	nop			; (mov r8, r8)
 800e446:	46bd      	mov	sp, r7
 800e448:	b007      	add	sp, #28
 800e44a:	bd90      	pop	{r4, r7, pc}
 800e44c:	0801cdc8 	.word	0x0801cdc8
 800e450:	0801cec8 	.word	0x0801cec8
 800e454:	0801ccc8 	.word	0x0801ccc8

0800e458 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 800e458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e45a:	b087      	sub	sp, #28
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	607a      	str	r2, [r7, #4]
 800e462:	200b      	movs	r0, #11
 800e464:	183b      	adds	r3, r7, r0
 800e466:	1c0a      	adds	r2, r1, #0
 800e468:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800e46a:	183b      	adds	r3, r7, r0
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	2b18      	cmp	r3, #24
 800e470:	d009      	beq.n	800e486 <aes_set_key+0x2e>
 800e472:	2b20      	cmp	r3, #32
 800e474:	d007      	beq.n	800e486 <aes_set_key+0x2e>
 800e476:	2b10      	cmp	r3, #16
 800e478:	d005      	beq.n	800e486 <aes_set_key+0x2e>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	22f0      	movs	r2, #240	; 0xf0
 800e47e:	2100      	movs	r1, #0
 800e480:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 800e482:	23ff      	movs	r3, #255	; 0xff
 800e484:	e113      	b.n	800e6ae <aes_set_key+0x256>
        break;
 800e486:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	240b      	movs	r4, #11
 800e48c:	193b      	adds	r3, r7, r4
 800e48e:	781a      	ldrb	r2, [r3, #0]
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	0019      	movs	r1, r3
 800e494:	f7ff fbc1 	bl	800dc1a <copy_block_nn>
    hi = (keylen + 28) << 2;
 800e498:	0020      	movs	r0, r4
 800e49a:	183b      	adds	r3, r7, r0
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	331c      	adds	r3, #28
 800e4a0:	b2da      	uxtb	r2, r3
 800e4a2:	2111      	movs	r1, #17
 800e4a4:	187b      	adds	r3, r7, r1
 800e4a6:	0092      	lsls	r2, r2, #2
 800e4a8:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800e4aa:	187b      	adds	r3, r7, r1
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	091b      	lsrs	r3, r3, #4
 800e4b0:	b2db      	uxtb	r3, r3
 800e4b2:	3b01      	subs	r3, #1
 800e4b4:	b2d9      	uxtb	r1, r3
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	22f0      	movs	r2, #240	; 0xf0
 800e4ba:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e4bc:	2317      	movs	r3, #23
 800e4be:	18fb      	adds	r3, r7, r3
 800e4c0:	183a      	adds	r2, r7, r0
 800e4c2:	7812      	ldrb	r2, [r2, #0]
 800e4c4:	701a      	strb	r2, [r3, #0]
 800e4c6:	2316      	movs	r3, #22
 800e4c8:	18fb      	adds	r3, r7, r3
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	701a      	strb	r2, [r3, #0]
 800e4ce:	e0e4      	b.n	800e69a <aes_set_key+0x242>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800e4d0:	2017      	movs	r0, #23
 800e4d2:	183b      	adds	r3, r7, r0
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	1f1a      	subs	r2, r3, #4
 800e4d8:	2315      	movs	r3, #21
 800e4da:	18fb      	adds	r3, r7, r3
 800e4dc:	6879      	ldr	r1, [r7, #4]
 800e4de:	5c8a      	ldrb	r2, [r1, r2]
 800e4e0:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 800e4e2:	183b      	adds	r3, r7, r0
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	1eda      	subs	r2, r3, #3
 800e4e8:	2314      	movs	r3, #20
 800e4ea:	18fb      	adds	r3, r7, r3
 800e4ec:	6879      	ldr	r1, [r7, #4]
 800e4ee:	5c8a      	ldrb	r2, [r1, r2]
 800e4f0:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800e4f2:	183b      	adds	r3, r7, r0
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	1e9a      	subs	r2, r3, #2
 800e4f8:	2313      	movs	r3, #19
 800e4fa:	18fb      	adds	r3, r7, r3
 800e4fc:	6879      	ldr	r1, [r7, #4]
 800e4fe:	5c8a      	ldrb	r2, [r1, r2]
 800e500:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 800e502:	183b      	adds	r3, r7, r0
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	1e5a      	subs	r2, r3, #1
 800e508:	2312      	movs	r3, #18
 800e50a:	18fb      	adds	r3, r7, r3
 800e50c:	6879      	ldr	r1, [r7, #4]
 800e50e:	5c8a      	ldrb	r2, [r1, r2]
 800e510:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 800e512:	183a      	adds	r2, r7, r0
 800e514:	230b      	movs	r3, #11
 800e516:	18fb      	adds	r3, r7, r3
 800e518:	7812      	ldrb	r2, [r2, #0]
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	0019      	movs	r1, r3
 800e51e:	0010      	movs	r0, r2
 800e520:	f7f1 fe78 	bl	8000214 <__aeabi_uidivmod>
 800e524:	000b      	movs	r3, r1
 800e526:	b2db      	uxtb	r3, r3
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d13e      	bne.n	800e5aa <aes_set_key+0x152>
        {
            tt = t0;
 800e52c:	2410      	movs	r4, #16
 800e52e:	193b      	adds	r3, r7, r4
 800e530:	2015      	movs	r0, #21
 800e532:	183a      	adds	r2, r7, r0
 800e534:	7812      	ldrb	r2, [r2, #0]
 800e536:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 800e538:	2514      	movs	r5, #20
 800e53a:	197b      	adds	r3, r7, r5
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	4a5e      	ldr	r2, [pc, #376]	; (800e6b8 <aes_set_key+0x260>)
 800e540:	5cd1      	ldrb	r1, [r2, r3]
 800e542:	183b      	adds	r3, r7, r0
 800e544:	2016      	movs	r0, #22
 800e546:	183a      	adds	r2, r7, r0
 800e548:	7812      	ldrb	r2, [r2, #0]
 800e54a:	404a      	eors	r2, r1
 800e54c:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800e54e:	2613      	movs	r6, #19
 800e550:	19bb      	adds	r3, r7, r6
 800e552:	781a      	ldrb	r2, [r3, #0]
 800e554:	197b      	adds	r3, r7, r5
 800e556:	4958      	ldr	r1, [pc, #352]	; (800e6b8 <aes_set_key+0x260>)
 800e558:	5c8a      	ldrb	r2, [r1, r2]
 800e55a:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 800e55c:	2512      	movs	r5, #18
 800e55e:	197b      	adds	r3, r7, r5
 800e560:	781a      	ldrb	r2, [r3, #0]
 800e562:	19bb      	adds	r3, r7, r6
 800e564:	4954      	ldr	r1, [pc, #336]	; (800e6b8 <aes_set_key+0x260>)
 800e566:	5c8a      	ldrb	r2, [r1, r2]
 800e568:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800e56a:	193b      	adds	r3, r7, r4
 800e56c:	781a      	ldrb	r2, [r3, #0]
 800e56e:	197b      	adds	r3, r7, r5
 800e570:	4951      	ldr	r1, [pc, #324]	; (800e6b8 <aes_set_key+0x260>)
 800e572:	5c8a      	ldrb	r2, [r1, r2]
 800e574:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 800e576:	183b      	adds	r3, r7, r0
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	005b      	lsls	r3, r3, #1
 800e57c:	b25a      	sxtb	r2, r3
 800e57e:	0004      	movs	r4, r0
 800e580:	183b      	adds	r3, r7, r0
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	09db      	lsrs	r3, r3, #7
 800e586:	b2db      	uxtb	r3, r3
 800e588:	1c19      	adds	r1, r3, #0
 800e58a:	1c0b      	adds	r3, r1, #0
 800e58c:	18db      	adds	r3, r3, r3
 800e58e:	185b      	adds	r3, r3, r1
 800e590:	1c19      	adds	r1, r3, #0
 800e592:	00c8      	lsls	r0, r1, #3
 800e594:	1c19      	adds	r1, r3, #0
 800e596:	1c03      	adds	r3, r0, #0
 800e598:	18cb      	adds	r3, r1, r3
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	b25b      	sxtb	r3, r3
 800e59e:	4053      	eors	r3, r2
 800e5a0:	b25a      	sxtb	r2, r3
 800e5a2:	0020      	movs	r0, r4
 800e5a4:	183b      	adds	r3, r7, r0
 800e5a6:	701a      	strb	r2, [r3, #0]
 800e5a8:	e02e      	b.n	800e608 <aes_set_key+0x1b0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800e5aa:	230b      	movs	r3, #11
 800e5ac:	18fb      	adds	r3, r7, r3
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	2b18      	cmp	r3, #24
 800e5b2:	d929      	bls.n	800e608 <aes_set_key+0x1b0>
 800e5b4:	2317      	movs	r3, #23
 800e5b6:	18fa      	adds	r2, r7, r3
 800e5b8:	230b      	movs	r3, #11
 800e5ba:	18fb      	adds	r3, r7, r3
 800e5bc:	7812      	ldrb	r2, [r2, #0]
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	0019      	movs	r1, r3
 800e5c2:	0010      	movs	r0, r2
 800e5c4:	f7f1 fe26 	bl	8000214 <__aeabi_uidivmod>
 800e5c8:	000b      	movs	r3, r1
 800e5ca:	b2db      	uxtb	r3, r3
 800e5cc:	2b10      	cmp	r3, #16
 800e5ce:	d11b      	bne.n	800e608 <aes_set_key+0x1b0>
        {
            t0 = s_box(t0);
 800e5d0:	2115      	movs	r1, #21
 800e5d2:	187b      	adds	r3, r7, r1
 800e5d4:	781a      	ldrb	r2, [r3, #0]
 800e5d6:	187b      	adds	r3, r7, r1
 800e5d8:	4937      	ldr	r1, [pc, #220]	; (800e6b8 <aes_set_key+0x260>)
 800e5da:	5c8a      	ldrb	r2, [r1, r2]
 800e5dc:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 800e5de:	2114      	movs	r1, #20
 800e5e0:	187b      	adds	r3, r7, r1
 800e5e2:	781a      	ldrb	r2, [r3, #0]
 800e5e4:	187b      	adds	r3, r7, r1
 800e5e6:	4934      	ldr	r1, [pc, #208]	; (800e6b8 <aes_set_key+0x260>)
 800e5e8:	5c8a      	ldrb	r2, [r1, r2]
 800e5ea:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 800e5ec:	2113      	movs	r1, #19
 800e5ee:	187b      	adds	r3, r7, r1
 800e5f0:	781a      	ldrb	r2, [r3, #0]
 800e5f2:	187b      	adds	r3, r7, r1
 800e5f4:	4930      	ldr	r1, [pc, #192]	; (800e6b8 <aes_set_key+0x260>)
 800e5f6:	5c8a      	ldrb	r2, [r1, r2]
 800e5f8:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 800e5fa:	2112      	movs	r1, #18
 800e5fc:	187b      	adds	r3, r7, r1
 800e5fe:	781a      	ldrb	r2, [r3, #0]
 800e600:	187b      	adds	r3, r7, r1
 800e602:	492d      	ldr	r1, [pc, #180]	; (800e6b8 <aes_set_key+0x260>)
 800e604:	5c8a      	ldrb	r2, [r1, r2]
 800e606:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 800e608:	2410      	movs	r4, #16
 800e60a:	193b      	adds	r3, r7, r4
 800e60c:	2017      	movs	r0, #23
 800e60e:	1839      	adds	r1, r7, r0
 800e610:	220b      	movs	r2, #11
 800e612:	18ba      	adds	r2, r7, r2
 800e614:	7809      	ldrb	r1, [r1, #0]
 800e616:	7812      	ldrb	r2, [r2, #0]
 800e618:	1a8a      	subs	r2, r1, r2
 800e61a:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800e61c:	193b      	adds	r3, r7, r4
 800e61e:	781b      	ldrb	r3, [r3, #0]
 800e620:	687a      	ldr	r2, [r7, #4]
 800e622:	5cd1      	ldrb	r1, [r2, r3]
 800e624:	183b      	adds	r3, r7, r0
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	2215      	movs	r2, #21
 800e62a:	18ba      	adds	r2, r7, r2
 800e62c:	7812      	ldrb	r2, [r2, #0]
 800e62e:	404a      	eors	r2, r1
 800e630:	b2d1      	uxtb	r1, r2
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800e636:	193b      	adds	r3, r7, r4
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	3301      	adds	r3, #1
 800e63c:	687a      	ldr	r2, [r7, #4]
 800e63e:	5cd1      	ldrb	r1, [r2, r3]
 800e640:	183b      	adds	r3, r7, r0
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	3301      	adds	r3, #1
 800e646:	2214      	movs	r2, #20
 800e648:	18ba      	adds	r2, r7, r2
 800e64a:	7812      	ldrb	r2, [r2, #0]
 800e64c:	404a      	eors	r2, r1
 800e64e:	b2d1      	uxtb	r1, r2
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800e654:	193b      	adds	r3, r7, r4
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	3302      	adds	r3, #2
 800e65a:	687a      	ldr	r2, [r7, #4]
 800e65c:	5cd1      	ldrb	r1, [r2, r3]
 800e65e:	183b      	adds	r3, r7, r0
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	3302      	adds	r3, #2
 800e664:	2213      	movs	r2, #19
 800e666:	18ba      	adds	r2, r7, r2
 800e668:	7812      	ldrb	r2, [r2, #0]
 800e66a:	404a      	eors	r2, r1
 800e66c:	b2d1      	uxtb	r1, r2
 800e66e:	687a      	ldr	r2, [r7, #4]
 800e670:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800e672:	193b      	adds	r3, r7, r4
 800e674:	781b      	ldrb	r3, [r3, #0]
 800e676:	3303      	adds	r3, #3
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	5cd1      	ldrb	r1, [r2, r3]
 800e67c:	183b      	adds	r3, r7, r0
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	3303      	adds	r3, #3
 800e682:	2212      	movs	r2, #18
 800e684:	18ba      	adds	r2, r7, r2
 800e686:	7812      	ldrb	r2, [r2, #0]
 800e688:	404a      	eors	r2, r1
 800e68a:	b2d1      	uxtb	r1, r2
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e690:	183b      	adds	r3, r7, r0
 800e692:	183a      	adds	r2, r7, r0
 800e694:	7812      	ldrb	r2, [r2, #0]
 800e696:	3204      	adds	r2, #4
 800e698:	701a      	strb	r2, [r3, #0]
 800e69a:	2317      	movs	r3, #23
 800e69c:	18fa      	adds	r2, r7, r3
 800e69e:	2311      	movs	r3, #17
 800e6a0:	18fb      	adds	r3, r7, r3
 800e6a2:	7812      	ldrb	r2, [r2, #0]
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d200      	bcs.n	800e6ac <aes_set_key+0x254>
 800e6aa:	e711      	b.n	800e4d0 <aes_set_key+0x78>
    }
    return 0;
 800e6ac:	2300      	movs	r3, #0
}
 800e6ae:	0018      	movs	r0, r3
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	b007      	add	sp, #28
 800e6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6b6:	46c0      	nop			; (mov r8, r8)
 800e6b8:	0801ccc8 	.word	0x0801ccc8

0800e6bc <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 800e6bc:	b5b0      	push	{r4, r5, r7, lr}
 800e6be:	b08a      	sub	sp, #40	; 0x28
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	22f0      	movs	r2, #240	; 0xf0
 800e6cc:	5c9b      	ldrb	r3, [r3, r2]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d03a      	beq.n	800e748 <aes_encrypt+0x8c>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	68f9      	ldr	r1, [r7, #12]
 800e6d6:	2314      	movs	r3, #20
 800e6d8:	18fb      	adds	r3, r7, r3
 800e6da:	0018      	movs	r0, r3
 800e6dc:	f7ff fb6e 	bl	800ddbc <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800e6e0:	2327      	movs	r3, #39	; 0x27
 800e6e2:	18fb      	adds	r3, r7, r3
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	701a      	strb	r2, [r3, #0]
 800e6e8:	e014      	b.n	800e714 <aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800e6ea:	2514      	movs	r5, #20
 800e6ec:	197b      	adds	r3, r7, r5
 800e6ee:	0018      	movs	r0, r3
 800e6f0:	f7ff fccc 	bl	800e08c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2427      	movs	r4, #39	; 0x27
 800e6f8:	193a      	adds	r2, r7, r4
 800e6fa:	7812      	ldrb	r2, [r2, #0]
 800e6fc:	0112      	lsls	r2, r2, #4
 800e6fe:	189a      	adds	r2, r3, r2
 800e700:	197b      	adds	r3, r7, r5
 800e702:	0011      	movs	r1, r2
 800e704:	0018      	movs	r0, r3
 800e706:	f7ff fc10 	bl	800df2a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800e70a:	193b      	adds	r3, r7, r4
 800e70c:	193a      	adds	r2, r7, r4
 800e70e:	7812      	ldrb	r2, [r2, #0]
 800e710:	3201      	adds	r2, #1
 800e712:	701a      	strb	r2, [r3, #0]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	22f0      	movs	r2, #240	; 0xf0
 800e718:	5c9b      	ldrb	r3, [r3, r2]
 800e71a:	2227      	movs	r2, #39	; 0x27
 800e71c:	18ba      	adds	r2, r7, r2
 800e71e:	7812      	ldrb	r2, [r2, #0]
 800e720:	429a      	cmp	r2, r3
 800e722:	d3e2      	bcc.n	800e6ea <aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800e724:	2414      	movs	r4, #20
 800e726:	193b      	adds	r3, r7, r4
 800e728:	0018      	movs	r0, r3
 800e72a:	f7ff fc0d 	bl	800df48 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2227      	movs	r2, #39	; 0x27
 800e732:	18ba      	adds	r2, r7, r2
 800e734:	7812      	ldrb	r2, [r2, #0]
 800e736:	0112      	lsls	r2, r2, #4
 800e738:	189a      	adds	r2, r3, r2
 800e73a:	1939      	adds	r1, r7, r4
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	0018      	movs	r0, r3
 800e740:	f7ff fb3c 	bl	800ddbc <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800e744:	2300      	movs	r3, #0
 800e746:	e000      	b.n	800e74a <aes_encrypt+0x8e>
        return ( uint8_t )-1;
 800e748:	23ff      	movs	r3, #255	; 0xff
}
 800e74a:	0018      	movs	r0, r3
 800e74c:	46bd      	mov	sp, r7
 800e74e:	b00a      	add	sp, #40	; 0x28
 800e750:	bdb0      	pop	{r4, r5, r7, pc}

0800e752 <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 800e752:	b580      	push	{r7, lr}
 800e754:	b082      	sub	sp, #8
 800e756:	af00      	add	r7, sp, #0
 800e758:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	33f1      	adds	r3, #241	; 0xf1
 800e75e:	2210      	movs	r2, #16
 800e760:	2100      	movs	r1, #0
 800e762:	0018      	movs	r0, r3
 800e764:	f00c ffa0 	bl	801b6a8 <memset1>
            ctx->M_n = 0;
 800e768:	687a      	ldr	r2, [r7, #4]
 800e76a:	238a      	movs	r3, #138	; 0x8a
 800e76c:	005b      	lsls	r3, r3, #1
 800e76e:	2100      	movs	r1, #0
 800e770:	50d1      	str	r1, [r2, r3]
        memset1(ctx->rijndael.ksch, '\0', 240);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	22f0      	movs	r2, #240	; 0xf0
 800e776:	2100      	movs	r1, #0
 800e778:	0018      	movs	r0, r3
 800e77a:	f00c ff95 	bl	801b6a8 <memset1>
}
 800e77e:	46c0      	nop			; (mov r8, r8)
 800e780:	46bd      	mov	sp, r7
 800e782:	b002      	add	sp, #8
 800e784:	bd80      	pop	{r7, pc}

0800e786 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 800e786:	b580      	push	{r7, lr}
 800e788:	b082      	sub	sp, #8
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	6078      	str	r0, [r7, #4]
 800e78e:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	2110      	movs	r1, #16
 800e796:	0018      	movs	r0, r3
 800e798:	f7ff fe5e 	bl	800e458 <aes_set_key>
}
 800e79c:	46c0      	nop			; (mov r8, r8)
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	b002      	add	sp, #8
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 800e7a4:	b590      	push	{r4, r7, lr}
 800e7a6:	b08d      	sub	sp, #52	; 0x34
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 800e7b0:	68fa      	ldr	r2, [r7, #12]
 800e7b2:	238a      	movs	r3, #138	; 0x8a
 800e7b4:	005b      	lsls	r3, r3, #1
 800e7b6:	58d3      	ldr	r3, [r2, r3]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d100      	bne.n	800e7be <AES_CMAC_Update+0x1a>
 800e7bc:	e097      	b.n	800e8ee <AES_CMAC_Update+0x14a>
                  mlen = MIN(16 - ctx->M_n, len);
 800e7be:	68fa      	ldr	r2, [r7, #12]
 800e7c0:	238a      	movs	r3, #138	; 0x8a
 800e7c2:	005b      	lsls	r3, r3, #1
 800e7c4:	58d3      	ldr	r3, [r2, r3]
 800e7c6:	2210      	movs	r2, #16
 800e7c8:	1ad2      	subs	r2, r2, r3
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d900      	bls.n	800e7d2 <AES_CMAC_Update+0x2e>
 800e7d0:	0013      	movs	r3, r2
 800e7d2:	627b      	str	r3, [r7, #36]	; 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	1c9a      	adds	r2, r3, #2
 800e7d8:	32ff      	adds	r2, #255	; 0xff
 800e7da:	68f9      	ldr	r1, [r7, #12]
 800e7dc:	238a      	movs	r3, #138	; 0x8a
 800e7de:	005b      	lsls	r3, r3, #1
 800e7e0:	58cb      	ldr	r3, [r1, r3]
 800e7e2:	18d3      	adds	r3, r2, r3
 800e7e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7e6:	b292      	uxth	r2, r2
 800e7e8:	68b9      	ldr	r1, [r7, #8]
 800e7ea:	0018      	movs	r0, r3
 800e7ec:	f00c ff20 	bl	801b630 <memcpy1>
                    ctx->M_n += mlen;
 800e7f0:	68fa      	ldr	r2, [r7, #12]
 800e7f2:	238a      	movs	r3, #138	; 0x8a
 800e7f4:	005b      	lsls	r3, r3, #1
 800e7f6:	58d2      	ldr	r2, [r2, r3]
 800e7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fa:	18d1      	adds	r1, r2, r3
 800e7fc:	68fa      	ldr	r2, [r7, #12]
 800e7fe:	238a      	movs	r3, #138	; 0x8a
 800e800:	005b      	lsls	r3, r3, #1
 800e802:	50d1      	str	r1, [r2, r3]
                    if (ctx->M_n < 16 || len == mlen)
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	238a      	movs	r3, #138	; 0x8a
 800e808:	005b      	lsls	r3, r3, #1
 800e80a:	58d3      	ldr	r3, [r2, r3]
 800e80c:	2b0f      	cmp	r3, #15
 800e80e:	d800      	bhi.n	800e812 <AES_CMAC_Update+0x6e>
 800e810:	e07f      	b.n	800e912 <AES_CMAC_Update+0x16e>
 800e812:	687a      	ldr	r2, [r7, #4]
 800e814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e816:	429a      	cmp	r2, r3
 800e818:	d100      	bne.n	800e81c <AES_CMAC_Update+0x78>
 800e81a:	e07a      	b.n	800e912 <AES_CMAC_Update+0x16e>
                            return;
                   XOR(ctx->M_last, ctx->X);
 800e81c:	2300      	movs	r3, #0
 800e81e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e820:	e018      	b.n	800e854 <AES_CMAC_Update+0xb0>
 800e822:	68fa      	ldr	r2, [r7, #12]
 800e824:	21f1      	movs	r1, #241	; 0xf1
 800e826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e828:	18d3      	adds	r3, r2, r3
 800e82a:	185b      	adds	r3, r3, r1
 800e82c:	781a      	ldrb	r2, [r3, #0]
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	2302      	movs	r3, #2
 800e832:	33ff      	adds	r3, #255	; 0xff
 800e834:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e836:	1841      	adds	r1, r0, r1
 800e838:	18cb      	adds	r3, r1, r3
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	4053      	eors	r3, r2
 800e83e:	b2d8      	uxtb	r0, r3
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	21f1      	movs	r1, #241	; 0xf1
 800e844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e846:	18d3      	adds	r3, r2, r3
 800e848:	185b      	adds	r3, r3, r1
 800e84a:	1c02      	adds	r2, r0, #0
 800e84c:	701a      	strb	r2, [r3, #0]
 800e84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e850:	3301      	adds	r3, #1
 800e852:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e856:	2b0f      	cmp	r3, #15
 800e858:	dde3      	ble.n	800e822 <AES_CMAC_Update+0x7e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	33f1      	adds	r3, #241	; 0xf1
 800e85e:	0018      	movs	r0, r3
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	33f1      	adds	r3, #241	; 0xf1
 800e864:	68fa      	ldr	r2, [r7, #12]
 800e866:	0019      	movs	r1, r3
 800e868:	f7ff ff28 	bl	800e6bc <aes_encrypt>
                    data += mlen;
 800e86c:	68ba      	ldr	r2, [r7, #8]
 800e86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e870:	18d3      	adds	r3, r2, r3
 800e872:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e878:	1ad3      	subs	r3, r2, r3
 800e87a:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
 800e87c:	e037      	b.n	800e8ee <AES_CMAC_Update+0x14a>

                    XOR(data, ctx->X);
 800e87e:	2300      	movs	r3, #0
 800e880:	62bb      	str	r3, [r7, #40]	; 0x28
 800e882:	e015      	b.n	800e8b0 <AES_CMAC_Update+0x10c>
 800e884:	68fa      	ldr	r2, [r7, #12]
 800e886:	21f1      	movs	r1, #241	; 0xf1
 800e888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88a:	18d3      	adds	r3, r2, r3
 800e88c:	185b      	adds	r3, r3, r1
 800e88e:	781a      	ldrb	r2, [r3, #0]
 800e890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e892:	68b9      	ldr	r1, [r7, #8]
 800e894:	18cb      	adds	r3, r1, r3
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	4053      	eors	r3, r2
 800e89a:	b2d8      	uxtb	r0, r3
 800e89c:	68fa      	ldr	r2, [r7, #12]
 800e89e:	21f1      	movs	r1, #241	; 0xf1
 800e8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a2:	18d3      	adds	r3, r2, r3
 800e8a4:	185b      	adds	r3, r3, r1
 800e8a6:	1c02      	adds	r2, r0, #0
 800e8a8:	701a      	strb	r2, [r3, #0]
 800e8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b2:	2b0f      	cmp	r3, #15
 800e8b4:	dde6      	ble.n	800e884 <AES_CMAC_Update+0xe0>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	33f1      	adds	r3, #241	; 0xf1
 800e8ba:	0019      	movs	r1, r3
 800e8bc:	2414      	movs	r4, #20
 800e8be:	193b      	adds	r3, r7, r4
 800e8c0:	2210      	movs	r2, #16
 800e8c2:	0018      	movs	r0, r3
 800e8c4:	f00c feb4 	bl	801b630 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 800e8c8:	68fa      	ldr	r2, [r7, #12]
 800e8ca:	1939      	adds	r1, r7, r4
 800e8cc:	193b      	adds	r3, r7, r4
 800e8ce:	0018      	movs	r0, r3
 800e8d0:	f7ff fef4 	bl	800e6bc <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	33f1      	adds	r3, #241	; 0xf1
 800e8d8:	1939      	adds	r1, r7, r4
 800e8da:	2210      	movs	r2, #16
 800e8dc:	0018      	movs	r0, r3
 800e8de:	f00c fea7 	bl	801b630 <memcpy1>

                    data += 16;
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	3310      	adds	r3, #16
 800e8e6:	60bb      	str	r3, [r7, #8]
                    len -= 16;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	3b10      	subs	r3, #16
 800e8ec:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2b10      	cmp	r3, #16
 800e8f2:	d8c4      	bhi.n	800e87e <AES_CMAC_Update+0xda>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	3302      	adds	r3, #2
 800e8f8:	33ff      	adds	r3, #255	; 0xff
 800e8fa:	687a      	ldr	r2, [r7, #4]
 800e8fc:	b292      	uxth	r2, r2
 800e8fe:	68b9      	ldr	r1, [r7, #8]
 800e900:	0018      	movs	r0, r3
 800e902:	f00c fe95 	bl	801b630 <memcpy1>
            ctx->M_n = len;
 800e906:	68fa      	ldr	r2, [r7, #12]
 800e908:	238a      	movs	r3, #138	; 0x8a
 800e90a:	005b      	lsls	r3, r3, #1
 800e90c:	6879      	ldr	r1, [r7, #4]
 800e90e:	50d1      	str	r1, [r2, r3]
 800e910:	e000      	b.n	800e914 <AES_CMAC_Update+0x170>
                            return;
 800e912:	46c0      	nop			; (mov r8, r8)
}
 800e914:	46bd      	mov	sp, r7
 800e916:	b00d      	add	sp, #52	; 0x34
 800e918:	bd90      	pop	{r4, r7, pc}

0800e91a <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 800e91a:	b590      	push	{r4, r7, lr}
 800e91c:	b093      	sub	sp, #76	; 0x4c
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
 800e922:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 800e924:	241c      	movs	r4, #28
 800e926:	193b      	adds	r3, r7, r4
 800e928:	2210      	movs	r2, #16
 800e92a:	2100      	movs	r1, #0
 800e92c:	0018      	movs	r0, r3
 800e92e:	f00c febb 	bl	801b6a8 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 800e932:	683a      	ldr	r2, [r7, #0]
 800e934:	1939      	adds	r1, r7, r4
 800e936:	193b      	adds	r3, r7, r4
 800e938:	0018      	movs	r0, r3
 800e93a:	f7ff febf 	bl	800e6bc <aes_encrypt>

            if (K[0] & 0x80) {
 800e93e:	193b      	adds	r3, r7, r4
 800e940:	781b      	ldrb	r3, [r3, #0]
 800e942:	b25b      	sxtb	r3, r3
 800e944:	2b00      	cmp	r3, #0
 800e946:	da2e      	bge.n	800e9a6 <AES_CMAC_Final+0x8c>
                    LSHIFT(K, K);
 800e948:	2300      	movs	r3, #0
 800e94a:	647b      	str	r3, [r7, #68]	; 0x44
 800e94c:	e018      	b.n	800e980 <AES_CMAC_Final+0x66>
 800e94e:	201c      	movs	r0, #28
 800e950:	183a      	adds	r2, r7, r0
 800e952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e954:	18d3      	adds	r3, r2, r3
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	005b      	lsls	r3, r3, #1
 800e95a:	b25a      	sxtb	r2, r3
 800e95c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e95e:	3301      	adds	r3, #1
 800e960:	1839      	adds	r1, r7, r0
 800e962:	5ccb      	ldrb	r3, [r1, r3]
 800e964:	09db      	lsrs	r3, r3, #7
 800e966:	b2db      	uxtb	r3, r3
 800e968:	b25b      	sxtb	r3, r3
 800e96a:	4313      	orrs	r3, r2
 800e96c:	b25b      	sxtb	r3, r3
 800e96e:	b2d9      	uxtb	r1, r3
 800e970:	183a      	adds	r2, r7, r0
 800e972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e974:	18d3      	adds	r3, r2, r3
 800e976:	1c0a      	adds	r2, r1, #0
 800e978:	701a      	strb	r2, [r3, #0]
 800e97a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e97c:	3301      	adds	r3, #1
 800e97e:	647b      	str	r3, [r7, #68]	; 0x44
 800e980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e982:	2b0e      	cmp	r3, #14
 800e984:	dde3      	ble.n	800e94e <AES_CMAC_Final+0x34>
 800e986:	211c      	movs	r1, #28
 800e988:	187b      	adds	r3, r7, r1
 800e98a:	7bdb      	ldrb	r3, [r3, #15]
 800e98c:	18db      	adds	r3, r3, r3
 800e98e:	b2da      	uxtb	r2, r3
 800e990:	187b      	adds	r3, r7, r1
 800e992:	73da      	strb	r2, [r3, #15]
                   K[15] ^= 0x87;
 800e994:	187b      	adds	r3, r7, r1
 800e996:	7bdb      	ldrb	r3, [r3, #15]
 800e998:	2279      	movs	r2, #121	; 0x79
 800e99a:	4252      	negs	r2, r2
 800e99c:	4053      	eors	r3, r2
 800e99e:	b2da      	uxtb	r2, r3
 800e9a0:	187b      	adds	r3, r7, r1
 800e9a2:	73da      	strb	r2, [r3, #15]
 800e9a4:	e025      	b.n	800e9f2 <AES_CMAC_Final+0xd8>
            } else
                    LSHIFT(K, K);
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	643b      	str	r3, [r7, #64]	; 0x40
 800e9aa:	e018      	b.n	800e9de <AES_CMAC_Final+0xc4>
 800e9ac:	201c      	movs	r0, #28
 800e9ae:	183a      	adds	r2, r7, r0
 800e9b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9b2:	18d3      	adds	r3, r2, r3
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	005b      	lsls	r3, r3, #1
 800e9b8:	b25a      	sxtb	r2, r3
 800e9ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9bc:	3301      	adds	r3, #1
 800e9be:	1839      	adds	r1, r7, r0
 800e9c0:	5ccb      	ldrb	r3, [r1, r3]
 800e9c2:	09db      	lsrs	r3, r3, #7
 800e9c4:	b2db      	uxtb	r3, r3
 800e9c6:	b25b      	sxtb	r3, r3
 800e9c8:	4313      	orrs	r3, r2
 800e9ca:	b25b      	sxtb	r3, r3
 800e9cc:	b2d9      	uxtb	r1, r3
 800e9ce:	183a      	adds	r2, r7, r0
 800e9d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9d2:	18d3      	adds	r3, r2, r3
 800e9d4:	1c0a      	adds	r2, r1, #0
 800e9d6:	701a      	strb	r2, [r3, #0]
 800e9d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9da:	3301      	adds	r3, #1
 800e9dc:	643b      	str	r3, [r7, #64]	; 0x40
 800e9de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9e0:	2b0e      	cmp	r3, #14
 800e9e2:	dde3      	ble.n	800e9ac <AES_CMAC_Final+0x92>
 800e9e4:	211c      	movs	r1, #28
 800e9e6:	187b      	adds	r3, r7, r1
 800e9e8:	7bdb      	ldrb	r3, [r3, #15]
 800e9ea:	18db      	adds	r3, r3, r3
 800e9ec:	b2da      	uxtb	r2, r3
 800e9ee:	187b      	adds	r3, r7, r1
 800e9f0:	73da      	strb	r2, [r3, #15]


            if (ctx->M_n == 16) {
 800e9f2:	683a      	ldr	r2, [r7, #0]
 800e9f4:	238a      	movs	r3, #138	; 0x8a
 800e9f6:	005b      	lsls	r3, r3, #1
 800e9f8:	58d3      	ldr	r3, [r2, r3]
 800e9fa:	2b10      	cmp	r3, #16
 800e9fc:	d11f      	bne.n	800ea3e <AES_CMAC_Final+0x124>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 800e9fe:	2300      	movs	r3, #0
 800ea00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea02:	e018      	b.n	800ea36 <AES_CMAC_Final+0x11c>
 800ea04:	6839      	ldr	r1, [r7, #0]
 800ea06:	2302      	movs	r3, #2
 800ea08:	33ff      	adds	r3, #255	; 0xff
 800ea0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea0c:	188a      	adds	r2, r1, r2
 800ea0e:	18d3      	adds	r3, r2, r3
 800ea10:	781a      	ldrb	r2, [r3, #0]
 800ea12:	231c      	movs	r3, #28
 800ea14:	18f9      	adds	r1, r7, r3
 800ea16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea18:	18cb      	adds	r3, r1, r3
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	4053      	eors	r3, r2
 800ea1e:	b2d8      	uxtb	r0, r3
 800ea20:	6839      	ldr	r1, [r7, #0]
 800ea22:	2302      	movs	r3, #2
 800ea24:	33ff      	adds	r3, #255	; 0xff
 800ea26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea28:	188a      	adds	r2, r1, r2
 800ea2a:	18d3      	adds	r3, r2, r3
 800ea2c:	1c02      	adds	r2, r0, #0
 800ea2e:	701a      	strb	r2, [r3, #0]
 800ea30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea32:	3301      	adds	r3, #1
 800ea34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ea36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea38:	2b0f      	cmp	r3, #15
 800ea3a:	dde3      	ble.n	800ea04 <AES_CMAC_Final+0xea>
 800ea3c:	e09f      	b.n	800eb7e <AES_CMAC_Final+0x264>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 800ea3e:	231c      	movs	r3, #28
 800ea40:	18fb      	adds	r3, r7, r3
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	b25b      	sxtb	r3, r3
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	da2e      	bge.n	800eaa8 <AES_CMAC_Final+0x18e>
                          LSHIFT(K, K);
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea4e:	e018      	b.n	800ea82 <AES_CMAC_Final+0x168>
 800ea50:	201c      	movs	r0, #28
 800ea52:	183a      	adds	r2, r7, r0
 800ea54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea56:	18d3      	adds	r3, r2, r3
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	005b      	lsls	r3, r3, #1
 800ea5c:	b25a      	sxtb	r2, r3
 800ea5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea60:	3301      	adds	r3, #1
 800ea62:	1839      	adds	r1, r7, r0
 800ea64:	5ccb      	ldrb	r3, [r1, r3]
 800ea66:	09db      	lsrs	r3, r3, #7
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	b25b      	sxtb	r3, r3
 800ea6c:	4313      	orrs	r3, r2
 800ea6e:	b25b      	sxtb	r3, r3
 800ea70:	b2d9      	uxtb	r1, r3
 800ea72:	183a      	adds	r2, r7, r0
 800ea74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea76:	18d3      	adds	r3, r2, r3
 800ea78:	1c0a      	adds	r2, r1, #0
 800ea7a:	701a      	strb	r2, [r3, #0]
 800ea7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7e:	3301      	adds	r3, #1
 800ea80:	63bb      	str	r3, [r7, #56]	; 0x38
 800ea82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea84:	2b0e      	cmp	r3, #14
 800ea86:	dde3      	ble.n	800ea50 <AES_CMAC_Final+0x136>
 800ea88:	211c      	movs	r1, #28
 800ea8a:	187b      	adds	r3, r7, r1
 800ea8c:	7bdb      	ldrb	r3, [r3, #15]
 800ea8e:	18db      	adds	r3, r3, r3
 800ea90:	b2da      	uxtb	r2, r3
 800ea92:	187b      	adds	r3, r7, r1
 800ea94:	73da      	strb	r2, [r3, #15]
                          K[15] ^= 0x87;
 800ea96:	187b      	adds	r3, r7, r1
 800ea98:	7bdb      	ldrb	r3, [r3, #15]
 800ea9a:	2279      	movs	r2, #121	; 0x79
 800ea9c:	4252      	negs	r2, r2
 800ea9e:	4053      	eors	r3, r2
 800eaa0:	b2da      	uxtb	r2, r3
 800eaa2:	187b      	adds	r3, r7, r1
 800eaa4:	73da      	strb	r2, [r3, #15]
 800eaa6:	e025      	b.n	800eaf4 <AES_CMAC_Final+0x1da>
                  } else
                           LSHIFT(K, K);
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	637b      	str	r3, [r7, #52]	; 0x34
 800eaac:	e018      	b.n	800eae0 <AES_CMAC_Final+0x1c6>
 800eaae:	201c      	movs	r0, #28
 800eab0:	183a      	adds	r2, r7, r0
 800eab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eab4:	18d3      	adds	r3, r2, r3
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	005b      	lsls	r3, r3, #1
 800eaba:	b25a      	sxtb	r2, r3
 800eabc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eabe:	3301      	adds	r3, #1
 800eac0:	1839      	adds	r1, r7, r0
 800eac2:	5ccb      	ldrb	r3, [r1, r3]
 800eac4:	09db      	lsrs	r3, r3, #7
 800eac6:	b2db      	uxtb	r3, r3
 800eac8:	b25b      	sxtb	r3, r3
 800eaca:	4313      	orrs	r3, r2
 800eacc:	b25b      	sxtb	r3, r3
 800eace:	b2d9      	uxtb	r1, r3
 800ead0:	183a      	adds	r2, r7, r0
 800ead2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ead4:	18d3      	adds	r3, r2, r3
 800ead6:	1c0a      	adds	r2, r1, #0
 800ead8:	701a      	strb	r2, [r3, #0]
 800eada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eadc:	3301      	adds	r3, #1
 800eade:	637b      	str	r3, [r7, #52]	; 0x34
 800eae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eae2:	2b0e      	cmp	r3, #14
 800eae4:	dde3      	ble.n	800eaae <AES_CMAC_Final+0x194>
 800eae6:	211c      	movs	r1, #28
 800eae8:	187b      	adds	r3, r7, r1
 800eaea:	7bdb      	ldrb	r3, [r3, #15]
 800eaec:	18db      	adds	r3, r3, r3
 800eaee:	b2da      	uxtb	r2, r3
 800eaf0:	187b      	adds	r3, r7, r1
 800eaf2:	73da      	strb	r2, [r3, #15]

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 800eaf4:	683a      	ldr	r2, [r7, #0]
 800eaf6:	238a      	movs	r3, #138	; 0x8a
 800eaf8:	005b      	lsls	r3, r3, #1
 800eafa:	58d2      	ldr	r2, [r2, r3]
 800eafc:	6839      	ldr	r1, [r7, #0]
 800eafe:	2302      	movs	r3, #2
 800eb00:	33ff      	adds	r3, #255	; 0xff
 800eb02:	188a      	adds	r2, r1, r2
 800eb04:	18d3      	adds	r3, r2, r3
 800eb06:	2280      	movs	r2, #128	; 0x80
 800eb08:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 800eb0a:	e00a      	b.n	800eb22 <AES_CMAC_Final+0x208>
                         ctx->M_last[ctx->M_n] = 0;
 800eb0c:	683a      	ldr	r2, [r7, #0]
 800eb0e:	238a      	movs	r3, #138	; 0x8a
 800eb10:	005b      	lsls	r3, r3, #1
 800eb12:	58d2      	ldr	r2, [r2, r3]
 800eb14:	6839      	ldr	r1, [r7, #0]
 800eb16:	2302      	movs	r3, #2
 800eb18:	33ff      	adds	r3, #255	; 0xff
 800eb1a:	188a      	adds	r2, r1, r2
 800eb1c:	18d3      	adds	r3, r2, r3
 800eb1e:	2200      	movs	r2, #0
 800eb20:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 800eb22:	683a      	ldr	r2, [r7, #0]
 800eb24:	238a      	movs	r3, #138	; 0x8a
 800eb26:	005b      	lsls	r3, r3, #1
 800eb28:	58d3      	ldr	r3, [r2, r3]
 800eb2a:	1c59      	adds	r1, r3, #1
 800eb2c:	683a      	ldr	r2, [r7, #0]
 800eb2e:	238a      	movs	r3, #138	; 0x8a
 800eb30:	005b      	lsls	r3, r3, #1
 800eb32:	50d1      	str	r1, [r2, r3]
 800eb34:	683a      	ldr	r2, [r7, #0]
 800eb36:	238a      	movs	r3, #138	; 0x8a
 800eb38:	005b      	lsls	r3, r3, #1
 800eb3a:	58d3      	ldr	r3, [r2, r3]
 800eb3c:	2b0f      	cmp	r3, #15
 800eb3e:	d9e5      	bls.n	800eb0c <AES_CMAC_Final+0x1f2>
   
                  XOR(K, ctx->M_last);
 800eb40:	2300      	movs	r3, #0
 800eb42:	633b      	str	r3, [r7, #48]	; 0x30
 800eb44:	e018      	b.n	800eb78 <AES_CMAC_Final+0x25e>
 800eb46:	6839      	ldr	r1, [r7, #0]
 800eb48:	2302      	movs	r3, #2
 800eb4a:	33ff      	adds	r3, #255	; 0xff
 800eb4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb4e:	188a      	adds	r2, r1, r2
 800eb50:	18d3      	adds	r3, r2, r3
 800eb52:	781a      	ldrb	r2, [r3, #0]
 800eb54:	231c      	movs	r3, #28
 800eb56:	18f9      	adds	r1, r7, r3
 800eb58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5a:	18cb      	adds	r3, r1, r3
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	4053      	eors	r3, r2
 800eb60:	b2d8      	uxtb	r0, r3
 800eb62:	6839      	ldr	r1, [r7, #0]
 800eb64:	2302      	movs	r3, #2
 800eb66:	33ff      	adds	r3, #255	; 0xff
 800eb68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb6a:	188a      	adds	r2, r1, r2
 800eb6c:	18d3      	adds	r3, r2, r3
 800eb6e:	1c02      	adds	r2, r0, #0
 800eb70:	701a      	strb	r2, [r3, #0]
 800eb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb74:	3301      	adds	r3, #1
 800eb76:	633b      	str	r3, [r7, #48]	; 0x30
 800eb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7a:	2b0f      	cmp	r3, #15
 800eb7c:	dde3      	ble.n	800eb46 <AES_CMAC_Final+0x22c>


           }
           XOR(ctx->M_last, ctx->X);
 800eb7e:	2300      	movs	r3, #0
 800eb80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb82:	e018      	b.n	800ebb6 <AES_CMAC_Final+0x29c>
 800eb84:	683a      	ldr	r2, [r7, #0]
 800eb86:	21f1      	movs	r1, #241	; 0xf1
 800eb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8a:	18d3      	adds	r3, r2, r3
 800eb8c:	185b      	adds	r3, r3, r1
 800eb8e:	781a      	ldrb	r2, [r3, #0]
 800eb90:	6838      	ldr	r0, [r7, #0]
 800eb92:	2302      	movs	r3, #2
 800eb94:	33ff      	adds	r3, #255	; 0xff
 800eb96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb98:	1841      	adds	r1, r0, r1
 800eb9a:	18cb      	adds	r3, r1, r3
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	4053      	eors	r3, r2
 800eba0:	b2d8      	uxtb	r0, r3
 800eba2:	683a      	ldr	r2, [r7, #0]
 800eba4:	21f1      	movs	r1, #241	; 0xf1
 800eba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba8:	18d3      	adds	r3, r2, r3
 800ebaa:	185b      	adds	r3, r3, r1
 800ebac:	1c02      	adds	r2, r0, #0
 800ebae:	701a      	strb	r2, [r3, #0]
 800ebb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb8:	2b0f      	cmp	r3, #15
 800ebba:	dde3      	ble.n	800eb84 <AES_CMAC_Final+0x26a>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	33f1      	adds	r3, #241	; 0xf1
 800ebc0:	0019      	movs	r1, r3
 800ebc2:	240c      	movs	r4, #12
 800ebc4:	193b      	adds	r3, r7, r4
 800ebc6:	2210      	movs	r2, #16
 800ebc8:	0018      	movs	r0, r3
 800ebca:	f00c fd31 	bl	801b630 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 800ebce:	683a      	ldr	r2, [r7, #0]
 800ebd0:	6879      	ldr	r1, [r7, #4]
 800ebd2:	193b      	adds	r3, r7, r4
 800ebd4:	0018      	movs	r0, r3
 800ebd6:	f7ff fd71 	bl	800e6bc <aes_encrypt>
           memset1(K, 0, sizeof K);
 800ebda:	231c      	movs	r3, #28
 800ebdc:	18fb      	adds	r3, r7, r3
 800ebde:	2210      	movs	r2, #16
 800ebe0:	2100      	movs	r1, #0
 800ebe2:	0018      	movs	r0, r3
 800ebe4:	f00c fd60 	bl	801b6a8 <memset1>

}
 800ebe8:	46c0      	nop			; (mov r8, r8)
 800ebea:	46bd      	mov	sp, r7
 800ebec:	b013      	add	sp, #76	; 0x4c
 800ebee:	bd90      	pop	{r4, r7, pc}

0800ebf0 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	0002      	movs	r2, r0
 800ebf8:	6039      	str	r1, [r7, #0]
 800ebfa:	1dfb      	adds	r3, r7, #7
 800ebfc:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ebfe:	230f      	movs	r3, #15
 800ec00:	18fb      	adds	r3, r7, r3
 800ec02:	2200      	movs	r2, #0
 800ec04:	701a      	strb	r2, [r3, #0]
 800ec06:	e025      	b.n	800ec54 <GetKeyByID+0x64>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 800ec08:	230f      	movs	r3, #15
 800ec0a:	18fb      	adds	r3, r7, r3
 800ec0c:	781a      	ldrb	r2, [r3, #0]
 800ec0e:	4816      	ldr	r0, [pc, #88]	; (800ec68 <GetKeyByID+0x78>)
 800ec10:	238b      	movs	r3, #139	; 0x8b
 800ec12:	0099      	lsls	r1, r3, #2
 800ec14:	0013      	movs	r3, r2
 800ec16:	011b      	lsls	r3, r3, #4
 800ec18:	189b      	adds	r3, r3, r2
 800ec1a:	18c3      	adds	r3, r0, r3
 800ec1c:	185b      	adds	r3, r3, r1
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	1dfa      	adds	r2, r7, #7
 800ec22:	7812      	ldrb	r2, [r2, #0]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d10f      	bne.n	800ec48 <GetKeyByID+0x58>
        {
            *keyItem = &( SeNvmCtx.KeyList[i] );
 800ec28:	230f      	movs	r3, #15
 800ec2a:	18fb      	adds	r3, r7, r3
 800ec2c:	781a      	ldrb	r2, [r3, #0]
 800ec2e:	0013      	movs	r3, r2
 800ec30:	011b      	lsls	r3, r3, #4
 800ec32:	189b      	adds	r3, r3, r2
 800ec34:	228a      	movs	r2, #138	; 0x8a
 800ec36:	0092      	lsls	r2, r2, #2
 800ec38:	189a      	adds	r2, r3, r2
 800ec3a:	4b0b      	ldr	r3, [pc, #44]	; (800ec68 <GetKeyByID+0x78>)
 800ec3c:	18d3      	adds	r3, r2, r3
 800ec3e:	1d1a      	adds	r2, r3, #4
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ec44:	2300      	movs	r3, #0
 800ec46:	e00b      	b.n	800ec60 <GetKeyByID+0x70>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ec48:	210f      	movs	r1, #15
 800ec4a:	187b      	adds	r3, r7, r1
 800ec4c:	781a      	ldrb	r2, [r3, #0]
 800ec4e:	187b      	adds	r3, r7, r1
 800ec50:	3201      	adds	r2, #1
 800ec52:	701a      	strb	r2, [r3, #0]
 800ec54:	230f      	movs	r3, #15
 800ec56:	18fb      	adds	r3, r7, r3
 800ec58:	781b      	ldrb	r3, [r3, #0]
 800ec5a:	2b17      	cmp	r3, #23
 800ec5c:	d9d4      	bls.n	800ec08 <GetKeyByID+0x18>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ec5e:	2303      	movs	r3, #3
}
 800ec60:	0018      	movs	r0, r3
 800ec62:	46bd      	mov	sp, r7
 800ec64:	b004      	add	sp, #16
 800ec66:	bd80      	pop	{r7, pc}
 800ec68:	20000528 	.word	0x20000528

0800ec6c <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	af00      	add	r7, sp, #0
    return;
 800ec70:	46c0      	nop			; (mov r8, r8)
}
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
	...

0800ec78 <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 800ec78:	b5b0      	push	{r4, r5, r7, lr}
 800ec7a:	b08a      	sub	sp, #40	; 0x28
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	0019      	movs	r1, r3
 800ec84:	1dbb      	adds	r3, r7, #6
 800ec86:	801a      	strh	r2, [r3, #0]
 800ec88:	1d7b      	adds	r3, r7, #5
 800ec8a:	1c0a      	adds	r2, r1, #0
 800ec8c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d002      	beq.n	800ec9a <ComputeCmac+0x22>
 800ec94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d101      	bne.n	800ec9e <ComputeCmac+0x26>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ec9a:	2302      	movs	r3, #2
 800ec9c:	e046      	b.n	800ed2c <ComputeCmac+0xb4>
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 800ec9e:	4b25      	ldr	r3, [pc, #148]	; (800ed34 <ComputeCmac+0xbc>)
 800eca0:	0018      	movs	r0, r3
 800eca2:	f7ff fd56 	bl	800e752 <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800eca6:	2527      	movs	r5, #39	; 0x27
 800eca8:	197c      	adds	r4, r7, r5
 800ecaa:	2310      	movs	r3, #16
 800ecac:	18fa      	adds	r2, r7, r3
 800ecae:	1d7b      	adds	r3, r7, #5
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	0011      	movs	r1, r2
 800ecb4:	0018      	movs	r0, r3
 800ecb6:	f7ff ff9b 	bl	800ebf0 <GetKeyByID>
 800ecba:	0003      	movs	r3, r0
 800ecbc:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ecbe:	197b      	adds	r3, r7, r5
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d12f      	bne.n	800ed26 <ComputeCmac+0xae>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	1c5a      	adds	r2, r3, #1
 800ecca:	4b1a      	ldr	r3, [pc, #104]	; (800ed34 <ComputeCmac+0xbc>)
 800eccc:	0011      	movs	r1, r2
 800ecce:	0018      	movs	r0, r3
 800ecd0:	f7ff fd59 	bl	800e786 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d005      	beq.n	800ece6 <ComputeCmac+0x6e>
        {
            AES_CMAC_Update( SeNvmCtx.AesCmacCtx, micBxBuffer, 16 );
 800ecda:	68f9      	ldr	r1, [r7, #12]
 800ecdc:	4b15      	ldr	r3, [pc, #84]	; (800ed34 <ComputeCmac+0xbc>)
 800ecde:	2210      	movs	r2, #16
 800ece0:	0018      	movs	r0, r3
 800ece2:	f7ff fd5f 	bl	800e7a4 <AES_CMAC_Update>
        }

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 800ece6:	1dbb      	adds	r3, r7, #6
 800ece8:	881a      	ldrh	r2, [r3, #0]
 800ecea:	68b9      	ldr	r1, [r7, #8]
 800ecec:	4b11      	ldr	r3, [pc, #68]	; (800ed34 <ComputeCmac+0xbc>)
 800ecee:	0018      	movs	r0, r3
 800ecf0:	f7ff fd58 	bl	800e7a4 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 800ecf4:	4a0f      	ldr	r2, [pc, #60]	; (800ed34 <ComputeCmac+0xbc>)
 800ecf6:	2114      	movs	r1, #20
 800ecf8:	000c      	movs	r4, r1
 800ecfa:	187b      	adds	r3, r7, r1
 800ecfc:	0011      	movs	r1, r2
 800ecfe:	0018      	movs	r0, r3
 800ed00:	f7ff fe0b 	bl	800e91a <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 800ed04:	0021      	movs	r1, r4
 800ed06:	187b      	adds	r3, r7, r1
 800ed08:	78db      	ldrb	r3, [r3, #3]
 800ed0a:	061a      	lsls	r2, r3, #24
 800ed0c:	187b      	adds	r3, r7, r1
 800ed0e:	789b      	ldrb	r3, [r3, #2]
 800ed10:	041b      	lsls	r3, r3, #16
 800ed12:	431a      	orrs	r2, r3
 800ed14:	187b      	adds	r3, r7, r1
 800ed16:	785b      	ldrb	r3, [r3, #1]
 800ed18:	021b      	lsls	r3, r3, #8
 800ed1a:	4313      	orrs	r3, r2
 800ed1c:	187a      	adds	r2, r7, r1
 800ed1e:	7812      	ldrb	r2, [r2, #0]
 800ed20:	431a      	orrs	r2, r3
 800ed22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed24:	601a      	str	r2, [r3, #0]
    }

    return retval;
 800ed26:	2327      	movs	r3, #39	; 0x27
 800ed28:	18fb      	adds	r3, r7, r3
 800ed2a:	781b      	ldrb	r3, [r3, #0]
}
 800ed2c:	0018      	movs	r0, r3
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	b00a      	add	sp, #40	; 0x28
 800ed32:	bdb0      	pop	{r4, r5, r7, pc}
 800ed34:	2000063c 	.word	0x2000063c

0800ed38 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmEvent seNvmCtxChanged )
{
 800ed38:	b5b0      	push	{r4, r5, r7, lr}
 800ed3a:	b088      	sub	sp, #32
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
    uint8_t itr = 0;
 800ed40:	241f      	movs	r4, #31
 800ed42:	193b      	adds	r3, r7, r4
 800ed44:	2200      	movs	r2, #0
 800ed46:	701a      	strb	r2, [r3, #0]
    uint8_t zeroKey[16] = { 0 };
 800ed48:	250c      	movs	r5, #12
 800ed4a:	197b      	adds	r3, r7, r5
 800ed4c:	0018      	movs	r0, r3
 800ed4e:	2310      	movs	r3, #16
 800ed50:	001a      	movs	r2, r3
 800ed52:	2100      	movs	r1, #0
 800ed54:	f00c fcf0 	bl	801b738 <memset>

    // Initialize with defaults
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 800ed58:	193b      	adds	r3, r7, r4
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	193a      	adds	r2, r7, r4
 800ed5e:	1c59      	adds	r1, r3, #1
 800ed60:	7011      	strb	r1, [r2, #0]
 800ed62:	0018      	movs	r0, r3
 800ed64:	49d0      	ldr	r1, [pc, #832]	; (800f0a8 <SecureElementInit+0x370>)
 800ed66:	238b      	movs	r3, #139	; 0x8b
 800ed68:	009a      	lsls	r2, r3, #2
 800ed6a:	0003      	movs	r3, r0
 800ed6c:	011b      	lsls	r3, r3, #4
 800ed6e:	181b      	adds	r3, r3, r0
 800ed70:	18cb      	adds	r3, r1, r3
 800ed72:	189b      	adds	r3, r3, r2
 800ed74:	2200      	movs	r2, #0
 800ed76:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 800ed78:	193b      	adds	r3, r7, r4
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	193a      	adds	r2, r7, r4
 800ed7e:	1c59      	adds	r1, r3, #1
 800ed80:	7011      	strb	r1, [r2, #0]
 800ed82:	0018      	movs	r0, r3
 800ed84:	49c8      	ldr	r1, [pc, #800]	; (800f0a8 <SecureElementInit+0x370>)
 800ed86:	238b      	movs	r3, #139	; 0x8b
 800ed88:	009a      	lsls	r2, r3, #2
 800ed8a:	0003      	movs	r3, r0
 800ed8c:	011b      	lsls	r3, r3, #4
 800ed8e:	181b      	adds	r3, r3, r0
 800ed90:	18cb      	adds	r3, r1, r3
 800ed92:	189b      	adds	r3, r3, r2
 800ed94:	2201      	movs	r2, #1
 800ed96:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 800ed98:	193b      	adds	r3, r7, r4
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	193a      	adds	r2, r7, r4
 800ed9e:	1c59      	adds	r1, r3, #1
 800eda0:	7011      	strb	r1, [r2, #0]
 800eda2:	0018      	movs	r0, r3
 800eda4:	49c0      	ldr	r1, [pc, #768]	; (800f0a8 <SecureElementInit+0x370>)
 800eda6:	238b      	movs	r3, #139	; 0x8b
 800eda8:	009a      	lsls	r2, r3, #2
 800edaa:	0003      	movs	r3, r0
 800edac:	011b      	lsls	r3, r3, #4
 800edae:	181b      	adds	r3, r3, r0
 800edb0:	18cb      	adds	r3, r1, r3
 800edb2:	189b      	adds	r3, r3, r2
 800edb4:	2202      	movs	r2, #2
 800edb6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 800edb8:	193b      	adds	r3, r7, r4
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	193a      	adds	r2, r7, r4
 800edbe:	1c59      	adds	r1, r3, #1
 800edc0:	7011      	strb	r1, [r2, #0]
 800edc2:	0018      	movs	r0, r3
 800edc4:	49b8      	ldr	r1, [pc, #736]	; (800f0a8 <SecureElementInit+0x370>)
 800edc6:	238b      	movs	r3, #139	; 0x8b
 800edc8:	009a      	lsls	r2, r3, #2
 800edca:	0003      	movs	r3, r0
 800edcc:	011b      	lsls	r3, r3, #4
 800edce:	181b      	adds	r3, r3, r0
 800edd0:	18cb      	adds	r3, r1, r3
 800edd2:	189b      	adds	r3, r3, r2
 800edd4:	2203      	movs	r2, #3
 800edd6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 800edd8:	193b      	adds	r3, r7, r4
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	193a      	adds	r2, r7, r4
 800edde:	1c59      	adds	r1, r3, #1
 800ede0:	7011      	strb	r1, [r2, #0]
 800ede2:	0018      	movs	r0, r3
 800ede4:	49b0      	ldr	r1, [pc, #704]	; (800f0a8 <SecureElementInit+0x370>)
 800ede6:	238b      	movs	r3, #139	; 0x8b
 800ede8:	009a      	lsls	r2, r3, #2
 800edea:	0003      	movs	r3, r0
 800edec:	011b      	lsls	r3, r3, #4
 800edee:	181b      	adds	r3, r3, r0
 800edf0:	18cb      	adds	r3, r1, r3
 800edf2:	189b      	adds	r3, r3, r2
 800edf4:	2204      	movs	r2, #4
 800edf6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 800edf8:	193b      	adds	r3, r7, r4
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	193a      	adds	r2, r7, r4
 800edfe:	1c59      	adds	r1, r3, #1
 800ee00:	7011      	strb	r1, [r2, #0]
 800ee02:	0018      	movs	r0, r3
 800ee04:	49a8      	ldr	r1, [pc, #672]	; (800f0a8 <SecureElementInit+0x370>)
 800ee06:	238b      	movs	r3, #139	; 0x8b
 800ee08:	009a      	lsls	r2, r3, #2
 800ee0a:	0003      	movs	r3, r0
 800ee0c:	011b      	lsls	r3, r3, #4
 800ee0e:	181b      	adds	r3, r3, r0
 800ee10:	18cb      	adds	r3, r1, r3
 800ee12:	189b      	adds	r3, r3, r2
 800ee14:	2205      	movs	r2, #5
 800ee16:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 800ee18:	193b      	adds	r3, r7, r4
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	193a      	adds	r2, r7, r4
 800ee1e:	1c59      	adds	r1, r3, #1
 800ee20:	7011      	strb	r1, [r2, #0]
 800ee22:	0018      	movs	r0, r3
 800ee24:	49a0      	ldr	r1, [pc, #640]	; (800f0a8 <SecureElementInit+0x370>)
 800ee26:	238b      	movs	r3, #139	; 0x8b
 800ee28:	009a      	lsls	r2, r3, #2
 800ee2a:	0003      	movs	r3, r0
 800ee2c:	011b      	lsls	r3, r3, #4
 800ee2e:	181b      	adds	r3, r3, r0
 800ee30:	18cb      	adds	r3, r1, r3
 800ee32:	189b      	adds	r3, r3, r2
 800ee34:	2206      	movs	r2, #6
 800ee36:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 800ee38:	193b      	adds	r3, r7, r4
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	193a      	adds	r2, r7, r4
 800ee3e:	1c59      	adds	r1, r3, #1
 800ee40:	7011      	strb	r1, [r2, #0]
 800ee42:	0018      	movs	r0, r3
 800ee44:	4998      	ldr	r1, [pc, #608]	; (800f0a8 <SecureElementInit+0x370>)
 800ee46:	238b      	movs	r3, #139	; 0x8b
 800ee48:	009a      	lsls	r2, r3, #2
 800ee4a:	0003      	movs	r3, r0
 800ee4c:	011b      	lsls	r3, r3, #4
 800ee4e:	181b      	adds	r3, r3, r0
 800ee50:	18cb      	adds	r3, r1, r3
 800ee52:	189b      	adds	r3, r3, r2
 800ee54:	2207      	movs	r2, #7
 800ee56:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 800ee58:	193b      	adds	r3, r7, r4
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	193a      	adds	r2, r7, r4
 800ee5e:	1c59      	adds	r1, r3, #1
 800ee60:	7011      	strb	r1, [r2, #0]
 800ee62:	0018      	movs	r0, r3
 800ee64:	4990      	ldr	r1, [pc, #576]	; (800f0a8 <SecureElementInit+0x370>)
 800ee66:	238b      	movs	r3, #139	; 0x8b
 800ee68:	009a      	lsls	r2, r3, #2
 800ee6a:	0003      	movs	r3, r0
 800ee6c:	011b      	lsls	r3, r3, #4
 800ee6e:	181b      	adds	r3, r3, r0
 800ee70:	18cb      	adds	r3, r1, r3
 800ee72:	189b      	adds	r3, r3, r2
 800ee74:	2208      	movs	r2, #8
 800ee76:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_ROOT_KEY;
 800ee78:	193b      	adds	r3, r7, r4
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	193a      	adds	r2, r7, r4
 800ee7e:	1c59      	adds	r1, r3, #1
 800ee80:	7011      	strb	r1, [r2, #0]
 800ee82:	0018      	movs	r0, r3
 800ee84:	4988      	ldr	r1, [pc, #544]	; (800f0a8 <SecureElementInit+0x370>)
 800ee86:	238b      	movs	r3, #139	; 0x8b
 800ee88:	009a      	lsls	r2, r3, #2
 800ee8a:	0003      	movs	r3, r0
 800ee8c:	011b      	lsls	r3, r3, #4
 800ee8e:	181b      	adds	r3, r3, r0
 800ee90:	18cb      	adds	r3, r1, r3
 800ee92:	189b      	adds	r3, r3, r2
 800ee94:	2209      	movs	r2, #9
 800ee96:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 800ee98:	193b      	adds	r3, r7, r4
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	193a      	adds	r2, r7, r4
 800ee9e:	1c59      	adds	r1, r3, #1
 800eea0:	7011      	strb	r1, [r2, #0]
 800eea2:	0018      	movs	r0, r3
 800eea4:	4980      	ldr	r1, [pc, #512]	; (800f0a8 <SecureElementInit+0x370>)
 800eea6:	238b      	movs	r3, #139	; 0x8b
 800eea8:	009a      	lsls	r2, r3, #2
 800eeaa:	0003      	movs	r3, r0
 800eeac:	011b      	lsls	r3, r3, #4
 800eeae:	181b      	adds	r3, r3, r0
 800eeb0:	18cb      	adds	r3, r1, r3
 800eeb2:	189b      	adds	r3, r3, r2
 800eeb4:	227f      	movs	r2, #127	; 0x7f
 800eeb6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 800eeb8:	193b      	adds	r3, r7, r4
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	193a      	adds	r2, r7, r4
 800eebe:	1c59      	adds	r1, r3, #1
 800eec0:	7011      	strb	r1, [r2, #0]
 800eec2:	0018      	movs	r0, r3
 800eec4:	4978      	ldr	r1, [pc, #480]	; (800f0a8 <SecureElementInit+0x370>)
 800eec6:	238b      	movs	r3, #139	; 0x8b
 800eec8:	009a      	lsls	r2, r3, #2
 800eeca:	0003      	movs	r3, r0
 800eecc:	011b      	lsls	r3, r3, #4
 800eece:	181b      	adds	r3, r3, r0
 800eed0:	18cb      	adds	r3, r1, r3
 800eed2:	189b      	adds	r3, r3, r2
 800eed4:	2280      	movs	r2, #128	; 0x80
 800eed6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 800eed8:	193b      	adds	r3, r7, r4
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	193a      	adds	r2, r7, r4
 800eede:	1c59      	adds	r1, r3, #1
 800eee0:	7011      	strb	r1, [r2, #0]
 800eee2:	0018      	movs	r0, r3
 800eee4:	4970      	ldr	r1, [pc, #448]	; (800f0a8 <SecureElementInit+0x370>)
 800eee6:	238b      	movs	r3, #139	; 0x8b
 800eee8:	009a      	lsls	r2, r3, #2
 800eeea:	0003      	movs	r3, r0
 800eeec:	011b      	lsls	r3, r3, #4
 800eeee:	181b      	adds	r3, r3, r0
 800eef0:	18cb      	adds	r3, r1, r3
 800eef2:	189b      	adds	r3, r3, r2
 800eef4:	2281      	movs	r2, #129	; 0x81
 800eef6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 800eef8:	193b      	adds	r3, r7, r4
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	193a      	adds	r2, r7, r4
 800eefe:	1c59      	adds	r1, r3, #1
 800ef00:	7011      	strb	r1, [r2, #0]
 800ef02:	0018      	movs	r0, r3
 800ef04:	4968      	ldr	r1, [pc, #416]	; (800f0a8 <SecureElementInit+0x370>)
 800ef06:	238b      	movs	r3, #139	; 0x8b
 800ef08:	009a      	lsls	r2, r3, #2
 800ef0a:	0003      	movs	r3, r0
 800ef0c:	011b      	lsls	r3, r3, #4
 800ef0e:	181b      	adds	r3, r3, r0
 800ef10:	18cb      	adds	r3, r1, r3
 800ef12:	189b      	adds	r3, r3, r2
 800ef14:	2282      	movs	r2, #130	; 0x82
 800ef16:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 800ef18:	193b      	adds	r3, r7, r4
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	193a      	adds	r2, r7, r4
 800ef1e:	1c59      	adds	r1, r3, #1
 800ef20:	7011      	strb	r1, [r2, #0]
 800ef22:	0018      	movs	r0, r3
 800ef24:	4960      	ldr	r1, [pc, #384]	; (800f0a8 <SecureElementInit+0x370>)
 800ef26:	238b      	movs	r3, #139	; 0x8b
 800ef28:	009a      	lsls	r2, r3, #2
 800ef2a:	0003      	movs	r3, r0
 800ef2c:	011b      	lsls	r3, r3, #4
 800ef2e:	181b      	adds	r3, r3, r0
 800ef30:	18cb      	adds	r3, r1, r3
 800ef32:	189b      	adds	r3, r3, r2
 800ef34:	2283      	movs	r2, #131	; 0x83
 800ef36:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 800ef38:	193b      	adds	r3, r7, r4
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	193a      	adds	r2, r7, r4
 800ef3e:	1c59      	adds	r1, r3, #1
 800ef40:	7011      	strb	r1, [r2, #0]
 800ef42:	0018      	movs	r0, r3
 800ef44:	4958      	ldr	r1, [pc, #352]	; (800f0a8 <SecureElementInit+0x370>)
 800ef46:	238b      	movs	r3, #139	; 0x8b
 800ef48:	009a      	lsls	r2, r3, #2
 800ef4a:	0003      	movs	r3, r0
 800ef4c:	011b      	lsls	r3, r3, #4
 800ef4e:	181b      	adds	r3, r3, r0
 800ef50:	18cb      	adds	r3, r1, r3
 800ef52:	189b      	adds	r3, r3, r2
 800ef54:	2284      	movs	r2, #132	; 0x84
 800ef56:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 800ef58:	193b      	adds	r3, r7, r4
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	193a      	adds	r2, r7, r4
 800ef5e:	1c59      	adds	r1, r3, #1
 800ef60:	7011      	strb	r1, [r2, #0]
 800ef62:	0018      	movs	r0, r3
 800ef64:	4950      	ldr	r1, [pc, #320]	; (800f0a8 <SecureElementInit+0x370>)
 800ef66:	238b      	movs	r3, #139	; 0x8b
 800ef68:	009a      	lsls	r2, r3, #2
 800ef6a:	0003      	movs	r3, r0
 800ef6c:	011b      	lsls	r3, r3, #4
 800ef6e:	181b      	adds	r3, r3, r0
 800ef70:	18cb      	adds	r3, r1, r3
 800ef72:	189b      	adds	r3, r3, r2
 800ef74:	2285      	movs	r2, #133	; 0x85
 800ef76:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 800ef78:	193b      	adds	r3, r7, r4
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	193a      	adds	r2, r7, r4
 800ef7e:	1c59      	adds	r1, r3, #1
 800ef80:	7011      	strb	r1, [r2, #0]
 800ef82:	0018      	movs	r0, r3
 800ef84:	4948      	ldr	r1, [pc, #288]	; (800f0a8 <SecureElementInit+0x370>)
 800ef86:	238b      	movs	r3, #139	; 0x8b
 800ef88:	009a      	lsls	r2, r3, #2
 800ef8a:	0003      	movs	r3, r0
 800ef8c:	011b      	lsls	r3, r3, #4
 800ef8e:	181b      	adds	r3, r3, r0
 800ef90:	18cb      	adds	r3, r1, r3
 800ef92:	189b      	adds	r3, r3, r2
 800ef94:	2286      	movs	r2, #134	; 0x86
 800ef96:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 800ef98:	193b      	adds	r3, r7, r4
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	193a      	adds	r2, r7, r4
 800ef9e:	1c59      	adds	r1, r3, #1
 800efa0:	7011      	strb	r1, [r2, #0]
 800efa2:	0018      	movs	r0, r3
 800efa4:	4940      	ldr	r1, [pc, #256]	; (800f0a8 <SecureElementInit+0x370>)
 800efa6:	238b      	movs	r3, #139	; 0x8b
 800efa8:	009a      	lsls	r2, r3, #2
 800efaa:	0003      	movs	r3, r0
 800efac:	011b      	lsls	r3, r3, #4
 800efae:	181b      	adds	r3, r3, r0
 800efb0:	18cb      	adds	r3, r1, r3
 800efb2:	189b      	adds	r3, r3, r2
 800efb4:	2287      	movs	r2, #135	; 0x87
 800efb6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 800efb8:	193b      	adds	r3, r7, r4
 800efba:	781b      	ldrb	r3, [r3, #0]
 800efbc:	193a      	adds	r2, r7, r4
 800efbe:	1c59      	adds	r1, r3, #1
 800efc0:	7011      	strb	r1, [r2, #0]
 800efc2:	0018      	movs	r0, r3
 800efc4:	4938      	ldr	r1, [pc, #224]	; (800f0a8 <SecureElementInit+0x370>)
 800efc6:	238b      	movs	r3, #139	; 0x8b
 800efc8:	009a      	lsls	r2, r3, #2
 800efca:	0003      	movs	r3, r0
 800efcc:	011b      	lsls	r3, r3, #4
 800efce:	181b      	adds	r3, r3, r0
 800efd0:	18cb      	adds	r3, r1, r3
 800efd2:	189b      	adds	r3, r3, r2
 800efd4:	2288      	movs	r2, #136	; 0x88
 800efd6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 800efd8:	193b      	adds	r3, r7, r4
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	193a      	adds	r2, r7, r4
 800efde:	1c59      	adds	r1, r3, #1
 800efe0:	7011      	strb	r1, [r2, #0]
 800efe2:	0018      	movs	r0, r3
 800efe4:	4930      	ldr	r1, [pc, #192]	; (800f0a8 <SecureElementInit+0x370>)
 800efe6:	238b      	movs	r3, #139	; 0x8b
 800efe8:	009a      	lsls	r2, r3, #2
 800efea:	0003      	movs	r3, r0
 800efec:	011b      	lsls	r3, r3, #4
 800efee:	181b      	adds	r3, r3, r0
 800eff0:	18cb      	adds	r3, r1, r3
 800eff2:	189b      	adds	r3, r3, r2
 800eff4:	2289      	movs	r2, #137	; 0x89
 800eff6:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 800eff8:	193b      	adds	r3, r7, r4
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	193a      	adds	r2, r7, r4
 800effe:	1c59      	adds	r1, r3, #1
 800f000:	7011      	strb	r1, [r2, #0]
 800f002:	0018      	movs	r0, r3
 800f004:	4928      	ldr	r1, [pc, #160]	; (800f0a8 <SecureElementInit+0x370>)
 800f006:	238b      	movs	r3, #139	; 0x8b
 800f008:	009a      	lsls	r2, r3, #2
 800f00a:	0003      	movs	r3, r0
 800f00c:	011b      	lsls	r3, r3, #4
 800f00e:	181b      	adds	r3, r3, r0
 800f010:	18cb      	adds	r3, r1, r3
 800f012:	189b      	adds	r3, r3, r2
 800f014:	228a      	movs	r2, #138	; 0x8a
 800f016:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 800f018:	193b      	adds	r3, r7, r4
 800f01a:	781b      	ldrb	r3, [r3, #0]
 800f01c:	193a      	adds	r2, r7, r4
 800f01e:	1c59      	adds	r1, r3, #1
 800f020:	7011      	strb	r1, [r2, #0]
 800f022:	0018      	movs	r0, r3
 800f024:	4920      	ldr	r1, [pc, #128]	; (800f0a8 <SecureElementInit+0x370>)
 800f026:	238b      	movs	r3, #139	; 0x8b
 800f028:	009a      	lsls	r2, r3, #2
 800f02a:	0003      	movs	r3, r0
 800f02c:	011b      	lsls	r3, r3, #4
 800f02e:	181b      	adds	r3, r3, r0
 800f030:	18cb      	adds	r3, r1, r3
 800f032:	189b      	adds	r3, r3, r2
 800f034:	228b      	movs	r2, #139	; 0x8b
 800f036:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;
 800f038:	193b      	adds	r3, r7, r4
 800f03a:	781a      	ldrb	r2, [r3, #0]
 800f03c:	481a      	ldr	r0, [pc, #104]	; (800f0a8 <SecureElementInit+0x370>)
 800f03e:	238b      	movs	r3, #139	; 0x8b
 800f040:	0099      	lsls	r1, r3, #2
 800f042:	0013      	movs	r3, r2
 800f044:	011b      	lsls	r3, r3, #4
 800f046:	189b      	adds	r3, r3, r2
 800f048:	18c3      	adds	r3, r0, r3
 800f04a:	185b      	adds	r3, r3, r1
 800f04c:	228c      	movs	r2, #140	; 0x8c
 800f04e:	701a      	strb	r2, [r3, #0]

    // Set standard keys
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 800f050:	193b      	adds	r3, r7, r4
 800f052:	781a      	ldrb	r2, [r3, #0]
 800f054:	0013      	movs	r3, r2
 800f056:	011b      	lsls	r3, r3, #4
 800f058:	189b      	adds	r3, r3, r2
 800f05a:	228a      	movs	r2, #138	; 0x8a
 800f05c:	0092      	lsls	r2, r2, #2
 800f05e:	189a      	adds	r2, r3, r2
 800f060:	4b11      	ldr	r3, [pc, #68]	; (800f0a8 <SecureElementInit+0x370>)
 800f062:	18d3      	adds	r3, r2, r3
 800f064:	3305      	adds	r3, #5
 800f066:	1979      	adds	r1, r7, r5
 800f068:	2210      	movs	r2, #16
 800f06a:	0018      	movs	r0, r3
 800f06c:	f00c fae0 	bl	801b630 <memcpy1>

    memset1( SeNvmCtx.DevEui, 0, SE_EUI_SIZE );
 800f070:	4b0d      	ldr	r3, [pc, #52]	; (800f0a8 <SecureElementInit+0x370>)
 800f072:	2210      	movs	r2, #16
 800f074:	2100      	movs	r1, #0
 800f076:	0018      	movs	r0, r3
 800f078:	f00c fb16 	bl	801b6a8 <memset1>
    memset1( SeNvmCtx.JoinEui, 0, SE_EUI_SIZE );
 800f07c:	4b0b      	ldr	r3, [pc, #44]	; (800f0ac <SecureElementInit+0x374>)
 800f07e:	2210      	movs	r2, #16
 800f080:	2100      	movs	r1, #0
 800f082:	0018      	movs	r0, r3
 800f084:	f00c fb10 	bl	801b6a8 <memset1>

    // Assign callback
    if( seNvmCtxChanged != 0 )
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d003      	beq.n	800f096 <SecureElementInit+0x35e>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
 800f08e:	4b08      	ldr	r3, [pc, #32]	; (800f0b0 <SecureElementInit+0x378>)
 800f090:	687a      	ldr	r2, [r7, #4]
 800f092:	601a      	str	r2, [r3, #0]
 800f094:	e002      	b.n	800f09c <SecureElementInit+0x364>
    }
    else
    {
        SeNvmCtxChanged = DummyCB;
 800f096:	4b06      	ldr	r3, [pc, #24]	; (800f0b0 <SecureElementInit+0x378>)
 800f098:	4a06      	ldr	r2, [pc, #24]	; (800f0b4 <SecureElementInit+0x37c>)
 800f09a:	601a      	str	r2, [r3, #0]
    }

    return SECURE_ELEMENT_SUCCESS;
 800f09c:	2300      	movs	r3, #0
}
 800f09e:	0018      	movs	r0, r3
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	b008      	add	sp, #32
 800f0a4:	bdb0      	pop	{r4, r5, r7, pc}
 800f0a6:	46c0      	nop			; (mov r8, r8)
 800f0a8:	20000528 	.word	0x20000528
 800f0ac:	20000538 	.word	0x20000538
 800f0b0:	200008ec 	.word	0x200008ec
 800f0b4:	0800ec6d 	.word	0x0800ec6d

0800f0b8 <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
    // Restore nvm context
    if( seNvmCtx != 0 )
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d008      	beq.n	800f0d8 <SecureElementRestoreNvmCtx+0x20>
    {
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 800f0c6:	23f1      	movs	r3, #241	; 0xf1
 800f0c8:	009a      	lsls	r2, r3, #2
 800f0ca:	6879      	ldr	r1, [r7, #4]
 800f0cc:	4b05      	ldr	r3, [pc, #20]	; (800f0e4 <SecureElementRestoreNvmCtx+0x2c>)
 800f0ce:	0018      	movs	r0, r3
 800f0d0:	f00c faae 	bl	801b630 <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	e000      	b.n	800f0da <SecureElementRestoreNvmCtx+0x22>
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f0d8:	2302      	movs	r3, #2
    }
}
 800f0da:	0018      	movs	r0, r3
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	b002      	add	sp, #8
 800f0e0:	bd80      	pop	{r7, pc}
 800f0e2:	46c0      	nop			; (mov r8, r8)
 800f0e4:	20000528 	.word	0x20000528

0800f0e8 <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b082      	sub	sp, #8
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
    *seNvmCtxSize = sizeof( SeNvmCtx );
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	22f1      	movs	r2, #241	; 0xf1
 800f0f4:	0092      	lsls	r2, r2, #2
 800f0f6:	601a      	str	r2, [r3, #0]
    return &SeNvmCtx;
 800f0f8:	4b02      	ldr	r3, [pc, #8]	; (800f104 <SecureElementGetNvmCtx+0x1c>)
}
 800f0fa:	0018      	movs	r0, r3
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	b002      	add	sp, #8
 800f100:	bd80      	pop	{r7, pc}
 800f102:	46c0      	nop			; (mov r8, r8)
 800f104:	20000528 	.word	0x20000528

0800f108 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800f108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f10a:	b089      	sub	sp, #36	; 0x24
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	0002      	movs	r2, r0
 800f110:	6039      	str	r1, [r7, #0]
 800f112:	1dfb      	adds	r3, r7, #7
 800f114:	701a      	strb	r2, [r3, #0]
    if( key == NULL )
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d101      	bne.n	800f120 <SecureElementSetKey+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f11c:	2302      	movs	r3, #2
 800f11e:	e072      	b.n	800f206 <SecureElementSetKey+0xfe>
    }

    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f120:	231f      	movs	r3, #31
 800f122:	18fb      	adds	r3, r7, r3
 800f124:	2200      	movs	r2, #0
 800f126:	701a      	strb	r2, [r3, #0]
 800f128:	e067      	b.n	800f1fa <SecureElementSetKey+0xf2>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 800f12a:	231f      	movs	r3, #31
 800f12c:	18fb      	adds	r3, r7, r3
 800f12e:	781a      	ldrb	r2, [r3, #0]
 800f130:	4837      	ldr	r0, [pc, #220]	; (800f210 <SecureElementSetKey+0x108>)
 800f132:	238b      	movs	r3, #139	; 0x8b
 800f134:	0099      	lsls	r1, r3, #2
 800f136:	0013      	movs	r3, r2
 800f138:	011b      	lsls	r3, r3, #4
 800f13a:	189b      	adds	r3, r3, r2
 800f13c:	18c3      	adds	r3, r0, r3
 800f13e:	185b      	adds	r3, r3, r1
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	1dfa      	adds	r2, r7, #7
 800f144:	7812      	ldrb	r2, [r2, #0]
 800f146:	429a      	cmp	r2, r3
 800f148:	d151      	bne.n	800f1ee <SecureElementSetKey+0xe6>
        {
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 800f14a:	1dfb      	adds	r3, r7, #7
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	2b80      	cmp	r3, #128	; 0x80
 800f150:	d00b      	beq.n	800f16a <SecureElementSetKey+0x62>
 800f152:	1dfb      	adds	r3, r7, #7
 800f154:	781b      	ldrb	r3, [r3, #0]
 800f156:	2b83      	cmp	r3, #131	; 0x83
 800f158:	d007      	beq.n	800f16a <SecureElementSetKey+0x62>
 800f15a:	1dfb      	adds	r3, r7, #7
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	2b86      	cmp	r3, #134	; 0x86
 800f160:	d003      	beq.n	800f16a <SecureElementSetKey+0x62>
 800f162:	1dfb      	adds	r3, r7, #7
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	2b89      	cmp	r3, #137	; 0x89
 800f168:	d12b      	bne.n	800f1c2 <SecureElementSetKey+0xba>
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800f16a:	251e      	movs	r5, #30
 800f16c:	197b      	adds	r3, r7, r5
 800f16e:	2206      	movs	r2, #6
 800f170:	701a      	strb	r2, [r3, #0]
                uint8_t decryptedKey[16] = { 0 };
 800f172:	260c      	movs	r6, #12
 800f174:	19bb      	adds	r3, r7, r6
 800f176:	0018      	movs	r0, r3
 800f178:	2310      	movs	r3, #16
 800f17a:	001a      	movs	r2, r3
 800f17c:	2100      	movs	r1, #0
 800f17e:	f00c fadb 	bl	801b738 <memset>

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800f182:	197c      	adds	r4, r7, r5
 800f184:	19bb      	adds	r3, r7, r6
 800f186:	6838      	ldr	r0, [r7, #0]
 800f188:	227f      	movs	r2, #127	; 0x7f
 800f18a:	2110      	movs	r1, #16
 800f18c:	f000 f8a8 	bl	800f2e0 <SecureElementAesEncrypt>
 800f190:	0003      	movs	r3, r0
 800f192:	7023      	strb	r3, [r4, #0]

                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 800f194:	231f      	movs	r3, #31
 800f196:	18fb      	adds	r3, r7, r3
 800f198:	781a      	ldrb	r2, [r3, #0]
 800f19a:	0013      	movs	r3, r2
 800f19c:	011b      	lsls	r3, r3, #4
 800f19e:	189b      	adds	r3, r3, r2
 800f1a0:	228a      	movs	r2, #138	; 0x8a
 800f1a2:	0092      	lsls	r2, r2, #2
 800f1a4:	189a      	adds	r2, r3, r2
 800f1a6:	4b1a      	ldr	r3, [pc, #104]	; (800f210 <SecureElementSetKey+0x108>)
 800f1a8:	18d3      	adds	r3, r2, r3
 800f1aa:	3305      	adds	r3, #5
 800f1ac:	19b9      	adds	r1, r7, r6
 800f1ae:	2210      	movs	r2, #16
 800f1b0:	0018      	movs	r0, r3
 800f1b2:	f00c fa3d 	bl	801b630 <memcpy1>
                SeNvmCtxChanged( );
 800f1b6:	4b17      	ldr	r3, [pc, #92]	; (800f214 <SecureElementSetKey+0x10c>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	4798      	blx	r3

                return retval;
 800f1bc:	197b      	adds	r3, r7, r5
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	e021      	b.n	800f206 <SecureElementSetKey+0xfe>
            }
            else
            {
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 800f1c2:	231f      	movs	r3, #31
 800f1c4:	18fb      	adds	r3, r7, r3
 800f1c6:	781a      	ldrb	r2, [r3, #0]
 800f1c8:	0013      	movs	r3, r2
 800f1ca:	011b      	lsls	r3, r3, #4
 800f1cc:	189b      	adds	r3, r3, r2
 800f1ce:	228a      	movs	r2, #138	; 0x8a
 800f1d0:	0092      	lsls	r2, r2, #2
 800f1d2:	189a      	adds	r2, r3, r2
 800f1d4:	4b0e      	ldr	r3, [pc, #56]	; (800f210 <SecureElementSetKey+0x108>)
 800f1d6:	18d3      	adds	r3, r2, r3
 800f1d8:	3305      	adds	r3, #5
 800f1da:	6839      	ldr	r1, [r7, #0]
 800f1dc:	2210      	movs	r2, #16
 800f1de:	0018      	movs	r0, r3
 800f1e0:	f00c fa26 	bl	801b630 <memcpy1>
                SeNvmCtxChanged( );
 800f1e4:	4b0b      	ldr	r3, [pc, #44]	; (800f214 <SecureElementSetKey+0x10c>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	e00b      	b.n	800f206 <SecureElementSetKey+0xfe>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f1ee:	211f      	movs	r1, #31
 800f1f0:	187b      	adds	r3, r7, r1
 800f1f2:	781a      	ldrb	r2, [r3, #0]
 800f1f4:	187b      	adds	r3, r7, r1
 800f1f6:	3201      	adds	r2, #1
 800f1f8:	701a      	strb	r2, [r3, #0]
 800f1fa:	231f      	movs	r3, #31
 800f1fc:	18fb      	adds	r3, r7, r3
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	2b17      	cmp	r3, #23
 800f202:	d992      	bls.n	800f12a <SecureElementSetKey+0x22>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f204:	2303      	movs	r3, #3
}
 800f206:	0018      	movs	r0, r3
 800f208:	46bd      	mov	sp, r7
 800f20a:	b009      	add	sp, #36	; 0x24
 800f20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f20e:	46c0      	nop			; (mov r8, r8)
 800f210:	20000528 	.word	0x20000528
 800f214:	200008ec 	.word	0x200008ec

0800f218 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 800f218:	b590      	push	{r4, r7, lr}
 800f21a:	b087      	sub	sp, #28
 800f21c:	af02      	add	r7, sp, #8
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	0019      	movs	r1, r3
 800f224:	1dbb      	adds	r3, r7, #6
 800f226:	801a      	strh	r2, [r3, #0]
 800f228:	1d7b      	adds	r3, r7, #5
 800f22a:	1c0a      	adds	r2, r1, #0
 800f22c:	701a      	strb	r2, [r3, #0]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800f22e:	1d7b      	adds	r3, r7, #5
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	2b7e      	cmp	r3, #126	; 0x7e
 800f234:	d901      	bls.n	800f23a <SecureElementComputeAesCmac+0x22>
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f236:	2303      	movs	r3, #3
 800f238:	e00b      	b.n	800f252 <SecureElementComputeAesCmac+0x3a>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800f23a:	1d7b      	adds	r3, r7, #5
 800f23c:	781c      	ldrb	r4, [r3, #0]
 800f23e:	1dbb      	adds	r3, r7, #6
 800f240:	881a      	ldrh	r2, [r3, #0]
 800f242:	68b9      	ldr	r1, [r7, #8]
 800f244:	68f8      	ldr	r0, [r7, #12]
 800f246:	6a3b      	ldr	r3, [r7, #32]
 800f248:	9300      	str	r3, [sp, #0]
 800f24a:	0023      	movs	r3, r4
 800f24c:	f7ff fd14 	bl	800ec78 <ComputeCmac>
 800f250:	0003      	movs	r3, r0
}
 800f252:	0018      	movs	r0, r3
 800f254:	46bd      	mov	sp, r7
 800f256:	b005      	add	sp, #20
 800f258:	bd90      	pop	{r4, r7, pc}

0800f25a <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 800f25a:	b5b0      	push	{r4, r5, r7, lr}
 800f25c:	b088      	sub	sp, #32
 800f25e:	af02      	add	r7, sp, #8
 800f260:	60f8      	str	r0, [r7, #12]
 800f262:	0008      	movs	r0, r1
 800f264:	607a      	str	r2, [r7, #4]
 800f266:	0019      	movs	r1, r3
 800f268:	230a      	movs	r3, #10
 800f26a:	18fb      	adds	r3, r7, r3
 800f26c:	1c02      	adds	r2, r0, #0
 800f26e:	801a      	strh	r2, [r3, #0]
 800f270:	2309      	movs	r3, #9
 800f272:	18fb      	adds	r3, r7, r3
 800f274:	1c0a      	adds	r2, r1, #0
 800f276:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL )
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d101      	bne.n	800f282 <SecureElementVerifyAesCmac+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f27e:	2302      	movs	r3, #2
 800f280:	e029      	b.n	800f2d6 <SecureElementVerifyAesCmac+0x7c>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800f282:	2517      	movs	r5, #23
 800f284:	197b      	adds	r3, r7, r5
 800f286:	2206      	movs	r2, #6
 800f288:	701a      	strb	r2, [r3, #0]
    uint32_t compCmac = 0;
 800f28a:	2300      	movs	r3, #0
 800f28c:	613b      	str	r3, [r7, #16]
    retval = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800f28e:	197c      	adds	r4, r7, r5
 800f290:	2309      	movs	r3, #9
 800f292:	18fb      	adds	r3, r7, r3
 800f294:	7818      	ldrb	r0, [r3, #0]
 800f296:	230a      	movs	r3, #10
 800f298:	18fb      	adds	r3, r7, r3
 800f29a:	881a      	ldrh	r2, [r3, #0]
 800f29c:	68f9      	ldr	r1, [r7, #12]
 800f29e:	2310      	movs	r3, #16
 800f2a0:	18fb      	adds	r3, r7, r3
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	0003      	movs	r3, r0
 800f2a6:	2000      	movs	r0, #0
 800f2a8:	f7ff fce6 	bl	800ec78 <ComputeCmac>
 800f2ac:	0003      	movs	r3, r0
 800f2ae:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f2b0:	197b      	adds	r3, r7, r5
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d003      	beq.n	800f2c0 <SecureElementVerifyAesCmac+0x66>
    {
        return retval;
 800f2b8:	2317      	movs	r3, #23
 800f2ba:	18fb      	adds	r3, r7, r3
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	e00a      	b.n	800f2d6 <SecureElementVerifyAesCmac+0x7c>
    }

    if( expectedCmac != compCmac )
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	687a      	ldr	r2, [r7, #4]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d003      	beq.n	800f2d0 <SecureElementVerifyAesCmac+0x76>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800f2c8:	2317      	movs	r3, #23
 800f2ca:	18fb      	adds	r3, r7, r3
 800f2cc:	2201      	movs	r2, #1
 800f2ce:	701a      	strb	r2, [r3, #0]
    }

    return retval;
 800f2d0:	2317      	movs	r3, #23
 800f2d2:	18fb      	adds	r3, r7, r3
 800f2d4:	781b      	ldrb	r3, [r3, #0]
}
 800f2d6:	0018      	movs	r0, r3
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	b006      	add	sp, #24
 800f2dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f2e0 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 800f2e0:	b5b0      	push	{r4, r5, r7, lr}
 800f2e2:	b086      	sub	sp, #24
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	60f8      	str	r0, [r7, #12]
 800f2e8:	0008      	movs	r0, r1
 800f2ea:	0011      	movs	r1, r2
 800f2ec:	607b      	str	r3, [r7, #4]
 800f2ee:	230a      	movs	r3, #10
 800f2f0:	18fb      	adds	r3, r7, r3
 800f2f2:	1c02      	adds	r2, r0, #0
 800f2f4:	801a      	strh	r2, [r3, #0]
 800f2f6:	2309      	movs	r3, #9
 800f2f8:	18fb      	adds	r3, r7, r3
 800f2fa:	1c0a      	adds	r2, r1, #0
 800f2fc:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || encBuffer == NULL )
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d002      	beq.n	800f30a <SecureElementAesEncrypt+0x2a>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d101      	bne.n	800f30e <SecureElementAesEncrypt+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f30a:	2302      	movs	r3, #2
 800f30c:	e04c      	b.n	800f3a8 <SecureElementAesEncrypt+0xc8>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800f30e:	230a      	movs	r3, #10
 800f310:	18fb      	adds	r3, r7, r3
 800f312:	881b      	ldrh	r3, [r3, #0]
 800f314:	220f      	movs	r2, #15
 800f316:	4013      	ands	r3, r2
 800f318:	b29b      	uxth	r3, r3
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d001      	beq.n	800f322 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f31e:	2305      	movs	r3, #5
 800f320:	e042      	b.n	800f3a8 <SecureElementAesEncrypt+0xc8>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 800f322:	4b23      	ldr	r3, [pc, #140]	; (800f3b0 <SecureElementAesEncrypt+0xd0>)
 800f324:	22f0      	movs	r2, #240	; 0xf0
 800f326:	2100      	movs	r1, #0
 800f328:	0018      	movs	r0, r3
 800f32a:	f00c f9bd 	bl	801b6a8 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800f32e:	2516      	movs	r5, #22
 800f330:	197c      	adds	r4, r7, r5
 800f332:	2310      	movs	r3, #16
 800f334:	18fa      	adds	r2, r7, r3
 800f336:	2309      	movs	r3, #9
 800f338:	18fb      	adds	r3, r7, r3
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	0011      	movs	r1, r2
 800f33e:	0018      	movs	r0, r3
 800f340:	f7ff fc56 	bl	800ebf0 <GetKeyByID>
 800f344:	0003      	movs	r3, r0
 800f346:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f348:	197b      	adds	r3, r7, r5
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d128      	bne.n	800f3a2 <SecureElementAesEncrypt+0xc2>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	3301      	adds	r3, #1
 800f354:	4a16      	ldr	r2, [pc, #88]	; (800f3b0 <SecureElementAesEncrypt+0xd0>)
 800f356:	2110      	movs	r1, #16
 800f358:	0018      	movs	r0, r3
 800f35a:	f7ff f87d 	bl	800e458 <aes_set_key>

        uint8_t block = 0;
 800f35e:	2317      	movs	r3, #23
 800f360:	18fb      	adds	r3, r7, r3
 800f362:	2200      	movs	r2, #0
 800f364:	701a      	strb	r2, [r3, #0]

        while( size != 0 )
 800f366:	e017      	b.n	800f398 <SecureElementAesEncrypt+0xb8>
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 800f368:	2417      	movs	r4, #23
 800f36a:	193b      	adds	r3, r7, r4
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	68fa      	ldr	r2, [r7, #12]
 800f370:	18d0      	adds	r0, r2, r3
 800f372:	193b      	adds	r3, r7, r4
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	687a      	ldr	r2, [r7, #4]
 800f378:	18d3      	adds	r3, r2, r3
 800f37a:	4a0d      	ldr	r2, [pc, #52]	; (800f3b0 <SecureElementAesEncrypt+0xd0>)
 800f37c:	0019      	movs	r1, r3
 800f37e:	f7ff f99d 	bl	800e6bc <aes_encrypt>
            block = block + 16;
 800f382:	193b      	adds	r3, r7, r4
 800f384:	193a      	adds	r2, r7, r4
 800f386:	7812      	ldrb	r2, [r2, #0]
 800f388:	3210      	adds	r2, #16
 800f38a:	701a      	strb	r2, [r3, #0]
            size = size - 16;
 800f38c:	220a      	movs	r2, #10
 800f38e:	18bb      	adds	r3, r7, r2
 800f390:	18ba      	adds	r2, r7, r2
 800f392:	8812      	ldrh	r2, [r2, #0]
 800f394:	3a10      	subs	r2, #16
 800f396:	801a      	strh	r2, [r3, #0]
        while( size != 0 )
 800f398:	230a      	movs	r3, #10
 800f39a:	18fb      	adds	r3, r7, r3
 800f39c:	881b      	ldrh	r3, [r3, #0]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d1e2      	bne.n	800f368 <SecureElementAesEncrypt+0x88>
        }
    }
    return retval;
 800f3a2:	2316      	movs	r3, #22
 800f3a4:	18fb      	adds	r3, r7, r3
 800f3a6:	781b      	ldrb	r3, [r3, #0]
}
 800f3a8:	0018      	movs	r0, r3
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	b006      	add	sp, #24
 800f3ae:	bdb0      	pop	{r4, r5, r7, pc}
 800f3b0:	20000548 	.word	0x20000548

0800f3b4 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 800f3b4:	b5b0      	push	{r4, r5, r7, lr}
 800f3b6:	b08a      	sub	sp, #40	; 0x28
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	60f8      	str	r0, [r7, #12]
 800f3bc:	60b9      	str	r1, [r7, #8]
 800f3be:	0019      	movs	r1, r3
 800f3c0:	1dfb      	adds	r3, r7, #7
 800f3c2:	701a      	strb	r2, [r3, #0]
 800f3c4:	1dbb      	adds	r3, r7, #6
 800f3c6:	1c0a      	adds	r2, r1, #0
 800f3c8:	701a      	strb	r2, [r3, #0]
    if( input == NULL )
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d101      	bne.n	800f3d4 <SecureElementDeriveAndStoreKey+0x20>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f3d0:	2302      	movs	r3, #2
 800f3d2:	e048      	b.n	800f466 <SecureElementDeriveAndStoreKey+0xb2>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800f3d4:	2327      	movs	r3, #39	; 0x27
 800f3d6:	18fb      	adds	r3, r7, r3
 800f3d8:	2206      	movs	r2, #6
 800f3da:	701a      	strb	r2, [r3, #0]
    uint8_t key[16] = { 0 };
 800f3dc:	2314      	movs	r3, #20
 800f3de:	18fb      	adds	r3, r7, r3
 800f3e0:	0018      	movs	r0, r3
 800f3e2:	2310      	movs	r3, #16
 800f3e4:	001a      	movs	r2, r3
 800f3e6:	2100      	movs	r1, #0
 800f3e8:	f00c f9a6 	bl	801b738 <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 800f3ec:	1dbb      	adds	r3, r7, #6
 800f3ee:	781b      	ldrb	r3, [r3, #0]
 800f3f0:	2b7f      	cmp	r3, #127	; 0x7f
 800f3f2:	d10e      	bne.n	800f412 <SecureElementDeriveAndStoreKey+0x5e>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 800f3f4:	1dfb      	adds	r3, r7, #7
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d104      	bne.n	800f406 <SecureElementDeriveAndStoreKey+0x52>
 800f3fc:	230c      	movs	r3, #12
 800f3fe:	18fb      	adds	r3, r7, r3
 800f400:	789b      	ldrb	r3, [r3, #2]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d003      	beq.n	800f40e <SecureElementDeriveAndStoreKey+0x5a>
 800f406:	1dfb      	adds	r3, r7, #7
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	2b02      	cmp	r3, #2
 800f40c:	d101      	bne.n	800f412 <SecureElementDeriveAndStoreKey+0x5e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f40e:	2303      	movs	r3, #3
 800f410:	e029      	b.n	800f466 <SecureElementDeriveAndStoreKey+0xb2>
        }
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800f412:	2527      	movs	r5, #39	; 0x27
 800f414:	197c      	adds	r4, r7, r5
 800f416:	2314      	movs	r3, #20
 800f418:	18f9      	adds	r1, r7, r3
 800f41a:	1dfb      	adds	r3, r7, #7
 800f41c:	781a      	ldrb	r2, [r3, #0]
 800f41e:	68b8      	ldr	r0, [r7, #8]
 800f420:	000b      	movs	r3, r1
 800f422:	2110      	movs	r1, #16
 800f424:	f7ff ff5c 	bl	800f2e0 <SecureElementAesEncrypt>
 800f428:	0003      	movs	r3, r0
 800f42a:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f42c:	197b      	adds	r3, r7, r5
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d003      	beq.n	800f43c <SecureElementDeriveAndStoreKey+0x88>
    {
        return retval;
 800f434:	2327      	movs	r3, #39	; 0x27
 800f436:	18fb      	adds	r3, r7, r3
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	e014      	b.n	800f466 <SecureElementDeriveAndStoreKey+0xb2>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800f43c:	2527      	movs	r5, #39	; 0x27
 800f43e:	197c      	adds	r4, r7, r5
 800f440:	2314      	movs	r3, #20
 800f442:	18fa      	adds	r2, r7, r3
 800f444:	1dbb      	adds	r3, r7, #6
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	0011      	movs	r1, r2
 800f44a:	0018      	movs	r0, r3
 800f44c:	f7ff fe5c 	bl	800f108 <SecureElementSetKey>
 800f450:	0003      	movs	r3, r0
 800f452:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f454:	197b      	adds	r3, r7, r5
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d003      	beq.n	800f464 <SecureElementDeriveAndStoreKey+0xb0>
    {
        return retval;
 800f45c:	2327      	movs	r3, #39	; 0x27
 800f45e:	18fb      	adds	r3, r7, r3
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	e000      	b.n	800f466 <SecureElementDeriveAndStoreKey+0xb2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f464:	2300      	movs	r3, #0
}
 800f466:	0018      	movs	r0, r3
 800f468:	46bd      	mov	sp, r7
 800f46a:	b00a      	add	sp, #40	; 0x28
 800f46c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f470 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d101      	bne.n	800f482 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f47e:	2302      	movs	r3, #2
 800f480:	e006      	b.n	800f490 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random( );
 800f482:	4b05      	ldr	r3, [pc, #20]	; (800f498 <SecureElementRandomNumber+0x28>)
 800f484:	69db      	ldr	r3, [r3, #28]
 800f486:	4798      	blx	r3
 800f488:	0002      	movs	r2, r0
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f48e:	2300      	movs	r3, #0
}
 800f490:	0018      	movs	r0, r3
 800f492:	46bd      	mov	sp, r7
 800f494:	b002      	add	sp, #8
 800f496:	bd80      	pop	{r7, pc}
 800f498:	0801cb08 	.word	0x0801cb08

0800f49c <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b082      	sub	sp, #8
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d101      	bne.n	800f4ae <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f4aa:	2302      	movs	r3, #2
 800f4ac:	e009      	b.n	800f4c2 <SecureElementSetDevEui+0x26>
    }
    memcpy1( SeNvmCtx.DevEui, devEui, SE_EUI_SIZE );
 800f4ae:	6879      	ldr	r1, [r7, #4]
 800f4b0:	4b06      	ldr	r3, [pc, #24]	; (800f4cc <SecureElementSetDevEui+0x30>)
 800f4b2:	2210      	movs	r2, #16
 800f4b4:	0018      	movs	r0, r3
 800f4b6:	f00c f8bb 	bl	801b630 <memcpy1>
    SeNvmCtxChanged( );
 800f4ba:	4b05      	ldr	r3, [pc, #20]	; (800f4d0 <SecureElementSetDevEui+0x34>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 800f4c0:	2300      	movs	r3, #0
}
 800f4c2:	0018      	movs	r0, r3
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	b002      	add	sp, #8
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	46c0      	nop			; (mov r8, r8)
 800f4cc:	20000528 	.word	0x20000528
 800f4d0:	200008ec 	.word	0x200008ec

0800f4d4 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	af00      	add	r7, sp, #0
    return SeNvmCtx.DevEui;
 800f4d8:	4b01      	ldr	r3, [pc, #4]	; (800f4e0 <SecureElementGetDevEui+0xc>)
}
 800f4da:	0018      	movs	r0, r3
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}
 800f4e0:	20000528 	.word	0x20000528

0800f4e4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d101      	bne.n	800f4f6 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f4f2:	2302      	movs	r3, #2
 800f4f4:	e009      	b.n	800f50a <SecureElementSetJoinEui+0x26>
    }
    memcpy1( SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE );
 800f4f6:	6879      	ldr	r1, [r7, #4]
 800f4f8:	4b06      	ldr	r3, [pc, #24]	; (800f514 <SecureElementSetJoinEui+0x30>)
 800f4fa:	2210      	movs	r2, #16
 800f4fc:	0018      	movs	r0, r3
 800f4fe:	f00c f897 	bl	801b630 <memcpy1>
    SeNvmCtxChanged( );
 800f502:	4b05      	ldr	r3, [pc, #20]	; (800f518 <SecureElementSetJoinEui+0x34>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 800f508:	2300      	movs	r3, #0
}
 800f50a:	0018      	movs	r0, r3
 800f50c:	46bd      	mov	sp, r7
 800f50e:	b002      	add	sp, #8
 800f510:	bd80      	pop	{r7, pc}
 800f512:	46c0      	nop			; (mov r8, r8)
 800f514:	20000538 	.word	0x20000538
 800f518:	200008ec 	.word	0x200008ec

0800f51c <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	af00      	add	r7, sp, #0
    return SeNvmCtx.JoinEui;
 800f520:	4b01      	ldr	r3, [pc, #4]	; (800f528 <SecureElementGetJoinEui+0xc>)
}
 800f522:	0018      	movs	r0, r3
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	20000538 	.word	0x20000538

0800f52c <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800f52c:	b5b0      	push	{r4, r5, r7, lr}
 800f52e:	b084      	sub	sp, #16
 800f530:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800f532:	f00b fea4 	bl	801b27e <TimerGetCurrentTime>
 800f536:	0002      	movs	r2, r0
 800f538:	4b1e      	ldr	r3, [pc, #120]	; (800f5b4 <OnRadioTxDone+0x88>)
 800f53a:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800f53c:	4d1e      	ldr	r5, [pc, #120]	; (800f5b8 <OnRadioTxDone+0x8c>)
 800f53e:	23ce      	movs	r3, #206	; 0xce
 800f540:	009c      	lsls	r4, r3, #2
 800f542:	003b      	movs	r3, r7
 800f544:	0018      	movs	r0, r3
 800f546:	f00b fcb0 	bl	801aeaa <SysTimeGet>
 800f54a:	003a      	movs	r2, r7
 800f54c:	192b      	adds	r3, r5, r4
 800f54e:	ca03      	ldmia	r2!, {r0, r1}
 800f550:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800f552:	4b1a      	ldr	r3, [pc, #104]	; (800f5bc <OnRadioTxDone+0x90>)
 800f554:	781a      	ldrb	r2, [r3, #0]
 800f556:	2110      	movs	r1, #16
 800f558:	430a      	orrs	r2, r1
 800f55a:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f55c:	4a16      	ldr	r2, [pc, #88]	; (800f5b8 <OnRadioTxDone+0x8c>)
 800f55e:	23d2      	movs	r3, #210	; 0xd2
 800f560:	009b      	lsls	r3, r3, #2
 800f562:	58d3      	ldr	r3, [r2, r3]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d00c      	beq.n	800f582 <OnRadioTxDone+0x56>
 800f568:	4a13      	ldr	r2, [pc, #76]	; (800f5b8 <OnRadioTxDone+0x8c>)
 800f56a:	23d2      	movs	r3, #210	; 0xd2
 800f56c:	009b      	lsls	r3, r3, #2
 800f56e:	58d3      	ldr	r3, [r2, r3]
 800f570:	68db      	ldr	r3, [r3, #12]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d005      	beq.n	800f582 <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f576:	4a10      	ldr	r2, [pc, #64]	; (800f5b8 <OnRadioTxDone+0x8c>)
 800f578:	23d2      	movs	r3, #210	; 0xd2
 800f57a:	009b      	lsls	r3, r3, #2
 800f57c:	58d3      	ldr	r3, [r2, r3]
 800f57e:	68db      	ldr	r3, [r3, #12]
 800f580:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 800f582:	2208      	movs	r2, #8
 800f584:	0014      	movs	r4, r2
 800f586:	18bb      	adds	r3, r7, r2
 800f588:	0018      	movs	r0, r3
 800f58a:	f00b fcc7 	bl	801af1c <SysTimeGetMcuTime>
 800f58e:	0022      	movs	r2, r4
 800f590:	18bb      	adds	r3, r7, r2
 800f592:	6819      	ldr	r1, [r3, #0]
 800f594:	18bb      	adds	r3, r7, r2
 800f596:	2204      	movs	r2, #4
 800f598:	5e9b      	ldrsh	r3, [r3, r2]
 800f59a:	001a      	movs	r2, r3
 800f59c:	4b08      	ldr	r3, [pc, #32]	; (800f5c0 <OnRadioTxDone+0x94>)
 800f59e:	0018      	movs	r0, r3
 800f5a0:	f00b ff3e 	bl	801b420 <TraceSend>
 800f5a4:	4b07      	ldr	r3, [pc, #28]	; (800f5c4 <OnRadioTxDone+0x98>)
 800f5a6:	0018      	movs	r0, r3
 800f5a8:	f00b ff3a 	bl	801b420 <TraceSend>
#endif
}
 800f5ac:	46c0      	nop			; (mov r8, r8)
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	b004      	add	sp, #16
 800f5b2:	bdb0      	pop	{r4, r5, r7, pc}
 800f5b4:	2000164c 	.word	0x2000164c
 800f5b8:	200008f0 	.word	0x200008f0
 800f5bc:	20000f54 	.word	0x20000f54
 800f5c0:	0801c3a8 	.word	0x0801c3a8
 800f5c4:	0801c3b4 	.word	0x0801c3b4

0800f5c8 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800f5c8:	b5b0      	push	{r4, r5, r7, lr}
 800f5ca:	b086      	sub	sp, #24
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	000c      	movs	r4, r1
 800f5d2:	0010      	movs	r0, r2
 800f5d4:	0019      	movs	r1, r3
 800f5d6:	250a      	movs	r5, #10
 800f5d8:	197b      	adds	r3, r7, r5
 800f5da:	1c22      	adds	r2, r4, #0
 800f5dc:	801a      	strh	r2, [r3, #0]
 800f5de:	2408      	movs	r4, #8
 800f5e0:	193b      	adds	r3, r7, r4
 800f5e2:	1c02      	adds	r2, r0, #0
 800f5e4:	801a      	strh	r2, [r3, #0]
 800f5e6:	1dfb      	adds	r3, r7, #7
 800f5e8:	1c0a      	adds	r2, r1, #0
 800f5ea:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f5ec:	f00b fe47 	bl	801b27e <TimerGetCurrentTime>
 800f5f0:	0002      	movs	r2, r0
 800f5f2:	4b21      	ldr	r3, [pc, #132]	; (800f678 <OnRadioRxDone+0xb0>)
 800f5f4:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800f5f6:	4b20      	ldr	r3, [pc, #128]	; (800f678 <OnRadioRxDone+0xb0>)
 800f5f8:	68fa      	ldr	r2, [r7, #12]
 800f5fa:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800f5fc:	4b1e      	ldr	r3, [pc, #120]	; (800f678 <OnRadioRxDone+0xb0>)
 800f5fe:	197a      	adds	r2, r7, r5
 800f600:	8812      	ldrh	r2, [r2, #0]
 800f602:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800f604:	4b1c      	ldr	r3, [pc, #112]	; (800f678 <OnRadioRxDone+0xb0>)
 800f606:	193a      	adds	r2, r7, r4
 800f608:	8812      	ldrh	r2, [r2, #0]
 800f60a:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800f60c:	4b1a      	ldr	r3, [pc, #104]	; (800f678 <OnRadioRxDone+0xb0>)
 800f60e:	1dfa      	adds	r2, r7, #7
 800f610:	7812      	ldrb	r2, [r2, #0]
 800f612:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f614:	4b19      	ldr	r3, [pc, #100]	; (800f67c <OnRadioRxDone+0xb4>)
 800f616:	781a      	ldrb	r2, [r3, #0]
 800f618:	2108      	movs	r1, #8
 800f61a:	430a      	orrs	r2, r1
 800f61c:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f61e:	4a18      	ldr	r2, [pc, #96]	; (800f680 <OnRadioRxDone+0xb8>)
 800f620:	23d2      	movs	r3, #210	; 0xd2
 800f622:	009b      	lsls	r3, r3, #2
 800f624:	58d3      	ldr	r3, [r2, r3]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d00c      	beq.n	800f644 <OnRadioRxDone+0x7c>
 800f62a:	4a15      	ldr	r2, [pc, #84]	; (800f680 <OnRadioRxDone+0xb8>)
 800f62c:	23d2      	movs	r3, #210	; 0xd2
 800f62e:	009b      	lsls	r3, r3, #2
 800f630:	58d3      	ldr	r3, [r2, r3]
 800f632:	68db      	ldr	r3, [r3, #12]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d005      	beq.n	800f644 <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f638:	4a11      	ldr	r2, [pc, #68]	; (800f680 <OnRadioRxDone+0xb8>)
 800f63a:	23d2      	movs	r3, #210	; 0xd2
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	58d3      	ldr	r3, [r2, r3]
 800f640:	68db      	ldr	r3, [r3, #12]
 800f642:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
 800f644:	2210      	movs	r2, #16
 800f646:	0014      	movs	r4, r2
 800f648:	18bb      	adds	r3, r7, r2
 800f64a:	0018      	movs	r0, r3
 800f64c:	f00b fc66 	bl	801af1c <SysTimeGetMcuTime>
 800f650:	0022      	movs	r2, r4
 800f652:	18bb      	adds	r3, r7, r2
 800f654:	6819      	ldr	r1, [r3, #0]
 800f656:	18bb      	adds	r3, r7, r2
 800f658:	2204      	movs	r2, #4
 800f65a:	5e9b      	ldrsh	r3, [r3, r2]
 800f65c:	001a      	movs	r2, r3
 800f65e:	4b09      	ldr	r3, [pc, #36]	; (800f684 <OnRadioRxDone+0xbc>)
 800f660:	0018      	movs	r0, r3
 800f662:	f00b fedd 	bl	801b420 <TraceSend>
 800f666:	4b08      	ldr	r3, [pc, #32]	; (800f688 <OnRadioRxDone+0xc0>)
 800f668:	0018      	movs	r0, r3
 800f66a:	f00b fed9 	bl	801b420 <TraceSend>
#endif
}
 800f66e:	46c0      	nop			; (mov r8, r8)
 800f670:	46bd      	mov	sp, r7
 800f672:	b006      	add	sp, #24
 800f674:	bdb0      	pop	{r4, r5, r7, pc}
 800f676:	46c0      	nop			; (mov r8, r8)
 800f678:	20001650 	.word	0x20001650
 800f67c:	20000f54 	.word	0x20000f54
 800f680:	200008f0 	.word	0x200008f0
 800f684:	0801c3a8 	.word	0x0801c3a8
 800f688:	0801c3c4 	.word	0x0801c3c4

0800f68c <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b082      	sub	sp, #8
 800f690:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f692:	4b17      	ldr	r3, [pc, #92]	; (800f6f0 <OnRadioTxTimeout+0x64>)
 800f694:	781a      	ldrb	r2, [r3, #0]
 800f696:	2104      	movs	r1, #4
 800f698:	430a      	orrs	r2, r1
 800f69a:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f69c:	4a15      	ldr	r2, [pc, #84]	; (800f6f4 <OnRadioTxTimeout+0x68>)
 800f69e:	23d2      	movs	r3, #210	; 0xd2
 800f6a0:	009b      	lsls	r3, r3, #2
 800f6a2:	58d3      	ldr	r3, [r2, r3]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d00c      	beq.n	800f6c2 <OnRadioTxTimeout+0x36>
 800f6a8:	4a12      	ldr	r2, [pc, #72]	; (800f6f4 <OnRadioTxTimeout+0x68>)
 800f6aa:	23d2      	movs	r3, #210	; 0xd2
 800f6ac:	009b      	lsls	r3, r3, #2
 800f6ae:	58d3      	ldr	r3, [r2, r3]
 800f6b0:	68db      	ldr	r3, [r3, #12]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d005      	beq.n	800f6c2 <OnRadioTxTimeout+0x36>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f6b6:	4a0f      	ldr	r2, [pc, #60]	; (800f6f4 <OnRadioTxTimeout+0x68>)
 800f6b8:	23d2      	movs	r3, #210	; 0xd2
 800f6ba:	009b      	lsls	r3, r3, #2
 800f6bc:	58d3      	ldr	r3, [r2, r3]
 800f6be:	68db      	ldr	r3, [r3, #12]
 800f6c0:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
 800f6c2:	003b      	movs	r3, r7
 800f6c4:	0018      	movs	r0, r3
 800f6c6:	f00b fc29 	bl	801af1c <SysTimeGetMcuTime>
 800f6ca:	003b      	movs	r3, r7
 800f6cc:	6819      	ldr	r1, [r3, #0]
 800f6ce:	003b      	movs	r3, r7
 800f6d0:	2204      	movs	r2, #4
 800f6d2:	5e9b      	ldrsh	r3, [r3, r2]
 800f6d4:	001a      	movs	r2, r3
 800f6d6:	4b08      	ldr	r3, [pc, #32]	; (800f6f8 <OnRadioTxTimeout+0x6c>)
 800f6d8:	0018      	movs	r0, r3
 800f6da:	f00b fea1 	bl	801b420 <TraceSend>
 800f6de:	4b07      	ldr	r3, [pc, #28]	; (800f6fc <OnRadioTxTimeout+0x70>)
 800f6e0:	0018      	movs	r0, r3
 800f6e2:	f00b fe9d 	bl	801b420 <TraceSend>
#endif
}
 800f6e6:	46c0      	nop			; (mov r8, r8)
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	b002      	add	sp, #8
 800f6ec:	bd80      	pop	{r7, pc}
 800f6ee:	46c0      	nop			; (mov r8, r8)
 800f6f0:	20000f54 	.word	0x20000f54
 800f6f4:	200008f0 	.word	0x200008f0
 800f6f8:	0801c3a8 	.word	0x0801c3a8
 800f6fc:	0801c3d4 	.word	0x0801c3d4

0800f700 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f700:	b580      	push	{r7, lr}
 800f702:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f704:	4b0d      	ldr	r3, [pc, #52]	; (800f73c <OnRadioRxError+0x3c>)
 800f706:	781a      	ldrb	r2, [r3, #0]
 800f708:	2102      	movs	r1, #2
 800f70a:	430a      	orrs	r2, r1
 800f70c:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f70e:	4a0c      	ldr	r2, [pc, #48]	; (800f740 <OnRadioRxError+0x40>)
 800f710:	23d2      	movs	r3, #210	; 0xd2
 800f712:	009b      	lsls	r3, r3, #2
 800f714:	58d3      	ldr	r3, [r2, r3]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d00c      	beq.n	800f734 <OnRadioRxError+0x34>
 800f71a:	4a09      	ldr	r2, [pc, #36]	; (800f740 <OnRadioRxError+0x40>)
 800f71c:	23d2      	movs	r3, #210	; 0xd2
 800f71e:	009b      	lsls	r3, r3, #2
 800f720:	58d3      	ldr	r3, [r2, r3]
 800f722:	68db      	ldr	r3, [r3, #12]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d005      	beq.n	800f734 <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f728:	4a05      	ldr	r2, [pc, #20]	; (800f740 <OnRadioRxError+0x40>)
 800f72a:	23d2      	movs	r3, #210	; 0xd2
 800f72c:	009b      	lsls	r3, r3, #2
 800f72e:	58d3      	ldr	r3, [r2, r3]
 800f730:	68db      	ldr	r3, [r3, #12]
 800f732:	4798      	blx	r3
    }
}
 800f734:	46c0      	nop			; (mov r8, r8)
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}
 800f73a:	46c0      	nop			; (mov r8, r8)
 800f73c:	20000f54 	.word	0x20000f54
 800f740:	200008f0 	.word	0x200008f0

0800f744 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f74a:	4b17      	ldr	r3, [pc, #92]	; (800f7a8 <OnRadioRxTimeout+0x64>)
 800f74c:	781a      	ldrb	r2, [r3, #0]
 800f74e:	2101      	movs	r1, #1
 800f750:	430a      	orrs	r2, r1
 800f752:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f754:	4a15      	ldr	r2, [pc, #84]	; (800f7ac <OnRadioRxTimeout+0x68>)
 800f756:	23d2      	movs	r3, #210	; 0xd2
 800f758:	009b      	lsls	r3, r3, #2
 800f75a:	58d3      	ldr	r3, [r2, r3]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d00c      	beq.n	800f77a <OnRadioRxTimeout+0x36>
 800f760:	4a12      	ldr	r2, [pc, #72]	; (800f7ac <OnRadioRxTimeout+0x68>)
 800f762:	23d2      	movs	r3, #210	; 0xd2
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	58d3      	ldr	r3, [r2, r3]
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d005      	beq.n	800f77a <OnRadioRxTimeout+0x36>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f76e:	4a0f      	ldr	r2, [pc, #60]	; (800f7ac <OnRadioRxTimeout+0x68>)
 800f770:	23d2      	movs	r3, #210	; 0xd2
 800f772:	009b      	lsls	r3, r3, #2
 800f774:	58d3      	ldr	r3, [r2, r3]
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
 800f77a:	003b      	movs	r3, r7
 800f77c:	0018      	movs	r0, r3
 800f77e:	f00b fbcd 	bl	801af1c <SysTimeGetMcuTime>
 800f782:	003b      	movs	r3, r7
 800f784:	6819      	ldr	r1, [r3, #0]
 800f786:	003b      	movs	r3, r7
 800f788:	2204      	movs	r2, #4
 800f78a:	5e9b      	ldrsh	r3, [r3, r2]
 800f78c:	001a      	movs	r2, r3
 800f78e:	4b08      	ldr	r3, [pc, #32]	; (800f7b0 <OnRadioRxTimeout+0x6c>)
 800f790:	0018      	movs	r0, r3
 800f792:	f00b fe45 	bl	801b420 <TraceSend>
 800f796:	4b07      	ldr	r3, [pc, #28]	; (800f7b4 <OnRadioRxTimeout+0x70>)
 800f798:	0018      	movs	r0, r3
 800f79a:	f00b fe41 	bl	801b420 <TraceSend>
#endif
}
 800f79e:	46c0      	nop			; (mov r8, r8)
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	b002      	add	sp, #8
 800f7a4:	bd80      	pop	{r7, pc}
 800f7a6:	46c0      	nop			; (mov r8, r8)
 800f7a8:	20000f54 	.word	0x20000f54
 800f7ac:	200008f0 	.word	0x200008f0
 800f7b0:	0801c3a8 	.word	0x0801c3a8
 800f7b4:	0801c3e4 	.word	0x0801c3e4

0800f7b8 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f7bc:	4b0a      	ldr	r3, [pc, #40]	; (800f7e8 <UpdateRxSlotIdleState+0x30>)
 800f7be:	4a0b      	ldr	r2, [pc, #44]	; (800f7ec <UpdateRxSlotIdleState+0x34>)
 800f7c0:	589b      	ldr	r3, [r3, r2]
 800f7c2:	22f0      	movs	r2, #240	; 0xf0
 800f7c4:	5c9b      	ldrb	r3, [r3, r2]
 800f7c6:	2b02      	cmp	r3, #2
 800f7c8:	d005      	beq.n	800f7d6 <UpdateRxSlotIdleState+0x1e>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f7ca:	4a07      	ldr	r2, [pc, #28]	; (800f7e8 <UpdateRxSlotIdleState+0x30>)
 800f7cc:	2390      	movs	r3, #144	; 0x90
 800f7ce:	00db      	lsls	r3, r3, #3
 800f7d0:	2106      	movs	r1, #6
 800f7d2:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f7d4:	e004      	b.n	800f7e0 <UpdateRxSlotIdleState+0x28>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f7d6:	4a04      	ldr	r2, [pc, #16]	; (800f7e8 <UpdateRxSlotIdleState+0x30>)
 800f7d8:	2390      	movs	r3, #144	; 0x90
 800f7da:	00db      	lsls	r3, r3, #3
 800f7dc:	2102      	movs	r1, #2
 800f7de:	54d1      	strb	r1, [r2, r3]
}
 800f7e0:	46c0      	nop			; (mov r8, r8)
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	46c0      	nop			; (mov r8, r8)
 800f7e8:	200008f0 	.word	0x200008f0
 800f7ec:	00000484 	.word	0x00000484

0800f7f0 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b084      	sub	sp, #16
 800f7f4:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f7f6:	4b4a      	ldr	r3, [pc, #296]	; (800f920 <ProcessRadioTxDone+0x130>)
 800f7f8:	4a4a      	ldr	r2, [pc, #296]	; (800f924 <ProcessRadioTxDone+0x134>)
 800f7fa:	589b      	ldr	r3, [r3, r2]
 800f7fc:	22f0      	movs	r2, #240	; 0xf0
 800f7fe:	5c9b      	ldrb	r3, [r3, r2]
 800f800:	2b02      	cmp	r3, #2
 800f802:	d002      	beq.n	800f80a <ProcessRadioTxDone+0x1a>
    {
        Radio.Sleep( );
 800f804:	4b48      	ldr	r3, [pc, #288]	; (800f928 <ProcessRadioTxDone+0x138>)
 800f806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f808:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800f80a:	4a45      	ldr	r2, [pc, #276]	; (800f920 <ProcessRadioTxDone+0x130>)
 800f80c:	23ec      	movs	r3, #236	; 0xec
 800f80e:	009b      	lsls	r3, r3, #2
 800f810:	58d2      	ldr	r2, [r2, r3]
 800f812:	4b46      	ldr	r3, [pc, #280]	; (800f92c <ProcessRadioTxDone+0x13c>)
 800f814:	0011      	movs	r1, r2
 800f816:	0018      	movs	r0, r3
 800f818:	f00b fd0c 	bl	801b234 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f81c:	4b43      	ldr	r3, [pc, #268]	; (800f92c <ProcessRadioTxDone+0x13c>)
 800f81e:	0018      	movs	r0, r3
 800f820:	f00b fbb6 	bl	801af90 <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800f824:	4a3e      	ldr	r2, [pc, #248]	; (800f920 <ProcessRadioTxDone+0x130>)
 800f826:	23ed      	movs	r3, #237	; 0xed
 800f828:	009b      	lsls	r3, r3, #2
 800f82a:	58d2      	ldr	r2, [r2, r3]
 800f82c:	4b40      	ldr	r3, [pc, #256]	; (800f930 <ProcessRadioTxDone+0x140>)
 800f82e:	0011      	movs	r1, r2
 800f830:	0018      	movs	r0, r3
 800f832:	f00b fcff 	bl	801b234 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f836:	4b3e      	ldr	r3, [pc, #248]	; (800f930 <ProcessRadioTxDone+0x140>)
 800f838:	0018      	movs	r0, r3
 800f83a:	f00b fba9 	bl	801af90 <TimerStart>

    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800f83e:	4b38      	ldr	r3, [pc, #224]	; (800f920 <ProcessRadioTxDone+0x130>)
 800f840:	4a38      	ldr	r2, [pc, #224]	; (800f924 <ProcessRadioTxDone+0x134>)
 800f842:	589b      	ldr	r3, [r3, r2]
 800f844:	22f0      	movs	r2, #240	; 0xf0
 800f846:	5c9b      	ldrb	r3, [r3, r2]
 800f848:	2b02      	cmp	r3, #2
 800f84a:	d004      	beq.n	800f856 <ProcessRadioTxDone+0x66>
 800f84c:	4b34      	ldr	r3, [pc, #208]	; (800f920 <ProcessRadioTxDone+0x130>)
 800f84e:	4a39      	ldr	r2, [pc, #228]	; (800f934 <ProcessRadioTxDone+0x144>)
 800f850:	5c9b      	ldrb	r3, [r3, r2]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d021      	beq.n	800f89a <ProcessRadioTxDone+0xaa>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800f856:	210c      	movs	r1, #12
 800f858:	187b      	adds	r3, r7, r1
 800f85a:	2216      	movs	r2, #22
 800f85c:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f85e:	4b30      	ldr	r3, [pc, #192]	; (800f920 <ProcessRadioTxDone+0x130>)
 800f860:	4a30      	ldr	r2, [pc, #192]	; (800f924 <ProcessRadioTxDone+0x134>)
 800f862:	589b      	ldr	r3, [r3, r2]
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	187a      	adds	r2, r7, r1
 800f868:	0011      	movs	r1, r2
 800f86a:	0018      	movs	r0, r3
 800f86c:	f007 fe62 	bl	8017534 <RegionGetPhyParam>
 800f870:	0003      	movs	r3, r0
 800f872:	001a      	movs	r2, r3
 800f874:	2108      	movs	r1, #8
 800f876:	187b      	adds	r3, r7, r1
 800f878:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f87a:	4a29      	ldr	r2, [pc, #164]	; (800f920 <ProcessRadioTxDone+0x130>)
 800f87c:	23ed      	movs	r3, #237	; 0xed
 800f87e:	009b      	lsls	r3, r3, #2
 800f880:	58d2      	ldr	r2, [r2, r3]
 800f882:	187b      	adds	r3, r7, r1
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	18d2      	adds	r2, r2, r3
 800f888:	4b2b      	ldr	r3, [pc, #172]	; (800f938 <ProcessRadioTxDone+0x148>)
 800f88a:	0011      	movs	r1, r2
 800f88c:	0018      	movs	r0, r3
 800f88e:	f00b fcd1 	bl	801b234 <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800f892:	4b29      	ldr	r3, [pc, #164]	; (800f938 <ProcessRadioTxDone+0x148>)
 800f894:	0018      	movs	r0, r3
 800f896:	f00b fb7b 	bl	801af90 <TimerStart>
    }

    // Store last Tx channel
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 800f89a:	4b21      	ldr	r3, [pc, #132]	; (800f920 <ProcessRadioTxDone+0x130>)
 800f89c:	4a21      	ldr	r2, [pc, #132]	; (800f924 <ProcessRadioTxDone+0x134>)
 800f89e:	589a      	ldr	r2, [r3, r2]
 800f8a0:	4b1f      	ldr	r3, [pc, #124]	; (800f920 <ProcessRadioTxDone+0x130>)
 800f8a2:	4926      	ldr	r1, [pc, #152]	; (800f93c <ProcessRadioTxDone+0x14c>)
 800f8a4:	5c59      	ldrb	r1, [r3, r1]
 800f8a6:	239f      	movs	r3, #159	; 0x9f
 800f8a8:	005b      	lsls	r3, r3, #1
 800f8aa:	54d1      	strb	r1, [r2, r3]
    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f8ac:	4b1c      	ldr	r3, [pc, #112]	; (800f920 <ProcessRadioTxDone+0x130>)
 800f8ae:	4a23      	ldr	r2, [pc, #140]	; (800f93c <ProcessRadioTxDone+0x14c>)
 800f8b0:	5c9a      	ldrb	r2, [r3, r2]
 800f8b2:	003b      	movs	r3, r7
 800f8b4:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800f8b6:	4b1a      	ldr	r3, [pc, #104]	; (800f920 <ProcessRadioTxDone+0x130>)
 800f8b8:	4a1a      	ldr	r2, [pc, #104]	; (800f924 <ProcessRadioTxDone+0x134>)
 800f8ba:	589a      	ldr	r2, [r3, r2]
 800f8bc:	23ea      	movs	r3, #234	; 0xea
 800f8be:	005b      	lsls	r3, r3, #1
 800f8c0:	5cd3      	ldrb	r3, [r2, r3]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d103      	bne.n	800f8ce <ProcessRadioTxDone+0xde>
    {
        txDone.Joined  = false;
 800f8c6:	003b      	movs	r3, r7
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	705a      	strb	r2, [r3, #1]
 800f8cc:	e002      	b.n	800f8d4 <ProcessRadioTxDone+0xe4>
    }
    else
    {
        txDone.Joined  = true;
 800f8ce:	003b      	movs	r3, r7
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	705a      	strb	r2, [r3, #1]
    }
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f8d4:	4b1a      	ldr	r3, [pc, #104]	; (800f940 <ProcessRadioTxDone+0x150>)
 800f8d6:	681a      	ldr	r2, [r3, #0]
 800f8d8:	003b      	movs	r3, r7
 800f8da:	605a      	str	r2, [r3, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800f8dc:	4b10      	ldr	r3, [pc, #64]	; (800f920 <ProcessRadioTxDone+0x130>)
 800f8de:	4a11      	ldr	r2, [pc, #68]	; (800f924 <ProcessRadioTxDone+0x134>)
 800f8e0:	589b      	ldr	r3, [r3, r2]
 800f8e2:	781b      	ldrb	r3, [r3, #0]
 800f8e4:	003a      	movs	r2, r7
 800f8e6:	0011      	movs	r1, r2
 800f8e8:	0018      	movs	r0, r3
 800f8ea:	f007 fe4b 	bl	8017584 <RegionSetBandTxDone>
    // Update Aggregated last tx done time
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800f8ee:	4b0c      	ldr	r3, [pc, #48]	; (800f920 <ProcessRadioTxDone+0x130>)
 800f8f0:	4a0c      	ldr	r2, [pc, #48]	; (800f924 <ProcessRadioTxDone+0x134>)
 800f8f2:	589a      	ldr	r2, [r3, r2]
 800f8f4:	4b12      	ldr	r3, [pc, #72]	; (800f940 <ProcessRadioTxDone+0x150>)
 800f8f6:	6819      	ldr	r1, [r3, #0]
 800f8f8:	23e2      	movs	r3, #226	; 0xe2
 800f8fa:	005b      	lsls	r3, r3, #1
 800f8fc:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == false )
 800f8fe:	4b08      	ldr	r3, [pc, #32]	; (800f920 <ProcessRadioTxDone+0x130>)
 800f900:	4a0c      	ldr	r2, [pc, #48]	; (800f934 <ProcessRadioTxDone+0x144>)
 800f902:	5c9b      	ldrb	r3, [r3, r2]
 800f904:	2201      	movs	r2, #1
 800f906:	4053      	eors	r3, r2
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d003      	beq.n	800f916 <ProcessRadioTxDone+0x126>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f90e:	4b04      	ldr	r3, [pc, #16]	; (800f920 <ProcessRadioTxDone+0x130>)
 800f910:	4a0c      	ldr	r2, [pc, #48]	; (800f944 <ProcessRadioTxDone+0x154>)
 800f912:	2100      	movs	r1, #0
 800f914:	5499      	strb	r1, [r3, r2]
    }
}
 800f916:	46c0      	nop			; (mov r8, r8)
 800f918:	46bd      	mov	sp, r7
 800f91a:	b004      	add	sp, #16
 800f91c:	bd80      	pop	{r7, pc}
 800f91e:	46c0      	nop			; (mov r8, r8)
 800f920:	200008f0 	.word	0x200008f0
 800f924:	00000484 	.word	0x00000484
 800f928:	0801cb08 	.word	0x0801cb08
 800f92c:	20000c70 	.word	0x20000c70
 800f930:	20000c88 	.word	0x20000c88
 800f934:	00000414 	.word	0x00000414
 800f938:	20000ce8 	.word	0x20000ce8
 800f93c:	00000415 	.word	0x00000415
 800f940:	2000164c 	.word	0x2000164c
 800f944:	0000043d 	.word	0x0000043d

0800f948 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f94c:	4a11      	ldr	r2, [pc, #68]	; (800f994 <PrepareRxDoneAbort+0x4c>)
 800f94e:	23d0      	movs	r3, #208	; 0xd0
 800f950:	009b      	lsls	r3, r3, #2
 800f952:	58d3      	ldr	r3, [r2, r3]
 800f954:	2280      	movs	r2, #128	; 0x80
 800f956:	431a      	orrs	r2, r3
 800f958:	0011      	movs	r1, r2
 800f95a:	4a0e      	ldr	r2, [pc, #56]	; (800f994 <PrepareRxDoneAbort+0x4c>)
 800f95c:	23d0      	movs	r3, #208	; 0xd0
 800f95e:	009b      	lsls	r3, r3, #2
 800f960:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == true )
 800f962:	4b0c      	ldr	r3, [pc, #48]	; (800f994 <PrepareRxDoneAbort+0x4c>)
 800f964:	4a0c      	ldr	r2, [pc, #48]	; (800f998 <PrepareRxDoneAbort+0x50>)
 800f966:	5c9b      	ldrb	r3, [r3, r2]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d002      	beq.n	800f972 <PrepareRxDoneAbort+0x2a>
    {
        OnAckTimeoutTimerEvent( NULL );
 800f96c:	2000      	movs	r0, #0
 800f96e:	f001 f9bb 	bl	8010ce8 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f972:	4b08      	ldr	r3, [pc, #32]	; (800f994 <PrepareRxDoneAbort+0x4c>)
 800f974:	4a09      	ldr	r2, [pc, #36]	; (800f99c <PrepareRxDoneAbort+0x54>)
 800f976:	5c99      	ldrb	r1, [r3, r2]
 800f978:	2002      	movs	r0, #2
 800f97a:	4301      	orrs	r1, r0
 800f97c:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f97e:	4b05      	ldr	r3, [pc, #20]	; (800f994 <PrepareRxDoneAbort+0x4c>)
 800f980:	4a06      	ldr	r2, [pc, #24]	; (800f99c <PrepareRxDoneAbort+0x54>)
 800f982:	5c99      	ldrb	r1, [r3, r2]
 800f984:	2020      	movs	r0, #32
 800f986:	4301      	orrs	r1, r0
 800f988:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800f98a:	f7ff ff15 	bl	800f7b8 <UpdateRxSlotIdleState>
}
 800f98e:	46c0      	nop			; (mov r8, r8)
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}
 800f994:	200008f0 	.word	0x200008f0
 800f998:	00000414 	.word	0x00000414
 800f99c:	00000481 	.word	0x00000481

0800f9a0 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9a2:	b0a7      	sub	sp, #156	; 0x9c
 800f9a4:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f9a6:	2380      	movs	r3, #128	; 0x80
 800f9a8:	18fb      	adds	r3, r7, r3
 800f9aa:	2213      	movs	r2, #19
 800f9ac:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f9ae:	4bdd      	ldr	r3, [pc, #884]	; (800fd24 <ProcessRadioRxDone+0x384>)
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800f9b4:	247a      	movs	r4, #122	; 0x7a
 800f9b6:	193b      	adds	r3, r7, r4
 800f9b8:	4ada      	ldr	r2, [pc, #872]	; (800fd24 <ProcessRadioRxDone+0x384>)
 800f9ba:	8912      	ldrh	r2, [r2, #8]
 800f9bc:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800f9be:	2078      	movs	r0, #120	; 0x78
 800f9c0:	183b      	adds	r3, r7, r0
 800f9c2:	4ad8      	ldr	r2, [pc, #864]	; (800fd24 <ProcessRadioRxDone+0x384>)
 800f9c4:	8952      	ldrh	r2, [r2, #10]
 800f9c6:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800f9c8:	2577      	movs	r5, #119	; 0x77
 800f9ca:	197b      	adds	r3, r7, r5
 800f9cc:	4ad5      	ldr	r2, [pc, #852]	; (800fd24 <ProcessRadioRxDone+0x384>)
 800f9ce:	7b12      	ldrb	r2, [r2, #12]
 800f9d0:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800f9d2:	2376      	movs	r3, #118	; 0x76
 800f9d4:	18fb      	adds	r3, r7, r3
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	60bb      	str	r3, [r7, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800f9de:	4bd2      	ldr	r3, [pc, #840]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800f9e0:	4ad2      	ldr	r2, [pc, #840]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800f9e2:	589b      	ldr	r3, [r3, r2]
 800f9e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f9e6:	2284      	movs	r2, #132	; 0x84
 800f9e8:	18ba      	adds	r2, r7, r2
 800f9ea:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800f9ec:	2383      	movs	r3, #131	; 0x83
 800f9ee:	18fb      	adds	r3, r7, r3
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f9f4:	2382      	movs	r3, #130	; 0x82
 800f9f6:	18fb      	adds	r3, r7, r3
 800f9f8:	2204      	movs	r2, #4
 800f9fa:	701a      	strb	r2, [r3, #0]
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800f9fc:	4aca      	ldr	r2, [pc, #808]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800f9fe:	2388      	movs	r3, #136	; 0x88
 800fa00:	00db      	lsls	r3, r3, #3
 800fa02:	2100      	movs	r1, #0
 800fa04:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800fa06:	4bc8      	ldr	r3, [pc, #800]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fa08:	183a      	adds	r2, r7, r0
 800fa0a:	49c9      	ldr	r1, [pc, #804]	; (800fd30 <ProcessRadioRxDone+0x390>)
 800fa0c:	8812      	ldrh	r2, [r2, #0]
 800fa0e:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800fa10:	4bc5      	ldr	r3, [pc, #788]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fa12:	197a      	adds	r2, r7, r5
 800fa14:	49c7      	ldr	r1, [pc, #796]	; (800fd34 <ProcessRadioRxDone+0x394>)
 800fa16:	7812      	ldrb	r2, [r2, #0]
 800fa18:	545a      	strb	r2, [r3, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800fa1a:	4ac3      	ldr	r2, [pc, #780]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fa1c:	2390      	movs	r3, #144	; 0x90
 800fa1e:	00db      	lsls	r3, r3, #3
 800fa20:	5cd1      	ldrb	r1, [r2, r3]
 800fa22:	4bc1      	ldr	r3, [pc, #772]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fa24:	4ac4      	ldr	r2, [pc, #784]	; (800fd38 <ProcessRadioRxDone+0x398>)
 800fa26:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800fa28:	4bbf      	ldr	r3, [pc, #764]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fa2a:	4ac4      	ldr	r2, [pc, #784]	; (800fd3c <ProcessRadioRxDone+0x39c>)
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800fa30:	4bbd      	ldr	r3, [pc, #756]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fa32:	4ac3      	ldr	r2, [pc, #780]	; (800fd40 <ProcessRadioRxDone+0x3a0>)
 800fa34:	2100      	movs	r1, #0
 800fa36:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800fa38:	4bbb      	ldr	r3, [pc, #748]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fa3a:	4ac2      	ldr	r2, [pc, #776]	; (800fd44 <ProcessRadioRxDone+0x3a4>)
 800fa3c:	2100      	movs	r1, #0
 800fa3e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800fa40:	4bb9      	ldr	r3, [pc, #740]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fa42:	4ac1      	ldr	r2, [pc, #772]	; (800fd48 <ProcessRadioRxDone+0x3a8>)
 800fa44:	2100      	movs	r1, #0
 800fa46:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 800fa48:	4ab7      	ldr	r2, [pc, #732]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fa4a:	2385      	movs	r3, #133	; 0x85
 800fa4c:	00db      	lsls	r3, r3, #3
 800fa4e:	2100      	movs	r1, #0
 800fa50:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxData = false;
 800fa52:	4bb5      	ldr	r3, [pc, #724]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fa54:	4abd      	ldr	r2, [pc, #756]	; (800fd4c <ProcessRadioRxDone+0x3ac>)
 800fa56:	2100      	movs	r1, #0
 800fa58:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800fa5a:	4bb3      	ldr	r3, [pc, #716]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fa5c:	4abc      	ldr	r2, [pc, #752]	; (800fd50 <ProcessRadioRxDone+0x3b0>)
 800fa5e:	2100      	movs	r1, #0
 800fa60:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800fa62:	4ab1      	ldr	r2, [pc, #708]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fa64:	2386      	movs	r3, #134	; 0x86
 800fa66:	00db      	lsls	r3, r3, #3
 800fa68:	2100      	movs	r1, #0
 800fa6a:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800fa6c:	4bae      	ldr	r3, [pc, #696]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fa6e:	4ab9      	ldr	r2, [pc, #740]	; (800fd54 <ProcessRadioRxDone+0x3b4>)
 800fa70:	2100      	movs	r1, #0
 800fa72:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 800fa74:	4bac      	ldr	r3, [pc, #688]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fa76:	4ab8      	ldr	r2, [pc, #736]	; (800fd58 <ProcessRadioRxDone+0x3b8>)
 800fa78:	2100      	movs	r1, #0
 800fa7a:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800fa7c:	4aaa      	ldr	r2, [pc, #680]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fa7e:	2387      	movs	r3, #135	; 0x87
 800fa80:	00db      	lsls	r3, r3, #3
 800fa82:	2100      	movs	r1, #0
 800fa84:	54d1      	strb	r1, [r2, r3]

    Radio.Sleep( );
 800fa86:	4bb5      	ldr	r3, [pc, #724]	; (800fd5c <ProcessRadioRxDone+0x3bc>)
 800fa88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa8a:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800fa8c:	4bb4      	ldr	r3, [pc, #720]	; (800fd60 <ProcessRadioRxDone+0x3c0>)
 800fa8e:	0018      	movs	r0, r3
 800fa90:	f00b fb56 	bl	801b140 <TimerStop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800fa94:	193b      	adds	r3, r7, r4
 800fa96:	881a      	ldrh	r2, [r3, #0]
 800fa98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa9a:	0011      	movs	r1, r2
 800fa9c:	0018      	movs	r0, r3
 800fa9e:	f005 fabc 	bl	801501a <LoRaMacClassBRxBeacon>
 800faa2:	1e03      	subs	r3, r0, #0
 800faa4:	d00e      	beq.n	800fac4 <ProcessRadioRxDone+0x124>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800faa6:	4ba0      	ldr	r3, [pc, #640]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800faa8:	2278      	movs	r2, #120	; 0x78
 800faaa:	18ba      	adds	r2, r7, r2
 800faac:	49ad      	ldr	r1, [pc, #692]	; (800fd64 <ProcessRadioRxDone+0x3c4>)
 800faae:	8812      	ldrh	r2, [r2, #0]
 800fab0:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800fab2:	4a9d      	ldr	r2, [pc, #628]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fab4:	2377      	movs	r3, #119	; 0x77
 800fab6:	18f9      	adds	r1, r7, r3
 800fab8:	238f      	movs	r3, #143	; 0x8f
 800faba:	00db      	lsls	r3, r3, #3
 800fabc:	7809      	ldrb	r1, [r1, #0]
 800fabe:	54d1      	strb	r1, [r2, r3]
        return;
 800fac0:	f000 fc84 	bl	80103cc <ProcessRadioRxDone+0xa2c>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800fac4:	4b98      	ldr	r3, [pc, #608]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fac6:	4a99      	ldr	r2, [pc, #612]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fac8:	589b      	ldr	r3, [r3, r2]
 800faca:	22f0      	movs	r2, #240	; 0xf0
 800facc:	5c9b      	ldrb	r3, [r3, r2]
 800face:	2b01      	cmp	r3, #1
 800fad0:	d11c      	bne.n	800fb0c <ProcessRadioRxDone+0x16c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fad2:	f005 fab4 	bl	801503e <LoRaMacClassBIsPingExpected>
 800fad6:	1e03      	subs	r3, r0, #0
 800fad8:	d00a      	beq.n	800faf0 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fada:	2000      	movs	r0, #0
 800fadc:	f005 fa6b 	bl	8014fb6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800fae0:	2000      	movs	r0, #0
 800fae2:	f005 fa8a 	bl	8014ffa <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800fae6:	4b90      	ldr	r3, [pc, #576]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fae8:	4a93      	ldr	r2, [pc, #588]	; (800fd38 <ProcessRadioRxDone+0x398>)
 800faea:	2104      	movs	r1, #4
 800faec:	5499      	strb	r1, [r3, r2]
 800faee:	e00d      	b.n	800fb0c <ProcessRadioRxDone+0x16c>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800faf0:	f005 faab 	bl	801504a <LoRaMacClassBIsMulticastExpected>
 800faf4:	1e03      	subs	r3, r0, #0
 800faf6:	d009      	beq.n	800fb0c <ProcessRadioRxDone+0x16c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800faf8:	2000      	movs	r0, #0
 800fafa:	f005 fa66 	bl	8014fca <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fafe:	2000      	movs	r0, #0
 800fb00:	f005 fa83 	bl	801500a <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800fb04:	4b88      	ldr	r3, [pc, #544]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fb06:	4a8c      	ldr	r2, [pc, #560]	; (800fd38 <ProcessRadioRxDone+0x398>)
 800fb08:	2105      	movs	r1, #5
 800fb0a:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800fb0c:	2276      	movs	r2, #118	; 0x76
 800fb0e:	18bb      	adds	r3, r7, r2
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	18ba      	adds	r2, r7, r2
 800fb14:	1c59      	adds	r1, r3, #1
 800fb16:	7011      	strb	r1, [r2, #0]
 800fb18:	001a      	movs	r2, r3
 800fb1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fb1c:	189b      	adds	r3, r3, r2
 800fb1e:	781a      	ldrb	r2, [r3, #0]
 800fb20:	2174      	movs	r1, #116	; 0x74
 800fb22:	187b      	adds	r3, r7, r1
 800fb24:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800fb26:	187b      	adds	r3, r7, r1
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	061b      	lsls	r3, r3, #24
 800fb2c:	0f5b      	lsrs	r3, r3, #29
 800fb2e:	b2db      	uxtb	r3, r3
 800fb30:	2b03      	cmp	r3, #3
 800fb32:	d100      	bne.n	800fb36 <ProcessRadioRxDone+0x196>
 800fb34:	e11e      	b.n	800fd74 <ProcessRadioRxDone+0x3d4>
 800fb36:	dc03      	bgt.n	800fb40 <ProcessRadioRxDone+0x1a0>
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	d00a      	beq.n	800fb52 <ProcessRadioRxDone+0x1b2>
 800fb3c:	f000 fc1d 	bl	801037a <ProcessRadioRxDone+0x9da>
 800fb40:	2b05      	cmp	r3, #5
 800fb42:	d100      	bne.n	800fb46 <ProcessRadioRxDone+0x1a6>
 800fb44:	e112      	b.n	800fd6c <ProcessRadioRxDone+0x3cc>
 800fb46:	2b07      	cmp	r3, #7
 800fb48:	d101      	bne.n	800fb4e <ProcessRadioRxDone+0x1ae>
 800fb4a:	f000 fbe7 	bl	801031c <ProcessRadioRxDone+0x97c>
 800fb4e:	f000 fc14 	bl	801037a <ProcessRadioRxDone+0x9da>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            macMsgJoinAccept.Buffer = payload;
 800fb52:	210c      	movs	r1, #12
 800fb54:	187b      	adds	r3, r7, r1
 800fb56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fb58:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800fb5a:	237a      	movs	r3, #122	; 0x7a
 800fb5c:	18fb      	adds	r3, r7, r3
 800fb5e:	881b      	ldrh	r3, [r3, #0]
 800fb60:	b2da      	uxtb	r2, r3
 800fb62:	187b      	adds	r3, r7, r1
 800fb64:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800fb66:	4b70      	ldr	r3, [pc, #448]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fb68:	4a70      	ldr	r2, [pc, #448]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fb6a:	589a      	ldr	r2, [r3, r2]
 800fb6c:	23ea      	movs	r3, #234	; 0xea
 800fb6e:	005b      	lsls	r3, r3, #1
 800fb70:	5cd3      	ldrb	r3, [r2, r3]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d007      	beq.n	800fb86 <ProcessRadioRxDone+0x1e6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fb76:	4b6c      	ldr	r3, [pc, #432]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fb78:	4a7b      	ldr	r2, [pc, #492]	; (800fd68 <ProcessRadioRxDone+0x3c8>)
 800fb7a:	2101      	movs	r1, #1
 800fb7c:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800fb7e:	f7ff fee3 	bl	800f948 <PrepareRxDoneAbort>
                return;
 800fb82:	f000 fc23 	bl	80103cc <ProcessRadioRxDone+0xa2c>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800fb86:	f7ff fcc9 	bl	800f51c <SecureElementGetJoinEui>
 800fb8a:	0001      	movs	r1, r0
 800fb8c:	2580      	movs	r5, #128	; 0x80
 800fb8e:	197c      	adds	r4, r7, r5
 800fb90:	230c      	movs	r3, #12
 800fb92:	18fb      	adds	r3, r7, r3
 800fb94:	001a      	movs	r2, r3
 800fb96:	20ff      	movs	r0, #255	; 0xff
 800fb98:	f006 fd30 	bl	80165fc <LoRaMacCryptoHandleJoinAccept>
 800fb9c:	0003      	movs	r3, r0
 800fb9e:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800fba0:	197b      	adds	r3, r7, r5
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d000      	beq.n	800fbaa <ProcessRadioRxDone+0x20a>
 800fba8:	e0b0      	b.n	800fd0c <ProcessRadioRxDone+0x36c>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800fbaa:	240c      	movs	r4, #12
 800fbac:	193b      	adds	r3, r7, r4
 800fbae:	7a59      	ldrb	r1, [r3, #9]
 800fbb0:	4b5d      	ldr	r3, [pc, #372]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fbb2:	4a5e      	ldr	r2, [pc, #376]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fbb4:	589b      	ldr	r3, [r3, r2]
 800fbb6:	000a      	movs	r2, r1
 800fbb8:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800fbba:	4b5b      	ldr	r3, [pc, #364]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fbbc:	4a5b      	ldr	r2, [pc, #364]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fbbe:	589b      	ldr	r3, [r3, r2]
 800fbc0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800fbc2:	193b      	adds	r3, r7, r4
 800fbc4:	7a9b      	ldrb	r3, [r3, #10]
 800fbc6:	021a      	lsls	r2, r3, #8
 800fbc8:	4b57      	ldr	r3, [pc, #348]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fbca:	4858      	ldr	r0, [pc, #352]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fbcc:	581b      	ldr	r3, [r3, r0]
 800fbce:	430a      	orrs	r2, r1
 800fbd0:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800fbd2:	4b55      	ldr	r3, [pc, #340]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fbd4:	4a55      	ldr	r2, [pc, #340]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fbd6:	589b      	ldr	r3, [r3, r2]
 800fbd8:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800fbda:	193b      	adds	r3, r7, r4
 800fbdc:	7adb      	ldrb	r3, [r3, #11]
 800fbde:	041a      	lsls	r2, r3, #16
 800fbe0:	4b51      	ldr	r3, [pc, #324]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fbe2:	4852      	ldr	r0, [pc, #328]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fbe4:	581b      	ldr	r3, [r3, r0]
 800fbe6:	430a      	orrs	r2, r1
 800fbe8:	649a      	str	r2, [r3, #72]	; 0x48

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800fbea:	4b4f      	ldr	r3, [pc, #316]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fbec:	4a4f      	ldr	r2, [pc, #316]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fbee:	589b      	ldr	r3, [r3, r2]
 800fbf0:	0020      	movs	r0, r4
 800fbf2:	183a      	adds	r2, r7, r0
 800fbf4:	68d2      	ldr	r2, [r2, #12]
 800fbf6:	64da      	str	r2, [r3, #76]	; 0x4c

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800fbf8:	183b      	adds	r3, r7, r0
 800fbfa:	7c1b      	ldrb	r3, [r3, #16]
 800fbfc:	065b      	lsls	r3, r3, #25
 800fbfe:	0f5b      	lsrs	r3, r3, #29
 800fc00:	b2d9      	uxtb	r1, r3
 800fc02:	4b49      	ldr	r3, [pc, #292]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fc04:	4a49      	ldr	r2, [pc, #292]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fc06:	589a      	ldr	r2, [r3, r2]
 800fc08:	231a      	movs	r3, #26
 800fc0a:	33ff      	adds	r3, #255	; 0xff
 800fc0c:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fc0e:	183b      	adds	r3, r7, r0
 800fc10:	7c1b      	ldrb	r3, [r3, #16]
 800fc12:	071b      	lsls	r3, r3, #28
 800fc14:	0f1b      	lsrs	r3, r3, #28
 800fc16:	b2d9      	uxtb	r1, r3
 800fc18:	4b43      	ldr	r3, [pc, #268]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fc1a:	4a44      	ldr	r2, [pc, #272]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fc1c:	589a      	ldr	r2, [r3, r2]
 800fc1e:	2390      	movs	r3, #144	; 0x90
 800fc20:	005b      	lsls	r3, r3, #1
 800fc22:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fc24:	183b      	adds	r3, r7, r0
 800fc26:	7c1b      	ldrb	r3, [r3, #16]
 800fc28:	071b      	lsls	r3, r3, #28
 800fc2a:	0f1b      	lsrs	r3, r3, #28
 800fc2c:	b2d9      	uxtb	r1, r3
 800fc2e:	4b3e      	ldr	r3, [pc, #248]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fc30:	4a3e      	ldr	r2, [pc, #248]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fc32:	589a      	ldr	r2, [r3, r2]
 800fc34:	2394      	movs	r3, #148	; 0x94
 800fc36:	005b      	lsls	r3, r3, #1
 800fc38:	54d1      	strb	r1, [r2, r3]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800fc3a:	183b      	adds	r3, r7, r0
 800fc3c:	7c59      	ldrb	r1, [r3, #17]
 800fc3e:	4b3a      	ldr	r3, [pc, #232]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fc40:	4a3a      	ldr	r2, [pc, #232]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fc42:	589a      	ldr	r2, [r3, r2]
 800fc44:	2384      	movs	r3, #132	; 0x84
 800fc46:	005b      	lsls	r3, r3, #1
 800fc48:	50d1      	str	r1, [r2, r3]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800fc4a:	4b37      	ldr	r3, [pc, #220]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fc4c:	4a37      	ldr	r2, [pc, #220]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fc4e:	589a      	ldr	r2, [r3, r2]
 800fc50:	2384      	movs	r3, #132	; 0x84
 800fc52:	005b      	lsls	r3, r3, #1
 800fc54:	58d3      	ldr	r3, [r2, r3]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d106      	bne.n	800fc68 <ProcessRadioRxDone+0x2c8>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800fc5a:	4b33      	ldr	r3, [pc, #204]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fc5c:	4a33      	ldr	r2, [pc, #204]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fc5e:	589a      	ldr	r2, [r3, r2]
 800fc60:	2384      	movs	r3, #132	; 0x84
 800fc62:	005b      	lsls	r3, r3, #1
 800fc64:	2101      	movs	r1, #1
 800fc66:	50d1      	str	r1, [r2, r3]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800fc68:	4b2f      	ldr	r3, [pc, #188]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fc6a:	4a30      	ldr	r2, [pc, #192]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fc6c:	589a      	ldr	r2, [r3, r2]
 800fc6e:	2384      	movs	r3, #132	; 0x84
 800fc70:	005b      	lsls	r3, r3, #1
 800fc72:	58d2      	ldr	r2, [r2, r3]
 800fc74:	4b2c      	ldr	r3, [pc, #176]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fc76:	492d      	ldr	r1, [pc, #180]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fc78:	5859      	ldr	r1, [r3, r1]
 800fc7a:	0013      	movs	r3, r2
 800fc7c:	015b      	lsls	r3, r3, #5
 800fc7e:	1a9b      	subs	r3, r3, r2
 800fc80:	009b      	lsls	r3, r3, #2
 800fc82:	189b      	adds	r3, r3, r2
 800fc84:	00db      	lsls	r3, r3, #3
 800fc86:	001a      	movs	r2, r3
 800fc88:	2384      	movs	r3, #132	; 0x84
 800fc8a:	005b      	lsls	r3, r3, #1
 800fc8c:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800fc8e:	4b26      	ldr	r3, [pc, #152]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fc90:	4a26      	ldr	r2, [pc, #152]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fc92:	589a      	ldr	r2, [r3, r2]
 800fc94:	2384      	movs	r3, #132	; 0x84
 800fc96:	005b      	lsls	r3, r3, #1
 800fc98:	58d3      	ldr	r3, [r2, r3]
 800fc9a:	4a23      	ldr	r2, [pc, #140]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fc9c:	4923      	ldr	r1, [pc, #140]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fc9e:	5852      	ldr	r2, [r2, r1]
 800fca0:	21fa      	movs	r1, #250	; 0xfa
 800fca2:	0089      	lsls	r1, r1, #2
 800fca4:	1859      	adds	r1, r3, r1
 800fca6:	2386      	movs	r3, #134	; 0x86
 800fca8:	005b      	lsls	r3, r3, #1
 800fcaa:	50d1      	str	r1, [r2, r3]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800fcac:	4b1e      	ldr	r3, [pc, #120]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fcae:	4a1f      	ldr	r2, [pc, #124]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fcb0:	589a      	ldr	r2, [r3, r2]
 800fcb2:	23e9      	movs	r3, #233	; 0xe9
 800fcb4:	005b      	lsls	r3, r3, #1
 800fcb6:	2100      	movs	r1, #0
 800fcb8:	54d1      	strb	r1, [r2, r3]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800fcba:	216c      	movs	r1, #108	; 0x6c
 800fcbc:	187b      	adds	r3, r7, r1
 800fcbe:	220c      	movs	r2, #12
 800fcc0:	18ba      	adds	r2, r7, r2
 800fcc2:	3212      	adds	r2, #18
 800fcc4:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800fcc6:	237a      	movs	r3, #122	; 0x7a
 800fcc8:	18fb      	adds	r3, r7, r3
 800fcca:	881b      	ldrh	r3, [r3, #0]
 800fccc:	b2db      	uxtb	r3, r3
 800fcce:	3b11      	subs	r3, #17
 800fcd0:	b2da      	uxtb	r2, r3
 800fcd2:	187b      	adds	r3, r7, r1
 800fcd4:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800fcd6:	4b14      	ldr	r3, [pc, #80]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fcd8:	4a14      	ldr	r2, [pc, #80]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fcda:	589b      	ldr	r3, [r3, r2]
 800fcdc:	781b      	ldrb	r3, [r3, #0]
 800fcde:	187a      	adds	r2, r7, r1
 800fce0:	0011      	movs	r1, r2
 800fce2:	0018      	movs	r0, r3
 800fce4:	f007 fcaa 	bl	801763c <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800fce8:	4b0f      	ldr	r3, [pc, #60]	; (800fd28 <ProcessRadioRxDone+0x388>)
 800fcea:	4a10      	ldr	r2, [pc, #64]	; (800fd2c <ProcessRadioRxDone+0x38c>)
 800fcec:	589a      	ldr	r2, [r3, r2]
 800fcee:	23ea      	movs	r3, #234	; 0xea
 800fcf0:	005b      	lsls	r3, r3, #1
 800fcf2:	2102      	movs	r1, #2
 800fcf4:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fcf6:	2000      	movs	r0, #0
 800fcf8:	f005 fe50 	bl	801599c <LoRaMacConfirmQueueIsCmdActive>
 800fcfc:	1e03      	subs	r3, r0, #0
 800fcfe:	d100      	bne.n	800fd02 <ProcessRadioRxDone+0x362>
 800fd00:	e342      	b.n	8010388 <ProcessRadioRxDone+0x9e8>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800fd02:	2100      	movs	r1, #0
 800fd04:	2000      	movs	r0, #0
 800fd06:	f005 fdc5 	bl	8015894 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800fd0a:	e33d      	b.n	8010388 <ProcessRadioRxDone+0x9e8>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fd0c:	2000      	movs	r0, #0
 800fd0e:	f005 fe45 	bl	801599c <LoRaMacConfirmQueueIsCmdActive>
 800fd12:	1e03      	subs	r3, r0, #0
 800fd14:	d100      	bne.n	800fd18 <ProcessRadioRxDone+0x378>
 800fd16:	e337      	b.n	8010388 <ProcessRadioRxDone+0x9e8>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800fd18:	2100      	movs	r1, #0
 800fd1a:	2007      	movs	r0, #7
 800fd1c:	f005 fdba 	bl	8015894 <LoRaMacConfirmQueueSetStatus>
            break;
 800fd20:	e332      	b.n	8010388 <ProcessRadioRxDone+0x9e8>
 800fd22:	46c0      	nop			; (mov r8, r8)
 800fd24:	20001650 	.word	0x20001650
 800fd28:	200008f0 	.word	0x200008f0
 800fd2c:	00000484 	.word	0x00000484
 800fd30:	0000042a 	.word	0x0000042a
 800fd34:	0000042c 	.word	0x0000042c
 800fd38:	0000042d 	.word	0x0000042d
 800fd3c:	0000041f 	.word	0x0000041f
 800fd40:	0000041e 	.word	0x0000041e
 800fd44:	00000421 	.word	0x00000421
 800fd48:	00000424 	.word	0x00000424
 800fd4c:	00000429 	.word	0x00000429
 800fd50:	0000042e 	.word	0x0000042e
 800fd54:	0000041c 	.word	0x0000041c
 800fd58:	00000434 	.word	0x00000434
 800fd5c:	0801cb08 	.word	0x0801cb08
 800fd60:	20000c88 	.word	0x20000c88
 800fd64:	00000476 	.word	0x00000476
 800fd68:	0000041d 	.word	0x0000041d
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800fd6c:	4bcc      	ldr	r3, [pc, #816]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800fd6e:	4acd      	ldr	r2, [pc, #820]	; (80100a4 <ProcessRadioRxDone+0x704>)
 800fd70:	2101      	movs	r1, #1
 800fd72:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800fd74:	4bca      	ldr	r3, [pc, #808]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800fd76:	4acc      	ldr	r2, [pc, #816]	; (80100a8 <ProcessRadioRxDone+0x708>)
 800fd78:	589a      	ldr	r2, [r3, r2]
 800fd7a:	232e      	movs	r3, #46	; 0x2e
 800fd7c:	33ff      	adds	r3, #255	; 0xff
 800fd7e:	5cd2      	ldrb	r2, [r2, r3]
 800fd80:	2168      	movs	r1, #104	; 0x68
 800fd82:	187b      	adds	r3, r7, r1
 800fd84:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800fd86:	4ac6      	ldr	r2, [pc, #792]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800fd88:	2384      	movs	r3, #132	; 0x84
 800fd8a:	00db      	lsls	r3, r3, #3
 800fd8c:	5cd3      	ldrb	r3, [r2, r3]
 800fd8e:	b25a      	sxtb	r2, r3
 800fd90:	187b      	adds	r3, r7, r1
 800fd92:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fd94:	187b      	adds	r3, r7, r1
 800fd96:	220d      	movs	r2, #13
 800fd98:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800fd9a:	4bc1      	ldr	r3, [pc, #772]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800fd9c:	4ac2      	ldr	r2, [pc, #776]	; (80100a8 <ProcessRadioRxDone+0x708>)
 800fd9e:	589a      	ldr	r2, [r3, r2]
 800fda0:	2340      	movs	r3, #64	; 0x40
 800fda2:	33ff      	adds	r3, #255	; 0xff
 800fda4:	5cd3      	ldrb	r3, [r2, r3]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d003      	beq.n	800fdb2 <ProcessRadioRxDone+0x412>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fdaa:	2368      	movs	r3, #104	; 0x68
 800fdac:	18fb      	adds	r3, r7, r3
 800fdae:	220e      	movs	r2, #14
 800fdb0:	701a      	strb	r2, [r3, #0]
            }
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800fdb2:	4bbb      	ldr	r3, [pc, #748]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800fdb4:	4abc      	ldr	r2, [pc, #752]	; (80100a8 <ProcessRadioRxDone+0x708>)
 800fdb6:	589b      	ldr	r3, [r3, r2]
 800fdb8:	781b      	ldrb	r3, [r3, #0]
 800fdba:	2268      	movs	r2, #104	; 0x68
 800fdbc:	18ba      	adds	r2, r7, r2
 800fdbe:	0011      	movs	r1, r2
 800fdc0:	0018      	movs	r0, r3
 800fdc2:	f007 fbb7 	bl	8017534 <RegionGetPhyParam>
 800fdc6:	0003      	movs	r3, r0
 800fdc8:	001a      	movs	r2, r3
 800fdca:	2364      	movs	r3, #100	; 0x64
 800fdcc:	18fb      	adds	r3, r7, r3
 800fdce:	601a      	str	r2, [r3, #0]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 800fdd0:	237a      	movs	r3, #122	; 0x7a
 800fdd2:	18fb      	adds	r3, r7, r3
 800fdd4:	881b      	ldrh	r3, [r3, #0]
 800fdd6:	3b0d      	subs	r3, #13
 800fdd8:	b29b      	uxth	r3, r3
 800fdda:	b21b      	sxth	r3, r3
 800fddc:	1c1a      	adds	r2, r3, #0
 800fdde:	b213      	sxth	r3, r2
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	da01      	bge.n	800fde8 <ProcessRadioRxDone+0x448>
 800fde4:	2300      	movs	r3, #0
 800fde6:	1c1a      	adds	r2, r3, #0
 800fde8:	b212      	sxth	r2, r2
 800fdea:	2364      	movs	r3, #100	; 0x64
 800fdec:	18fb      	adds	r3, r7, r3
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	b21b      	sxth	r3, r3
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	dd06      	ble.n	800fe04 <ProcessRadioRxDone+0x464>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fdf6:	4baa      	ldr	r3, [pc, #680]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800fdf8:	4aac      	ldr	r2, [pc, #688]	; (80100ac <ProcessRadioRxDone+0x70c>)
 800fdfa:	2101      	movs	r1, #1
 800fdfc:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800fdfe:	f7ff fda3 	bl	800f948 <PrepareRxDoneAbort>
                return;
 800fe02:	e2e3      	b.n	80103cc <ProcessRadioRxDone+0xa2c>
            }
            macMsgData.Buffer = payload;
 800fe04:	2134      	movs	r1, #52	; 0x34
 800fe06:	187b      	adds	r3, r7, r1
 800fe08:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fe0a:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800fe0c:	237a      	movs	r3, #122	; 0x7a
 800fe0e:	18fb      	adds	r3, r7, r3
 800fe10:	881b      	ldrh	r3, [r3, #0]
 800fe12:	b2da      	uxtb	r2, r3
 800fe14:	187b      	adds	r3, r7, r1
 800fe16:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800fe18:	187b      	adds	r3, r7, r1
 800fe1a:	4aa5      	ldr	r2, [pc, #660]	; (80100b0 <ProcessRadioRxDone+0x710>)
 800fe1c:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800fe1e:	0008      	movs	r0, r1
 800fe20:	187b      	adds	r3, r7, r1
 800fe22:	2228      	movs	r2, #40	; 0x28
 800fe24:	21ff      	movs	r1, #255	; 0xff
 800fe26:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800fe28:	183b      	adds	r3, r7, r0
 800fe2a:	0018      	movs	r0, r3
 800fe2c:	f007 f897 	bl	8016f5e <LoRaMacParserData>
 800fe30:	1e03      	subs	r3, r0, #0
 800fe32:	d006      	beq.n	800fe42 <ProcessRadioRxDone+0x4a2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe34:	4b9a      	ldr	r3, [pc, #616]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800fe36:	4a9d      	ldr	r2, [pc, #628]	; (80100ac <ProcessRadioRxDone+0x70c>)
 800fe38:	2101      	movs	r1, #1
 800fe3a:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800fe3c:	f7ff fd84 	bl	800f948 <PrepareRxDoneAbort>
                return;
 800fe40:	e2c4      	b.n	80103cc <ProcessRadioRxDone+0xa2c>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800fe42:	2034      	movs	r0, #52	; 0x34
 800fe44:	183b      	adds	r3, r7, r0
 800fe46:	689a      	ldr	r2, [r3, #8]
 800fe48:	4b95      	ldr	r3, [pc, #596]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800fe4a:	499a      	ldr	r1, [pc, #616]	; (80100b4 <ProcessRadioRxDone+0x714>)
 800fe4c:	505a      	str	r2, [r3, r1]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800fe4e:	1dba      	adds	r2, r7, #6
 800fe50:	183b      	adds	r3, r7, r0
 800fe52:	0011      	movs	r1, r2
 800fe54:	0018      	movs	r0, r3
 800fe56:	f003 f849 	bl	8012eec <DetermineFrameType>
 800fe5a:	1e03      	subs	r3, r0, #0
 800fe5c:	d006      	beq.n	800fe6c <ProcessRadioRxDone+0x4cc>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe5e:	4b90      	ldr	r3, [pc, #576]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800fe60:	4a92      	ldr	r2, [pc, #584]	; (80100ac <ProcessRadioRxDone+0x70c>)
 800fe62:	2101      	movs	r1, #1
 800fe64:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800fe66:	f7ff fd6f 	bl	800f948 <PrepareRxDoneAbort>
                return;
 800fe6a:	e2af      	b.n	80103cc <ProcessRadioRxDone+0xa2c>
            }

            //Check if it is a multicast message
            multicast = 0;
 800fe6c:	2383      	movs	r3, #131	; 0x83
 800fe6e:	18fb      	adds	r3, r7, r3
 800fe70:	2200      	movs	r2, #0
 800fe72:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800fe74:	2300      	movs	r3, #0
 800fe76:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fe78:	2381      	movs	r3, #129	; 0x81
 800fe7a:	18fb      	adds	r3, r7, r3
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	701a      	strb	r2, [r3, #0]
 800fe80:	e066      	b.n	800ff50 <ProcessRadioRxDone+0x5b0>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800fe82:	4b87      	ldr	r3, [pc, #540]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800fe84:	4a88      	ldr	r2, [pc, #544]	; (80100a8 <ProcessRadioRxDone+0x708>)
 800fe86:	5899      	ldr	r1, [r3, r2]
 800fe88:	2381      	movs	r3, #129	; 0x81
 800fe8a:	18fb      	adds	r3, r7, r3
 800fe8c:	781a      	ldrb	r2, [r3, #0]
 800fe8e:	0013      	movs	r3, r2
 800fe90:	009b      	lsls	r3, r3, #2
 800fe92:	189b      	adds	r3, r3, r2
 800fe94:	00db      	lsls	r3, r3, #3
 800fe96:	18cb      	adds	r3, r1, r3
 800fe98:	3354      	adds	r3, #84	; 0x54
 800fe9a:	681a      	ldr	r2, [r3, #0]
 800fe9c:	2334      	movs	r3, #52	; 0x34
 800fe9e:	18fb      	adds	r3, r7, r3
 800fea0:	689b      	ldr	r3, [r3, #8]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d14e      	bne.n	800ff44 <ProcessRadioRxDone+0x5a4>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800fea6:	4b7e      	ldr	r3, [pc, #504]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800fea8:	4a7f      	ldr	r2, [pc, #508]	; (80100a8 <ProcessRadioRxDone+0x708>)
 800feaa:	5899      	ldr	r1, [r3, r2]
 800feac:	2381      	movs	r3, #129	; 0x81
 800feae:	18fb      	adds	r3, r7, r3
 800feb0:	781a      	ldrb	r2, [r3, #0]
 800feb2:	2051      	movs	r0, #81	; 0x51
 800feb4:	0013      	movs	r3, r2
 800feb6:	009b      	lsls	r3, r3, #2
 800feb8:	189b      	adds	r3, r3, r2
 800feba:	00db      	lsls	r3, r3, #3
 800febc:	18cb      	adds	r3, r1, r3
 800febe:	181b      	adds	r3, r3, r0
 800fec0:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d03e      	beq.n	800ff44 <ProcessRadioRxDone+0x5a4>
                {
                    multicast = 1;
 800fec6:	2383      	movs	r3, #131	; 0x83
 800fec8:	18fb      	adds	r3, r7, r3
 800feca:	2201      	movs	r2, #1
 800fecc:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800fece:	4b74      	ldr	r3, [pc, #464]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800fed0:	4a75      	ldr	r2, [pc, #468]	; (80100a8 <ProcessRadioRxDone+0x708>)
 800fed2:	5898      	ldr	r0, [r3, r2]
 800fed4:	2581      	movs	r5, #129	; 0x81
 800fed6:	197b      	adds	r3, r7, r5
 800fed8:	781a      	ldrb	r2, [r3, #0]
 800feda:	2382      	movs	r3, #130	; 0x82
 800fedc:	18f9      	adds	r1, r7, r3
 800fede:	2452      	movs	r4, #82	; 0x52
 800fee0:	0013      	movs	r3, r2
 800fee2:	009b      	lsls	r3, r3, #2
 800fee4:	189b      	adds	r3, r3, r2
 800fee6:	00db      	lsls	r3, r3, #3
 800fee8:	18c3      	adds	r3, r0, r3
 800feea:	191b      	adds	r3, r3, r4
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	700b      	strb	r3, [r1, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800fef0:	4b6b      	ldr	r3, [pc, #428]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800fef2:	4a6d      	ldr	r2, [pc, #436]	; (80100a8 <ProcessRadioRxDone+0x708>)
 800fef4:	5899      	ldr	r1, [r3, r2]
 800fef6:	0028      	movs	r0, r5
 800fef8:	183b      	adds	r3, r7, r0
 800fefa:	781a      	ldrb	r2, [r3, #0]
 800fefc:	0013      	movs	r3, r2
 800fefe:	009b      	lsls	r3, r3, #2
 800ff00:	189b      	adds	r3, r3, r2
 800ff02:	00db      	lsls	r3, r3, #3
 800ff04:	18cb      	adds	r3, r1, r3
 800ff06:	336c      	adds	r3, #108	; 0x6c
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	60bb      	str	r3, [r7, #8]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800ff0e:	4b64      	ldr	r3, [pc, #400]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800ff10:	4a65      	ldr	r2, [pc, #404]	; (80100a8 <ProcessRadioRxDone+0x708>)
 800ff12:	5899      	ldr	r1, [r3, r2]
 800ff14:	183b      	adds	r3, r7, r0
 800ff16:	781a      	ldrb	r2, [r3, #0]
 800ff18:	0013      	movs	r3, r2
 800ff1a:	009b      	lsls	r3, r3, #2
 800ff1c:	189b      	adds	r3, r3, r2
 800ff1e:	00db      	lsls	r3, r3, #3
 800ff20:	18cb      	adds	r3, r1, r3
 800ff22:	3354      	adds	r3, #84	; 0x54
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	2284      	movs	r2, #132	; 0x84
 800ff28:	18ba      	adds	r2, r7, r2
 800ff2a:	6013      	str	r3, [r2, #0]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800ff2c:	4b5c      	ldr	r3, [pc, #368]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800ff2e:	4a5e      	ldr	r2, [pc, #376]	; (80100a8 <ProcessRadioRxDone+0x708>)
 800ff30:	589b      	ldr	r3, [r3, r2]
 800ff32:	22f0      	movs	r2, #240	; 0xf0
 800ff34:	5c9b      	ldrb	r3, [r3, r2]
 800ff36:	2b02      	cmp	r3, #2
 800ff38:	d110      	bne.n	800ff5c <ProcessRadioRxDone+0x5bc>
                    {
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ff3a:	4b59      	ldr	r3, [pc, #356]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800ff3c:	4a5e      	ldr	r2, [pc, #376]	; (80100b8 <ProcessRadioRxDone+0x718>)
 800ff3e:	2103      	movs	r1, #3
 800ff40:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 800ff42:	e00b      	b.n	800ff5c <ProcessRadioRxDone+0x5bc>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ff44:	2181      	movs	r1, #129	; 0x81
 800ff46:	187b      	adds	r3, r7, r1
 800ff48:	781a      	ldrb	r2, [r3, #0]
 800ff4a:	187b      	adds	r3, r7, r1
 800ff4c:	3201      	adds	r2, #1
 800ff4e:	701a      	strb	r2, [r3, #0]
 800ff50:	2381      	movs	r3, #129	; 0x81
 800ff52:	18fb      	adds	r3, r7, r3
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	2b03      	cmp	r3, #3
 800ff58:	d993      	bls.n	800fe82 <ProcessRadioRxDone+0x4e2>
 800ff5a:	e000      	b.n	800ff5e <ProcessRadioRxDone+0x5be>
                    break;
 800ff5c:	46c0      	nop			; (mov r8, r8)
                }
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800ff5e:	2168      	movs	r1, #104	; 0x68
 800ff60:	187b      	adds	r3, r7, r1
 800ff62:	2215      	movs	r2, #21
 800ff64:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ff66:	4b4e      	ldr	r3, [pc, #312]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800ff68:	4a4f      	ldr	r2, [pc, #316]	; (80100a8 <ProcessRadioRxDone+0x708>)
 800ff6a:	589b      	ldr	r3, [r3, r2]
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	187a      	adds	r2, r7, r1
 800ff70:	0011      	movs	r1, r2
 800ff72:	0018      	movs	r0, r3
 800ff74:	f007 fade 	bl	8017534 <RegionGetPhyParam>
 800ff78:	0003      	movs	r3, r0
 800ff7a:	001a      	movs	r2, r3
 800ff7c:	2064      	movs	r0, #100	; 0x64
 800ff7e:	183b      	adds	r3, r7, r0
 800ff80:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800ff82:	1dbb      	adds	r3, r7, #6
 800ff84:	781d      	ldrb	r5, [r3, #0]
 800ff86:	4b46      	ldr	r3, [pc, #280]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800ff88:	4a47      	ldr	r2, [pc, #284]	; (80100a8 <ProcessRadioRxDone+0x708>)
 800ff8a:	5899      	ldr	r1, [r3, r2]
 800ff8c:	183b      	adds	r3, r7, r0
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	b29b      	uxth	r3, r3
 800ff92:	2280      	movs	r2, #128	; 0x80
 800ff94:	18bc      	adds	r4, r7, r2
 800ff96:	22e8      	movs	r2, #232	; 0xe8
 800ff98:	0052      	lsls	r2, r2, #1
 800ff9a:	588e      	ldr	r6, [r1, r2]
 800ff9c:	2134      	movs	r1, #52	; 0x34
 800ff9e:	1879      	adds	r1, r7, r1
 800ffa0:	2082      	movs	r0, #130	; 0x82
 800ffa2:	183a      	adds	r2, r7, r0
 800ffa4:	7810      	ldrb	r0, [r2, #0]
 800ffa6:	2208      	movs	r2, #8
 800ffa8:	18ba      	adds	r2, r7, r2
 800ffaa:	9202      	str	r2, [sp, #8]
 800ffac:	1dfa      	adds	r2, r7, #7
 800ffae:	9201      	str	r2, [sp, #4]
 800ffb0:	9300      	str	r3, [sp, #0]
 800ffb2:	0033      	movs	r3, r6
 800ffb4:	000a      	movs	r2, r1
 800ffb6:	0029      	movs	r1, r5
 800ffb8:	f000 fed8 	bl	8010d6c <GetFCntDown>
 800ffbc:	0003      	movs	r3, r0
 800ffbe:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ffc0:	2280      	movs	r2, #128	; 0x80
 800ffc2:	18bb      	adds	r3, r7, r2
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d041      	beq.n	801004e <ProcessRadioRxDone+0x6ae>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800ffca:	2380      	movs	r3, #128	; 0x80
 800ffcc:	18fb      	adds	r3, r7, r3
 800ffce:	781b      	ldrb	r3, [r3, #0]
 800ffd0:	2b07      	cmp	r3, #7
 800ffd2:	d126      	bne.n	8010022 <ProcessRadioRxDone+0x682>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800ffd4:	4b32      	ldr	r3, [pc, #200]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800ffd6:	4a35      	ldr	r2, [pc, #212]	; (80100ac <ProcessRadioRxDone+0x70c>)
 800ffd8:	2108      	movs	r1, #8
 800ffda:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800ffdc:	4b30      	ldr	r3, [pc, #192]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800ffde:	4a32      	ldr	r2, [pc, #200]	; (80100a8 <ProcessRadioRxDone+0x708>)
 800ffe0:	589a      	ldr	r2, [r3, r2]
 800ffe2:	23e9      	movs	r3, #233	; 0xe9
 800ffe4:	005b      	lsls	r3, r3, #1
 800ffe6:	5cd3      	ldrb	r3, [r2, r3]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d128      	bne.n	801003e <ProcessRadioRxDone+0x69e>
 800ffec:	2374      	movs	r3, #116	; 0x74
 800ffee:	18fb      	adds	r3, r7, r3
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	221f      	movs	r2, #31
 800fff4:	4393      	bics	r3, r2
 800fff6:	b2db      	uxtb	r3, r3
 800fff8:	2ba0      	cmp	r3, #160	; 0xa0
 800fffa:	d120      	bne.n	801003e <ProcessRadioRxDone+0x69e>
 800fffc:	4b28      	ldr	r3, [pc, #160]	; (80100a0 <ProcessRadioRxDone+0x700>)
 800fffe:	4a2a      	ldr	r2, [pc, #168]	; (80100a8 <ProcessRadioRxDone+0x708>)
 8010000:	589a      	ldr	r2, [r3, r2]
 8010002:	23ec      	movs	r3, #236	; 0xec
 8010004:	005b      	lsls	r3, r3, #1
 8010006:	58d2      	ldr	r2, [r2, r3]
 8010008:	2334      	movs	r3, #52	; 0x34
 801000a:	18fb      	adds	r3, r7, r3
 801000c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801000e:	429a      	cmp	r2, r3
 8010010:	d115      	bne.n	801003e <ProcessRadioRxDone+0x69e>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 8010012:	4b23      	ldr	r3, [pc, #140]	; (80100a0 <ProcessRadioRxDone+0x700>)
 8010014:	4a24      	ldr	r2, [pc, #144]	; (80100a8 <ProcessRadioRxDone+0x708>)
 8010016:	589a      	ldr	r2, [r3, r2]
 8010018:	23e0      	movs	r3, #224	; 0xe0
 801001a:	005b      	lsls	r3, r3, #1
 801001c:	2101      	movs	r1, #1
 801001e:	54d1      	strb	r1, [r2, r3]
 8010020:	e00d      	b.n	801003e <ProcessRadioRxDone+0x69e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8010022:	2380      	movs	r3, #128	; 0x80
 8010024:	18fb      	adds	r3, r7, r3
 8010026:	781b      	ldrb	r3, [r3, #0]
 8010028:	2b08      	cmp	r3, #8
 801002a:	d104      	bne.n	8010036 <ProcessRadioRxDone+0x696>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 801002c:	4b1c      	ldr	r3, [pc, #112]	; (80100a0 <ProcessRadioRxDone+0x700>)
 801002e:	4a1f      	ldr	r2, [pc, #124]	; (80100ac <ProcessRadioRxDone+0x70c>)
 8010030:	210a      	movs	r1, #10
 8010032:	5499      	strb	r1, [r3, r2]
 8010034:	e003      	b.n	801003e <ProcessRadioRxDone+0x69e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010036:	4b1a      	ldr	r3, [pc, #104]	; (80100a0 <ProcessRadioRxDone+0x700>)
 8010038:	4a1c      	ldr	r2, [pc, #112]	; (80100ac <ProcessRadioRxDone+0x70c>)
 801003a:	2101      	movs	r1, #1
 801003c:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 801003e:	68b9      	ldr	r1, [r7, #8]
 8010040:	4a17      	ldr	r2, [pc, #92]	; (80100a0 <ProcessRadioRxDone+0x700>)
 8010042:	2386      	movs	r3, #134	; 0x86
 8010044:	00db      	lsls	r3, r3, #3
 8010046:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 8010048:	f7ff fc7e 	bl	800f948 <PrepareRxDoneAbort>
                return;
 801004c:	e1be      	b.n	80103cc <ProcessRadioRxDone+0xa2c>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 801004e:	1dfb      	adds	r3, r7, #7
 8010050:	781a      	ldrb	r2, [r3, #0]
 8010052:	68bd      	ldr	r5, [r7, #8]
 8010054:	2680      	movs	r6, #128	; 0x80
 8010056:	19bc      	adds	r4, r7, r6
 8010058:	2384      	movs	r3, #132	; 0x84
 801005a:	18fb      	adds	r3, r7, r3
 801005c:	6819      	ldr	r1, [r3, #0]
 801005e:	2382      	movs	r3, #130	; 0x82
 8010060:	18fb      	adds	r3, r7, r3
 8010062:	7818      	ldrb	r0, [r3, #0]
 8010064:	2334      	movs	r3, #52	; 0x34
 8010066:	18fb      	adds	r3, r7, r3
 8010068:	9300      	str	r3, [sp, #0]
 801006a:	002b      	movs	r3, r5
 801006c:	f006 fd52 	bl	8016b14 <LoRaMacCryptoUnsecureMessage>
 8010070:	0003      	movs	r3, r0
 8010072:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8010074:	19bb      	adds	r3, r7, r6
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d01f      	beq.n	80100bc <ProcessRadioRxDone+0x71c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 801007c:	2380      	movs	r3, #128	; 0x80
 801007e:	18fb      	adds	r3, r7, r3
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	2b02      	cmp	r3, #2
 8010084:	d104      	bne.n	8010090 <ProcessRadioRxDone+0x6f0>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8010086:	4b06      	ldr	r3, [pc, #24]	; (80100a0 <ProcessRadioRxDone+0x700>)
 8010088:	4a08      	ldr	r2, [pc, #32]	; (80100ac <ProcessRadioRxDone+0x70c>)
 801008a:	210b      	movs	r1, #11
 801008c:	5499      	strb	r1, [r3, r2]
 801008e:	e003      	b.n	8010098 <ProcessRadioRxDone+0x6f8>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8010090:	4b03      	ldr	r3, [pc, #12]	; (80100a0 <ProcessRadioRxDone+0x700>)
 8010092:	4a06      	ldr	r2, [pc, #24]	; (80100ac <ProcessRadioRxDone+0x70c>)
 8010094:	210c      	movs	r1, #12
 8010096:	5499      	strb	r1, [r3, r2]
                }
                PrepareRxDoneAbort( );
 8010098:	f7ff fc56 	bl	800f948 <PrepareRxDoneAbort>
                return;
 801009c:	46c0      	nop			; (mov r8, r8)
 801009e:	e195      	b.n	80103cc <ProcessRadioRxDone+0xa2c>
 80100a0:	200008f0 	.word	0x200008f0
 80100a4:	0000041c 	.word	0x0000041c
 80100a8:	00000484 	.word	0x00000484
 80100ac:	0000041d 	.word	0x0000041d
 80100b0:	20000b28 	.word	0x20000b28
 80100b4:	00000434 	.word	0x00000434
 80100b8:	0000042d 	.word	0x0000042d
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80100bc:	4bc5      	ldr	r3, [pc, #788]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80100be:	4ac6      	ldr	r2, [pc, #792]	; (80103d8 <ProcessRadioRxDone+0xa38>)
 80100c0:	2100      	movs	r1, #0
 80100c2:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 80100c4:	4bc3      	ldr	r3, [pc, #780]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80100c6:	2283      	movs	r2, #131	; 0x83
 80100c8:	18ba      	adds	r2, r7, r2
 80100ca:	49c4      	ldr	r1, [pc, #784]	; (80103dc <ProcessRadioRxDone+0xa3c>)
 80100cc:	7812      	ldrb	r2, [r2, #0]
 80100ce:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80100d0:	2034      	movs	r0, #52	; 0x34
 80100d2:	183b      	adds	r3, r7, r0
 80100d4:	7b1b      	ldrb	r3, [r3, #12]
 80100d6:	06db      	lsls	r3, r3, #27
 80100d8:	0fdb      	lsrs	r3, r3, #31
 80100da:	b2db      	uxtb	r3, r3
 80100dc:	0019      	movs	r1, r3
 80100de:	4bbd      	ldr	r3, [pc, #756]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80100e0:	4abf      	ldr	r2, [pc, #764]	; (80103e0 <ProcessRadioRxDone+0xa40>)
 80100e2:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 80100e4:	4bbb      	ldr	r3, [pc, #748]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80100e6:	4abf      	ldr	r2, [pc, #764]	; (80103e4 <ProcessRadioRxDone+0xa44>)
 80100e8:	2100      	movs	r1, #0
 80100ea:	5099      	str	r1, [r3, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 80100ec:	4ab9      	ldr	r2, [pc, #740]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80100ee:	2385      	movs	r3, #133	; 0x85
 80100f0:	00db      	lsls	r3, r3, #3
 80100f2:	2100      	movs	r1, #0
 80100f4:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80100f6:	68b9      	ldr	r1, [r7, #8]
 80100f8:	4ab6      	ldr	r2, [pc, #728]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80100fa:	2386      	movs	r3, #134	; 0x86
 80100fc:	00db      	lsls	r3, r3, #3
 80100fe:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8010100:	183b      	adds	r3, r7, r0
 8010102:	7b1b      	ldrb	r3, [r3, #12]
 8010104:	069b      	lsls	r3, r3, #26
 8010106:	0fdb      	lsrs	r3, r3, #31
 8010108:	b2db      	uxtb	r3, r3
 801010a:	1e5a      	subs	r2, r3, #1
 801010c:	4193      	sbcs	r3, r2
 801010e:	b2d9      	uxtb	r1, r3
 8010110:	4bb0      	ldr	r3, [pc, #704]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 8010112:	4ab5      	ldr	r2, [pc, #724]	; (80103e8 <ProcessRadioRxDone+0xa48>)
 8010114:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010116:	4baf      	ldr	r3, [pc, #700]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 8010118:	4ab4      	ldr	r2, [pc, #720]	; (80103ec <ProcessRadioRxDone+0xa4c>)
 801011a:	2100      	movs	r1, #0
 801011c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 801011e:	183b      	adds	r3, r7, r0
 8010120:	7b1b      	ldrb	r3, [r3, #12]
 8010122:	069b      	lsls	r3, r3, #26
 8010124:	0fdb      	lsrs	r3, r3, #31
 8010126:	b2db      	uxtb	r3, r3
 8010128:	1e5a      	subs	r2, r3, #1
 801012a:	4193      	sbcs	r3, r2
 801012c:	b2d9      	uxtb	r1, r3
 801012e:	4aa9      	ldr	r2, [pc, #676]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 8010130:	2388      	movs	r3, #136	; 0x88
 8010132:	00db      	lsls	r3, r3, #3
 8010134:	54d1      	strb	r1, [r2, r3]

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8010136:	4ba7      	ldr	r3, [pc, #668]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 8010138:	4aad      	ldr	r2, [pc, #692]	; (80103f0 <ProcessRadioRxDone+0xa50>)
 801013a:	5c9b      	ldrb	r3, [r3, r2]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d004      	beq.n	801014a <ProcessRadioRxDone+0x7aa>
                ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )
 8010140:	4ba4      	ldr	r3, [pc, #656]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 8010142:	4aab      	ldr	r2, [pc, #684]	; (80103f0 <ProcessRadioRxDone+0xa50>)
 8010144:	5c9b      	ldrb	r3, [r3, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8010146:	2b01      	cmp	r3, #1
 8010148:	d105      	bne.n	8010156 <ProcessRadioRxDone+0x7b6>
            {
                MacCtx.NvmCtx->AdrAckCounter = 0;
 801014a:	4ba2      	ldr	r3, [pc, #648]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 801014c:	4aa9      	ldr	r2, [pc, #676]	; (80103f4 <ProcessRadioRxDone+0xa54>)
 801014e:	589b      	ldr	r3, [r3, r2]
 8010150:	22f4      	movs	r2, #244	; 0xf4
 8010152:	2100      	movs	r1, #0
 8010154:	5099      	str	r1, [r3, r2]
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8010156:	2383      	movs	r3, #131	; 0x83
 8010158:	18fb      	adds	r3, r7, r3
 801015a:	781b      	ldrb	r3, [r3, #0]
 801015c:	2b01      	cmp	r3, #1
 801015e:	d104      	bne.n	801016a <ProcessRadioRxDone+0x7ca>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8010160:	4b9c      	ldr	r3, [pc, #624]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 8010162:	4aa5      	ldr	r2, [pc, #660]	; (80103f8 <ProcessRadioRxDone+0xa58>)
 8010164:	2102      	movs	r1, #2
 8010166:	5499      	strb	r1, [r3, r2]
 8010168:	e02f      	b.n	80101ca <ProcessRadioRxDone+0x82a>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 801016a:	2374      	movs	r3, #116	; 0x74
 801016c:	18fb      	adds	r3, r7, r3
 801016e:	781b      	ldrb	r3, [r3, #0]
 8010170:	221f      	movs	r2, #31
 8010172:	4393      	bics	r3, r2
 8010174:	b2db      	uxtb	r3, r3
 8010176:	2ba0      	cmp	r3, #160	; 0xa0
 8010178:	d11c      	bne.n	80101b4 <ProcessRadioRxDone+0x814>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 801017a:	4b96      	ldr	r3, [pc, #600]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 801017c:	4a9d      	ldr	r2, [pc, #628]	; (80103f4 <ProcessRadioRxDone+0xa54>)
 801017e:	589a      	ldr	r2, [r3, r2]
 8010180:	23e0      	movs	r3, #224	; 0xe0
 8010182:	005b      	lsls	r3, r3, #1
 8010184:	2101      	movs	r1, #1
 8010186:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8010188:	4b92      	ldr	r3, [pc, #584]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 801018a:	4a9a      	ldr	r2, [pc, #616]	; (80103f4 <ProcessRadioRxDone+0xa54>)
 801018c:	589a      	ldr	r2, [r3, r2]
 801018e:	23e9      	movs	r3, #233	; 0xe9
 8010190:	005b      	lsls	r3, r3, #1
 8010192:	5cd3      	ldrb	r3, [r2, r3]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d108      	bne.n	80101aa <ProcessRadioRxDone+0x80a>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 8010198:	4b8e      	ldr	r3, [pc, #568]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 801019a:	4a96      	ldr	r2, [pc, #600]	; (80103f4 <ProcessRadioRxDone+0xa54>)
 801019c:	589a      	ldr	r2, [r3, r2]
 801019e:	2334      	movs	r3, #52	; 0x34
 80101a0:	18fb      	adds	r3, r7, r3
 80101a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80101a4:	23ec      	movs	r3, #236	; 0xec
 80101a6:	005b      	lsls	r3, r3, #1
 80101a8:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80101aa:	4b8a      	ldr	r3, [pc, #552]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80101ac:	4a92      	ldr	r2, [pc, #584]	; (80103f8 <ProcessRadioRxDone+0xa58>)
 80101ae:	2101      	movs	r1, #1
 80101b0:	5499      	strb	r1, [r3, r2]
 80101b2:	e00a      	b.n	80101ca <ProcessRadioRxDone+0x82a>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 80101b4:	4b87      	ldr	r3, [pc, #540]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80101b6:	4a8f      	ldr	r2, [pc, #572]	; (80103f4 <ProcessRadioRxDone+0xa54>)
 80101b8:	589a      	ldr	r2, [r3, r2]
 80101ba:	23e0      	movs	r3, #224	; 0xe0
 80101bc:	005b      	lsls	r3, r3, #1
 80101be:	2100      	movs	r1, #0
 80101c0:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80101c2:	4b84      	ldr	r3, [pc, #528]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80101c4:	4a8c      	ldr	r2, [pc, #560]	; (80103f8 <ProcessRadioRxDone+0xa58>)
 80101c6:	2100      	movs	r1, #0
 80101c8:	5499      	strb	r1, [r3, r2]
                }
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 80101ca:	4b82      	ldr	r3, [pc, #520]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80101cc:	4a88      	ldr	r2, [pc, #544]	; (80103f0 <ProcessRadioRxDone+0xa50>)
 80101ce:	5c98      	ldrb	r0, [r3, r2]
 80101d0:	4b80      	ldr	r3, [pc, #512]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80101d2:	4a8a      	ldr	r2, [pc, #552]	; (80103fc <ProcessRadioRxDone+0xa5c>)
 80101d4:	5c9a      	ldrb	r2, [r3, r2]
 80101d6:	2334      	movs	r3, #52	; 0x34
 80101d8:	18fb      	adds	r3, r7, r3
 80101da:	7b1b      	ldrb	r3, [r3, #12]
 80101dc:	1c19      	adds	r1, r3, #0
 80101de:	f002 f999 	bl	8012514 <RemoveMacCommands>

            switch( fType )
 80101e2:	1dbb      	adds	r3, r7, #6
 80101e4:	781b      	ldrb	r3, [r3, #0]
 80101e6:	2b01      	cmp	r3, #1
 80101e8:	d038      	beq.n	801025c <ProcessRadioRxDone+0x8bc>
 80101ea:	dc02      	bgt.n	80101f2 <ProcessRadioRxDone+0x852>
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d005      	beq.n	80101fc <ProcessRadioRxDone+0x85c>
 80101f0:	e086      	b.n	8010300 <ProcessRadioRxDone+0x960>
 80101f2:	2b02      	cmp	r3, #2
 80101f4:	d052      	beq.n	801029c <ProcessRadioRxDone+0x8fc>
 80101f6:	2b03      	cmp	r3, #3
 80101f8:	d06a      	beq.n	80102d0 <ProcessRadioRxDone+0x930>
 80101fa:	e081      	b.n	8010300 <ProcessRadioRxDone+0x960>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 80101fc:	2034      	movs	r0, #52	; 0x34
 80101fe:	183b      	adds	r3, r7, r0
 8010200:	7b1b      	ldrb	r3, [r3, #12]
 8010202:	071b      	lsls	r3, r3, #28
 8010204:	0f1b      	lsrs	r3, r3, #28
 8010206:	b2db      	uxtb	r3, r3
 8010208:	001c      	movs	r4, r3
 801020a:	4b72      	ldr	r3, [pc, #456]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 801020c:	4a78      	ldr	r2, [pc, #480]	; (80103f0 <ProcessRadioRxDone+0xa50>)
 801020e:	5c9b      	ldrb	r3, [r3, r2]
 8010210:	2277      	movs	r2, #119	; 0x77
 8010212:	18ba      	adds	r2, r7, r2
 8010214:	2100      	movs	r1, #0
 8010216:	5651      	ldrsb	r1, [r2, r1]
 8010218:	0005      	movs	r5, r0
 801021a:	183a      	adds	r2, r7, r0
 801021c:	3210      	adds	r2, #16
 801021e:	0010      	movs	r0, r2
 8010220:	9300      	str	r3, [sp, #0]
 8010222:	000b      	movs	r3, r1
 8010224:	0022      	movs	r2, r4
 8010226:	2100      	movs	r1, #0
 8010228:	f000 ffd6 	bl	80111d8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801022c:	0028      	movs	r0, r5
 801022e:	183b      	adds	r3, r7, r0
 8010230:	2220      	movs	r2, #32
 8010232:	5c99      	ldrb	r1, [r3, r2]
 8010234:	4b67      	ldr	r3, [pc, #412]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 8010236:	4a72      	ldr	r2, [pc, #456]	; (8010400 <ProcessRadioRxDone+0xa60>)
 8010238:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 801023a:	183b      	adds	r3, r7, r0
 801023c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801023e:	4b65      	ldr	r3, [pc, #404]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 8010240:	4968      	ldr	r1, [pc, #416]	; (80103e4 <ProcessRadioRxDone+0xa44>)
 8010242:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8010244:	183b      	adds	r3, r7, r0
 8010246:	2228      	movs	r2, #40	; 0x28
 8010248:	5c99      	ldrb	r1, [r3, r2]
 801024a:	4a62      	ldr	r2, [pc, #392]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 801024c:	2385      	movs	r3, #133	; 0x85
 801024e:	00db      	lsls	r3, r3, #3
 8010250:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 8010252:	4b60      	ldr	r3, [pc, #384]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 8010254:	4a6b      	ldr	r2, [pc, #428]	; (8010404 <ProcessRadioRxDone+0xa64>)
 8010256:	2101      	movs	r1, #1
 8010258:	5499      	strb	r1, [r3, r2]
                    break;
 801025a:	e058      	b.n	801030e <ProcessRadioRxDone+0x96e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 801025c:	2034      	movs	r0, #52	; 0x34
 801025e:	183b      	adds	r3, r7, r0
 8010260:	7b1b      	ldrb	r3, [r3, #12]
 8010262:	071b      	lsls	r3, r3, #28
 8010264:	0f1b      	lsrs	r3, r3, #28
 8010266:	b2db      	uxtb	r3, r3
 8010268:	001c      	movs	r4, r3
 801026a:	4b5a      	ldr	r3, [pc, #360]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 801026c:	4a60      	ldr	r2, [pc, #384]	; (80103f0 <ProcessRadioRxDone+0xa50>)
 801026e:	5c9b      	ldrb	r3, [r3, r2]
 8010270:	2277      	movs	r2, #119	; 0x77
 8010272:	18ba      	adds	r2, r7, r2
 8010274:	2100      	movs	r1, #0
 8010276:	5651      	ldrsb	r1, [r2, r1]
 8010278:	0005      	movs	r5, r0
 801027a:	183a      	adds	r2, r7, r0
 801027c:	3210      	adds	r2, #16
 801027e:	0010      	movs	r0, r2
 8010280:	9300      	str	r3, [sp, #0]
 8010282:	000b      	movs	r3, r1
 8010284:	0022      	movs	r2, r4
 8010286:	2100      	movs	r1, #0
 8010288:	f000 ffa6 	bl	80111d8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801028c:	0028      	movs	r0, r5
 801028e:	183b      	adds	r3, r7, r0
 8010290:	2220      	movs	r2, #32
 8010292:	5c99      	ldrb	r1, [r3, r2]
 8010294:	4b4f      	ldr	r3, [pc, #316]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 8010296:	4a5a      	ldr	r2, [pc, #360]	; (8010400 <ProcessRadioRxDone+0xa60>)
 8010298:	5499      	strb	r1, [r3, r2]
                    break;
 801029a:	e038      	b.n	801030e <ProcessRadioRxDone+0x96e>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 801029c:	2434      	movs	r4, #52	; 0x34
 801029e:	193b      	adds	r3, r7, r4
 80102a0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80102a2:	193b      	adds	r3, r7, r4
 80102a4:	2228      	movs	r2, #40	; 0x28
 80102a6:	5c99      	ldrb	r1, [r3, r2]
 80102a8:	4b4a      	ldr	r3, [pc, #296]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80102aa:	4a51      	ldr	r2, [pc, #324]	; (80103f0 <ProcessRadioRxDone+0xa50>)
 80102ac:	5c9b      	ldrb	r3, [r3, r2]
 80102ae:	2277      	movs	r2, #119	; 0x77
 80102b0:	18ba      	adds	r2, r7, r2
 80102b2:	7812      	ldrb	r2, [r2, #0]
 80102b4:	b252      	sxtb	r2, r2
 80102b6:	9300      	str	r3, [sp, #0]
 80102b8:	0013      	movs	r3, r2
 80102ba:	000a      	movs	r2, r1
 80102bc:	2100      	movs	r1, #0
 80102be:	f000 ff8b 	bl	80111d8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80102c2:	193b      	adds	r3, r7, r4
 80102c4:	2220      	movs	r2, #32
 80102c6:	5c99      	ldrb	r1, [r3, r2]
 80102c8:	4b42      	ldr	r3, [pc, #264]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80102ca:	4a4d      	ldr	r2, [pc, #308]	; (8010400 <ProcessRadioRxDone+0xa60>)
 80102cc:	5499      	strb	r1, [r3, r2]
                    break;
 80102ce:	e01e      	b.n	801030e <ProcessRadioRxDone+0x96e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80102d0:	2034      	movs	r0, #52	; 0x34
 80102d2:	183b      	adds	r3, r7, r0
 80102d4:	2220      	movs	r2, #32
 80102d6:	5c99      	ldrb	r1, [r3, r2]
 80102d8:	4b3e      	ldr	r3, [pc, #248]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80102da:	4a49      	ldr	r2, [pc, #292]	; (8010400 <ProcessRadioRxDone+0xa60>)
 80102dc:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80102de:	183b      	adds	r3, r7, r0
 80102e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102e2:	4b3c      	ldr	r3, [pc, #240]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80102e4:	493f      	ldr	r1, [pc, #252]	; (80103e4 <ProcessRadioRxDone+0xa44>)
 80102e6:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80102e8:	183b      	adds	r3, r7, r0
 80102ea:	2228      	movs	r2, #40	; 0x28
 80102ec:	5c99      	ldrb	r1, [r3, r2]
 80102ee:	4a39      	ldr	r2, [pc, #228]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80102f0:	2385      	movs	r3, #133	; 0x85
 80102f2:	00db      	lsls	r3, r3, #3
 80102f4:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 80102f6:	4b37      	ldr	r3, [pc, #220]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80102f8:	4a42      	ldr	r2, [pc, #264]	; (8010404 <ProcessRadioRxDone+0xa64>)
 80102fa:	2101      	movs	r1, #1
 80102fc:	5499      	strb	r1, [r3, r2]
                    break;
 80102fe:	e006      	b.n	801030e <ProcessRadioRxDone+0x96e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010300:	4b34      	ldr	r3, [pc, #208]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 8010302:	4a35      	ldr	r2, [pc, #212]	; (80103d8 <ProcessRadioRxDone+0xa38>)
 8010304:	2101      	movs	r1, #1
 8010306:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 8010308:	f7ff fb1e 	bl	800f948 <PrepareRxDoneAbort>
                    break;
 801030c:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 801030e:	4b31      	ldr	r3, [pc, #196]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 8010310:	4a3d      	ldr	r2, [pc, #244]	; (8010408 <ProcessRadioRxDone+0xa68>)
 8010312:	5c99      	ldrb	r1, [r3, r2]
 8010314:	2002      	movs	r0, #2
 8010316:	4301      	orrs	r1, r0
 8010318:	5499      	strb	r1, [r3, r2]

            break;
 801031a:	e036      	b.n	801038a <ProcessRadioRxDone+0x9ea>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 801031c:	2476      	movs	r4, #118	; 0x76
 801031e:	193b      	adds	r3, r7, r4
 8010320:	781b      	ldrb	r3, [r3, #0]
 8010322:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010324:	18d1      	adds	r1, r2, r3
 8010326:	193b      	adds	r3, r7, r4
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	b29b      	uxth	r3, r3
 801032c:	257a      	movs	r5, #122	; 0x7a
 801032e:	197a      	adds	r2, r7, r5
 8010330:	8812      	ldrh	r2, [r2, #0]
 8010332:	1ad3      	subs	r3, r2, r3
 8010334:	b29a      	uxth	r2, r3
 8010336:	4b35      	ldr	r3, [pc, #212]	; (801040c <ProcessRadioRxDone+0xa6c>)
 8010338:	0018      	movs	r0, r3
 801033a:	f00b f979 	bl	801b630 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 801033e:	4b25      	ldr	r3, [pc, #148]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 8010340:	4a2d      	ldr	r2, [pc, #180]	; (80103f8 <ProcessRadioRxDone+0xa58>)
 8010342:	2103      	movs	r1, #3
 8010344:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010346:	4b23      	ldr	r3, [pc, #140]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 8010348:	4a23      	ldr	r2, [pc, #140]	; (80103d8 <ProcessRadioRxDone+0xa38>)
 801034a:	2100      	movs	r1, #0
 801034c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 801034e:	4b21      	ldr	r3, [pc, #132]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 8010350:	4924      	ldr	r1, [pc, #144]	; (80103e4 <ProcessRadioRxDone+0xa44>)
 8010352:	4a2e      	ldr	r2, [pc, #184]	; (801040c <ProcessRadioRxDone+0xa6c>)
 8010354:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8010356:	197b      	adds	r3, r7, r5
 8010358:	881b      	ldrh	r3, [r3, #0]
 801035a:	b2da      	uxtb	r2, r3
 801035c:	193b      	adds	r3, r7, r4
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	1ad3      	subs	r3, r2, r3
 8010362:	b2d9      	uxtb	r1, r3
 8010364:	4a1b      	ldr	r2, [pc, #108]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 8010366:	2385      	movs	r3, #133	; 0x85
 8010368:	00db      	lsls	r3, r3, #3
 801036a:	54d1      	strb	r1, [r2, r3]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 801036c:	4b19      	ldr	r3, [pc, #100]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 801036e:	4a26      	ldr	r2, [pc, #152]	; (8010408 <ProcessRadioRxDone+0xa68>)
 8010370:	5c99      	ldrb	r1, [r3, r2]
 8010372:	2002      	movs	r0, #2
 8010374:	4301      	orrs	r1, r0
 8010376:	5499      	strb	r1, [r3, r2]
            break;
 8010378:	e007      	b.n	801038a <ProcessRadioRxDone+0x9ea>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801037a:	4b16      	ldr	r3, [pc, #88]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 801037c:	4a16      	ldr	r2, [pc, #88]	; (80103d8 <ProcessRadioRxDone+0xa38>)
 801037e:	2101      	movs	r1, #1
 8010380:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 8010382:	f7ff fae1 	bl	800f948 <PrepareRxDoneAbort>
            break;
 8010386:	e000      	b.n	801038a <ProcessRadioRxDone+0x9ea>
            break;
 8010388:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 801038a:	4b12      	ldr	r3, [pc, #72]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 801038c:	4a20      	ldr	r2, [pc, #128]	; (8010410 <ProcessRadioRxDone+0xa70>)
 801038e:	5c9b      	ldrb	r3, [r3, r2]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d009      	beq.n	80103a8 <ProcessRadioRxDone+0xa08>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010394:	4a0f      	ldr	r2, [pc, #60]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 8010396:	2388      	movs	r3, #136	; 0x88
 8010398:	00db      	lsls	r3, r3, #3
 801039a:	5cd3      	ldrb	r3, [r2, r3]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d00d      	beq.n	80103bc <ProcessRadioRxDone+0xa1c>
        {
            OnAckTimeoutTimerEvent( NULL );
 80103a0:	2000      	movs	r0, #0
 80103a2:	f000 fca1 	bl	8010ce8 <OnAckTimeoutTimerEvent>
 80103a6:	e009      	b.n	80103bc <ProcessRadioRxDone+0xa1c>
        }
    }
    else
    {
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 80103a8:	4b0a      	ldr	r3, [pc, #40]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80103aa:	4a12      	ldr	r2, [pc, #72]	; (80103f4 <ProcessRadioRxDone+0xa54>)
 80103ac:	589b      	ldr	r3, [r3, r2]
 80103ae:	22f0      	movs	r2, #240	; 0xf0
 80103b0:	5c9b      	ldrb	r3, [r3, r2]
 80103b2:	2b02      	cmp	r3, #2
 80103b4:	d102      	bne.n	80103bc <ProcessRadioRxDone+0xa1c>
        {
            OnAckTimeoutTimerEvent( NULL );
 80103b6:	2000      	movs	r0, #0
 80103b8:	f000 fc96 	bl	8010ce8 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 80103bc:	4b05      	ldr	r3, [pc, #20]	; (80103d4 <ProcessRadioRxDone+0xa34>)
 80103be:	4a12      	ldr	r2, [pc, #72]	; (8010408 <ProcessRadioRxDone+0xa68>)
 80103c0:	5c99      	ldrb	r1, [r3, r2]
 80103c2:	2020      	movs	r0, #32
 80103c4:	4301      	orrs	r1, r0
 80103c6:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 80103c8:	f7ff f9f6 	bl	800f7b8 <UpdateRxSlotIdleState>
}
 80103cc:	46bd      	mov	sp, r7
 80103ce:	b023      	add	sp, #140	; 0x8c
 80103d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103d2:	46c0      	nop			; (mov r8, r8)
 80103d4:	200008f0 	.word	0x200008f0
 80103d8:	0000041d 	.word	0x0000041d
 80103dc:	0000041e 	.word	0x0000041e
 80103e0:	00000421 	.word	0x00000421
 80103e4:	00000424 	.word	0x00000424
 80103e8:	0000042e 	.word	0x0000042e
 80103ec:	0000043d 	.word	0x0000043d
 80103f0:	0000042d 	.word	0x0000042d
 80103f4:	00000484 	.word	0x00000484
 80103f8:	0000041c 	.word	0x0000041c
 80103fc:	0000043c 	.word	0x0000043c
 8010400:	0000041f 	.word	0x0000041f
 8010404:	00000429 	.word	0x00000429
 8010408:	00000481 	.word	0x00000481
 801040c:	20000b28 	.word	0x20000b28
 8010410:	00000414 	.word	0x00000414

08010414 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8010414:	b580      	push	{r7, lr}
 8010416:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8010418:	4b12      	ldr	r3, [pc, #72]	; (8010464 <ProcessRadioTxTimeout+0x50>)
 801041a:	4a13      	ldr	r2, [pc, #76]	; (8010468 <ProcessRadioTxTimeout+0x54>)
 801041c:	589b      	ldr	r3, [r3, r2]
 801041e:	22f0      	movs	r2, #240	; 0xf0
 8010420:	5c9b      	ldrb	r3, [r3, r2]
 8010422:	2b02      	cmp	r3, #2
 8010424:	d002      	beq.n	801042c <ProcessRadioTxTimeout+0x18>
    {
        Radio.Sleep( );
 8010426:	4b11      	ldr	r3, [pc, #68]	; (801046c <ProcessRadioTxTimeout+0x58>)
 8010428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801042a:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 801042c:	f7ff f9c4 	bl	800f7b8 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8010430:	4b0c      	ldr	r3, [pc, #48]	; (8010464 <ProcessRadioTxTimeout+0x50>)
 8010432:	4a0f      	ldr	r2, [pc, #60]	; (8010470 <ProcessRadioTxTimeout+0x5c>)
 8010434:	2102      	movs	r1, #2
 8010436:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8010438:	2002      	movs	r0, #2
 801043a:	f005 fa7d 	bl	8015938 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 801043e:	4b09      	ldr	r3, [pc, #36]	; (8010464 <ProcessRadioTxTimeout+0x50>)
 8010440:	4a0c      	ldr	r2, [pc, #48]	; (8010474 <ProcessRadioTxTimeout+0x60>)
 8010442:	5c9b      	ldrb	r3, [r3, r2]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d003      	beq.n	8010450 <ProcessRadioTxTimeout+0x3c>
    {
        MacCtx.AckTimeoutRetry = true;
 8010448:	4b06      	ldr	r3, [pc, #24]	; (8010464 <ProcessRadioTxTimeout+0x50>)
 801044a:	4a0b      	ldr	r2, [pc, #44]	; (8010478 <ProcessRadioTxTimeout+0x64>)
 801044c:	2101      	movs	r1, #1
 801044e:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010450:	4b04      	ldr	r3, [pc, #16]	; (8010464 <ProcessRadioTxTimeout+0x50>)
 8010452:	4a0a      	ldr	r2, [pc, #40]	; (801047c <ProcessRadioTxTimeout+0x68>)
 8010454:	5c99      	ldrb	r1, [r3, r2]
 8010456:	2020      	movs	r0, #32
 8010458:	4301      	orrs	r1, r0
 801045a:	5499      	strb	r1, [r3, r2]
}
 801045c:	46c0      	nop			; (mov r8, r8)
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}
 8010462:	46c0      	nop			; (mov r8, r8)
 8010464:	200008f0 	.word	0x200008f0
 8010468:	00000484 	.word	0x00000484
 801046c:	0801cb08 	.word	0x0801cb08
 8010470:	0000043d 	.word	0x0000043d
 8010474:	00000414 	.word	0x00000414
 8010478:	00000413 	.word	0x00000413
 801047c:	00000481 	.word	0x00000481

08010480 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b084      	sub	sp, #16
 8010484:	af00      	add	r7, sp, #0
 8010486:	0002      	movs	r2, r0
 8010488:	1dfb      	adds	r3, r7, #7
 801048a:	701a      	strb	r2, [r3, #0]
 801048c:	1dbb      	adds	r3, r7, #6
 801048e:	1c0a      	adds	r2, r1, #0
 8010490:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 8010492:	230f      	movs	r3, #15
 8010494:	18fb      	adds	r3, r7, r3
 8010496:	2200      	movs	r2, #0
 8010498:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 801049a:	4b3d      	ldr	r3, [pc, #244]	; (8010590 <HandleRadioRxErrorTimeout+0x110>)
 801049c:	4a3d      	ldr	r2, [pc, #244]	; (8010594 <HandleRadioRxErrorTimeout+0x114>)
 801049e:	589b      	ldr	r3, [r3, r2]
 80104a0:	22f0      	movs	r2, #240	; 0xf0
 80104a2:	5c9b      	ldrb	r3, [r3, r2]
 80104a4:	2b02      	cmp	r3, #2
 80104a6:	d002      	beq.n	80104ae <HandleRadioRxErrorTimeout+0x2e>
    {
        Radio.Sleep( );
 80104a8:	4b3b      	ldr	r3, [pc, #236]	; (8010598 <HandleRadioRxErrorTimeout+0x118>)
 80104aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104ac:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80104ae:	f004 fdc0 	bl	8015032 <LoRaMacClassBIsBeaconExpected>
 80104b2:	1e03      	subs	r3, r0, #0
 80104b4:	d009      	beq.n	80104ca <HandleRadioRxErrorTimeout+0x4a>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80104b6:	2002      	movs	r0, #2
 80104b8:	f004 fd73 	bl	8014fa2 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80104bc:	2000      	movs	r0, #0
 80104be:	f004 fd94 	bl	8014fea <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80104c2:	230f      	movs	r3, #15
 80104c4:	18fb      	adds	r3, r7, r3
 80104c6:	2201      	movs	r2, #1
 80104c8:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80104ca:	4b31      	ldr	r3, [pc, #196]	; (8010590 <HandleRadioRxErrorTimeout+0x110>)
 80104cc:	4a31      	ldr	r2, [pc, #196]	; (8010594 <HandleRadioRxErrorTimeout+0x114>)
 80104ce:	589b      	ldr	r3, [r3, r2]
 80104d0:	22f0      	movs	r2, #240	; 0xf0
 80104d2:	5c9b      	ldrb	r3, [r3, r2]
 80104d4:	2b01      	cmp	r3, #1
 80104d6:	d11b      	bne.n	8010510 <HandleRadioRxErrorTimeout+0x90>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80104d8:	f004 fdb1 	bl	801503e <LoRaMacClassBIsPingExpected>
 80104dc:	1e03      	subs	r3, r0, #0
 80104de:	d009      	beq.n	80104f4 <HandleRadioRxErrorTimeout+0x74>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80104e0:	2000      	movs	r0, #0
 80104e2:	f004 fd68 	bl	8014fb6 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80104e6:	2000      	movs	r0, #0
 80104e8:	f004 fd87 	bl	8014ffa <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80104ec:	230f      	movs	r3, #15
 80104ee:	18fb      	adds	r3, r7, r3
 80104f0:	2201      	movs	r2, #1
 80104f2:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80104f4:	f004 fda9 	bl	801504a <LoRaMacClassBIsMulticastExpected>
 80104f8:	1e03      	subs	r3, r0, #0
 80104fa:	d009      	beq.n	8010510 <HandleRadioRxErrorTimeout+0x90>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80104fc:	2000      	movs	r0, #0
 80104fe:	f004 fd64 	bl	8014fca <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010502:	2000      	movs	r0, #0
 8010504:	f004 fd81 	bl	801500a <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8010508:	230f      	movs	r3, #15
 801050a:	18fb      	adds	r3, r7, r3
 801050c:	2201      	movs	r2, #1
 801050e:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 8010510:	230f      	movs	r3, #15
 8010512:	18fb      	adds	r3, r7, r3
 8010514:	781b      	ldrb	r3, [r3, #0]
 8010516:	2201      	movs	r2, #1
 8010518:	4053      	eors	r3, r2
 801051a:	b2db      	uxtb	r3, r3
 801051c:	2b00      	cmp	r3, #0
 801051e:	d031      	beq.n	8010584 <HandleRadioRxErrorTimeout+0x104>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010520:	4a1b      	ldr	r2, [pc, #108]	; (8010590 <HandleRadioRxErrorTimeout+0x110>)
 8010522:	2390      	movs	r3, #144	; 0x90
 8010524:	00db      	lsls	r3, r3, #3
 8010526:	5cd3      	ldrb	r3, [r2, r3]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d10f      	bne.n	801054c <HandleRadioRxErrorTimeout+0xcc>
        {
            if( MacCtx.NodeAckRequested == true )
 801052c:	4b18      	ldr	r3, [pc, #96]	; (8010590 <HandleRadioRxErrorTimeout+0x110>)
 801052e:	4a1b      	ldr	r2, [pc, #108]	; (801059c <HandleRadioRxErrorTimeout+0x11c>)
 8010530:	5c9b      	ldrb	r3, [r3, r2]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d004      	beq.n	8010540 <HandleRadioRxErrorTimeout+0xc0>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8010536:	4b16      	ldr	r3, [pc, #88]	; (8010590 <HandleRadioRxErrorTimeout+0x110>)
 8010538:	1dfa      	adds	r2, r7, #7
 801053a:	4919      	ldr	r1, [pc, #100]	; (80105a0 <HandleRadioRxErrorTimeout+0x120>)
 801053c:	7812      	ldrb	r2, [r2, #0]
 801053e:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8010540:	1dfb      	adds	r3, r7, #7
 8010542:	781b      	ldrb	r3, [r3, #0]
 8010544:	0018      	movs	r0, r3
 8010546:	f005 f9f7 	bl	8015938 <LoRaMacConfirmQueueSetStatusCmn>
 801054a:	e01b      	b.n	8010584 <HandleRadioRxErrorTimeout+0x104>
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 801054c:	4b10      	ldr	r3, [pc, #64]	; (8010590 <HandleRadioRxErrorTimeout+0x110>)
 801054e:	4a13      	ldr	r2, [pc, #76]	; (801059c <HandleRadioRxErrorTimeout+0x11c>)
 8010550:	5c9b      	ldrb	r3, [r3, r2]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d004      	beq.n	8010560 <HandleRadioRxErrorTimeout+0xe0>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8010556:	4b0e      	ldr	r3, [pc, #56]	; (8010590 <HandleRadioRxErrorTimeout+0x110>)
 8010558:	1dba      	adds	r2, r7, #6
 801055a:	4911      	ldr	r1, [pc, #68]	; (80105a0 <HandleRadioRxErrorTimeout+0x120>)
 801055c:	7812      	ldrb	r2, [r2, #0]
 801055e:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8010560:	1dbb      	adds	r3, r7, #6
 8010562:	781b      	ldrb	r3, [r3, #0]
 8010564:	0018      	movs	r0, r3
 8010566:	f005 f9e7 	bl	8015938 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 801056a:	4b09      	ldr	r3, [pc, #36]	; (8010590 <HandleRadioRxErrorTimeout+0x110>)
 801056c:	4a09      	ldr	r2, [pc, #36]	; (8010594 <HandleRadioRxErrorTimeout+0x114>)
 801056e:	589b      	ldr	r3, [r3, r2]
 8010570:	22f0      	movs	r2, #240	; 0xf0
 8010572:	5c9b      	ldrb	r3, [r3, r2]
 8010574:	2b02      	cmp	r3, #2
 8010576:	d005      	beq.n	8010584 <HandleRadioRxErrorTimeout+0x104>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 8010578:	4b05      	ldr	r3, [pc, #20]	; (8010590 <HandleRadioRxErrorTimeout+0x110>)
 801057a:	4a0a      	ldr	r2, [pc, #40]	; (80105a4 <HandleRadioRxErrorTimeout+0x124>)
 801057c:	5c99      	ldrb	r1, [r3, r2]
 801057e:	2020      	movs	r0, #32
 8010580:	4301      	orrs	r1, r0
 8010582:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    UpdateRxSlotIdleState( );
 8010584:	f7ff f918 	bl	800f7b8 <UpdateRxSlotIdleState>
}
 8010588:	46c0      	nop			; (mov r8, r8)
 801058a:	46bd      	mov	sp, r7
 801058c:	b004      	add	sp, #16
 801058e:	bd80      	pop	{r7, pc}
 8010590:	200008f0 	.word	0x200008f0
 8010594:	00000484 	.word	0x00000484
 8010598:	0801cb08 	.word	0x0801cb08
 801059c:	00000414 	.word	0x00000414
 80105a0:	0000043d 	.word	0x0000043d
 80105a4:	00000481 	.word	0x00000481

080105a8 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80105ac:	2106      	movs	r1, #6
 80105ae:	2005      	movs	r0, #5
 80105b0:	f7ff ff66 	bl	8010480 <HandleRadioRxErrorTimeout>
}
 80105b4:	46c0      	nop			; (mov r8, r8)
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}

080105ba <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 80105ba:	b580      	push	{r7, lr}
 80105bc:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 80105be:	2104      	movs	r1, #4
 80105c0:	2003      	movs	r0, #3
 80105c2:	f7ff ff5d 	bl	8010480 <HandleRadioRxErrorTimeout>
}
 80105c6:	46c0      	nop			; (mov r8, r8)
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80105d2:	f3ef 8310 	mrs	r3, PRIMASK
 80105d6:	607b      	str	r3, [r7, #4]
  return(result);
 80105d8:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 80105da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80105dc:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 80105de:	4b1f      	ldr	r3, [pc, #124]	; (801065c <LoRaMacHandleIrqEvents+0x90>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 80105e4:	4b1d      	ldr	r3, [pc, #116]	; (801065c <LoRaMacHandleIrqEvents+0x90>)
 80105e6:	2200      	movs	r2, #0
 80105e8:	601a      	str	r2, [r3, #0]
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	f383 8810 	msr	PRIMASK, r3
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d02c      	beq.n	8010654 <LoRaMacHandleIrqEvents+0x88>
    {
        if( events.Events.TxDone == 1 )
 80105fa:	003b      	movs	r3, r7
 80105fc:	781b      	ldrb	r3, [r3, #0]
 80105fe:	2210      	movs	r2, #16
 8010600:	4013      	ands	r3, r2
 8010602:	b2db      	uxtb	r3, r3
 8010604:	2b00      	cmp	r3, #0
 8010606:	d001      	beq.n	801060c <LoRaMacHandleIrqEvents+0x40>
        {
            ProcessRadioTxDone( );
 8010608:	f7ff f8f2 	bl	800f7f0 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 801060c:	003b      	movs	r3, r7
 801060e:	781b      	ldrb	r3, [r3, #0]
 8010610:	2208      	movs	r2, #8
 8010612:	4013      	ands	r3, r2
 8010614:	b2db      	uxtb	r3, r3
 8010616:	2b00      	cmp	r3, #0
 8010618:	d001      	beq.n	801061e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 801061a:	f7ff f9c1 	bl	800f9a0 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 801061e:	003b      	movs	r3, r7
 8010620:	781b      	ldrb	r3, [r3, #0]
 8010622:	2204      	movs	r2, #4
 8010624:	4013      	ands	r3, r2
 8010626:	b2db      	uxtb	r3, r3
 8010628:	2b00      	cmp	r3, #0
 801062a:	d001      	beq.n	8010630 <LoRaMacHandleIrqEvents+0x64>
        {
            ProcessRadioTxTimeout( );
 801062c:	f7ff fef2 	bl	8010414 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8010630:	003b      	movs	r3, r7
 8010632:	781b      	ldrb	r3, [r3, #0]
 8010634:	2202      	movs	r2, #2
 8010636:	4013      	ands	r3, r2
 8010638:	b2db      	uxtb	r3, r3
 801063a:	2b00      	cmp	r3, #0
 801063c:	d001      	beq.n	8010642 <LoRaMacHandleIrqEvents+0x76>
        {
            ProcessRadioRxError( );
 801063e:	f7ff ffb3 	bl	80105a8 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8010642:	003b      	movs	r3, r7
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	2201      	movs	r2, #1
 8010648:	4013      	ands	r3, r2
 801064a:	b2db      	uxtb	r3, r3
 801064c:	2b00      	cmp	r3, #0
 801064e:	d001      	beq.n	8010654 <LoRaMacHandleIrqEvents+0x88>
        {
            ProcessRadioRxTimeout( );
 8010650:	f7ff ffb3 	bl	80105ba <ProcessRadioRxTimeout>
        }
    }
}
 8010654:	46c0      	nop			; (mov r8, r8)
 8010656:	46bd      	mov	sp, r7
 8010658:	b004      	add	sp, #16
 801065a:	bd80      	pop	{r7, pc}
 801065c:	20000f54 	.word	0x20000f54

08010660 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8010660:	b580      	push	{r7, lr}
 8010662:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8010664:	4a08      	ldr	r2, [pc, #32]	; (8010688 <LoRaMacIsBusy+0x28>)
 8010666:	23d0      	movs	r3, #208	; 0xd0
 8010668:	009b      	lsls	r3, r3, #2
 801066a:	58d3      	ldr	r3, [r2, r3]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d106      	bne.n	801067e <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8010670:	4b05      	ldr	r3, [pc, #20]	; (8010688 <LoRaMacIsBusy+0x28>)
 8010672:	4a06      	ldr	r2, [pc, #24]	; (801068c <LoRaMacIsBusy+0x2c>)
 8010674:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8010676:	2b01      	cmp	r3, #1
 8010678:	d101      	bne.n	801067e <LoRaMacIsBusy+0x1e>
    {
        return false;
 801067a:	2300      	movs	r3, #0
 801067c:	e000      	b.n	8010680 <LoRaMacIsBusy+0x20>
    }
    return true;
 801067e:	2301      	movs	r3, #1
}
 8010680:	0018      	movs	r0, r3
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}
 8010686:	46c0      	nop			; (mov r8, r8)
 8010688:	200008f0 	.word	0x200008f0
 801068c:	00000482 	.word	0x00000482

08010690 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b082      	sub	sp, #8
 8010694:	af00      	add	r7, sp, #0
 8010696:	0002      	movs	r2, r0
 8010698:	1dfb      	adds	r3, r7, #7
 801069a:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 801069c:	4b04      	ldr	r3, [pc, #16]	; (80106b0 <LoRaMacEnableRequests+0x20>)
 801069e:	1dfa      	adds	r2, r7, #7
 80106a0:	4904      	ldr	r1, [pc, #16]	; (80106b4 <LoRaMacEnableRequests+0x24>)
 80106a2:	7812      	ldrb	r2, [r2, #0]
 80106a4:	545a      	strb	r2, [r3, r1]
}
 80106a6:	46c0      	nop			; (mov r8, r8)
 80106a8:	46bd      	mov	sp, r7
 80106aa:	b002      	add	sp, #8
 80106ac:	bd80      	pop	{r7, pc}
 80106ae:	46c0      	nop			; (mov r8, r8)
 80106b0:	200008f0 	.word	0x200008f0
 80106b4:	00000482 	.word	0x00000482

080106b8 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 80106be:	1d3b      	adds	r3, r7, #4
 80106c0:	4a2c      	ldr	r2, [pc, #176]	; (8010774 <LoRaMacHandleRequestEvents+0xbc>)
 80106c2:	492d      	ldr	r1, [pc, #180]	; (8010778 <LoRaMacHandleRequestEvents+0xc0>)
 80106c4:	5c52      	ldrb	r2, [r2, r1]
 80106c6:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 80106c8:	4a2a      	ldr	r2, [pc, #168]	; (8010774 <LoRaMacHandleRequestEvents+0xbc>)
 80106ca:	23d0      	movs	r3, #208	; 0xd0
 80106cc:	009b      	lsls	r3, r3, #2
 80106ce:	58d3      	ldr	r3, [r2, r3]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d14a      	bne.n	801076a <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80106d4:	4b27      	ldr	r3, [pc, #156]	; (8010774 <LoRaMacHandleRequestEvents+0xbc>)
 80106d6:	4a28      	ldr	r2, [pc, #160]	; (8010778 <LoRaMacHandleRequestEvents+0xc0>)
 80106d8:	5c9b      	ldrb	r3, [r3, r2]
 80106da:	2201      	movs	r2, #1
 80106dc:	4013      	ands	r3, r2
 80106de:	b2db      	uxtb	r3, r3
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d005      	beq.n	80106f0 <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80106e4:	4b23      	ldr	r3, [pc, #140]	; (8010774 <LoRaMacHandleRequestEvents+0xbc>)
 80106e6:	4a24      	ldr	r2, [pc, #144]	; (8010778 <LoRaMacHandleRequestEvents+0xc0>)
 80106e8:	5c99      	ldrb	r1, [r3, r2]
 80106ea:	2001      	movs	r0, #1
 80106ec:	4381      	bics	r1, r0
 80106ee:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80106f0:	4b20      	ldr	r3, [pc, #128]	; (8010774 <LoRaMacHandleRequestEvents+0xbc>)
 80106f2:	4a21      	ldr	r2, [pc, #132]	; (8010778 <LoRaMacHandleRequestEvents+0xc0>)
 80106f4:	5c9b      	ldrb	r3, [r3, r2]
 80106f6:	2204      	movs	r2, #4
 80106f8:	4013      	ands	r3, r2
 80106fa:	b2db      	uxtb	r3, r3
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d005      	beq.n	801070c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8010700:	4b1c      	ldr	r3, [pc, #112]	; (8010774 <LoRaMacHandleRequestEvents+0xbc>)
 8010702:	4a1d      	ldr	r2, [pc, #116]	; (8010778 <LoRaMacHandleRequestEvents+0xc0>)
 8010704:	5c99      	ldrb	r1, [r3, r2]
 8010706:	2004      	movs	r0, #4
 8010708:	4381      	bics	r1, r0
 801070a:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801070c:	2001      	movs	r0, #1
 801070e:	f7ff ffbf 	bl	8010690 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8010712:	1d3b      	adds	r3, r7, #4
 8010714:	781b      	ldrb	r3, [r3, #0]
 8010716:	2201      	movs	r2, #1
 8010718:	4013      	ands	r3, r2
 801071a:	b2db      	uxtb	r3, r3
 801071c:	2b00      	cmp	r3, #0
 801071e:	d007      	beq.n	8010730 <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8010720:	4a14      	ldr	r2, [pc, #80]	; (8010774 <LoRaMacHandleRequestEvents+0xbc>)
 8010722:	23d1      	movs	r3, #209	; 0xd1
 8010724:	009b      	lsls	r3, r3, #2
 8010726:	58d3      	ldr	r3, [r2, r3]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	4a14      	ldr	r2, [pc, #80]	; (801077c <LoRaMacHandleRequestEvents+0xc4>)
 801072c:	0010      	movs	r0, r2
 801072e:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8010730:	1d3b      	adds	r3, r7, #4
 8010732:	781b      	ldrb	r3, [r3, #0]
 8010734:	2204      	movs	r2, #4
 8010736:	4013      	ands	r3, r2
 8010738:	b2db      	uxtb	r3, r3
 801073a:	2b00      	cmp	r3, #0
 801073c:	d00d      	beq.n	801075a <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 801073e:	4b10      	ldr	r3, [pc, #64]	; (8010780 <LoRaMacHandleRequestEvents+0xc8>)
 8010740:	0018      	movs	r0, r3
 8010742:	f005 f945 	bl	80159d0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8010746:	f005 f9a5 	bl	8015a94 <LoRaMacConfirmQueueGetCnt>
 801074a:	1e03      	subs	r3, r0, #0
 801074c:	d005      	beq.n	801075a <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 801074e:	4b09      	ldr	r3, [pc, #36]	; (8010774 <LoRaMacHandleRequestEvents+0xbc>)
 8010750:	4a09      	ldr	r2, [pc, #36]	; (8010778 <LoRaMacHandleRequestEvents+0xc0>)
 8010752:	5c99      	ldrb	r1, [r3, r2]
 8010754:	2004      	movs	r0, #4
 8010756:	4301      	orrs	r1, r0
 8010758:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 801075a:	f004 fc91 	bl	8015080 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 801075e:	4b05      	ldr	r3, [pc, #20]	; (8010774 <LoRaMacHandleRequestEvents+0xbc>)
 8010760:	4a05      	ldr	r2, [pc, #20]	; (8010778 <LoRaMacHandleRequestEvents+0xc0>)
 8010762:	5c99      	ldrb	r1, [r3, r2]
 8010764:	2020      	movs	r0, #32
 8010766:	4381      	bics	r1, r0
 8010768:	5499      	strb	r1, [r3, r2]
    }
}
 801076a:	46c0      	nop			; (mov r8, r8)
 801076c:	46bd      	mov	sp, r7
 801076e:	b002      	add	sp, #8
 8010770:	bd80      	pop	{r7, pc}
 8010772:	46c0      	nop			; (mov r8, r8)
 8010774:	200008f0 	.word	0x200008f0
 8010778:	00000481 	.word	0x00000481
 801077c:	20000d2c 	.word	0x20000d2c
 8010780:	20000d40 	.word	0x20000d40

08010784 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 801078a:	4a0b      	ldr	r2, [pc, #44]	; (80107b8 <LoRaMacHandleScheduleUplinkEvent+0x34>)
 801078c:	23d0      	movs	r3, #208	; 0xd0
 801078e:	009b      	lsls	r3, r3, #2
 8010790:	58d3      	ldr	r3, [r2, r3]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d10c      	bne.n	80107b0 <LoRaMacHandleScheduleUplinkEvent+0x2c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 8010796:	1dfb      	adds	r3, r7, #7
 8010798:	2200      	movs	r2, #0
 801079a:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 801079c:	1dfb      	adds	r3, r7, #7
 801079e:	0018      	movs	r0, r3
 80107a0:	f004 ff70 	bl	8015684 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 80107a4:	1dfb      	adds	r3, r7, #7
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d001      	beq.n	80107b0 <LoRaMacHandleScheduleUplinkEvent+0x2c>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 80107ac:	f000 fd04 	bl	80111b8 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 80107b0:	46c0      	nop			; (mov r8, r8)
 80107b2:	46bd      	mov	sp, r7
 80107b4:	b002      	add	sp, #8
 80107b6:	bd80      	pop	{r7, pc}
 80107b8:	200008f0 	.word	0x200008f0

080107bc <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b088      	sub	sp, #32
 80107c0:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80107c2:	4b26      	ldr	r3, [pc, #152]	; (801085c <LoRaMacHandleIndicationEvents+0xa0>)
 80107c4:	4a26      	ldr	r2, [pc, #152]	; (8010860 <LoRaMacHandleIndicationEvents+0xa4>)
 80107c6:	5c9b      	ldrb	r3, [r3, r2]
 80107c8:	2208      	movs	r2, #8
 80107ca:	4013      	ands	r3, r2
 80107cc:	b2db      	uxtb	r3, r3
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d00d      	beq.n	80107ee <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80107d2:	4b22      	ldr	r3, [pc, #136]	; (801085c <LoRaMacHandleIndicationEvents+0xa0>)
 80107d4:	4a22      	ldr	r2, [pc, #136]	; (8010860 <LoRaMacHandleIndicationEvents+0xa4>)
 80107d6:	5c99      	ldrb	r1, [r3, r2]
 80107d8:	2008      	movs	r0, #8
 80107da:	4381      	bics	r1, r0
 80107dc:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 80107de:	4a1f      	ldr	r2, [pc, #124]	; (801085c <LoRaMacHandleIndicationEvents+0xa0>)
 80107e0:	23d1      	movs	r3, #209	; 0xd1
 80107e2:	009b      	lsls	r3, r3, #2
 80107e4:	58d3      	ldr	r3, [r2, r3]
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	4a1e      	ldr	r2, [pc, #120]	; (8010864 <LoRaMacHandleIndicationEvents+0xa8>)
 80107ea:	0010      	movs	r0, r2
 80107ec:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 80107ee:	4b1b      	ldr	r3, [pc, #108]	; (801085c <LoRaMacHandleIndicationEvents+0xa0>)
 80107f0:	4a1b      	ldr	r2, [pc, #108]	; (8010860 <LoRaMacHandleIndicationEvents+0xa4>)
 80107f2:	5c9b      	ldrb	r3, [r3, r2]
 80107f4:	2210      	movs	r2, #16
 80107f6:	4013      	ands	r3, r2
 80107f8:	b2db      	uxtb	r3, r3
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d013      	beq.n	8010826 <LoRaMacHandleIndicationEvents+0x6a>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 80107fe:	1d3b      	adds	r3, r7, #4
 8010800:	2206      	movs	r2, #6
 8010802:	701a      	strb	r2, [r3, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010804:	1d3b      	adds	r3, r7, #4
 8010806:	2200      	movs	r2, #0
 8010808:	705a      	strb	r2, [r3, #1]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 801080a:	4a14      	ldr	r2, [pc, #80]	; (801085c <LoRaMacHandleIndicationEvents+0xa0>)
 801080c:	23d1      	movs	r3, #209	; 0xd1
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	58d3      	ldr	r3, [r2, r3]
 8010812:	68db      	ldr	r3, [r3, #12]
 8010814:	1d3a      	adds	r2, r7, #4
 8010816:	0010      	movs	r0, r2
 8010818:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 801081a:	4b10      	ldr	r3, [pc, #64]	; (801085c <LoRaMacHandleIndicationEvents+0xa0>)
 801081c:	4a10      	ldr	r2, [pc, #64]	; (8010860 <LoRaMacHandleIndicationEvents+0xa4>)
 801081e:	5c99      	ldrb	r1, [r3, r2]
 8010820:	2010      	movs	r0, #16
 8010822:	4381      	bics	r1, r0
 8010824:	5499      	strb	r1, [r3, r2]
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010826:	4b0d      	ldr	r3, [pc, #52]	; (801085c <LoRaMacHandleIndicationEvents+0xa0>)
 8010828:	4a0d      	ldr	r2, [pc, #52]	; (8010860 <LoRaMacHandleIndicationEvents+0xa4>)
 801082a:	5c9b      	ldrb	r3, [r3, r2]
 801082c:	2202      	movs	r2, #2
 801082e:	4013      	ands	r3, r2
 8010830:	b2db      	uxtb	r3, r3
 8010832:	2b00      	cmp	r3, #0
 8010834:	d00d      	beq.n	8010852 <LoRaMacHandleIndicationEvents+0x96>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8010836:	4b09      	ldr	r3, [pc, #36]	; (801085c <LoRaMacHandleIndicationEvents+0xa0>)
 8010838:	4a09      	ldr	r2, [pc, #36]	; (8010860 <LoRaMacHandleIndicationEvents+0xa4>)
 801083a:	5c99      	ldrb	r1, [r3, r2]
 801083c:	2002      	movs	r0, #2
 801083e:	4381      	bics	r1, r0
 8010840:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 8010842:	4a06      	ldr	r2, [pc, #24]	; (801085c <LoRaMacHandleIndicationEvents+0xa0>)
 8010844:	23d1      	movs	r3, #209	; 0xd1
 8010846:	009b      	lsls	r3, r3, #2
 8010848:	58d3      	ldr	r3, [r2, r3]
 801084a:	685b      	ldr	r3, [r3, #4]
 801084c:	4a06      	ldr	r2, [pc, #24]	; (8010868 <LoRaMacHandleIndicationEvents+0xac>)
 801084e:	0010      	movs	r0, r2
 8010850:	4798      	blx	r3
    }
}
 8010852:	46c0      	nop			; (mov r8, r8)
 8010854:	46bd      	mov	sp, r7
 8010856:	b008      	add	sp, #32
 8010858:	bd80      	pop	{r7, pc}
 801085a:	46c0      	nop			; (mov r8, r8)
 801085c:	200008f0 	.word	0x200008f0
 8010860:	00000481 	.word	0x00000481
 8010864:	20000d54 	.word	0x20000d54
 8010868:	20000d0c 	.word	0x20000d0c

0801086c <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 801086c:	b590      	push	{r4, r7, lr}
 801086e:	b083      	sub	sp, #12
 8010870:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010872:	4b39      	ldr	r3, [pc, #228]	; (8010958 <LoRaMacHandleMcpsRequest+0xec>)
 8010874:	4a39      	ldr	r2, [pc, #228]	; (801095c <LoRaMacHandleMcpsRequest+0xf0>)
 8010876:	5c9b      	ldrb	r3, [r3, r2]
 8010878:	2201      	movs	r2, #1
 801087a:	4013      	ands	r3, r2
 801087c:	b2db      	uxtb	r3, r3
 801087e:	2b00      	cmp	r3, #0
 8010880:	d066      	beq.n	8010950 <LoRaMacHandleMcpsRequest+0xe4>
    {
        bool stopRetransmission = false;
 8010882:	1dfb      	adds	r3, r7, #7
 8010884:	2200      	movs	r2, #0
 8010886:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 8010888:	1dbb      	adds	r3, r7, #6
 801088a:	2200      	movs	r2, #0
 801088c:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801088e:	4b32      	ldr	r3, [pc, #200]	; (8010958 <LoRaMacHandleMcpsRequest+0xec>)
 8010890:	4a33      	ldr	r2, [pc, #204]	; (8010960 <LoRaMacHandleMcpsRequest+0xf4>)
 8010892:	5c9b      	ldrb	r3, [r3, r2]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d004      	beq.n	80108a2 <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010898:	4b2f      	ldr	r3, [pc, #188]	; (8010958 <LoRaMacHandleMcpsRequest+0xec>)
 801089a:	4a31      	ldr	r2, [pc, #196]	; (8010960 <LoRaMacHandleMcpsRequest+0xf4>)
 801089c:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801089e:	2b03      	cmp	r3, #3
 80108a0:	d105      	bne.n	80108ae <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 80108a2:	1dfc      	adds	r4, r7, #7
 80108a4:	f002 fb70 	bl	8012f88 <CheckRetransUnconfirmedUplink>
 80108a8:	0003      	movs	r3, r0
 80108aa:	7023      	strb	r3, [r4, #0]
 80108ac:	e026      	b.n	80108fc <LoRaMacHandleMcpsRequest+0x90>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80108ae:	4b2a      	ldr	r3, [pc, #168]	; (8010958 <LoRaMacHandleMcpsRequest+0xec>)
 80108b0:	4a2b      	ldr	r2, [pc, #172]	; (8010960 <LoRaMacHandleMcpsRequest+0xf4>)
 80108b2:	5c9b      	ldrb	r3, [r3, r2]
 80108b4:	2b01      	cmp	r3, #1
 80108b6:	d121      	bne.n	80108fc <LoRaMacHandleMcpsRequest+0x90>
        {
            if( MacCtx.AckTimeoutRetry == true )
 80108b8:	4b27      	ldr	r3, [pc, #156]	; (8010958 <LoRaMacHandleMcpsRequest+0xec>)
 80108ba:	4a2a      	ldr	r2, [pc, #168]	; (8010964 <LoRaMacHandleMcpsRequest+0xf8>)
 80108bc:	5c9b      	ldrb	r3, [r3, r2]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d019      	beq.n	80108f6 <LoRaMacHandleMcpsRequest+0x8a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 80108c2:	1dfc      	adds	r4, r7, #7
 80108c4:	f002 fb94 	bl	8012ff0 <CheckRetransConfirmedUplink>
 80108c8:	0003      	movs	r3, r0
 80108ca:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 80108cc:	4b22      	ldr	r3, [pc, #136]	; (8010958 <LoRaMacHandleMcpsRequest+0xec>)
 80108ce:	4a26      	ldr	r2, [pc, #152]	; (8010968 <LoRaMacHandleMcpsRequest+0xfc>)
 80108d0:	589a      	ldr	r2, [r3, r2]
 80108d2:	23e9      	movs	r3, #233	; 0xe9
 80108d4:	005b      	lsls	r3, r3, #1
 80108d6:	5cd3      	ldrb	r3, [r2, r3]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d10f      	bne.n	80108fc <LoRaMacHandleMcpsRequest+0x90>
                {
                    if( stopRetransmission == false )
 80108dc:	1dfb      	adds	r3, r7, #7
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	2201      	movs	r2, #1
 80108e2:	4053      	eors	r3, r2
 80108e4:	b2db      	uxtb	r3, r3
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d002      	beq.n	80108f0 <LoRaMacHandleMcpsRequest+0x84>
                    {
                        AckTimeoutRetriesProcess( );
 80108ea:	f002 fbf5 	bl	80130d8 <AckTimeoutRetriesProcess>
 80108ee:	e005      	b.n	80108fc <LoRaMacHandleMcpsRequest+0x90>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 80108f0:	f002 fc40 	bl	8013174 <AckTimeoutRetriesFinalize>
 80108f4:	e002      	b.n	80108fc <LoRaMacHandleMcpsRequest+0x90>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 80108f6:	1dbb      	adds	r3, r7, #6
 80108f8:	2201      	movs	r2, #1
 80108fa:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 80108fc:	1dfb      	adds	r3, r7, #7
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d011      	beq.n	8010928 <LoRaMacHandleMcpsRequest+0xbc>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8010904:	4b19      	ldr	r3, [pc, #100]	; (801096c <LoRaMacHandleMcpsRequest+0x100>)
 8010906:	0018      	movs	r0, r3
 8010908:	f00a fc1a 	bl	801b140 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801090c:	4a12      	ldr	r2, [pc, #72]	; (8010958 <LoRaMacHandleMcpsRequest+0xec>)
 801090e:	23d0      	movs	r3, #208	; 0xd0
 8010910:	009b      	lsls	r3, r3, #2
 8010912:	58d3      	ldr	r3, [r2, r3]
 8010914:	2220      	movs	r2, #32
 8010916:	4393      	bics	r3, r2
 8010918:	0019      	movs	r1, r3
 801091a:	4a0f      	ldr	r2, [pc, #60]	; (8010958 <LoRaMacHandleMcpsRequest+0xec>)
 801091c:	23d0      	movs	r3, #208	; 0xd0
 801091e:	009b      	lsls	r3, r3, #2
 8010920:	50d1      	str	r1, [r2, r3]
            StopRetransmission( );
 8010922:	f002 fb8d 	bl	8013040 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8010926:	e013      	b.n	8010950 <LoRaMacHandleMcpsRequest+0xe4>
        else if( waitForRetransmission == false )
 8010928:	1dbb      	adds	r3, r7, #6
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	2201      	movs	r2, #1
 801092e:	4053      	eors	r3, r2
 8010930:	b2db      	uxtb	r3, r3
 8010932:	2b00      	cmp	r3, #0
 8010934:	d00c      	beq.n	8010950 <LoRaMacHandleMcpsRequest+0xe4>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8010936:	4b08      	ldr	r3, [pc, #32]	; (8010958 <LoRaMacHandleMcpsRequest+0xec>)
 8010938:	4a08      	ldr	r2, [pc, #32]	; (801095c <LoRaMacHandleMcpsRequest+0xf0>)
 801093a:	5c99      	ldrb	r1, [r3, r2]
 801093c:	2020      	movs	r0, #32
 801093e:	4381      	bics	r1, r0
 8010940:	5499      	strb	r1, [r3, r2]
            MacCtx.AckTimeoutRetry = false;
 8010942:	4b05      	ldr	r3, [pc, #20]	; (8010958 <LoRaMacHandleMcpsRequest+0xec>)
 8010944:	4a07      	ldr	r2, [pc, #28]	; (8010964 <LoRaMacHandleMcpsRequest+0xf8>)
 8010946:	2100      	movs	r1, #0
 8010948:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
 801094a:	2000      	movs	r0, #0
 801094c:	f000 f8e8 	bl	8010b20 <OnTxDelayedTimerEvent>
}
 8010950:	46c0      	nop			; (mov r8, r8)
 8010952:	46bd      	mov	sp, r7
 8010954:	b003      	add	sp, #12
 8010956:	bd90      	pop	{r4, r7, pc}
 8010958:	200008f0 	.word	0x200008f0
 801095c:	00000481 	.word	0x00000481
 8010960:	0000043c 	.word	0x0000043c
 8010964:	00000413 	.word	0x00000413
 8010968:	00000484 	.word	0x00000484
 801096c:	20000c58 	.word	0x20000c58

08010970 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8010970:	b580      	push	{r7, lr}
 8010972:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010974:	4b1d      	ldr	r3, [pc, #116]	; (80109ec <LoRaMacHandleMlmeRequest+0x7c>)
 8010976:	4a1e      	ldr	r2, [pc, #120]	; (80109f0 <LoRaMacHandleMlmeRequest+0x80>)
 8010978:	5c9b      	ldrb	r3, [r3, r2]
 801097a:	2204      	movs	r2, #4
 801097c:	4013      	ands	r3, r2
 801097e:	b2db      	uxtb	r3, r3
 8010980:	2b00      	cmp	r3, #0
 8010982:	d02f      	beq.n	80109e4 <LoRaMacHandleMlmeRequest+0x74>
    {
        if( ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8010984:	2000      	movs	r0, #0
 8010986:	f005 f809 	bl	801599c <LoRaMacConfirmQueueIsCmdActive>
 801098a:	1e03      	subs	r3, r0, #0
 801098c:	d015      	beq.n	80109ba <LoRaMacHandleMlmeRequest+0x4a>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 801098e:	2000      	movs	r0, #0
 8010990:	f004 ffac 	bl	80158ec <LoRaMacConfirmQueueGetStatus>
 8010994:	1e03      	subs	r3, r0, #0
 8010996:	d104      	bne.n	80109a2 <LoRaMacHandleMlmeRequest+0x32>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010998:	4a14      	ldr	r2, [pc, #80]	; (80109ec <LoRaMacHandleMlmeRequest+0x7c>)
 801099a:	2382      	movs	r3, #130	; 0x82
 801099c:	00db      	lsls	r3, r3, #3
 801099e:	2100      	movs	r1, #0
 80109a0:	54d1      	strb	r1, [r2, r3]
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80109a2:	4a12      	ldr	r2, [pc, #72]	; (80109ec <LoRaMacHandleMlmeRequest+0x7c>)
 80109a4:	23d0      	movs	r3, #208	; 0xd0
 80109a6:	009b      	lsls	r3, r3, #2
 80109a8:	58d3      	ldr	r3, [r2, r3]
 80109aa:	2202      	movs	r2, #2
 80109ac:	4393      	bics	r3, r2
 80109ae:	0019      	movs	r1, r3
 80109b0:	4a0e      	ldr	r2, [pc, #56]	; (80109ec <LoRaMacHandleMlmeRequest+0x7c>)
 80109b2:	23d0      	movs	r3, #208	; 0xd0
 80109b4:	009b      	lsls	r3, r3, #2
 80109b6:	50d1      	str	r1, [r2, r3]
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 80109b8:	e014      	b.n	80109e4 <LoRaMacHandleMlmeRequest+0x74>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80109ba:	2004      	movs	r0, #4
 80109bc:	f004 ffee 	bl	801599c <LoRaMacConfirmQueueIsCmdActive>
 80109c0:	1e03      	subs	r3, r0, #0
 80109c2:	d104      	bne.n	80109ce <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 80109c4:	2005      	movs	r0, #5
 80109c6:	f004 ffe9 	bl	801599c <LoRaMacConfirmQueueIsCmdActive>
 80109ca:	1e03      	subs	r3, r0, #0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80109cc:	d00a      	beq.n	80109e4 <LoRaMacHandleMlmeRequest+0x74>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80109ce:	4a07      	ldr	r2, [pc, #28]	; (80109ec <LoRaMacHandleMlmeRequest+0x7c>)
 80109d0:	23d0      	movs	r3, #208	; 0xd0
 80109d2:	009b      	lsls	r3, r3, #2
 80109d4:	58d3      	ldr	r3, [r2, r3]
 80109d6:	2202      	movs	r2, #2
 80109d8:	4393      	bics	r3, r2
 80109da:	0019      	movs	r1, r3
 80109dc:	4a03      	ldr	r2, [pc, #12]	; (80109ec <LoRaMacHandleMlmeRequest+0x7c>)
 80109de:	23d0      	movs	r3, #208	; 0xd0
 80109e0:	009b      	lsls	r3, r3, #2
 80109e2:	50d1      	str	r1, [r2, r3]
}
 80109e4:	46c0      	nop			; (mov r8, r8)
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
 80109ea:	46c0      	nop			; (mov r8, r8)
 80109ec:	200008f0 	.word	0x200008f0
 80109f0:	00000481 	.word	0x00000481

080109f4 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80109f8:	200b      	movs	r0, #11
 80109fa:	f004 ffcf 	bl	801599c <LoRaMacConfirmQueueIsCmdActive>
 80109fe:	1e03      	subs	r3, r0, #0
 8010a00:	d01c      	beq.n	8010a3c <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8010a02:	4b10      	ldr	r3, [pc, #64]	; (8010a44 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010a04:	4a10      	ldr	r2, [pc, #64]	; (8010a48 <LoRaMacCheckForBeaconAcquisition+0x54>)
 8010a06:	5c9b      	ldrb	r3, [r3, r2]
 8010a08:	2201      	movs	r2, #1
 8010a0a:	4013      	ands	r3, r2
 8010a0c:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d114      	bne.n	8010a3c <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010a12:	4b0c      	ldr	r3, [pc, #48]	; (8010a44 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010a14:	4a0c      	ldr	r2, [pc, #48]	; (8010a48 <LoRaMacCheckForBeaconAcquisition+0x54>)
 8010a16:	5c9b      	ldrb	r3, [r3, r2]
 8010a18:	2204      	movs	r2, #4
 8010a1a:	4013      	ands	r3, r2
 8010a1c:	b2db      	uxtb	r3, r3
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d00c      	beq.n	8010a3c <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010a22:	4a08      	ldr	r2, [pc, #32]	; (8010a44 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010a24:	23d0      	movs	r3, #208	; 0xd0
 8010a26:	009b      	lsls	r3, r3, #2
 8010a28:	58d3      	ldr	r3, [r2, r3]
 8010a2a:	2202      	movs	r2, #2
 8010a2c:	4393      	bics	r3, r2
 8010a2e:	0019      	movs	r1, r3
 8010a30:	4a04      	ldr	r2, [pc, #16]	; (8010a44 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010a32:	23d0      	movs	r3, #208	; 0xd0
 8010a34:	009b      	lsls	r3, r3, #2
 8010a36:	50d1      	str	r1, [r2, r3]
            return 0x01;
 8010a38:	2301      	movs	r3, #1
 8010a3a:	e000      	b.n	8010a3e <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 8010a3c:	2300      	movs	r3, #0
}
 8010a3e:	0018      	movs	r0, r3
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}
 8010a44:	200008f0 	.word	0x200008f0
 8010a48:	00000481 	.word	0x00000481

08010a4c <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8010a50:	4a0f      	ldr	r2, [pc, #60]	; (8010a90 <LoRaMacCheckForRxAbort+0x44>)
 8010a52:	23d0      	movs	r3, #208	; 0xd0
 8010a54:	009b      	lsls	r3, r3, #2
 8010a56:	58d3      	ldr	r3, [r2, r3]
 8010a58:	2280      	movs	r2, #128	; 0x80
 8010a5a:	4013      	ands	r3, r2
 8010a5c:	d015      	beq.n	8010a8a <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8010a5e:	4a0c      	ldr	r2, [pc, #48]	; (8010a90 <LoRaMacCheckForRxAbort+0x44>)
 8010a60:	23d0      	movs	r3, #208	; 0xd0
 8010a62:	009b      	lsls	r3, r3, #2
 8010a64:	58d3      	ldr	r3, [r2, r3]
 8010a66:	2280      	movs	r2, #128	; 0x80
 8010a68:	4393      	bics	r3, r2
 8010a6a:	0019      	movs	r1, r3
 8010a6c:	4a08      	ldr	r2, [pc, #32]	; (8010a90 <LoRaMacCheckForRxAbort+0x44>)
 8010a6e:	23d0      	movs	r3, #208	; 0xd0
 8010a70:	009b      	lsls	r3, r3, #2
 8010a72:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010a74:	4a06      	ldr	r2, [pc, #24]	; (8010a90 <LoRaMacCheckForRxAbort+0x44>)
 8010a76:	23d0      	movs	r3, #208	; 0xd0
 8010a78:	009b      	lsls	r3, r3, #2
 8010a7a:	58d3      	ldr	r3, [r2, r3]
 8010a7c:	2202      	movs	r2, #2
 8010a7e:	4393      	bics	r3, r2
 8010a80:	0019      	movs	r1, r3
 8010a82:	4a03      	ldr	r2, [pc, #12]	; (8010a90 <LoRaMacCheckForRxAbort+0x44>)
 8010a84:	23d0      	movs	r3, #208	; 0xd0
 8010a86:	009b      	lsls	r3, r3, #2
 8010a88:	50d1      	str	r1, [r2, r3]
    }
}
 8010a8a:	46c0      	nop			; (mov r8, r8)
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}
 8010a90:	200008f0 	.word	0x200008f0

08010a94 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b082      	sub	sp, #8
 8010a98:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8010a9a:	1dfb      	adds	r3, r7, #7
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 8010aa0:	f7ff fd94 	bl	80105cc <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8010aa4:	f004 fb49 	bl	801513a <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8010aa8:	4b1b      	ldr	r3, [pc, #108]	; (8010b18 <LoRaMacProcess+0x84>)
 8010aaa:	4a1c      	ldr	r2, [pc, #112]	; (8010b1c <LoRaMacProcess+0x88>)
 8010aac:	5c9b      	ldrb	r3, [r3, r2]
 8010aae:	2220      	movs	r2, #32
 8010ab0:	4013      	ands	r3, r2
 8010ab2:	b2db      	uxtb	r3, r3
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d020      	beq.n	8010afa <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8010ab8:	2000      	movs	r0, #0
 8010aba:	f7ff fde9 	bl	8010690 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8010abe:	f7ff ffc5 	bl	8010a4c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8010ac2:	f002 fbed 	bl	80132a0 <IsRequestPending>
 8010ac6:	1e03      	subs	r3, r0, #0
 8010ac8:	d008      	beq.n	8010adc <LoRaMacProcess+0x48>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8010aca:	f7ff ff93 	bl	80109f4 <LoRaMacCheckForBeaconAcquisition>
 8010ace:	0003      	movs	r3, r0
 8010ad0:	0019      	movs	r1, r3
 8010ad2:	1dfb      	adds	r3, r7, #7
 8010ad4:	1dfa      	adds	r2, r7, #7
 8010ad6:	7812      	ldrb	r2, [r2, #0]
 8010ad8:	430a      	orrs	r2, r1
 8010ada:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 8010adc:	1dfb      	adds	r3, r7, #7
 8010ade:	781b      	ldrb	r3, [r3, #0]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d103      	bne.n	8010aec <LoRaMacProcess+0x58>
        {
            LoRaMacHandleMlmeRequest( );
 8010ae4:	f7ff ff44 	bl	8010970 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8010ae8:	f7ff fec0 	bl	801086c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8010aec:	f7ff fde4 	bl	80106b8 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8010af0:	f7ff fe48 	bl	8010784 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010af4:	2001      	movs	r0, #1
 8010af6:	f7ff fdcb 	bl	8010690 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 8010afa:	f7ff fe5f 	bl	80107bc <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8010afe:	4a06      	ldr	r2, [pc, #24]	; (8010b18 <LoRaMacProcess+0x84>)
 8010b00:	2390      	movs	r3, #144	; 0x90
 8010b02:	00db      	lsls	r3, r3, #3
 8010b04:	5cd3      	ldrb	r3, [r2, r3]
 8010b06:	2b02      	cmp	r3, #2
 8010b08:	d101      	bne.n	8010b0e <LoRaMacProcess+0x7a>
    {
        OpenContinuousRxCWindow( );
 8010b0a:	f001 fe5b 	bl	80127c4 <OpenContinuousRxCWindow>
    }
}
 8010b0e:	46c0      	nop			; (mov r8, r8)
 8010b10:	46bd      	mov	sp, r7
 8010b12:	b002      	add	sp, #8
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	46c0      	nop			; (mov r8, r8)
 8010b18:	200008f0 	.word	0x200008f0
 8010b1c:	00000481 	.word	0x00000481

08010b20 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010b28:	4b19      	ldr	r3, [pc, #100]	; (8010b90 <OnTxDelayedTimerEvent+0x70>)
 8010b2a:	0018      	movs	r0, r3
 8010b2c:	f00a fb08 	bl	801b140 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010b30:	4a18      	ldr	r2, [pc, #96]	; (8010b94 <OnTxDelayedTimerEvent+0x74>)
 8010b32:	23d0      	movs	r3, #208	; 0xd0
 8010b34:	009b      	lsls	r3, r3, #2
 8010b36:	58d3      	ldr	r3, [r2, r3]
 8010b38:	2220      	movs	r2, #32
 8010b3a:	4393      	bics	r3, r2
 8010b3c:	0019      	movs	r1, r3
 8010b3e:	4a15      	ldr	r2, [pc, #84]	; (8010b94 <OnTxDelayedTimerEvent+0x74>)
 8010b40:	23d0      	movs	r3, #208	; 0xd0
 8010b42:	009b      	lsls	r3, r3, #2
 8010b44:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8010b46:	2001      	movs	r0, #1
 8010b48:	f001 fa98 	bl	801207c <ScheduleTx>
 8010b4c:	1e03      	subs	r3, r0, #0
 8010b4e:	d01a      	beq.n	8010b86 <OnTxDelayedTimerEvent+0x66>
 8010b50:	2b0b      	cmp	r3, #11
 8010b52:	d018      	beq.n	8010b86 <OnTxDelayedTimerEvent+0x66>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010b54:	4b0f      	ldr	r3, [pc, #60]	; (8010b94 <OnTxDelayedTimerEvent+0x74>)
 8010b56:	4a10      	ldr	r2, [pc, #64]	; (8010b98 <OnTxDelayedTimerEvent+0x78>)
 8010b58:	589b      	ldr	r3, [r3, r2]
 8010b5a:	22f9      	movs	r2, #249	; 0xf9
 8010b5c:	569b      	ldrsb	r3, [r3, r2]
 8010b5e:	b2d9      	uxtb	r1, r3
 8010b60:	4b0c      	ldr	r3, [pc, #48]	; (8010b94 <OnTxDelayedTimerEvent+0x74>)
 8010b62:	4a0e      	ldr	r2, [pc, #56]	; (8010b9c <OnTxDelayedTimerEvent+0x7c>)
 8010b64:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010b66:	4b0b      	ldr	r3, [pc, #44]	; (8010b94 <OnTxDelayedTimerEvent+0x74>)
 8010b68:	4a0d      	ldr	r2, [pc, #52]	; (8010ba0 <OnTxDelayedTimerEvent+0x80>)
 8010b6a:	5c99      	ldrb	r1, [r3, r2]
 8010b6c:	4b09      	ldr	r3, [pc, #36]	; (8010b94 <OnTxDelayedTimerEvent+0x74>)
 8010b6e:	4a0d      	ldr	r2, [pc, #52]	; (8010ba4 <OnTxDelayedTimerEvent+0x84>)
 8010b70:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8010b72:	4b08      	ldr	r3, [pc, #32]	; (8010b94 <OnTxDelayedTimerEvent+0x74>)
 8010b74:	4a0c      	ldr	r2, [pc, #48]	; (8010ba8 <OnTxDelayedTimerEvent+0x88>)
 8010b76:	2109      	movs	r1, #9
 8010b78:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8010b7a:	2009      	movs	r0, #9
 8010b7c:	f004 fedc 	bl	8015938 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010b80:	f002 fa5e 	bl	8013040 <StopRetransmission>
            break;
 8010b84:	e000      	b.n	8010b88 <OnTxDelayedTimerEvent+0x68>
            break;
 8010b86:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8010b88:	46c0      	nop			; (mov r8, r8)
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	b002      	add	sp, #8
 8010b8e:	bd80      	pop	{r7, pc}
 8010b90:	20000c58 	.word	0x20000c58
 8010b94:	200008f0 	.word	0x200008f0
 8010b98:	00000484 	.word	0x00000484
 8010b9c:	0000043e 	.word	0x0000043e
 8010ba0:	00000412 	.word	0x00000412
 8010ba4:	00000441 	.word	0x00000441
 8010ba8:	0000043d 	.word	0x0000043d

08010bac <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8010bb4:	4b1a      	ldr	r3, [pc, #104]	; (8010c20 <OnRxWindow1TimerEvent+0x74>)
 8010bb6:	4a1b      	ldr	r2, [pc, #108]	; (8010c24 <OnRxWindow1TimerEvent+0x78>)
 8010bb8:	5c99      	ldrb	r1, [r3, r2]
 8010bba:	4a19      	ldr	r2, [pc, #100]	; (8010c20 <OnRxWindow1TimerEvent+0x74>)
 8010bbc:	23ee      	movs	r3, #238	; 0xee
 8010bbe:	009b      	lsls	r3, r3, #2
 8010bc0:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 8010bc2:	4b17      	ldr	r3, [pc, #92]	; (8010c20 <OnRxWindow1TimerEvent+0x74>)
 8010bc4:	4a18      	ldr	r2, [pc, #96]	; (8010c28 <OnRxWindow1TimerEvent+0x7c>)
 8010bc6:	589a      	ldr	r2, [r3, r2]
 8010bc8:	231a      	movs	r3, #26
 8010bca:	33ff      	adds	r3, #255	; 0xff
 8010bcc:	5cd3      	ldrb	r3, [r2, r3]
 8010bce:	b259      	sxtb	r1, r3
 8010bd0:	4b13      	ldr	r3, [pc, #76]	; (8010c20 <OnRxWindow1TimerEvent+0x74>)
 8010bd2:	4a16      	ldr	r2, [pc, #88]	; (8010c2c <OnRxWindow1TimerEvent+0x80>)
 8010bd4:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010bd6:	4b12      	ldr	r3, [pc, #72]	; (8010c20 <OnRxWindow1TimerEvent+0x74>)
 8010bd8:	4a13      	ldr	r2, [pc, #76]	; (8010c28 <OnRxWindow1TimerEvent+0x7c>)
 8010bda:	589a      	ldr	r2, [r3, r2]
 8010bdc:	232e      	movs	r3, #46	; 0x2e
 8010bde:	33ff      	adds	r3, #255	; 0xff
 8010be0:	5cd1      	ldrb	r1, [r2, r3]
 8010be2:	4a0f      	ldr	r2, [pc, #60]	; (8010c20 <OnRxWindow1TimerEvent+0x74>)
 8010be4:	23f2      	movs	r3, #242	; 0xf2
 8010be6:	009b      	lsls	r3, r3, #2
 8010be8:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8010bea:	4b0d      	ldr	r3, [pc, #52]	; (8010c20 <OnRxWindow1TimerEvent+0x74>)
 8010bec:	4a0e      	ldr	r2, [pc, #56]	; (8010c28 <OnRxWindow1TimerEvent+0x7c>)
 8010bee:	589a      	ldr	r2, [r3, r2]
 8010bf0:	2340      	movs	r3, #64	; 0x40
 8010bf2:	33ff      	adds	r3, #255	; 0xff
 8010bf4:	5cd1      	ldrb	r1, [r2, r3]
 8010bf6:	4b0a      	ldr	r3, [pc, #40]	; (8010c20 <OnRxWindow1TimerEvent+0x74>)
 8010bf8:	4a0d      	ldr	r2, [pc, #52]	; (8010c30 <OnRxWindow1TimerEvent+0x84>)
 8010bfa:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 8010bfc:	4b08      	ldr	r3, [pc, #32]	; (8010c20 <OnRxWindow1TimerEvent+0x74>)
 8010bfe:	4a0d      	ldr	r2, [pc, #52]	; (8010c34 <OnRxWindow1TimerEvent+0x88>)
 8010c00:	2100      	movs	r1, #0
 8010c02:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010c04:	4b06      	ldr	r3, [pc, #24]	; (8010c20 <OnRxWindow1TimerEvent+0x74>)
 8010c06:	4a0c      	ldr	r2, [pc, #48]	; (8010c38 <OnRxWindow1TimerEvent+0x8c>)
 8010c08:	2100      	movs	r1, #0
 8010c0a:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8010c0c:	4a0b      	ldr	r2, [pc, #44]	; (8010c3c <OnRxWindow1TimerEvent+0x90>)
 8010c0e:	4b0c      	ldr	r3, [pc, #48]	; (8010c40 <OnRxWindow1TimerEvent+0x94>)
 8010c10:	0011      	movs	r1, r2
 8010c12:	0018      	movs	r0, r3
 8010c14:	f001 fda2 	bl	801275c <RxWindowSetup>
}
 8010c18:	46c0      	nop			; (mov r8, r8)
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	b002      	add	sp, #8
 8010c1e:	bd80      	pop	{r7, pc}
 8010c20:	200008f0 	.word	0x200008f0
 8010c24:	00000415 	.word	0x00000415
 8010c28:	00000484 	.word	0x00000484
 8010c2c:	000003bb 	.word	0x000003bb
 8010c30:	000003c9 	.word	0x000003c9
 8010c34:	000003ca 	.word	0x000003ca
 8010c38:	000003cb 	.word	0x000003cb
 8010c3c:	20000ca8 	.word	0x20000ca8
 8010c40:	20000c70 	.word	0x20000c70

08010c44 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b082      	sub	sp, #8
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010c4c:	4a1e      	ldr	r2, [pc, #120]	; (8010cc8 <OnRxWindow2TimerEvent+0x84>)
 8010c4e:	2390      	movs	r3, #144	; 0x90
 8010c50:	00db      	lsls	r3, r3, #3
 8010c52:	5cd3      	ldrb	r3, [r2, r3]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d032      	beq.n	8010cbe <OnRxWindow2TimerEvent+0x7a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010c58:	4b1b      	ldr	r3, [pc, #108]	; (8010cc8 <OnRxWindow2TimerEvent+0x84>)
 8010c5a:	4a1c      	ldr	r2, [pc, #112]	; (8010ccc <OnRxWindow2TimerEvent+0x88>)
 8010c5c:	5c99      	ldrb	r1, [r3, r2]
 8010c5e:	4a1a      	ldr	r2, [pc, #104]	; (8010cc8 <OnRxWindow2TimerEvent+0x84>)
 8010c60:	23f3      	movs	r3, #243	; 0xf3
 8010c62:	009b      	lsls	r3, r3, #2
 8010c64:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8010c66:	4b18      	ldr	r3, [pc, #96]	; (8010cc8 <OnRxWindow2TimerEvent+0x84>)
 8010c68:	4a19      	ldr	r2, [pc, #100]	; (8010cd0 <OnRxWindow2TimerEvent+0x8c>)
 8010c6a:	589a      	ldr	r2, [r3, r2]
 8010c6c:	238e      	movs	r3, #142	; 0x8e
 8010c6e:	005b      	lsls	r3, r3, #1
 8010c70:	58d1      	ldr	r1, [r2, r3]
 8010c72:	4a15      	ldr	r2, [pc, #84]	; (8010cc8 <OnRxWindow2TimerEvent+0x84>)
 8010c74:	23f4      	movs	r3, #244	; 0xf4
 8010c76:	009b      	lsls	r3, r3, #2
 8010c78:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010c7a:	4b13      	ldr	r3, [pc, #76]	; (8010cc8 <OnRxWindow2TimerEvent+0x84>)
 8010c7c:	4a14      	ldr	r2, [pc, #80]	; (8010cd0 <OnRxWindow2TimerEvent+0x8c>)
 8010c7e:	589a      	ldr	r2, [r3, r2]
 8010c80:	232e      	movs	r3, #46	; 0x2e
 8010c82:	33ff      	adds	r3, #255	; 0xff
 8010c84:	5cd1      	ldrb	r1, [r2, r3]
 8010c86:	4a10      	ldr	r2, [pc, #64]	; (8010cc8 <OnRxWindow2TimerEvent+0x84>)
 8010c88:	23f7      	movs	r3, #247	; 0xf7
 8010c8a:	009b      	lsls	r3, r3, #2
 8010c8c:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8010c8e:	4b0e      	ldr	r3, [pc, #56]	; (8010cc8 <OnRxWindow2TimerEvent+0x84>)
 8010c90:	4a0f      	ldr	r2, [pc, #60]	; (8010cd0 <OnRxWindow2TimerEvent+0x8c>)
 8010c92:	589a      	ldr	r2, [r3, r2]
 8010c94:	2340      	movs	r3, #64	; 0x40
 8010c96:	33ff      	adds	r3, #255	; 0xff
 8010c98:	5cd1      	ldrb	r1, [r2, r3]
 8010c9a:	4b0b      	ldr	r3, [pc, #44]	; (8010cc8 <OnRxWindow2TimerEvent+0x84>)
 8010c9c:	4a0d      	ldr	r2, [pc, #52]	; (8010cd4 <OnRxWindow2TimerEvent+0x90>)
 8010c9e:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010ca0:	4b09      	ldr	r3, [pc, #36]	; (8010cc8 <OnRxWindow2TimerEvent+0x84>)
 8010ca2:	4a0d      	ldr	r2, [pc, #52]	; (8010cd8 <OnRxWindow2TimerEvent+0x94>)
 8010ca4:	2100      	movs	r1, #0
 8010ca6:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010ca8:	4b07      	ldr	r3, [pc, #28]	; (8010cc8 <OnRxWindow2TimerEvent+0x84>)
 8010caa:	4a0c      	ldr	r2, [pc, #48]	; (8010cdc <OnRxWindow2TimerEvent+0x98>)
 8010cac:	2101      	movs	r1, #1
 8010cae:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8010cb0:	4a0b      	ldr	r2, [pc, #44]	; (8010ce0 <OnRxWindow2TimerEvent+0x9c>)
 8010cb2:	4b0c      	ldr	r3, [pc, #48]	; (8010ce4 <OnRxWindow2TimerEvent+0xa0>)
 8010cb4:	0011      	movs	r1, r2
 8010cb6:	0018      	movs	r0, r3
 8010cb8:	f001 fd50 	bl	801275c <RxWindowSetup>
 8010cbc:	e000      	b.n	8010cc0 <OnRxWindow2TimerEvent+0x7c>
        return;
 8010cbe:	46c0      	nop			; (mov r8, r8)
}
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	b002      	add	sp, #8
 8010cc4:	bd80      	pop	{r7, pc}
 8010cc6:	46c0      	nop			; (mov r8, r8)
 8010cc8:	200008f0 	.word	0x200008f0
 8010ccc:	00000415 	.word	0x00000415
 8010cd0:	00000484 	.word	0x00000484
 8010cd4:	000003dd 	.word	0x000003dd
 8010cd8:	000003de 	.word	0x000003de
 8010cdc:	000003df 	.word	0x000003df
 8010ce0:	20000cbc 	.word	0x20000cbc
 8010ce4:	20000c88 	.word	0x20000c88

08010ce8 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8010cf0:	4b18      	ldr	r3, [pc, #96]	; (8010d54 <OnAckTimeoutTimerEvent+0x6c>)
 8010cf2:	0018      	movs	r0, r3
 8010cf4:	f00a fa24 	bl	801b140 <TimerStop>

    if( MacCtx.NodeAckRequested == true )
 8010cf8:	4b17      	ldr	r3, [pc, #92]	; (8010d58 <OnAckTimeoutTimerEvent+0x70>)
 8010cfa:	4a18      	ldr	r2, [pc, #96]	; (8010d5c <OnAckTimeoutTimerEvent+0x74>)
 8010cfc:	5c9b      	ldrb	r3, [r3, r2]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d003      	beq.n	8010d0a <OnAckTimeoutTimerEvent+0x22>
    {
        MacCtx.AckTimeoutRetry = true;
 8010d02:	4b15      	ldr	r3, [pc, #84]	; (8010d58 <OnAckTimeoutTimerEvent+0x70>)
 8010d04:	4a16      	ldr	r2, [pc, #88]	; (8010d60 <OnAckTimeoutTimerEvent+0x78>)
 8010d06:	2101      	movs	r1, #1
 8010d08:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8010d0a:	4b13      	ldr	r3, [pc, #76]	; (8010d58 <OnAckTimeoutTimerEvent+0x70>)
 8010d0c:	4a15      	ldr	r2, [pc, #84]	; (8010d64 <OnAckTimeoutTimerEvent+0x7c>)
 8010d0e:	589b      	ldr	r3, [r3, r2]
 8010d10:	22f0      	movs	r2, #240	; 0xf0
 8010d12:	5c9b      	ldrb	r3, [r3, r2]
 8010d14:	2b02      	cmp	r3, #2
 8010d16:	d105      	bne.n	8010d24 <OnAckTimeoutTimerEvent+0x3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8010d18:	4b0f      	ldr	r3, [pc, #60]	; (8010d58 <OnAckTimeoutTimerEvent+0x70>)
 8010d1a:	4a13      	ldr	r2, [pc, #76]	; (8010d68 <OnAckTimeoutTimerEvent+0x80>)
 8010d1c:	5c99      	ldrb	r1, [r3, r2]
 8010d1e:	2020      	movs	r0, #32
 8010d20:	4301      	orrs	r1, r0
 8010d22:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010d24:	4a0c      	ldr	r2, [pc, #48]	; (8010d58 <OnAckTimeoutTimerEvent+0x70>)
 8010d26:	23d2      	movs	r3, #210	; 0xd2
 8010d28:	009b      	lsls	r3, r3, #2
 8010d2a:	58d3      	ldr	r3, [r2, r3]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d00c      	beq.n	8010d4a <OnAckTimeoutTimerEvent+0x62>
 8010d30:	4a09      	ldr	r2, [pc, #36]	; (8010d58 <OnAckTimeoutTimerEvent+0x70>)
 8010d32:	23d2      	movs	r3, #210	; 0xd2
 8010d34:	009b      	lsls	r3, r3, #2
 8010d36:	58d3      	ldr	r3, [r2, r3]
 8010d38:	68db      	ldr	r3, [r3, #12]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d005      	beq.n	8010d4a <OnAckTimeoutTimerEvent+0x62>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010d3e:	4a06      	ldr	r2, [pc, #24]	; (8010d58 <OnAckTimeoutTimerEvent+0x70>)
 8010d40:	23d2      	movs	r3, #210	; 0xd2
 8010d42:	009b      	lsls	r3, r3, #2
 8010d44:	58d3      	ldr	r3, [r2, r3]
 8010d46:	68db      	ldr	r3, [r3, #12]
 8010d48:	4798      	blx	r3
    }
}
 8010d4a:	46c0      	nop			; (mov r8, r8)
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	b002      	add	sp, #8
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	46c0      	nop			; (mov r8, r8)
 8010d54:	20000ce8 	.word	0x20000ce8
 8010d58:	200008f0 	.word	0x200008f0
 8010d5c:	00000414 	.word	0x00000414
 8010d60:	00000413 	.word	0x00000413
 8010d64:	00000484 	.word	0x00000484
 8010d68:	00000481 	.word	0x00000481

08010d6c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010d6c:	b590      	push	{r4, r7, lr}
 8010d6e:	b085      	sub	sp, #20
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	60ba      	str	r2, [r7, #8]
 8010d74:	607b      	str	r3, [r7, #4]
 8010d76:	230f      	movs	r3, #15
 8010d78:	18fb      	adds	r3, r7, r3
 8010d7a:	1c02      	adds	r2, r0, #0
 8010d7c:	701a      	strb	r2, [r3, #0]
 8010d7e:	230e      	movs	r3, #14
 8010d80:	18fb      	adds	r3, r7, r3
 8010d82:	1c0a      	adds	r2, r1, #0
 8010d84:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d005      	beq.n	8010d98 <GetFCntDown+0x2c>
 8010d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d002      	beq.n	8010d98 <GetFCntDown+0x2c>
 8010d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d101      	bne.n	8010d9c <GetFCntDown+0x30>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010d98:	230a      	movs	r3, #10
 8010d9a:	e042      	b.n	8010e22 <GetFCntDown+0xb6>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010d9c:	230f      	movs	r3, #15
 8010d9e:	18fb      	adds	r3, r7, r3
 8010da0:	781b      	ldrb	r3, [r3, #0]
 8010da2:	2b04      	cmp	r3, #4
 8010da4:	d82e      	bhi.n	8010e04 <GetFCntDown+0x98>
 8010da6:	009a      	lsls	r2, r3, #2
 8010da8:	4b20      	ldr	r3, [pc, #128]	; (8010e2c <GetFCntDown+0xc0>)
 8010daa:	18d3      	adds	r3, r2, r3
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	469f      	mov	pc, r3
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8010db0:	1d3b      	adds	r3, r7, #4
 8010db2:	789b      	ldrb	r3, [r3, #2]
 8010db4:	2b01      	cmp	r3, #1
 8010db6:	d111      	bne.n	8010ddc <GetFCntDown+0x70>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8010db8:	230e      	movs	r3, #14
 8010dba:	18fb      	adds	r3, r7, r3
 8010dbc:	781b      	ldrb	r3, [r3, #0]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d004      	beq.n	8010dcc <GetFCntDown+0x60>
 8010dc2:	230e      	movs	r3, #14
 8010dc4:	18fb      	adds	r3, r7, r3
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	2b03      	cmp	r3, #3
 8010dca:	d103      	bne.n	8010dd4 <GetFCntDown+0x68>
                {
                    *fCntID = A_FCNT_DOWN;
 8010dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dce:	2202      	movs	r2, #2
 8010dd0:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8010dd2:	e019      	b.n	8010e08 <GetFCntDown+0x9c>
                    *fCntID = N_FCNT_DOWN;
 8010dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	701a      	strb	r2, [r3, #0]
            break;
 8010dda:	e015      	b.n	8010e08 <GetFCntDown+0x9c>
                *fCntID = FCNT_DOWN;
 8010ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dde:	2203      	movs	r2, #3
 8010de0:	701a      	strb	r2, [r3, #0]
            break;
 8010de2:	e011      	b.n	8010e08 <GetFCntDown+0x9c>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8010de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de6:	2204      	movs	r2, #4
 8010de8:	701a      	strb	r2, [r3, #0]
            break;
 8010dea:	e00d      	b.n	8010e08 <GetFCntDown+0x9c>
        case MULTICAST_1_ADDR:
            *fCntID = MC_FCNT_DOWN_1;
 8010dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dee:	2205      	movs	r2, #5
 8010df0:	701a      	strb	r2, [r3, #0]
            break;
 8010df2:	e009      	b.n	8010e08 <GetFCntDown+0x9c>
        case MULTICAST_2_ADDR:
            *fCntID = MC_FCNT_DOWN_2;
 8010df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df6:	2206      	movs	r2, #6
 8010df8:	701a      	strb	r2, [r3, #0]
            break;
 8010dfa:	e005      	b.n	8010e08 <GetFCntDown+0x9c>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
 8010dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfe:	2207      	movs	r2, #7
 8010e00:	701a      	strb	r2, [r3, #0]
            break;
 8010e02:	e001      	b.n	8010e08 <GetFCntDown+0x9c>
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010e04:	2305      	movs	r3, #5
 8010e06:	e00c      	b.n	8010e22 <GetFCntDown+0xb6>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8010e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0a:	7818      	ldrb	r0, [r3, #0]
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	89db      	ldrh	r3, [r3, #14]
 8010e10:	001c      	movs	r4, r3
 8010e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e14:	2220      	movs	r2, #32
 8010e16:	18ba      	adds	r2, r7, r2
 8010e18:	8811      	ldrh	r1, [r2, #0]
 8010e1a:	0022      	movs	r2, r4
 8010e1c:	f005 fab2 	bl	8016384 <LoRaMacCryptoGetFCntDown>
 8010e20:	0003      	movs	r3, r0
}
 8010e22:	0018      	movs	r0, r3
 8010e24:	46bd      	mov	sp, r7
 8010e26:	b005      	add	sp, #20
 8010e28:	bd90      	pop	{r4, r7, pc}
 8010e2a:	46c0      	nop			; (mov r8, r8)
 8010e2c:	0801cfd8 	.word	0x0801cfd8

08010e30 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8010e30:	b5b0      	push	{r4, r5, r7, lr}
 8010e32:	b086      	sub	sp, #24
 8010e34:	af02      	add	r7, sp, #8
 8010e36:	0002      	movs	r2, r0
 8010e38:	1dfb      	adds	r3, r7, #7
 8010e3a:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e3c:	230f      	movs	r3, #15
 8010e3e:	18fb      	adds	r3, r7, r3
 8010e40:	2203      	movs	r2, #3
 8010e42:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 8010e44:	4b96      	ldr	r3, [pc, #600]	; (80110a0 <SwitchClass+0x270>)
 8010e46:	4a97      	ldr	r2, [pc, #604]	; (80110a4 <SwitchClass+0x274>)
 8010e48:	589b      	ldr	r3, [r3, r2]
 8010e4a:	22f0      	movs	r2, #240	; 0xf0
 8010e4c:	5c9b      	ldrb	r3, [r3, r2]
 8010e4e:	2b01      	cmp	r3, #1
 8010e50:	d100      	bne.n	8010e54 <SwitchClass+0x24>
 8010e52:	e0f1      	b.n	8011038 <SwitchClass+0x208>
 8010e54:	2b02      	cmp	r3, #2
 8010e56:	d100      	bne.n	8010e5a <SwitchClass+0x2a>
 8010e58:	e103      	b.n	8011062 <SwitchClass+0x232>
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d000      	beq.n	8010e60 <SwitchClass+0x30>
 8010e5e:	e118      	b.n	8011092 <SwitchClass+0x262>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8010e60:	1dfb      	adds	r3, r7, #7
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d10d      	bne.n	8010e84 <SwitchClass+0x54>
            {
                // Revert back RxC parameters
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8010e68:	4b8d      	ldr	r3, [pc, #564]	; (80110a0 <SwitchClass+0x270>)
 8010e6a:	4a8e      	ldr	r2, [pc, #568]	; (80110a4 <SwitchClass+0x274>)
 8010e6c:	5899      	ldr	r1, [r3, r2]
 8010e6e:	4b8c      	ldr	r3, [pc, #560]	; (80110a0 <SwitchClass+0x270>)
 8010e70:	4a8c      	ldr	r2, [pc, #560]	; (80110a4 <SwitchClass+0x274>)
 8010e72:	5898      	ldr	r0, [r3, r2]
 8010e74:	2392      	movs	r3, #146	; 0x92
 8010e76:	005b      	lsls	r3, r3, #1
 8010e78:	228e      	movs	r2, #142	; 0x8e
 8010e7a:	0052      	lsls	r2, r2, #1
 8010e7c:	18c3      	adds	r3, r0, r3
 8010e7e:	188a      	adds	r2, r1, r2
 8010e80:	ca03      	ldmia	r2!, {r0, r1}
 8010e82:	c303      	stmia	r3!, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 8010e84:	1dfb      	adds	r3, r7, #7
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	2b01      	cmp	r3, #1
 8010e8a:	d113      	bne.n	8010eb4 <SwitchClass+0x84>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010e8c:	250f      	movs	r5, #15
 8010e8e:	197c      	adds	r4, r7, r5
 8010e90:	1dfb      	adds	r3, r7, #7
 8010e92:	781b      	ldrb	r3, [r3, #0]
 8010e94:	0018      	movs	r0, r3
 8010e96:	f004 f8f8 	bl	801508a <LoRaMacClassBSwitchClass>
 8010e9a:	0003      	movs	r3, r0
 8010e9c:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 8010e9e:	197b      	adds	r3, r7, r5
 8010ea0:	781b      	ldrb	r3, [r3, #0]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d106      	bne.n	8010eb4 <SwitchClass+0x84>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 8010ea6:	4b7e      	ldr	r3, [pc, #504]	; (80110a0 <SwitchClass+0x270>)
 8010ea8:	4a7e      	ldr	r2, [pc, #504]	; (80110a4 <SwitchClass+0x274>)
 8010eaa:	589b      	ldr	r3, [r3, r2]
 8010eac:	1dfa      	adds	r2, r7, #7
 8010eae:	21f0      	movs	r1, #240	; 0xf0
 8010eb0:	7812      	ldrb	r2, [r2, #0]
 8010eb2:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 8010eb4:	1dfb      	adds	r3, r7, #7
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	2b02      	cmp	r3, #2
 8010eba:	d000      	beq.n	8010ebe <SwitchClass+0x8e>
 8010ebc:	e0e4      	b.n	8011088 <SwitchClass+0x258>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8010ebe:	4b78      	ldr	r3, [pc, #480]	; (80110a0 <SwitchClass+0x270>)
 8010ec0:	4a78      	ldr	r2, [pc, #480]	; (80110a4 <SwitchClass+0x274>)
 8010ec2:	589b      	ldr	r3, [r3, r2]
 8010ec4:	1dfa      	adds	r2, r7, #7
 8010ec6:	21f0      	movs	r1, #240	; 0xf0
 8010ec8:	7812      	ldrb	r2, [r2, #0]
 8010eca:	545a      	strb	r2, [r3, r1]

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010ecc:	4874      	ldr	r0, [pc, #464]	; (80110a0 <SwitchClass+0x270>)
 8010ece:	23f8      	movs	r3, #248	; 0xf8
 8010ed0:	009b      	lsls	r3, r3, #2
 8010ed2:	4973      	ldr	r1, [pc, #460]	; (80110a0 <SwitchClass+0x270>)
 8010ed4:	22f3      	movs	r2, #243	; 0xf3
 8010ed6:	0092      	lsls	r2, r2, #2
 8010ed8:	18c3      	adds	r3, r0, r3
 8010eda:	188a      	adds	r2, r1, r2
 8010edc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8010ede:	c313      	stmia	r3!, {r0, r1, r4}
 8010ee0:	ca03      	ldmia	r2!, {r0, r1}
 8010ee2:	c303      	stmia	r3!, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010ee4:	4b6e      	ldr	r3, [pc, #440]	; (80110a0 <SwitchClass+0x270>)
 8010ee6:	4a70      	ldr	r2, [pc, #448]	; (80110a8 <SwitchClass+0x278>)
 8010ee8:	2102      	movs	r1, #2
 8010eea:	5499      	strb	r1, [r3, r2]

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010eec:	230e      	movs	r3, #14
 8010eee:	18fb      	adds	r3, r7, r3
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	701a      	strb	r2, [r3, #0]
 8010ef4:	e070      	b.n	8010fd8 <SwitchClass+0x1a8>
                {
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8010ef6:	4b6a      	ldr	r3, [pc, #424]	; (80110a0 <SwitchClass+0x270>)
 8010ef8:	4a6a      	ldr	r2, [pc, #424]	; (80110a4 <SwitchClass+0x274>)
 8010efa:	5899      	ldr	r1, [r3, r2]
 8010efc:	230e      	movs	r3, #14
 8010efe:	18fb      	adds	r3, r7, r3
 8010f00:	2200      	movs	r2, #0
 8010f02:	569a      	ldrsb	r2, [r3, r2]
 8010f04:	2051      	movs	r0, #81	; 0x51
 8010f06:	0013      	movs	r3, r2
 8010f08:	009b      	lsls	r3, r3, #2
 8010f0a:	189b      	adds	r3, r3, r2
 8010f0c:	00db      	lsls	r3, r3, #3
 8010f0e:	18cb      	adds	r3, r1, r3
 8010f10:	181b      	adds	r3, r3, r0
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d056      	beq.n	8010fc6 <SwitchClass+0x196>
                    // TODO: Check multicast channel device class.
                    {
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8010f18:	4b61      	ldr	r3, [pc, #388]	; (80110a0 <SwitchClass+0x270>)
 8010f1a:	4a62      	ldr	r2, [pc, #392]	; (80110a4 <SwitchClass+0x274>)
 8010f1c:	5898      	ldr	r0, [r3, r2]
 8010f1e:	240e      	movs	r4, #14
 8010f20:	193b      	adds	r3, r7, r4
 8010f22:	2200      	movs	r2, #0
 8010f24:	569a      	ldrsb	r2, [r3, r2]
 8010f26:	4b5e      	ldr	r3, [pc, #376]	; (80110a0 <SwitchClass+0x270>)
 8010f28:	495e      	ldr	r1, [pc, #376]	; (80110a4 <SwitchClass+0x274>)
 8010f2a:	5859      	ldr	r1, [r3, r1]
 8010f2c:	0013      	movs	r3, r2
 8010f2e:	009b      	lsls	r3, r3, #2
 8010f30:	189b      	adds	r3, r3, r2
 8010f32:	00db      	lsls	r3, r3, #3
 8010f34:	18c3      	adds	r3, r0, r3
 8010f36:	3364      	adds	r3, #100	; 0x64
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	2392      	movs	r3, #146	; 0x92
 8010f3c:	005b      	lsls	r3, r3, #1
 8010f3e:	50ca      	str	r2, [r1, r3]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8010f40:	4b57      	ldr	r3, [pc, #348]	; (80110a0 <SwitchClass+0x270>)
 8010f42:	4a58      	ldr	r2, [pc, #352]	; (80110a4 <SwitchClass+0x274>)
 8010f44:	5899      	ldr	r1, [r3, r2]
 8010f46:	193b      	adds	r3, r7, r4
 8010f48:	2200      	movs	r2, #0
 8010f4a:	569a      	ldrsb	r2, [r3, r2]
 8010f4c:	2068      	movs	r0, #104	; 0x68
 8010f4e:	0013      	movs	r3, r2
 8010f50:	009b      	lsls	r3, r3, #2
 8010f52:	189b      	adds	r3, r3, r2
 8010f54:	00db      	lsls	r3, r3, #3
 8010f56:	18cb      	adds	r3, r1, r3
 8010f58:	181b      	adds	r3, r3, r0
 8010f5a:	2100      	movs	r1, #0
 8010f5c:	5659      	ldrsb	r1, [r3, r1]
 8010f5e:	4b50      	ldr	r3, [pc, #320]	; (80110a0 <SwitchClass+0x270>)
 8010f60:	4a50      	ldr	r2, [pc, #320]	; (80110a4 <SwitchClass+0x274>)
 8010f62:	589a      	ldr	r2, [r3, r2]
 8010f64:	b2c9      	uxtb	r1, r1
 8010f66:	2394      	movs	r3, #148	; 0x94
 8010f68:	005b      	lsls	r3, r3, #1
 8010f6a:	54d1      	strb	r1, [r2, r3]

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010f6c:	4b4c      	ldr	r3, [pc, #304]	; (80110a0 <SwitchClass+0x270>)
 8010f6e:	4a4f      	ldr	r2, [pc, #316]	; (80110ac <SwitchClass+0x27c>)
 8010f70:	5c99      	ldrb	r1, [r3, r2]
 8010f72:	4a4b      	ldr	r2, [pc, #300]	; (80110a0 <SwitchClass+0x270>)
 8010f74:	23f8      	movs	r3, #248	; 0xf8
 8010f76:	009b      	lsls	r3, r3, #2
 8010f78:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8010f7a:	4b49      	ldr	r3, [pc, #292]	; (80110a0 <SwitchClass+0x270>)
 8010f7c:	4a49      	ldr	r2, [pc, #292]	; (80110a4 <SwitchClass+0x274>)
 8010f7e:	589a      	ldr	r2, [r3, r2]
 8010f80:	2392      	movs	r3, #146	; 0x92
 8010f82:	005b      	lsls	r3, r3, #1
 8010f84:	58d1      	ldr	r1, [r2, r3]
 8010f86:	4a46      	ldr	r2, [pc, #280]	; (80110a0 <SwitchClass+0x270>)
 8010f88:	23f9      	movs	r3, #249	; 0xf9
 8010f8a:	009b      	lsls	r3, r3, #2
 8010f8c:	50d1      	str	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010f8e:	4b44      	ldr	r3, [pc, #272]	; (80110a0 <SwitchClass+0x270>)
 8010f90:	4a44      	ldr	r2, [pc, #272]	; (80110a4 <SwitchClass+0x274>)
 8010f92:	589a      	ldr	r2, [r3, r2]
 8010f94:	232e      	movs	r3, #46	; 0x2e
 8010f96:	33ff      	adds	r3, #255	; 0xff
 8010f98:	5cd1      	ldrb	r1, [r2, r3]
 8010f9a:	4a41      	ldr	r2, [pc, #260]	; (80110a0 <SwitchClass+0x270>)
 8010f9c:	23fc      	movs	r3, #252	; 0xfc
 8010f9e:	009b      	lsls	r3, r3, #2
 8010fa0:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8010fa2:	4b3f      	ldr	r3, [pc, #252]	; (80110a0 <SwitchClass+0x270>)
 8010fa4:	4a3f      	ldr	r2, [pc, #252]	; (80110a4 <SwitchClass+0x274>)
 8010fa6:	589a      	ldr	r2, [r3, r2]
 8010fa8:	2340      	movs	r3, #64	; 0x40
 8010faa:	33ff      	adds	r3, #255	; 0xff
 8010fac:	5cd1      	ldrb	r1, [r2, r3]
 8010fae:	4b3c      	ldr	r3, [pc, #240]	; (80110a0 <SwitchClass+0x270>)
 8010fb0:	4a3f      	ldr	r2, [pc, #252]	; (80110b0 <SwitchClass+0x280>)
 8010fb2:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010fb4:	4b3a      	ldr	r3, [pc, #232]	; (80110a0 <SwitchClass+0x270>)
 8010fb6:	4a3c      	ldr	r2, [pc, #240]	; (80110a8 <SwitchClass+0x278>)
 8010fb8:	2103      	movs	r1, #3
 8010fba:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010fbc:	4b38      	ldr	r3, [pc, #224]	; (80110a0 <SwitchClass+0x270>)
 8010fbe:	4a3d      	ldr	r2, [pc, #244]	; (80110b4 <SwitchClass+0x284>)
 8010fc0:	2101      	movs	r1, #1
 8010fc2:	5499      	strb	r1, [r3, r2]
                        break;
 8010fc4:	e00e      	b.n	8010fe4 <SwitchClass+0x1b4>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010fc6:	210e      	movs	r1, #14
 8010fc8:	187b      	adds	r3, r7, r1
 8010fca:	781b      	ldrb	r3, [r3, #0]
 8010fcc:	b25b      	sxtb	r3, r3
 8010fce:	b2db      	uxtb	r3, r3
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	b2da      	uxtb	r2, r3
 8010fd4:	187b      	adds	r3, r7, r1
 8010fd6:	701a      	strb	r2, [r3, #0]
 8010fd8:	230e      	movs	r3, #14
 8010fda:	18fb      	adds	r3, r7, r3
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	b25b      	sxtb	r3, r3
 8010fe0:	2b03      	cmp	r3, #3
 8010fe2:	dd88      	ble.n	8010ef6 <SwitchClass+0xc6>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010fe4:	4b2e      	ldr	r3, [pc, #184]	; (80110a0 <SwitchClass+0x270>)
 8010fe6:	4a34      	ldr	r2, [pc, #208]	; (80110b8 <SwitchClass+0x288>)
 8010fe8:	2100      	movs	r1, #0
 8010fea:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010fec:	4b33      	ldr	r3, [pc, #204]	; (80110bc <SwitchClass+0x28c>)
 8010fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ff0:	4798      	blx	r3
                // Compute Rx2 windows parameters in case the RX2 datarate has changed
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010ff2:	4b2b      	ldr	r3, [pc, #172]	; (80110a0 <SwitchClass+0x270>)
 8010ff4:	4a2b      	ldr	r2, [pc, #172]	; (80110a4 <SwitchClass+0x274>)
 8010ff6:	589b      	ldr	r3, [r3, r2]
 8010ff8:	7818      	ldrb	r0, [r3, #0]
                                                 MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8010ffa:	4b29      	ldr	r3, [pc, #164]	; (80110a0 <SwitchClass+0x270>)
 8010ffc:	4a29      	ldr	r2, [pc, #164]	; (80110a4 <SwitchClass+0x274>)
 8010ffe:	589a      	ldr	r2, [r3, r2]
 8011000:	2394      	movs	r3, #148	; 0x94
 8011002:	005b      	lsls	r3, r3, #1
 8011004:	5cd3      	ldrb	r3, [r2, r3]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011006:	b259      	sxtb	r1, r3
                                                 MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8011008:	4b25      	ldr	r3, [pc, #148]	; (80110a0 <SwitchClass+0x270>)
 801100a:	4a26      	ldr	r2, [pc, #152]	; (80110a4 <SwitchClass+0x274>)
 801100c:	589a      	ldr	r2, [r3, r2]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801100e:	2380      	movs	r3, #128	; 0x80
 8011010:	005b      	lsls	r3, r3, #1
 8011012:	5cd4      	ldrb	r4, [r2, r3]
                                                 MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011014:	4b22      	ldr	r3, [pc, #136]	; (80110a0 <SwitchClass+0x270>)
 8011016:	4a23      	ldr	r2, [pc, #140]	; (80110a4 <SwitchClass+0x274>)
 8011018:	589b      	ldr	r3, [r3, r2]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801101a:	22fc      	movs	r2, #252	; 0xfc
 801101c:	589a      	ldr	r2, [r3, r2]
 801101e:	4b28      	ldr	r3, [pc, #160]	; (80110c0 <SwitchClass+0x290>)
 8011020:	9300      	str	r3, [sp, #0]
 8011022:	0013      	movs	r3, r2
 8011024:	0022      	movs	r2, r4
 8011026:	f006 fb34 	bl	8017692 <RegionComputeRxWindowParameters>
                                                 &MacCtx.RxWindowCConfig );
                OpenContinuousRxCWindow( );
 801102a:	f001 fbcb 	bl	80127c4 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 801102e:	230f      	movs	r3, #15
 8011030:	18fb      	adds	r3, r7, r3
 8011032:	2200      	movs	r2, #0
 8011034:	701a      	strb	r2, [r3, #0]
            }
            break;
 8011036:	e027      	b.n	8011088 <SwitchClass+0x258>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8011038:	250f      	movs	r5, #15
 801103a:	197c      	adds	r4, r7, r5
 801103c:	1dfb      	adds	r3, r7, #7
 801103e:	781b      	ldrb	r3, [r3, #0]
 8011040:	0018      	movs	r0, r3
 8011042:	f004 f822 	bl	801508a <LoRaMacClassBSwitchClass>
 8011046:	0003      	movs	r3, r0
 8011048:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 801104a:	197b      	adds	r3, r7, r5
 801104c:	781b      	ldrb	r3, [r3, #0]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d11c      	bne.n	801108c <SwitchClass+0x25c>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8011052:	4b13      	ldr	r3, [pc, #76]	; (80110a0 <SwitchClass+0x270>)
 8011054:	4a13      	ldr	r2, [pc, #76]	; (80110a4 <SwitchClass+0x274>)
 8011056:	589b      	ldr	r3, [r3, r2]
 8011058:	1dfa      	adds	r2, r7, #7
 801105a:	21f0      	movs	r1, #240	; 0xf0
 801105c:	7812      	ldrb	r2, [r2, #0]
 801105e:	545a      	strb	r2, [r3, r1]
            }
            break;
 8011060:	e014      	b.n	801108c <SwitchClass+0x25c>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8011062:	1dfb      	adds	r3, r7, #7
 8011064:	781b      	ldrb	r3, [r3, #0]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d112      	bne.n	8011090 <SwitchClass+0x260>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 801106a:	4b0d      	ldr	r3, [pc, #52]	; (80110a0 <SwitchClass+0x270>)
 801106c:	4a0d      	ldr	r2, [pc, #52]	; (80110a4 <SwitchClass+0x274>)
 801106e:	589b      	ldr	r3, [r3, r2]
 8011070:	1dfa      	adds	r2, r7, #7
 8011072:	21f0      	movs	r1, #240	; 0xf0
 8011074:	7812      	ldrb	r2, [r2, #0]
 8011076:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8011078:	4b10      	ldr	r3, [pc, #64]	; (80110bc <SwitchClass+0x28c>)
 801107a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801107c:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 801107e:	230f      	movs	r3, #15
 8011080:	18fb      	adds	r3, r7, r3
 8011082:	2200      	movs	r2, #0
 8011084:	701a      	strb	r2, [r3, #0]
            }
            break;
 8011086:	e003      	b.n	8011090 <SwitchClass+0x260>
            break;
 8011088:	46c0      	nop			; (mov r8, r8)
 801108a:	e002      	b.n	8011092 <SwitchClass+0x262>
            break;
 801108c:	46c0      	nop			; (mov r8, r8)
 801108e:	e000      	b.n	8011092 <SwitchClass+0x262>
            break;
 8011090:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
 8011092:	230f      	movs	r3, #15
 8011094:	18fb      	adds	r3, r7, r3
 8011096:	781b      	ldrb	r3, [r3, #0]
}
 8011098:	0018      	movs	r0, r3
 801109a:	46bd      	mov	sp, r7
 801109c:	b004      	add	sp, #16
 801109e:	bdb0      	pop	{r4, r5, r7, pc}
 80110a0:	200008f0 	.word	0x200008f0
 80110a4:	00000484 	.word	0x00000484
 80110a8:	000003f3 	.word	0x000003f3
 80110ac:	00000415 	.word	0x00000415
 80110b0:	000003f1 	.word	0x000003f1
 80110b4:	000003f2 	.word	0x000003f2
 80110b8:	00000414 	.word	0x00000414
 80110bc:	0801cb08 	.word	0x0801cb08
 80110c0:	20000cd0 	.word	0x20000cd0

080110c4 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b084      	sub	sp, #16
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	0002      	movs	r2, r0
 80110cc:	1dfb      	adds	r3, r7, #7
 80110ce:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80110d0:	4b18      	ldr	r3, [pc, #96]	; (8011134 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 80110d2:	4a19      	ldr	r2, [pc, #100]	; (8011138 <GetMaxAppPayloadWithoutFOptsLength+0x74>)
 80110d4:	589a      	ldr	r2, [r3, r2]
 80110d6:	2396      	movs	r3, #150	; 0x96
 80110d8:	005b      	lsls	r3, r3, #1
 80110da:	5cd2      	ldrb	r2, [r2, r3]
 80110dc:	210c      	movs	r1, #12
 80110de:	187b      	adds	r3, r7, r1
 80110e0:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 80110e2:	187b      	adds	r3, r7, r1
 80110e4:	1dfa      	adds	r2, r7, #7
 80110e6:	7812      	ldrb	r2, [r2, #0]
 80110e8:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80110ea:	187b      	adds	r3, r7, r1
 80110ec:	220d      	movs	r2, #13
 80110ee:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 80110f0:	4b10      	ldr	r3, [pc, #64]	; (8011134 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 80110f2:	4a11      	ldr	r2, [pc, #68]	; (8011138 <GetMaxAppPayloadWithoutFOptsLength+0x74>)
 80110f4:	589a      	ldr	r2, [r3, r2]
 80110f6:	2340      	movs	r3, #64	; 0x40
 80110f8:	33ff      	adds	r3, #255	; 0xff
 80110fa:	5cd3      	ldrb	r3, [r2, r3]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d003      	beq.n	8011108 <GetMaxAppPayloadWithoutFOptsLength+0x44>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8011100:	230c      	movs	r3, #12
 8011102:	18fb      	adds	r3, r7, r3
 8011104:	220e      	movs	r2, #14
 8011106:	701a      	strb	r2, [r3, #0]
    }
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011108:	4b0a      	ldr	r3, [pc, #40]	; (8011134 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 801110a:	4a0b      	ldr	r2, [pc, #44]	; (8011138 <GetMaxAppPayloadWithoutFOptsLength+0x74>)
 801110c:	589b      	ldr	r3, [r3, r2]
 801110e:	781b      	ldrb	r3, [r3, #0]
 8011110:	220c      	movs	r2, #12
 8011112:	18ba      	adds	r2, r7, r2
 8011114:	0011      	movs	r1, r2
 8011116:	0018      	movs	r0, r3
 8011118:	f006 fa0c 	bl	8017534 <RegionGetPhyParam>
 801111c:	0003      	movs	r3, r0
 801111e:	001a      	movs	r2, r3
 8011120:	2108      	movs	r1, #8
 8011122:	187b      	adds	r3, r7, r1
 8011124:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 8011126:	187b      	adds	r3, r7, r1
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	b2db      	uxtb	r3, r3
}
 801112c:	0018      	movs	r0, r3
 801112e:	46bd      	mov	sp, r7
 8011130:	b004      	add	sp, #16
 8011132:	bd80      	pop	{r7, pc}
 8011134:	200008f0 	.word	0x200008f0
 8011138:	00000484 	.word	0x00000484

0801113c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 801113c:	b5b0      	push	{r4, r5, r7, lr}
 801113e:	b084      	sub	sp, #16
 8011140:	af00      	add	r7, sp, #0
 8011142:	0004      	movs	r4, r0
 8011144:	0008      	movs	r0, r1
 8011146:	0011      	movs	r1, r2
 8011148:	1dfb      	adds	r3, r7, #7
 801114a:	1c22      	adds	r2, r4, #0
 801114c:	701a      	strb	r2, [r3, #0]
 801114e:	1dbb      	adds	r3, r7, #6
 8011150:	1c02      	adds	r2, r0, #0
 8011152:	701a      	strb	r2, [r3, #0]
 8011154:	1d7b      	adds	r3, r7, #5
 8011156:	1c0a      	adds	r2, r1, #0
 8011158:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 801115a:	200e      	movs	r0, #14
 801115c:	0004      	movs	r4, r0
 801115e:	183b      	adds	r3, r7, r0
 8011160:	2200      	movs	r2, #0
 8011162:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 8011164:	250c      	movs	r5, #12
 8011166:	197b      	adds	r3, r7, r5
 8011168:	2200      	movs	r2, #0
 801116a:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801116c:	1dbb      	adds	r3, r7, #6
 801116e:	781b      	ldrb	r3, [r3, #0]
 8011170:	b25b      	sxtb	r3, r3
 8011172:	0018      	movs	r0, r3
 8011174:	f7ff ffa6 	bl	80110c4 <GetMaxAppPayloadWithoutFOptsLength>
 8011178:	0003      	movs	r3, r0
 801117a:	001a      	movs	r2, r3
 801117c:	0020      	movs	r0, r4
 801117e:	183b      	adds	r3, r7, r0
 8011180:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8011182:	1dfb      	adds	r3, r7, #7
 8011184:	781b      	ldrb	r3, [r3, #0]
 8011186:	b299      	uxth	r1, r3
 8011188:	1d7b      	adds	r3, r7, #5
 801118a:	781b      	ldrb	r3, [r3, #0]
 801118c:	b29a      	uxth	r2, r3
 801118e:	197b      	adds	r3, r7, r5
 8011190:	188a      	adds	r2, r1, r2
 8011192:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8011194:	197a      	adds	r2, r7, r5
 8011196:	183b      	adds	r3, r7, r0
 8011198:	8812      	ldrh	r2, [r2, #0]
 801119a:	881b      	ldrh	r3, [r3, #0]
 801119c:	429a      	cmp	r2, r3
 801119e:	d806      	bhi.n	80111ae <ValidatePayloadLength+0x72>
 80111a0:	230c      	movs	r3, #12
 80111a2:	18fb      	adds	r3, r7, r3
 80111a4:	881b      	ldrh	r3, [r3, #0]
 80111a6:	2bff      	cmp	r3, #255	; 0xff
 80111a8:	d801      	bhi.n	80111ae <ValidatePayloadLength+0x72>
    {
        return true;
 80111aa:	2301      	movs	r3, #1
 80111ac:	e000      	b.n	80111b0 <ValidatePayloadLength+0x74>
    }
    return false;
 80111ae:	2300      	movs	r3, #0
}
 80111b0:	0018      	movs	r0, r3
 80111b2:	46bd      	mov	sp, r7
 80111b4:	b004      	add	sp, #16
 80111b6:	bdb0      	pop	{r4, r5, r7, pc}

080111b8 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80111bc:	4b04      	ldr	r3, [pc, #16]	; (80111d0 <SetMlmeScheduleUplinkIndication+0x18>)
 80111be:	4a05      	ldr	r2, [pc, #20]	; (80111d4 <SetMlmeScheduleUplinkIndication+0x1c>)
 80111c0:	5c99      	ldrb	r1, [r3, r2]
 80111c2:	2010      	movs	r0, #16
 80111c4:	4301      	orrs	r1, r0
 80111c6:	5499      	strb	r1, [r3, r2]
}
 80111c8:	46c0      	nop			; (mov r8, r8)
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}
 80111ce:	46c0      	nop			; (mov r8, r8)
 80111d0:	200008f0 	.word	0x200008f0
 80111d4:	00000481 	.word	0x00000481

080111d8 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80111d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111da:	b0a5      	sub	sp, #148	; 0x94
 80111dc:	af02      	add	r7, sp, #8
 80111de:	6078      	str	r0, [r7, #4]
 80111e0:	000c      	movs	r4, r1
 80111e2:	0010      	movs	r0, r2
 80111e4:	0019      	movs	r1, r3
 80111e6:	1cfb      	adds	r3, r7, #3
 80111e8:	1c22      	adds	r2, r4, #0
 80111ea:	701a      	strb	r2, [r3, #0]
 80111ec:	1cbb      	adds	r3, r7, #2
 80111ee:	1c02      	adds	r2, r0, #0
 80111f0:	701a      	strb	r2, [r3, #0]
 80111f2:	1c7b      	adds	r3, r7, #1
 80111f4:	1c0a      	adds	r2, r1, #0
 80111f6:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 80111f8:	236b      	movs	r3, #107	; 0x6b
 80111fa:	18fb      	adds	r3, r7, r3
 80111fc:	2200      	movs	r2, #0
 80111fe:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 8011200:	2387      	movs	r3, #135	; 0x87
 8011202:	18fb      	adds	r3, r7, r3
 8011204:	2200      	movs	r2, #0
 8011206:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011208:	2168      	movs	r1, #104	; 0x68
 801120a:	187b      	adds	r3, r7, r1
 801120c:	2200      	movs	r2, #0
 801120e:	701a      	strb	r2, [r3, #0]
 8011210:	187b      	adds	r3, r7, r1
 8011212:	2200      	movs	r2, #0
 8011214:	705a      	strb	r2, [r3, #1]

    while( macIndex < commandsSize )
 8011216:	f000 fd80 	bl	8011d1a <ProcessMacCommands+0xb42>
    {
        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 801121a:	1cfb      	adds	r3, r7, #3
 801121c:	781b      	ldrb	r3, [r3, #0]
 801121e:	1cfa      	adds	r2, r7, #3
 8011220:	1c59      	adds	r1, r3, #1
 8011222:	7011      	strb	r1, [r2, #0]
 8011224:	001a      	movs	r2, r3
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	189b      	adds	r3, r3, r2
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	2b13      	cmp	r3, #19
 801122e:	d901      	bls.n	8011234 <ProcessMacCommands+0x5c>
 8011230:	f000 fd7c 	bl	8011d2c <ProcessMacCommands+0xb54>
 8011234:	009a      	lsls	r2, r3, #2
 8011236:	4be6      	ldr	r3, [pc, #920]	; (80115d0 <ProcessMacCommands+0x3f8>)
 8011238:	18d3      	adds	r3, r2, r3
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 801123e:	2003      	movs	r0, #3
 8011240:	f004 fbac 	bl	801599c <LoRaMacConfirmQueueIsCmdActive>
 8011244:	1e03      	subs	r3, r0, #0
 8011246:	d01c      	beq.n	8011282 <ProcessMacCommands+0xaa>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8011248:	2103      	movs	r1, #3
 801124a:	2000      	movs	r0, #0
 801124c:	f004 fb22 	bl	8015894 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8011250:	1cfb      	adds	r3, r7, #3
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	1cfa      	adds	r2, r7, #3
 8011256:	1c59      	adds	r1, r3, #1
 8011258:	7011      	strb	r1, [r2, #0]
 801125a:	001a      	movs	r2, r3
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	189b      	adds	r3, r3, r2
 8011260:	7819      	ldrb	r1, [r3, #0]
 8011262:	4adc      	ldr	r2, [pc, #880]	; (80115d4 <ProcessMacCommands+0x3fc>)
 8011264:	238b      	movs	r3, #139	; 0x8b
 8011266:	00db      	lsls	r3, r3, #3
 8011268:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 801126a:	1cfb      	adds	r3, r7, #3
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	1cfa      	adds	r2, r7, #3
 8011270:	1c59      	adds	r1, r3, #1
 8011272:	7011      	strb	r1, [r2, #0]
 8011274:	001a      	movs	r2, r3
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	189b      	adds	r3, r3, r2
 801127a:	7819      	ldrb	r1, [r3, #0]
 801127c:	4bd5      	ldr	r3, [pc, #852]	; (80115d4 <ProcessMacCommands+0x3fc>)
 801127e:	4ad6      	ldr	r2, [pc, #856]	; (80115d8 <ProcessMacCommands+0x400>)
 8011280:	5499      	strb	r1, [r3, r2]
 8011282:	2287      	movs	r2, #135	; 0x87
 8011284:	18bb      	adds	r3, r7, r2
 8011286:	18ba      	adds	r2, r7, r2
 8011288:	7812      	ldrb	r2, [r2, #0]
 801128a:	701a      	strb	r2, [r3, #0]
                }
                break;
 801128c:	f000 fd45 	bl	8011d1a <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8011290:	2357      	movs	r3, #87	; 0x57
 8011292:	18fb      	adds	r3, r7, r3
 8011294:	2200      	movs	r2, #0
 8011296:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 8011298:	2356      	movs	r3, #86	; 0x56
 801129a:	18fb      	adds	r3, r7, r3
 801129c:	2200      	movs	r2, #0
 801129e:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 80112a0:	2355      	movs	r3, #85	; 0x55
 80112a2:	18fb      	adds	r3, r7, r3
 80112a4:	2200      	movs	r2, #0
 80112a6:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 80112a8:	2354      	movs	r3, #84	; 0x54
 80112aa:	18fb      	adds	r3, r7, r3
 80112ac:	2200      	movs	r2, #0
 80112ae:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 80112b0:	2387      	movs	r3, #135	; 0x87
 80112b2:	18fb      	adds	r3, r7, r3
 80112b4:	781b      	ldrb	r3, [r3, #0]
 80112b6:	2201      	movs	r2, #1
 80112b8:	4053      	eors	r3, r2
 80112ba:	b2db      	uxtb	r3, r3
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d100      	bne.n	80112c2 <ProcessMacCommands+0xea>
 80112c0:	e0a6      	b.n	8011410 <ProcessMacCommands+0x238>
                {
                    adrBlockFound = true;
 80112c2:	2387      	movs	r3, #135	; 0x87
 80112c4:	18fb      	adds	r3, r7, r3
 80112c6:	2201      	movs	r2, #1
 80112c8:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80112ca:	1cfb      	adds	r3, r7, #3
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	3b01      	subs	r3, #1
 80112d0:	687a      	ldr	r2, [r7, #4]
 80112d2:	18d2      	adds	r2, r2, r3
 80112d4:	2158      	movs	r1, #88	; 0x58
 80112d6:	187b      	adds	r3, r7, r1
 80112d8:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80112da:	1cba      	adds	r2, r7, #2
 80112dc:	1cfb      	adds	r3, r7, #3
 80112de:	7812      	ldrb	r2, [r2, #0]
 80112e0:	781b      	ldrb	r3, [r3, #0]
 80112e2:	1ad3      	subs	r3, r2, r3
 80112e4:	b2db      	uxtb	r3, r3
 80112e6:	3301      	adds	r3, #1
 80112e8:	b2da      	uxtb	r2, r3
 80112ea:	187b      	adds	r3, r7, r1
 80112ec:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 80112ee:	4bb9      	ldr	r3, [pc, #740]	; (80115d4 <ProcessMacCommands+0x3fc>)
 80112f0:	4aba      	ldr	r2, [pc, #744]	; (80115dc <ProcessMacCommands+0x404>)
 80112f2:	589b      	ldr	r3, [r3, r2]
 80112f4:	22f2      	movs	r2, #242	; 0xf2
 80112f6:	5c9a      	ldrb	r2, [r3, r2]
 80112f8:	187b      	adds	r3, r7, r1
 80112fa:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80112fc:	4bb5      	ldr	r3, [pc, #724]	; (80115d4 <ProcessMacCommands+0x3fc>)
 80112fe:	4ab7      	ldr	r2, [pc, #732]	; (80115dc <ProcessMacCommands+0x404>)
 8011300:	589a      	ldr	r2, [r3, r2]
 8011302:	2396      	movs	r3, #150	; 0x96
 8011304:	005b      	lsls	r3, r3, #1
 8011306:	5cd2      	ldrb	r2, [r2, r3]
 8011308:	187b      	adds	r3, r7, r1
 801130a:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801130c:	4bb1      	ldr	r3, [pc, #708]	; (80115d4 <ProcessMacCommands+0x3fc>)
 801130e:	4ab3      	ldr	r2, [pc, #716]	; (80115dc <ProcessMacCommands+0x404>)
 8011310:	589b      	ldr	r3, [r3, r2]
 8011312:	22f9      	movs	r2, #249	; 0xf9
 8011314:	569a      	ldrsb	r2, [r3, r2]
 8011316:	000d      	movs	r5, r1
 8011318:	187b      	adds	r3, r7, r1
 801131a:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 801131c:	4bad      	ldr	r3, [pc, #692]	; (80115d4 <ProcessMacCommands+0x3fc>)
 801131e:	4aaf      	ldr	r2, [pc, #700]	; (80115dc <ProcessMacCommands+0x404>)
 8011320:	589b      	ldr	r3, [r3, r2]
 8011322:	22f8      	movs	r2, #248	; 0xf8
 8011324:	569a      	ldrsb	r2, [r3, r2]
 8011326:	197b      	adds	r3, r7, r5
 8011328:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 801132a:	4baa      	ldr	r3, [pc, #680]	; (80115d4 <ProcessMacCommands+0x3fc>)
 801132c:	4aab      	ldr	r2, [pc, #684]	; (80115dc <ProcessMacCommands+0x404>)
 801132e:	589a      	ldr	r2, [r3, r2]
 8011330:	238c      	movs	r3, #140	; 0x8c
 8011332:	005b      	lsls	r3, r3, #1
 8011334:	5cd2      	ldrb	r2, [r2, r3]
 8011336:	197b      	adds	r3, r7, r5
 8011338:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 801133a:	4ba6      	ldr	r3, [pc, #664]	; (80115d4 <ProcessMacCommands+0x3fc>)
 801133c:	4aa7      	ldr	r2, [pc, #668]	; (80115dc <ProcessMacCommands+0x404>)
 801133e:	5899      	ldr	r1, [r3, r2]
 8011340:	197b      	adds	r3, r7, r5
 8011342:	22e8      	movs	r2, #232	; 0xe8
 8011344:	0052      	lsls	r2, r2, #1
 8011346:	588a      	ldr	r2, [r1, r2]
 8011348:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 801134a:	4ba2      	ldr	r3, [pc, #648]	; (80115d4 <ProcessMacCommands+0x3fc>)
 801134c:	4aa3      	ldr	r2, [pc, #652]	; (80115dc <ProcessMacCommands+0x404>)
 801134e:	589b      	ldr	r3, [r3, r2]
 8011350:	7818      	ldrb	r0, [r3, #0]
 8011352:	2356      	movs	r3, #86	; 0x56
 8011354:	18fc      	adds	r4, r7, r3
 8011356:	2357      	movs	r3, #87	; 0x57
 8011358:	18fa      	adds	r2, r7, r3
 801135a:	1979      	adds	r1, r7, r5
 801135c:	2354      	movs	r3, #84	; 0x54
 801135e:	18fb      	adds	r3, r7, r3
 8011360:	9301      	str	r3, [sp, #4]
 8011362:	2355      	movs	r3, #85	; 0x55
 8011364:	18fb      	adds	r3, r7, r3
 8011366:	9300      	str	r3, [sp, #0]
 8011368:	0023      	movs	r3, r4
 801136a:	f006 f9eb 	bl	8017744 <RegionLinkAdrReq>
 801136e:	0003      	movs	r3, r0
 8011370:	001a      	movs	r2, r3
 8011372:	216b      	movs	r1, #107	; 0x6b
 8011374:	187b      	adds	r3, r7, r1
 8011376:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8011378:	187b      	adds	r3, r7, r1
 801137a:	781b      	ldrb	r3, [r3, #0]
 801137c:	001a      	movs	r2, r3
 801137e:	2307      	movs	r3, #7
 8011380:	4013      	ands	r3, r2
 8011382:	2b07      	cmp	r3, #7
 8011384:	d11a      	bne.n	80113bc <ProcessMacCommands+0x1e4>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 8011386:	4b93      	ldr	r3, [pc, #588]	; (80115d4 <ProcessMacCommands+0x3fc>)
 8011388:	4a94      	ldr	r2, [pc, #592]	; (80115dc <ProcessMacCommands+0x404>)
 801138a:	589b      	ldr	r3, [r3, r2]
 801138c:	2257      	movs	r2, #87	; 0x57
 801138e:	18ba      	adds	r2, r7, r2
 8011390:	2100      	movs	r1, #0
 8011392:	5651      	ldrsb	r1, [r2, r1]
 8011394:	22f9      	movs	r2, #249	; 0xf9
 8011396:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 8011398:	4b8e      	ldr	r3, [pc, #568]	; (80115d4 <ProcessMacCommands+0x3fc>)
 801139a:	4a90      	ldr	r2, [pc, #576]	; (80115dc <ProcessMacCommands+0x404>)
 801139c:	589b      	ldr	r3, [r3, r2]
 801139e:	2256      	movs	r2, #86	; 0x56
 80113a0:	18ba      	adds	r2, r7, r2
 80113a2:	2100      	movs	r1, #0
 80113a4:	5651      	ldrsb	r1, [r2, r1]
 80113a6:	22f8      	movs	r2, #248	; 0xf8
 80113a8:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 80113aa:	4b8a      	ldr	r3, [pc, #552]	; (80115d4 <ProcessMacCommands+0x3fc>)
 80113ac:	4a8b      	ldr	r2, [pc, #556]	; (80115dc <ProcessMacCommands+0x404>)
 80113ae:	589a      	ldr	r2, [r3, r2]
 80113b0:	2355      	movs	r3, #85	; 0x55
 80113b2:	18fb      	adds	r3, r7, r3
 80113b4:	7819      	ldrb	r1, [r3, #0]
 80113b6:	238c      	movs	r3, #140	; 0x8c
 80113b8:	005b      	lsls	r3, r3, #1
 80113ba:	54d1      	strb	r1, [r2, r3]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80113bc:	2386      	movs	r3, #134	; 0x86
 80113be:	18fb      	adds	r3, r7, r3
 80113c0:	2200      	movs	r2, #0
 80113c2:	701a      	strb	r2, [r3, #0]
 80113c4:	e00c      	b.n	80113e0 <ProcessMacCommands+0x208>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80113c6:	236b      	movs	r3, #107	; 0x6b
 80113c8:	18fb      	adds	r3, r7, r3
 80113ca:	2201      	movs	r2, #1
 80113cc:	0019      	movs	r1, r3
 80113ce:	2003      	movs	r0, #3
 80113d0:	f004 f81c 	bl	801540c <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80113d4:	2186      	movs	r1, #134	; 0x86
 80113d6:	187b      	adds	r3, r7, r1
 80113d8:	781a      	ldrb	r2, [r3, #0]
 80113da:	187b      	adds	r3, r7, r1
 80113dc:	3201      	adds	r2, #1
 80113de:	701a      	strb	r2, [r3, #0]
 80113e0:	2354      	movs	r3, #84	; 0x54
 80113e2:	18fb      	adds	r3, r7, r3
 80113e4:	781b      	ldrb	r3, [r3, #0]
 80113e6:	2105      	movs	r1, #5
 80113e8:	0018      	movs	r0, r3
 80113ea:	f7ee fe8d 	bl	8000108 <__udivsi3>
 80113ee:	0003      	movs	r3, r0
 80113f0:	b2db      	uxtb	r3, r3
 80113f2:	2286      	movs	r2, #134	; 0x86
 80113f4:	18ba      	adds	r2, r7, r2
 80113f6:	7812      	ldrb	r2, [r2, #0]
 80113f8:	429a      	cmp	r2, r3
 80113fa:	d3e4      	bcc.n	80113c6 <ProcessMacCommands+0x1ee>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 80113fc:	2354      	movs	r3, #84	; 0x54
 80113fe:	18fb      	adds	r3, r7, r3
 8011400:	781a      	ldrb	r2, [r3, #0]
 8011402:	1cfb      	adds	r3, r7, #3
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	18d3      	adds	r3, r2, r3
 8011408:	b2da      	uxtb	r2, r3
 801140a:	1cfb      	adds	r3, r7, #3
 801140c:	3a01      	subs	r2, #1
 801140e:	701a      	strb	r2, [r3, #0]
                }
                break;
 8011410:	46c0      	nop			; (mov r8, r8)
 8011412:	f000 fc82 	bl	8011d1a <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8011416:	1cfb      	adds	r3, r7, #3
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	1cfa      	adds	r2, r7, #3
 801141c:	1c59      	adds	r1, r3, #1
 801141e:	7011      	strb	r1, [r2, #0]
 8011420:	001a      	movs	r2, r3
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	189b      	adds	r3, r3, r2
 8011426:	781b      	ldrb	r3, [r3, #0]
 8011428:	4a6a      	ldr	r2, [pc, #424]	; (80115d4 <ProcessMacCommands+0x3fc>)
 801142a:	496c      	ldr	r1, [pc, #432]	; (80115dc <ProcessMacCommands+0x404>)
 801142c:	5852      	ldr	r2, [r2, r1]
 801142e:	210f      	movs	r1, #15
 8011430:	400b      	ands	r3, r1
 8011432:	b2d9      	uxtb	r1, r3
 8011434:	239e      	movs	r3, #158	; 0x9e
 8011436:	005b      	lsls	r3, r3, #1
 8011438:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 801143a:	4b66      	ldr	r3, [pc, #408]	; (80115d4 <ProcessMacCommands+0x3fc>)
 801143c:	4a67      	ldr	r2, [pc, #412]	; (80115dc <ProcessMacCommands+0x404>)
 801143e:	589a      	ldr	r2, [r3, r2]
 8011440:	239e      	movs	r3, #158	; 0x9e
 8011442:	005b      	lsls	r3, r3, #1
 8011444:	5cd3      	ldrb	r3, [r2, r3]
 8011446:	001a      	movs	r2, r3
 8011448:	2301      	movs	r3, #1
 801144a:	4093      	lsls	r3, r2
 801144c:	0019      	movs	r1, r3
 801144e:	4b61      	ldr	r3, [pc, #388]	; (80115d4 <ProcessMacCommands+0x3fc>)
 8011450:	4a62      	ldr	r2, [pc, #392]	; (80115dc <ProcessMacCommands+0x404>)
 8011452:	589a      	ldr	r2, [r3, r2]
 8011454:	b289      	uxth	r1, r1
 8011456:	23e1      	movs	r3, #225	; 0xe1
 8011458:	005b      	lsls	r3, r3, #1
 801145a:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 801145c:	2368      	movs	r3, #104	; 0x68
 801145e:	18fb      	adds	r3, r7, r3
 8011460:	2200      	movs	r2, #0
 8011462:	0019      	movs	r1, r3
 8011464:	2004      	movs	r0, #4
 8011466:	f003 ffd1 	bl	801540c <LoRaMacCommandsAddCmd>
 801146a:	2287      	movs	r2, #135	; 0x87
 801146c:	18bb      	adds	r3, r7, r2
 801146e:	18ba      	adds	r2, r7, r2
 8011470:	7812      	ldrb	r2, [r2, #0]
 8011472:	701a      	strb	r2, [r3, #0]
                break;
 8011474:	f000 fc51 	bl	8011d1a <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8011478:	246b      	movs	r4, #107	; 0x6b
 801147a:	193b      	adds	r3, r7, r4
 801147c:	2207      	movs	r2, #7
 801147e:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8011480:	1cfb      	adds	r3, r7, #3
 8011482:	781b      	ldrb	r3, [r3, #0]
 8011484:	687a      	ldr	r2, [r7, #4]
 8011486:	18d3      	adds	r3, r2, r3
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	091b      	lsrs	r3, r3, #4
 801148c:	b2db      	uxtb	r3, r3
 801148e:	b25b      	sxtb	r3, r3
 8011490:	2207      	movs	r2, #7
 8011492:	4013      	ands	r3, r2
 8011494:	b25a      	sxtb	r2, r3
 8011496:	204c      	movs	r0, #76	; 0x4c
 8011498:	183b      	adds	r3, r7, r0
 801149a:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801149c:	1cfb      	adds	r3, r7, #3
 801149e:	781b      	ldrb	r3, [r3, #0]
 80114a0:	687a      	ldr	r2, [r7, #4]
 80114a2:	18d3      	adds	r3, r2, r3
 80114a4:	781b      	ldrb	r3, [r3, #0]
 80114a6:	b25b      	sxtb	r3, r3
 80114a8:	220f      	movs	r2, #15
 80114aa:	4013      	ands	r3, r2
 80114ac:	b25a      	sxtb	r2, r3
 80114ae:	183b      	adds	r3, r7, r0
 80114b0:	701a      	strb	r2, [r3, #0]
                macIndex++;
 80114b2:	1cfb      	adds	r3, r7, #3
 80114b4:	781a      	ldrb	r2, [r3, #0]
 80114b6:	1cfb      	adds	r3, r7, #3
 80114b8:	3201      	adds	r2, #1
 80114ba:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80114bc:	1cfb      	adds	r3, r7, #3
 80114be:	781b      	ldrb	r3, [r3, #0]
 80114c0:	1cfa      	adds	r2, r7, #3
 80114c2:	1c59      	adds	r1, r3, #1
 80114c4:	7011      	strb	r1, [r2, #0]
 80114c6:	001a      	movs	r2, r3
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	189b      	adds	r3, r3, r2
 80114cc:	781b      	ldrb	r3, [r3, #0]
 80114ce:	001a      	movs	r2, r3
 80114d0:	183b      	adds	r3, r7, r0
 80114d2:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80114d4:	1cfb      	adds	r3, r7, #3
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	1cfa      	adds	r2, r7, #3
 80114da:	1c59      	adds	r1, r3, #1
 80114dc:	7011      	strb	r1, [r2, #0]
 80114de:	001a      	movs	r2, r3
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	189b      	adds	r3, r3, r2
 80114e4:	781b      	ldrb	r3, [r3, #0]
 80114e6:	021a      	lsls	r2, r3, #8
 80114e8:	183b      	adds	r3, r7, r0
 80114ea:	685b      	ldr	r3, [r3, #4]
 80114ec:	431a      	orrs	r2, r3
 80114ee:	183b      	adds	r3, r7, r0
 80114f0:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80114f2:	1cfb      	adds	r3, r7, #3
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	1cfa      	adds	r2, r7, #3
 80114f8:	1c59      	adds	r1, r3, #1
 80114fa:	7011      	strb	r1, [r2, #0]
 80114fc:	001a      	movs	r2, r3
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	189b      	adds	r3, r3, r2
 8011502:	781b      	ldrb	r3, [r3, #0]
 8011504:	041a      	lsls	r2, r3, #16
 8011506:	0001      	movs	r1, r0
 8011508:	187b      	adds	r3, r7, r1
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	431a      	orrs	r2, r3
 801150e:	187b      	adds	r3, r7, r1
 8011510:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 8011512:	187b      	adds	r3, r7, r1
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	2264      	movs	r2, #100	; 0x64
 8011518:	435a      	muls	r2, r3
 801151a:	187b      	adds	r3, r7, r1
 801151c:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 801151e:	4b2d      	ldr	r3, [pc, #180]	; (80115d4 <ProcessMacCommands+0x3fc>)
 8011520:	4a2e      	ldr	r2, [pc, #184]	; (80115dc <ProcessMacCommands+0x404>)
 8011522:	589b      	ldr	r3, [r3, r2]
 8011524:	781b      	ldrb	r3, [r3, #0]
 8011526:	187a      	adds	r2, r7, r1
 8011528:	0011      	movs	r1, r2
 801152a:	0018      	movs	r0, r3
 801152c:	f006 f928 	bl	8017780 <RegionRxParamSetupReq>
 8011530:	0003      	movs	r3, r0
 8011532:	001a      	movs	r2, r3
 8011534:	193b      	adds	r3, r7, r4
 8011536:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 8011538:	193b      	adds	r3, r7, r4
 801153a:	781b      	ldrb	r3, [r3, #0]
 801153c:	001a      	movs	r2, r3
 801153e:	2307      	movs	r3, #7
 8011540:	4013      	ands	r3, r2
 8011542:	2b07      	cmp	r3, #7
 8011544:	d12e      	bne.n	80115a4 <ProcessMacCommands+0x3cc>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8011546:	204c      	movs	r0, #76	; 0x4c
 8011548:	183b      	adds	r3, r7, r0
 801154a:	2100      	movs	r1, #0
 801154c:	5659      	ldrsb	r1, [r3, r1]
 801154e:	4b21      	ldr	r3, [pc, #132]	; (80115d4 <ProcessMacCommands+0x3fc>)
 8011550:	4a22      	ldr	r2, [pc, #136]	; (80115dc <ProcessMacCommands+0x404>)
 8011552:	589a      	ldr	r2, [r3, r2]
 8011554:	b2c9      	uxtb	r1, r1
 8011556:	2390      	movs	r3, #144	; 0x90
 8011558:	005b      	lsls	r3, r3, #1
 801155a:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 801155c:	183b      	adds	r3, r7, r0
 801155e:	2100      	movs	r1, #0
 8011560:	5659      	ldrsb	r1, [r3, r1]
 8011562:	4b1c      	ldr	r3, [pc, #112]	; (80115d4 <ProcessMacCommands+0x3fc>)
 8011564:	4a1d      	ldr	r2, [pc, #116]	; (80115dc <ProcessMacCommands+0x404>)
 8011566:	589a      	ldr	r2, [r3, r2]
 8011568:	b2c9      	uxtb	r1, r1
 801156a:	2394      	movs	r3, #148	; 0x94
 801156c:	005b      	lsls	r3, r3, #1
 801156e:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8011570:	4b18      	ldr	r3, [pc, #96]	; (80115d4 <ProcessMacCommands+0x3fc>)
 8011572:	4a1a      	ldr	r2, [pc, #104]	; (80115dc <ProcessMacCommands+0x404>)
 8011574:	589a      	ldr	r2, [r3, r2]
 8011576:	183b      	adds	r3, r7, r0
 8011578:	6859      	ldr	r1, [r3, #4]
 801157a:	238e      	movs	r3, #142	; 0x8e
 801157c:	005b      	lsls	r3, r3, #1
 801157e:	50d1      	str	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8011580:	4b14      	ldr	r3, [pc, #80]	; (80115d4 <ProcessMacCommands+0x3fc>)
 8011582:	4a16      	ldr	r2, [pc, #88]	; (80115dc <ProcessMacCommands+0x404>)
 8011584:	589a      	ldr	r2, [r3, r2]
 8011586:	183b      	adds	r3, r7, r0
 8011588:	6859      	ldr	r1, [r3, #4]
 801158a:	2392      	movs	r3, #146	; 0x92
 801158c:	005b      	lsls	r3, r3, #1
 801158e:	50d1      	str	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8011590:	183b      	adds	r3, r7, r0
 8011592:	2101      	movs	r1, #1
 8011594:	5659      	ldrsb	r1, [r3, r1]
 8011596:	4b0f      	ldr	r3, [pc, #60]	; (80115d4 <ProcessMacCommands+0x3fc>)
 8011598:	4a10      	ldr	r2, [pc, #64]	; (80115dc <ProcessMacCommands+0x404>)
 801159a:	589a      	ldr	r2, [r3, r2]
 801159c:	b2c9      	uxtb	r1, r1
 801159e:	231a      	movs	r3, #26
 80115a0:	33ff      	adds	r3, #255	; 0xff
 80115a2:	54d1      	strb	r1, [r2, r3]
                }
                macCmdPayload[0] = status;
 80115a4:	236b      	movs	r3, #107	; 0x6b
 80115a6:	18fb      	adds	r3, r7, r3
 80115a8:	781a      	ldrb	r2, [r3, #0]
 80115aa:	2168      	movs	r1, #104	; 0x68
 80115ac:	187b      	adds	r3, r7, r1
 80115ae:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80115b0:	187b      	adds	r3, r7, r1
 80115b2:	2201      	movs	r2, #1
 80115b4:	0019      	movs	r1, r3
 80115b6:	2005      	movs	r0, #5
 80115b8:	f003 ff28 	bl	801540c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 80115bc:	f7ff fdfc 	bl	80111b8 <SetMlmeScheduleUplinkIndication>
                break;
 80115c0:	46c0      	nop			; (mov r8, r8)
 80115c2:	2287      	movs	r2, #135	; 0x87
 80115c4:	18bb      	adds	r3, r7, r2
 80115c6:	18ba      	adds	r2, r7, r2
 80115c8:	7812      	ldrb	r2, [r2, #0]
 80115ca:	701a      	strb	r2, [r3, #0]
 80115cc:	e3a5      	b.n	8011d1a <ProcessMacCommands+0xb42>
 80115ce:	46c0      	nop			; (mov r8, r8)
 80115d0:	0801cfec 	.word	0x0801cfec
 80115d4:	200008f0 	.word	0x200008f0
 80115d8:	00000459 	.word	0x00000459
 80115dc:	00000484 	.word	0x00000484
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80115e0:	2385      	movs	r3, #133	; 0x85
 80115e2:	18fb      	adds	r3, r7, r3
 80115e4:	22ff      	movs	r2, #255	; 0xff
 80115e6:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80115e8:	4af1      	ldr	r2, [pc, #964]	; (80119b0 <ProcessMacCommands+0x7d8>)
 80115ea:	23d2      	movs	r3, #210	; 0xd2
 80115ec:	009b      	lsls	r3, r3, #2
 80115ee:	58d3      	ldr	r3, [r2, r3]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d010      	beq.n	8011616 <ProcessMacCommands+0x43e>
 80115f4:	4aee      	ldr	r2, [pc, #952]	; (80119b0 <ProcessMacCommands+0x7d8>)
 80115f6:	23d2      	movs	r3, #210	; 0xd2
 80115f8:	009b      	lsls	r3, r3, #2
 80115fa:	58d3      	ldr	r3, [r2, r3]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d009      	beq.n	8011616 <ProcessMacCommands+0x43e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8011602:	4aeb      	ldr	r2, [pc, #940]	; (80119b0 <ProcessMacCommands+0x7d8>)
 8011604:	23d2      	movs	r3, #210	; 0xd2
 8011606:	009b      	lsls	r3, r3, #2
 8011608:	58d3      	ldr	r3, [r2, r3]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	2285      	movs	r2, #133	; 0x85
 801160e:	18bc      	adds	r4, r7, r2
 8011610:	4798      	blx	r3
 8011612:	0003      	movs	r3, r0
 8011614:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 8011616:	2168      	movs	r1, #104	; 0x68
 8011618:	187b      	adds	r3, r7, r1
 801161a:	2285      	movs	r2, #133	; 0x85
 801161c:	18ba      	adds	r2, r7, r2
 801161e:	7812      	ldrb	r2, [r2, #0]
 8011620:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8011622:	1c7b      	adds	r3, r7, #1
 8011624:	781b      	ldrb	r3, [r3, #0]
 8011626:	223f      	movs	r2, #63	; 0x3f
 8011628:	4013      	ands	r3, r2
 801162a:	b2da      	uxtb	r2, r3
 801162c:	187b      	adds	r3, r7, r1
 801162e:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8011630:	187b      	adds	r3, r7, r1
 8011632:	2202      	movs	r2, #2
 8011634:	0019      	movs	r1, r3
 8011636:	2006      	movs	r0, #6
 8011638:	f003 fee8 	bl	801540c <LoRaMacCommandsAddCmd>
 801163c:	2287      	movs	r2, #135	; 0x87
 801163e:	18bb      	adds	r3, r7, r2
 8011640:	18ba      	adds	r2, r7, r2
 8011642:	7812      	ldrb	r2, [r2, #0]
 8011644:	701a      	strb	r2, [r3, #0]
                break;
 8011646:	e368      	b.n	8011d1a <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8011648:	246b      	movs	r4, #107	; 0x6b
 801164a:	193b      	adds	r3, r7, r4
 801164c:	2203      	movs	r2, #3
 801164e:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 8011650:	1cfb      	adds	r3, r7, #3
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	1cfa      	adds	r2, r7, #3
 8011656:	1c59      	adds	r1, r3, #1
 8011658:	7011      	strb	r1, [r2, #0]
 801165a:	001a      	movs	r2, r3
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	189b      	adds	r3, r3, r2
 8011660:	781b      	ldrb	r3, [r3, #0]
 8011662:	b25a      	sxtb	r2, r3
 8011664:	2544      	movs	r5, #68	; 0x44
 8011666:	197b      	adds	r3, r7, r5
 8011668:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 801166a:	197b      	adds	r3, r7, r5
 801166c:	2038      	movs	r0, #56	; 0x38
 801166e:	183a      	adds	r2, r7, r0
 8011670:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8011672:	1cfb      	adds	r3, r7, #3
 8011674:	781b      	ldrb	r3, [r3, #0]
 8011676:	1cfa      	adds	r2, r7, #3
 8011678:	1c59      	adds	r1, r3, #1
 801167a:	7011      	strb	r1, [r2, #0]
 801167c:	001a      	movs	r2, r3
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	189b      	adds	r3, r3, r2
 8011682:	781b      	ldrb	r3, [r3, #0]
 8011684:	001a      	movs	r2, r3
 8011686:	183b      	adds	r3, r7, r0
 8011688:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801168a:	1cfb      	adds	r3, r7, #3
 801168c:	781b      	ldrb	r3, [r3, #0]
 801168e:	1cfa      	adds	r2, r7, #3
 8011690:	1c59      	adds	r1, r3, #1
 8011692:	7011      	strb	r1, [r2, #0]
 8011694:	001a      	movs	r2, r3
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	189b      	adds	r3, r3, r2
 801169a:	781b      	ldrb	r3, [r3, #0]
 801169c:	021a      	lsls	r2, r3, #8
 801169e:	183b      	adds	r3, r7, r0
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	431a      	orrs	r2, r3
 80116a4:	183b      	adds	r3, r7, r0
 80116a6:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80116a8:	1cfb      	adds	r3, r7, #3
 80116aa:	781b      	ldrb	r3, [r3, #0]
 80116ac:	1cfa      	adds	r2, r7, #3
 80116ae:	1c59      	adds	r1, r3, #1
 80116b0:	7011      	strb	r1, [r2, #0]
 80116b2:	001a      	movs	r2, r3
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	189b      	adds	r3, r3, r2
 80116b8:	781b      	ldrb	r3, [r3, #0]
 80116ba:	041a      	lsls	r2, r3, #16
 80116bc:	183b      	adds	r3, r7, r0
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	431a      	orrs	r2, r3
 80116c2:	183b      	adds	r3, r7, r0
 80116c4:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 80116c6:	183b      	adds	r3, r7, r0
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	2264      	movs	r2, #100	; 0x64
 80116cc:	435a      	muls	r2, r3
 80116ce:	183b      	adds	r3, r7, r0
 80116d0:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 80116d2:	183b      	adds	r3, r7, r0
 80116d4:	2200      	movs	r2, #0
 80116d6:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 80116d8:	1cfb      	adds	r3, r7, #3
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	1cfa      	adds	r2, r7, #3
 80116de:	1c59      	adds	r1, r3, #1
 80116e0:	7011      	strb	r1, [r2, #0]
 80116e2:	001a      	movs	r2, r3
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	189b      	adds	r3, r3, r2
 80116e8:	781b      	ldrb	r3, [r3, #0]
 80116ea:	b25a      	sxtb	r2, r3
 80116ec:	183b      	adds	r3, r7, r0
 80116ee:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 80116f0:	4baf      	ldr	r3, [pc, #700]	; (80119b0 <ProcessMacCommands+0x7d8>)
 80116f2:	4ab0      	ldr	r2, [pc, #704]	; (80119b4 <ProcessMacCommands+0x7dc>)
 80116f4:	589b      	ldr	r3, [r3, r2]
 80116f6:	781b      	ldrb	r3, [r3, #0]
 80116f8:	197a      	adds	r2, r7, r5
 80116fa:	0011      	movs	r1, r2
 80116fc:	0018      	movs	r0, r3
 80116fe:	f006 f855 	bl	80177ac <RegionNewChannelReq>
 8011702:	0003      	movs	r3, r0
 8011704:	001a      	movs	r2, r3
 8011706:	193b      	adds	r3, r7, r4
 8011708:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 801170a:	193b      	adds	r3, r7, r4
 801170c:	781a      	ldrb	r2, [r3, #0]
 801170e:	2168      	movs	r1, #104	; 0x68
 8011710:	187b      	adds	r3, r7, r1
 8011712:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8011714:	187b      	adds	r3, r7, r1
 8011716:	2201      	movs	r2, #1
 8011718:	0019      	movs	r1, r3
 801171a:	2007      	movs	r0, #7
 801171c:	f003 fe76 	bl	801540c <LoRaMacCommandsAddCmd>
                break;
 8011720:	46c0      	nop			; (mov r8, r8)
 8011722:	2287      	movs	r2, #135	; 0x87
 8011724:	18bb      	adds	r3, r7, r2
 8011726:	18ba      	adds	r2, r7, r2
 8011728:	7812      	ldrb	r2, [r2, #0]
 801172a:	701a      	strb	r2, [r3, #0]
 801172c:	e2f5      	b.n	8011d1a <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 801172e:	1cfb      	adds	r3, r7, #3
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	1cfa      	adds	r2, r7, #3
 8011734:	1c59      	adds	r1, r3, #1
 8011736:	7011      	strb	r1, [r2, #0]
 8011738:	001a      	movs	r2, r3
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	189b      	adds	r3, r3, r2
 801173e:	781a      	ldrb	r2, [r3, #0]
 8011740:	2084      	movs	r0, #132	; 0x84
 8011742:	183b      	adds	r3, r7, r0
 8011744:	210f      	movs	r1, #15
 8011746:	400a      	ands	r2, r1
 8011748:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 801174a:	183b      	adds	r3, r7, r0
 801174c:	781b      	ldrb	r3, [r3, #0]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d105      	bne.n	801175e <ProcessMacCommands+0x586>
                {
                    delay++;
 8011752:	2184      	movs	r1, #132	; 0x84
 8011754:	187b      	adds	r3, r7, r1
 8011756:	781a      	ldrb	r2, [r3, #0]
 8011758:	187b      	adds	r3, r7, r1
 801175a:	3201      	adds	r2, #1
 801175c:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 801175e:	2384      	movs	r3, #132	; 0x84
 8011760:	18fb      	adds	r3, r7, r3
 8011762:	781a      	ldrb	r2, [r3, #0]
 8011764:	0013      	movs	r3, r2
 8011766:	015b      	lsls	r3, r3, #5
 8011768:	1a9b      	subs	r3, r3, r2
 801176a:	009b      	lsls	r3, r3, #2
 801176c:	189b      	adds	r3, r3, r2
 801176e:	00db      	lsls	r3, r3, #3
 8011770:	0019      	movs	r1, r3
 8011772:	4b8f      	ldr	r3, [pc, #572]	; (80119b0 <ProcessMacCommands+0x7d8>)
 8011774:	4a8f      	ldr	r2, [pc, #572]	; (80119b4 <ProcessMacCommands+0x7dc>)
 8011776:	589a      	ldr	r2, [r3, r2]
 8011778:	2384      	movs	r3, #132	; 0x84
 801177a:	005b      	lsls	r3, r3, #1
 801177c:	50d1      	str	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 801177e:	4b8c      	ldr	r3, [pc, #560]	; (80119b0 <ProcessMacCommands+0x7d8>)
 8011780:	4a8c      	ldr	r2, [pc, #560]	; (80119b4 <ProcessMacCommands+0x7dc>)
 8011782:	589a      	ldr	r2, [r3, r2]
 8011784:	2384      	movs	r3, #132	; 0x84
 8011786:	005b      	lsls	r3, r3, #1
 8011788:	58d3      	ldr	r3, [r2, r3]
 801178a:	4a89      	ldr	r2, [pc, #548]	; (80119b0 <ProcessMacCommands+0x7d8>)
 801178c:	4989      	ldr	r1, [pc, #548]	; (80119b4 <ProcessMacCommands+0x7dc>)
 801178e:	5852      	ldr	r2, [r2, r1]
 8011790:	21fa      	movs	r1, #250	; 0xfa
 8011792:	0089      	lsls	r1, r1, #2
 8011794:	1859      	adds	r1, r3, r1
 8011796:	2386      	movs	r3, #134	; 0x86
 8011798:	005b      	lsls	r3, r3, #1
 801179a:	50d1      	str	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 801179c:	2368      	movs	r3, #104	; 0x68
 801179e:	18fb      	adds	r3, r7, r3
 80117a0:	2200      	movs	r2, #0
 80117a2:	0019      	movs	r1, r3
 80117a4:	2008      	movs	r0, #8
 80117a6:	f003 fe31 	bl	801540c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 80117aa:	f7ff fd05 	bl	80111b8 <SetMlmeScheduleUplinkIndication>
 80117ae:	2287      	movs	r2, #135	; 0x87
 80117b0:	18bb      	adds	r3, r7, r2
 80117b2:	18ba      	adds	r2, r7, r2
 80117b4:	7812      	ldrb	r2, [r2, #0]
 80117b6:	701a      	strb	r2, [r3, #0]
                break;
 80117b8:	e2af      	b.n	8011d1a <ProcessMacCommands+0xb42>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 80117ba:	1cfb      	adds	r3, r7, #3
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	1cfa      	adds	r2, r7, #3
 80117c0:	1c59      	adds	r1, r3, #1
 80117c2:	7011      	strb	r1, [r2, #0]
 80117c4:	001a      	movs	r2, r3
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	189a      	adds	r2, r3, r2
 80117ca:	2176      	movs	r1, #118	; 0x76
 80117cc:	187b      	adds	r3, r7, r1
 80117ce:	7812      	ldrb	r2, [r2, #0]
 80117d0:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 80117d2:	2034      	movs	r0, #52	; 0x34
 80117d4:	183b      	adds	r3, r7, r0
 80117d6:	2200      	movs	r2, #0
 80117d8:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 80117da:	183b      	adds	r3, r7, r0
 80117dc:	2200      	movs	r2, #0
 80117de:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80117e0:	187b      	adds	r3, r7, r1
 80117e2:	781b      	ldrb	r3, [r3, #0]
 80117e4:	2220      	movs	r2, #32
 80117e6:	4013      	ands	r3, r2
 80117e8:	d003      	beq.n	80117f2 <ProcessMacCommands+0x61a>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80117ea:	2334      	movs	r3, #52	; 0x34
 80117ec:	18fb      	adds	r3, r7, r3
 80117ee:	2201      	movs	r2, #1
 80117f0:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80117f2:	2376      	movs	r3, #118	; 0x76
 80117f4:	18fb      	adds	r3, r7, r3
 80117f6:	781b      	ldrb	r3, [r3, #0]
 80117f8:	2210      	movs	r2, #16
 80117fa:	4013      	ands	r3, r2
 80117fc:	d003      	beq.n	8011806 <ProcessMacCommands+0x62e>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80117fe:	2334      	movs	r3, #52	; 0x34
 8011800:	18fb      	adds	r3, r7, r3
 8011802:	2201      	movs	r2, #1
 8011804:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8011806:	2376      	movs	r3, #118	; 0x76
 8011808:	18fb      	adds	r3, r7, r3
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	220f      	movs	r2, #15
 801180e:	4013      	ands	r3, r2
 8011810:	b2da      	uxtb	r2, r3
 8011812:	2134      	movs	r1, #52	; 0x34
 8011814:	187b      	adds	r3, r7, r1
 8011816:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8011818:	4b65      	ldr	r3, [pc, #404]	; (80119b0 <ProcessMacCommands+0x7d8>)
 801181a:	4a66      	ldr	r2, [pc, #408]	; (80119b4 <ProcessMacCommands+0x7dc>)
 801181c:	589b      	ldr	r3, [r3, r2]
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	187a      	adds	r2, r7, r1
 8011822:	0011      	movs	r1, r2
 8011824:	0018      	movs	r0, r3
 8011826:	f005 ffd7 	bl	80177d8 <RegionTxParamSetupReq>
 801182a:	0003      	movs	r3, r0
 801182c:	3301      	adds	r3, #1
 801182e:	d055      	beq.n	80118dc <ProcessMacCommands+0x704>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8011830:	4b5f      	ldr	r3, [pc, #380]	; (80119b0 <ProcessMacCommands+0x7d8>)
 8011832:	4a60      	ldr	r2, [pc, #384]	; (80119b4 <ProcessMacCommands+0x7dc>)
 8011834:	589a      	ldr	r2, [r3, r2]
 8011836:	2034      	movs	r0, #52	; 0x34
 8011838:	183b      	adds	r3, r7, r0
 801183a:	7819      	ldrb	r1, [r3, #0]
 801183c:	2396      	movs	r3, #150	; 0x96
 801183e:	005b      	lsls	r3, r3, #1
 8011840:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8011842:	4b5b      	ldr	r3, [pc, #364]	; (80119b0 <ProcessMacCommands+0x7d8>)
 8011844:	4a5b      	ldr	r2, [pc, #364]	; (80119b4 <ProcessMacCommands+0x7dc>)
 8011846:	589a      	ldr	r2, [r3, r2]
 8011848:	183b      	adds	r3, r7, r0
 801184a:	7859      	ldrb	r1, [r3, #1]
 801184c:	232e      	movs	r3, #46	; 0x2e
 801184e:	33ff      	adds	r3, #255	; 0xff
 8011850:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8011852:	183b      	adds	r3, r7, r0
 8011854:	789b      	ldrb	r3, [r3, #2]
 8011856:	001a      	movs	r2, r3
 8011858:	4b57      	ldr	r3, [pc, #348]	; (80119b8 <ProcessMacCommands+0x7e0>)
 801185a:	5c99      	ldrb	r1, [r3, r2]
 801185c:	4b54      	ldr	r3, [pc, #336]	; (80119b0 <ProcessMacCommands+0x7d8>)
 801185e:	4a55      	ldr	r2, [pc, #340]	; (80119b4 <ProcessMacCommands+0x7dc>)
 8011860:	589c      	ldr	r4, [r3, r2]
 8011862:	0008      	movs	r0, r1
 8011864:	f7ef fcf8 	bl	8001258 <__aeabi_ui2f>
 8011868:	1c02      	adds	r2, r0, #0
 801186a:	2398      	movs	r3, #152	; 0x98
 801186c:	005b      	lsls	r3, r3, #1
 801186e:	50e2      	str	r2, [r4, r3]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8011870:	2130      	movs	r1, #48	; 0x30
 8011872:	187b      	adds	r3, r7, r1
 8011874:	2202      	movs	r2, #2
 8011876:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011878:	4b4d      	ldr	r3, [pc, #308]	; (80119b0 <ProcessMacCommands+0x7d8>)
 801187a:	4a4e      	ldr	r2, [pc, #312]	; (80119b4 <ProcessMacCommands+0x7dc>)
 801187c:	589a      	ldr	r2, [r3, r2]
 801187e:	2396      	movs	r3, #150	; 0x96
 8011880:	005b      	lsls	r3, r3, #1
 8011882:	5cd2      	ldrb	r2, [r2, r3]
 8011884:	187b      	adds	r3, r7, r1
 8011886:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011888:	4b49      	ldr	r3, [pc, #292]	; (80119b0 <ProcessMacCommands+0x7d8>)
 801188a:	4a4a      	ldr	r2, [pc, #296]	; (80119b4 <ProcessMacCommands+0x7dc>)
 801188c:	589b      	ldr	r3, [r3, r2]
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	187a      	adds	r2, r7, r1
 8011892:	0011      	movs	r1, r2
 8011894:	0018      	movs	r0, r3
 8011896:	f005 fe4d 	bl	8017534 <RegionGetPhyParam>
 801189a:	0003      	movs	r3, r0
 801189c:	001a      	movs	r2, r3
 801189e:	212c      	movs	r1, #44	; 0x2c
 80118a0:	187b      	adds	r3, r7, r1
 80118a2:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 80118a4:	187b      	adds	r3, r7, r1
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	b259      	sxtb	r1, r3
 80118aa:	4b41      	ldr	r3, [pc, #260]	; (80119b0 <ProcessMacCommands+0x7d8>)
 80118ac:	4a41      	ldr	r2, [pc, #260]	; (80119b4 <ProcessMacCommands+0x7dc>)
 80118ae:	589b      	ldr	r3, [r3, r2]
 80118b0:	22f9      	movs	r2, #249	; 0xf9
 80118b2:	5698      	ldrsb	r0, [r3, r2]
 80118b4:	4b3e      	ldr	r3, [pc, #248]	; (80119b0 <ProcessMacCommands+0x7d8>)
 80118b6:	4a3f      	ldr	r2, [pc, #252]	; (80119b4 <ProcessMacCommands+0x7dc>)
 80118b8:	589b      	ldr	r3, [r3, r2]
 80118ba:	1c04      	adds	r4, r0, #0
 80118bc:	1c08      	adds	r0, r1, #0
 80118be:	b241      	sxtb	r1, r0
 80118c0:	b262      	sxtb	r2, r4
 80118c2:	4291      	cmp	r1, r2
 80118c4:	da00      	bge.n	80118c8 <ProcessMacCommands+0x6f0>
 80118c6:	1c20      	adds	r0, r4, #0
 80118c8:	b241      	sxtb	r1, r0
 80118ca:	22f9      	movs	r2, #249	; 0xf9
 80118cc:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80118ce:	2368      	movs	r3, #104	; 0x68
 80118d0:	18fb      	adds	r3, r7, r3
 80118d2:	2200      	movs	r2, #0
 80118d4:	0019      	movs	r1, r3
 80118d6:	2009      	movs	r0, #9
 80118d8:	f003 fd98 	bl	801540c <LoRaMacCommandsAddCmd>
                }
                break;
 80118dc:	46c0      	nop			; (mov r8, r8)
 80118de:	2287      	movs	r2, #135	; 0x87
 80118e0:	18bb      	adds	r3, r7, r2
 80118e2:	18ba      	adds	r2, r7, r2
 80118e4:	7812      	ldrb	r2, [r2, #0]
 80118e6:	701a      	strb	r2, [r3, #0]
 80118e8:	e217      	b.n	8011d1a <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 80118ea:	246b      	movs	r4, #107	; 0x6b
 80118ec:	193b      	adds	r3, r7, r4
 80118ee:	2203      	movs	r2, #3
 80118f0:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 80118f2:	1cfb      	adds	r3, r7, #3
 80118f4:	781b      	ldrb	r3, [r3, #0]
 80118f6:	1cfa      	adds	r2, r7, #3
 80118f8:	1c59      	adds	r1, r3, #1
 80118fa:	7011      	strb	r1, [r2, #0]
 80118fc:	001a      	movs	r2, r3
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	189b      	adds	r3, r3, r2
 8011902:	781a      	ldrb	r2, [r3, #0]
 8011904:	2024      	movs	r0, #36	; 0x24
 8011906:	183b      	adds	r3, r7, r0
 8011908:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 801190a:	1cfb      	adds	r3, r7, #3
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	1cfa      	adds	r2, r7, #3
 8011910:	1c59      	adds	r1, r3, #1
 8011912:	7011      	strb	r1, [r2, #0]
 8011914:	001a      	movs	r2, r3
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	189b      	adds	r3, r3, r2
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	001a      	movs	r2, r3
 801191e:	183b      	adds	r3, r7, r0
 8011920:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011922:	1cfb      	adds	r3, r7, #3
 8011924:	781b      	ldrb	r3, [r3, #0]
 8011926:	1cfa      	adds	r2, r7, #3
 8011928:	1c59      	adds	r1, r3, #1
 801192a:	7011      	strb	r1, [r2, #0]
 801192c:	001a      	movs	r2, r3
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	189b      	adds	r3, r3, r2
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	021a      	lsls	r2, r3, #8
 8011936:	183b      	adds	r3, r7, r0
 8011938:	685b      	ldr	r3, [r3, #4]
 801193a:	431a      	orrs	r2, r3
 801193c:	183b      	adds	r3, r7, r0
 801193e:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011940:	1cfb      	adds	r3, r7, #3
 8011942:	781b      	ldrb	r3, [r3, #0]
 8011944:	1cfa      	adds	r2, r7, #3
 8011946:	1c59      	adds	r1, r3, #1
 8011948:	7011      	strb	r1, [r2, #0]
 801194a:	001a      	movs	r2, r3
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	189b      	adds	r3, r3, r2
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	041a      	lsls	r2, r3, #16
 8011954:	0001      	movs	r1, r0
 8011956:	187b      	adds	r3, r7, r1
 8011958:	685b      	ldr	r3, [r3, #4]
 801195a:	431a      	orrs	r2, r3
 801195c:	187b      	adds	r3, r7, r1
 801195e:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 8011960:	187b      	adds	r3, r7, r1
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	2264      	movs	r2, #100	; 0x64
 8011966:	435a      	muls	r2, r3
 8011968:	187b      	adds	r3, r7, r1
 801196a:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 801196c:	4b10      	ldr	r3, [pc, #64]	; (80119b0 <ProcessMacCommands+0x7d8>)
 801196e:	4a11      	ldr	r2, [pc, #68]	; (80119b4 <ProcessMacCommands+0x7dc>)
 8011970:	589b      	ldr	r3, [r3, r2]
 8011972:	781b      	ldrb	r3, [r3, #0]
 8011974:	187a      	adds	r2, r7, r1
 8011976:	0011      	movs	r1, r2
 8011978:	0018      	movs	r0, r3
 801197a:	f005 ff43 	bl	8017804 <RegionDlChannelReq>
 801197e:	0003      	movs	r3, r0
 8011980:	001a      	movs	r2, r3
 8011982:	193b      	adds	r3, r7, r4
 8011984:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 8011986:	193b      	adds	r3, r7, r4
 8011988:	781a      	ldrb	r2, [r3, #0]
 801198a:	2168      	movs	r1, #104	; 0x68
 801198c:	187b      	adds	r3, r7, r1
 801198e:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8011990:	187b      	adds	r3, r7, r1
 8011992:	2201      	movs	r2, #1
 8011994:	0019      	movs	r1, r3
 8011996:	200a      	movs	r0, #10
 8011998:	f003 fd38 	bl	801540c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 801199c:	f7ff fc0c 	bl	80111b8 <SetMlmeScheduleUplinkIndication>
                break;
 80119a0:	46c0      	nop			; (mov r8, r8)
 80119a2:	2287      	movs	r2, #135	; 0x87
 80119a4:	18bb      	adds	r3, r7, r2
 80119a6:	18ba      	adds	r2, r7, r2
 80119a8:	7812      	ldrb	r2, [r2, #0]
 80119aa:	701a      	strb	r2, [r3, #0]
 80119ac:	e1b5      	b.n	8011d1a <ProcessMacCommands+0xb42>
 80119ae:	46c0      	nop			; (mov r8, r8)
 80119b0:	200008f0 	.word	0x200008f0
 80119b4:	00000484 	.word	0x00000484
 80119b8:	0801cfc8 	.word	0x0801cfc8
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                SysTime_t gpsEpochTime = { 0 };
 80119bc:	241c      	movs	r4, #28
 80119be:	193b      	adds	r3, r7, r4
 80119c0:	0018      	movs	r0, r3
 80119c2:	2308      	movs	r3, #8
 80119c4:	001a      	movs	r2, r3
 80119c6:	2100      	movs	r1, #0
 80119c8:	f009 feb6 	bl	801b738 <memset>
                SysTime_t sysTime = { 0 };
 80119cc:	2514      	movs	r5, #20
 80119ce:	197b      	adds	r3, r7, r5
 80119d0:	0018      	movs	r0, r3
 80119d2:	2308      	movs	r3, #8
 80119d4:	001a      	movs	r2, r3
 80119d6:	2100      	movs	r1, #0
 80119d8:	f009 feae 	bl	801b738 <memset>
                SysTime_t sysTimeCurrent = { 0 };
 80119dc:	260c      	movs	r6, #12
 80119de:	19bb      	adds	r3, r7, r6
 80119e0:	0018      	movs	r0, r3
 80119e2:	2308      	movs	r3, #8
 80119e4:	001a      	movs	r2, r3
 80119e6:	2100      	movs	r1, #0
 80119e8:	f009 fea6 	bl	801b738 <memset>

                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80119ec:	1cfb      	adds	r3, r7, #3
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	1cfa      	adds	r2, r7, #3
 80119f2:	1c59      	adds	r1, r3, #1
 80119f4:	7011      	strb	r1, [r2, #0]
 80119f6:	001a      	movs	r2, r3
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	189b      	adds	r3, r3, r2
 80119fc:	781b      	ldrb	r3, [r3, #0]
 80119fe:	001a      	movs	r2, r3
 8011a00:	0020      	movs	r0, r4
 8011a02:	183b      	adds	r3, r7, r0
 8011a04:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8011a06:	1cfb      	adds	r3, r7, #3
 8011a08:	781b      	ldrb	r3, [r3, #0]
 8011a0a:	1cfa      	adds	r2, r7, #3
 8011a0c:	1c59      	adds	r1, r3, #1
 8011a0e:	7011      	strb	r1, [r2, #0]
 8011a10:	001a      	movs	r2, r3
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	189b      	adds	r3, r3, r2
 8011a16:	781b      	ldrb	r3, [r3, #0]
 8011a18:	021a      	lsls	r2, r3, #8
 8011a1a:	183b      	adds	r3, r7, r0
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	431a      	orrs	r2, r3
 8011a20:	183b      	adds	r3, r7, r0
 8011a22:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8011a24:	1cfb      	adds	r3, r7, #3
 8011a26:	781b      	ldrb	r3, [r3, #0]
 8011a28:	1cfa      	adds	r2, r7, #3
 8011a2a:	1c59      	adds	r1, r3, #1
 8011a2c:	7011      	strb	r1, [r2, #0]
 8011a2e:	001a      	movs	r2, r3
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	189b      	adds	r3, r3, r2
 8011a34:	781b      	ldrb	r3, [r3, #0]
 8011a36:	041a      	lsls	r2, r3, #16
 8011a38:	183b      	adds	r3, r7, r0
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	431a      	orrs	r2, r3
 8011a3e:	183b      	adds	r3, r7, r0
 8011a40:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8011a42:	1cfb      	adds	r3, r7, #3
 8011a44:	781b      	ldrb	r3, [r3, #0]
 8011a46:	1cfa      	adds	r2, r7, #3
 8011a48:	1c59      	adds	r1, r3, #1
 8011a4a:	7011      	strb	r1, [r2, #0]
 8011a4c:	001a      	movs	r2, r3
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	189b      	adds	r3, r3, r2
 8011a52:	781b      	ldrb	r3, [r3, #0]
 8011a54:	061a      	lsls	r2, r3, #24
 8011a56:	183b      	adds	r3, r7, r0
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	431a      	orrs	r2, r3
 8011a5c:	183b      	adds	r3, r7, r0
 8011a5e:	601a      	str	r2, [r3, #0]
                gpsEpochTime.SubSeconds = payload[macIndex++];
 8011a60:	1cfb      	adds	r3, r7, #3
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	1cfa      	adds	r2, r7, #3
 8011a66:	1c59      	adds	r1, r3, #1
 8011a68:	7011      	strb	r1, [r2, #0]
 8011a6a:	001a      	movs	r2, r3
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	189b      	adds	r3, r3, r2
 8011a70:	781b      	ldrb	r3, [r3, #0]
 8011a72:	b21a      	sxth	r2, r3
 8011a74:	183b      	adds	r3, r7, r0
 8011a76:	809a      	strh	r2, [r3, #4]

                // Convert the fractional second received in ms
                // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8011a78:	0001      	movs	r1, r0
 8011a7a:	183b      	adds	r3, r7, r0
 8011a7c:	2204      	movs	r2, #4
 8011a7e:	5e9b      	ldrsh	r3, [r3, r2]
 8011a80:	001a      	movs	r2, r3
 8011a82:	0013      	movs	r3, r2
 8011a84:	015b      	lsls	r3, r3, #5
 8011a86:	1a9b      	subs	r3, r3, r2
 8011a88:	009b      	lsls	r3, r3, #2
 8011a8a:	189b      	adds	r3, r3, r2
 8011a8c:	00db      	lsls	r3, r3, #3
 8011a8e:	121b      	asrs	r3, r3, #8
 8011a90:	b21a      	sxth	r2, r3
 8011a92:	187b      	adds	r3, r7, r1
 8011a94:	809a      	strh	r2, [r3, #4]

                // Copy received GPS Epoch time into system time
                sysTime = gpsEpochTime;
 8011a96:	002c      	movs	r4, r5
 8011a98:	193b      	adds	r3, r7, r4
 8011a9a:	187a      	adds	r2, r7, r1
 8011a9c:	ca03      	ldmia	r2!, {r0, r1}
 8011a9e:	c303      	stmia	r3!, {r0, r1}
                // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8011aa0:	193b      	adds	r3, r7, r4
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	4aa3      	ldr	r2, [pc, #652]	; (8011d34 <ProcessMacCommands+0xb5c>)
 8011aa6:	189a      	adds	r2, r3, r2
 8011aa8:	193b      	adds	r3, r7, r4
 8011aaa:	601a      	str	r2, [r3, #0]

                // Compensate time difference between Tx Done time and now
                sysTimeCurrent = SysTimeGet( );
 8011aac:	19bb      	adds	r3, r7, r6
 8011aae:	0018      	movs	r0, r3
 8011ab0:	f009 f9fb 	bl	801aeaa <SysTimeGet>
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8011ab4:	236c      	movs	r3, #108	; 0x6c
 8011ab6:	18fd      	adds	r5, r7, r3
 8011ab8:	499f      	ldr	r1, [pc, #636]	; (8011d38 <ProcessMacCommands+0xb60>)
 8011aba:	23ce      	movs	r3, #206	; 0xce
 8011abc:	009b      	lsls	r3, r3, #2
 8011abe:	0026      	movs	r6, r4
 8011ac0:	193a      	adds	r2, r7, r4
 8011ac2:	2404      	movs	r4, #4
 8011ac4:	18c8      	adds	r0, r1, r3
 8011ac6:	1900      	adds	r0, r0, r4
 8011ac8:	466c      	mov	r4, sp
 8011aca:	6800      	ldr	r0, [r0, #0]
 8011acc:	6020      	str	r0, [r4, #0]
 8011ace:	58cb      	ldr	r3, [r1, r3]
 8011ad0:	6811      	ldr	r1, [r2, #0]
 8011ad2:	6852      	ldr	r2, [r2, #4]
 8011ad4:	0028      	movs	r0, r5
 8011ad6:	f009 f963 	bl	801ada0 <SysTimeSub>
 8011ada:	0034      	movs	r4, r6
 8011adc:	0025      	movs	r5, r4
 8011ade:	193c      	adds	r4, r7, r4
 8011ae0:	236c      	movs	r3, #108	; 0x6c
 8011ae2:	18fb      	adds	r3, r7, r3
 8011ae4:	260c      	movs	r6, #12
 8011ae6:	19ba      	adds	r2, r7, r6
 8011ae8:	4669      	mov	r1, sp
 8011aea:	6858      	ldr	r0, [r3, #4]
 8011aec:	6008      	str	r0, [r1, #0]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	6811      	ldr	r1, [r2, #0]
 8011af2:	6852      	ldr	r2, [r2, #4]
 8011af4:	0020      	movs	r0, r4
 8011af6:	f009 f8fb 	bl	801acf0 <SysTimeAdd>

                // Apply the new system time.
                SysTimeSet( sysTime );
 8011afa:	002c      	movs	r4, r5
 8011afc:	193b      	adds	r3, r7, r4
 8011afe:	6818      	ldr	r0, [r3, #0]
 8011b00:	6859      	ldr	r1, [r3, #4]
 8011b02:	f009 f9a1 	bl	801ae48 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 8011b06:	f003 fafc 	bl	8015102 <LoRaMacClassBDeviceTimeAns>
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8011b0a:	4a8b      	ldr	r2, [pc, #556]	; (8011d38 <ProcessMacCommands+0xb60>)
 8011b0c:	2387      	movs	r3, #135	; 0x87
 8011b0e:	00db      	lsls	r3, r3, #3
 8011b10:	2101      	movs	r1, #1
 8011b12:	54d1      	strb	r1, [r2, r3]
                break;
 8011b14:	46c0      	nop			; (mov r8, r8)
 8011b16:	2287      	movs	r2, #135	; 0x87
 8011b18:	18bb      	adds	r3, r7, r2
 8011b1a:	18ba      	adds	r2, r7, r2
 8011b1c:	7812      	ldrb	r2, [r2, #0]
 8011b1e:	701a      	strb	r2, [r3, #0]
 8011b20:	e0fb      	b.n	8011d1a <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                // According to the specification, it is not allowed to process this answer in
                // a ping or multicast slot
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8011b22:	4a85      	ldr	r2, [pc, #532]	; (8011d38 <ProcessMacCommands+0xb60>)
 8011b24:	2390      	movs	r3, #144	; 0x90
 8011b26:	00db      	lsls	r3, r3, #3
 8011b28:	5cd3      	ldrb	r3, [r2, r3]
 8011b2a:	2b04      	cmp	r3, #4
 8011b2c:	d007      	beq.n	8011b3e <ProcessMacCommands+0x966>
 8011b2e:	4a82      	ldr	r2, [pc, #520]	; (8011d38 <ProcessMacCommands+0xb60>)
 8011b30:	2390      	movs	r3, #144	; 0x90
 8011b32:	00db      	lsls	r3, r3, #3
 8011b34:	5cd3      	ldrb	r3, [r2, r3]
 8011b36:	2b05      	cmp	r3, #5
 8011b38:	d001      	beq.n	8011b3e <ProcessMacCommands+0x966>
                {
                    LoRaMacClassBPingSlotInfoAns( );
 8011b3a:	f003 fac3 	bl	80150c4 <LoRaMacClassBPingSlotInfoAns>
 8011b3e:	2287      	movs	r2, #135	; 0x87
 8011b40:	18bb      	adds	r3, r7, r2
 8011b42:	18ba      	adds	r2, r7, r2
 8011b44:	7812      	ldrb	r2, [r2, #0]
 8011b46:	701a      	strb	r2, [r3, #0]
                }
                break;
 8011b48:	e0e7      	b.n	8011d1a <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8011b4a:	207c      	movs	r0, #124	; 0x7c
 8011b4c:	183b      	adds	r3, r7, r0
 8011b4e:	2203      	movs	r2, #3
 8011b50:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 8011b52:	2300      	movs	r3, #0
 8011b54:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011b56:	1cfb      	adds	r3, r7, #3
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	1cfa      	adds	r2, r7, #3
 8011b5c:	1c59      	adds	r1, r3, #1
 8011b5e:	7011      	strb	r1, [r2, #0]
 8011b60:	001a      	movs	r2, r3
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	189b      	adds	r3, r3, r2
 8011b66:	781b      	ldrb	r3, [r3, #0]
 8011b68:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011b6a:	1cfb      	adds	r3, r7, #3
 8011b6c:	781b      	ldrb	r3, [r3, #0]
 8011b6e:	1cfa      	adds	r2, r7, #3
 8011b70:	1c59      	adds	r1, r3, #1
 8011b72:	7011      	strb	r1, [r2, #0]
 8011b74:	001a      	movs	r2, r3
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	189b      	adds	r3, r3, r2
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	021b      	lsls	r3, r3, #8
 8011b7e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011b80:	4313      	orrs	r3, r2
 8011b82:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011b84:	1cfb      	adds	r3, r7, #3
 8011b86:	781b      	ldrb	r3, [r3, #0]
 8011b88:	1cfa      	adds	r2, r7, #3
 8011b8a:	1c59      	adds	r1, r3, #1
 8011b8c:	7011      	strb	r1, [r2, #0]
 8011b8e:	001a      	movs	r2, r3
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	189b      	adds	r3, r3, r2
 8011b94:	781b      	ldrb	r3, [r3, #0]
 8011b96:	041b      	lsls	r3, r3, #16
 8011b98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011b9a:	4313      	orrs	r3, r2
 8011b9c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8011b9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ba0:	2264      	movs	r2, #100	; 0x64
 8011ba2:	4353      	muls	r3, r2
 8011ba4:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8011ba6:	1cfb      	adds	r3, r7, #3
 8011ba8:	781b      	ldrb	r3, [r3, #0]
 8011baa:	1cfa      	adds	r2, r7, #3
 8011bac:	1c59      	adds	r1, r3, #1
 8011bae:	7011      	strb	r1, [r2, #0]
 8011bb0:	001a      	movs	r2, r3
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	189b      	adds	r3, r3, r2
 8011bb6:	781a      	ldrb	r2, [r3, #0]
 8011bb8:	2677      	movs	r6, #119	; 0x77
 8011bba:	19bb      	adds	r3, r7, r6
 8011bbc:	210f      	movs	r1, #15
 8011bbe:	400a      	ands	r2, r1
 8011bc0:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8011bc2:	0005      	movs	r5, r0
 8011bc4:	183c      	adds	r4, r7, r0
 8011bc6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011bc8:	19bb      	adds	r3, r7, r6
 8011bca:	781b      	ldrb	r3, [r3, #0]
 8011bcc:	0011      	movs	r1, r2
 8011bce:	0018      	movs	r0, r3
 8011bd0:	f003 fa7d 	bl	80150ce <LoRaMacClassBPingSlotChannelReq>
 8011bd4:	0003      	movs	r3, r0
 8011bd6:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 8011bd8:	2168      	movs	r1, #104	; 0x68
 8011bda:	187b      	adds	r3, r7, r1
 8011bdc:	0028      	movs	r0, r5
 8011bde:	183a      	adds	r2, r7, r0
 8011be0:	7812      	ldrb	r2, [r2, #0]
 8011be2:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8011be4:	187b      	adds	r3, r7, r1
 8011be6:	2201      	movs	r2, #1
 8011be8:	0019      	movs	r1, r3
 8011bea:	2011      	movs	r0, #17
 8011bec:	f003 fc0e 	bl	801540c <LoRaMacCommandsAddCmd>
 8011bf0:	2287      	movs	r2, #135	; 0x87
 8011bf2:	18bb      	adds	r3, r7, r2
 8011bf4:	18ba      	adds	r2, r7, r2
 8011bf6:	7812      	ldrb	r2, [r2, #0]
 8011bf8:	701a      	strb	r2, [r3, #0]
                break;
 8011bfa:	e08e      	b.n	8011d1a <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                uint16_t beaconTimingDelay = 0;
 8011bfc:	207e      	movs	r0, #126	; 0x7e
 8011bfe:	183b      	adds	r3, r7, r0
 8011c00:	2200      	movs	r2, #0
 8011c02:	801a      	strh	r2, [r3, #0]
                uint8_t beaconTimingChannel = 0;
 8011c04:	247d      	movs	r4, #125	; 0x7d
 8011c06:	193b      	adds	r3, r7, r4
 8011c08:	2200      	movs	r2, #0
 8011c0a:	701a      	strb	r2, [r3, #0]

                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8011c0c:	1cfb      	adds	r3, r7, #3
 8011c0e:	781b      	ldrb	r3, [r3, #0]
 8011c10:	1cfa      	adds	r2, r7, #3
 8011c12:	1c59      	adds	r1, r3, #1
 8011c14:	7011      	strb	r1, [r2, #0]
 8011c16:	001a      	movs	r2, r3
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	189b      	adds	r3, r3, r2
 8011c1c:	781a      	ldrb	r2, [r3, #0]
 8011c1e:	183b      	adds	r3, r7, r0
 8011c20:	801a      	strh	r2, [r3, #0]
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8011c22:	1cfb      	adds	r3, r7, #3
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	1cfa      	adds	r2, r7, #3
 8011c28:	1c59      	adds	r1, r3, #1
 8011c2a:	7011      	strb	r1, [r2, #0]
 8011c2c:	001a      	movs	r2, r3
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	189b      	adds	r3, r3, r2
 8011c32:	781b      	ldrb	r3, [r3, #0]
 8011c34:	021b      	lsls	r3, r3, #8
 8011c36:	b21a      	sxth	r2, r3
 8011c38:	183b      	adds	r3, r7, r0
 8011c3a:	2100      	movs	r1, #0
 8011c3c:	5e5b      	ldrsh	r3, [r3, r1]
 8011c3e:	4313      	orrs	r3, r2
 8011c40:	b21a      	sxth	r2, r3
 8011c42:	183b      	adds	r3, r7, r0
 8011c44:	801a      	strh	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
 8011c46:	1cfb      	adds	r3, r7, #3
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	1cfa      	adds	r2, r7, #3
 8011c4c:	1c59      	adds	r1, r3, #1
 8011c4e:	7011      	strb	r1, [r2, #0]
 8011c50:	001a      	movs	r2, r3
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	189a      	adds	r2, r3, r2
 8011c56:	193b      	adds	r3, r7, r4
 8011c58:	7812      	ldrb	r2, [r2, #0]
 8011c5a:	701a      	strb	r2, [r3, #0]

                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8011c5c:	4b37      	ldr	r3, [pc, #220]	; (8011d3c <ProcessMacCommands+0xb64>)
 8011c5e:	681a      	ldr	r2, [r3, #0]
 8011c60:	193b      	adds	r3, r7, r4
 8011c62:	7819      	ldrb	r1, [r3, #0]
 8011c64:	183b      	adds	r3, r7, r0
 8011c66:	881b      	ldrh	r3, [r3, #0]
 8011c68:	0018      	movs	r0, r3
 8011c6a:	f003 fa3c 	bl	80150e6 <LoRaMacClassBBeaconTimingAns>
 8011c6e:	2287      	movs	r2, #135	; 0x87
 8011c70:	18bb      	adds	r3, r7, r2
 8011c72:	18ba      	adds	r2, r7, r2
 8011c74:	7812      	ldrb	r2, [r2, #0]
 8011c76:	701a      	strb	r2, [r3, #0]
                break;
 8011c78:	e04f      	b.n	8011d1a <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	2080      	movs	r0, #128	; 0x80
 8011c7e:	183a      	adds	r2, r7, r0
 8011c80:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 8011c82:	1cfb      	adds	r3, r7, #3
 8011c84:	781b      	ldrb	r3, [r3, #0]
 8011c86:	1cfa      	adds	r2, r7, #3
 8011c88:	1c59      	adds	r1, r3, #1
 8011c8a:	7011      	strb	r1, [r2, #0]
 8011c8c:	001a      	movs	r2, r3
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	189b      	adds	r3, r3, r2
 8011c92:	781b      	ldrb	r3, [r3, #0]
 8011c94:	183a      	adds	r2, r7, r0
 8011c96:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011c98:	1cfb      	adds	r3, r7, #3
 8011c9a:	781b      	ldrb	r3, [r3, #0]
 8011c9c:	1cfa      	adds	r2, r7, #3
 8011c9e:	1c59      	adds	r1, r3, #1
 8011ca0:	7011      	strb	r1, [r2, #0]
 8011ca2:	001a      	movs	r2, r3
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	189b      	adds	r3, r3, r2
 8011ca8:	781b      	ldrb	r3, [r3, #0]
 8011caa:	021b      	lsls	r3, r3, #8
 8011cac:	183a      	adds	r2, r7, r0
 8011cae:	6812      	ldr	r2, [r2, #0]
 8011cb0:	4313      	orrs	r3, r2
 8011cb2:	183a      	adds	r2, r7, r0
 8011cb4:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011cb6:	1cfb      	adds	r3, r7, #3
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	1cfa      	adds	r2, r7, #3
 8011cbc:	1c59      	adds	r1, r3, #1
 8011cbe:	7011      	strb	r1, [r2, #0]
 8011cc0:	001a      	movs	r2, r3
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	189b      	adds	r3, r3, r2
 8011cc6:	781b      	ldrb	r3, [r3, #0]
 8011cc8:	041b      	lsls	r3, r3, #16
 8011cca:	183a      	adds	r2, r7, r0
 8011ccc:	6812      	ldr	r2, [r2, #0]
 8011cce:	4313      	orrs	r3, r2
 8011cd0:	183a      	adds	r2, r7, r0
 8011cd2:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 8011cd4:	183b      	adds	r3, r7, r0
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	2264      	movs	r2, #100	; 0x64
 8011cda:	4353      	muls	r3, r2
 8011cdc:	183a      	adds	r2, r7, r0
 8011cde:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8011ce0:	183b      	adds	r3, r7, r0
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	0018      	movs	r0, r3
 8011ce6:	f003 fa11 	bl	801510c <LoRaMacClassBBeaconFreqReq>
 8011cea:	1e03      	subs	r3, r0, #0
 8011cec:	d004      	beq.n	8011cf8 <ProcessMacCommands+0xb20>
                    {
                        macCmdPayload[0] = 1;
 8011cee:	2368      	movs	r3, #104	; 0x68
 8011cf0:	18fb      	adds	r3, r7, r3
 8011cf2:	2201      	movs	r2, #1
 8011cf4:	701a      	strb	r2, [r3, #0]
 8011cf6:	e003      	b.n	8011d00 <ProcessMacCommands+0xb28>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8011cf8:	2368      	movs	r3, #104	; 0x68
 8011cfa:	18fb      	adds	r3, r7, r3
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8011d00:	2368      	movs	r3, #104	; 0x68
 8011d02:	18fb      	adds	r3, r7, r3
 8011d04:	2201      	movs	r2, #1
 8011d06:	0019      	movs	r1, r3
 8011d08:	2013      	movs	r0, #19
 8011d0a:	f003 fb7f 	bl	801540c <LoRaMacCommandsAddCmd>
 8011d0e:	2287      	movs	r2, #135	; 0x87
 8011d10:	18bb      	adds	r3, r7, r2
 8011d12:	18ba      	adds	r2, r7, r2
 8011d14:	7812      	ldrb	r2, [r2, #0]
 8011d16:	701a      	strb	r2, [r3, #0]
                }
                break;
 8011d18:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 8011d1a:	1cfa      	adds	r2, r7, #3
 8011d1c:	1cbb      	adds	r3, r7, #2
 8011d1e:	7812      	ldrb	r2, [r2, #0]
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	429a      	cmp	r2, r3
 8011d24:	d201      	bcs.n	8011d2a <ProcessMacCommands+0xb52>
 8011d26:	f7ff fa78 	bl	801121a <ProcessMacCommands+0x42>
 8011d2a:	e000      	b.n	8011d2e <ProcessMacCommands+0xb56>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8011d2c:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	b023      	add	sp, #140	; 0x8c
 8011d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d34:	12d53d80 	.word	0x12d53d80
 8011d38:	200008f0 	.word	0x200008f0
 8011d3c:	20001650 	.word	0x20001650

08011d40 <Send>:

LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8011d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d42:	b08f      	sub	sp, #60	; 0x3c
 8011d44:	af02      	add	r7, sp, #8
 8011d46:	60f8      	str	r0, [r7, #12]
 8011d48:	0008      	movs	r0, r1
 8011d4a:	607a      	str	r2, [r7, #4]
 8011d4c:	0019      	movs	r1, r3
 8011d4e:	230b      	movs	r3, #11
 8011d50:	18fb      	adds	r3, r7, r3
 8011d52:	1c02      	adds	r2, r0, #0
 8011d54:	701a      	strb	r2, [r3, #0]
 8011d56:	2308      	movs	r3, #8
 8011d58:	18fb      	adds	r3, r7, r3
 8011d5a:	1c0a      	adds	r2, r1, #0
 8011d5c:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d5e:	232f      	movs	r3, #47	; 0x2f
 8011d60:	18fb      	adds	r3, r7, r3
 8011d62:	2203      	movs	r2, #3
 8011d64:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011d66:	4b8f      	ldr	r3, [pc, #572]	; (8011fa4 <Send+0x264>)
 8011d68:	4a8f      	ldr	r2, [pc, #572]	; (8011fa8 <Send+0x268>)
 8011d6a:	589a      	ldr	r2, [r3, r2]
 8011d6c:	232e      	movs	r3, #46	; 0x2e
 8011d6e:	18fb      	adds	r3, r7, r3
 8011d70:	21f9      	movs	r1, #249	; 0xf9
 8011d72:	5c52      	ldrb	r2, [r2, r1]
 8011d74:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011d76:	4b8b      	ldr	r3, [pc, #556]	; (8011fa4 <Send+0x264>)
 8011d78:	4a8b      	ldr	r2, [pc, #556]	; (8011fa8 <Send+0x268>)
 8011d7a:	589a      	ldr	r2, [r3, r2]
 8011d7c:	232d      	movs	r3, #45	; 0x2d
 8011d7e:	18fb      	adds	r3, r7, r3
 8011d80:	21f8      	movs	r1, #248	; 0xf8
 8011d82:	5c52      	ldrb	r2, [r2, r1]
 8011d84:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8011d86:	4b87      	ldr	r3, [pc, #540]	; (8011fa4 <Send+0x264>)
 8011d88:	4a87      	ldr	r2, [pc, #540]	; (8011fa8 <Send+0x268>)
 8011d8a:	589b      	ldr	r3, [r3, r2]
 8011d8c:	22f4      	movs	r2, #244	; 0xf4
 8011d8e:	589b      	ldr	r3, [r3, r2]
 8011d90:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011d92:	4b84      	ldr	r3, [pc, #528]	; (8011fa4 <Send+0x264>)
 8011d94:	4a84      	ldr	r2, [pc, #528]	; (8011fa8 <Send+0x268>)
 8011d96:	589a      	ldr	r2, [r3, r2]
 8011d98:	23ea      	movs	r3, #234	; 0xea
 8011d9a:	005b      	lsls	r3, r3, #1
 8011d9c:	5cd3      	ldrb	r3, [r2, r3]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d101      	bne.n	8011da6 <Send+0x66>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8011da2:	2307      	movs	r3, #7
 8011da4:	e0f9      	b.n	8011f9a <Send+0x25a>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 8011da6:	4b7f      	ldr	r3, [pc, #508]	; (8011fa4 <Send+0x264>)
 8011da8:	4a7f      	ldr	r2, [pc, #508]	; (8011fa8 <Send+0x268>)
 8011daa:	589a      	ldr	r2, [r3, r2]
 8011dac:	239e      	movs	r3, #158	; 0x9e
 8011dae:	005b      	lsls	r3, r3, #1
 8011db0:	5cd3      	ldrb	r3, [r2, r3]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d106      	bne.n	8011dc4 <Send+0x84>
    {
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8011db6:	4b7b      	ldr	r3, [pc, #492]	; (8011fa4 <Send+0x264>)
 8011db8:	4a7b      	ldr	r2, [pc, #492]	; (8011fa8 <Send+0x268>)
 8011dba:	589a      	ldr	r2, [r3, r2]
 8011dbc:	23e4      	movs	r3, #228	; 0xe4
 8011dbe:	005b      	lsls	r3, r3, #1
 8011dc0:	2100      	movs	r1, #0
 8011dc2:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 8011dc4:	202c      	movs	r0, #44	; 0x2c
 8011dc6:	183b      	adds	r3, r7, r0
 8011dc8:	2200      	movs	r2, #0
 8011dca:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 8011dcc:	183b      	adds	r3, r7, r0
 8011dce:	781a      	ldrb	r2, [r3, #0]
 8011dd0:	210f      	movs	r1, #15
 8011dd2:	438a      	bics	r2, r1
 8011dd4:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8011dd6:	4b73      	ldr	r3, [pc, #460]	; (8011fa4 <Send+0x264>)
 8011dd8:	4a73      	ldr	r2, [pc, #460]	; (8011fa8 <Send+0x268>)
 8011dda:	589b      	ldr	r3, [r3, r2]
 8011ddc:	22f2      	movs	r2, #242	; 0xf2
 8011dde:	5c9a      	ldrb	r2, [r3, r2]
 8011de0:	183b      	adds	r3, r7, r0
 8011de2:	01d0      	lsls	r0, r2, #7
 8011de4:	781a      	ldrb	r2, [r3, #0]
 8011de6:	217f      	movs	r1, #127	; 0x7f
 8011de8:	400a      	ands	r2, r1
 8011dea:	1c11      	adds	r1, r2, #0
 8011dec:	1c02      	adds	r2, r0, #0
 8011dee:	430a      	orrs	r2, r1
 8011df0:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8011df2:	4b6c      	ldr	r3, [pc, #432]	; (8011fa4 <Send+0x264>)
 8011df4:	4a6c      	ldr	r2, [pc, #432]	; (8011fa8 <Send+0x268>)
 8011df6:	589b      	ldr	r3, [r3, r2]
 8011df8:	22f0      	movs	r2, #240	; 0xf0
 8011dfa:	5c9b      	ldrb	r3, [r3, r2]
 8011dfc:	2b01      	cmp	r3, #1
 8011dfe:	d106      	bne.n	8011e0e <Send+0xce>
    {
        fCtrl.Bits.FPending      = 1;
 8011e00:	232c      	movs	r3, #44	; 0x2c
 8011e02:	18fb      	adds	r3, r7, r3
 8011e04:	781a      	ldrb	r2, [r3, #0]
 8011e06:	2110      	movs	r1, #16
 8011e08:	430a      	orrs	r2, r1
 8011e0a:	701a      	strb	r2, [r3, #0]
 8011e0c:	e005      	b.n	8011e1a <Send+0xda>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8011e0e:	232c      	movs	r3, #44	; 0x2c
 8011e10:	18fb      	adds	r3, r7, r3
 8011e12:	781a      	ldrb	r2, [r3, #0]
 8011e14:	2110      	movs	r1, #16
 8011e16:	438a      	bics	r2, r1
 8011e18:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 8011e1a:	4b62      	ldr	r3, [pc, #392]	; (8011fa4 <Send+0x264>)
 8011e1c:	4a62      	ldr	r2, [pc, #392]	; (8011fa8 <Send+0x268>)
 8011e1e:	589a      	ldr	r2, [r3, r2]
 8011e20:	23e0      	movs	r3, #224	; 0xe0
 8011e22:	005b      	lsls	r3, r3, #1
 8011e24:	5cd3      	ldrb	r3, [r2, r3]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d005      	beq.n	8011e36 <Send+0xf6>
    {
        fCtrl.Bits.Ack = 1;
 8011e2a:	232c      	movs	r3, #44	; 0x2c
 8011e2c:	18fb      	adds	r3, r7, r3
 8011e2e:	781a      	ldrb	r2, [r3, #0]
 8011e30:	2120      	movs	r1, #32
 8011e32:	430a      	orrs	r2, r1
 8011e34:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8011e36:	4b5b      	ldr	r3, [pc, #364]	; (8011fa4 <Send+0x264>)
 8011e38:	4a5b      	ldr	r2, [pc, #364]	; (8011fa8 <Send+0x268>)
 8011e3a:	5899      	ldr	r1, [r3, r2]
 8011e3c:	2014      	movs	r0, #20
 8011e3e:	183b      	adds	r3, r7, r0
 8011e40:	22e8      	movs	r2, #232	; 0xe8
 8011e42:	0052      	lsls	r2, r2, #1
 8011e44:	588a      	ldr	r2, [r1, r2]
 8011e46:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 8011e48:	0001      	movs	r1, r0
 8011e4a:	187b      	adds	r3, r7, r1
 8011e4c:	2201      	movs	r2, #1
 8011e4e:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8011e50:	242c      	movs	r4, #44	; 0x2c
 8011e52:	193b      	adds	r3, r7, r4
 8011e54:	781b      	ldrb	r3, [r3, #0]
 8011e56:	061b      	lsls	r3, r3, #24
 8011e58:	0fdb      	lsrs	r3, r3, #31
 8011e5a:	b2db      	uxtb	r3, r3
 8011e5c:	1e5a      	subs	r2, r3, #1
 8011e5e:	4193      	sbcs	r3, r2
 8011e60:	b2da      	uxtb	r2, r3
 8011e62:	187b      	adds	r3, r7, r1
 8011e64:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8011e66:	4b4f      	ldr	r3, [pc, #316]	; (8011fa4 <Send+0x264>)
 8011e68:	4a4f      	ldr	r2, [pc, #316]	; (8011fa8 <Send+0x268>)
 8011e6a:	589b      	ldr	r3, [r3, r2]
 8011e6c:	22f4      	movs	r2, #244	; 0xf4
 8011e6e:	589a      	ldr	r2, [r3, r2]
 8011e70:	0008      	movs	r0, r1
 8011e72:	183b      	adds	r3, r7, r0
 8011e74:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011e76:	4a4b      	ldr	r2, [pc, #300]	; (8011fa4 <Send+0x264>)
 8011e78:	23fd      	movs	r3, #253	; 0xfd
 8011e7a:	009b      	lsls	r3, r3, #2
 8011e7c:	5ad2      	ldrh	r2, [r2, r3]
 8011e7e:	183b      	adds	r3, r7, r0
 8011e80:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8011e82:	4b48      	ldr	r3, [pc, #288]	; (8011fa4 <Send+0x264>)
 8011e84:	4a49      	ldr	r2, [pc, #292]	; (8011fac <Send+0x26c>)
 8011e86:	5a9a      	ldrh	r2, [r3, r2]
 8011e88:	183b      	adds	r3, r7, r0
 8011e8a:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011e8c:	4b45      	ldr	r3, [pc, #276]	; (8011fa4 <Send+0x264>)
 8011e8e:	4a46      	ldr	r2, [pc, #280]	; (8011fa8 <Send+0x268>)
 8011e90:	589b      	ldr	r3, [r3, r2]
 8011e92:	22f9      	movs	r2, #249	; 0xf9
 8011e94:	569a      	ldrsb	r2, [r3, r2]
 8011e96:	183b      	adds	r3, r7, r0
 8011e98:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011e9a:	4b42      	ldr	r3, [pc, #264]	; (8011fa4 <Send+0x264>)
 8011e9c:	4a42      	ldr	r2, [pc, #264]	; (8011fa8 <Send+0x268>)
 8011e9e:	589b      	ldr	r3, [r3, r2]
 8011ea0:	22f8      	movs	r2, #248	; 0xf8
 8011ea2:	569a      	ldrsb	r2, [r3, r2]
 8011ea4:	183b      	adds	r3, r7, r0
 8011ea6:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011ea8:	4b3e      	ldr	r3, [pc, #248]	; (8011fa4 <Send+0x264>)
 8011eaa:	4a3f      	ldr	r2, [pc, #252]	; (8011fa8 <Send+0x268>)
 8011eac:	589a      	ldr	r2, [r3, r2]
 8011eae:	2396      	movs	r3, #150	; 0x96
 8011eb0:	005b      	lsls	r3, r3, #1
 8011eb2:	5cd2      	ldrb	r2, [r2, r3]
 8011eb4:	183b      	adds	r3, r7, r0
 8011eb6:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8011eb8:	4b3a      	ldr	r3, [pc, #232]	; (8011fa4 <Send+0x264>)
 8011eba:	4a3b      	ldr	r2, [pc, #236]	; (8011fa8 <Send+0x268>)
 8011ebc:	589b      	ldr	r3, [r3, r2]
 8011ebe:	781a      	ldrb	r2, [r3, #0]
 8011ec0:	183b      	adds	r3, r7, r0
 8011ec2:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8011ec4:	4b37      	ldr	r3, [pc, #220]	; (8011fa4 <Send+0x264>)
 8011ec6:	4a38      	ldr	r2, [pc, #224]	; (8011fa8 <Send+0x268>)
 8011ec8:	589b      	ldr	r3, [r3, r2]
 8011eca:	33f9      	adds	r3, #249	; 0xf9
 8011ecc:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 8011ece:	4b35      	ldr	r3, [pc, #212]	; (8011fa4 <Send+0x264>)
 8011ed0:	4a35      	ldr	r2, [pc, #212]	; (8011fa8 <Send+0x268>)
 8011ed2:	589b      	ldr	r3, [r3, r2]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8011ed4:	33f8      	adds	r3, #248	; 0xf8
 8011ed6:	001a      	movs	r2, r3
 8011ed8:	2328      	movs	r3, #40	; 0x28
 8011eda:	18fb      	adds	r3, r7, r3
 8011edc:	1838      	adds	r0, r7, r0
 8011ede:	f003 f829 	bl	8014f34 <LoRaMacAdrCalcNext>
 8011ee2:	0003      	movs	r3, r0
 8011ee4:	0019      	movs	r1, r3
 8011ee6:	0026      	movs	r6, r4
 8011ee8:	193b      	adds	r3, r7, r4
 8011eea:	2201      	movs	r2, #1
 8011eec:	400a      	ands	r2, r1
 8011eee:	0190      	lsls	r0, r2, #6
 8011ef0:	781a      	ldrb	r2, [r3, #0]
 8011ef2:	2140      	movs	r1, #64	; 0x40
 8011ef4:	438a      	bics	r2, r1
 8011ef6:	1c11      	adds	r1, r2, #0
 8011ef8:	1c02      	adds	r2, r0, #0
 8011efa:	430a      	orrs	r2, r1
 8011efc:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8011efe:	232f      	movs	r3, #47	; 0x2f
 8011f00:	18fc      	adds	r4, r7, r3
 8011f02:	687d      	ldr	r5, [r7, #4]
 8011f04:	220b      	movs	r2, #11
 8011f06:	18bb      	adds	r3, r7, r2
 8011f08:	781a      	ldrb	r2, [r3, #0]
 8011f0a:	19b9      	adds	r1, r7, r6
 8011f0c:	68f8      	ldr	r0, [r7, #12]
 8011f0e:	2608      	movs	r6, #8
 8011f10:	19bb      	adds	r3, r7, r6
 8011f12:	881b      	ldrh	r3, [r3, #0]
 8011f14:	9300      	str	r3, [sp, #0]
 8011f16:	002b      	movs	r3, r5
 8011f18:	f000 fc86 	bl	8012828 <PrepareFrame>
 8011f1c:	0003      	movs	r3, r0
 8011f1e:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011f20:	232f      	movs	r3, #47	; 0x2f
 8011f22:	18fb      	adds	r3, r7, r3
 8011f24:	781b      	ldrb	r3, [r3, #0]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d004      	beq.n	8011f34 <Send+0x1f4>
 8011f2a:	232f      	movs	r3, #47	; 0x2f
 8011f2c:	18fb      	adds	r3, r7, r3
 8011f2e:	781b      	ldrb	r3, [r3, #0]
 8011f30:	2b0a      	cmp	r3, #10
 8011f32:	d106      	bne.n	8011f42 <Send+0x202>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( false );
 8011f34:	232f      	movs	r3, #47	; 0x2f
 8011f36:	18fc      	adds	r4, r7, r3
 8011f38:	2000      	movs	r0, #0
 8011f3a:	f000 f89f 	bl	801207c <ScheduleTx>
 8011f3e:	0003      	movs	r3, r0
 8011f40:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011f42:	232f      	movs	r3, #47	; 0x2f
 8011f44:	18fb      	adds	r3, r7, r3
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d010      	beq.n	8011f6e <Send+0x22e>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8011f4c:	4b15      	ldr	r3, [pc, #84]	; (8011fa4 <Send+0x264>)
 8011f4e:	4a16      	ldr	r2, [pc, #88]	; (8011fa8 <Send+0x268>)
 8011f50:	589b      	ldr	r3, [r3, r2]
 8011f52:	222e      	movs	r2, #46	; 0x2e
 8011f54:	18ba      	adds	r2, r7, r2
 8011f56:	21f9      	movs	r1, #249	; 0xf9
 8011f58:	7812      	ldrb	r2, [r2, #0]
 8011f5a:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 8011f5c:	4b11      	ldr	r3, [pc, #68]	; (8011fa4 <Send+0x264>)
 8011f5e:	4a12      	ldr	r2, [pc, #72]	; (8011fa8 <Send+0x268>)
 8011f60:	589b      	ldr	r3, [r3, r2]
 8011f62:	222d      	movs	r2, #45	; 0x2d
 8011f64:	18ba      	adds	r2, r7, r2
 8011f66:	21f8      	movs	r1, #248	; 0xf8
 8011f68:	7812      	ldrb	r2, [r2, #0]
 8011f6a:	545a      	strb	r2, [r3, r1]
 8011f6c:	e012      	b.n	8011f94 <Send+0x254>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 8011f6e:	4b0d      	ldr	r3, [pc, #52]	; (8011fa4 <Send+0x264>)
 8011f70:	4a0d      	ldr	r2, [pc, #52]	; (8011fa8 <Send+0x268>)
 8011f72:	589a      	ldr	r2, [r3, r2]
 8011f74:	23e0      	movs	r3, #224	; 0xe0
 8011f76:	005b      	lsls	r3, r3, #1
 8011f78:	2100      	movs	r1, #0
 8011f7a:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8011f7c:	4b09      	ldr	r3, [pc, #36]	; (8011fa4 <Send+0x264>)
 8011f7e:	4a0a      	ldr	r2, [pc, #40]	; (8011fa8 <Send+0x268>)
 8011f80:	589b      	ldr	r3, [r3, r2]
 8011f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f84:	21f4      	movs	r1, #244	; 0xf4
 8011f86:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8011f88:	f003 faca 	bl	8015520 <LoRaMacCommandsRemoveNoneStickyCmds>
 8011f8c:	1e03      	subs	r3, r0, #0
 8011f8e:	d001      	beq.n	8011f94 <Send+0x254>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011f90:	2313      	movs	r3, #19
 8011f92:	e002      	b.n	8011f9a <Send+0x25a>
        }
    }
    return status;
 8011f94:	232f      	movs	r3, #47	; 0x2f
 8011f96:	18fb      	adds	r3, r7, r3
 8011f98:	781b      	ldrb	r3, [r3, #0]
}
 8011f9a:	0018      	movs	r0, r3
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	b00d      	add	sp, #52	; 0x34
 8011fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fa2:	46c0      	nop			; (mov r8, r8)
 8011fa4:	200008f0 	.word	0x200008f0
 8011fa8:	00000484 	.word	0x00000484
 8011fac:	000003f6 	.word	0x000003f6

08011fb0 <SendReJoinReq>:

LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8011fb0:	b5b0      	push	{r4, r5, r7, lr}
 8011fb2:	b084      	sub	sp, #16
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	0002      	movs	r2, r0
 8011fb8:	1dfb      	adds	r3, r7, #7
 8011fba:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011fbc:	230e      	movs	r3, #14
 8011fbe:	18fb      	adds	r3, r7, r3
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8011fc4:	230c      	movs	r3, #12
 8011fc6:	18fb      	adds	r3, r7, r3
 8011fc8:	2200      	movs	r2, #0
 8011fca:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 8011fcc:	230f      	movs	r3, #15
 8011fce:	18fb      	adds	r3, r7, r3
 8011fd0:	2201      	movs	r2, #1
 8011fd2:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 8011fd4:	1dfb      	adds	r3, r7, #7
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	2bff      	cmp	r3, #255	; 0xff
 8011fda:	d132      	bne.n	8012042 <SendReJoinReq+0x92>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8011fdc:	2000      	movs	r0, #0
 8011fde:	f7fe ff27 	bl	8010e30 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8011fe2:	4a22      	ldr	r2, [pc, #136]	; (801206c <SendReJoinReq+0xbc>)
 8011fe4:	2382      	movs	r3, #130	; 0x82
 8011fe6:	005b      	lsls	r3, r3, #1
 8011fe8:	2100      	movs	r1, #0
 8011fea:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8011fec:	4a1f      	ldr	r2, [pc, #124]	; (801206c <SendReJoinReq+0xbc>)
 8011fee:	2384      	movs	r3, #132	; 0x84
 8011ff0:	005b      	lsls	r3, r3, #1
 8011ff2:	491f      	ldr	r1, [pc, #124]	; (8012070 <SendReJoinReq+0xc0>)
 8011ff4:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011ff6:	4a1d      	ldr	r2, [pc, #116]	; (801206c <SendReJoinReq+0xbc>)
 8011ff8:	2386      	movs	r3, #134	; 0x86
 8011ffa:	005b      	lsls	r3, r3, #1
 8011ffc:	21ff      	movs	r1, #255	; 0xff
 8011ffe:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8012000:	200c      	movs	r0, #12
 8012002:	183b      	adds	r3, r7, r0
 8012004:	781a      	ldrb	r2, [r3, #0]
 8012006:	211f      	movs	r1, #31
 8012008:	400a      	ands	r2, r1
 801200a:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 801200c:	183b      	adds	r3, r7, r0
 801200e:	7819      	ldrb	r1, [r3, #0]
 8012010:	4a16      	ldr	r2, [pc, #88]	; (801206c <SendReJoinReq+0xbc>)
 8012012:	230e      	movs	r3, #14
 8012014:	33ff      	adds	r3, #255	; 0xff
 8012016:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8012018:	f7fd fa80 	bl	800f51c <SecureElementGetJoinEui>
 801201c:	0001      	movs	r1, r0
 801201e:	4b15      	ldr	r3, [pc, #84]	; (8012074 <SendReJoinReq+0xc4>)
 8012020:	2208      	movs	r2, #8
 8012022:	0018      	movs	r0, r3
 8012024:	f009 fb04 	bl	801b630 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8012028:	f7fd fa54 	bl	800f4d4 <SecureElementGetDevEui>
 801202c:	0001      	movs	r1, r0
 801202e:	4b12      	ldr	r3, [pc, #72]	; (8012078 <SendReJoinReq+0xc8>)
 8012030:	2208      	movs	r2, #8
 8012032:	0018      	movs	r0, r3
 8012034:	f009 fafc 	bl	801b630 <memcpy1>

            allowDelayedTx = false;
 8012038:	230f      	movs	r3, #15
 801203a:	18fb      	adds	r3, r7, r3
 801203c:	2200      	movs	r2, #0
 801203e:	701a      	strb	r2, [r3, #0]

            break;
 8012040:	e004      	b.n	801204c <SendReJoinReq+0x9c>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012042:	230e      	movs	r3, #14
 8012044:	18fb      	adds	r3, r7, r3
 8012046:	2202      	movs	r2, #2
 8012048:	701a      	strb	r2, [r3, #0]
            break;
 801204a:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 801204c:	250e      	movs	r5, #14
 801204e:	197c      	adds	r4, r7, r5
 8012050:	230f      	movs	r3, #15
 8012052:	18fb      	adds	r3, r7, r3
 8012054:	781b      	ldrb	r3, [r3, #0]
 8012056:	0018      	movs	r0, r3
 8012058:	f000 f810 	bl	801207c <ScheduleTx>
 801205c:	0003      	movs	r3, r0
 801205e:	7023      	strb	r3, [r4, #0]
    return status;
 8012060:	197b      	adds	r3, r7, r5
 8012062:	781b      	ldrb	r3, [r3, #0]
}
 8012064:	0018      	movs	r0, r3
 8012066:	46bd      	mov	sp, r7
 8012068:	b004      	add	sp, #16
 801206a:	bdb0      	pop	{r4, r5, r7, pc}
 801206c:	200008f0 	.word	0x200008f0
 8012070:	200008f2 	.word	0x200008f2
 8012074:	200009fe 	.word	0x200009fe
 8012078:	20000a06 	.word	0x20000a06

0801207c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 801207c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801207e:	b08b      	sub	sp, #44	; 0x2c
 8012080:	af02      	add	r7, sp, #8
 8012082:	0002      	movs	r2, r0
 8012084:	1dfb      	adds	r3, r7, #7
 8012086:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012088:	231f      	movs	r3, #31
 801208a:	18fb      	adds	r3, r7, r3
 801208c:	2203      	movs	r2, #3
 801208e:	701a      	strb	r2, [r3, #0]
    TimerTime_t dutyCycleTimeOff = 0;
 8012090:	2300      	movs	r3, #0
 8012092:	61bb      	str	r3, [r7, #24]
    NextChanParams_t nextChan;
    size_t macCmdsSize = 0;
 8012094:	2300      	movs	r3, #0
 8012096:	60bb      	str	r3, [r7, #8]

    // Update back-off
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8012098:	4ba7      	ldr	r3, [pc, #668]	; (8012338 <ScheduleTx+0x2bc>)
 801209a:	4aa8      	ldr	r2, [pc, #672]	; (801233c <ScheduleTx+0x2c0>)
 801209c:	589a      	ldr	r2, [r3, r2]
 801209e:	239f      	movs	r3, #159	; 0x9f
 80120a0:	005b      	lsls	r3, r3, #1
 80120a2:	5cd3      	ldrb	r3, [r2, r3]
 80120a4:	0018      	movs	r0, r3
 80120a6:	f000 f9c5 	bl	8012434 <CalculateBackOff>

    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 80120aa:	4ba3      	ldr	r3, [pc, #652]	; (8012338 <ScheduleTx+0x2bc>)
 80120ac:	4aa3      	ldr	r2, [pc, #652]	; (801233c <ScheduleTx+0x2c0>)
 80120ae:	589a      	ldr	r2, [r3, r2]
 80120b0:	23e4      	movs	r3, #228	; 0xe4
 80120b2:	005b      	lsls	r3, r3, #1
 80120b4:	58d2      	ldr	r2, [r2, r3]
 80120b6:	210c      	movs	r1, #12
 80120b8:	187b      	adds	r3, r7, r1
 80120ba:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80120bc:	4b9e      	ldr	r3, [pc, #632]	; (8012338 <ScheduleTx+0x2bc>)
 80120be:	4a9f      	ldr	r2, [pc, #636]	; (801233c <ScheduleTx+0x2c0>)
 80120c0:	589b      	ldr	r3, [r3, r2]
 80120c2:	22f9      	movs	r2, #249	; 0xf9
 80120c4:	569a      	ldrsb	r2, [r3, r2]
 80120c6:	187b      	adds	r3, r7, r1
 80120c8:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 80120ca:	4b9b      	ldr	r3, [pc, #620]	; (8012338 <ScheduleTx+0x2bc>)
 80120cc:	4a9b      	ldr	r2, [pc, #620]	; (801233c <ScheduleTx+0x2c0>)
 80120ce:	589a      	ldr	r2, [r3, r2]
 80120d0:	233e      	movs	r3, #62	; 0x3e
 80120d2:	33ff      	adds	r3, #255	; 0xff
 80120d4:	5cd2      	ldrb	r2, [r2, r3]
 80120d6:	187b      	adds	r3, r7, r1
 80120d8:	729a      	strb	r2, [r3, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80120da:	4b97      	ldr	r3, [pc, #604]	; (8012338 <ScheduleTx+0x2bc>)
 80120dc:	4a97      	ldr	r2, [pc, #604]	; (801233c <ScheduleTx+0x2c0>)
 80120de:	589a      	ldr	r2, [r3, r2]
 80120e0:	23ea      	movs	r3, #234	; 0xea
 80120e2:	005b      	lsls	r3, r3, #1
 80120e4:	5cd3      	ldrb	r3, [r2, r3]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d104      	bne.n	80120f4 <ScheduleTx+0x78>
    {
        nextChan.Joined = false;
 80120ea:	230c      	movs	r3, #12
 80120ec:	18fb      	adds	r3, r7, r3
 80120ee:	2200      	movs	r2, #0
 80120f0:	725a      	strb	r2, [r3, #9]
 80120f2:	e003      	b.n	80120fc <ScheduleTx+0x80>
    }
    else
    {
        nextChan.Joined = true;
 80120f4:	230c      	movs	r3, #12
 80120f6:	18fb      	adds	r3, r7, r3
 80120f8:	2201      	movs	r2, #1
 80120fa:	725a      	strb	r2, [r3, #9]
    }
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 80120fc:	4b8e      	ldr	r3, [pc, #568]	; (8012338 <ScheduleTx+0x2bc>)
 80120fe:	4a8f      	ldr	r2, [pc, #572]	; (801233c <ScheduleTx+0x2c0>)
 8012100:	589a      	ldr	r2, [r3, r2]
 8012102:	23e2      	movs	r3, #226	; 0xe2
 8012104:	005b      	lsls	r3, r3, #1
 8012106:	58d2      	ldr	r2, [r2, r3]
 8012108:	210c      	movs	r1, #12
 801210a:	187b      	adds	r3, r7, r1
 801210c:	605a      	str	r2, [r3, #4]

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 801210e:	4b8a      	ldr	r3, [pc, #552]	; (8012338 <ScheduleTx+0x2bc>)
 8012110:	4a8a      	ldr	r2, [pc, #552]	; (801233c <ScheduleTx+0x2c0>)
 8012112:	589b      	ldr	r3, [r3, r2]
 8012114:	7818      	ldrb	r0, [r3, #0]
 8012116:	4b88      	ldr	r3, [pc, #544]	; (8012338 <ScheduleTx+0x2bc>)
 8012118:	4a88      	ldr	r2, [pc, #544]	; (801233c <ScheduleTx+0x2c0>)
 801211a:	589b      	ldr	r3, [r3, r2]
 801211c:	33c9      	adds	r3, #201	; 0xc9
 801211e:	33ff      	adds	r3, #255	; 0xff
 8012120:	261f      	movs	r6, #31
 8012122:	19bc      	adds	r4, r7, r6
 8012124:	2218      	movs	r2, #24
 8012126:	18bd      	adds	r5, r7, r2
 8012128:	4a85      	ldr	r2, [pc, #532]	; (8012340 <ScheduleTx+0x2c4>)
 801212a:	1879      	adds	r1, r7, r1
 801212c:	9300      	str	r3, [sp, #0]
 801212e:	002b      	movs	r3, r5
 8012130:	f005 fbb6 	bl	80178a0 <RegionNextChannel>
 8012134:	0003      	movs	r3, r0
 8012136:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 8012138:	19bb      	adds	r3, r7, r6
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d026      	beq.n	801218e <ScheduleTx+0x112>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8012140:	231f      	movs	r3, #31
 8012142:	18fb      	adds	r3, r7, r3
 8012144:	781b      	ldrb	r3, [r3, #0]
 8012146:	2b0b      	cmp	r3, #11
 8012148:	d11d      	bne.n	8012186 <ScheduleTx+0x10a>
 801214a:	1dfb      	adds	r3, r7, #7
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d019      	beq.n	8012186 <ScheduleTx+0x10a>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( dutyCycleTimeOff != 0 )
 8012152:	69bb      	ldr	r3, [r7, #24]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d014      	beq.n	8012182 <ScheduleTx+0x106>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8012158:	4a77      	ldr	r2, [pc, #476]	; (8012338 <ScheduleTx+0x2bc>)
 801215a:	23d0      	movs	r3, #208	; 0xd0
 801215c:	009b      	lsls	r3, r3, #2
 801215e:	58d3      	ldr	r3, [r2, r3]
 8012160:	2220      	movs	r2, #32
 8012162:	431a      	orrs	r2, r3
 8012164:	0011      	movs	r1, r2
 8012166:	4a74      	ldr	r2, [pc, #464]	; (8012338 <ScheduleTx+0x2bc>)
 8012168:	23d0      	movs	r3, #208	; 0xd0
 801216a:	009b      	lsls	r3, r3, #2
 801216c:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 801216e:	69ba      	ldr	r2, [r7, #24]
 8012170:	4b74      	ldr	r3, [pc, #464]	; (8012344 <ScheduleTx+0x2c8>)
 8012172:	0011      	movs	r1, r2
 8012174:	0018      	movs	r0, r3
 8012176:	f009 f85d 	bl	801b234 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 801217a:	4b72      	ldr	r3, [pc, #456]	; (8012344 <ScheduleTx+0x2c8>)
 801217c:	0018      	movs	r0, r3
 801217e:	f008 ff07 	bl	801af90 <TimerStart>
            }
            return LORAMAC_STATUS_OK;
 8012182:	2300      	movs	r3, #0
 8012184:	e0d3      	b.n	801232e <ScheduleTx+0x2b2>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8012186:	231f      	movs	r3, #31
 8012188:	18fb      	adds	r3, r7, r3
 801218a:	781b      	ldrb	r3, [r3, #0]
 801218c:	e0cf      	b.n	801232e <ScheduleTx+0x2b2>
        }
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801218e:	4b6a      	ldr	r3, [pc, #424]	; (8012338 <ScheduleTx+0x2bc>)
 8012190:	4a6a      	ldr	r2, [pc, #424]	; (801233c <ScheduleTx+0x2c0>)
 8012192:	589b      	ldr	r3, [r3, r2]
 8012194:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8012196:	4b68      	ldr	r3, [pc, #416]	; (8012338 <ScheduleTx+0x2bc>)
 8012198:	4a68      	ldr	r2, [pc, #416]	; (801233c <ScheduleTx+0x2c0>)
 801219a:	589b      	ldr	r3, [r3, r2]
 801219c:	7818      	ldrb	r0, [r3, #0]
 801219e:	4b66      	ldr	r3, [pc, #408]	; (8012338 <ScheduleTx+0x2bc>)
 80121a0:	4a66      	ldr	r2, [pc, #408]	; (801233c <ScheduleTx+0x2c0>)
 80121a2:	589a      	ldr	r2, [r3, r2]
 80121a4:	232e      	movs	r3, #46	; 0x2e
 80121a6:	33ff      	adds	r3, #255	; 0xff
 80121a8:	5cd1      	ldrb	r1, [r2, r3]
 80121aa:	4b63      	ldr	r3, [pc, #396]	; (8012338 <ScheduleTx+0x2bc>)
 80121ac:	4a63      	ldr	r2, [pc, #396]	; (801233c <ScheduleTx+0x2c0>)
 80121ae:	589b      	ldr	r3, [r3, r2]
 80121b0:	22f9      	movs	r2, #249	; 0xf9
 80121b2:	569d      	ldrsb	r5, [r3, r2]
 80121b4:	4b60      	ldr	r3, [pc, #384]	; (8012338 <ScheduleTx+0x2bc>)
 80121b6:	4a61      	ldr	r2, [pc, #388]	; (801233c <ScheduleTx+0x2c0>)
 80121b8:	589a      	ldr	r2, [r3, r2]
 80121ba:	231a      	movs	r3, #26
 80121bc:	33ff      	adds	r3, #255	; 0xff
 80121be:	5cd3      	ldrb	r3, [r2, r3]
 80121c0:	b25b      	sxtb	r3, r3
 80121c2:	002a      	movs	r2, r5
 80121c4:	f005 fb9c 	bl	8017900 <RegionApplyDrOffset>
 80121c8:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80121ca:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 80121cc:	4b5a      	ldr	r3, [pc, #360]	; (8012338 <ScheduleTx+0x2bc>)
 80121ce:	4a5b      	ldr	r2, [pc, #364]	; (801233c <ScheduleTx+0x2c0>)
 80121d0:	589a      	ldr	r2, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80121d2:	2380      	movs	r3, #128	; 0x80
 80121d4:	005b      	lsls	r3, r3, #1
 80121d6:	5cd0      	ldrb	r0, [r2, r3]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 80121d8:	4b57      	ldr	r3, [pc, #348]	; (8012338 <ScheduleTx+0x2bc>)
 80121da:	4a58      	ldr	r2, [pc, #352]	; (801233c <ScheduleTx+0x2c0>)
 80121dc:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80121de:	22fc      	movs	r2, #252	; 0xfc
 80121e0:	589a      	ldr	r2, [r3, r2]
 80121e2:	4b59      	ldr	r3, [pc, #356]	; (8012348 <ScheduleTx+0x2cc>)
 80121e4:	9300      	str	r3, [sp, #0]
 80121e6:	0013      	movs	r3, r2
 80121e8:	0002      	movs	r2, r0
 80121ea:	0020      	movs	r0, r4
 80121ec:	f005 fa51 	bl	8017692 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80121f0:	4b51      	ldr	r3, [pc, #324]	; (8012338 <ScheduleTx+0x2bc>)
 80121f2:	4a52      	ldr	r2, [pc, #328]	; (801233c <ScheduleTx+0x2c0>)
 80121f4:	589b      	ldr	r3, [r3, r2]
 80121f6:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 80121f8:	4b4f      	ldr	r3, [pc, #316]	; (8012338 <ScheduleTx+0x2bc>)
 80121fa:	4a50      	ldr	r2, [pc, #320]	; (801233c <ScheduleTx+0x2c0>)
 80121fc:	589a      	ldr	r2, [r3, r2]
 80121fe:	2390      	movs	r3, #144	; 0x90
 8012200:	005b      	lsls	r3, r3, #1
 8012202:	5cd3      	ldrb	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8012204:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8012206:	4b4c      	ldr	r3, [pc, #304]	; (8012338 <ScheduleTx+0x2bc>)
 8012208:	4a4c      	ldr	r2, [pc, #304]	; (801233c <ScheduleTx+0x2c0>)
 801220a:	589a      	ldr	r2, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801220c:	2380      	movs	r3, #128	; 0x80
 801220e:	005b      	lsls	r3, r3, #1
 8012210:	5cd4      	ldrb	r4, [r2, r3]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8012212:	4b49      	ldr	r3, [pc, #292]	; (8012338 <ScheduleTx+0x2bc>)
 8012214:	4a49      	ldr	r2, [pc, #292]	; (801233c <ScheduleTx+0x2c0>)
 8012216:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8012218:	22fc      	movs	r2, #252	; 0xfc
 801221a:	589a      	ldr	r2, [r3, r2]
 801221c:	4b4b      	ldr	r3, [pc, #300]	; (801234c <ScheduleTx+0x2d0>)
 801221e:	9300      	str	r3, [sp, #0]
 8012220:	0013      	movs	r3, r2
 8012222:	0022      	movs	r2, r4
 8012224:	f005 fa35 	bl	8017692 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8012228:	4b43      	ldr	r3, [pc, #268]	; (8012338 <ScheduleTx+0x2bc>)
 801222a:	4a44      	ldr	r2, [pc, #272]	; (801233c <ScheduleTx+0x2c0>)
 801222c:	589a      	ldr	r2, [r3, r2]
 801222e:	23ea      	movs	r3, #234	; 0xea
 8012230:	005b      	lsls	r3, r3, #1
 8012232:	5cd3      	ldrb	r3, [r2, r3]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d11e      	bne.n	8012276 <ScheduleTx+0x1fa>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012238:	4b3f      	ldr	r3, [pc, #252]	; (8012338 <ScheduleTx+0x2bc>)
 801223a:	4a40      	ldr	r2, [pc, #256]	; (801233c <ScheduleTx+0x2c0>)
 801223c:	589a      	ldr	r2, [r3, r2]
 801223e:	2388      	movs	r3, #136	; 0x88
 8012240:	005b      	lsls	r3, r3, #1
 8012242:	58d3      	ldr	r3, [r2, r3]
 8012244:	493c      	ldr	r1, [pc, #240]	; (8012338 <ScheduleTx+0x2bc>)
 8012246:	22f1      	movs	r2, #241	; 0xf1
 8012248:	0092      	lsls	r2, r2, #2
 801224a:	588a      	ldr	r2, [r1, r2]
 801224c:	1899      	adds	r1, r3, r2
 801224e:	4a3a      	ldr	r2, [pc, #232]	; (8012338 <ScheduleTx+0x2bc>)
 8012250:	23ec      	movs	r3, #236	; 0xec
 8012252:	009b      	lsls	r3, r3, #2
 8012254:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012256:	4b38      	ldr	r3, [pc, #224]	; (8012338 <ScheduleTx+0x2bc>)
 8012258:	4a38      	ldr	r2, [pc, #224]	; (801233c <ScheduleTx+0x2c0>)
 801225a:	589a      	ldr	r2, [r3, r2]
 801225c:	238a      	movs	r3, #138	; 0x8a
 801225e:	005b      	lsls	r3, r3, #1
 8012260:	58d3      	ldr	r3, [r2, r3]
 8012262:	4935      	ldr	r1, [pc, #212]	; (8012338 <ScheduleTx+0x2bc>)
 8012264:	22f6      	movs	r2, #246	; 0xf6
 8012266:	0092      	lsls	r2, r2, #2
 8012268:	588a      	ldr	r2, [r1, r2]
 801226a:	1899      	adds	r1, r3, r2
 801226c:	4a32      	ldr	r2, [pc, #200]	; (8012338 <ScheduleTx+0x2bc>)
 801226e:	23ed      	movs	r3, #237	; 0xed
 8012270:	009b      	lsls	r3, r3, #2
 8012272:	50d1      	str	r1, [r2, r3]
 8012274:	e03c      	b.n	80122f0 <ScheduleTx+0x274>
    }
    else
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012276:	2308      	movs	r3, #8
 8012278:	18fb      	adds	r3, r7, r3
 801227a:	0018      	movs	r0, r3
 801227c:	f003 f99c 	bl	80155b8 <LoRaMacCommandsGetSizeSerializedCmds>
 8012280:	1e03      	subs	r3, r0, #0
 8012282:	d001      	beq.n	8012288 <ScheduleTx+0x20c>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012284:	2313      	movs	r3, #19
 8012286:	e052      	b.n	801232e <ScheduleTx+0x2b2>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8012288:	4b2b      	ldr	r3, [pc, #172]	; (8012338 <ScheduleTx+0x2bc>)
 801228a:	4a31      	ldr	r2, [pc, #196]	; (8012350 <ScheduleTx+0x2d4>)
 801228c:	5c98      	ldrb	r0, [r3, r2]
 801228e:	4b2a      	ldr	r3, [pc, #168]	; (8012338 <ScheduleTx+0x2bc>)
 8012290:	4a2a      	ldr	r2, [pc, #168]	; (801233c <ScheduleTx+0x2c0>)
 8012292:	589b      	ldr	r3, [r3, r2]
 8012294:	22f9      	movs	r2, #249	; 0xf9
 8012296:	569b      	ldrsb	r3, [r3, r2]
 8012298:	68ba      	ldr	r2, [r7, #8]
 801229a:	b2d2      	uxtb	r2, r2
 801229c:	0019      	movs	r1, r3
 801229e:	f7fe ff4d 	bl	801113c <ValidatePayloadLength>
 80122a2:	0003      	movs	r3, r0
 80122a4:	001a      	movs	r2, r3
 80122a6:	2301      	movs	r3, #1
 80122a8:	4053      	eors	r3, r2
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d001      	beq.n	80122b4 <ScheduleTx+0x238>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80122b0:	2308      	movs	r3, #8
 80122b2:	e03c      	b.n	801232e <ScheduleTx+0x2b2>
        }
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80122b4:	4b20      	ldr	r3, [pc, #128]	; (8012338 <ScheduleTx+0x2bc>)
 80122b6:	4a21      	ldr	r2, [pc, #132]	; (801233c <ScheduleTx+0x2c0>)
 80122b8:	589a      	ldr	r2, [r3, r2]
 80122ba:	2384      	movs	r3, #132	; 0x84
 80122bc:	005b      	lsls	r3, r3, #1
 80122be:	58d3      	ldr	r3, [r2, r3]
 80122c0:	491d      	ldr	r1, [pc, #116]	; (8012338 <ScheduleTx+0x2bc>)
 80122c2:	22f1      	movs	r2, #241	; 0xf1
 80122c4:	0092      	lsls	r2, r2, #2
 80122c6:	588a      	ldr	r2, [r1, r2]
 80122c8:	1899      	adds	r1, r3, r2
 80122ca:	4a1b      	ldr	r2, [pc, #108]	; (8012338 <ScheduleTx+0x2bc>)
 80122cc:	23ec      	movs	r3, #236	; 0xec
 80122ce:	009b      	lsls	r3, r3, #2
 80122d0:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80122d2:	4b19      	ldr	r3, [pc, #100]	; (8012338 <ScheduleTx+0x2bc>)
 80122d4:	4a19      	ldr	r2, [pc, #100]	; (801233c <ScheduleTx+0x2c0>)
 80122d6:	589a      	ldr	r2, [r3, r2]
 80122d8:	2386      	movs	r3, #134	; 0x86
 80122da:	005b      	lsls	r3, r3, #1
 80122dc:	58d3      	ldr	r3, [r2, r3]
 80122de:	4916      	ldr	r1, [pc, #88]	; (8012338 <ScheduleTx+0x2bc>)
 80122e0:	22f6      	movs	r2, #246	; 0xf6
 80122e2:	0092      	lsls	r2, r2, #2
 80122e4:	588a      	ldr	r2, [r1, r2]
 80122e6:	1899      	adds	r1, r3, r2
 80122e8:	4a13      	ldr	r2, [pc, #76]	; (8012338 <ScheduleTx+0x2bc>)
 80122ea:	23ed      	movs	r3, #237	; 0xed
 80122ec:	009b      	lsls	r3, r3, #2
 80122ee:	50d1      	str	r1, [r2, r3]
    }

    // Secure frame
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 80122f0:	4b11      	ldr	r3, [pc, #68]	; (8012338 <ScheduleTx+0x2bc>)
 80122f2:	4a12      	ldr	r2, [pc, #72]	; (801233c <ScheduleTx+0x2c0>)
 80122f4:	589b      	ldr	r3, [r3, r2]
 80122f6:	22f9      	movs	r2, #249	; 0xf9
 80122f8:	569b      	ldrsb	r3, [r3, r2]
 80122fa:	b2d8      	uxtb	r0, r3
 80122fc:	4b0e      	ldr	r3, [pc, #56]	; (8012338 <ScheduleTx+0x2bc>)
 80122fe:	4a15      	ldr	r2, [pc, #84]	; (8012354 <ScheduleTx+0x2d8>)
 8012300:	5c9b      	ldrb	r3, [r3, r2]
 8012302:	251e      	movs	r5, #30
 8012304:	197c      	adds	r4, r7, r5
 8012306:	0019      	movs	r1, r3
 8012308:	f000 f826 	bl	8012358 <SecureFrame>
 801230c:	0003      	movs	r3, r0
 801230e:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_STATUS_OK )
 8012310:	197b      	adds	r3, r7, r5
 8012312:	781b      	ldrb	r3, [r3, #0]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d003      	beq.n	8012320 <ScheduleTx+0x2a4>
    {
        return retval;
 8012318:	231e      	movs	r3, #30
 801231a:	18fb      	adds	r3, r7, r3
 801231c:	781b      	ldrb	r3, [r3, #0]
 801231e:	e006      	b.n	801232e <ScheduleTx+0x2b2>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8012320:	4b05      	ldr	r3, [pc, #20]	; (8012338 <ScheduleTx+0x2bc>)
 8012322:	4a0c      	ldr	r2, [pc, #48]	; (8012354 <ScheduleTx+0x2d8>)
 8012324:	5c9b      	ldrb	r3, [r3, r2]
 8012326:	0018      	movs	r0, r3
 8012328:	f000 fbce 	bl	8012ac8 <SendFrameOnChannel>
 801232c:	0003      	movs	r3, r0
}
 801232e:	0018      	movs	r0, r3
 8012330:	46bd      	mov	sp, r7
 8012332:	b009      	add	sp, #36	; 0x24
 8012334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012336:	46c0      	nop			; (mov r8, r8)
 8012338:	200008f0 	.word	0x200008f0
 801233c:	00000484 	.word	0x00000484
 8012340:	20000d05 	.word	0x20000d05
 8012344:	20000c58 	.word	0x20000c58
 8012348:	20000ca8 	.word	0x20000ca8
 801234c:	20000cbc 	.word	0x20000cbc
 8012350:	00000237 	.word	0x00000237
 8012354:	00000415 	.word	0x00000415

08012358 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8012358:	b5f0      	push	{r4, r5, r6, r7, lr}
 801235a:	b085      	sub	sp, #20
 801235c:	af00      	add	r7, sp, #0
 801235e:	0002      	movs	r2, r0
 8012360:	1dfb      	adds	r3, r7, #7
 8012362:	701a      	strb	r2, [r3, #0]
 8012364:	1dbb      	adds	r3, r7, #6
 8012366:	1c0a      	adds	r2, r1, #0
 8012368:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 801236a:	230f      	movs	r3, #15
 801236c:	18fb      	adds	r3, r7, r3
 801236e:	2213      	movs	r2, #19
 8012370:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 8012372:	2300      	movs	r3, #0
 8012374:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8012376:	4a2c      	ldr	r2, [pc, #176]	; (8012428 <SecureFrame+0xd0>)
 8012378:	2382      	movs	r3, #130	; 0x82
 801237a:	005b      	lsls	r3, r3, #1
 801237c:	5cd3      	ldrb	r3, [r2, r3]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d002      	beq.n	8012388 <SecureFrame+0x30>
 8012382:	2b04      	cmp	r3, #4
 8012384:	d016      	beq.n	80123b4 <SecureFrame+0x5c>
 8012386:	e047      	b.n	8012418 <SecureFrame+0xc0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8012388:	250f      	movs	r5, #15
 801238a:	197c      	adds	r4, r7, r5
 801238c:	4b27      	ldr	r3, [pc, #156]	; (801242c <SecureFrame+0xd4>)
 801238e:	0018      	movs	r0, r3
 8012390:	f004 f8ea 	bl	8016568 <LoRaMacCryptoPrepareJoinRequest>
 8012394:	0003      	movs	r3, r0
 8012396:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012398:	197b      	adds	r3, r7, r5
 801239a:	781b      	ldrb	r3, [r3, #0]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d001      	beq.n	80123a4 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80123a0:	2311      	movs	r3, #17
 80123a2:	e03c      	b.n	801241e <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80123a4:	4a20      	ldr	r2, [pc, #128]	; (8012428 <SecureFrame+0xd0>)
 80123a6:	2386      	movs	r3, #134	; 0x86
 80123a8:	005b      	lsls	r3, r3, #1
 80123aa:	5cd3      	ldrb	r3, [r2, r3]
 80123ac:	b29a      	uxth	r2, r3
 80123ae:	4b1e      	ldr	r3, [pc, #120]	; (8012428 <SecureFrame+0xd0>)
 80123b0:	801a      	strh	r2, [r3, #0]
            break;
 80123b2:	e033      	b.n	801241c <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80123b4:	2308      	movs	r3, #8
 80123b6:	18fb      	adds	r3, r7, r3
 80123b8:	0018      	movs	r0, r3
 80123ba:	f003 ffcd 	bl	8016358 <LoRaMacCryptoGetFCntUp>
 80123be:	1e03      	subs	r3, r0, #0
 80123c0:	d001      	beq.n	80123c6 <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80123c2:	2312      	movs	r3, #18
 80123c4:	e02b      	b.n	801241e <SecureFrame+0xc6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80123c6:	4a18      	ldr	r2, [pc, #96]	; (8012428 <SecureFrame+0xd0>)
 80123c8:	2382      	movs	r3, #130	; 0x82
 80123ca:	00db      	lsls	r3, r3, #3
 80123cc:	5cd3      	ldrb	r3, [r2, r3]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d104      	bne.n	80123dc <SecureFrame+0x84>
 80123d2:	4b15      	ldr	r3, [pc, #84]	; (8012428 <SecureFrame+0xd0>)
 80123d4:	4a16      	ldr	r2, [pc, #88]	; (8012430 <SecureFrame+0xd8>)
 80123d6:	5c9b      	ldrb	r3, [r3, r2]
 80123d8:	2b01      	cmp	r3, #1
 80123da:	d902      	bls.n	80123e2 <SecureFrame+0x8a>
            {
                fCntUp -= 1;
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	3b01      	subs	r3, #1
 80123e0:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80123e2:	68b8      	ldr	r0, [r7, #8]
 80123e4:	260f      	movs	r6, #15
 80123e6:	19bc      	adds	r4, r7, r6
 80123e8:	4d10      	ldr	r5, [pc, #64]	; (801242c <SecureFrame+0xd4>)
 80123ea:	1dbb      	adds	r3, r7, #6
 80123ec:	781a      	ldrb	r2, [r3, #0]
 80123ee:	1dfb      	adds	r3, r7, #7
 80123f0:	7819      	ldrb	r1, [r3, #0]
 80123f2:	002b      	movs	r3, r5
 80123f4:	f004 fafe 	bl	80169f4 <LoRaMacCryptoSecureMessage>
 80123f8:	0003      	movs	r3, r0
 80123fa:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80123fc:	19bb      	adds	r3, r7, r6
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d001      	beq.n	8012408 <SecureFrame+0xb0>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012404:	2311      	movs	r3, #17
 8012406:	e00a      	b.n	801241e <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012408:	4a07      	ldr	r2, [pc, #28]	; (8012428 <SecureFrame+0xd0>)
 801240a:	2386      	movs	r3, #134	; 0x86
 801240c:	005b      	lsls	r3, r3, #1
 801240e:	5cd3      	ldrb	r3, [r2, r3]
 8012410:	b29a      	uxth	r2, r3
 8012412:	4b05      	ldr	r3, [pc, #20]	; (8012428 <SecureFrame+0xd0>)
 8012414:	801a      	strh	r2, [r3, #0]
            break;
 8012416:	e001      	b.n	801241c <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012418:	2303      	movs	r3, #3
 801241a:	e000      	b.n	801241e <SecureFrame+0xc6>
    }
    return LORAMAC_STATUS_OK;
 801241c:	2300      	movs	r3, #0
}
 801241e:	0018      	movs	r0, r3
 8012420:	46bd      	mov	sp, r7
 8012422:	b005      	add	sp, #20
 8012424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012426:	46c0      	nop			; (mov r8, r8)
 8012428:	200008f0 	.word	0x200008f0
 801242c:	200009f8 	.word	0x200009f8
 8012430:	00000412 	.word	0x00000412

08012434 <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
 8012434:	b590      	push	{r4, r7, lr}
 8012436:	b087      	sub	sp, #28
 8012438:	af00      	add	r7, sp, #0
 801243a:	0002      	movs	r2, r0
 801243c:	1dfb      	adds	r3, r7, #7
 801243e:	701a      	strb	r2, [r3, #0]
    CalcBackOffParams_t calcBackOff;

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8012440:	4b31      	ldr	r3, [pc, #196]	; (8012508 <CalculateBackOff+0xd4>)
 8012442:	4a32      	ldr	r2, [pc, #200]	; (801250c <CalculateBackOff+0xd8>)
 8012444:	589a      	ldr	r2, [r3, r2]
 8012446:	23ea      	movs	r3, #234	; 0xea
 8012448:	005b      	lsls	r3, r3, #1
 801244a:	5cd3      	ldrb	r3, [r2, r3]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d104      	bne.n	801245a <CalculateBackOff+0x26>
    {
        calcBackOff.Joined = false;
 8012450:	230c      	movs	r3, #12
 8012452:	18fb      	adds	r3, r7, r3
 8012454:	2200      	movs	r2, #0
 8012456:	701a      	strb	r2, [r3, #0]
 8012458:	e003      	b.n	8012462 <CalculateBackOff+0x2e>
    }
    else
    {
        calcBackOff.Joined = true;
 801245a:	230c      	movs	r3, #12
 801245c:	18fb      	adds	r3, r7, r3
 801245e:	2201      	movs	r2, #1
 8012460:	701a      	strb	r2, [r3, #0]
    }
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8012462:	4b29      	ldr	r3, [pc, #164]	; (8012508 <CalculateBackOff+0xd4>)
 8012464:	4a29      	ldr	r2, [pc, #164]	; (801250c <CalculateBackOff+0xd8>)
 8012466:	589a      	ldr	r2, [r3, r2]
 8012468:	233e      	movs	r3, #62	; 0x3e
 801246a:	33ff      	adds	r3, #255	; 0xff
 801246c:	5cd2      	ldrb	r2, [r2, r3]
 801246e:	240c      	movs	r4, #12
 8012470:	193b      	adds	r3, r7, r4
 8012472:	709a      	strb	r2, [r3, #2]
    calcBackOff.Channel = channel;
 8012474:	193b      	adds	r3, r7, r4
 8012476:	1dfa      	adds	r2, r7, #7
 8012478:	7812      	ldrb	r2, [r2, #0]
 801247a:	70da      	strb	r2, [r3, #3]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 801247c:	4b22      	ldr	r3, [pc, #136]	; (8012508 <CalculateBackOff+0xd4>)
 801247e:	4a23      	ldr	r2, [pc, #140]	; (801250c <CalculateBackOff+0xd8>)
 8012480:	589a      	ldr	r2, [r3, r2]
 8012482:	23e6      	movs	r3, #230	; 0xe6
 8012484:	005b      	lsls	r3, r3, #1
 8012486:	58d3      	ldr	r3, [r2, r3]
 8012488:	0018      	movs	r0, r3
 801248a:	f008 ff08 	bl	801b29e <TimerGetElapsedTime>
 801248e:	0002      	movs	r2, r0
 8012490:	193b      	adds	r3, r7, r4
 8012492:	605a      	str	r2, [r3, #4]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012494:	4a1c      	ldr	r2, [pc, #112]	; (8012508 <CalculateBackOff+0xd4>)
 8012496:	2383      	movs	r3, #131	; 0x83
 8012498:	00db      	lsls	r3, r3, #3
 801249a:	58d2      	ldr	r2, [r2, r3]
 801249c:	193b      	adds	r3, r7, r4
 801249e:	609a      	str	r2, [r3, #8]
    calcBackOff.LastTxIsJoinRequest = false;
 80124a0:	193b      	adds	r3, r7, r4
 80124a2:	2200      	movs	r2, #0
 80124a4:	705a      	strb	r2, [r3, #1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 80124a6:	4b18      	ldr	r3, [pc, #96]	; (8012508 <CalculateBackOff+0xd4>)
 80124a8:	4a19      	ldr	r2, [pc, #100]	; (8012510 <CalculateBackOff+0xdc>)
 80124aa:	5c9b      	ldrb	r3, [r3, r2]
 80124ac:	2204      	movs	r2, #4
 80124ae:	4013      	ands	r3, r2
 80124b0:	b2db      	uxtb	r3, r3
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d008      	beq.n	80124c8 <CalculateBackOff+0x94>
 80124b6:	2000      	movs	r0, #0
 80124b8:	f003 fa70 	bl	801599c <LoRaMacConfirmQueueIsCmdActive>
 80124bc:	1e03      	subs	r3, r0, #0
 80124be:	d003      	beq.n	80124c8 <CalculateBackOff+0x94>
    {
        calcBackOff.LastTxIsJoinRequest = true;
 80124c0:	230c      	movs	r3, #12
 80124c2:	18fb      	adds	r3, r7, r3
 80124c4:	2201      	movs	r2, #1
 80124c6:	705a      	strb	r2, [r3, #1]
    }

    // Update regional back-off
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 80124c8:	4b0f      	ldr	r3, [pc, #60]	; (8012508 <CalculateBackOff+0xd4>)
 80124ca:	4a10      	ldr	r2, [pc, #64]	; (801250c <CalculateBackOff+0xd8>)
 80124cc:	589b      	ldr	r3, [r3, r2]
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	220c      	movs	r2, #12
 80124d2:	18ba      	adds	r2, r7, r2
 80124d4:	0011      	movs	r1, r2
 80124d6:	0018      	movs	r0, r3
 80124d8:	f005 f9cd 	bl	8017876 <RegionCalcBackOff>

    // Update aggregated time-off. This must be an assignment and no incremental
    // update as we do only calculate the time-off based on the last transmission
    MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 80124dc:	4b0a      	ldr	r3, [pc, #40]	; (8012508 <CalculateBackOff+0xd4>)
 80124de:	4a0b      	ldr	r2, [pc, #44]	; (801250c <CalculateBackOff+0xd8>)
 80124e0:	589a      	ldr	r2, [r3, r2]
 80124e2:	23e1      	movs	r3, #225	; 0xe1
 80124e4:	005b      	lsls	r3, r3, #1
 80124e6:	5ad3      	ldrh	r3, [r2, r3]
 80124e8:	3b01      	subs	r3, #1
 80124ea:	4907      	ldr	r1, [pc, #28]	; (8012508 <CalculateBackOff+0xd4>)
 80124ec:	2283      	movs	r2, #131	; 0x83
 80124ee:	00d2      	lsls	r2, r2, #3
 80124f0:	5889      	ldr	r1, [r1, r2]
 80124f2:	4a05      	ldr	r2, [pc, #20]	; (8012508 <CalculateBackOff+0xd4>)
 80124f4:	4805      	ldr	r0, [pc, #20]	; (801250c <CalculateBackOff+0xd8>)
 80124f6:	5812      	ldr	r2, [r2, r0]
 80124f8:	4359      	muls	r1, r3
 80124fa:	23e4      	movs	r3, #228	; 0xe4
 80124fc:	005b      	lsls	r3, r3, #1
 80124fe:	50d1      	str	r1, [r2, r3]
}
 8012500:	46c0      	nop			; (mov r8, r8)
 8012502:	46bd      	mov	sp, r7
 8012504:	b007      	add	sp, #28
 8012506:	bd90      	pop	{r4, r7, pc}
 8012508:	200008f0 	.word	0x200008f0
 801250c:	00000484 	.word	0x00000484
 8012510:	00000481 	.word	0x00000481

08012514 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b082      	sub	sp, #8
 8012518:	af00      	add	r7, sp, #0
 801251a:	1d3b      	adds	r3, r7, #4
 801251c:	7019      	strb	r1, [r3, #0]
 801251e:	0011      	movs	r1, r2
 8012520:	1dfb      	adds	r3, r7, #7
 8012522:	1c02      	adds	r2, r0, #0
 8012524:	701a      	strb	r2, [r3, #0]
 8012526:	1dbb      	adds	r3, r7, #6
 8012528:	1c0a      	adds	r2, r1, #0
 801252a:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 801252c:	1dfb      	adds	r3, r7, #7
 801252e:	781b      	ldrb	r3, [r3, #0]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d003      	beq.n	801253c <RemoveMacCommands+0x28>
 8012534:	1dfb      	adds	r3, r7, #7
 8012536:	781b      	ldrb	r3, [r3, #0]
 8012538:	2b01      	cmp	r3, #1
 801253a:	d10f      	bne.n	801255c <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 801253c:	1dbb      	adds	r3, r7, #6
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	2b01      	cmp	r3, #1
 8012542:	d109      	bne.n	8012558 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 8012544:	1d3b      	adds	r3, r7, #4
 8012546:	781b      	ldrb	r3, [r3, #0]
 8012548:	2220      	movs	r2, #32
 801254a:	4013      	ands	r3, r2
 801254c:	b2db      	uxtb	r3, r3
 801254e:	2b00      	cmp	r3, #0
 8012550:	d004      	beq.n	801255c <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8012552:	f003 f80d 	bl	8015570 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8012556:	e001      	b.n	801255c <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8012558:	f003 f80a 	bl	8015570 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 801255c:	46c0      	nop			; (mov r8, r8)
 801255e:	46bd      	mov	sp, r7
 8012560:	b002      	add	sp, #8
 8012562:	bd80      	pop	{r7, pc}

08012564 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b082      	sub	sp, #8
 8012568:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 801256a:	4b72      	ldr	r3, [pc, #456]	; (8012734 <ResetMacParameters+0x1d0>)
 801256c:	4a72      	ldr	r2, [pc, #456]	; (8012738 <ResetMacParameters+0x1d4>)
 801256e:	589a      	ldr	r2, [r3, r2]
 8012570:	23ea      	movs	r3, #234	; 0xea
 8012572:	005b      	lsls	r3, r3, #1
 8012574:	2100      	movs	r1, #0
 8012576:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8012578:	4b6e      	ldr	r3, [pc, #440]	; (8012734 <ResetMacParameters+0x1d0>)
 801257a:	4a6f      	ldr	r2, [pc, #444]	; (8012738 <ResetMacParameters+0x1d4>)
 801257c:	589b      	ldr	r3, [r3, r2]
 801257e:	22f4      	movs	r2, #244	; 0xf4
 8012580:	2100      	movs	r1, #0
 8012582:	5099      	str	r1, [r3, r2]

    MacCtx.ChannelsNbTransCounter = 0;
 8012584:	4a6b      	ldr	r2, [pc, #428]	; (8012734 <ResetMacParameters+0x1d0>)
 8012586:	2382      	movs	r3, #130	; 0x82
 8012588:	00db      	lsls	r3, r3, #3
 801258a:	2100      	movs	r1, #0
 801258c:	54d1      	strb	r1, [r2, r3]
    MacCtx.AckTimeoutRetries = 1;
 801258e:	4b69      	ldr	r3, [pc, #420]	; (8012734 <ResetMacParameters+0x1d0>)
 8012590:	4a6a      	ldr	r2, [pc, #424]	; (801273c <ResetMacParameters+0x1d8>)
 8012592:	2101      	movs	r1, #1
 8012594:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012596:	4b67      	ldr	r3, [pc, #412]	; (8012734 <ResetMacParameters+0x1d0>)
 8012598:	4a69      	ldr	r2, [pc, #420]	; (8012740 <ResetMacParameters+0x1dc>)
 801259a:	2101      	movs	r1, #1
 801259c:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 801259e:	4b65      	ldr	r3, [pc, #404]	; (8012734 <ResetMacParameters+0x1d0>)
 80125a0:	4a68      	ldr	r2, [pc, #416]	; (8012744 <ResetMacParameters+0x1e0>)
 80125a2:	2100      	movs	r1, #0
 80125a4:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
 80125a6:	4b63      	ldr	r3, [pc, #396]	; (8012734 <ResetMacParameters+0x1d0>)
 80125a8:	4a63      	ldr	r2, [pc, #396]	; (8012738 <ResetMacParameters+0x1d4>)
 80125aa:	589a      	ldr	r2, [r3, r2]
 80125ac:	239e      	movs	r3, #158	; 0x9e
 80125ae:	005b      	lsls	r3, r3, #1
 80125b0:	2100      	movs	r1, #0
 80125b2:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 80125b4:	4b5f      	ldr	r3, [pc, #380]	; (8012734 <ResetMacParameters+0x1d0>)
 80125b6:	4a60      	ldr	r2, [pc, #384]	; (8012738 <ResetMacParameters+0x1d4>)
 80125b8:	589a      	ldr	r2, [r3, r2]
 80125ba:	23e1      	movs	r3, #225	; 0xe1
 80125bc:	005b      	lsls	r3, r3, #1
 80125be:	2101      	movs	r1, #1
 80125c0:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80125c2:	4b5c      	ldr	r3, [pc, #368]	; (8012734 <ResetMacParameters+0x1d0>)
 80125c4:	4a5c      	ldr	r2, [pc, #368]	; (8012738 <ResetMacParameters+0x1d4>)
 80125c6:	589a      	ldr	r2, [r3, r2]
 80125c8:	4b5a      	ldr	r3, [pc, #360]	; (8012734 <ResetMacParameters+0x1d0>)
 80125ca:	495b      	ldr	r1, [pc, #364]	; (8012738 <ResetMacParameters+0x1d4>)
 80125cc:	585b      	ldr	r3, [r3, r1]
 80125ce:	2104      	movs	r1, #4
 80125d0:	5651      	ldrsb	r1, [r2, r1]
 80125d2:	22f8      	movs	r2, #248	; 0xf8
 80125d4:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 80125d6:	4b57      	ldr	r3, [pc, #348]	; (8012734 <ResetMacParameters+0x1d0>)
 80125d8:	4a57      	ldr	r2, [pc, #348]	; (8012738 <ResetMacParameters+0x1d4>)
 80125da:	589a      	ldr	r2, [r3, r2]
 80125dc:	4b55      	ldr	r3, [pc, #340]	; (8012734 <ResetMacParameters+0x1d0>)
 80125de:	4956      	ldr	r1, [pc, #344]	; (8012738 <ResetMacParameters+0x1d4>)
 80125e0:	585b      	ldr	r3, [r3, r1]
 80125e2:	2105      	movs	r1, #5
 80125e4:	5651      	ldrsb	r1, [r2, r1]
 80125e6:	22f9      	movs	r2, #249	; 0xf9
 80125e8:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 80125ea:	4b52      	ldr	r3, [pc, #328]	; (8012734 <ResetMacParameters+0x1d0>)
 80125ec:	4a52      	ldr	r2, [pc, #328]	; (8012738 <ResetMacParameters+0x1d4>)
 80125ee:	589b      	ldr	r3, [r3, r2]
 80125f0:	4a50      	ldr	r2, [pc, #320]	; (8012734 <ResetMacParameters+0x1d0>)
 80125f2:	4951      	ldr	r1, [pc, #324]	; (8012738 <ResetMacParameters+0x1d4>)
 80125f4:	5852      	ldr	r2, [r2, r1]
 80125f6:	2125      	movs	r1, #37	; 0x25
 80125f8:	5c59      	ldrb	r1, [r3, r1]
 80125fa:	231a      	movs	r3, #26
 80125fc:	33ff      	adds	r3, #255	; 0xff
 80125fe:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8012600:	4b4c      	ldr	r3, [pc, #304]	; (8012734 <ResetMacParameters+0x1d0>)
 8012602:	4a4d      	ldr	r2, [pc, #308]	; (8012738 <ResetMacParameters+0x1d4>)
 8012604:	589a      	ldr	r2, [r3, r2]
 8012606:	4b4b      	ldr	r3, [pc, #300]	; (8012734 <ResetMacParameters+0x1d0>)
 8012608:	494b      	ldr	r1, [pc, #300]	; (8012738 <ResetMacParameters+0x1d4>)
 801260a:	5859      	ldr	r1, [r3, r1]
 801260c:	238e      	movs	r3, #142	; 0x8e
 801260e:	005b      	lsls	r3, r3, #1
 8012610:	18cb      	adds	r3, r1, r3
 8012612:	3228      	adds	r2, #40	; 0x28
 8012614:	ca03      	ldmia	r2!, {r0, r1}
 8012616:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8012618:	4b46      	ldr	r3, [pc, #280]	; (8012734 <ResetMacParameters+0x1d0>)
 801261a:	4a47      	ldr	r2, [pc, #284]	; (8012738 <ResetMacParameters+0x1d4>)
 801261c:	589a      	ldr	r2, [r3, r2]
 801261e:	4b45      	ldr	r3, [pc, #276]	; (8012734 <ResetMacParameters+0x1d0>)
 8012620:	4945      	ldr	r1, [pc, #276]	; (8012738 <ResetMacParameters+0x1d4>)
 8012622:	5859      	ldr	r1, [r3, r1]
 8012624:	2392      	movs	r3, #146	; 0x92
 8012626:	005b      	lsls	r3, r3, #1
 8012628:	18cb      	adds	r3, r1, r3
 801262a:	3230      	adds	r2, #48	; 0x30
 801262c:	ca03      	ldmia	r2!, {r0, r1}
 801262e:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 8012630:	4b40      	ldr	r3, [pc, #256]	; (8012734 <ResetMacParameters+0x1d0>)
 8012632:	4a41      	ldr	r2, [pc, #260]	; (8012738 <ResetMacParameters+0x1d4>)
 8012634:	589b      	ldr	r3, [r3, r2]
 8012636:	4a3f      	ldr	r2, [pc, #252]	; (8012734 <ResetMacParameters+0x1d0>)
 8012638:	493f      	ldr	r1, [pc, #252]	; (8012738 <ResetMacParameters+0x1d4>)
 801263a:	5852      	ldr	r2, [r2, r1]
 801263c:	2138      	movs	r1, #56	; 0x38
 801263e:	5c59      	ldrb	r1, [r3, r1]
 8012640:	2396      	movs	r3, #150	; 0x96
 8012642:	005b      	lsls	r3, r3, #1
 8012644:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 8012646:	4b3b      	ldr	r3, [pc, #236]	; (8012734 <ResetMacParameters+0x1d0>)
 8012648:	4a3b      	ldr	r2, [pc, #236]	; (8012738 <ResetMacParameters+0x1d4>)
 801264a:	589b      	ldr	r3, [r3, r2]
 801264c:	4a39      	ldr	r2, [pc, #228]	; (8012734 <ResetMacParameters+0x1d0>)
 801264e:	493a      	ldr	r1, [pc, #232]	; (8012738 <ResetMacParameters+0x1d4>)
 8012650:	5852      	ldr	r2, [r2, r1]
 8012652:	2139      	movs	r1, #57	; 0x39
 8012654:	5c59      	ldrb	r1, [r3, r1]
 8012656:	232e      	movs	r3, #46	; 0x2e
 8012658:	33ff      	adds	r3, #255	; 0xff
 801265a:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 801265c:	4b35      	ldr	r3, [pc, #212]	; (8012734 <ResetMacParameters+0x1d0>)
 801265e:	4a36      	ldr	r2, [pc, #216]	; (8012738 <ResetMacParameters+0x1d4>)
 8012660:	589b      	ldr	r3, [r3, r2]
 8012662:	4a34      	ldr	r2, [pc, #208]	; (8012734 <ResetMacParameters+0x1d0>)
 8012664:	4934      	ldr	r1, [pc, #208]	; (8012738 <ResetMacParameters+0x1d4>)
 8012666:	5852      	ldr	r2, [r2, r1]
 8012668:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801266a:	2398      	movs	r3, #152	; 0x98
 801266c:	005b      	lsls	r3, r3, #1
 801266e:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8012670:	4b30      	ldr	r3, [pc, #192]	; (8012734 <ResetMacParameters+0x1d0>)
 8012672:	4a31      	ldr	r2, [pc, #196]	; (8012738 <ResetMacParameters+0x1d4>)
 8012674:	589b      	ldr	r3, [r3, r2]
 8012676:	4a2f      	ldr	r2, [pc, #188]	; (8012734 <ResetMacParameters+0x1d0>)
 8012678:	492f      	ldr	r1, [pc, #188]	; (8012738 <ResetMacParameters+0x1d4>)
 801267a:	5852      	ldr	r2, [r2, r1]
 801267c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 801267e:	239a      	movs	r3, #154	; 0x9a
 8012680:	005b      	lsls	r3, r3, #1
 8012682:	50d1      	str	r1, [r2, r3]

    MacCtx.NodeAckRequested = false;
 8012684:	4b2b      	ldr	r3, [pc, #172]	; (8012734 <ResetMacParameters+0x1d0>)
 8012686:	4a30      	ldr	r2, [pc, #192]	; (8012748 <ResetMacParameters+0x1e4>)
 8012688:	2100      	movs	r1, #0
 801268a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 801268c:	4b29      	ldr	r3, [pc, #164]	; (8012734 <ResetMacParameters+0x1d0>)
 801268e:	4a2a      	ldr	r2, [pc, #168]	; (8012738 <ResetMacParameters+0x1d4>)
 8012690:	589a      	ldr	r2, [r3, r2]
 8012692:	23e0      	movs	r3, #224	; 0xe0
 8012694:	005b      	lsls	r3, r3, #1
 8012696:	2100      	movs	r1, #0
 8012698:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 801269a:	003b      	movs	r3, r7
 801269c:	2201      	movs	r2, #1
 801269e:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 80126a0:	003b      	movs	r3, r7
 80126a2:	2200      	movs	r2, #0
 80126a4:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80126a6:	4b23      	ldr	r3, [pc, #140]	; (8012734 <ResetMacParameters+0x1d0>)
 80126a8:	4a23      	ldr	r2, [pc, #140]	; (8012738 <ResetMacParameters+0x1d4>)
 80126aa:	589b      	ldr	r3, [r3, r2]
 80126ac:	781b      	ldrb	r3, [r3, #0]
 80126ae:	003a      	movs	r2, r7
 80126b0:	0011      	movs	r1, r2
 80126b2:	0018      	movs	r0, r3
 80126b4:	f004 ff7a 	bl	80175ac <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80126b8:	4b1e      	ldr	r3, [pc, #120]	; (8012734 <ResetMacParameters+0x1d0>)
 80126ba:	4a24      	ldr	r2, [pc, #144]	; (801274c <ResetMacParameters+0x1e8>)
 80126bc:	2100      	movs	r1, #0
 80126be:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 80126c0:	4b1c      	ldr	r3, [pc, #112]	; (8012734 <ResetMacParameters+0x1d0>)
 80126c2:	4a1d      	ldr	r2, [pc, #116]	; (8012738 <ResetMacParameters+0x1d4>)
 80126c4:	589a      	ldr	r2, [r3, r2]
 80126c6:	4b1b      	ldr	r3, [pc, #108]	; (8012734 <ResetMacParameters+0x1d0>)
 80126c8:	4920      	ldr	r1, [pc, #128]	; (801274c <ResetMacParameters+0x1e8>)
 80126ca:	5c59      	ldrb	r1, [r3, r1]
 80126cc:	239f      	movs	r3, #159	; 0x9f
 80126ce:	005b      	lsls	r3, r3, #1
 80126d0:	54d1      	strb	r1, [r2, r3]

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80126d2:	4b18      	ldr	r3, [pc, #96]	; (8012734 <ResetMacParameters+0x1d0>)
 80126d4:	4a1d      	ldr	r2, [pc, #116]	; (801274c <ResetMacParameters+0x1e8>)
 80126d6:	5c99      	ldrb	r1, [r3, r2]
 80126d8:	4a16      	ldr	r2, [pc, #88]	; (8012734 <ResetMacParameters+0x1d0>)
 80126da:	23f3      	movs	r3, #243	; 0xf3
 80126dc:	009b      	lsls	r3, r3, #2
 80126de:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 80126e0:	4b14      	ldr	r3, [pc, #80]	; (8012734 <ResetMacParameters+0x1d0>)
 80126e2:	4a15      	ldr	r2, [pc, #84]	; (8012738 <ResetMacParameters+0x1d4>)
 80126e4:	589a      	ldr	r2, [r3, r2]
 80126e6:	238e      	movs	r3, #142	; 0x8e
 80126e8:	005b      	lsls	r3, r3, #1
 80126ea:	58d1      	ldr	r1, [r2, r3]
 80126ec:	4a11      	ldr	r2, [pc, #68]	; (8012734 <ResetMacParameters+0x1d0>)
 80126ee:	23f4      	movs	r3, #244	; 0xf4
 80126f0:	009b      	lsls	r3, r3, #2
 80126f2:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80126f4:	4b0f      	ldr	r3, [pc, #60]	; (8012734 <ResetMacParameters+0x1d0>)
 80126f6:	4a10      	ldr	r2, [pc, #64]	; (8012738 <ResetMacParameters+0x1d4>)
 80126f8:	589a      	ldr	r2, [r3, r2]
 80126fa:	232e      	movs	r3, #46	; 0x2e
 80126fc:	33ff      	adds	r3, #255	; 0xff
 80126fe:	5cd1      	ldrb	r1, [r2, r3]
 8012700:	4a0c      	ldr	r2, [pc, #48]	; (8012734 <ResetMacParameters+0x1d0>)
 8012702:	23f7      	movs	r3, #247	; 0xf7
 8012704:	009b      	lsls	r3, r3, #2
 8012706:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8012708:	4b0a      	ldr	r3, [pc, #40]	; (8012734 <ResetMacParameters+0x1d0>)
 801270a:	4a0b      	ldr	r2, [pc, #44]	; (8012738 <ResetMacParameters+0x1d4>)
 801270c:	589a      	ldr	r2, [r3, r2]
 801270e:	2340      	movs	r3, #64	; 0x40
 8012710:	33ff      	adds	r3, #255	; 0xff
 8012712:	5cd1      	ldrb	r1, [r2, r3]
 8012714:	4b07      	ldr	r3, [pc, #28]	; (8012734 <ResetMacParameters+0x1d0>)
 8012716:	4a0e      	ldr	r2, [pc, #56]	; (8012750 <ResetMacParameters+0x1ec>)
 8012718:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 801271a:	4b06      	ldr	r3, [pc, #24]	; (8012734 <ResetMacParameters+0x1d0>)
 801271c:	4a0d      	ldr	r2, [pc, #52]	; (8012754 <ResetMacParameters+0x1f0>)
 801271e:	2100      	movs	r1, #0
 8012720:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012722:	4b04      	ldr	r3, [pc, #16]	; (8012734 <ResetMacParameters+0x1d0>)
 8012724:	4a0c      	ldr	r2, [pc, #48]	; (8012758 <ResetMacParameters+0x1f4>)
 8012726:	2101      	movs	r1, #1
 8012728:	5499      	strb	r1, [r3, r2]
}
 801272a:	46c0      	nop			; (mov r8, r8)
 801272c:	46bd      	mov	sp, r7
 801272e:	b002      	add	sp, #8
 8012730:	bd80      	pop	{r7, pc}
 8012732:	46c0      	nop			; (mov r8, r8)
 8012734:	200008f0 	.word	0x200008f0
 8012738:	00000484 	.word	0x00000484
 801273c:	00000411 	.word	0x00000411
 8012740:	00000412 	.word	0x00000412
 8012744:	00000413 	.word	0x00000413
 8012748:	00000414 	.word	0x00000414
 801274c:	00000415 	.word	0x00000415
 8012750:	000003dd 	.word	0x000003dd
 8012754:	000003de 	.word	0x000003de
 8012758:	000003df 	.word	0x000003df

0801275c <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b082      	sub	sp, #8
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
 8012764:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	0018      	movs	r0, r3
 801276a:	f008 fce9 	bl	801b140 <TimerStop>

    // Ensure the radio is Idle
    Radio.Standby( );
 801276e:	4b11      	ldr	r3, [pc, #68]	; (80127b4 <RxWindowSetup+0x58>)
 8012770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012772:	4798      	blx	r3

    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012774:	4b10      	ldr	r3, [pc, #64]	; (80127b8 <RxWindowSetup+0x5c>)
 8012776:	4a11      	ldr	r2, [pc, #68]	; (80127bc <RxWindowSetup+0x60>)
 8012778:	589b      	ldr	r3, [r3, r2]
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	4a10      	ldr	r2, [pc, #64]	; (80127c0 <RxWindowSetup+0x64>)
 801277e:	6839      	ldr	r1, [r7, #0]
 8012780:	0018      	movs	r0, r3
 8012782:	f004 ffaa 	bl	80176da <RegionRxConfig>
 8012786:	1e03      	subs	r3, r0, #0
 8012788:	d00f      	beq.n	80127aa <RxWindowSetup+0x4e>
    {
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 801278a:	4b0a      	ldr	r3, [pc, #40]	; (80127b4 <RxWindowSetup+0x58>)
 801278c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801278e:	4a0a      	ldr	r2, [pc, #40]	; (80127b8 <RxWindowSetup+0x5c>)
 8012790:	490a      	ldr	r1, [pc, #40]	; (80127bc <RxWindowSetup+0x60>)
 8012792:	5851      	ldr	r1, [r2, r1]
 8012794:	2282      	movs	r2, #130	; 0x82
 8012796:	0052      	lsls	r2, r2, #1
 8012798:	588a      	ldr	r2, [r1, r2]
 801279a:	0010      	movs	r0, r2
 801279c:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	7cd9      	ldrb	r1, [r3, #19]
 80127a2:	4a05      	ldr	r2, [pc, #20]	; (80127b8 <RxWindowSetup+0x5c>)
 80127a4:	2390      	movs	r3, #144	; 0x90
 80127a6:	00db      	lsls	r3, r3, #3
 80127a8:	54d1      	strb	r1, [r2, r3]
    }
}
 80127aa:	46c0      	nop			; (mov r8, r8)
 80127ac:	46bd      	mov	sp, r7
 80127ae:	b002      	add	sp, #8
 80127b0:	bd80      	pop	{r7, pc}
 80127b2:	46c0      	nop			; (mov r8, r8)
 80127b4:	0801cb08 	.word	0x0801cb08
 80127b8:	200008f0 	.word	0x200008f0
 80127bc:	00000484 	.word	0x00000484
 80127c0:	20000d10 	.word	0x20000d10

080127c4 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	af00      	add	r7, sp, #0
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80127c8:	4b10      	ldr	r3, [pc, #64]	; (801280c <OpenContinuousRxCWindow+0x48>)
 80127ca:	4a11      	ldr	r2, [pc, #68]	; (8012810 <OpenContinuousRxCWindow+0x4c>)
 80127cc:	2102      	movs	r1, #2
 80127ce:	5499      	strb	r1, [r3, r2]
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80127d0:	4b0e      	ldr	r3, [pc, #56]	; (801280c <OpenContinuousRxCWindow+0x48>)
 80127d2:	4a10      	ldr	r2, [pc, #64]	; (8012814 <OpenContinuousRxCWindow+0x50>)
 80127d4:	2101      	movs	r1, #1
 80127d6:	5499      	strb	r1, [r3, r2]

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80127d8:	4b0c      	ldr	r3, [pc, #48]	; (801280c <OpenContinuousRxCWindow+0x48>)
 80127da:	4a0f      	ldr	r2, [pc, #60]	; (8012818 <OpenContinuousRxCWindow+0x54>)
 80127dc:	589b      	ldr	r3, [r3, r2]
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	4a0e      	ldr	r2, [pc, #56]	; (801281c <OpenContinuousRxCWindow+0x58>)
 80127e2:	490f      	ldr	r1, [pc, #60]	; (8012820 <OpenContinuousRxCWindow+0x5c>)
 80127e4:	0018      	movs	r0, r3
 80127e6:	f004 ff78 	bl	80176da <RegionRxConfig>
 80127ea:	1e03      	subs	r3, r0, #0
 80127ec:	d00a      	beq.n	8012804 <OpenContinuousRxCWindow+0x40>
    {
        Radio.Rx( 0 ); // Continuous mode
 80127ee:	4b0d      	ldr	r3, [pc, #52]	; (8012824 <OpenContinuousRxCWindow+0x60>)
 80127f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127f2:	2000      	movs	r0, #0
 80127f4:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80127f6:	4b05      	ldr	r3, [pc, #20]	; (801280c <OpenContinuousRxCWindow+0x48>)
 80127f8:	4a05      	ldr	r2, [pc, #20]	; (8012810 <OpenContinuousRxCWindow+0x4c>)
 80127fa:	5c99      	ldrb	r1, [r3, r2]
 80127fc:	4a03      	ldr	r2, [pc, #12]	; (801280c <OpenContinuousRxCWindow+0x48>)
 80127fe:	2390      	movs	r3, #144	; 0x90
 8012800:	00db      	lsls	r3, r3, #3
 8012802:	54d1      	strb	r1, [r2, r3]
    }
}
 8012804:	46c0      	nop			; (mov r8, r8)
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}
 801280a:	46c0      	nop			; (mov r8, r8)
 801280c:	200008f0 	.word	0x200008f0
 8012810:	000003f3 	.word	0x000003f3
 8012814:	000003f2 	.word	0x000003f2
 8012818:	00000484 	.word	0x00000484
 801281c:	20000d10 	.word	0x20000d10
 8012820:	20000cd0 	.word	0x20000cd0
 8012824:	0801cb08 	.word	0x0801cb08

08012828 <PrepareFrame>:

LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8012828:	b590      	push	{r4, r7, lr}
 801282a:	b089      	sub	sp, #36	; 0x24
 801282c:	af00      	add	r7, sp, #0
 801282e:	60f8      	str	r0, [r7, #12]
 8012830:	60b9      	str	r1, [r7, #8]
 8012832:	603b      	str	r3, [r7, #0]
 8012834:	1dfb      	adds	r3, r7, #7
 8012836:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 8012838:	4b9a      	ldr	r3, [pc, #616]	; (8012aa4 <PrepareFrame+0x27c>)
 801283a:	2200      	movs	r2, #0
 801283c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801283e:	4b99      	ldr	r3, [pc, #612]	; (8012aa4 <PrepareFrame+0x27c>)
 8012840:	4a99      	ldr	r2, [pc, #612]	; (8012aa8 <PrepareFrame+0x280>)
 8012842:	2100      	movs	r1, #0
 8012844:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 8012846:	2300      	movs	r3, #0
 8012848:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 801284a:	2300      	movs	r3, #0
 801284c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801284e:	231f      	movs	r3, #31
 8012850:	18fb      	adds	r3, r7, r3
 8012852:	2200      	movs	r2, #0
 8012854:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 8012856:	683b      	ldr	r3, [r7, #0]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d103      	bne.n	8012864 <PrepareFrame+0x3c>
    {
        fBufferSize = 0;
 801285c:	2330      	movs	r3, #48	; 0x30
 801285e:	18fb      	adds	r3, r7, r3
 8012860:	2200      	movs	r2, #0
 8012862:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8012864:	2430      	movs	r4, #48	; 0x30
 8012866:	193b      	adds	r3, r7, r4
 8012868:	881a      	ldrh	r2, [r3, #0]
 801286a:	6839      	ldr	r1, [r7, #0]
 801286c:	4b8f      	ldr	r3, [pc, #572]	; (8012aac <PrepareFrame+0x284>)
 801286e:	0018      	movs	r0, r3
 8012870:	f008 fede 	bl	801b630 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8012874:	193b      	adds	r3, r7, r4
 8012876:	881b      	ldrh	r3, [r3, #0]
 8012878:	b2d9      	uxtb	r1, r3
 801287a:	4b8a      	ldr	r3, [pc, #552]	; (8012aa4 <PrepareFrame+0x27c>)
 801287c:	4a8c      	ldr	r2, [pc, #560]	; (8012ab0 <PrepareFrame+0x288>)
 801287e:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	781a      	ldrb	r2, [r3, #0]
 8012884:	4b87      	ldr	r3, [pc, #540]	; (8012aa4 <PrepareFrame+0x27c>)
 8012886:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	061b      	lsls	r3, r3, #24
 801288e:	0f5b      	lsrs	r3, r3, #29
 8012890:	b2db      	uxtb	r3, r3
 8012892:	2b04      	cmp	r3, #4
 8012894:	d005      	beq.n	80128a2 <PrepareFrame+0x7a>
 8012896:	2b07      	cmp	r3, #7
 8012898:	d100      	bne.n	801289c <PrepareFrame+0x74>
 801289a:	e0df      	b.n	8012a5c <PrepareFrame+0x234>
 801289c:	2b02      	cmp	r3, #2
 801289e:	d004      	beq.n	80128aa <PrepareFrame+0x82>
 80128a0:	e0f6      	b.n	8012a90 <PrepareFrame+0x268>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80128a2:	4b80      	ldr	r3, [pc, #512]	; (8012aa4 <PrepareFrame+0x27c>)
 80128a4:	4a80      	ldr	r2, [pc, #512]	; (8012aa8 <PrepareFrame+0x280>)
 80128a6:	2101      	movs	r1, #1
 80128a8:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80128aa:	4a7e      	ldr	r2, [pc, #504]	; (8012aa4 <PrepareFrame+0x27c>)
 80128ac:	2382      	movs	r3, #130	; 0x82
 80128ae:	005b      	lsls	r3, r3, #1
 80128b0:	2104      	movs	r1, #4
 80128b2:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80128b4:	4a7b      	ldr	r2, [pc, #492]	; (8012aa4 <PrepareFrame+0x27c>)
 80128b6:	2384      	movs	r3, #132	; 0x84
 80128b8:	005b      	lsls	r3, r3, #1
 80128ba:	497e      	ldr	r1, [pc, #504]	; (8012ab4 <PrepareFrame+0x28c>)
 80128bc:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80128be:	4a79      	ldr	r2, [pc, #484]	; (8012aa4 <PrepareFrame+0x27c>)
 80128c0:	2386      	movs	r3, #134	; 0x86
 80128c2:	005b      	lsls	r3, r3, #1
 80128c4:	21ff      	movs	r1, #255	; 0xff
 80128c6:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	7819      	ldrb	r1, [r3, #0]
 80128cc:	4a75      	ldr	r2, [pc, #468]	; (8012aa4 <PrepareFrame+0x27c>)
 80128ce:	230e      	movs	r3, #14
 80128d0:	33ff      	adds	r3, #255	; 0xff
 80128d2:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80128d4:	4a73      	ldr	r2, [pc, #460]	; (8012aa4 <PrepareFrame+0x27c>)
 80128d6:	1df9      	adds	r1, r7, #7
 80128d8:	2394      	movs	r3, #148	; 0x94
 80128da:	005b      	lsls	r3, r3, #1
 80128dc:	7809      	ldrb	r1, [r1, #0]
 80128de:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 80128e0:	4b70      	ldr	r3, [pc, #448]	; (8012aa4 <PrepareFrame+0x27c>)
 80128e2:	4a75      	ldr	r2, [pc, #468]	; (8012ab8 <PrepareFrame+0x290>)
 80128e4:	589b      	ldr	r3, [r3, r2]
 80128e6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80128e8:	4a6e      	ldr	r2, [pc, #440]	; (8012aa4 <PrepareFrame+0x27c>)
 80128ea:	2388      	movs	r3, #136	; 0x88
 80128ec:	005b      	lsls	r3, r3, #1
 80128ee:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	7819      	ldrb	r1, [r3, #0]
 80128f4:	4a6b      	ldr	r2, [pc, #428]	; (8012aa4 <PrepareFrame+0x27c>)
 80128f6:	238a      	movs	r3, #138	; 0x8a
 80128f8:	005b      	lsls	r3, r3, #1
 80128fa:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80128fc:	4b69      	ldr	r3, [pc, #420]	; (8012aa4 <PrepareFrame+0x27c>)
 80128fe:	4a6c      	ldr	r2, [pc, #432]	; (8012ab0 <PrepareFrame+0x288>)
 8012900:	5c99      	ldrb	r1, [r3, r2]
 8012902:	4a68      	ldr	r2, [pc, #416]	; (8012aa4 <PrepareFrame+0x27c>)
 8012904:	2398      	movs	r3, #152	; 0x98
 8012906:	005b      	lsls	r3, r3, #1
 8012908:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801290a:	4a66      	ldr	r2, [pc, #408]	; (8012aa4 <PrepareFrame+0x27c>)
 801290c:	2396      	movs	r3, #150	; 0x96
 801290e:	005b      	lsls	r3, r3, #1
 8012910:	4966      	ldr	r1, [pc, #408]	; (8012aac <PrepareFrame+0x284>)
 8012912:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012914:	2318      	movs	r3, #24
 8012916:	18fb      	adds	r3, r7, r3
 8012918:	0018      	movs	r0, r3
 801291a:	f003 fd1d 	bl	8016358 <LoRaMacCryptoGetFCntUp>
 801291e:	1e03      	subs	r3, r0, #0
 8012920:	d001      	beq.n	8012926 <PrepareFrame+0xfe>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012922:	2312      	movs	r3, #18
 8012924:	e0ba      	b.n	8012a9c <PrepareFrame+0x274>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8012926:	69bb      	ldr	r3, [r7, #24]
 8012928:	b299      	uxth	r1, r3
 801292a:	4a5e      	ldr	r2, [pc, #376]	; (8012aa4 <PrepareFrame+0x27c>)
 801292c:	238b      	movs	r3, #139	; 0x8b
 801292e:	005b      	lsls	r3, r3, #1
 8012930:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 8012932:	4b5c      	ldr	r3, [pc, #368]	; (8012aa4 <PrepareFrame+0x27c>)
 8012934:	4a61      	ldr	r2, [pc, #388]	; (8012abc <PrepareFrame+0x294>)
 8012936:	2100      	movs	r1, #0
 8012938:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 801293a:	4a5a      	ldr	r2, [pc, #360]	; (8012aa4 <PrepareFrame+0x27c>)
 801293c:	2388      	movs	r3, #136	; 0x88
 801293e:	00db      	lsls	r3, r3, #3
 8012940:	2100      	movs	r1, #0
 8012942:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8012944:	69b9      	ldr	r1, [r7, #24]
 8012946:	4a57      	ldr	r2, [pc, #348]	; (8012aa4 <PrepareFrame+0x27c>)
 8012948:	2389      	movs	r3, #137	; 0x89
 801294a:	00db      	lsls	r3, r3, #3
 801294c:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801294e:	2314      	movs	r3, #20
 8012950:	18fb      	adds	r3, r7, r3
 8012952:	0018      	movs	r0, r3
 8012954:	f002 fe30 	bl	80155b8 <LoRaMacCommandsGetSizeSerializedCmds>
 8012958:	1e03      	subs	r3, r0, #0
 801295a:	d001      	beq.n	8012960 <PrepareFrame+0x138>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801295c:	2313      	movs	r3, #19
 801295e:	e09d      	b.n	8012a9c <PrepareFrame+0x274>
            }

            if( macCmdsSize > 0 )
 8012960:	697b      	ldr	r3, [r7, #20]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d100      	bne.n	8012968 <PrepareFrame+0x140>
 8012966:	e095      	b.n	8012a94 <PrepareFrame+0x26c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 8012968:	4b4e      	ldr	r3, [pc, #312]	; (8012aa4 <PrepareFrame+0x27c>)
 801296a:	4a53      	ldr	r2, [pc, #332]	; (8012ab8 <PrepareFrame+0x290>)
 801296c:	589b      	ldr	r3, [r3, r2]
 801296e:	22f9      	movs	r2, #249	; 0xf9
 8012970:	569b      	ldrsb	r3, [r3, r2]
 8012972:	221f      	movs	r2, #31
 8012974:	18bc      	adds	r4, r7, r2
 8012976:	0018      	movs	r0, r3
 8012978:	f7fe fba4 	bl	80110c4 <GetMaxAppPayloadWithoutFOptsLength>
 801297c:	0003      	movs	r3, r0
 801297e:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012980:	4b48      	ldr	r3, [pc, #288]	; (8012aa4 <PrepareFrame+0x27c>)
 8012982:	4a4b      	ldr	r2, [pc, #300]	; (8012ab0 <PrepareFrame+0x288>)
 8012984:	5c9b      	ldrb	r3, [r3, r2]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d024      	beq.n	80129d4 <PrepareFrame+0x1ac>
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	2b0f      	cmp	r3, #15
 801298e:	d821      	bhi.n	80129d4 <PrepareFrame+0x1ac>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8012990:	4a4b      	ldr	r2, [pc, #300]	; (8012ac0 <PrepareFrame+0x298>)
 8012992:	2314      	movs	r3, #20
 8012994:	18fb      	adds	r3, r7, r3
 8012996:	0019      	movs	r1, r3
 8012998:	200f      	movs	r0, #15
 801299a:	f002 fe23 	bl	80155e4 <LoRaMacCommandsSerializeCmds>
 801299e:	1e03      	subs	r3, r0, #0
 80129a0:	d001      	beq.n	80129a6 <PrepareFrame+0x17e>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80129a2:	2313      	movs	r3, #19
 80129a4:	e07a      	b.n	8012a9c <PrepareFrame+0x274>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80129a6:	697b      	ldr	r3, [r7, #20]
 80129a8:	1c1a      	adds	r2, r3, #0
 80129aa:	230f      	movs	r3, #15
 80129ac:	4013      	ands	r3, r2
 80129ae:	b2da      	uxtb	r2, r3
 80129b0:	68bb      	ldr	r3, [r7, #8]
 80129b2:	210f      	movs	r1, #15
 80129b4:	400a      	ands	r2, r1
 80129b6:	0010      	movs	r0, r2
 80129b8:	781a      	ldrb	r2, [r3, #0]
 80129ba:	210f      	movs	r1, #15
 80129bc:	438a      	bics	r2, r1
 80129be:	1c11      	adds	r1, r2, #0
 80129c0:	1c02      	adds	r2, r0, #0
 80129c2:	430a      	orrs	r2, r1
 80129c4:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	7819      	ldrb	r1, [r3, #0]
 80129ca:	4a36      	ldr	r2, [pc, #216]	; (8012aa4 <PrepareFrame+0x27c>)
 80129cc:	238a      	movs	r3, #138	; 0x8a
 80129ce:	005b      	lsls	r3, r3, #1
 80129d0:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80129d2:	e05f      	b.n	8012a94 <PrepareFrame+0x26c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80129d4:	4b33      	ldr	r3, [pc, #204]	; (8012aa4 <PrepareFrame+0x27c>)
 80129d6:	4a36      	ldr	r2, [pc, #216]	; (8012ab0 <PrepareFrame+0x288>)
 80129d8:	5c9b      	ldrb	r3, [r3, r2]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d016      	beq.n	8012a0c <PrepareFrame+0x1e4>
 80129de:	697b      	ldr	r3, [r7, #20]
 80129e0:	2b0f      	cmp	r3, #15
 80129e2:	d913      	bls.n	8012a0c <PrepareFrame+0x1e4>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80129e4:	231f      	movs	r3, #31
 80129e6:	18fb      	adds	r3, r7, r3
 80129e8:	7818      	ldrb	r0, [r3, #0]
 80129ea:	4b2e      	ldr	r3, [pc, #184]	; (8012aa4 <PrepareFrame+0x27c>)
 80129ec:	4a32      	ldr	r2, [pc, #200]	; (8012ab8 <PrepareFrame+0x290>)
 80129ee:	589b      	ldr	r3, [r3, r2]
 80129f0:	3341      	adds	r3, #65	; 0x41
 80129f2:	33ff      	adds	r3, #255	; 0xff
 80129f4:	001a      	movs	r2, r3
 80129f6:	2314      	movs	r3, #20
 80129f8:	18fb      	adds	r3, r7, r3
 80129fa:	0019      	movs	r1, r3
 80129fc:	f002 fdf2 	bl	80155e4 <LoRaMacCommandsSerializeCmds>
 8012a00:	1e03      	subs	r3, r0, #0
 8012a02:	d001      	beq.n	8012a08 <PrepareFrame+0x1e0>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012a04:	2313      	movs	r3, #19
 8012a06:	e049      	b.n	8012a9c <PrepareFrame+0x274>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8012a08:	230a      	movs	r3, #10
 8012a0a:	e047      	b.n	8012a9c <PrepareFrame+0x274>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012a0c:	231f      	movs	r3, #31
 8012a0e:	18fb      	adds	r3, r7, r3
 8012a10:	7818      	ldrb	r0, [r3, #0]
 8012a12:	4b24      	ldr	r3, [pc, #144]	; (8012aa4 <PrepareFrame+0x27c>)
 8012a14:	4a28      	ldr	r2, [pc, #160]	; (8012ab8 <PrepareFrame+0x290>)
 8012a16:	589b      	ldr	r3, [r3, r2]
 8012a18:	3341      	adds	r3, #65	; 0x41
 8012a1a:	33ff      	adds	r3, #255	; 0xff
 8012a1c:	001a      	movs	r2, r3
 8012a1e:	2314      	movs	r3, #20
 8012a20:	18fb      	adds	r3, r7, r3
 8012a22:	0019      	movs	r1, r3
 8012a24:	f002 fdde 	bl	80155e4 <LoRaMacCommandsSerializeCmds>
 8012a28:	1e03      	subs	r3, r0, #0
 8012a2a:	d001      	beq.n	8012a30 <PrepareFrame+0x208>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012a2c:	2313      	movs	r3, #19
 8012a2e:	e035      	b.n	8012a9c <PrepareFrame+0x274>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8012a30:	4a1c      	ldr	r2, [pc, #112]	; (8012aa4 <PrepareFrame+0x27c>)
 8012a32:	2394      	movs	r3, #148	; 0x94
 8012a34:	005b      	lsls	r3, r3, #1
 8012a36:	2100      	movs	r1, #0
 8012a38:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8012a3a:	4b1a      	ldr	r3, [pc, #104]	; (8012aa4 <PrepareFrame+0x27c>)
 8012a3c:	4a1e      	ldr	r2, [pc, #120]	; (8012ab8 <PrepareFrame+0x290>)
 8012a3e:	589b      	ldr	r3, [r3, r2]
 8012a40:	3341      	adds	r3, #65	; 0x41
 8012a42:	33ff      	adds	r3, #255	; 0xff
 8012a44:	0019      	movs	r1, r3
 8012a46:	4a17      	ldr	r2, [pc, #92]	; (8012aa4 <PrepareFrame+0x27c>)
 8012a48:	2396      	movs	r3, #150	; 0x96
 8012a4a:	005b      	lsls	r3, r3, #1
 8012a4c:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	b2d9      	uxtb	r1, r3
 8012a52:	4a14      	ldr	r2, [pc, #80]	; (8012aa4 <PrepareFrame+0x27c>)
 8012a54:	2398      	movs	r3, #152	; 0x98
 8012a56:	005b      	lsls	r3, r3, #1
 8012a58:	54d1      	strb	r1, [r2, r3]
            break;
 8012a5a:	e01b      	b.n	8012a94 <PrepareFrame+0x26c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d01a      	beq.n	8012a98 <PrepareFrame+0x270>
 8012a62:	4b10      	ldr	r3, [pc, #64]	; (8012aa4 <PrepareFrame+0x27c>)
 8012a64:	4a12      	ldr	r2, [pc, #72]	; (8012ab0 <PrepareFrame+0x288>)
 8012a66:	5c9b      	ldrb	r3, [r3, r2]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d015      	beq.n	8012a98 <PrepareFrame+0x270>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8012a6c:	4815      	ldr	r0, [pc, #84]	; (8012ac4 <PrepareFrame+0x29c>)
 8012a6e:	4b0d      	ldr	r3, [pc, #52]	; (8012aa4 <PrepareFrame+0x27c>)
 8012a70:	4a0f      	ldr	r2, [pc, #60]	; (8012ab0 <PrepareFrame+0x288>)
 8012a72:	5c9b      	ldrb	r3, [r3, r2]
 8012a74:	b29a      	uxth	r2, r3
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	0019      	movs	r1, r3
 8012a7a:	f008 fdd9 	bl	801b630 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8012a7e:	4b09      	ldr	r3, [pc, #36]	; (8012aa4 <PrepareFrame+0x27c>)
 8012a80:	4a0b      	ldr	r2, [pc, #44]	; (8012ab0 <PrepareFrame+0x288>)
 8012a82:	5c9b      	ldrb	r3, [r3, r2]
 8012a84:	b29b      	uxth	r3, r3
 8012a86:	3301      	adds	r3, #1
 8012a88:	b29a      	uxth	r2, r3
 8012a8a:	4b06      	ldr	r3, [pc, #24]	; (8012aa4 <PrepareFrame+0x27c>)
 8012a8c:	801a      	strh	r2, [r3, #0]
            }
            break;
 8012a8e:	e003      	b.n	8012a98 <PrepareFrame+0x270>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012a90:	2302      	movs	r3, #2
 8012a92:	e003      	b.n	8012a9c <PrepareFrame+0x274>
            break;
 8012a94:	46c0      	nop			; (mov r8, r8)
 8012a96:	e000      	b.n	8012a9a <PrepareFrame+0x272>
            break;
 8012a98:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 8012a9a:	2300      	movs	r3, #0
}
 8012a9c:	0018      	movs	r0, r3
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	b009      	add	sp, #36	; 0x24
 8012aa2:	bd90      	pop	{r4, r7, pc}
 8012aa4:	200008f0 	.word	0x200008f0
 8012aa8:	00000414 	.word	0x00000414
 8012aac:	20000a28 	.word	0x20000a28
 8012ab0:	00000237 	.word	0x00000237
 8012ab4:	200008f2 	.word	0x200008f2
 8012ab8:	00000484 	.word	0x00000484
 8012abc:	00000441 	.word	0x00000441
 8012ac0:	20000a08 	.word	0x20000a08
 8012ac4:	200008f3 	.word	0x200008f3

08012ac8 <SendFrameOnChannel>:

LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8012ac8:	b590      	push	{r4, r7, lr}
 8012aca:	b089      	sub	sp, #36	; 0x24
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	0002      	movs	r2, r0
 8012ad0:	1dfb      	adds	r3, r7, #7
 8012ad2:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8012ad4:	230b      	movs	r3, #11
 8012ad6:	18fb      	adds	r3, r7, r3
 8012ad8:	2200      	movs	r2, #0
 8012ada:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 8012adc:	210c      	movs	r1, #12
 8012ade:	187b      	adds	r3, r7, r1
 8012ae0:	1dfa      	adds	r2, r7, #7
 8012ae2:	7812      	ldrb	r2, [r2, #0]
 8012ae4:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012ae6:	4b56      	ldr	r3, [pc, #344]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012ae8:	4a56      	ldr	r2, [pc, #344]	; (8012c44 <SendFrameOnChannel+0x17c>)
 8012aea:	589b      	ldr	r3, [r3, r2]
 8012aec:	22f9      	movs	r2, #249	; 0xf9
 8012aee:	569a      	ldrsb	r2, [r3, r2]
 8012af0:	187b      	adds	r3, r7, r1
 8012af2:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012af4:	4b52      	ldr	r3, [pc, #328]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012af6:	4a53      	ldr	r2, [pc, #332]	; (8012c44 <SendFrameOnChannel+0x17c>)
 8012af8:	589b      	ldr	r3, [r3, r2]
 8012afa:	22f8      	movs	r2, #248	; 0xf8
 8012afc:	569a      	ldrsb	r2, [r3, r2]
 8012afe:	187b      	adds	r3, r7, r1
 8012b00:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8012b02:	4b4f      	ldr	r3, [pc, #316]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012b04:	4a4f      	ldr	r2, [pc, #316]	; (8012c44 <SendFrameOnChannel+0x17c>)
 8012b06:	589a      	ldr	r2, [r3, r2]
 8012b08:	2398      	movs	r3, #152	; 0x98
 8012b0a:	005b      	lsls	r3, r3, #1
 8012b0c:	58d2      	ldr	r2, [r2, r3]
 8012b0e:	187b      	adds	r3, r7, r1
 8012b10:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8012b12:	4b4b      	ldr	r3, [pc, #300]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012b14:	4a4b      	ldr	r2, [pc, #300]	; (8012c44 <SendFrameOnChannel+0x17c>)
 8012b16:	589a      	ldr	r2, [r3, r2]
 8012b18:	239a      	movs	r3, #154	; 0x9a
 8012b1a:	005b      	lsls	r3, r3, #1
 8012b1c:	58d2      	ldr	r2, [r2, r3]
 8012b1e:	187b      	adds	r3, r7, r1
 8012b20:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8012b22:	4b47      	ldr	r3, [pc, #284]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012b24:	881a      	ldrh	r2, [r3, #0]
 8012b26:	187b      	adds	r3, r7, r1
 8012b28:	819a      	strh	r2, [r3, #12]


    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8012b2a:	f002 fa82 	bl	8015032 <LoRaMacClassBIsBeaconExpected>
 8012b2e:	1e03      	subs	r3, r0, #0
 8012b30:	d001      	beq.n	8012b36 <SendFrameOnChannel+0x6e>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8012b32:	230e      	movs	r3, #14
 8012b34:	e07f      	b.n	8012c36 <SendFrameOnChannel+0x16e>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8012b36:	4b42      	ldr	r3, [pc, #264]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012b38:	4a42      	ldr	r2, [pc, #264]	; (8012c44 <SendFrameOnChannel+0x17c>)
 8012b3a:	589b      	ldr	r3, [r3, r2]
 8012b3c:	22f0      	movs	r2, #240	; 0xf0
 8012b3e:	5c9b      	ldrb	r3, [r3, r2]
 8012b40:	2b01      	cmp	r3, #1
 8012b42:	d10d      	bne.n	8012b60 <SendFrameOnChannel+0x98>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8012b44:	f002 fa7b 	bl	801503e <LoRaMacClassBIsPingExpected>
 8012b48:	1e03      	subs	r3, r0, #0
 8012b4a:	d001      	beq.n	8012b50 <SendFrameOnChannel+0x88>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012b4c:	230f      	movs	r3, #15
 8012b4e:	e072      	b.n	8012c36 <SendFrameOnChannel+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8012b50:	f002 fa7b 	bl	801504a <LoRaMacClassBIsMulticastExpected>
 8012b54:	1e03      	subs	r3, r0, #0
 8012b56:	d001      	beq.n	8012b5c <SendFrameOnChannel+0x94>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012b58:	230f      	movs	r3, #15
 8012b5a:	e06c      	b.n	8012c36 <SendFrameOnChannel+0x16e>
        }
        else
        {
            LoRaMacClassBStopRxSlots( );
 8012b5c:	f002 fae8 	bl	8015130 <LoRaMacClassBStopRxSlots>
        }
    }
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8012b60:	4b37      	ldr	r3, [pc, #220]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012b62:	4a38      	ldr	r2, [pc, #224]	; (8012c44 <SendFrameOnChannel+0x17c>)
 8012b64:	589b      	ldr	r3, [r3, r2]
 8012b66:	7818      	ldrb	r0, [r3, #0]
 8012b68:	4b37      	ldr	r3, [pc, #220]	; (8012c48 <SendFrameOnChannel+0x180>)
 8012b6a:	240b      	movs	r4, #11
 8012b6c:	193a      	adds	r2, r7, r4
 8012b6e:	210c      	movs	r1, #12
 8012b70:	1879      	adds	r1, r7, r1
 8012b72:	f004 fdcc 	bl	801770e <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012b76:	4b32      	ldr	r3, [pc, #200]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012b78:	4a34      	ldr	r2, [pc, #208]	; (8012c4c <SendFrameOnChannel+0x184>)
 8012b7a:	2101      	movs	r1, #1
 8012b7c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012b7e:	4b30      	ldr	r3, [pc, #192]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012b80:	4a30      	ldr	r2, [pc, #192]	; (8012c44 <SendFrameOnChannel+0x17c>)
 8012b82:	589b      	ldr	r3, [r3, r2]
 8012b84:	22f9      	movs	r2, #249	; 0xf9
 8012b86:	569b      	ldrsb	r3, [r3, r2]
 8012b88:	b2d9      	uxtb	r1, r3
 8012b8a:	4b2d      	ldr	r3, [pc, #180]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012b8c:	4a30      	ldr	r2, [pc, #192]	; (8012c50 <SendFrameOnChannel+0x188>)
 8012b8e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 8012b90:	193b      	adds	r3, r7, r4
 8012b92:	2100      	movs	r1, #0
 8012b94:	5659      	ldrsb	r1, [r3, r1]
 8012b96:	4b2a      	ldr	r3, [pc, #168]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012b98:	4a2e      	ldr	r2, [pc, #184]	; (8012c54 <SendFrameOnChannel+0x18c>)
 8012b9a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 8012b9c:	1dfb      	adds	r3, r7, #7
 8012b9e:	781a      	ldrb	r2, [r3, #0]
 8012ba0:	4b27      	ldr	r3, [pc, #156]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012ba2:	492d      	ldr	r1, [pc, #180]	; (8012c58 <SendFrameOnChannel+0x190>)
 8012ba4:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012ba6:	4a26      	ldr	r2, [pc, #152]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012ba8:	2383      	movs	r3, #131	; 0x83
 8012baa:	00db      	lsls	r3, r3, #3
 8012bac:	58d2      	ldr	r2, [r2, r3]
 8012bae:	4b24      	ldr	r3, [pc, #144]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012bb0:	492a      	ldr	r1, [pc, #168]	; (8012c5c <SendFrameOnChannel+0x194>)
 8012bb2:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012bb4:	4a22      	ldr	r2, [pc, #136]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012bb6:	2383      	movs	r3, #131	; 0x83
 8012bb8:	00db      	lsls	r3, r3, #3
 8012bba:	58d2      	ldr	r2, [r2, r3]
 8012bbc:	4b20      	ldr	r3, [pc, #128]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012bbe:	4928      	ldr	r1, [pc, #160]	; (8012c60 <SendFrameOnChannel+0x198>)
 8012bc0:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8012bc2:	f002 fa48 	bl	8015056 <LoRaMacClassBIsBeaconModeActive>
 8012bc6:	1e03      	subs	r3, r0, #0
 8012bc8:	d00d      	beq.n	8012be6 <SendFrameOnChannel+0x11e>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8012bca:	4a1d      	ldr	r2, [pc, #116]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012bcc:	2383      	movs	r3, #131	; 0x83
 8012bce:	00db      	lsls	r3, r3, #3
 8012bd0:	58d3      	ldr	r3, [r2, r3]
 8012bd2:	0018      	movs	r0, r3
 8012bd4:	f002 faa3 	bl	801511e <LoRaMacClassBIsUplinkCollision>
 8012bd8:	0003      	movs	r3, r0
 8012bda:	61fb      	str	r3, [r7, #28]

        if( collisionTime > 0 )
 8012bdc:	69fb      	ldr	r3, [r7, #28]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d001      	beq.n	8012be6 <SendFrameOnChannel+0x11e>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8012be2:	2310      	movs	r3, #16
 8012be4:	e027      	b.n	8012c36 <SendFrameOnChannel+0x16e>
        }
    }

    LoRaMacClassBHaltBeaconing( );
 8012be6:	f002 fa46 	bl	8015076 <LoRaMacClassBHaltBeaconing>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012bea:	4a15      	ldr	r2, [pc, #84]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012bec:	23d0      	movs	r3, #208	; 0xd0
 8012bee:	009b      	lsls	r3, r3, #2
 8012bf0:	58d3      	ldr	r3, [r2, r3]
 8012bf2:	2202      	movs	r2, #2
 8012bf4:	431a      	orrs	r2, r3
 8012bf6:	0011      	movs	r1, r2
 8012bf8:	4a11      	ldr	r2, [pc, #68]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012bfa:	23d0      	movs	r3, #208	; 0xd0
 8012bfc:	009b      	lsls	r3, r3, #2
 8012bfe:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 8012c00:	4b0f      	ldr	r3, [pc, #60]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012c02:	4a18      	ldr	r2, [pc, #96]	; (8012c64 <SendFrameOnChannel+0x19c>)
 8012c04:	5c9b      	ldrb	r3, [r3, r2]
 8012c06:	2201      	movs	r2, #1
 8012c08:	4053      	eors	r3, r2
 8012c0a:	b2db      	uxtb	r3, r3
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d009      	beq.n	8012c24 <SendFrameOnChannel+0x15c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8012c10:	4a0b      	ldr	r2, [pc, #44]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012c12:	2382      	movs	r3, #130	; 0x82
 8012c14:	00db      	lsls	r3, r3, #3
 8012c16:	5cd3      	ldrb	r3, [r2, r3]
 8012c18:	3301      	adds	r3, #1
 8012c1a:	b2d9      	uxtb	r1, r3
 8012c1c:	4a08      	ldr	r2, [pc, #32]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012c1e:	2382      	movs	r3, #130	; 0x82
 8012c20:	00db      	lsls	r3, r3, #3
 8012c22:	54d1      	strb	r1, [r2, r3]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8012c24:	4b10      	ldr	r3, [pc, #64]	; (8012c68 <SendFrameOnChannel+0x1a0>)
 8012c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c28:	4a05      	ldr	r2, [pc, #20]	; (8012c40 <SendFrameOnChannel+0x178>)
 8012c2a:	8812      	ldrh	r2, [r2, #0]
 8012c2c:	b2d1      	uxtb	r1, r2
 8012c2e:	4a0f      	ldr	r2, [pc, #60]	; (8012c6c <SendFrameOnChannel+0x1a4>)
 8012c30:	0010      	movs	r0, r2
 8012c32:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8012c34:	2300      	movs	r3, #0
}
 8012c36:	0018      	movs	r0, r3
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	b009      	add	sp, #36	; 0x24
 8012c3c:	bd90      	pop	{r4, r7, pc}
 8012c3e:	46c0      	nop			; (mov r8, r8)
 8012c40:	200008f0 	.word	0x200008f0
 8012c44:	00000484 	.word	0x00000484
 8012c48:	20000d08 	.word	0x20000d08
 8012c4c:	0000043d 	.word	0x0000043d
 8012c50:	0000043e 	.word	0x0000043e
 8012c54:	0000043f 	.word	0x0000043f
 8012c58:	0000044c 	.word	0x0000044c
 8012c5c:	00000444 	.word	0x00000444
 8012c60:	00000454 	.word	0x00000454
 8012c64:	00000414 	.word	0x00000414
 8012c68:	0801cb08 	.word	0x0801cb08
 8012c6c:	200008f2 	.word	0x200008f2

08012c70 <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b086      	sub	sp, #24
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	0002      	movs	r2, r0
 8012c78:	1dbb      	adds	r3, r7, #6
 8012c7a:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8012c7c:	4b20      	ldr	r3, [pc, #128]	; (8012d00 <SetTxContinuousWave+0x90>)
 8012c7e:	4a21      	ldr	r2, [pc, #132]	; (8012d04 <SetTxContinuousWave+0x94>)
 8012c80:	5c9a      	ldrb	r2, [r3, r2]
 8012c82:	2108      	movs	r1, #8
 8012c84:	187b      	adds	r3, r7, r1
 8012c86:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012c88:	4b1d      	ldr	r3, [pc, #116]	; (8012d00 <SetTxContinuousWave+0x90>)
 8012c8a:	4a1f      	ldr	r2, [pc, #124]	; (8012d08 <SetTxContinuousWave+0x98>)
 8012c8c:	589b      	ldr	r3, [r3, r2]
 8012c8e:	22f9      	movs	r2, #249	; 0xf9
 8012c90:	569a      	ldrsb	r2, [r3, r2]
 8012c92:	187b      	adds	r3, r7, r1
 8012c94:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012c96:	4b1a      	ldr	r3, [pc, #104]	; (8012d00 <SetTxContinuousWave+0x90>)
 8012c98:	4a1b      	ldr	r2, [pc, #108]	; (8012d08 <SetTxContinuousWave+0x98>)
 8012c9a:	589b      	ldr	r3, [r3, r2]
 8012c9c:	22f8      	movs	r2, #248	; 0xf8
 8012c9e:	569a      	ldrsb	r2, [r3, r2]
 8012ca0:	187b      	adds	r3, r7, r1
 8012ca2:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8012ca4:	4b16      	ldr	r3, [pc, #88]	; (8012d00 <SetTxContinuousWave+0x90>)
 8012ca6:	4a18      	ldr	r2, [pc, #96]	; (8012d08 <SetTxContinuousWave+0x98>)
 8012ca8:	589a      	ldr	r2, [r3, r2]
 8012caa:	2398      	movs	r3, #152	; 0x98
 8012cac:	005b      	lsls	r3, r3, #1
 8012cae:	58d2      	ldr	r2, [r2, r3]
 8012cb0:	187b      	adds	r3, r7, r1
 8012cb2:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8012cb4:	4b12      	ldr	r3, [pc, #72]	; (8012d00 <SetTxContinuousWave+0x90>)
 8012cb6:	4a14      	ldr	r2, [pc, #80]	; (8012d08 <SetTxContinuousWave+0x98>)
 8012cb8:	589a      	ldr	r2, [r3, r2]
 8012cba:	239a      	movs	r3, #154	; 0x9a
 8012cbc:	005b      	lsls	r3, r3, #1
 8012cbe:	58d2      	ldr	r2, [r2, r3]
 8012cc0:	187b      	adds	r3, r7, r1
 8012cc2:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 8012cc4:	187b      	adds	r3, r7, r1
 8012cc6:	1dba      	adds	r2, r7, #6
 8012cc8:	8812      	ldrh	r2, [r2, #0]
 8012cca:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 8012ccc:	4b0c      	ldr	r3, [pc, #48]	; (8012d00 <SetTxContinuousWave+0x90>)
 8012cce:	4a0e      	ldr	r2, [pc, #56]	; (8012d08 <SetTxContinuousWave+0x98>)
 8012cd0:	589b      	ldr	r3, [r3, r2]
 8012cd2:	781b      	ldrb	r3, [r3, #0]
 8012cd4:	187a      	adds	r2, r7, r1
 8012cd6:	0011      	movs	r1, r2
 8012cd8:	0018      	movs	r0, r3
 8012cda:	f004 fdfc 	bl	80178d6 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012cde:	4a08      	ldr	r2, [pc, #32]	; (8012d00 <SetTxContinuousWave+0x90>)
 8012ce0:	23d0      	movs	r3, #208	; 0xd0
 8012ce2:	009b      	lsls	r3, r3, #2
 8012ce4:	58d3      	ldr	r3, [r2, r3]
 8012ce6:	2202      	movs	r2, #2
 8012ce8:	431a      	orrs	r2, r3
 8012cea:	0011      	movs	r1, r2
 8012cec:	4a04      	ldr	r2, [pc, #16]	; (8012d00 <SetTxContinuousWave+0x90>)
 8012cee:	23d0      	movs	r3, #208	; 0xd0
 8012cf0:	009b      	lsls	r3, r3, #2
 8012cf2:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8012cf4:	2300      	movs	r3, #0
}
 8012cf6:	0018      	movs	r0, r3
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	b006      	add	sp, #24
 8012cfc:	bd80      	pop	{r7, pc}
 8012cfe:	46c0      	nop			; (mov r8, r8)
 8012d00:	200008f0 	.word	0x200008f0
 8012d04:	00000415 	.word	0x00000415
 8012d08:	00000484 	.word	0x00000484

08012d0c <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b082      	sub	sp, #8
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6039      	str	r1, [r7, #0]
 8012d14:	0011      	movs	r1, r2
 8012d16:	1dbb      	adds	r3, r7, #6
 8012d18:	1c02      	adds	r2, r0, #0
 8012d1a:	801a      	strh	r2, [r3, #0]
 8012d1c:	1d7b      	adds	r3, r7, #5
 8012d1e:	1c0a      	adds	r2, r1, #0
 8012d20:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8012d22:	4b0c      	ldr	r3, [pc, #48]	; (8012d54 <SetTxContinuousWave1+0x48>)
 8012d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d26:	1d7a      	adds	r2, r7, #5
 8012d28:	2100      	movs	r1, #0
 8012d2a:	5651      	ldrsb	r1, [r2, r1]
 8012d2c:	1dba      	adds	r2, r7, #6
 8012d2e:	8812      	ldrh	r2, [r2, #0]
 8012d30:	6838      	ldr	r0, [r7, #0]
 8012d32:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012d34:	4a08      	ldr	r2, [pc, #32]	; (8012d58 <SetTxContinuousWave1+0x4c>)
 8012d36:	23d0      	movs	r3, #208	; 0xd0
 8012d38:	009b      	lsls	r3, r3, #2
 8012d3a:	58d3      	ldr	r3, [r2, r3]
 8012d3c:	2202      	movs	r2, #2
 8012d3e:	431a      	orrs	r2, r3
 8012d40:	0011      	movs	r1, r2
 8012d42:	4a05      	ldr	r2, [pc, #20]	; (8012d58 <SetTxContinuousWave1+0x4c>)
 8012d44:	23d0      	movs	r3, #208	; 0xd0
 8012d46:	009b      	lsls	r3, r3, #2
 8012d48:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8012d4a:	2300      	movs	r3, #0
}
 8012d4c:	0018      	movs	r0, r3
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	b002      	add	sp, #8
 8012d52:	bd80      	pop	{r7, pc}
 8012d54:	0801cb08 	.word	0x0801cb08
 8012d58:	200008f0 	.word	0x200008f0

08012d5c <GetCtxs>:

LoRaMacCtxs_t* GetCtxs( void )
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b082      	sub	sp, #8
 8012d60:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 8012d62:	4b20      	ldr	r3, [pc, #128]	; (8012de4 <GetCtxs+0x88>)
 8012d64:	4a20      	ldr	r2, [pc, #128]	; (8012de8 <GetCtxs+0x8c>)
 8012d66:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 8012d68:	4b1e      	ldr	r3, [pc, #120]	; (8012de4 <GetCtxs+0x88>)
 8012d6a:	22ee      	movs	r2, #238	; 0xee
 8012d6c:	0052      	lsls	r2, r2, #1
 8012d6e:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8012d70:	4b1e      	ldr	r3, [pc, #120]	; (8012dec <GetCtxs+0x90>)
 8012d72:	0018      	movs	r0, r3
 8012d74:	f003 fae2 	bl	801633c <LoRaMacCryptoGetNvmCtx>
 8012d78:	0002      	movs	r2, r0
 8012d7a:	4b1a      	ldr	r3, [pc, #104]	; (8012de4 <GetCtxs+0x88>)
 8012d7c:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 8012d7e:	2300      	movs	r3, #0
 8012d80:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8012d82:	4b1b      	ldr	r3, [pc, #108]	; (8012df0 <GetCtxs+0x94>)
 8012d84:	4a1b      	ldr	r2, [pc, #108]	; (8012df4 <GetCtxs+0x98>)
 8012d86:	589b      	ldr	r3, [r3, r2]
 8012d88:	781b      	ldrb	r3, [r3, #0]
 8012d8a:	1d3a      	adds	r2, r7, #4
 8012d8c:	0011      	movs	r1, r2
 8012d8e:	0018      	movs	r0, r3
 8012d90:	f004 fc21 	bl	80175d6 <RegionGetNvmCtx>
 8012d94:	0002      	movs	r2, r0
 8012d96:	4b13      	ldr	r3, [pc, #76]	; (8012de4 <GetCtxs+0x88>)
 8012d98:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 8012d9a:	687a      	ldr	r2, [r7, #4]
 8012d9c:	4b11      	ldr	r3, [pc, #68]	; (8012de4 <GetCtxs+0x88>)
 8012d9e:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 8012da0:	4b15      	ldr	r3, [pc, #84]	; (8012df8 <GetCtxs+0x9c>)
 8012da2:	0018      	movs	r0, r3
 8012da4:	f7fc f9a0 	bl	800f0e8 <SecureElementGetNvmCtx>
 8012da8:	0002      	movs	r2, r0
 8012daa:	4b0e      	ldr	r3, [pc, #56]	; (8012de4 <GetCtxs+0x88>)
 8012dac:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 8012dae:	4b13      	ldr	r3, [pc, #76]	; (8012dfc <GetCtxs+0xa0>)
 8012db0:	0018      	movs	r0, r3
 8012db2:	f002 fb1d 	bl	80153f0 <LoRaMacCommandsGetNvmCtx>
 8012db6:	0002      	movs	r2, r0
 8012db8:	4b0a      	ldr	r3, [pc, #40]	; (8012de4 <GetCtxs+0x88>)
 8012dba:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 8012dbc:	4b10      	ldr	r3, [pc, #64]	; (8012e00 <GetCtxs+0xa4>)
 8012dbe:	0018      	movs	r0, r3
 8012dc0:	f002 f8e3 	bl	8014f8a <LoRaMacClassBGetNvmCtx>
 8012dc4:	0002      	movs	r2, r0
 8012dc6:	4b07      	ldr	r3, [pc, #28]	; (8012de4 <GetCtxs+0x88>)
 8012dc8:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 8012dca:	4b0e      	ldr	r3, [pc, #56]	; (8012e04 <GetCtxs+0xa8>)
 8012dcc:	0018      	movs	r0, r3
 8012dce:	f002 fd01 	bl	80157d4 <LoRaMacConfirmQueueGetNvmCtx>
 8012dd2:	0002      	movs	r2, r0
 8012dd4:	4b03      	ldr	r3, [pc, #12]	; (8012de4 <GetCtxs+0x88>)
 8012dd6:	631a      	str	r2, [r3, #48]	; 0x30
    return &Contexts;
 8012dd8:	4b02      	ldr	r3, [pc, #8]	; (8012de4 <GetCtxs+0x88>)
}
 8012dda:	0018      	movs	r0, r3
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	b002      	add	sp, #8
 8012de0:	bd80      	pop	{r7, pc}
 8012de2:	46c0      	nop			; (mov r8, r8)
 8012de4:	20001660 	.word	0x20001660
 8012de8:	20000d78 	.word	0x20000d78
 8012dec:	20001674 	.word	0x20001674
 8012df0:	200008f0 	.word	0x200008f0
 8012df4:	00000484 	.word	0x00000484
 8012df8:	2000167c 	.word	0x2000167c
 8012dfc:	20001684 	.word	0x20001684
 8012e00:	2000168c 	.word	0x2000168c
 8012e04:	20001694 	.word	0x20001694

08012e08 <RestoreCtxs>:

LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b084      	sub	sp, #16
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d101      	bne.n	8012e1a <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012e16:	2303      	movs	r3, #3
 8012e18:	e05d      	b.n	8012ed6 <RestoreCtxs+0xce>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8012e1a:	4a31      	ldr	r2, [pc, #196]	; (8012ee0 <RestoreCtxs+0xd8>)
 8012e1c:	23d0      	movs	r3, #208	; 0xd0
 8012e1e:	009b      	lsls	r3, r3, #2
 8012e20:	58d3      	ldr	r3, [r2, r3]
 8012e22:	2b01      	cmp	r3, #1
 8012e24:	d001      	beq.n	8012e2a <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 8012e26:	2301      	movs	r3, #1
 8012e28:	e055      	b.n	8012ed6 <RestoreCtxs+0xce>
    }

    if( contexts->MacNvmCtx != NULL )
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d008      	beq.n	8012e44 <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6819      	ldr	r1, [r3, #0]
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	685b      	ldr	r3, [r3, #4]
 8012e3a:	b29a      	uxth	r2, r3
 8012e3c:	4b29      	ldr	r3, [pc, #164]	; (8012ee4 <RestoreCtxs+0xdc>)
 8012e3e:	0018      	movs	r0, r3
 8012e40:	f008 fbf6 	bl	801b630 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 8012e44:	2108      	movs	r1, #8
 8012e46:	187b      	adds	r3, r7, r1
 8012e48:	2202      	movs	r2, #2
 8012e4a:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	689a      	ldr	r2, [r3, #8]
 8012e50:	187b      	adds	r3, r7, r1
 8012e52:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012e54:	4b22      	ldr	r3, [pc, #136]	; (8012ee0 <RestoreCtxs+0xd8>)
 8012e56:	4a24      	ldr	r2, [pc, #144]	; (8012ee8 <RestoreCtxs+0xe0>)
 8012e58:	589b      	ldr	r3, [r3, r2]
 8012e5a:	781b      	ldrb	r3, [r3, #0]
 8012e5c:	187a      	adds	r2, r7, r1
 8012e5e:	0011      	movs	r1, r2
 8012e60:	0018      	movs	r0, r3
 8012e62:	f004 fba3 	bl	80175ac <RegionInitDefaults>

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	699b      	ldr	r3, [r3, #24]
 8012e6a:	0018      	movs	r0, r3
 8012e6c:	f7fc f924 	bl	800f0b8 <SecureElementRestoreNvmCtx>
 8012e70:	1e03      	subs	r3, r0, #0
 8012e72:	d001      	beq.n	8012e78 <RestoreCtxs+0x70>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012e74:	2311      	movs	r3, #17
 8012e76:	e02e      	b.n	8012ed6 <RestoreCtxs+0xce>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	691b      	ldr	r3, [r3, #16]
 8012e7c:	0018      	movs	r0, r3
 8012e7e:	f003 fa47 	bl	8016310 <LoRaMacCryptoRestoreNvmCtx>
 8012e82:	1e03      	subs	r3, r0, #0
 8012e84:	d001      	beq.n	8012e8a <RestoreCtxs+0x82>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012e86:	2311      	movs	r3, #17
 8012e88:	e025      	b.n	8012ed6 <RestoreCtxs+0xce>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	6a1b      	ldr	r3, [r3, #32]
 8012e8e:	0018      	movs	r0, r3
 8012e90:	f002 fa98 	bl	80153c4 <LoRaMacCommandsRestoreNvmCtx>
 8012e94:	1e03      	subs	r3, r0, #0
 8012e96:	d001      	beq.n	8012e9c <RestoreCtxs+0x94>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012e98:	2313      	movs	r3, #19
 8012e9a:	e01c      	b.n	8012ed6 <RestoreCtxs+0xce>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ea0:	0018      	movs	r0, r3
 8012ea2:	f002 f869 	bl	8014f78 <LoRaMacClassBRestoreNvmCtx>
 8012ea6:	0003      	movs	r3, r0
 8012ea8:	001a      	movs	r2, r3
 8012eaa:	2301      	movs	r3, #1
 8012eac:	4053      	eors	r3, r2
 8012eae:	b2db      	uxtb	r3, r3
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d001      	beq.n	8012eb8 <RestoreCtxs+0xb0>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 8012eb4:	2314      	movs	r3, #20
 8012eb6:	e00e      	b.n	8012ed6 <RestoreCtxs+0xce>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ebc:	0018      	movs	r0, r3
 8012ebe:	f002 fc73 	bl	80157a8 <LoRaMacConfirmQueueRestoreNvmCtx>
 8012ec2:	0003      	movs	r3, r0
 8012ec4:	001a      	movs	r2, r3
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	4053      	eors	r3, r2
 8012eca:	b2db      	uxtb	r3, r3
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d001      	beq.n	8012ed4 <RestoreCtxs+0xcc>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 8012ed0:	2315      	movs	r3, #21
 8012ed2:	e000      	b.n	8012ed6 <RestoreCtxs+0xce>
    }

    return LORAMAC_STATUS_OK;
 8012ed4:	2300      	movs	r3, #0
}
 8012ed6:	0018      	movs	r0, r3
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	b004      	add	sp, #16
 8012edc:	bd80      	pop	{r7, pc}
 8012ede:	46c0      	nop			; (mov r8, r8)
 8012ee0:	200008f0 	.word	0x200008f0
 8012ee4:	20000d78 	.word	0x20000d78
 8012ee8:	00000484 	.word	0x00000484

08012eec <DetermineFrameType>:

LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b082      	sub	sp, #8
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
 8012ef4:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d002      	beq.n	8012f02 <DetermineFrameType+0x16>
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d101      	bne.n	8012f06 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012f02:	2303      	movs	r3, #3
 8012f04:	e03b      	b.n	8012f7e <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	7b1b      	ldrb	r3, [r3, #12]
 8012f0a:	220f      	movs	r2, #15
 8012f0c:	4013      	ands	r3, r2
 8012f0e:	b2db      	uxtb	r3, r3
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d008      	beq.n	8012f26 <DetermineFrameType+0x3a>
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	2220      	movs	r2, #32
 8012f18:	5c9b      	ldrb	r3, [r3, r2]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d003      	beq.n	8012f26 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	2200      	movs	r2, #0
 8012f22:	701a      	strb	r2, [r3, #0]
 8012f24:	e02a      	b.n	8012f7c <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2228      	movs	r2, #40	; 0x28
 8012f2a:	5c9b      	ldrb	r3, [r3, r2]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d103      	bne.n	8012f38 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	2201      	movs	r2, #1
 8012f34:	701a      	strb	r2, [r3, #0]
 8012f36:	e021      	b.n	8012f7c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	7b1b      	ldrb	r3, [r3, #12]
 8012f3c:	220f      	movs	r2, #15
 8012f3e:	4013      	ands	r3, r2
 8012f40:	b2db      	uxtb	r3, r3
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d108      	bne.n	8012f58 <DetermineFrameType+0x6c>
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	2220      	movs	r2, #32
 8012f4a:	5c9b      	ldrb	r3, [r3, r2]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d103      	bne.n	8012f58 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	2202      	movs	r2, #2
 8012f54:	701a      	strb	r2, [r3, #0]
 8012f56:	e011      	b.n	8012f7c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	7b1b      	ldrb	r3, [r3, #12]
 8012f5c:	220f      	movs	r2, #15
 8012f5e:	4013      	ands	r3, r2
 8012f60:	b2db      	uxtb	r3, r3
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d108      	bne.n	8012f78 <DetermineFrameType+0x8c>
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2220      	movs	r2, #32
 8012f6a:	5c9b      	ldrb	r3, [r3, r2]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d003      	beq.n	8012f78 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8012f70:	683b      	ldr	r3, [r7, #0]
 8012f72:	2203      	movs	r2, #3
 8012f74:	701a      	strb	r2, [r3, #0]
 8012f76:	e001      	b.n	8012f7c <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8012f78:	2317      	movs	r3, #23
 8012f7a:	e000      	b.n	8012f7e <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8012f7c:	2300      	movs	r3, #0
}
 8012f7e:	0018      	movs	r0, r3
 8012f80:	46bd      	mov	sp, r7
 8012f82:	b002      	add	sp, #8
 8012f84:	bd80      	pop	{r7, pc}
	...

08012f88 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8012f8c:	4a14      	ldr	r2, [pc, #80]	; (8012fe0 <CheckRetransUnconfirmedUplink+0x58>)
 8012f8e:	2382      	movs	r3, #130	; 0x82
 8012f90:	00db      	lsls	r3, r3, #3
 8012f92:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8012f94:	4b12      	ldr	r3, [pc, #72]	; (8012fe0 <CheckRetransUnconfirmedUplink+0x58>)
 8012f96:	4913      	ldr	r1, [pc, #76]	; (8012fe4 <CheckRetransUnconfirmedUplink+0x5c>)
 8012f98:	5859      	ldr	r1, [r3, r1]
 8012f9a:	238c      	movs	r3, #140	; 0x8c
 8012f9c:	005b      	lsls	r3, r3, #1
 8012f9e:	5ccb      	ldrb	r3, [r1, r3]
    if( MacCtx.ChannelsNbTransCounter >=
 8012fa0:	429a      	cmp	r2, r3
 8012fa2:	d301      	bcc.n	8012fa8 <CheckRetransUnconfirmedUplink+0x20>
    {
        return true;
 8012fa4:	2301      	movs	r3, #1
 8012fa6:	e018      	b.n	8012fda <CheckRetransUnconfirmedUplink+0x52>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012fa8:	4b0d      	ldr	r3, [pc, #52]	; (8012fe0 <CheckRetransUnconfirmedUplink+0x58>)
 8012faa:	4a0f      	ldr	r2, [pc, #60]	; (8012fe8 <CheckRetransUnconfirmedUplink+0x60>)
 8012fac:	5c9b      	ldrb	r3, [r3, r2]
 8012fae:	2202      	movs	r2, #2
 8012fb0:	4013      	ands	r3, r2
 8012fb2:	b2db      	uxtb	r3, r3
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d00f      	beq.n	8012fd8 <CheckRetransUnconfirmedUplink+0x50>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8012fb8:	4b09      	ldr	r3, [pc, #36]	; (8012fe0 <CheckRetransUnconfirmedUplink+0x58>)
 8012fba:	4a0a      	ldr	r2, [pc, #40]	; (8012fe4 <CheckRetransUnconfirmedUplink+0x5c>)
 8012fbc:	589b      	ldr	r3, [r3, r2]
 8012fbe:	22f0      	movs	r2, #240	; 0xf0
 8012fc0:	5c9b      	ldrb	r3, [r3, r2]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d101      	bne.n	8012fca <CheckRetransUnconfirmedUplink+0x42>
        {
            return true;
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	e007      	b.n	8012fda <CheckRetransUnconfirmedUplink+0x52>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8012fca:	4b05      	ldr	r3, [pc, #20]	; (8012fe0 <CheckRetransUnconfirmedUplink+0x58>)
 8012fcc:	4a07      	ldr	r2, [pc, #28]	; (8012fec <CheckRetransUnconfirmedUplink+0x64>)
 8012fce:	5c9b      	ldrb	r3, [r3, r2]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d101      	bne.n	8012fd8 <CheckRetransUnconfirmedUplink+0x50>
            {
                return true;
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	e000      	b.n	8012fda <CheckRetransUnconfirmedUplink+0x52>
            }
        }
    }
    return false;
 8012fd8:	2300      	movs	r3, #0
}
 8012fda:	0018      	movs	r0, r3
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	200008f0 	.word	0x200008f0
 8012fe4:	00000484 	.word	0x00000484
 8012fe8:	00000481 	.word	0x00000481
 8012fec:	0000042d 	.word	0x0000042d

08012ff0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012ff4:	4b0e      	ldr	r3, [pc, #56]	; (8013030 <CheckRetransConfirmedUplink+0x40>)
 8012ff6:	4a0f      	ldr	r2, [pc, #60]	; (8013034 <CheckRetransConfirmedUplink+0x44>)
 8012ff8:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.AckTimeoutRetries )
 8012ffa:	4b0d      	ldr	r3, [pc, #52]	; (8013030 <CheckRetransConfirmedUplink+0x40>)
 8012ffc:	490e      	ldr	r1, [pc, #56]	; (8013038 <CheckRetransConfirmedUplink+0x48>)
 8012ffe:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013000:	429a      	cmp	r2, r3
 8013002:	d301      	bcc.n	8013008 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8013004:	2301      	movs	r3, #1
 8013006:	e010      	b.n	801302a <CheckRetransConfirmedUplink+0x3a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013008:	4b09      	ldr	r3, [pc, #36]	; (8013030 <CheckRetransConfirmedUplink+0x40>)
 801300a:	4a0c      	ldr	r2, [pc, #48]	; (801303c <CheckRetransConfirmedUplink+0x4c>)
 801300c:	5c9b      	ldrb	r3, [r3, r2]
 801300e:	2202      	movs	r2, #2
 8013010:	4013      	ands	r3, r2
 8013012:	b2db      	uxtb	r3, r3
 8013014:	2b00      	cmp	r3, #0
 8013016:	d007      	beq.n	8013028 <CheckRetransConfirmedUplink+0x38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8013018:	4a05      	ldr	r2, [pc, #20]	; (8013030 <CheckRetransConfirmedUplink+0x40>)
 801301a:	2388      	movs	r3, #136	; 0x88
 801301c:	00db      	lsls	r3, r3, #3
 801301e:	5cd3      	ldrb	r3, [r2, r3]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d001      	beq.n	8013028 <CheckRetransConfirmedUplink+0x38>
        {
            return true;
 8013024:	2301      	movs	r3, #1
 8013026:	e000      	b.n	801302a <CheckRetransConfirmedUplink+0x3a>
        }
    }
    return false;
 8013028:	2300      	movs	r3, #0
}
 801302a:	0018      	movs	r0, r3
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}
 8013030:	200008f0 	.word	0x200008f0
 8013034:	00000412 	.word	0x00000412
 8013038:	00000411 	.word	0x00000411
 801303c:	00000481 	.word	0x00000481

08013040 <StopRetransmission>:

static bool StopRetransmission( void )
{
 8013040:	b580      	push	{r7, lr}
 8013042:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013044:	4b1e      	ldr	r3, [pc, #120]	; (80130c0 <StopRetransmission+0x80>)
 8013046:	4a1f      	ldr	r2, [pc, #124]	; (80130c4 <StopRetransmission+0x84>)
 8013048:	5c9b      	ldrb	r3, [r3, r2]
 801304a:	2202      	movs	r2, #2
 801304c:	4013      	ands	r3, r2
 801304e:	b2db      	uxtb	r3, r3
 8013050:	2b00      	cmp	r3, #0
 8013052:	d009      	beq.n	8013068 <StopRetransmission+0x28>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8013054:	4b1a      	ldr	r3, [pc, #104]	; (80130c0 <StopRetransmission+0x80>)
 8013056:	4a1c      	ldr	r2, [pc, #112]	; (80130c8 <StopRetransmission+0x88>)
 8013058:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801305a:	2b00      	cmp	r3, #0
 801305c:	d013      	beq.n	8013086 <StopRetransmission+0x46>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
 801305e:	4b18      	ldr	r3, [pc, #96]	; (80130c0 <StopRetransmission+0x80>)
 8013060:	4a19      	ldr	r2, [pc, #100]	; (80130c8 <StopRetransmission+0x88>)
 8013062:	5c9b      	ldrb	r3, [r3, r2]
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8013064:	2b01      	cmp	r3, #1
 8013066:	d00e      	beq.n	8013086 <StopRetransmission+0x46>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8013068:	4b15      	ldr	r3, [pc, #84]	; (80130c0 <StopRetransmission+0x80>)
 801306a:	4a18      	ldr	r2, [pc, #96]	; (80130cc <StopRetransmission+0x8c>)
 801306c:	589b      	ldr	r3, [r3, r2]
 801306e:	22f2      	movs	r2, #242	; 0xf2
 8013070:	5c9b      	ldrb	r3, [r3, r2]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d007      	beq.n	8013086 <StopRetransmission+0x46>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8013076:	4b12      	ldr	r3, [pc, #72]	; (80130c0 <StopRetransmission+0x80>)
 8013078:	4a14      	ldr	r2, [pc, #80]	; (80130cc <StopRetransmission+0x8c>)
 801307a:	589b      	ldr	r3, [r3, r2]
 801307c:	22f4      	movs	r2, #244	; 0xf4
 801307e:	589a      	ldr	r2, [r3, r2]
 8013080:	3201      	adds	r2, #1
 8013082:	21f4      	movs	r1, #244	; 0xf4
 8013084:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8013086:	4a0e      	ldr	r2, [pc, #56]	; (80130c0 <StopRetransmission+0x80>)
 8013088:	2382      	movs	r3, #130	; 0x82
 801308a:	00db      	lsls	r3, r3, #3
 801308c:	2100      	movs	r1, #0
 801308e:	54d1      	strb	r1, [r2, r3]
    MacCtx.NodeAckRequested = false;
 8013090:	4b0b      	ldr	r3, [pc, #44]	; (80130c0 <StopRetransmission+0x80>)
 8013092:	4a0f      	ldr	r2, [pc, #60]	; (80130d0 <StopRetransmission+0x90>)
 8013094:	2100      	movs	r1, #0
 8013096:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 8013098:	4b09      	ldr	r3, [pc, #36]	; (80130c0 <StopRetransmission+0x80>)
 801309a:	4a0e      	ldr	r2, [pc, #56]	; (80130d4 <StopRetransmission+0x94>)
 801309c:	2100      	movs	r1, #0
 801309e:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80130a0:	4a07      	ldr	r2, [pc, #28]	; (80130c0 <StopRetransmission+0x80>)
 80130a2:	23d0      	movs	r3, #208	; 0xd0
 80130a4:	009b      	lsls	r3, r3, #2
 80130a6:	58d3      	ldr	r3, [r2, r3]
 80130a8:	2202      	movs	r2, #2
 80130aa:	4393      	bics	r3, r2
 80130ac:	0019      	movs	r1, r3
 80130ae:	4a04      	ldr	r2, [pc, #16]	; (80130c0 <StopRetransmission+0x80>)
 80130b0:	23d0      	movs	r3, #208	; 0xd0
 80130b2:	009b      	lsls	r3, r3, #2
 80130b4:	50d1      	str	r1, [r2, r3]

    return true;
 80130b6:	2301      	movs	r3, #1
}
 80130b8:	0018      	movs	r0, r3
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}
 80130be:	46c0      	nop			; (mov r8, r8)
 80130c0:	200008f0 	.word	0x200008f0
 80130c4:	00000481 	.word	0x00000481
 80130c8:	0000042d 	.word	0x0000042d
 80130cc:	00000484 	.word	0x00000484
 80130d0:	00000414 	.word	0x00000414
 80130d4:	00000413 	.word	0x00000413

080130d8 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b082      	sub	sp, #8
 80130dc:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 80130de:	4b21      	ldr	r3, [pc, #132]	; (8013164 <AckTimeoutRetriesProcess+0x8c>)
 80130e0:	4a21      	ldr	r2, [pc, #132]	; (8013168 <AckTimeoutRetriesProcess+0x90>)
 80130e2:	5c9a      	ldrb	r2, [r3, r2]
 80130e4:	4b1f      	ldr	r3, [pc, #124]	; (8013164 <AckTimeoutRetriesProcess+0x8c>)
 80130e6:	4921      	ldr	r1, [pc, #132]	; (801316c <AckTimeoutRetriesProcess+0x94>)
 80130e8:	5c5b      	ldrb	r3, [r3, r1]
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d236      	bcs.n	801315c <AckTimeoutRetriesProcess+0x84>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 80130ee:	4b1d      	ldr	r3, [pc, #116]	; (8013164 <AckTimeoutRetriesProcess+0x8c>)
 80130f0:	4a1d      	ldr	r2, [pc, #116]	; (8013168 <AckTimeoutRetriesProcess+0x90>)
 80130f2:	5c9b      	ldrb	r3, [r3, r2]
 80130f4:	3301      	adds	r3, #1
 80130f6:	b2d9      	uxtb	r1, r3
 80130f8:	4b1a      	ldr	r3, [pc, #104]	; (8013164 <AckTimeoutRetriesProcess+0x8c>)
 80130fa:	4a1b      	ldr	r2, [pc, #108]	; (8013168 <AckTimeoutRetriesProcess+0x90>)
 80130fc:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 80130fe:	4b19      	ldr	r3, [pc, #100]	; (8013164 <AckTimeoutRetriesProcess+0x8c>)
 8013100:	4a19      	ldr	r2, [pc, #100]	; (8013168 <AckTimeoutRetriesProcess+0x90>)
 8013102:	5c9b      	ldrb	r3, [r3, r2]
 8013104:	2201      	movs	r2, #1
 8013106:	4013      	ands	r3, r2
 8013108:	b2db      	uxtb	r3, r3
 801310a:	2b00      	cmp	r3, #0
 801310c:	d026      	beq.n	801315c <AckTimeoutRetriesProcess+0x84>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801310e:	1d3b      	adds	r3, r7, #4
 8013110:	2222      	movs	r2, #34	; 0x22
 8013112:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013114:	4b13      	ldr	r3, [pc, #76]	; (8013164 <AckTimeoutRetriesProcess+0x8c>)
 8013116:	4a16      	ldr	r2, [pc, #88]	; (8013170 <AckTimeoutRetriesProcess+0x98>)
 8013118:	589a      	ldr	r2, [r3, r2]
 801311a:	2396      	movs	r3, #150	; 0x96
 801311c:	005b      	lsls	r3, r3, #1
 801311e:	5cd2      	ldrb	r2, [r2, r3]
 8013120:	1d3b      	adds	r3, r7, #4
 8013122:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8013124:	4b0f      	ldr	r3, [pc, #60]	; (8013164 <AckTimeoutRetriesProcess+0x8c>)
 8013126:	4a12      	ldr	r2, [pc, #72]	; (8013170 <AckTimeoutRetriesProcess+0x98>)
 8013128:	589b      	ldr	r3, [r3, r2]
 801312a:	22f9      	movs	r2, #249	; 0xf9
 801312c:	569a      	ldrsb	r2, [r3, r2]
 801312e:	1d3b      	adds	r3, r7, #4
 8013130:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013132:	4b0c      	ldr	r3, [pc, #48]	; (8013164 <AckTimeoutRetriesProcess+0x8c>)
 8013134:	4a0e      	ldr	r2, [pc, #56]	; (8013170 <AckTimeoutRetriesProcess+0x98>)
 8013136:	589b      	ldr	r3, [r3, r2]
 8013138:	781b      	ldrb	r3, [r3, #0]
 801313a:	1d3a      	adds	r2, r7, #4
 801313c:	0011      	movs	r1, r2
 801313e:	0018      	movs	r0, r3
 8013140:	f004 f9f8 	bl	8017534 <RegionGetPhyParam>
 8013144:	0003      	movs	r3, r0
 8013146:	001a      	movs	r2, r3
 8013148:	003b      	movs	r3, r7
 801314a:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 801314c:	003b      	movs	r3, r7
 801314e:	6819      	ldr	r1, [r3, #0]
 8013150:	4b04      	ldr	r3, [pc, #16]	; (8013164 <AckTimeoutRetriesProcess+0x8c>)
 8013152:	4a07      	ldr	r2, [pc, #28]	; (8013170 <AckTimeoutRetriesProcess+0x98>)
 8013154:	589b      	ldr	r3, [r3, r2]
 8013156:	b249      	sxtb	r1, r1
 8013158:	22f9      	movs	r2, #249	; 0xf9
 801315a:	5499      	strb	r1, [r3, r2]
        }
    }
}
 801315c:	46c0      	nop			; (mov r8, r8)
 801315e:	46bd      	mov	sp, r7
 8013160:	b002      	add	sp, #8
 8013162:	bd80      	pop	{r7, pc}
 8013164:	200008f0 	.word	0x200008f0
 8013168:	00000412 	.word	0x00000412
 801316c:	00000411 	.word	0x00000411
 8013170:	00000484 	.word	0x00000484

08013174 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b082      	sub	sp, #8
 8013178:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 801317a:	4a16      	ldr	r2, [pc, #88]	; (80131d4 <AckTimeoutRetriesFinalize+0x60>)
 801317c:	2388      	movs	r3, #136	; 0x88
 801317e:	00db      	lsls	r3, r3, #3
 8013180:	5cd3      	ldrb	r3, [r2, r3]
 8013182:	2201      	movs	r2, #1
 8013184:	4053      	eors	r3, r2
 8013186:	b2db      	uxtb	r3, r3
 8013188:	2b00      	cmp	r3, #0
 801318a:	d018      	beq.n	80131be <AckTimeoutRetriesFinalize+0x4a>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 801318c:	003b      	movs	r3, r7
 801318e:	2201      	movs	r2, #1
 8013190:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8013192:	4b11      	ldr	r3, [pc, #68]	; (80131d8 <AckTimeoutRetriesFinalize+0x64>)
 8013194:	689a      	ldr	r2, [r3, #8]
 8013196:	003b      	movs	r3, r7
 8013198:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 801319a:	4b0e      	ldr	r3, [pc, #56]	; (80131d4 <AckTimeoutRetriesFinalize+0x60>)
 801319c:	4a0f      	ldr	r2, [pc, #60]	; (80131dc <AckTimeoutRetriesFinalize+0x68>)
 801319e:	589b      	ldr	r3, [r3, r2]
 80131a0:	781b      	ldrb	r3, [r3, #0]
 80131a2:	003a      	movs	r2, r7
 80131a4:	0011      	movs	r1, r2
 80131a6:	0018      	movs	r0, r3
 80131a8:	f004 fa00 	bl	80175ac <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 80131ac:	4b09      	ldr	r3, [pc, #36]	; (80131d4 <AckTimeoutRetriesFinalize+0x60>)
 80131ae:	4a0c      	ldr	r2, [pc, #48]	; (80131e0 <AckTimeoutRetriesFinalize+0x6c>)
 80131b0:	2100      	movs	r1, #0
 80131b2:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 80131b4:	4a07      	ldr	r2, [pc, #28]	; (80131d4 <AckTimeoutRetriesFinalize+0x60>)
 80131b6:	2388      	movs	r3, #136	; 0x88
 80131b8:	00db      	lsls	r3, r3, #3
 80131ba:	2100      	movs	r1, #0
 80131bc:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80131be:	4b05      	ldr	r3, [pc, #20]	; (80131d4 <AckTimeoutRetriesFinalize+0x60>)
 80131c0:	4a08      	ldr	r2, [pc, #32]	; (80131e4 <AckTimeoutRetriesFinalize+0x70>)
 80131c2:	5c99      	ldrb	r1, [r3, r2]
 80131c4:	4b03      	ldr	r3, [pc, #12]	; (80131d4 <AckTimeoutRetriesFinalize+0x60>)
 80131c6:	4a08      	ldr	r2, [pc, #32]	; (80131e8 <AckTimeoutRetriesFinalize+0x74>)
 80131c8:	5499      	strb	r1, [r3, r2]
}
 80131ca:	46c0      	nop			; (mov r8, r8)
 80131cc:	46bd      	mov	sp, r7
 80131ce:	b002      	add	sp, #8
 80131d0:	bd80      	pop	{r7, pc}
 80131d2:	46c0      	nop			; (mov r8, r8)
 80131d4:	200008f0 	.word	0x200008f0
 80131d8:	20001660 	.word	0x20001660
 80131dc:	00000484 	.word	0x00000484
 80131e0:	00000414 	.word	0x00000414
 80131e4:	00000412 	.word	0x00000412
 80131e8:	00000441 	.word	0x00000441

080131ec <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b082      	sub	sp, #8
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	0002      	movs	r2, r0
 80131f4:	1dfb      	adds	r3, r7, #7
 80131f6:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 80131f8:	4a0c      	ldr	r2, [pc, #48]	; (801322c <CallNvmCtxCallback+0x40>)
 80131fa:	23d2      	movs	r3, #210	; 0xd2
 80131fc:	009b      	lsls	r3, r3, #2
 80131fe:	58d3      	ldr	r3, [r2, r3]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d00f      	beq.n	8013224 <CallNvmCtxCallback+0x38>
 8013204:	4a09      	ldr	r2, [pc, #36]	; (801322c <CallNvmCtxCallback+0x40>)
 8013206:	23d2      	movs	r3, #210	; 0xd2
 8013208:	009b      	lsls	r3, r3, #2
 801320a:	58d3      	ldr	r3, [r2, r3]
 801320c:	689b      	ldr	r3, [r3, #8]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d008      	beq.n	8013224 <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8013212:	4a06      	ldr	r2, [pc, #24]	; (801322c <CallNvmCtxCallback+0x40>)
 8013214:	23d2      	movs	r3, #210	; 0xd2
 8013216:	009b      	lsls	r3, r3, #2
 8013218:	58d3      	ldr	r3, [r2, r3]
 801321a:	689b      	ldr	r3, [r3, #8]
 801321c:	1dfa      	adds	r2, r7, #7
 801321e:	7812      	ldrb	r2, [r2, #0]
 8013220:	0010      	movs	r0, r2
 8013222:	4798      	blx	r3
    }
}
 8013224:	46c0      	nop			; (mov r8, r8)
 8013226:	46bd      	mov	sp, r7
 8013228:	b002      	add	sp, #8
 801322a:	bd80      	pop	{r7, pc}
 801322c:	200008f0 	.word	0x200008f0

08013230 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 8013230:	b580      	push	{r7, lr}
 8013232:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8013234:	2000      	movs	r0, #0
 8013236:	f7ff ffd9 	bl	80131ec <CallNvmCtxCallback>
}
 801323a:	46c0      	nop			; (mov r8, r8)
 801323c:	46bd      	mov	sp, r7
 801323e:	bd80      	pop	{r7, pc}

08013240 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 8013240:	b580      	push	{r7, lr}
 8013242:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8013244:	2001      	movs	r0, #1
 8013246:	f7ff ffd1 	bl	80131ec <CallNvmCtxCallback>
}
 801324a:	46c0      	nop			; (mov r8, r8)
 801324c:	46bd      	mov	sp, r7
 801324e:	bd80      	pop	{r7, pc}

08013250 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 8013250:	b580      	push	{r7, lr}
 8013252:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8013254:	2002      	movs	r0, #2
 8013256:	f7ff ffc9 	bl	80131ec <CallNvmCtxCallback>
}
 801325a:	46c0      	nop			; (mov r8, r8)
 801325c:	46bd      	mov	sp, r7
 801325e:	bd80      	pop	{r7, pc}

08013260 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 8013260:	b580      	push	{r7, lr}
 8013262:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8013264:	2003      	movs	r0, #3
 8013266:	f7ff ffc1 	bl	80131ec <CallNvmCtxCallback>
}
 801326a:	46c0      	nop			; (mov r8, r8)
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}

08013270 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 8013270:	b580      	push	{r7, lr}
 8013272:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 8013274:	2004      	movs	r0, #4
 8013276:	f7ff ffb9 	bl	80131ec <CallNvmCtxCallback>
}
 801327a:	46c0      	nop			; (mov r8, r8)
 801327c:	46bd      	mov	sp, r7
 801327e:	bd80      	pop	{r7, pc}

08013280 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 8013280:	b580      	push	{r7, lr}
 8013282:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 8013284:	2005      	movs	r0, #5
 8013286:	f7ff ffb1 	bl	80131ec <CallNvmCtxCallback>
}
 801328a:	46c0      	nop			; (mov r8, r8)
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}

08013290 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 8013290:	b580      	push	{r7, lr}
 8013292:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 8013294:	2006      	movs	r0, #6
 8013296:	f7ff ffa9 	bl	80131ec <CallNvmCtxCallback>
}
 801329a:	46c0      	nop			; (mov r8, r8)
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}

080132a0 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80132a4:	4b0a      	ldr	r3, [pc, #40]	; (80132d0 <IsRequestPending+0x30>)
 80132a6:	4a0b      	ldr	r2, [pc, #44]	; (80132d4 <IsRequestPending+0x34>)
 80132a8:	5c9b      	ldrb	r3, [r3, r2]
 80132aa:	2204      	movs	r2, #4
 80132ac:	4013      	ands	r3, r2
 80132ae:	b2db      	uxtb	r3, r3
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d107      	bne.n	80132c4 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80132b4:	4b06      	ldr	r3, [pc, #24]	; (80132d0 <IsRequestPending+0x30>)
 80132b6:	4a07      	ldr	r2, [pc, #28]	; (80132d4 <IsRequestPending+0x34>)
 80132b8:	5c9b      	ldrb	r3, [r3, r2]
 80132ba:	2201      	movs	r2, #1
 80132bc:	4013      	ands	r3, r2
 80132be:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d001      	beq.n	80132c8 <IsRequestPending+0x28>
    {
        return 1;
 80132c4:	2301      	movs	r3, #1
 80132c6:	e000      	b.n	80132ca <IsRequestPending+0x2a>
    }
    return 0;
 80132c8:	2300      	movs	r3, #0
}
 80132ca:	0018      	movs	r0, r3
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bd80      	pop	{r7, pc}
 80132d0:	200008f0 	.word	0x200008f0
 80132d4:	00000481 	.word	0x00000481

080132d8 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80132d8:	b5b0      	push	{r4, r5, r7, lr}
 80132da:	b094      	sub	sp, #80	; 0x50
 80132dc:	af00      	add	r7, sp, #0
 80132de:	60f8      	str	r0, [r7, #12]
 80132e0:	60b9      	str	r1, [r7, #8]
 80132e2:	1dfb      	adds	r3, r7, #7
 80132e4:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d002      	beq.n	80132f2 <LoRaMacInitialization+0x1a>
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d101      	bne.n	80132f6 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80132f2:	2303      	movs	r3, #3
 80132f4:	e360      	b.n	80139b8 <LoRaMacInitialization+0x6e0>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d00b      	beq.n	8013316 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013302:	2b00      	cmp	r3, #0
 8013304:	d007      	beq.n	8013316 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801330a:	2b00      	cmp	r3, #0
 801330c:	d003      	beq.n	8013316 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013312:	2b00      	cmp	r3, #0
 8013314:	d101      	bne.n	801331a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013316:	2303      	movs	r3, #3
 8013318:	e34e      	b.n	80139b8 <LoRaMacInitialization+0x6e0>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801331a:	1dfb      	adds	r3, r7, #7
 801331c:	781b      	ldrb	r3, [r3, #0]
 801331e:	0018      	movs	r0, r3
 8013320:	f004 f8f7 	bl	8017512 <RegionIsActive>
 8013324:	0003      	movs	r3, r0
 8013326:	001a      	movs	r2, r3
 8013328:	2301      	movs	r3, #1
 801332a:	4053      	eors	r3, r2
 801332c:	b2db      	uxtb	r3, r3
 801332e:	2b00      	cmp	r3, #0
 8013330:	d001      	beq.n	8013336 <LoRaMacInitialization+0x5e>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013332:	2309      	movs	r3, #9
 8013334:	e340      	b.n	80139b8 <LoRaMacInitialization+0x6e0>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8013336:	4afd      	ldr	r2, [pc, #1012]	; (801372c <LoRaMacInitialization+0x454>)
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	0011      	movs	r1, r2
 801333c:	0018      	movs	r0, r3
 801333e:	f002 fa03 	bl	8015748 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 8013342:	23ee      	movs	r3, #238	; 0xee
 8013344:	005a      	lsls	r2, r3, #1
 8013346:	4bfa      	ldr	r3, [pc, #1000]	; (8013730 <LoRaMacInitialization+0x458>)
 8013348:	2100      	movs	r1, #0
 801334a:	0018      	movs	r0, r3
 801334c:	f008 f9ac 	bl	801b6a8 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8013350:	2391      	movs	r3, #145	; 0x91
 8013352:	00da      	lsls	r2, r3, #3
 8013354:	4bf7      	ldr	r3, [pc, #988]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013356:	2100      	movs	r1, #0
 8013358:	0018      	movs	r0, r3
 801335a:	f008 f9a5 	bl	801b6a8 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 801335e:	4bf5      	ldr	r3, [pc, #980]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013360:	49f5      	ldr	r1, [pc, #980]	; (8013738 <LoRaMacInitialization+0x460>)
 8013362:	4af3      	ldr	r2, [pc, #972]	; (8013730 <LoRaMacInitialization+0x458>)
 8013364:	505a      	str	r2, [r3, r1]

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013366:	4bf3      	ldr	r3, [pc, #972]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013368:	4af4      	ldr	r2, [pc, #976]	; (801373c <LoRaMacInitialization+0x464>)
 801336a:	2101      	movs	r1, #1
 801336c:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetries = 1;
 801336e:	4bf1      	ldr	r3, [pc, #964]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013370:	4af3      	ldr	r2, [pc, #972]	; (8013740 <LoRaMacInitialization+0x468>)
 8013372:	2101      	movs	r1, #1
 8013374:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 8013376:	4bef      	ldr	r3, [pc, #956]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013378:	4aef      	ldr	r2, [pc, #956]	; (8013738 <LoRaMacInitialization+0x460>)
 801337a:	589b      	ldr	r3, [r3, r2]
 801337c:	1dfa      	adds	r2, r7, #7
 801337e:	7812      	ldrb	r2, [r2, #0]
 8013380:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8013382:	4bec      	ldr	r3, [pc, #944]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013384:	4aec      	ldr	r2, [pc, #944]	; (8013738 <LoRaMacInitialization+0x460>)
 8013386:	589b      	ldr	r3, [r3, r2]
 8013388:	22f0      	movs	r2, #240	; 0xf0
 801338a:	2100      	movs	r1, #0
 801338c:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 801338e:	4be9      	ldr	r3, [pc, #932]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013390:	4ae9      	ldr	r2, [pc, #932]	; (8013738 <LoRaMacInitialization+0x460>)
 8013392:	589a      	ldr	r2, [r3, r2]
 8013394:	2340      	movs	r3, #64	; 0x40
 8013396:	33ff      	adds	r3, #255	; 0xff
 8013398:	2100      	movs	r1, #0
 801339a:	54d1      	strb	r1, [r2, r3]

    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
 801339c:	211c      	movs	r1, #28
 801339e:	187b      	adds	r3, r7, r1
 80133a0:	2201      	movs	r2, #1
 80133a2:	70da      	strb	r2, [r3, #3]
    lrWanVersion.Fields.Minor    = 0;
 80133a4:	187b      	adds	r3, r7, r1
 80133a6:	2200      	movs	r2, #0
 80133a8:	709a      	strb	r2, [r3, #2]
    lrWanVersion.Fields.Revision = 3;
 80133aa:	187b      	adds	r3, r7, r1
 80133ac:	2203      	movs	r2, #3
 80133ae:	705a      	strb	r2, [r3, #1]
    lrWanVersion.Fields.Rfu      = 0;
 80133b0:	187b      	adds	r3, r7, r1
 80133b2:	2200      	movs	r2, #0
 80133b4:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->Version = lrWanVersion;
 80133b6:	4bdf      	ldr	r3, [pc, #892]	; (8013734 <LoRaMacInitialization+0x45c>)
 80133b8:	4adf      	ldr	r2, [pc, #892]	; (8013738 <LoRaMacInitialization+0x460>)
 80133ba:	589a      	ldr	r2, [r3, r2]
 80133bc:	23e8      	movs	r3, #232	; 0xe8
 80133be:	005b      	lsls	r3, r3, #1
 80133c0:	69f9      	ldr	r1, [r7, #28]
 80133c2:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80133c4:	254c      	movs	r5, #76	; 0x4c
 80133c6:	197b      	adds	r3, r7, r5
 80133c8:	220f      	movs	r2, #15
 80133ca:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80133cc:	4bd9      	ldr	r3, [pc, #868]	; (8013734 <LoRaMacInitialization+0x45c>)
 80133ce:	4ada      	ldr	r2, [pc, #872]	; (8013738 <LoRaMacInitialization+0x460>)
 80133d0:	589b      	ldr	r3, [r3, r2]
 80133d2:	781b      	ldrb	r3, [r3, #0]
 80133d4:	197a      	adds	r2, r7, r5
 80133d6:	0011      	movs	r1, r2
 80133d8:	0018      	movs	r0, r3
 80133da:	f004 f8ab 	bl	8017534 <RegionGetPhyParam>
 80133de:	0003      	movs	r3, r0
 80133e0:	001a      	movs	r2, r3
 80133e2:	2448      	movs	r4, #72	; 0x48
 80133e4:	193b      	adds	r3, r7, r4
 80133e6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 80133e8:	193b      	adds	r3, r7, r4
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	4ad1      	ldr	r2, [pc, #836]	; (8013734 <LoRaMacInitialization+0x45c>)
 80133ee:	49d2      	ldr	r1, [pc, #840]	; (8013738 <LoRaMacInitialization+0x460>)
 80133f0:	5852      	ldr	r2, [r2, r1]
 80133f2:	1e59      	subs	r1, r3, #1
 80133f4:	418b      	sbcs	r3, r1
 80133f6:	b2d9      	uxtb	r1, r3
 80133f8:	233e      	movs	r3, #62	; 0x3e
 80133fa:	33ff      	adds	r3, #255	; 0xff
 80133fc:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80133fe:	197b      	adds	r3, r7, r5
 8013400:	220a      	movs	r2, #10
 8013402:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013404:	4bcb      	ldr	r3, [pc, #812]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013406:	4acc      	ldr	r2, [pc, #816]	; (8013738 <LoRaMacInitialization+0x460>)
 8013408:	589b      	ldr	r3, [r3, r2]
 801340a:	781b      	ldrb	r3, [r3, #0]
 801340c:	197a      	adds	r2, r7, r5
 801340e:	0011      	movs	r1, r2
 8013410:	0018      	movs	r0, r3
 8013412:	f004 f88f 	bl	8017534 <RegionGetPhyParam>
 8013416:	0003      	movs	r3, r0
 8013418:	001a      	movs	r2, r3
 801341a:	193b      	adds	r3, r7, r4
 801341c:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 801341e:	193b      	adds	r3, r7, r4
 8013420:	6819      	ldr	r1, [r3, #0]
 8013422:	4bc4      	ldr	r3, [pc, #784]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013424:	4ac4      	ldr	r2, [pc, #784]	; (8013738 <LoRaMacInitialization+0x460>)
 8013426:	589b      	ldr	r3, [r3, r2]
 8013428:	b24a      	sxtb	r2, r1
 801342a:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 801342c:	197b      	adds	r3, r7, r5
 801342e:	2206      	movs	r2, #6
 8013430:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013432:	4bc0      	ldr	r3, [pc, #768]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013434:	4ac0      	ldr	r2, [pc, #768]	; (8013738 <LoRaMacInitialization+0x460>)
 8013436:	589b      	ldr	r3, [r3, r2]
 8013438:	781b      	ldrb	r3, [r3, #0]
 801343a:	197a      	adds	r2, r7, r5
 801343c:	0011      	movs	r1, r2
 801343e:	0018      	movs	r0, r3
 8013440:	f004 f878 	bl	8017534 <RegionGetPhyParam>
 8013444:	0003      	movs	r3, r0
 8013446:	001a      	movs	r2, r3
 8013448:	193b      	adds	r3, r7, r4
 801344a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 801344c:	193b      	adds	r3, r7, r4
 801344e:	6819      	ldr	r1, [r3, #0]
 8013450:	4bb8      	ldr	r3, [pc, #736]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013452:	4ab9      	ldr	r2, [pc, #740]	; (8013738 <LoRaMacInitialization+0x460>)
 8013454:	589b      	ldr	r3, [r3, r2]
 8013456:	b24a      	sxtb	r2, r1
 8013458:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801345a:	197b      	adds	r3, r7, r5
 801345c:	2210      	movs	r2, #16
 801345e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013460:	4bb4      	ldr	r3, [pc, #720]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013462:	4ab5      	ldr	r2, [pc, #724]	; (8013738 <LoRaMacInitialization+0x460>)
 8013464:	589b      	ldr	r3, [r3, r2]
 8013466:	781b      	ldrb	r3, [r3, #0]
 8013468:	197a      	adds	r2, r7, r5
 801346a:	0011      	movs	r1, r2
 801346c:	0018      	movs	r0, r3
 801346e:	f004 f861 	bl	8017534 <RegionGetPhyParam>
 8013472:	0003      	movs	r3, r0
 8013474:	001a      	movs	r2, r3
 8013476:	193b      	adds	r3, r7, r4
 8013478:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 801347a:	4bae      	ldr	r3, [pc, #696]	; (8013734 <LoRaMacInitialization+0x45c>)
 801347c:	4aae      	ldr	r2, [pc, #696]	; (8013738 <LoRaMacInitialization+0x460>)
 801347e:	589b      	ldr	r3, [r3, r2]
 8013480:	193a      	adds	r2, r7, r4
 8013482:	6812      	ldr	r2, [r2, #0]
 8013484:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8013486:	197b      	adds	r3, r7, r5
 8013488:	2211      	movs	r2, #17
 801348a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801348c:	4ba9      	ldr	r3, [pc, #676]	; (8013734 <LoRaMacInitialization+0x45c>)
 801348e:	4aaa      	ldr	r2, [pc, #680]	; (8013738 <LoRaMacInitialization+0x460>)
 8013490:	589b      	ldr	r3, [r3, r2]
 8013492:	781b      	ldrb	r3, [r3, #0]
 8013494:	197a      	adds	r2, r7, r5
 8013496:	0011      	movs	r1, r2
 8013498:	0018      	movs	r0, r3
 801349a:	f004 f84b 	bl	8017534 <RegionGetPhyParam>
 801349e:	0003      	movs	r3, r0
 80134a0:	001a      	movs	r2, r3
 80134a2:	193b      	adds	r3, r7, r4
 80134a4:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80134a6:	4ba3      	ldr	r3, [pc, #652]	; (8013734 <LoRaMacInitialization+0x45c>)
 80134a8:	4aa3      	ldr	r2, [pc, #652]	; (8013738 <LoRaMacInitialization+0x460>)
 80134aa:	589b      	ldr	r3, [r3, r2]
 80134ac:	193a      	adds	r2, r7, r4
 80134ae:	6812      	ldr	r2, [r2, #0]
 80134b0:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80134b2:	197b      	adds	r3, r7, r5
 80134b4:	2212      	movs	r2, #18
 80134b6:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80134b8:	4b9e      	ldr	r3, [pc, #632]	; (8013734 <LoRaMacInitialization+0x45c>)
 80134ba:	4a9f      	ldr	r2, [pc, #636]	; (8013738 <LoRaMacInitialization+0x460>)
 80134bc:	589b      	ldr	r3, [r3, r2]
 80134be:	781b      	ldrb	r3, [r3, #0]
 80134c0:	197a      	adds	r2, r7, r5
 80134c2:	0011      	movs	r1, r2
 80134c4:	0018      	movs	r0, r3
 80134c6:	f004 f835 	bl	8017534 <RegionGetPhyParam>
 80134ca:	0003      	movs	r3, r0
 80134cc:	001a      	movs	r2, r3
 80134ce:	193b      	adds	r3, r7, r4
 80134d0:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80134d2:	4b98      	ldr	r3, [pc, #608]	; (8013734 <LoRaMacInitialization+0x45c>)
 80134d4:	4a98      	ldr	r2, [pc, #608]	; (8013738 <LoRaMacInitialization+0x460>)
 80134d6:	589b      	ldr	r3, [r3, r2]
 80134d8:	193a      	adds	r2, r7, r4
 80134da:	6812      	ldr	r2, [r2, #0]
 80134dc:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80134de:	197b      	adds	r3, r7, r5
 80134e0:	2213      	movs	r2, #19
 80134e2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80134e4:	4b93      	ldr	r3, [pc, #588]	; (8013734 <LoRaMacInitialization+0x45c>)
 80134e6:	4a94      	ldr	r2, [pc, #592]	; (8013738 <LoRaMacInitialization+0x460>)
 80134e8:	589b      	ldr	r3, [r3, r2]
 80134ea:	781b      	ldrb	r3, [r3, #0]
 80134ec:	197a      	adds	r2, r7, r5
 80134ee:	0011      	movs	r1, r2
 80134f0:	0018      	movs	r0, r3
 80134f2:	f004 f81f 	bl	8017534 <RegionGetPhyParam>
 80134f6:	0003      	movs	r3, r0
 80134f8:	001a      	movs	r2, r3
 80134fa:	193b      	adds	r3, r7, r4
 80134fc:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80134fe:	4b8d      	ldr	r3, [pc, #564]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013500:	4a8d      	ldr	r2, [pc, #564]	; (8013738 <LoRaMacInitialization+0x460>)
 8013502:	589b      	ldr	r3, [r3, r2]
 8013504:	193a      	adds	r2, r7, r4
 8013506:	6812      	ldr	r2, [r2, #0]
 8013508:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 801350a:	197b      	adds	r3, r7, r5
 801350c:	2214      	movs	r2, #20
 801350e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013510:	4b88      	ldr	r3, [pc, #544]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013512:	4a89      	ldr	r2, [pc, #548]	; (8013738 <LoRaMacInitialization+0x460>)
 8013514:	589b      	ldr	r3, [r3, r2]
 8013516:	781b      	ldrb	r3, [r3, #0]
 8013518:	197a      	adds	r2, r7, r5
 801351a:	0011      	movs	r1, r2
 801351c:	0018      	movs	r0, r3
 801351e:	f004 f809 	bl	8017534 <RegionGetPhyParam>
 8013522:	0003      	movs	r3, r0
 8013524:	001a      	movs	r2, r3
 8013526:	193b      	adds	r3, r7, r4
 8013528:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801352a:	4b82      	ldr	r3, [pc, #520]	; (8013734 <LoRaMacInitialization+0x45c>)
 801352c:	4a82      	ldr	r2, [pc, #520]	; (8013738 <LoRaMacInitialization+0x460>)
 801352e:	589b      	ldr	r3, [r3, r2]
 8013530:	193a      	adds	r2, r7, r4
 8013532:	6812      	ldr	r2, [r2, #0]
 8013534:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8013536:	197b      	adds	r3, r7, r5
 8013538:	2217      	movs	r2, #23
 801353a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801353c:	4b7d      	ldr	r3, [pc, #500]	; (8013734 <LoRaMacInitialization+0x45c>)
 801353e:	4a7e      	ldr	r2, [pc, #504]	; (8013738 <LoRaMacInitialization+0x460>)
 8013540:	589b      	ldr	r3, [r3, r2]
 8013542:	781b      	ldrb	r3, [r3, #0]
 8013544:	197a      	adds	r2, r7, r5
 8013546:	0011      	movs	r1, r2
 8013548:	0018      	movs	r0, r3
 801354a:	f003 fff3 	bl	8017534 <RegionGetPhyParam>
 801354e:	0003      	movs	r3, r0
 8013550:	001a      	movs	r2, r3
 8013552:	193b      	adds	r3, r7, r4
 8013554:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8013556:	193b      	adds	r3, r7, r4
 8013558:	6819      	ldr	r1, [r3, #0]
 801355a:	4b76      	ldr	r3, [pc, #472]	; (8013734 <LoRaMacInitialization+0x45c>)
 801355c:	4a76      	ldr	r2, [pc, #472]	; (8013738 <LoRaMacInitialization+0x460>)
 801355e:	589b      	ldr	r3, [r3, r2]
 8013560:	b2c9      	uxtb	r1, r1
 8013562:	2225      	movs	r2, #37	; 0x25
 8013564:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8013566:	197b      	adds	r3, r7, r5
 8013568:	2218      	movs	r2, #24
 801356a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801356c:	4b71      	ldr	r3, [pc, #452]	; (8013734 <LoRaMacInitialization+0x45c>)
 801356e:	4a72      	ldr	r2, [pc, #456]	; (8013738 <LoRaMacInitialization+0x460>)
 8013570:	589b      	ldr	r3, [r3, r2]
 8013572:	781b      	ldrb	r3, [r3, #0]
 8013574:	197a      	adds	r2, r7, r5
 8013576:	0011      	movs	r1, r2
 8013578:	0018      	movs	r0, r3
 801357a:	f003 ffdb 	bl	8017534 <RegionGetPhyParam>
 801357e:	0003      	movs	r3, r0
 8013580:	001a      	movs	r2, r3
 8013582:	193b      	adds	r3, r7, r4
 8013584:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8013586:	4b6b      	ldr	r3, [pc, #428]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013588:	4a6b      	ldr	r2, [pc, #428]	; (8013738 <LoRaMacInitialization+0x460>)
 801358a:	589b      	ldr	r3, [r3, r2]
 801358c:	193a      	adds	r2, r7, r4
 801358e:	6812      	ldr	r2, [r2, #0]
 8013590:	629a      	str	r2, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8013592:	4b68      	ldr	r3, [pc, #416]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013594:	4a68      	ldr	r2, [pc, #416]	; (8013738 <LoRaMacInitialization+0x460>)
 8013596:	589b      	ldr	r3, [r3, r2]
 8013598:	193a      	adds	r2, r7, r4
 801359a:	6812      	ldr	r2, [r2, #0]
 801359c:	631a      	str	r2, [r3, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 801359e:	197b      	adds	r3, r7, r5
 80135a0:	2219      	movs	r2, #25
 80135a2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80135a4:	4b63      	ldr	r3, [pc, #396]	; (8013734 <LoRaMacInitialization+0x45c>)
 80135a6:	4a64      	ldr	r2, [pc, #400]	; (8013738 <LoRaMacInitialization+0x460>)
 80135a8:	589b      	ldr	r3, [r3, r2]
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	197a      	adds	r2, r7, r5
 80135ae:	0011      	movs	r1, r2
 80135b0:	0018      	movs	r0, r3
 80135b2:	f003 ffbf 	bl	8017534 <RegionGetPhyParam>
 80135b6:	0003      	movs	r3, r0
 80135b8:	001a      	movs	r2, r3
 80135ba:	193b      	adds	r3, r7, r4
 80135bc:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80135be:	193b      	adds	r3, r7, r4
 80135c0:	6819      	ldr	r1, [r3, #0]
 80135c2:	4b5c      	ldr	r3, [pc, #368]	; (8013734 <LoRaMacInitialization+0x45c>)
 80135c4:	4a5c      	ldr	r2, [pc, #368]	; (8013738 <LoRaMacInitialization+0x460>)
 80135c6:	589b      	ldr	r3, [r3, r2]
 80135c8:	b2c9      	uxtb	r1, r1
 80135ca:	222c      	movs	r2, #44	; 0x2c
 80135cc:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80135ce:	193b      	adds	r3, r7, r4
 80135d0:	6819      	ldr	r1, [r3, #0]
 80135d2:	4b58      	ldr	r3, [pc, #352]	; (8013734 <LoRaMacInitialization+0x45c>)
 80135d4:	4a58      	ldr	r2, [pc, #352]	; (8013738 <LoRaMacInitialization+0x460>)
 80135d6:	589b      	ldr	r3, [r3, r2]
 80135d8:	b2c9      	uxtb	r1, r1
 80135da:	2234      	movs	r2, #52	; 0x34
 80135dc:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80135de:	197b      	adds	r3, r7, r5
 80135e0:	221e      	movs	r2, #30
 80135e2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80135e4:	4b53      	ldr	r3, [pc, #332]	; (8013734 <LoRaMacInitialization+0x45c>)
 80135e6:	4a54      	ldr	r2, [pc, #336]	; (8013738 <LoRaMacInitialization+0x460>)
 80135e8:	589b      	ldr	r3, [r3, r2]
 80135ea:	781b      	ldrb	r3, [r3, #0]
 80135ec:	197a      	adds	r2, r7, r5
 80135ee:	0011      	movs	r1, r2
 80135f0:	0018      	movs	r0, r3
 80135f2:	f003 ff9f 	bl	8017534 <RegionGetPhyParam>
 80135f6:	0003      	movs	r3, r0
 80135f8:	001a      	movs	r2, r3
 80135fa:	193b      	adds	r3, r7, r4
 80135fc:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80135fe:	193b      	adds	r3, r7, r4
 8013600:	6819      	ldr	r1, [r3, #0]
 8013602:	4b4c      	ldr	r3, [pc, #304]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013604:	4a4c      	ldr	r2, [pc, #304]	; (8013738 <LoRaMacInitialization+0x460>)
 8013606:	589b      	ldr	r3, [r3, r2]
 8013608:	b2c9      	uxtb	r1, r1
 801360a:	2238      	movs	r2, #56	; 0x38
 801360c:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801360e:	197b      	adds	r3, r7, r5
 8013610:	221f      	movs	r2, #31
 8013612:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013614:	4b47      	ldr	r3, [pc, #284]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013616:	4a48      	ldr	r2, [pc, #288]	; (8013738 <LoRaMacInitialization+0x460>)
 8013618:	589b      	ldr	r3, [r3, r2]
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	197a      	adds	r2, r7, r5
 801361e:	0011      	movs	r1, r2
 8013620:	0018      	movs	r0, r3
 8013622:	f003 ff87 	bl	8017534 <RegionGetPhyParam>
 8013626:	0003      	movs	r3, r0
 8013628:	001a      	movs	r2, r3
 801362a:	193b      	adds	r3, r7, r4
 801362c:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 801362e:	193b      	adds	r3, r7, r4
 8013630:	6819      	ldr	r1, [r3, #0]
 8013632:	4b40      	ldr	r3, [pc, #256]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013634:	4a40      	ldr	r2, [pc, #256]	; (8013738 <LoRaMacInitialization+0x460>)
 8013636:	589b      	ldr	r3, [r3, r2]
 8013638:	b2c9      	uxtb	r1, r1
 801363a:	2239      	movs	r2, #57	; 0x39
 801363c:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 801363e:	197b      	adds	r3, r7, r5
 8013640:	2220      	movs	r2, #32
 8013642:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013644:	4b3b      	ldr	r3, [pc, #236]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013646:	4a3c      	ldr	r2, [pc, #240]	; (8013738 <LoRaMacInitialization+0x460>)
 8013648:	589b      	ldr	r3, [r3, r2]
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	197a      	adds	r2, r7, r5
 801364e:	0011      	movs	r1, r2
 8013650:	0018      	movs	r0, r3
 8013652:	f003 ff6f 	bl	8017534 <RegionGetPhyParam>
 8013656:	0003      	movs	r3, r0
 8013658:	001a      	movs	r2, r3
 801365a:	193b      	adds	r3, r7, r4
 801365c:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 801365e:	4b35      	ldr	r3, [pc, #212]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013660:	4a35      	ldr	r2, [pc, #212]	; (8013738 <LoRaMacInitialization+0x460>)
 8013662:	589b      	ldr	r3, [r3, r2]
 8013664:	193a      	adds	r2, r7, r4
 8013666:	6812      	ldr	r2, [r2, #0]
 8013668:	63da      	str	r2, [r3, #60]	; 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 801366a:	197b      	adds	r3, r7, r5
 801366c:	2221      	movs	r2, #33	; 0x21
 801366e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013670:	4b30      	ldr	r3, [pc, #192]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013672:	4a31      	ldr	r2, [pc, #196]	; (8013738 <LoRaMacInitialization+0x460>)
 8013674:	589b      	ldr	r3, [r3, r2]
 8013676:	781b      	ldrb	r3, [r3, #0]
 8013678:	197a      	adds	r2, r7, r5
 801367a:	0011      	movs	r1, r2
 801367c:	0018      	movs	r0, r3
 801367e:	f003 ff59 	bl	8017534 <RegionGetPhyParam>
 8013682:	0003      	movs	r3, r0
 8013684:	001a      	movs	r2, r3
 8013686:	193b      	adds	r3, r7, r4
 8013688:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 801368a:	4b2a      	ldr	r3, [pc, #168]	; (8013734 <LoRaMacInitialization+0x45c>)
 801368c:	4a2a      	ldr	r2, [pc, #168]	; (8013738 <LoRaMacInitialization+0x460>)
 801368e:	589b      	ldr	r3, [r3, r2]
 8013690:	193a      	adds	r2, r7, r4
 8013692:	6812      	ldr	r2, [r2, #0]
 8013694:	641a      	str	r2, [r3, #64]	; 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8013696:	197b      	adds	r3, r7, r5
 8013698:	220b      	movs	r2, #11
 801369a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801369c:	4b25      	ldr	r3, [pc, #148]	; (8013734 <LoRaMacInitialization+0x45c>)
 801369e:	4a26      	ldr	r2, [pc, #152]	; (8013738 <LoRaMacInitialization+0x460>)
 80136a0:	589b      	ldr	r3, [r3, r2]
 80136a2:	781b      	ldrb	r3, [r3, #0]
 80136a4:	197a      	adds	r2, r7, r5
 80136a6:	0011      	movs	r1, r2
 80136a8:	0018      	movs	r0, r3
 80136aa:	f003 ff43 	bl	8017534 <RegionGetPhyParam>
 80136ae:	0003      	movs	r3, r0
 80136b0:	001a      	movs	r2, r3
 80136b2:	193b      	adds	r3, r7, r4
 80136b4:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckLimit = phyParam.Value;
 80136b6:	193b      	adds	r3, r7, r4
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	b299      	uxth	r1, r3
 80136bc:	4a1d      	ldr	r2, [pc, #116]	; (8013734 <LoRaMacInitialization+0x45c>)
 80136be:	23fd      	movs	r3, #253	; 0xfd
 80136c0:	009b      	lsls	r3, r3, #2
 80136c2:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80136c4:	197b      	adds	r3, r7, r5
 80136c6:	220c      	movs	r2, #12
 80136c8:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80136ca:	4b1a      	ldr	r3, [pc, #104]	; (8013734 <LoRaMacInitialization+0x45c>)
 80136cc:	4a1a      	ldr	r2, [pc, #104]	; (8013738 <LoRaMacInitialization+0x460>)
 80136ce:	589b      	ldr	r3, [r3, r2]
 80136d0:	781b      	ldrb	r3, [r3, #0]
 80136d2:	197a      	adds	r2, r7, r5
 80136d4:	0011      	movs	r1, r2
 80136d6:	0018      	movs	r0, r3
 80136d8:	f003 ff2c 	bl	8017534 <RegionGetPhyParam>
 80136dc:	0003      	movs	r3, r0
 80136de:	001a      	movs	r2, r3
 80136e0:	193b      	adds	r3, r7, r4
 80136e2:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckDelay = phyParam.Value;
 80136e4:	193b      	adds	r3, r7, r4
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	b299      	uxth	r1, r3
 80136ea:	4b12      	ldr	r3, [pc, #72]	; (8013734 <LoRaMacInitialization+0x45c>)
 80136ec:	4a15      	ldr	r2, [pc, #84]	; (8013744 <LoRaMacInitialization+0x46c>)
 80136ee:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 80136f0:	4b10      	ldr	r3, [pc, #64]	; (8013734 <LoRaMacInitialization+0x45c>)
 80136f2:	4a11      	ldr	r2, [pc, #68]	; (8013738 <LoRaMacInitialization+0x460>)
 80136f4:	589b      	ldr	r3, [r3, r2]
 80136f6:	2224      	movs	r2, #36	; 0x24
 80136f8:	2101      	movs	r1, #1
 80136fa:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
 80136fc:	4b0d      	ldr	r3, [pc, #52]	; (8013734 <LoRaMacInitialization+0x45c>)
 80136fe:	4a0e      	ldr	r2, [pc, #56]	; (8013738 <LoRaMacInitialization+0x460>)
 8013700:	589b      	ldr	r3, [r3, r2]
 8013702:	2214      	movs	r2, #20
 8013704:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8013706:	4b0b      	ldr	r3, [pc, #44]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013708:	4a0b      	ldr	r2, [pc, #44]	; (8013738 <LoRaMacInitialization+0x460>)
 801370a:	589b      	ldr	r3, [r3, r2]
 801370c:	2206      	movs	r2, #6
 801370e:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8013710:	4b08      	ldr	r3, [pc, #32]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013712:	4a09      	ldr	r2, [pc, #36]	; (8013738 <LoRaMacInitialization+0x460>)
 8013714:	589b      	ldr	r3, [r3, r2]
 8013716:	4a07      	ldr	r2, [pc, #28]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013718:	4907      	ldr	r1, [pc, #28]	; (8013738 <LoRaMacInitialization+0x460>)
 801371a:	5852      	ldr	r2, [r2, r1]
 801371c:	689b      	ldr	r3, [r3, #8]
 801371e:	21fc      	movs	r1, #252	; 0xfc
 8013720:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 8013722:	4b04      	ldr	r3, [pc, #16]	; (8013734 <LoRaMacInitialization+0x45c>)
 8013724:	4a04      	ldr	r2, [pc, #16]	; (8013738 <LoRaMacInitialization+0x460>)
 8013726:	589b      	ldr	r3, [r3, r2]
 8013728:	4a02      	ldr	r2, [pc, #8]	; (8013734 <LoRaMacInitialization+0x45c>)
 801372a:	e00d      	b.n	8013748 <LoRaMacInitialization+0x470>
 801372c:	08013291 	.word	0x08013291
 8013730:	20000d78 	.word	0x20000d78
 8013734:	200008f0 	.word	0x200008f0
 8013738:	00000484 	.word	0x00000484
 801373c:	00000412 	.word	0x00000412
 8013740:	00000411 	.word	0x00000411
 8013744:	000003f6 	.word	0x000003f6
 8013748:	499d      	ldr	r1, [pc, #628]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 801374a:	5852      	ldr	r2, [r2, r1]
 801374c:	7b19      	ldrb	r1, [r3, #12]
 801374e:	2380      	movs	r3, #128	; 0x80
 8013750:	005b      	lsls	r3, r3, #1
 8013752:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 8013754:	4b9b      	ldr	r3, [pc, #620]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 8013756:	4a9a      	ldr	r2, [pc, #616]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 8013758:	589b      	ldr	r3, [r3, r2]
 801375a:	4a9a      	ldr	r2, [pc, #616]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 801375c:	4998      	ldr	r1, [pc, #608]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 801375e:	5852      	ldr	r2, [r2, r1]
 8013760:	6919      	ldr	r1, [r3, #16]
 8013762:	2382      	movs	r3, #130	; 0x82
 8013764:	005b      	lsls	r3, r3, #1
 8013766:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 8013768:	4b96      	ldr	r3, [pc, #600]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 801376a:	4a95      	ldr	r2, [pc, #596]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 801376c:	589b      	ldr	r3, [r3, r2]
 801376e:	4a95      	ldr	r2, [pc, #596]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 8013770:	4993      	ldr	r1, [pc, #588]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 8013772:	5852      	ldr	r2, [r2, r1]
 8013774:	6959      	ldr	r1, [r3, #20]
 8013776:	2384      	movs	r3, #132	; 0x84
 8013778:	005b      	lsls	r3, r3, #1
 801377a:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 801377c:	4b91      	ldr	r3, [pc, #580]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 801377e:	4a90      	ldr	r2, [pc, #576]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 8013780:	589b      	ldr	r3, [r3, r2]
 8013782:	4a90      	ldr	r2, [pc, #576]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 8013784:	498e      	ldr	r1, [pc, #568]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 8013786:	5852      	ldr	r2, [r2, r1]
 8013788:	6999      	ldr	r1, [r3, #24]
 801378a:	2386      	movs	r3, #134	; 0x86
 801378c:	005b      	lsls	r3, r3, #1
 801378e:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 8013790:	4b8c      	ldr	r3, [pc, #560]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 8013792:	4a8b      	ldr	r2, [pc, #556]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 8013794:	589b      	ldr	r3, [r3, r2]
 8013796:	4a8b      	ldr	r2, [pc, #556]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 8013798:	4989      	ldr	r1, [pc, #548]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 801379a:	5852      	ldr	r2, [r2, r1]
 801379c:	69d9      	ldr	r1, [r3, #28]
 801379e:	2388      	movs	r3, #136	; 0x88
 80137a0:	005b      	lsls	r3, r3, #1
 80137a2:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 80137a4:	4b87      	ldr	r3, [pc, #540]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 80137a6:	4a86      	ldr	r2, [pc, #536]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 80137a8:	589b      	ldr	r3, [r3, r2]
 80137aa:	4a86      	ldr	r2, [pc, #536]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 80137ac:	4984      	ldr	r1, [pc, #528]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 80137ae:	5852      	ldr	r2, [r2, r1]
 80137b0:	6a19      	ldr	r1, [r3, #32]
 80137b2:	238a      	movs	r3, #138	; 0x8a
 80137b4:	005b      	lsls	r3, r3, #1
 80137b6:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 80137b8:	4b82      	ldr	r3, [pc, #520]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 80137ba:	4a81      	ldr	r2, [pc, #516]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 80137bc:	589b      	ldr	r3, [r3, r2]
 80137be:	4a81      	ldr	r2, [pc, #516]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 80137c0:	497f      	ldr	r1, [pc, #508]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 80137c2:	5852      	ldr	r2, [r2, r1]
 80137c4:	2124      	movs	r1, #36	; 0x24
 80137c6:	5c59      	ldrb	r1, [r3, r1]
 80137c8:	238c      	movs	r3, #140	; 0x8c
 80137ca:	005b      	lsls	r3, r3, #1
 80137cc:	54d1      	strb	r1, [r2, r3]

    ResetMacParameters( );
 80137ce:	f7fe fec9 	bl	8012564 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 80137d2:	4b7c      	ldr	r3, [pc, #496]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 80137d4:	4a7a      	ldr	r2, [pc, #488]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 80137d6:	589b      	ldr	r3, [r3, r2]
 80137d8:	22f1      	movs	r2, #241	; 0xf1
 80137da:	2101      	movs	r1, #1
 80137dc:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 80137de:	4a79      	ldr	r2, [pc, #484]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 80137e0:	23d1      	movs	r3, #209	; 0xd1
 80137e2:	009b      	lsls	r3, r3, #2
 80137e4:	68f9      	ldr	r1, [r7, #12]
 80137e6:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 80137e8:	4a76      	ldr	r2, [pc, #472]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 80137ea:	23d2      	movs	r3, #210	; 0xd2
 80137ec:	009b      	lsls	r3, r3, #2
 80137ee:	68b9      	ldr	r1, [r7, #8]
 80137f0:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 80137f2:	4b74      	ldr	r3, [pc, #464]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 80137f4:	4a74      	ldr	r2, [pc, #464]	; (80139c8 <LoRaMacInitialization+0x6f0>)
 80137f6:	2100      	movs	r1, #0
 80137f8:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 80137fa:	4a72      	ldr	r2, [pc, #456]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 80137fc:	23d0      	movs	r3, #208	; 0xd0
 80137fe:	009b      	lsls	r3, r3, #2
 8013800:	2101      	movs	r1, #1
 8013802:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8013804:	4b6f      	ldr	r3, [pc, #444]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 8013806:	4a6e      	ldr	r2, [pc, #440]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 8013808:	589a      	ldr	r2, [r3, r2]
 801380a:	23e2      	movs	r3, #226	; 0xe2
 801380c:	005b      	lsls	r3, r3, #1
 801380e:	2100      	movs	r1, #0
 8013810:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8013812:	4b6c      	ldr	r3, [pc, #432]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 8013814:	4a6a      	ldr	r2, [pc, #424]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 8013816:	589a      	ldr	r2, [r3, r2]
 8013818:	23e4      	movs	r3, #228	; 0xe4
 801381a:	005b      	lsls	r3, r3, #1
 801381c:	2100      	movs	r1, #0
 801381e:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8013820:	4a6a      	ldr	r2, [pc, #424]	; (80139cc <LoRaMacInitialization+0x6f4>)
 8013822:	4b6b      	ldr	r3, [pc, #428]	; (80139d0 <LoRaMacInitialization+0x6f8>)
 8013824:	0011      	movs	r1, r2
 8013826:	0018      	movs	r0, r3
 8013828:	f007 fb93 	bl	801af52 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801382c:	4a69      	ldr	r2, [pc, #420]	; (80139d4 <LoRaMacInitialization+0x6fc>)
 801382e:	4b6a      	ldr	r3, [pc, #424]	; (80139d8 <LoRaMacInitialization+0x700>)
 8013830:	0011      	movs	r1, r2
 8013832:	0018      	movs	r0, r3
 8013834:	f007 fb8d 	bl	801af52 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8013838:	4a68      	ldr	r2, [pc, #416]	; (80139dc <LoRaMacInitialization+0x704>)
 801383a:	4b69      	ldr	r3, [pc, #420]	; (80139e0 <LoRaMacInitialization+0x708>)
 801383c:	0011      	movs	r1, r2
 801383e:	0018      	movs	r0, r3
 8013840:	f007 fb87 	bl	801af52 <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8013844:	4a67      	ldr	r2, [pc, #412]	; (80139e4 <LoRaMacInitialization+0x70c>)
 8013846:	4b68      	ldr	r3, [pc, #416]	; (80139e8 <LoRaMacInitialization+0x710>)
 8013848:	0011      	movs	r1, r2
 801384a:	0018      	movs	r0, r3
 801384c:	f007 fb81 	bl	801af52 <TimerInit>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = TimerGetCurrentTime( );
 8013850:	4b5c      	ldr	r3, [pc, #368]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 8013852:	4a5b      	ldr	r2, [pc, #364]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 8013854:	589c      	ldr	r4, [r3, r2]
 8013856:	f007 fd12 	bl	801b27e <TimerGetCurrentTime>
 801385a:	0002      	movs	r2, r0
 801385c:	23e6      	movs	r3, #230	; 0xe6
 801385e:	005b      	lsls	r3, r3, #1
 8013860:	50e2      	str	r2, [r4, r3]

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8013862:	4a58      	ldr	r2, [pc, #352]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 8013864:	23d3      	movs	r3, #211	; 0xd3
 8013866:	009b      	lsls	r3, r3, #2
 8013868:	4960      	ldr	r1, [pc, #384]	; (80139ec <LoRaMacInitialization+0x714>)
 801386a:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 801386c:	4a55      	ldr	r2, [pc, #340]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 801386e:	23d5      	movs	r3, #213	; 0xd5
 8013870:	009b      	lsls	r3, r3, #2
 8013872:	495f      	ldr	r1, [pc, #380]	; (80139f0 <LoRaMacInitialization+0x718>)
 8013874:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8013876:	4a53      	ldr	r2, [pc, #332]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 8013878:	23d7      	movs	r3, #215	; 0xd7
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	495d      	ldr	r1, [pc, #372]	; (80139f4 <LoRaMacInitialization+0x71c>)
 801387e:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8013880:	4a50      	ldr	r2, [pc, #320]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 8013882:	23d4      	movs	r3, #212	; 0xd4
 8013884:	009b      	lsls	r3, r3, #2
 8013886:	495c      	ldr	r1, [pc, #368]	; (80139f8 <LoRaMacInitialization+0x720>)
 8013888:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801388a:	4a4e      	ldr	r2, [pc, #312]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 801388c:	23d6      	movs	r3, #214	; 0xd6
 801388e:	009b      	lsls	r3, r3, #2
 8013890:	495a      	ldr	r1, [pc, #360]	; (80139fc <LoRaMacInitialization+0x724>)
 8013892:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8013894:	4b5a      	ldr	r3, [pc, #360]	; (8013a00 <LoRaMacInitialization+0x728>)
 8013896:	689b      	ldr	r3, [r3, #8]
 8013898:	4a5a      	ldr	r2, [pc, #360]	; (8013a04 <LoRaMacInitialization+0x72c>)
 801389a:	0010      	movs	r0, r2
 801389c:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
 801389e:	2114      	movs	r1, #20
 80138a0:	187b      	adds	r3, r7, r1
 80138a2:	2200      	movs	r2, #0
 80138a4:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 80138a6:	187b      	adds	r3, r7, r1
 80138a8:	2200      	movs	r2, #0
 80138aa:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80138ac:	4b45      	ldr	r3, [pc, #276]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 80138ae:	4a44      	ldr	r2, [pc, #272]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 80138b0:	589b      	ldr	r3, [r3, r2]
 80138b2:	781b      	ldrb	r3, [r3, #0]
 80138b4:	187a      	adds	r2, r7, r1
 80138b6:	0011      	movs	r1, r2
 80138b8:	0018      	movs	r0, r3
 80138ba:	f003 fe77 	bl	80175ac <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 80138be:	4b52      	ldr	r3, [pc, #328]	; (8013a08 <LoRaMacInitialization+0x730>)
 80138c0:	0018      	movs	r0, r3
 80138c2:	f7fb fa39 	bl	800ed38 <SecureElementInit>
 80138c6:	1e03      	subs	r3, r0, #0
 80138c8:	d001      	beq.n	80138ce <LoRaMacInitialization+0x5f6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80138ca:	2311      	movs	r3, #17
 80138cc:	e074      	b.n	80139b8 <LoRaMacInitialization+0x6e0>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 80138ce:	4b4f      	ldr	r3, [pc, #316]	; (8013a0c <LoRaMacInitialization+0x734>)
 80138d0:	0018      	movs	r0, r3
 80138d2:	f002 fcd7 	bl	8016284 <LoRaMacCryptoInit>
 80138d6:	1e03      	subs	r3, r0, #0
 80138d8:	d001      	beq.n	80138de <LoRaMacInitialization+0x606>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80138da:	2311      	movs	r3, #17
 80138dc:	e06c      	b.n	80139b8 <LoRaMacInitialization+0x6e0>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 80138de:	4b4c      	ldr	r3, [pc, #304]	; (8013a10 <LoRaMacInitialization+0x738>)
 80138e0:	0018      	movs	r0, r3
 80138e2:	f001 fd55 	bl	8015390 <LoRaMacCommandsInit>
 80138e6:	1e03      	subs	r3, r0, #0
 80138e8:	d001      	beq.n	80138ee <LoRaMacInitialization+0x616>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80138ea:	2313      	movs	r3, #19
 80138ec:	e064      	b.n	80139b8 <LoRaMacInitialization+0x6e0>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80138ee:	4b35      	ldr	r3, [pc, #212]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 80138f0:	4a33      	ldr	r2, [pc, #204]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 80138f2:	589b      	ldr	r3, [r3, r2]
 80138f4:	3350      	adds	r3, #80	; 0x50
 80138f6:	0018      	movs	r0, r3
 80138f8:	f002 fdde 	bl	80164b8 <LoRaMacCryptoSetMulticastReference>
 80138fc:	1e03      	subs	r3, r0, #0
 80138fe:	d001      	beq.n	8013904 <LoRaMacInitialization+0x62c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013900:	2311      	movs	r3, #17
 8013902:	e059      	b.n	80139b8 <LoRaMacInitialization+0x6e0>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8013904:	4b3e      	ldr	r3, [pc, #248]	; (8013a00 <LoRaMacInitialization+0x728>)
 8013906:	69db      	ldr	r3, [r3, #28]
 8013908:	4798      	blx	r3
 801390a:	0003      	movs	r3, r0
 801390c:	0018      	movs	r0, r3
 801390e:	f007 fe6b 	bl	801b5e8 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8013912:	4b3b      	ldr	r3, [pc, #236]	; (8013a00 <LoRaMacInitialization+0x728>)
 8013914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013916:	4a2b      	ldr	r2, [pc, #172]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 8013918:	4929      	ldr	r1, [pc, #164]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 801391a:	5852      	ldr	r2, [r2, r1]
 801391c:	21f1      	movs	r1, #241	; 0xf1
 801391e:	5c52      	ldrb	r2, [r2, r1]
 8013920:	0010      	movs	r0, r2
 8013922:	4798      	blx	r3
    Radio.Sleep( );
 8013924:	4b36      	ldr	r3, [pc, #216]	; (8013a00 <LoRaMacInitialization+0x728>)
 8013926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013928:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801392a:	2140      	movs	r1, #64	; 0x40
 801392c:	187b      	adds	r3, r7, r1
 801392e:	2200      	movs	r2, #0
 8013930:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 8013932:	187b      	adds	r3, r7, r1
 8013934:	2200      	movs	r2, #0
 8013936:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d008      	beq.n	8013950 <LoRaMacInitialization+0x678>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 801393e:	68bb      	ldr	r3, [r7, #8]
 8013940:	685a      	ldr	r2, [r3, #4]
 8013942:	2140      	movs	r1, #64	; 0x40
 8013944:	187b      	adds	r3, r7, r1
 8013946:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	68da      	ldr	r2, [r3, #12]
 801394c:	187b      	adds	r3, r7, r1
 801394e:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8013950:	2120      	movs	r1, #32
 8013952:	187b      	adds	r3, r7, r1
 8013954:	4a2f      	ldr	r2, [pc, #188]	; (8013a14 <LoRaMacInitialization+0x73c>)
 8013956:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8013958:	187b      	adds	r3, r7, r1
 801395a:	4a2f      	ldr	r2, [pc, #188]	; (8013a18 <LoRaMacInitialization+0x740>)
 801395c:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 801395e:	187b      	adds	r3, r7, r1
 8013960:	4a2e      	ldr	r2, [pc, #184]	; (8013a1c <LoRaMacInitialization+0x744>)
 8013962:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8013964:	187b      	adds	r3, r7, r1
 8013966:	4a2e      	ldr	r2, [pc, #184]	; (8013a20 <LoRaMacInitialization+0x748>)
 8013968:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 801396a:	4b16      	ldr	r3, [pc, #88]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 801396c:	4a14      	ldr	r2, [pc, #80]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 801396e:	589b      	ldr	r3, [r3, r2]
 8013970:	334c      	adds	r3, #76	; 0x4c
 8013972:	001a      	movs	r2, r3
 8013974:	187b      	adds	r3, r7, r1
 8013976:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 8013978:	4b12      	ldr	r3, [pc, #72]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 801397a:	4a11      	ldr	r2, [pc, #68]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 801397c:	589b      	ldr	r3, [r3, r2]
 801397e:	001a      	movs	r2, r3
 8013980:	187b      	adds	r3, r7, r1
 8013982:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 8013984:	4b0f      	ldr	r3, [pc, #60]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 8013986:	4a0e      	ldr	r2, [pc, #56]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 8013988:	589b      	ldr	r3, [r3, r2]
 801398a:	33f8      	adds	r3, #248	; 0xf8
 801398c:	001a      	movs	r2, r3
 801398e:	187b      	adds	r3, r7, r1
 8013990:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 8013992:	4b0c      	ldr	r3, [pc, #48]	; (80139c4 <LoRaMacInitialization+0x6ec>)
 8013994:	4a0a      	ldr	r2, [pc, #40]	; (80139c0 <LoRaMacInitialization+0x6e8>)
 8013996:	589b      	ldr	r3, [r3, r2]
 8013998:	3350      	adds	r3, #80	; 0x50
 801399a:	001a      	movs	r2, r3
 801399c:	0008      	movs	r0, r1
 801399e:	187b      	adds	r3, r7, r1
 80139a0:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 80139a2:	4a20      	ldr	r2, [pc, #128]	; (8013a24 <LoRaMacInitialization+0x74c>)
 80139a4:	2340      	movs	r3, #64	; 0x40
 80139a6:	18f9      	adds	r1, r7, r3
 80139a8:	183b      	adds	r3, r7, r0
 80139aa:	0018      	movs	r0, r3
 80139ac:	f001 fada 	bl	8014f64 <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80139b0:	2001      	movs	r0, #1
 80139b2:	f7fc fe6d 	bl	8010690 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80139b6:	2300      	movs	r3, #0
}
 80139b8:	0018      	movs	r0, r3
 80139ba:	46bd      	mov	sp, r7
 80139bc:	b014      	add	sp, #80	; 0x50
 80139be:	bdb0      	pop	{r4, r5, r7, pc}
 80139c0:	00000484 	.word	0x00000484
 80139c4:	200008f0 	.word	0x200008f0
 80139c8:	00000481 	.word	0x00000481
 80139cc:	08010b21 	.word	0x08010b21
 80139d0:	20000c58 	.word	0x20000c58
 80139d4:	08010bad 	.word	0x08010bad
 80139d8:	20000c70 	.word	0x20000c70
 80139dc:	08010c45 	.word	0x08010c45
 80139e0:	20000c88 	.word	0x20000c88
 80139e4:	08010ce9 	.word	0x08010ce9
 80139e8:	20000ce8 	.word	0x20000ce8
 80139ec:	0800f52d 	.word	0x0800f52d
 80139f0:	0800f5c9 	.word	0x0800f5c9
 80139f4:	0800f701 	.word	0x0800f701
 80139f8:	0800f68d 	.word	0x0800f68d
 80139fc:	0800f745 	.word	0x0800f745
 8013a00:	0801cb08 	.word	0x0801cb08
 8013a04:	20000c3c 	.word	0x20000c3c
 8013a08:	08013261 	.word	0x08013261
 8013a0c:	08013251 	.word	0x08013251
 8013a10:	08013271 	.word	0x08013271
 8013a14:	20000d54 	.word	0x20000d54
 8013a18:	20000d0c 	.word	0x20000d0c
 8013a1c:	20000d40 	.word	0x20000d40
 8013a20:	20000d71 	.word	0x20000d71
 8013a24:	08013281 	.word	0x08013281

08013a28 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8013a2c:	4a04      	ldr	r2, [pc, #16]	; (8013a40 <LoRaMacStart+0x18>)
 8013a2e:	23d0      	movs	r3, #208	; 0xd0
 8013a30:	009b      	lsls	r3, r3, #2
 8013a32:	2100      	movs	r1, #0
 8013a34:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8013a36:	2300      	movs	r3, #0
}
 8013a38:	0018      	movs	r0, r3
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	bd80      	pop	{r7, pc}
 8013a3e:	46c0      	nop			; (mov r8, r8)
 8013a40:	200008f0 	.word	0x200008f0

08013a44 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8013a44:	b590      	push	{r4, r7, lr}
 8013a46:	b08b      	sub	sp, #44	; 0x2c
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	0002      	movs	r2, r0
 8013a4c:	6039      	str	r1, [r7, #0]
 8013a4e:	1dfb      	adds	r3, r7, #7
 8013a50:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8013a52:	4b50      	ldr	r3, [pc, #320]	; (8013b94 <LoRaMacQueryTxPossible+0x150>)
 8013a54:	4a50      	ldr	r2, [pc, #320]	; (8013b98 <LoRaMacQueryTxPossible+0x154>)
 8013a56:	589b      	ldr	r3, [r3, r2]
 8013a58:	22f4      	movs	r2, #244	; 0xf4
 8013a5a:	589b      	ldr	r3, [r3, r2]
 8013a5c:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8013a5e:	4b4d      	ldr	r3, [pc, #308]	; (8013b94 <LoRaMacQueryTxPossible+0x150>)
 8013a60:	4a4d      	ldr	r2, [pc, #308]	; (8013b98 <LoRaMacQueryTxPossible+0x154>)
 8013a62:	589b      	ldr	r3, [r3, r2]
 8013a64:	2205      	movs	r2, #5
 8013a66:	569a      	ldrsb	r2, [r3, r2]
 8013a68:	230f      	movs	r3, #15
 8013a6a:	18fb      	adds	r3, r7, r3
 8013a6c:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8013a6e:	4b49      	ldr	r3, [pc, #292]	; (8013b94 <LoRaMacQueryTxPossible+0x150>)
 8013a70:	4a49      	ldr	r2, [pc, #292]	; (8013b98 <LoRaMacQueryTxPossible+0x154>)
 8013a72:	589b      	ldr	r3, [r3, r2]
 8013a74:	2204      	movs	r2, #4
 8013a76:	569a      	ldrsb	r2, [r3, r2]
 8013a78:	230e      	movs	r3, #14
 8013a7a:	18fb      	adds	r3, r7, r3
 8013a7c:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8013a82:	683b      	ldr	r3, [r7, #0]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d101      	bne.n	8013a8c <LoRaMacQueryTxPossible+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013a88:	2303      	movs	r3, #3
 8013a8a:	e07e      	b.n	8013b8a <LoRaMacQueryTxPossible+0x146>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8013a8c:	4b41      	ldr	r3, [pc, #260]	; (8013b94 <LoRaMacQueryTxPossible+0x150>)
 8013a8e:	4a42      	ldr	r2, [pc, #264]	; (8013b98 <LoRaMacQueryTxPossible+0x154>)
 8013a90:	5899      	ldr	r1, [r3, r2]
 8013a92:	2014      	movs	r0, #20
 8013a94:	183b      	adds	r3, r7, r0
 8013a96:	22e8      	movs	r2, #232	; 0xe8
 8013a98:	0052      	lsls	r2, r2, #1
 8013a9a:	588a      	ldr	r2, [r1, r2]
 8013a9c:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 8013a9e:	183b      	adds	r3, r7, r0
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8013aa4:	4b3b      	ldr	r3, [pc, #236]	; (8013b94 <LoRaMacQueryTxPossible+0x150>)
 8013aa6:	4a3c      	ldr	r2, [pc, #240]	; (8013b98 <LoRaMacQueryTxPossible+0x154>)
 8013aa8:	589b      	ldr	r3, [r3, r2]
 8013aaa:	22f2      	movs	r2, #242	; 0xf2
 8013aac:	5c9a      	ldrb	r2, [r3, r2]
 8013aae:	183b      	adds	r3, r7, r0
 8013ab0:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8013ab2:	4b38      	ldr	r3, [pc, #224]	; (8013b94 <LoRaMacQueryTxPossible+0x150>)
 8013ab4:	4a38      	ldr	r2, [pc, #224]	; (8013b98 <LoRaMacQueryTxPossible+0x154>)
 8013ab6:	589b      	ldr	r3, [r3, r2]
 8013ab8:	22f4      	movs	r2, #244	; 0xf4
 8013aba:	589a      	ldr	r2, [r3, r2]
 8013abc:	183b      	adds	r3, r7, r0
 8013abe:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8013ac0:	4a34      	ldr	r2, [pc, #208]	; (8013b94 <LoRaMacQueryTxPossible+0x150>)
 8013ac2:	23fd      	movs	r3, #253	; 0xfd
 8013ac4:	009b      	lsls	r3, r3, #2
 8013ac6:	5ad2      	ldrh	r2, [r2, r3]
 8013ac8:	183b      	adds	r3, r7, r0
 8013aca:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8013acc:	4b31      	ldr	r3, [pc, #196]	; (8013b94 <LoRaMacQueryTxPossible+0x150>)
 8013ace:	4a33      	ldr	r2, [pc, #204]	; (8013b9c <LoRaMacQueryTxPossible+0x158>)
 8013ad0:	5a9a      	ldrh	r2, [r3, r2]
 8013ad2:	183b      	adds	r3, r7, r0
 8013ad4:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8013ad6:	4b2f      	ldr	r3, [pc, #188]	; (8013b94 <LoRaMacQueryTxPossible+0x150>)
 8013ad8:	4a2f      	ldr	r2, [pc, #188]	; (8013b98 <LoRaMacQueryTxPossible+0x154>)
 8013ada:	589b      	ldr	r3, [r3, r2]
 8013adc:	22f9      	movs	r2, #249	; 0xf9
 8013ade:	569a      	ldrsb	r2, [r3, r2]
 8013ae0:	183b      	adds	r3, r7, r0
 8013ae2:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8013ae4:	4b2b      	ldr	r3, [pc, #172]	; (8013b94 <LoRaMacQueryTxPossible+0x150>)
 8013ae6:	4a2c      	ldr	r2, [pc, #176]	; (8013b98 <LoRaMacQueryTxPossible+0x154>)
 8013ae8:	589b      	ldr	r3, [r3, r2]
 8013aea:	22f8      	movs	r2, #248	; 0xf8
 8013aec:	569a      	ldrsb	r2, [r3, r2]
 8013aee:	183b      	adds	r3, r7, r0
 8013af0:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013af2:	4b28      	ldr	r3, [pc, #160]	; (8013b94 <LoRaMacQueryTxPossible+0x150>)
 8013af4:	4a28      	ldr	r2, [pc, #160]	; (8013b98 <LoRaMacQueryTxPossible+0x154>)
 8013af6:	589a      	ldr	r2, [r3, r2]
 8013af8:	2396      	movs	r3, #150	; 0x96
 8013afa:	005b      	lsls	r3, r3, #1
 8013afc:	5cd2      	ldrb	r2, [r2, r3]
 8013afe:	183b      	adds	r3, r7, r0
 8013b00:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8013b02:	4b24      	ldr	r3, [pc, #144]	; (8013b94 <LoRaMacQueryTxPossible+0x150>)
 8013b04:	4a24      	ldr	r2, [pc, #144]	; (8013b98 <LoRaMacQueryTxPossible+0x154>)
 8013b06:	589b      	ldr	r3, [r3, r2]
 8013b08:	781a      	ldrb	r2, [r3, #0]
 8013b0a:	183b      	adds	r3, r7, r0
 8013b0c:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8013b0e:	2310      	movs	r3, #16
 8013b10:	18fb      	adds	r3, r7, r3
 8013b12:	220e      	movs	r2, #14
 8013b14:	18ba      	adds	r2, r7, r2
 8013b16:	240f      	movs	r4, #15
 8013b18:	1939      	adds	r1, r7, r4
 8013b1a:	1838      	adds	r0, r7, r0
 8013b1c:	f001 fa0a 	bl	8014f34 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8013b20:	193b      	adds	r3, r7, r4
 8013b22:	781b      	ldrb	r3, [r3, #0]
 8013b24:	b25b      	sxtb	r3, r3
 8013b26:	0018      	movs	r0, r3
 8013b28:	f7fd facc 	bl	80110c4 <GetMaxAppPayloadWithoutFOptsLength>
 8013b2c:	0003      	movs	r3, r0
 8013b2e:	001a      	movs	r2, r3
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013b34:	2308      	movs	r3, #8
 8013b36:	18fb      	adds	r3, r7, r3
 8013b38:	0018      	movs	r0, r3
 8013b3a:	f001 fd3d 	bl	80155b8 <LoRaMacCommandsGetSizeSerializedCmds>
 8013b3e:	1e03      	subs	r3, r0, #0
 8013b40:	d001      	beq.n	8013b46 <LoRaMacQueryTxPossible+0x102>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013b42:	2313      	movs	r3, #19
 8013b44:	e021      	b.n	8013b8a <LoRaMacQueryTxPossible+0x146>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8013b46:	68bb      	ldr	r3, [r7, #8]
 8013b48:	2b0f      	cmp	r3, #15
 8013b4a:	d81a      	bhi.n	8013b82 <LoRaMacQueryTxPossible+0x13e>
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	785b      	ldrb	r3, [r3, #1]
 8013b50:	001a      	movs	r2, r3
 8013b52:	68bb      	ldr	r3, [r7, #8]
 8013b54:	429a      	cmp	r2, r3
 8013b56:	d314      	bcc.n	8013b82 <LoRaMacQueryTxPossible+0x13e>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	785a      	ldrb	r2, [r3, #1]
 8013b5c:	68bb      	ldr	r3, [r7, #8]
 8013b5e:	b2db      	uxtb	r3, r3
 8013b60:	1ad3      	subs	r3, r2, r3
 8013b62:	b2da      	uxtb	r2, r3
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	785b      	ldrb	r3, [r3, #1]
 8013b6c:	0019      	movs	r1, r3
 8013b6e:	1dfb      	adds	r3, r7, #7
 8013b70:	781a      	ldrb	r2, [r3, #0]
 8013b72:	68bb      	ldr	r3, [r7, #8]
 8013b74:	18d3      	adds	r3, r2, r3
 8013b76:	4299      	cmp	r1, r3
 8013b78:	d301      	bcc.n	8013b7e <LoRaMacQueryTxPossible+0x13a>
        {
            return LORAMAC_STATUS_OK;
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	e005      	b.n	8013b8a <LoRaMacQueryTxPossible+0x146>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8013b7e:	2308      	movs	r3, #8
 8013b80:	e003      	b.n	8013b8a <LoRaMacQueryTxPossible+0x146>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	2200      	movs	r2, #0
 8013b86:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8013b88:	2308      	movs	r3, #8
    }
}
 8013b8a:	0018      	movs	r0, r3
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	b00b      	add	sp, #44	; 0x2c
 8013b90:	bd90      	pop	{r4, r7, pc}
 8013b92:	46c0      	nop			; (mov r8, r8)
 8013b94:	200008f0 	.word	0x200008f0
 8013b98:	00000484 	.word	0x00000484
 8013b9c:	000003f6 	.word	0x000003f6

08013ba0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8013ba0:	b590      	push	{r4, r7, lr}
 8013ba2:	b087      	sub	sp, #28
 8013ba4:	af00      	add	r7, sp, #0
 8013ba6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013ba8:	2317      	movs	r3, #23
 8013baa:	18fb      	adds	r3, r7, r3
 8013bac:	2200      	movs	r2, #0
 8013bae:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d101      	bne.n	8013bba <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013bb6:	2303      	movs	r3, #3
 8013bb8:	e143      	b.n	8013e42 <LoRaMacMibGetRequestConfirm+0x2a2>
    }

    switch( mibGet->Type )
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	781b      	ldrb	r3, [r3, #0]
 8013bbe:	2b34      	cmp	r3, #52	; 0x34
 8013bc0:	d900      	bls.n	8013bc4 <LoRaMacMibGetRequestConfirm+0x24>
 8013bc2:	e132      	b.n	8013e2a <LoRaMacMibGetRequestConfirm+0x28a>
 8013bc4:	009a      	lsls	r2, r3, #2
 8013bc6:	4ba1      	ldr	r3, [pc, #644]	; (8013e4c <LoRaMacMibGetRequestConfirm+0x2ac>)
 8013bc8:	18d3      	adds	r3, r2, r3
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 8013bce:	4ba0      	ldr	r3, [pc, #640]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013bd0:	4aa0      	ldr	r2, [pc, #640]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013bd2:	589b      	ldr	r3, [r3, r2]
 8013bd4:	22f0      	movs	r2, #240	; 0xf0
 8013bd6:	5c9a      	ldrb	r2, [r3, r2]
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	711a      	strb	r2, [r3, #4]
            break;
 8013bdc:	e12e      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 8013bde:	4b9c      	ldr	r3, [pc, #624]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013be0:	4a9c      	ldr	r2, [pc, #624]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013be2:	589a      	ldr	r2, [r3, r2]
 8013be4:	23ea      	movs	r3, #234	; 0xea
 8013be6:	005b      	lsls	r3, r3, #1
 8013be8:	5cd2      	ldrb	r2, [r2, r3]
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	711a      	strb	r2, [r3, #4]
            break;
 8013bee:	e125      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8013bf0:	f7fb fc70 	bl	800f4d4 <SecureElementGetDevEui>
 8013bf4:	0002      	movs	r2, r0
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	605a      	str	r2, [r3, #4]
            break;
 8013bfa:	e11f      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8013bfc:	f7fb fc8e 	bl	800f51c <SecureElementGetJoinEui>
 8013c00:	0002      	movs	r2, r0
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	605a      	str	r2, [r3, #4]
            break;
 8013c06:	e119      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8013c08:	4b91      	ldr	r3, [pc, #580]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013c0a:	4a92      	ldr	r2, [pc, #584]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013c0c:	589b      	ldr	r3, [r3, r2]
 8013c0e:	22f2      	movs	r2, #242	; 0xf2
 8013c10:	5c9a      	ldrb	r2, [r3, r2]
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	711a      	strb	r2, [r3, #4]
            break;
 8013c16:	e111      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 8013c18:	4b8d      	ldr	r3, [pc, #564]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013c1a:	4a8e      	ldr	r2, [pc, #568]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013c1c:	589b      	ldr	r3, [r3, r2]
 8013c1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	605a      	str	r2, [r3, #4]
            break;
 8013c24:	e10a      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 8013c26:	4b8a      	ldr	r3, [pc, #552]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013c28:	4a8a      	ldr	r2, [pc, #552]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013c2a:	589b      	ldr	r3, [r3, r2]
 8013c2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	605a      	str	r2, [r3, #4]
            break;
 8013c32:	e103      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 8013c34:	4b86      	ldr	r3, [pc, #536]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013c36:	4a87      	ldr	r2, [pc, #540]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013c38:	589b      	ldr	r3, [r3, r2]
 8013c3a:	22f1      	movs	r2, #241	; 0xf1
 8013c3c:	5c9a      	ldrb	r2, [r3, r2]
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	711a      	strb	r2, [r3, #4]
            break;
 8013c42:	e0fb      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8013c44:	4b82      	ldr	r3, [pc, #520]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013c46:	4a83      	ldr	r2, [pc, #524]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013c48:	589a      	ldr	r2, [r3, r2]
 8013c4a:	2340      	movs	r3, #64	; 0x40
 8013c4c:	33ff      	adds	r3, #255	; 0xff
 8013c4e:	5cd2      	ldrb	r2, [r2, r3]
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	711a      	strb	r2, [r3, #4]
            break;
 8013c54:	e0f2      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8013c56:	2110      	movs	r1, #16
 8013c58:	187b      	adds	r3, r7, r1
 8013c5a:	221d      	movs	r2, #29
 8013c5c:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013c5e:	4b7c      	ldr	r3, [pc, #496]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013c60:	4a7c      	ldr	r2, [pc, #496]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013c62:	589b      	ldr	r3, [r3, r2]
 8013c64:	781b      	ldrb	r3, [r3, #0]
 8013c66:	187a      	adds	r2, r7, r1
 8013c68:	0011      	movs	r1, r2
 8013c6a:	0018      	movs	r0, r3
 8013c6c:	f003 fc62 	bl	8017534 <RegionGetPhyParam>
 8013c70:	0003      	movs	r3, r0
 8013c72:	001a      	movs	r2, r3
 8013c74:	210c      	movs	r1, #12
 8013c76:	187b      	adds	r3, r7, r1
 8013c78:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 8013c7a:	187b      	adds	r3, r7, r1
 8013c7c:	681a      	ldr	r2, [r3, #0]
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	605a      	str	r2, [r3, #4]
            break;
 8013c82:	e0db      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8013c84:	4b72      	ldr	r3, [pc, #456]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013c86:	4a73      	ldr	r2, [pc, #460]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013c88:	5899      	ldr	r1, [r3, r2]
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	228e      	movs	r2, #142	; 0x8e
 8013c8e:	0052      	lsls	r2, r2, #1
 8013c90:	3304      	adds	r3, #4
 8013c92:	188a      	adds	r2, r1, r2
 8013c94:	ca03      	ldmia	r2!, {r0, r1}
 8013c96:	c303      	stmia	r3!, {r0, r1}
            break;
 8013c98:	e0d0      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8013c9a:	4b6d      	ldr	r3, [pc, #436]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013c9c:	4a6d      	ldr	r2, [pc, #436]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013c9e:	589a      	ldr	r2, [r3, r2]
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	3304      	adds	r3, #4
 8013ca4:	3228      	adds	r2, #40	; 0x28
 8013ca6:	ca03      	ldmia	r2!, {r0, r1}
 8013ca8:	c303      	stmia	r3!, {r0, r1}
            break;
 8013caa:	e0c7      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 8013cac:	4b68      	ldr	r3, [pc, #416]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013cae:	4a69      	ldr	r2, [pc, #420]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013cb0:	5899      	ldr	r1, [r3, r2]
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	2292      	movs	r2, #146	; 0x92
 8013cb6:	0052      	lsls	r2, r2, #1
 8013cb8:	3304      	adds	r3, #4
 8013cba:	188a      	adds	r2, r1, r2
 8013cbc:	ca03      	ldmia	r2!, {r0, r1}
 8013cbe:	c303      	stmia	r3!, {r0, r1}
            break;
 8013cc0:	e0bc      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8013cc2:	4b63      	ldr	r3, [pc, #396]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013cc4:	4a63      	ldr	r2, [pc, #396]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013cc6:	589a      	ldr	r2, [r3, r2]
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	3304      	adds	r3, #4
 8013ccc:	3230      	adds	r2, #48	; 0x30
 8013cce:	ca03      	ldmia	r2!, {r0, r1}
 8013cd0:	c303      	stmia	r3!, {r0, r1}
            break;
 8013cd2:	e0b3      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8013cd4:	2110      	movs	r1, #16
 8013cd6:	187b      	adds	r3, r7, r1
 8013cd8:	221b      	movs	r2, #27
 8013cda:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013cdc:	4b5c      	ldr	r3, [pc, #368]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013cde:	4a5d      	ldr	r2, [pc, #372]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013ce0:	589b      	ldr	r3, [r3, r2]
 8013ce2:	781b      	ldrb	r3, [r3, #0]
 8013ce4:	187a      	adds	r2, r7, r1
 8013ce6:	0011      	movs	r1, r2
 8013ce8:	0018      	movs	r0, r3
 8013cea:	f003 fc23 	bl	8017534 <RegionGetPhyParam>
 8013cee:	0003      	movs	r3, r0
 8013cf0:	001a      	movs	r2, r3
 8013cf2:	210c      	movs	r1, #12
 8013cf4:	187b      	adds	r3, r7, r1
 8013cf6:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8013cf8:	187b      	adds	r3, r7, r1
 8013cfa:	681a      	ldr	r2, [r3, #0]
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	605a      	str	r2, [r3, #4]
            break;
 8013d00:	e09c      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8013d02:	2110      	movs	r1, #16
 8013d04:	187b      	adds	r3, r7, r1
 8013d06:	221a      	movs	r2, #26
 8013d08:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013d0a:	4b51      	ldr	r3, [pc, #324]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013d0c:	4a51      	ldr	r2, [pc, #324]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013d0e:	589b      	ldr	r3, [r3, r2]
 8013d10:	781b      	ldrb	r3, [r3, #0]
 8013d12:	187a      	adds	r2, r7, r1
 8013d14:	0011      	movs	r1, r2
 8013d16:	0018      	movs	r0, r3
 8013d18:	f003 fc0c 	bl	8017534 <RegionGetPhyParam>
 8013d1c:	0003      	movs	r3, r0
 8013d1e:	001a      	movs	r2, r3
 8013d20:	210c      	movs	r1, #12
 8013d22:	187b      	adds	r3, r7, r1
 8013d24:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8013d26:	187b      	adds	r3, r7, r1
 8013d28:	681a      	ldr	r2, [r3, #0]
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	605a      	str	r2, [r3, #4]
            break;
 8013d2e:	e085      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8013d30:	4b47      	ldr	r3, [pc, #284]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013d32:	4a48      	ldr	r2, [pc, #288]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013d34:	589a      	ldr	r2, [r3, r2]
 8013d36:	238c      	movs	r3, #140	; 0x8c
 8013d38:	005b      	lsls	r3, r3, #1
 8013d3a:	5cd2      	ldrb	r2, [r2, r3]
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	711a      	strb	r2, [r3, #4]
            break;
 8013d40:	e07c      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 8013d42:	4b43      	ldr	r3, [pc, #268]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013d44:	4a43      	ldr	r2, [pc, #268]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013d46:	589a      	ldr	r2, [r3, r2]
 8013d48:	2382      	movs	r3, #130	; 0x82
 8013d4a:	005b      	lsls	r3, r3, #1
 8013d4c:	58d2      	ldr	r2, [r2, r3]
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	605a      	str	r2, [r3, #4]
            break;
 8013d52:	e073      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 8013d54:	4b3e      	ldr	r3, [pc, #248]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013d56:	4a3f      	ldr	r2, [pc, #252]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013d58:	589a      	ldr	r2, [r3, r2]
 8013d5a:	2384      	movs	r3, #132	; 0x84
 8013d5c:	005b      	lsls	r3, r3, #1
 8013d5e:	58d2      	ldr	r2, [r2, r3]
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	605a      	str	r2, [r3, #4]
            break;
 8013d64:	e06a      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 8013d66:	4b3a      	ldr	r3, [pc, #232]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013d68:	4a3a      	ldr	r2, [pc, #232]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013d6a:	589a      	ldr	r2, [r3, r2]
 8013d6c:	2386      	movs	r3, #134	; 0x86
 8013d6e:	005b      	lsls	r3, r3, #1
 8013d70:	58d2      	ldr	r2, [r2, r3]
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	605a      	str	r2, [r3, #4]
            break;
 8013d76:	e061      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 8013d78:	4b35      	ldr	r3, [pc, #212]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013d7a:	4a36      	ldr	r2, [pc, #216]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013d7c:	589a      	ldr	r2, [r3, r2]
 8013d7e:	2388      	movs	r3, #136	; 0x88
 8013d80:	005b      	lsls	r3, r3, #1
 8013d82:	58d2      	ldr	r2, [r2, r3]
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	605a      	str	r2, [r3, #4]
            break;
 8013d88:	e058      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 8013d8a:	4b31      	ldr	r3, [pc, #196]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013d8c:	4a31      	ldr	r2, [pc, #196]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013d8e:	589a      	ldr	r2, [r3, r2]
 8013d90:	238a      	movs	r3, #138	; 0x8a
 8013d92:	005b      	lsls	r3, r3, #1
 8013d94:	58d2      	ldr	r2, [r2, r3]
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	605a      	str	r2, [r3, #4]
            break;
 8013d9a:	e04f      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8013d9c:	4b2c      	ldr	r3, [pc, #176]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013d9e:	4a2d      	ldr	r2, [pc, #180]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013da0:	589b      	ldr	r3, [r3, r2]
 8013da2:	2205      	movs	r2, #5
 8013da4:	569a      	ldrsb	r2, [r3, r2]
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	711a      	strb	r2, [r3, #4]
            break;
 8013daa:	e047      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8013dac:	4b28      	ldr	r3, [pc, #160]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013dae:	4a29      	ldr	r2, [pc, #164]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013db0:	589b      	ldr	r3, [r3, r2]
 8013db2:	22f9      	movs	r2, #249	; 0xf9
 8013db4:	569a      	ldrsb	r2, [r3, r2]
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	711a      	strb	r2, [r3, #4]
            break;
 8013dba:	e03f      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8013dbc:	4b24      	ldr	r3, [pc, #144]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013dbe:	4a25      	ldr	r2, [pc, #148]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013dc0:	589b      	ldr	r3, [r3, r2]
 8013dc2:	2204      	movs	r2, #4
 8013dc4:	569a      	ldrsb	r2, [r3, r2]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	711a      	strb	r2, [r3, #4]
            break;
 8013dca:	e037      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8013dcc:	4b20      	ldr	r3, [pc, #128]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013dce:	4a21      	ldr	r2, [pc, #132]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013dd0:	589b      	ldr	r3, [r3, r2]
 8013dd2:	22f8      	movs	r2, #248	; 0xf8
 8013dd4:	569a      	ldrsb	r2, [r3, r2]
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	711a      	strb	r2, [r3, #4]
            break;
 8013dda:	e02f      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 8013ddc:	4b1c      	ldr	r3, [pc, #112]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013dde:	4a1d      	ldr	r2, [pc, #116]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013de0:	589b      	ldr	r3, [r3, r2]
 8013de2:	22fc      	movs	r2, #252	; 0xfc
 8013de4:	589a      	ldr	r2, [r3, r2]
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	605a      	str	r2, [r3, #4]
            break;
 8013dea:	e027      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 8013dec:	4b18      	ldr	r3, [pc, #96]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013dee:	4a19      	ldr	r2, [pc, #100]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013df0:	589a      	ldr	r2, [r3, r2]
 8013df2:	2380      	movs	r3, #128	; 0x80
 8013df4:	005b      	lsls	r3, r3, #1
 8013df6:	5cd2      	ldrb	r2, [r2, r3]
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	711a      	strb	r2, [r3, #4]
            break;
 8013dfc:	e01e      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8013dfe:	4b14      	ldr	r3, [pc, #80]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013e00:	4a14      	ldr	r2, [pc, #80]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013e02:	589a      	ldr	r2, [r3, r2]
 8013e04:	239a      	movs	r3, #154	; 0x9a
 8013e06:	005b      	lsls	r3, r3, #1
 8013e08:	58d2      	ldr	r2, [r2, r3]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	605a      	str	r2, [r3, #4]
            break;
 8013e0e:	e015      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 8013e10:	f7fe ffa4 	bl	8012d5c <GetCtxs>
 8013e14:	0002      	movs	r2, r0
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	605a      	str	r2, [r3, #4]
            break;
 8013e1a:	e00f      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8013e1c:	4b0c      	ldr	r3, [pc, #48]	; (8013e50 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013e1e:	4a0d      	ldr	r2, [pc, #52]	; (8013e54 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013e20:	589b      	ldr	r3, [r3, r2]
 8013e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	605a      	str	r2, [r3, #4]
            break;
 8013e28:	e008      	b.n	8013e3c <LoRaMacMibGetRequestConfirm+0x29c>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8013e2a:	2317      	movs	r3, #23
 8013e2c:	18fc      	adds	r4, r7, r3
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	0018      	movs	r0, r3
 8013e32:	f001 f935 	bl	80150a0 <LoRaMacClassBMibGetRequestConfirm>
 8013e36:	0003      	movs	r3, r0
 8013e38:	7023      	strb	r3, [r4, #0]
            break;
 8013e3a:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
 8013e3c:	2317      	movs	r3, #23
 8013e3e:	18fb      	adds	r3, r7, r3
 8013e40:	781b      	ldrb	r3, [r3, #0]
}
 8013e42:	0018      	movs	r0, r3
 8013e44:	46bd      	mov	sp, r7
 8013e46:	b007      	add	sp, #28
 8013e48:	bd90      	pop	{r4, r7, pc}
 8013e4a:	46c0      	nop			; (mov r8, r8)
 8013e4c:	0801d03c 	.word	0x0801d03c
 8013e50:	200008f0 	.word	0x200008f0
 8013e54:	00000484 	.word	0x00000484

08013e58 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8013e58:	b590      	push	{r4, r7, lr}
 8013e5a:	b089      	sub	sp, #36	; 0x24
 8013e5c:	af02      	add	r7, sp, #8
 8013e5e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013e60:	2317      	movs	r3, #23
 8013e62:	18fb      	adds	r3, r7, r3
 8013e64:	2200      	movs	r2, #0
 8013e66:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d102      	bne.n	8013e74 <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013e6e:	2303      	movs	r3, #3
 8013e70:	f000 fce4 	bl	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8013e74:	4adc      	ldr	r2, [pc, #880]	; (80141e8 <LoRaMacMibSetRequestConfirm+0x390>)
 8013e76:	23d0      	movs	r3, #208	; 0xd0
 8013e78:	009b      	lsls	r3, r3, #2
 8013e7a:	58d3      	ldr	r3, [r2, r3]
 8013e7c:	2202      	movs	r2, #2
 8013e7e:	4013      	ands	r3, r2
 8013e80:	d002      	beq.n	8013e88 <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8013e82:	2301      	movs	r3, #1
 8013e84:	f000 fcda 	bl	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
    }

    switch( mibSet->Type )
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	781b      	ldrb	r3, [r3, #0]
 8013e8c:	2b35      	cmp	r3, #53	; 0x35
 8013e8e:	d901      	bls.n	8013e94 <LoRaMacMibSetRequestConfirm+0x3c>
 8013e90:	f000 fc8d 	bl	80147ae <LoRaMacMibSetRequestConfirm+0x956>
 8013e94:	009a      	lsls	r2, r3, #2
 8013e96:	4bd5      	ldr	r3, [pc, #852]	; (80141ec <LoRaMacMibSetRequestConfirm+0x394>)
 8013e98:	18d3      	adds	r3, r2, r3
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	791b      	ldrb	r3, [r3, #4]
 8013ea2:	2217      	movs	r2, #23
 8013ea4:	18bc      	adds	r4, r7, r2
 8013ea6:	0018      	movs	r0, r3
 8013ea8:	f7fc ffc2 	bl	8010e30 <SwitchClass>
 8013eac:	0003      	movs	r3, r0
 8013eae:	7023      	strb	r3, [r4, #0]
            break;
 8013eb0:	f000 fcbd 	bl	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	791b      	ldrb	r3, [r3, #4]
 8013eb8:	2b02      	cmp	r3, #2
 8013eba:	d009      	beq.n	8013ed0 <LoRaMacMibSetRequestConfirm+0x78>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 8013ebc:	4bca      	ldr	r3, [pc, #808]	; (80141e8 <LoRaMacMibSetRequestConfirm+0x390>)
 8013ebe:	4acc      	ldr	r2, [pc, #816]	; (80141f0 <LoRaMacMibSetRequestConfirm+0x398>)
 8013ec0:	589a      	ldr	r2, [r3, r2]
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	7919      	ldrb	r1, [r3, #4]
 8013ec6:	23ea      	movs	r3, #234	; 0xea
 8013ec8:	005b      	lsls	r3, r3, #1
 8013eca:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013ecc:	f000 fcaf 	bl	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ed0:	2317      	movs	r3, #23
 8013ed2:	18fb      	adds	r3, r7, r3
 8013ed4:	2203      	movs	r2, #3
 8013ed6:	701a      	strb	r2, [r3, #0]
            break;
 8013ed8:	f000 fca9 	bl	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	685b      	ldr	r3, [r3, #4]
 8013ee0:	0018      	movs	r0, r3
 8013ee2:	f7fb fadb 	bl	800f49c <SecureElementSetDevEui>
 8013ee6:	1e03      	subs	r3, r0, #0
 8013ee8:	d101      	bne.n	8013eee <LoRaMacMibSetRequestConfirm+0x96>
 8013eea:	f000 fc69 	bl	80147c0 <LoRaMacMibSetRequestConfirm+0x968>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013eee:	2317      	movs	r3, #23
 8013ef0:	18fb      	adds	r3, r7, r3
 8013ef2:	2203      	movs	r2, #3
 8013ef4:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013ef6:	f000 fc63 	bl	80147c0 <LoRaMacMibSetRequestConfirm+0x968>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	685b      	ldr	r3, [r3, #4]
 8013efe:	0018      	movs	r0, r3
 8013f00:	f7fb faf0 	bl	800f4e4 <SecureElementSetJoinEui>
 8013f04:	1e03      	subs	r3, r0, #0
 8013f06:	d101      	bne.n	8013f0c <LoRaMacMibSetRequestConfirm+0xb4>
 8013f08:	f000 fc5c 	bl	80147c4 <LoRaMacMibSetRequestConfirm+0x96c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f0c:	2317      	movs	r3, #23
 8013f0e:	18fb      	adds	r3, r7, r3
 8013f10:	2203      	movs	r2, #3
 8013f12:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013f14:	f000 fc56 	bl	80147c4 <LoRaMacMibSetRequestConfirm+0x96c>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 8013f18:	4bb3      	ldr	r3, [pc, #716]	; (80141e8 <LoRaMacMibSetRequestConfirm+0x390>)
 8013f1a:	4ab5      	ldr	r2, [pc, #724]	; (80141f0 <LoRaMacMibSetRequestConfirm+0x398>)
 8013f1c:	589b      	ldr	r3, [r3, r2]
 8013f1e:	687a      	ldr	r2, [r7, #4]
 8013f20:	7911      	ldrb	r1, [r2, #4]
 8013f22:	22f2      	movs	r2, #242	; 0xf2
 8013f24:	5499      	strb	r1, [r3, r2]
            break;
 8013f26:	f000 fc82 	bl	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 8013f2a:	4baf      	ldr	r3, [pc, #700]	; (80141e8 <LoRaMacMibSetRequestConfirm+0x390>)
 8013f2c:	4ab0      	ldr	r2, [pc, #704]	; (80141f0 <LoRaMacMibSetRequestConfirm+0x398>)
 8013f2e:	589b      	ldr	r3, [r3, r2]
 8013f30:	687a      	ldr	r2, [r7, #4]
 8013f32:	6852      	ldr	r2, [r2, #4]
 8013f34:	649a      	str	r2, [r3, #72]	; 0x48
            break;
 8013f36:	f000 fc7a 	bl	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 8013f3a:	4bab      	ldr	r3, [pc, #684]	; (80141e8 <LoRaMacMibSetRequestConfirm+0x390>)
 8013f3c:	4aac      	ldr	r2, [pc, #688]	; (80141f0 <LoRaMacMibSetRequestConfirm+0x398>)
 8013f3e:	589b      	ldr	r3, [r3, r2]
 8013f40:	687a      	ldr	r2, [r7, #4]
 8013f42:	6852      	ldr	r2, [r2, #4]
 8013f44:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8013f46:	f000 fc72 	bl	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_GEN_APP_KEY:
        {
            if( mibSet->Param.GenAppKey != NULL )
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	685b      	ldr	r3, [r3, #4]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d00c      	beq.n	8013f6c <LoRaMacMibSetRequestConfirm+0x114>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( GEN_APP_KEY, mibSet->Param.GenAppKey ) )
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	685b      	ldr	r3, [r3, #4]
 8013f56:	0019      	movs	r1, r3
 8013f58:	2001      	movs	r0, #1
 8013f5a:	f002 fad5 	bl	8016508 <LoRaMacCryptoSetKey>
 8013f5e:	1e03      	subs	r3, r0, #0
 8013f60:	d101      	bne.n	8013f66 <LoRaMacMibSetRequestConfirm+0x10e>
 8013f62:	f000 fc31 	bl	80147c8 <LoRaMacMibSetRequestConfirm+0x970>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013f66:	2311      	movs	r3, #17
 8013f68:	f000 fc68 	bl	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f6c:	2317      	movs	r3, #23
 8013f6e:	18fb      	adds	r3, r7, r3
 8013f70:	2203      	movs	r2, #3
 8013f72:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013f74:	f000 fc28 	bl	80147c8 <LoRaMacMibSetRequestConfirm+0x970>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	685b      	ldr	r3, [r3, #4]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d00c      	beq.n	8013f9a <LoRaMacMibSetRequestConfirm+0x142>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	685b      	ldr	r3, [r3, #4]
 8013f84:	0019      	movs	r1, r3
 8013f86:	2000      	movs	r0, #0
 8013f88:	f002 fabe 	bl	8016508 <LoRaMacCryptoSetKey>
 8013f8c:	1e03      	subs	r3, r0, #0
 8013f8e:	d101      	bne.n	8013f94 <LoRaMacMibSetRequestConfirm+0x13c>
 8013f90:	f000 fc1c 	bl	80147cc <LoRaMacMibSetRequestConfirm+0x974>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013f94:	2311      	movs	r3, #17
 8013f96:	f000 fc51 	bl	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f9a:	2317      	movs	r3, #23
 8013f9c:	18fb      	adds	r3, r7, r3
 8013f9e:	2203      	movs	r2, #3
 8013fa0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013fa2:	f000 fc13 	bl	80147cc <LoRaMacMibSetRequestConfirm+0x974>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	685b      	ldr	r3, [r3, #4]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d00c      	beq.n	8013fc8 <LoRaMacMibSetRequestConfirm+0x170>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	685b      	ldr	r3, [r3, #4]
 8013fb2:	0019      	movs	r1, r3
 8013fb4:	2002      	movs	r0, #2
 8013fb6:	f002 faa7 	bl	8016508 <LoRaMacCryptoSetKey>
 8013fba:	1e03      	subs	r3, r0, #0
 8013fbc:	d101      	bne.n	8013fc2 <LoRaMacMibSetRequestConfirm+0x16a>
 8013fbe:	f000 fc07 	bl	80147d0 <LoRaMacMibSetRequestConfirm+0x978>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013fc2:	2311      	movs	r3, #17
 8013fc4:	f000 fc3a 	bl	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013fc8:	2317      	movs	r3, #23
 8013fca:	18fb      	adds	r3, r7, r3
 8013fcc:	2203      	movs	r2, #3
 8013fce:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013fd0:	f000 fbfe 	bl	80147d0 <LoRaMacMibSetRequestConfirm+0x978>
        }
        case MIB_J_S_INT_KEY:
        {
            if( mibSet->Param.JSIntKey != NULL )
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	685b      	ldr	r3, [r3, #4]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d00c      	beq.n	8013ff6 <LoRaMacMibSetRequestConfirm+0x19e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	685b      	ldr	r3, [r3, #4]
 8013fe0:	0019      	movs	r1, r3
 8013fe2:	2003      	movs	r0, #3
 8013fe4:	f002 fa90 	bl	8016508 <LoRaMacCryptoSetKey>
 8013fe8:	1e03      	subs	r3, r0, #0
 8013fea:	d101      	bne.n	8013ff0 <LoRaMacMibSetRequestConfirm+0x198>
 8013fec:	f000 fbf2 	bl	80147d4 <LoRaMacMibSetRequestConfirm+0x97c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013ff0:	2311      	movs	r3, #17
 8013ff2:	f000 fc23 	bl	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ff6:	2317      	movs	r3, #23
 8013ff8:	18fb      	adds	r3, r7, r3
 8013ffa:	2203      	movs	r2, #3
 8013ffc:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013ffe:	f000 fbe9 	bl	80147d4 <LoRaMacMibSetRequestConfirm+0x97c>
        }
        case MIB_J_S_ENC_KEY:
        {
            if( mibSet->Param.JSEncKey != NULL )
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	685b      	ldr	r3, [r3, #4]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d00c      	beq.n	8014024 <LoRaMacMibSetRequestConfirm+0x1cc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	685b      	ldr	r3, [r3, #4]
 801400e:	0019      	movs	r1, r3
 8014010:	2004      	movs	r0, #4
 8014012:	f002 fa79 	bl	8016508 <LoRaMacCryptoSetKey>
 8014016:	1e03      	subs	r3, r0, #0
 8014018:	d101      	bne.n	801401e <LoRaMacMibSetRequestConfirm+0x1c6>
 801401a:	f000 fbdd 	bl	80147d8 <LoRaMacMibSetRequestConfirm+0x980>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801401e:	2311      	movs	r3, #17
 8014020:	f000 fc0c 	bl	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014024:	2317      	movs	r3, #23
 8014026:	18fb      	adds	r3, r7, r3
 8014028:	2203      	movs	r2, #3
 801402a:	701a      	strb	r2, [r3, #0]
            }
            break;
 801402c:	f000 fbd4 	bl	80147d8 <LoRaMacMibSetRequestConfirm+0x980>
        }
        case MIB_F_NWK_S_INT_KEY:
        {
            if( mibSet->Param.FNwkSIntKey != NULL )
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	685b      	ldr	r3, [r3, #4]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d00c      	beq.n	8014052 <LoRaMacMibSetRequestConfirm+0x1fa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	685b      	ldr	r3, [r3, #4]
 801403c:	0019      	movs	r1, r3
 801403e:	2005      	movs	r0, #5
 8014040:	f002 fa62 	bl	8016508 <LoRaMacCryptoSetKey>
 8014044:	1e03      	subs	r3, r0, #0
 8014046:	d101      	bne.n	801404c <LoRaMacMibSetRequestConfirm+0x1f4>
 8014048:	f000 fbc8 	bl	80147dc <LoRaMacMibSetRequestConfirm+0x984>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801404c:	2311      	movs	r3, #17
 801404e:	f000 fbf5 	bl	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014052:	2317      	movs	r3, #23
 8014054:	18fb      	adds	r3, r7, r3
 8014056:	2203      	movs	r2, #3
 8014058:	701a      	strb	r2, [r3, #0]
            }
            break;
 801405a:	f000 fbbf 	bl	80147dc <LoRaMacMibSetRequestConfirm+0x984>
        }
        case MIB_S_NWK_S_INT_KEY:
        {
            if( mibSet->Param.SNwkSIntKey != NULL )
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	685b      	ldr	r3, [r3, #4]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d00c      	beq.n	8014080 <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	685b      	ldr	r3, [r3, #4]
 801406a:	0019      	movs	r1, r3
 801406c:	2006      	movs	r0, #6
 801406e:	f002 fa4b 	bl	8016508 <LoRaMacCryptoSetKey>
 8014072:	1e03      	subs	r3, r0, #0
 8014074:	d101      	bne.n	801407a <LoRaMacMibSetRequestConfirm+0x222>
 8014076:	f000 fbb3 	bl	80147e0 <LoRaMacMibSetRequestConfirm+0x988>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801407a:	2311      	movs	r3, #17
 801407c:	f000 fbde 	bl	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014080:	2317      	movs	r3, #23
 8014082:	18fb      	adds	r3, r7, r3
 8014084:	2203      	movs	r2, #3
 8014086:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014088:	f000 fbaa 	bl	80147e0 <LoRaMacMibSetRequestConfirm+0x988>
        }
        case MIB_NWK_S_ENC_KEY:
        {
            if( mibSet->Param.NwkSEncKey != NULL )
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	685b      	ldr	r3, [r3, #4]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d00c      	beq.n	80140ae <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	685b      	ldr	r3, [r3, #4]
 8014098:	0019      	movs	r1, r3
 801409a:	2007      	movs	r0, #7
 801409c:	f002 fa34 	bl	8016508 <LoRaMacCryptoSetKey>
 80140a0:	1e03      	subs	r3, r0, #0
 80140a2:	d101      	bne.n	80140a8 <LoRaMacMibSetRequestConfirm+0x250>
 80140a4:	f000 fb9e 	bl	80147e4 <LoRaMacMibSetRequestConfirm+0x98c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80140a8:	2311      	movs	r3, #17
 80140aa:	f000 fbc7 	bl	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80140ae:	2317      	movs	r3, #23
 80140b0:	18fb      	adds	r3, r7, r3
 80140b2:	2203      	movs	r2, #3
 80140b4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80140b6:	f000 fb95 	bl	80147e4 <LoRaMacMibSetRequestConfirm+0x98c>
        }
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	685b      	ldr	r3, [r3, #4]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d00c      	beq.n	80140dc <LoRaMacMibSetRequestConfirm+0x284>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	685b      	ldr	r3, [r3, #4]
 80140c6:	0019      	movs	r1, r3
 80140c8:	2008      	movs	r0, #8
 80140ca:	f002 fa1d 	bl	8016508 <LoRaMacCryptoSetKey>
 80140ce:	1e03      	subs	r3, r0, #0
 80140d0:	d101      	bne.n	80140d6 <LoRaMacMibSetRequestConfirm+0x27e>
 80140d2:	f000 fb89 	bl	80147e8 <LoRaMacMibSetRequestConfirm+0x990>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80140d6:	2311      	movs	r3, #17
 80140d8:	f000 fbb0 	bl	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80140dc:	2317      	movs	r3, #23
 80140de:	18fb      	adds	r3, r7, r3
 80140e0:	2203      	movs	r2, #3
 80140e2:	701a      	strb	r2, [r3, #0]
            }
            break;
 80140e4:	f000 fb80 	bl	80147e8 <LoRaMacMibSetRequestConfirm+0x990>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	685b      	ldr	r3, [r3, #4]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d00c      	beq.n	801410a <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	685b      	ldr	r3, [r3, #4]
 80140f4:	0019      	movs	r1, r3
 80140f6:	207f      	movs	r0, #127	; 0x7f
 80140f8:	f002 fa06 	bl	8016508 <LoRaMacCryptoSetKey>
 80140fc:	1e03      	subs	r3, r0, #0
 80140fe:	d101      	bne.n	8014104 <LoRaMacMibSetRequestConfirm+0x2ac>
 8014100:	f000 fb74 	bl	80147ec <LoRaMacMibSetRequestConfirm+0x994>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014104:	2311      	movs	r3, #17
 8014106:	f000 fb99 	bl	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801410a:	2317      	movs	r3, #23
 801410c:	18fb      	adds	r3, r7, r3
 801410e:	2203      	movs	r2, #3
 8014110:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014112:	f000 fb6b 	bl	80147ec <LoRaMacMibSetRequestConfirm+0x994>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	685b      	ldr	r3, [r3, #4]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d00c      	beq.n	8014138 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	685b      	ldr	r3, [r3, #4]
 8014122:	0019      	movs	r1, r3
 8014124:	2080      	movs	r0, #128	; 0x80
 8014126:	f002 f9ef 	bl	8016508 <LoRaMacCryptoSetKey>
 801412a:	1e03      	subs	r3, r0, #0
 801412c:	d101      	bne.n	8014132 <LoRaMacMibSetRequestConfirm+0x2da>
 801412e:	f000 fb5f 	bl	80147f0 <LoRaMacMibSetRequestConfirm+0x998>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014132:	2311      	movs	r3, #17
 8014134:	f000 fb82 	bl	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014138:	2317      	movs	r3, #23
 801413a:	18fb      	adds	r3, r7, r3
 801413c:	2203      	movs	r2, #3
 801413e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014140:	e356      	b.n	80147f0 <LoRaMacMibSetRequestConfirm+0x998>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	685b      	ldr	r3, [r3, #4]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d00b      	beq.n	8014162 <LoRaMacMibSetRequestConfirm+0x30a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	685b      	ldr	r3, [r3, #4]
 801414e:	0019      	movs	r1, r3
 8014150:	2081      	movs	r0, #129	; 0x81
 8014152:	f002 f9d9 	bl	8016508 <LoRaMacCryptoSetKey>
 8014156:	1e03      	subs	r3, r0, #0
 8014158:	d100      	bne.n	801415c <LoRaMacMibSetRequestConfirm+0x304>
 801415a:	e34b      	b.n	80147f4 <LoRaMacMibSetRequestConfirm+0x99c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801415c:	2311      	movs	r3, #17
 801415e:	f000 fb6d 	bl	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014162:	2317      	movs	r3, #23
 8014164:	18fb      	adds	r3, r7, r3
 8014166:	2203      	movs	r2, #3
 8014168:	701a      	strb	r2, [r3, #0]
            }
            break;
 801416a:	e343      	b.n	80147f4 <LoRaMacMibSetRequestConfirm+0x99c>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	685b      	ldr	r3, [r3, #4]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d00b      	beq.n	801418c <LoRaMacMibSetRequestConfirm+0x334>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	685b      	ldr	r3, [r3, #4]
 8014178:	0019      	movs	r1, r3
 801417a:	2082      	movs	r0, #130	; 0x82
 801417c:	f002 f9c4 	bl	8016508 <LoRaMacCryptoSetKey>
 8014180:	1e03      	subs	r3, r0, #0
 8014182:	d100      	bne.n	8014186 <LoRaMacMibSetRequestConfirm+0x32e>
 8014184:	e338      	b.n	80147f8 <LoRaMacMibSetRequestConfirm+0x9a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014186:	2311      	movs	r3, #17
 8014188:	f000 fb58 	bl	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801418c:	2317      	movs	r3, #23
 801418e:	18fb      	adds	r3, r7, r3
 8014190:	2203      	movs	r2, #3
 8014192:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014194:	e330      	b.n	80147f8 <LoRaMacMibSetRequestConfirm+0x9a0>
        }
        case MIB_MC_KEY_1:
        {
            if( mibSet->Param.McKey1 != NULL )
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	685b      	ldr	r3, [r3, #4]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d00a      	beq.n	80141b4 <LoRaMacMibSetRequestConfirm+0x35c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	685b      	ldr	r3, [r3, #4]
 80141a2:	0019      	movs	r1, r3
 80141a4:	2083      	movs	r0, #131	; 0x83
 80141a6:	f002 f9af 	bl	8016508 <LoRaMacCryptoSetKey>
 80141aa:	1e03      	subs	r3, r0, #0
 80141ac:	d100      	bne.n	80141b0 <LoRaMacMibSetRequestConfirm+0x358>
 80141ae:	e325      	b.n	80147fc <LoRaMacMibSetRequestConfirm+0x9a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80141b0:	2311      	movs	r3, #17
 80141b2:	e343      	b.n	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80141b4:	2317      	movs	r3, #23
 80141b6:	18fb      	adds	r3, r7, r3
 80141b8:	2203      	movs	r2, #3
 80141ba:	701a      	strb	r2, [r3, #0]
            }
            break;
 80141bc:	e31e      	b.n	80147fc <LoRaMacMibSetRequestConfirm+0x9a4>
        }
        case MIB_MC_APP_S_KEY_1:
        {
            if( mibSet->Param.McAppSKey1 != NULL )
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	685b      	ldr	r3, [r3, #4]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d00a      	beq.n	80141dc <LoRaMacMibSetRequestConfirm+0x384>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	685b      	ldr	r3, [r3, #4]
 80141ca:	0019      	movs	r1, r3
 80141cc:	2084      	movs	r0, #132	; 0x84
 80141ce:	f002 f99b 	bl	8016508 <LoRaMacCryptoSetKey>
 80141d2:	1e03      	subs	r3, r0, #0
 80141d4:	d100      	bne.n	80141d8 <LoRaMacMibSetRequestConfirm+0x380>
 80141d6:	e313      	b.n	8014800 <LoRaMacMibSetRequestConfirm+0x9a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80141d8:	2311      	movs	r3, #17
 80141da:	e32f      	b.n	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80141dc:	2317      	movs	r3, #23
 80141de:	18fb      	adds	r3, r7, r3
 80141e0:	2203      	movs	r2, #3
 80141e2:	701a      	strb	r2, [r3, #0]
            }
            break;
 80141e4:	e30c      	b.n	8014800 <LoRaMacMibSetRequestConfirm+0x9a8>
 80141e6:	46c0      	nop			; (mov r8, r8)
 80141e8:	200008f0 	.word	0x200008f0
 80141ec:	0801d110 	.word	0x0801d110
 80141f0:	00000484 	.word	0x00000484
        }
        case MIB_MC_NWK_S_KEY_1:
        {
            if( mibSet->Param.McNwkSKey1 != NULL )
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	685b      	ldr	r3, [r3, #4]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d00a      	beq.n	8014212 <LoRaMacMibSetRequestConfirm+0x3ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	685b      	ldr	r3, [r3, #4]
 8014200:	0019      	movs	r1, r3
 8014202:	2085      	movs	r0, #133	; 0x85
 8014204:	f002 f980 	bl	8016508 <LoRaMacCryptoSetKey>
 8014208:	1e03      	subs	r3, r0, #0
 801420a:	d100      	bne.n	801420e <LoRaMacMibSetRequestConfirm+0x3b6>
 801420c:	e2fa      	b.n	8014804 <LoRaMacMibSetRequestConfirm+0x9ac>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801420e:	2311      	movs	r3, #17
 8014210:	e314      	b.n	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014212:	2317      	movs	r3, #23
 8014214:	18fb      	adds	r3, r7, r3
 8014216:	2203      	movs	r2, #3
 8014218:	701a      	strb	r2, [r3, #0]
            }
            break;
 801421a:	e2f3      	b.n	8014804 <LoRaMacMibSetRequestConfirm+0x9ac>
        }
        case MIB_MC_KEY_2:
        {
            if( mibSet->Param.McKey2 != NULL )
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	685b      	ldr	r3, [r3, #4]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d00a      	beq.n	801423a <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	685b      	ldr	r3, [r3, #4]
 8014228:	0019      	movs	r1, r3
 801422a:	2086      	movs	r0, #134	; 0x86
 801422c:	f002 f96c 	bl	8016508 <LoRaMacCryptoSetKey>
 8014230:	1e03      	subs	r3, r0, #0
 8014232:	d100      	bne.n	8014236 <LoRaMacMibSetRequestConfirm+0x3de>
 8014234:	e2e8      	b.n	8014808 <LoRaMacMibSetRequestConfirm+0x9b0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014236:	2311      	movs	r3, #17
 8014238:	e300      	b.n	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801423a:	2317      	movs	r3, #23
 801423c:	18fb      	adds	r3, r7, r3
 801423e:	2203      	movs	r2, #3
 8014240:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014242:	e2e1      	b.n	8014808 <LoRaMacMibSetRequestConfirm+0x9b0>
        }
        case MIB_MC_APP_S_KEY_2:
        {
            if( mibSet->Param.McAppSKey2 != NULL )
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	685b      	ldr	r3, [r3, #4]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d00a      	beq.n	8014262 <LoRaMacMibSetRequestConfirm+0x40a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	685b      	ldr	r3, [r3, #4]
 8014250:	0019      	movs	r1, r3
 8014252:	2087      	movs	r0, #135	; 0x87
 8014254:	f002 f958 	bl	8016508 <LoRaMacCryptoSetKey>
 8014258:	1e03      	subs	r3, r0, #0
 801425a:	d100      	bne.n	801425e <LoRaMacMibSetRequestConfirm+0x406>
 801425c:	e2d6      	b.n	801480c <LoRaMacMibSetRequestConfirm+0x9b4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801425e:	2311      	movs	r3, #17
 8014260:	e2ec      	b.n	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014262:	2317      	movs	r3, #23
 8014264:	18fb      	adds	r3, r7, r3
 8014266:	2203      	movs	r2, #3
 8014268:	701a      	strb	r2, [r3, #0]
            }
            break;
 801426a:	e2cf      	b.n	801480c <LoRaMacMibSetRequestConfirm+0x9b4>
        }
        case MIB_MC_NWK_S_KEY_2:
        {
            if( mibSet->Param.McNwkSKey2 != NULL )
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	685b      	ldr	r3, [r3, #4]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d00a      	beq.n	801428a <LoRaMacMibSetRequestConfirm+0x432>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	685b      	ldr	r3, [r3, #4]
 8014278:	0019      	movs	r1, r3
 801427a:	2088      	movs	r0, #136	; 0x88
 801427c:	f002 f944 	bl	8016508 <LoRaMacCryptoSetKey>
 8014280:	1e03      	subs	r3, r0, #0
 8014282:	d100      	bne.n	8014286 <LoRaMacMibSetRequestConfirm+0x42e>
 8014284:	e2c4      	b.n	8014810 <LoRaMacMibSetRequestConfirm+0x9b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014286:	2311      	movs	r3, #17
 8014288:	e2d8      	b.n	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801428a:	2317      	movs	r3, #23
 801428c:	18fb      	adds	r3, r7, r3
 801428e:	2203      	movs	r2, #3
 8014290:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014292:	e2bd      	b.n	8014810 <LoRaMacMibSetRequestConfirm+0x9b8>
        }
        case MIB_MC_KEY_3:
        {
            if( mibSet->Param.McKey3 != NULL )
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	685b      	ldr	r3, [r3, #4]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d00a      	beq.n	80142b2 <LoRaMacMibSetRequestConfirm+0x45a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	685b      	ldr	r3, [r3, #4]
 80142a0:	0019      	movs	r1, r3
 80142a2:	2089      	movs	r0, #137	; 0x89
 80142a4:	f002 f930 	bl	8016508 <LoRaMacCryptoSetKey>
 80142a8:	1e03      	subs	r3, r0, #0
 80142aa:	d100      	bne.n	80142ae <LoRaMacMibSetRequestConfirm+0x456>
 80142ac:	e2b2      	b.n	8014814 <LoRaMacMibSetRequestConfirm+0x9bc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80142ae:	2311      	movs	r3, #17
 80142b0:	e2c4      	b.n	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80142b2:	2317      	movs	r3, #23
 80142b4:	18fb      	adds	r3, r7, r3
 80142b6:	2203      	movs	r2, #3
 80142b8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80142ba:	e2ab      	b.n	8014814 <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_MC_APP_S_KEY_3:
        {
            if( mibSet->Param.McAppSKey3 != NULL )
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	685b      	ldr	r3, [r3, #4]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d00a      	beq.n	80142da <LoRaMacMibSetRequestConfirm+0x482>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	685b      	ldr	r3, [r3, #4]
 80142c8:	0019      	movs	r1, r3
 80142ca:	208a      	movs	r0, #138	; 0x8a
 80142cc:	f002 f91c 	bl	8016508 <LoRaMacCryptoSetKey>
 80142d0:	1e03      	subs	r3, r0, #0
 80142d2:	d100      	bne.n	80142d6 <LoRaMacMibSetRequestConfirm+0x47e>
 80142d4:	e2a0      	b.n	8014818 <LoRaMacMibSetRequestConfirm+0x9c0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80142d6:	2311      	movs	r3, #17
 80142d8:	e2b0      	b.n	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80142da:	2317      	movs	r3, #23
 80142dc:	18fb      	adds	r3, r7, r3
 80142de:	2203      	movs	r2, #3
 80142e0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80142e2:	e299      	b.n	8014818 <LoRaMacMibSetRequestConfirm+0x9c0>
        }
        case MIB_MC_NWK_S_KEY_3:
        {
            if( mibSet->Param.McNwkSKey3 != NULL )
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	685b      	ldr	r3, [r3, #4]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d00a      	beq.n	8014302 <LoRaMacMibSetRequestConfirm+0x4aa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	685b      	ldr	r3, [r3, #4]
 80142f0:	0019      	movs	r1, r3
 80142f2:	208b      	movs	r0, #139	; 0x8b
 80142f4:	f002 f908 	bl	8016508 <LoRaMacCryptoSetKey>
 80142f8:	1e03      	subs	r3, r0, #0
 80142fa:	d100      	bne.n	80142fe <LoRaMacMibSetRequestConfirm+0x4a6>
 80142fc:	e28e      	b.n	801481c <LoRaMacMibSetRequestConfirm+0x9c4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80142fe:	2311      	movs	r3, #17
 8014300:	e29c      	b.n	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014302:	2317      	movs	r3, #23
 8014304:	18fb      	adds	r3, r7, r3
 8014306:	2203      	movs	r2, #3
 8014308:	701a      	strb	r2, [r3, #0]
            }
            break;
 801430a:	e287      	b.n	801481c <LoRaMacMibSetRequestConfirm+0x9c4>
        }
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 801430c:	4bd8      	ldr	r3, [pc, #864]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 801430e:	4ad9      	ldr	r2, [pc, #868]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014310:	589b      	ldr	r3, [r3, r2]
 8014312:	687a      	ldr	r2, [r7, #4]
 8014314:	7911      	ldrb	r1, [r2, #4]
 8014316:	22f1      	movs	r2, #241	; 0xf1
 8014318:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 801431a:	4bd7      	ldr	r3, [pc, #860]	; (8014678 <LoRaMacMibSetRequestConfirm+0x820>)
 801431c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801431e:	4ad4      	ldr	r2, [pc, #848]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 8014320:	49d4      	ldr	r1, [pc, #848]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014322:	5852      	ldr	r2, [r2, r1]
 8014324:	21f1      	movs	r1, #241	; 0xf1
 8014326:	5c52      	ldrb	r2, [r2, r1]
 8014328:	0010      	movs	r0, r2
 801432a:	4798      	blx	r3
            break;
 801432c:	e27f      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 801432e:	4bd0      	ldr	r3, [pc, #832]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 8014330:	4ad0      	ldr	r2, [pc, #832]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014332:	589a      	ldr	r2, [r3, r2]
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	7919      	ldrb	r1, [r3, #4]
 8014338:	2340      	movs	r3, #64	; 0x40
 801433a:	33ff      	adds	r3, #255	; 0xff
 801433c:	54d1      	strb	r1, [r2, r3]
            break;
 801433e:	e276      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	7a1b      	ldrb	r3, [r3, #8]
 8014344:	b25a      	sxtb	r2, r3
 8014346:	2108      	movs	r1, #8
 8014348:	187b      	adds	r3, r7, r1
 801434a:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 801434c:	4bc8      	ldr	r3, [pc, #800]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 801434e:	4ac9      	ldr	r2, [pc, #804]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014350:	589a      	ldr	r2, [r3, r2]
 8014352:	232e      	movs	r3, #46	; 0x2e
 8014354:	33ff      	adds	r3, #255	; 0xff
 8014356:	5cd2      	ldrb	r2, [r2, r3]
 8014358:	187b      	adds	r3, r7, r1
 801435a:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 801435c:	4bc4      	ldr	r3, [pc, #784]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 801435e:	4ac5      	ldr	r2, [pc, #788]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014360:	589b      	ldr	r3, [r3, r2]
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	1879      	adds	r1, r7, r1
 8014366:	2207      	movs	r2, #7
 8014368:	0018      	movs	r0, r3
 801436a:	f003 f94a 	bl	8017602 <RegionVerify>
 801436e:	1e03      	subs	r3, r0, #0
 8014370:	d00a      	beq.n	8014388 <LoRaMacMibSetRequestConfirm+0x530>
            {
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8014372:	4bbf      	ldr	r3, [pc, #764]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 8014374:	4abf      	ldr	r2, [pc, #764]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014376:	5899      	ldr	r1, [r3, r2]
 8014378:	238e      	movs	r3, #142	; 0x8e
 801437a:	005b      	lsls	r3, r3, #1
 801437c:	687a      	ldr	r2, [r7, #4]
 801437e:	18cb      	adds	r3, r1, r3
 8014380:	3204      	adds	r2, #4
 8014382:	ca03      	ldmia	r2!, {r0, r1}
 8014384:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014386:	e252      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014388:	2317      	movs	r3, #23
 801438a:	18fb      	adds	r3, r7, r3
 801438c:	2203      	movs	r2, #3
 801438e:	701a      	strb	r2, [r3, #0]
            break;
 8014390:	e24d      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	7a1b      	ldrb	r3, [r3, #8]
 8014396:	b25a      	sxtb	r2, r3
 8014398:	2108      	movs	r1, #8
 801439a:	187b      	adds	r3, r7, r1
 801439c:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 801439e:	4bb4      	ldr	r3, [pc, #720]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 80143a0:	4ab4      	ldr	r2, [pc, #720]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 80143a2:	589a      	ldr	r2, [r3, r2]
 80143a4:	232e      	movs	r3, #46	; 0x2e
 80143a6:	33ff      	adds	r3, #255	; 0xff
 80143a8:	5cd2      	ldrb	r2, [r2, r3]
 80143aa:	187b      	adds	r3, r7, r1
 80143ac:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80143ae:	4bb0      	ldr	r3, [pc, #704]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 80143b0:	4ab0      	ldr	r2, [pc, #704]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 80143b2:	589b      	ldr	r3, [r3, r2]
 80143b4:	781b      	ldrb	r3, [r3, #0]
 80143b6:	1879      	adds	r1, r7, r1
 80143b8:	2207      	movs	r2, #7
 80143ba:	0018      	movs	r0, r3
 80143bc:	f003 f921 	bl	8017602 <RegionVerify>
 80143c0:	1e03      	subs	r3, r0, #0
 80143c2:	d008      	beq.n	80143d6 <LoRaMacMibSetRequestConfirm+0x57e>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80143c4:	4baa      	ldr	r3, [pc, #680]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 80143c6:	4aab      	ldr	r2, [pc, #684]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 80143c8:	589b      	ldr	r3, [r3, r2]
 80143ca:	687a      	ldr	r2, [r7, #4]
 80143cc:	3328      	adds	r3, #40	; 0x28
 80143ce:	3204      	adds	r2, #4
 80143d0:	ca03      	ldmia	r2!, {r0, r1}
 80143d2:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80143d4:	e22b      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80143d6:	2317      	movs	r3, #23
 80143d8:	18fb      	adds	r3, r7, r3
 80143da:	2203      	movs	r2, #3
 80143dc:	701a      	strb	r2, [r3, #0]
            break;
 80143de:	e226      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	7a1b      	ldrb	r3, [r3, #8]
 80143e4:	b25a      	sxtb	r2, r3
 80143e6:	2108      	movs	r1, #8
 80143e8:	187b      	adds	r3, r7, r1
 80143ea:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80143ec:	4ba0      	ldr	r3, [pc, #640]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 80143ee:	4aa1      	ldr	r2, [pc, #644]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 80143f0:	589a      	ldr	r2, [r3, r2]
 80143f2:	232e      	movs	r3, #46	; 0x2e
 80143f4:	33ff      	adds	r3, #255	; 0xff
 80143f6:	5cd2      	ldrb	r2, [r2, r3]
 80143f8:	187b      	adds	r3, r7, r1
 80143fa:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80143fc:	4b9c      	ldr	r3, [pc, #624]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 80143fe:	4a9d      	ldr	r2, [pc, #628]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014400:	589b      	ldr	r3, [r3, r2]
 8014402:	781b      	ldrb	r3, [r3, #0]
 8014404:	1879      	adds	r1, r7, r1
 8014406:	2207      	movs	r2, #7
 8014408:	0018      	movs	r0, r3
 801440a:	f003 f8fa 	bl	8017602 <RegionVerify>
 801440e:	1e03      	subs	r3, r0, #0
 8014410:	d03c      	beq.n	801448c <LoRaMacMibSetRequestConfirm+0x634>
            {
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8014412:	4b97      	ldr	r3, [pc, #604]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 8014414:	4a97      	ldr	r2, [pc, #604]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014416:	5899      	ldr	r1, [r3, r2]
 8014418:	2392      	movs	r3, #146	; 0x92
 801441a:	005b      	lsls	r3, r3, #1
 801441c:	687a      	ldr	r2, [r7, #4]
 801441e:	18cb      	adds	r3, r1, r3
 8014420:	3204      	adds	r2, #4
 8014422:	ca03      	ldmia	r2!, {r0, r1}
 8014424:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8014426:	4b92      	ldr	r3, [pc, #584]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 8014428:	4a92      	ldr	r2, [pc, #584]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 801442a:	589b      	ldr	r3, [r3, r2]
 801442c:	22f0      	movs	r2, #240	; 0xf0
 801442e:	5c9b      	ldrb	r3, [r3, r2]
 8014430:	2b02      	cmp	r3, #2
 8014432:	d000      	beq.n	8014436 <LoRaMacMibSetRequestConfirm+0x5de>
 8014434:	e1f4      	b.n	8014820 <LoRaMacMibSetRequestConfirm+0x9c8>
 8014436:	4b8e      	ldr	r3, [pc, #568]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 8014438:	4a8e      	ldr	r2, [pc, #568]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 801443a:	589a      	ldr	r2, [r3, r2]
 801443c:	23ea      	movs	r3, #234	; 0xea
 801443e:	005b      	lsls	r3, r3, #1
 8014440:	5cd3      	ldrb	r3, [r2, r3]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d100      	bne.n	8014448 <LoRaMacMibSetRequestConfirm+0x5f0>
 8014446:	e1eb      	b.n	8014820 <LoRaMacMibSetRequestConfirm+0x9c8>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8014448:	4b8b      	ldr	r3, [pc, #556]	; (8014678 <LoRaMacMibSetRequestConfirm+0x820>)
 801444a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801444c:	4798      	blx	r3
                    // Compute RxC windows parameters
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801444e:	4b88      	ldr	r3, [pc, #544]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 8014450:	4a88      	ldr	r2, [pc, #544]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014452:	589b      	ldr	r3, [r3, r2]
 8014454:	7818      	ldrb	r0, [r3, #0]
                                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8014456:	4b86      	ldr	r3, [pc, #536]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 8014458:	4a86      	ldr	r2, [pc, #536]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 801445a:	589a      	ldr	r2, [r3, r2]
 801445c:	2394      	movs	r3, #148	; 0x94
 801445e:	005b      	lsls	r3, r3, #1
 8014460:	5cd3      	ldrb	r3, [r2, r3]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8014462:	b259      	sxtb	r1, r3
                                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8014464:	4b82      	ldr	r3, [pc, #520]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 8014466:	4a83      	ldr	r2, [pc, #524]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014468:	589a      	ldr	r2, [r3, r2]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801446a:	2380      	movs	r3, #128	; 0x80
 801446c:	005b      	lsls	r3, r3, #1
 801446e:	5cd4      	ldrb	r4, [r2, r3]
                                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8014470:	4b7f      	ldr	r3, [pc, #508]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 8014472:	4a80      	ldr	r2, [pc, #512]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014474:	589b      	ldr	r3, [r3, r2]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8014476:	22fc      	movs	r2, #252	; 0xfc
 8014478:	589a      	ldr	r2, [r3, r2]
 801447a:	4b80      	ldr	r3, [pc, #512]	; (801467c <LoRaMacMibSetRequestConfirm+0x824>)
 801447c:	9300      	str	r3, [sp, #0]
 801447e:	0013      	movs	r3, r2
 8014480:	0022      	movs	r2, r4
 8014482:	f003 f906 	bl	8017692 <RegionComputeRxWindowParameters>
                                                     &MacCtx.RxWindowCConfig );
                    OpenContinuousRxCWindow( );
 8014486:	f7fe f99d 	bl	80127c4 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801448a:	e1c9      	b.n	8014820 <LoRaMacMibSetRequestConfirm+0x9c8>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801448c:	2317      	movs	r3, #23
 801448e:	18fb      	adds	r3, r7, r3
 8014490:	2203      	movs	r2, #3
 8014492:	701a      	strb	r2, [r3, #0]
            break;
 8014494:	e1c4      	b.n	8014820 <LoRaMacMibSetRequestConfirm+0x9c8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	7a1b      	ldrb	r3, [r3, #8]
 801449a:	b25a      	sxtb	r2, r3
 801449c:	2108      	movs	r1, #8
 801449e:	187b      	adds	r3, r7, r1
 80144a0:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80144a2:	4b73      	ldr	r3, [pc, #460]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 80144a4:	4a73      	ldr	r2, [pc, #460]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 80144a6:	589a      	ldr	r2, [r3, r2]
 80144a8:	232e      	movs	r3, #46	; 0x2e
 80144aa:	33ff      	adds	r3, #255	; 0xff
 80144ac:	5cd2      	ldrb	r2, [r2, r3]
 80144ae:	187b      	adds	r3, r7, r1
 80144b0:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80144b2:	4b6f      	ldr	r3, [pc, #444]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 80144b4:	4a6f      	ldr	r2, [pc, #444]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 80144b6:	589b      	ldr	r3, [r3, r2]
 80144b8:	781b      	ldrb	r3, [r3, #0]
 80144ba:	1879      	adds	r1, r7, r1
 80144bc:	2207      	movs	r2, #7
 80144be:	0018      	movs	r0, r3
 80144c0:	f003 f89f 	bl	8017602 <RegionVerify>
 80144c4:	1e03      	subs	r3, r0, #0
 80144c6:	d008      	beq.n	80144da <LoRaMacMibSetRequestConfirm+0x682>
            {
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80144c8:	4b69      	ldr	r3, [pc, #420]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 80144ca:	4a6a      	ldr	r2, [pc, #424]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 80144cc:	589b      	ldr	r3, [r3, r2]
 80144ce:	687a      	ldr	r2, [r7, #4]
 80144d0:	3330      	adds	r3, #48	; 0x30
 80144d2:	3204      	adds	r2, #4
 80144d4:	ca03      	ldmia	r2!, {r0, r1}
 80144d6:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80144d8:	e1a9      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80144da:	2317      	movs	r3, #23
 80144dc:	18fb      	adds	r3, r7, r3
 80144de:	2203      	movs	r2, #3
 80144e0:	701a      	strb	r2, [r3, #0]
            break;
 80144e2:	e1a4      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	685a      	ldr	r2, [r3, #4]
 80144e8:	210c      	movs	r1, #12
 80144ea:	187b      	adds	r3, r7, r1
 80144ec:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80144ee:	187b      	adds	r3, r7, r1
 80144f0:	2201      	movs	r2, #1
 80144f2:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 80144f4:	4b5e      	ldr	r3, [pc, #376]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 80144f6:	4a5f      	ldr	r2, [pc, #380]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 80144f8:	589b      	ldr	r3, [r3, r2]
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	187a      	adds	r2, r7, r1
 80144fe:	0011      	movs	r1, r2
 8014500:	0018      	movs	r0, r3
 8014502:	f003 f8b0 	bl	8017666 <RegionChanMaskSet>
 8014506:	0003      	movs	r3, r0
 8014508:	001a      	movs	r2, r3
 801450a:	2301      	movs	r3, #1
 801450c:	4053      	eors	r3, r2
 801450e:	b2db      	uxtb	r3, r3
 8014510:	2b00      	cmp	r3, #0
 8014512:	d100      	bne.n	8014516 <LoRaMacMibSetRequestConfirm+0x6be>
 8014514:	e186      	b.n	8014824 <LoRaMacMibSetRequestConfirm+0x9cc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014516:	2317      	movs	r3, #23
 8014518:	18fb      	adds	r3, r7, r3
 801451a:	2203      	movs	r2, #3
 801451c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801451e:	e181      	b.n	8014824 <LoRaMacMibSetRequestConfirm+0x9cc>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	685a      	ldr	r2, [r3, #4]
 8014524:	210c      	movs	r1, #12
 8014526:	187b      	adds	r3, r7, r1
 8014528:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801452a:	187b      	adds	r3, r7, r1
 801452c:	2200      	movs	r2, #0
 801452e:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8014530:	4b4f      	ldr	r3, [pc, #316]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 8014532:	4a50      	ldr	r2, [pc, #320]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014534:	589b      	ldr	r3, [r3, r2]
 8014536:	781b      	ldrb	r3, [r3, #0]
 8014538:	187a      	adds	r2, r7, r1
 801453a:	0011      	movs	r1, r2
 801453c:	0018      	movs	r0, r3
 801453e:	f003 f892 	bl	8017666 <RegionChanMaskSet>
 8014542:	0003      	movs	r3, r0
 8014544:	001a      	movs	r2, r3
 8014546:	2301      	movs	r3, #1
 8014548:	4053      	eors	r3, r2
 801454a:	b2db      	uxtb	r3, r3
 801454c:	2b00      	cmp	r3, #0
 801454e:	d100      	bne.n	8014552 <LoRaMacMibSetRequestConfirm+0x6fa>
 8014550:	e16a      	b.n	8014828 <LoRaMacMibSetRequestConfirm+0x9d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014552:	2317      	movs	r3, #23
 8014554:	18fb      	adds	r3, r7, r3
 8014556:	2203      	movs	r2, #3
 8014558:	701a      	strb	r2, [r3, #0]
            }
            break;
 801455a:	e165      	b.n	8014828 <LoRaMacMibSetRequestConfirm+0x9d0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	791b      	ldrb	r3, [r3, #4]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d00c      	beq.n	801457e <LoRaMacMibSetRequestConfirm+0x726>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014568:	2b0f      	cmp	r3, #15
 801456a:	d808      	bhi.n	801457e <LoRaMacMibSetRequestConfirm+0x726>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 801456c:	4b40      	ldr	r3, [pc, #256]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 801456e:	4a41      	ldr	r2, [pc, #260]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014570:	589a      	ldr	r2, [r3, r2]
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	7919      	ldrb	r1, [r3, #4]
 8014576:	238c      	movs	r3, #140	; 0x8c
 8014578:	005b      	lsls	r3, r3, #1
 801457a:	54d1      	strb	r1, [r2, r3]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801457c:	e157      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801457e:	2317      	movs	r3, #23
 8014580:	18fb      	adds	r3, r7, r3
 8014582:	2203      	movs	r2, #3
 8014584:	701a      	strb	r2, [r3, #0]
            break;
 8014586:	e152      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8014588:	4b39      	ldr	r3, [pc, #228]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 801458a:	4a3a      	ldr	r2, [pc, #232]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 801458c:	589a      	ldr	r2, [r3, r2]
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	6859      	ldr	r1, [r3, #4]
 8014592:	2382      	movs	r3, #130	; 0x82
 8014594:	005b      	lsls	r3, r3, #1
 8014596:	50d1      	str	r1, [r2, r3]
            break;
 8014598:	e149      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801459a:	4b35      	ldr	r3, [pc, #212]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 801459c:	4a35      	ldr	r2, [pc, #212]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 801459e:	589a      	ldr	r2, [r3, r2]
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	6859      	ldr	r1, [r3, #4]
 80145a4:	2384      	movs	r3, #132	; 0x84
 80145a6:	005b      	lsls	r3, r3, #1
 80145a8:	50d1      	str	r1, [r2, r3]
            break;
 80145aa:	e140      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80145ac:	4b30      	ldr	r3, [pc, #192]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 80145ae:	4a31      	ldr	r2, [pc, #196]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 80145b0:	589a      	ldr	r2, [r3, r2]
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	6859      	ldr	r1, [r3, #4]
 80145b6:	2386      	movs	r3, #134	; 0x86
 80145b8:	005b      	lsls	r3, r3, #1
 80145ba:	50d1      	str	r1, [r2, r3]
            break;
 80145bc:	e137      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80145be:	4b2c      	ldr	r3, [pc, #176]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 80145c0:	4a2c      	ldr	r2, [pc, #176]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 80145c2:	589a      	ldr	r2, [r3, r2]
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	6859      	ldr	r1, [r3, #4]
 80145c8:	2388      	movs	r3, #136	; 0x88
 80145ca:	005b      	lsls	r3, r3, #1
 80145cc:	50d1      	str	r1, [r2, r3]
            break;
 80145ce:	e12e      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80145d0:	4b27      	ldr	r3, [pc, #156]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 80145d2:	4a28      	ldr	r2, [pc, #160]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 80145d4:	589a      	ldr	r2, [r3, r2]
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	6859      	ldr	r1, [r3, #4]
 80145da:	238a      	movs	r3, #138	; 0x8a
 80145dc:	005b      	lsls	r3, r3, #1
 80145de:	50d1      	str	r1, [r2, r3]
            break;
 80145e0:	e125      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	2204      	movs	r2, #4
 80145e6:	569a      	ldrsb	r2, [r3, r2]
 80145e8:	2108      	movs	r1, #8
 80145ea:	187b      	adds	r3, r7, r1
 80145ec:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 80145ee:	4b20      	ldr	r3, [pc, #128]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 80145f0:	4a20      	ldr	r2, [pc, #128]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 80145f2:	589b      	ldr	r3, [r3, r2]
 80145f4:	781b      	ldrb	r3, [r3, #0]
 80145f6:	1879      	adds	r1, r7, r1
 80145f8:	2206      	movs	r2, #6
 80145fa:	0018      	movs	r0, r3
 80145fc:	f003 f801 	bl	8017602 <RegionVerify>
 8014600:	1e03      	subs	r3, r0, #0
 8014602:	d008      	beq.n	8014616 <LoRaMacMibSetRequestConfirm+0x7be>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014604:	4b1a      	ldr	r3, [pc, #104]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 8014606:	4a1b      	ldr	r2, [pc, #108]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014608:	589b      	ldr	r3, [r3, r2]
 801460a:	2208      	movs	r2, #8
 801460c:	18ba      	adds	r2, r7, r2
 801460e:	7812      	ldrb	r2, [r2, #0]
 8014610:	b252      	sxtb	r2, r2
 8014612:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014614:	e10b      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014616:	2317      	movs	r3, #23
 8014618:	18fb      	adds	r3, r7, r3
 801461a:	2203      	movs	r2, #3
 801461c:	701a      	strb	r2, [r3, #0]
            break;
 801461e:	e106      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	2204      	movs	r2, #4
 8014624:	569a      	ldrsb	r2, [r3, r2]
 8014626:	2108      	movs	r1, #8
 8014628:	187b      	adds	r3, r7, r1
 801462a:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801462c:	4b10      	ldr	r3, [pc, #64]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 801462e:	4a11      	ldr	r2, [pc, #68]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014630:	589a      	ldr	r2, [r3, r2]
 8014632:	2396      	movs	r3, #150	; 0x96
 8014634:	005b      	lsls	r3, r3, #1
 8014636:	5cd2      	ldrb	r2, [r2, r3]
 8014638:	187b      	adds	r3, r7, r1
 801463a:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 801463c:	4b0c      	ldr	r3, [pc, #48]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 801463e:	4a0d      	ldr	r2, [pc, #52]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014640:	589b      	ldr	r3, [r3, r2]
 8014642:	781b      	ldrb	r3, [r3, #0]
 8014644:	1879      	adds	r1, r7, r1
 8014646:	2205      	movs	r2, #5
 8014648:	0018      	movs	r0, r3
 801464a:	f002 ffda 	bl	8017602 <RegionVerify>
 801464e:	1e03      	subs	r3, r0, #0
 8014650:	d009      	beq.n	8014666 <LoRaMacMibSetRequestConfirm+0x80e>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014652:	4b07      	ldr	r3, [pc, #28]	; (8014670 <LoRaMacMibSetRequestConfirm+0x818>)
 8014654:	4a07      	ldr	r2, [pc, #28]	; (8014674 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014656:	589b      	ldr	r3, [r3, r2]
 8014658:	2208      	movs	r2, #8
 801465a:	18ba      	adds	r2, r7, r2
 801465c:	2100      	movs	r1, #0
 801465e:	5651      	ldrsb	r1, [r2, r1]
 8014660:	22f9      	movs	r2, #249	; 0xf9
 8014662:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014664:	e0e3      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014666:	2317      	movs	r3, #23
 8014668:	18fb      	adds	r3, r7, r3
 801466a:	2203      	movs	r2, #3
 801466c:	701a      	strb	r2, [r3, #0]
            break;
 801466e:	e0de      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
 8014670:	200008f0 	.word	0x200008f0
 8014674:	00000484 	.word	0x00000484
 8014678:	0801cb08 	.word	0x0801cb08
 801467c:	20000cd0 	.word	0x20000cd0
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	2204      	movs	r2, #4
 8014684:	569a      	ldrsb	r2, [r3, r2]
 8014686:	2108      	movs	r1, #8
 8014688:	187b      	adds	r3, r7, r1
 801468a:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 801468c:	4b6d      	ldr	r3, [pc, #436]	; (8014844 <LoRaMacMibSetRequestConfirm+0x9ec>)
 801468e:	4a6e      	ldr	r2, [pc, #440]	; (8014848 <LoRaMacMibSetRequestConfirm+0x9f0>)
 8014690:	589b      	ldr	r3, [r3, r2]
 8014692:	781b      	ldrb	r3, [r3, #0]
 8014694:	1879      	adds	r1, r7, r1
 8014696:	220a      	movs	r2, #10
 8014698:	0018      	movs	r0, r3
 801469a:	f002 ffb2 	bl	8017602 <RegionVerify>
 801469e:	1e03      	subs	r3, r0, #0
 80146a0:	d008      	beq.n	80146b4 <LoRaMacMibSetRequestConfirm+0x85c>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 80146a2:	4b68      	ldr	r3, [pc, #416]	; (8014844 <LoRaMacMibSetRequestConfirm+0x9ec>)
 80146a4:	4a68      	ldr	r2, [pc, #416]	; (8014848 <LoRaMacMibSetRequestConfirm+0x9f0>)
 80146a6:	589b      	ldr	r3, [r3, r2]
 80146a8:	2208      	movs	r2, #8
 80146aa:	18ba      	adds	r2, r7, r2
 80146ac:	7812      	ldrb	r2, [r2, #0]
 80146ae:	b252      	sxtb	r2, r2
 80146b0:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80146b2:	e0bc      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80146b4:	2317      	movs	r3, #23
 80146b6:	18fb      	adds	r3, r7, r3
 80146b8:	2203      	movs	r2, #3
 80146ba:	701a      	strb	r2, [r3, #0]
            break;
 80146bc:	e0b7      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	2204      	movs	r2, #4
 80146c2:	569a      	ldrsb	r2, [r3, r2]
 80146c4:	2108      	movs	r1, #8
 80146c6:	187b      	adds	r3, r7, r1
 80146c8:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 80146ca:	4b5e      	ldr	r3, [pc, #376]	; (8014844 <LoRaMacMibSetRequestConfirm+0x9ec>)
 80146cc:	4a5e      	ldr	r2, [pc, #376]	; (8014848 <LoRaMacMibSetRequestConfirm+0x9f0>)
 80146ce:	589b      	ldr	r3, [r3, r2]
 80146d0:	781b      	ldrb	r3, [r3, #0]
 80146d2:	1879      	adds	r1, r7, r1
 80146d4:	2209      	movs	r2, #9
 80146d6:	0018      	movs	r0, r3
 80146d8:	f002 ff93 	bl	8017602 <RegionVerify>
 80146dc:	1e03      	subs	r3, r0, #0
 80146de:	d009      	beq.n	80146f4 <LoRaMacMibSetRequestConfirm+0x89c>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 80146e0:	4b58      	ldr	r3, [pc, #352]	; (8014844 <LoRaMacMibSetRequestConfirm+0x9ec>)
 80146e2:	4a59      	ldr	r2, [pc, #356]	; (8014848 <LoRaMacMibSetRequestConfirm+0x9f0>)
 80146e4:	589b      	ldr	r3, [r3, r2]
 80146e6:	2208      	movs	r2, #8
 80146e8:	18ba      	adds	r2, r7, r2
 80146ea:	2100      	movs	r1, #0
 80146ec:	5651      	ldrsb	r1, [r2, r1]
 80146ee:	22f8      	movs	r2, #248	; 0xf8
 80146f0:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80146f2:	e09c      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80146f4:	2317      	movs	r3, #23
 80146f6:	18fb      	adds	r3, r7, r3
 80146f8:	2203      	movs	r2, #3
 80146fa:	701a      	strb	r2, [r3, #0]
            break;
 80146fc:	e097      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80146fe:	4b51      	ldr	r3, [pc, #324]	; (8014844 <LoRaMacMibSetRequestConfirm+0x9ec>)
 8014700:	4a51      	ldr	r2, [pc, #324]	; (8014848 <LoRaMacMibSetRequestConfirm+0x9f0>)
 8014702:	589b      	ldr	r3, [r3, r2]
 8014704:	687a      	ldr	r2, [r7, #4]
 8014706:	6852      	ldr	r2, [r2, #4]
 8014708:	609a      	str	r2, [r3, #8]
 801470a:	4a4e      	ldr	r2, [pc, #312]	; (8014844 <LoRaMacMibSetRequestConfirm+0x9ec>)
 801470c:	494e      	ldr	r1, [pc, #312]	; (8014848 <LoRaMacMibSetRequestConfirm+0x9f0>)
 801470e:	5852      	ldr	r2, [r2, r1]
 8014710:	689b      	ldr	r3, [r3, #8]
 8014712:	21fc      	movs	r1, #252	; 0xfc
 8014714:	5053      	str	r3, [r2, r1]
            break;
 8014716:	e08a      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8014718:	4b4a      	ldr	r3, [pc, #296]	; (8014844 <LoRaMacMibSetRequestConfirm+0x9ec>)
 801471a:	4a4b      	ldr	r2, [pc, #300]	; (8014848 <LoRaMacMibSetRequestConfirm+0x9f0>)
 801471c:	589b      	ldr	r3, [r3, r2]
 801471e:	687a      	ldr	r2, [r7, #4]
 8014720:	7912      	ldrb	r2, [r2, #4]
 8014722:	731a      	strb	r2, [r3, #12]
 8014724:	4a47      	ldr	r2, [pc, #284]	; (8014844 <LoRaMacMibSetRequestConfirm+0x9ec>)
 8014726:	4948      	ldr	r1, [pc, #288]	; (8014848 <LoRaMacMibSetRequestConfirm+0x9f0>)
 8014728:	5852      	ldr	r2, [r2, r1]
 801472a:	7b19      	ldrb	r1, [r3, #12]
 801472c:	2380      	movs	r3, #128	; 0x80
 801472e:	005b      	lsls	r3, r3, #1
 8014730:	54d1      	strb	r1, [r2, r3]
            break;
 8014732:	e07c      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8014734:	4b43      	ldr	r3, [pc, #268]	; (8014844 <LoRaMacMibSetRequestConfirm+0x9ec>)
 8014736:	4a44      	ldr	r2, [pc, #272]	; (8014848 <LoRaMacMibSetRequestConfirm+0x9f0>)
 8014738:	589a      	ldr	r2, [r3, r2]
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	6859      	ldr	r1, [r3, #4]
 801473e:	239a      	movs	r3, #154	; 0x9a
 8014740:	005b      	lsls	r3, r3, #1
 8014742:	50d1      	str	r1, [r2, r3]
            break;
 8014744:	e073      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8014746:	4b3f      	ldr	r3, [pc, #252]	; (8014844 <LoRaMacMibSetRequestConfirm+0x9ec>)
 8014748:	4a3f      	ldr	r2, [pc, #252]	; (8014848 <LoRaMacMibSetRequestConfirm+0x9f0>)
 801474a:	589b      	ldr	r3, [r3, r2]
 801474c:	687a      	ldr	r2, [r7, #4]
 801474e:	6852      	ldr	r2, [r2, #4]
 8014750:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 8014752:	e06c      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	685b      	ldr	r3, [r3, #4]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d009      	beq.n	8014770 <LoRaMacMibSetRequestConfirm+0x918>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	685b      	ldr	r3, [r3, #4]
 8014760:	2217      	movs	r2, #23
 8014762:	18bc      	adds	r4, r7, r2
 8014764:	0018      	movs	r0, r3
 8014766:	f7fe fb4f 	bl	8012e08 <RestoreCtxs>
 801476a:	0003      	movs	r3, r0
 801476c:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801476e:	e05e      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014770:	2317      	movs	r3, #23
 8014772:	18fb      	adds	r3, r7, r3
 8014774:	2203      	movs	r2, #3
 8014776:	701a      	strb	r2, [r3, #0]
            break;
 8014778:	e059      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	799b      	ldrb	r3, [r3, #6]
 801477e:	2b01      	cmp	r3, #1
 8014780:	d810      	bhi.n	80147a4 <LoRaMacMibSetRequestConfirm+0x94c>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 8014782:	4b30      	ldr	r3, [pc, #192]	; (8014844 <LoRaMacMibSetRequestConfirm+0x9ec>)
 8014784:	4a30      	ldr	r2, [pc, #192]	; (8014848 <LoRaMacMibSetRequestConfirm+0x9f0>)
 8014786:	5899      	ldr	r1, [r3, r2]
 8014788:	23e8      	movs	r3, #232	; 0xe8
 801478a:	005a      	lsls	r2, r3, #1
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	685b      	ldr	r3, [r3, #4]
 8014790:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	685b      	ldr	r3, [r3, #4]
 8014796:	0018      	movs	r0, r3
 8014798:	f001 fdaa 	bl	80162f0 <LoRaMacCryptoSetLrWanVersion>
 801479c:	1e03      	subs	r3, r0, #0
 801479e:	d045      	beq.n	801482c <LoRaMacMibSetRequestConfirm+0x9d4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80147a0:	2311      	movs	r3, #17
 80147a2:	e04b      	b.n	801483c <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80147a4:	2317      	movs	r3, #23
 80147a6:	18fb      	adds	r3, r7, r3
 80147a8:	2203      	movs	r2, #3
 80147aa:	701a      	strb	r2, [r3, #0]
            }
            break;
 80147ac:	e03e      	b.n	801482c <LoRaMacMibSetRequestConfirm+0x9d4>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80147ae:	2317      	movs	r3, #23
 80147b0:	18fc      	adds	r4, r7, r3
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	0018      	movs	r0, r3
 80147b6:	f000 fc7c 	bl	80150b2 <LoRaMacMibClassBSetRequestConfirm>
 80147ba:	0003      	movs	r3, r0
 80147bc:	7023      	strb	r3, [r4, #0]
            break;
 80147be:	e036      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 80147c0:	46c0      	nop			; (mov r8, r8)
 80147c2:	e034      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 80147c4:	46c0      	nop			; (mov r8, r8)
 80147c6:	e032      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 80147c8:	46c0      	nop			; (mov r8, r8)
 80147ca:	e030      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 80147cc:	46c0      	nop			; (mov r8, r8)
 80147ce:	e02e      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 80147d0:	46c0      	nop			; (mov r8, r8)
 80147d2:	e02c      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 80147d4:	46c0      	nop			; (mov r8, r8)
 80147d6:	e02a      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 80147d8:	46c0      	nop			; (mov r8, r8)
 80147da:	e028      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 80147dc:	46c0      	nop			; (mov r8, r8)
 80147de:	e026      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 80147e0:	46c0      	nop			; (mov r8, r8)
 80147e2:	e024      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 80147e4:	46c0      	nop			; (mov r8, r8)
 80147e6:	e022      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 80147e8:	46c0      	nop			; (mov r8, r8)
 80147ea:	e020      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 80147ec:	46c0      	nop			; (mov r8, r8)
 80147ee:	e01e      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 80147f0:	46c0      	nop			; (mov r8, r8)
 80147f2:	e01c      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 80147f4:	46c0      	nop			; (mov r8, r8)
 80147f6:	e01a      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 80147f8:	46c0      	nop			; (mov r8, r8)
 80147fa:	e018      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 80147fc:	46c0      	nop			; (mov r8, r8)
 80147fe:	e016      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014800:	46c0      	nop			; (mov r8, r8)
 8014802:	e014      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014804:	46c0      	nop			; (mov r8, r8)
 8014806:	e012      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014808:	46c0      	nop			; (mov r8, r8)
 801480a:	e010      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 801480c:	46c0      	nop			; (mov r8, r8)
 801480e:	e00e      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014810:	46c0      	nop			; (mov r8, r8)
 8014812:	e00c      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014814:	46c0      	nop			; (mov r8, r8)
 8014816:	e00a      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014818:	46c0      	nop			; (mov r8, r8)
 801481a:	e008      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 801481c:	46c0      	nop			; (mov r8, r8)
 801481e:	e006      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014820:	46c0      	nop			; (mov r8, r8)
 8014822:	e004      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014824:	46c0      	nop			; (mov r8, r8)
 8014826:	e002      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014828:	46c0      	nop			; (mov r8, r8)
 801482a:	e000      	b.n	801482e <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 801482c:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 801482e:	f7fe fd07 	bl	8013240 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 8014832:	f7fe fcfd 	bl	8013230 <EventMacNvmCtxChanged>
    return status;
 8014836:	2317      	movs	r3, #23
 8014838:	18fb      	adds	r3, r7, r3
 801483a:	781b      	ldrb	r3, [r3, #0]
}
 801483c:	0018      	movs	r0, r3
 801483e:	46bd      	mov	sp, r7
 8014840:	b007      	add	sp, #28
 8014842:	bd90      	pop	{r4, r7, pc}
 8014844:	200008f0 	.word	0x200008f0
 8014848:	00000484 	.word	0x00000484

0801484c <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 801484c:	b5b0      	push	{r4, r5, r7, lr}
 801484e:	b086      	sub	sp, #24
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014854:	2317      	movs	r3, #23
 8014856:	18fb      	adds	r3, r7, r3
 8014858:	2202      	movs	r2, #2
 801485a:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801485c:	210c      	movs	r1, #12
 801485e:	187b      	adds	r3, r7, r1
 8014860:	2200      	movs	r2, #0
 8014862:	701a      	strb	r2, [r3, #0]
 8014864:	187b      	adds	r3, r7, r1
 8014866:	2200      	movs	r2, #0
 8014868:	705a      	strb	r2, [r3, #1]

    if( mlmeRequest == NULL )
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d101      	bne.n	8014874 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014870:	2303      	movs	r3, #3
 8014872:	e131      	b.n	8014ad8 <LoRaMacMlmeRequest+0x28c>
    }
    if( LoRaMacIsBusy( ) == true )
 8014874:	f7fb fef4 	bl	8010660 <LoRaMacIsBusy>
 8014878:	1e03      	subs	r3, r0, #0
 801487a:	d001      	beq.n	8014880 <LoRaMacMlmeRequest+0x34>
    {
        return LORAMAC_STATUS_BUSY;
 801487c:	2301      	movs	r3, #1
 801487e:	e12b      	b.n	8014ad8 <LoRaMacMlmeRequest+0x28c>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8014880:	f001 f912 	bl	8015aa8 <LoRaMacConfirmQueueIsFull>
 8014884:	1e03      	subs	r3, r0, #0
 8014886:	d001      	beq.n	801488c <LoRaMacMlmeRequest+0x40>
    {
        return LORAMAC_STATUS_BUSY;
 8014888:	2301      	movs	r3, #1
 801488a:	e125      	b.n	8014ad8 <LoRaMacMlmeRequest+0x28c>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801488c:	f001 f902 	bl	8015a94 <LoRaMacConfirmQueueGetCnt>
 8014890:	1e03      	subs	r3, r0, #0
 8014892:	d105      	bne.n	80148a0 <LoRaMacMlmeRequest+0x54>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8014894:	4b92      	ldr	r3, [pc, #584]	; (8014ae0 <LoRaMacMlmeRequest+0x294>)
 8014896:	2214      	movs	r2, #20
 8014898:	2100      	movs	r1, #0
 801489a:	0018      	movs	r0, r3
 801489c:	f006 ff04 	bl	801b6a8 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80148a0:	4b90      	ldr	r3, [pc, #576]	; (8014ae4 <LoRaMacMlmeRequest+0x298>)
 80148a2:	4a91      	ldr	r2, [pc, #580]	; (8014ae8 <LoRaMacMlmeRequest+0x29c>)
 80148a4:	2101      	movs	r1, #1
 80148a6:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80148a8:	4b8e      	ldr	r3, [pc, #568]	; (8014ae4 <LoRaMacMlmeRequest+0x298>)
 80148aa:	4a90      	ldr	r2, [pc, #576]	; (8014aec <LoRaMacMlmeRequest+0x2a0>)
 80148ac:	5c99      	ldrb	r1, [r3, r2]
 80148ae:	2004      	movs	r0, #4
 80148b0:	4301      	orrs	r1, r0
 80148b2:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	781a      	ldrb	r2, [r3, #0]
 80148b8:	2110      	movs	r1, #16
 80148ba:	187b      	adds	r3, r7, r1
 80148bc:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80148be:	187b      	adds	r3, r7, r1
 80148c0:	2201      	movs	r2, #1
 80148c2:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 80148c4:	187b      	adds	r3, r7, r1
 80148c6:	2200      	movs	r2, #0
 80148c8:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	781b      	ldrb	r3, [r3, #0]
 80148ce:	2b0d      	cmp	r3, #13
 80148d0:	d900      	bls.n	80148d4 <LoRaMacMlmeRequest+0x88>
 80148d2:	e0d8      	b.n	8014a86 <LoRaMacMlmeRequest+0x23a>
 80148d4:	009a      	lsls	r2, r3, #2
 80148d6:	4b86      	ldr	r3, [pc, #536]	; (8014af0 <LoRaMacMlmeRequest+0x2a4>)
 80148d8:	18d3      	adds	r3, r2, r3
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80148de:	4a81      	ldr	r2, [pc, #516]	; (8014ae4 <LoRaMacMlmeRequest+0x298>)
 80148e0:	23d0      	movs	r3, #208	; 0xd0
 80148e2:	009b      	lsls	r3, r3, #2
 80148e4:	58d3      	ldr	r3, [r2, r3]
 80148e6:	2220      	movs	r2, #32
 80148e8:	4013      	ands	r3, r2
 80148ea:	d001      	beq.n	80148f0 <LoRaMacMlmeRequest+0xa4>
            {
                return LORAMAC_STATUS_BUSY;
 80148ec:	2301      	movs	r3, #1
 80148ee:	e0f3      	b.n	8014ad8 <LoRaMacMlmeRequest+0x28c>
            }

            ResetMacParameters( );
 80148f0:	f7fd fe38 	bl	8012564 <ResetMacParameters>

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80148f4:	4b7b      	ldr	r3, [pc, #492]	; (8014ae4 <LoRaMacMlmeRequest+0x298>)
 80148f6:	4a7f      	ldr	r2, [pc, #508]	; (8014af4 <LoRaMacMlmeRequest+0x2a8>)
 80148f8:	589b      	ldr	r3, [r3, r2]
 80148fa:	7818      	ldrb	r0, [r3, #0]
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	791b      	ldrb	r3, [r3, #4]
 8014900:	b259      	sxtb	r1, r3
 8014902:	4b78      	ldr	r3, [pc, #480]	; (8014ae4 <LoRaMacMlmeRequest+0x298>)
 8014904:	4a7b      	ldr	r2, [pc, #492]	; (8014af4 <LoRaMacMlmeRequest+0x2a8>)
 8014906:	589c      	ldr	r4, [r3, r2]
 8014908:	2200      	movs	r2, #0
 801490a:	f002 ff91 	bl	8017830 <RegionAlternateDr>
 801490e:	0003      	movs	r3, r0
 8014910:	001a      	movs	r2, r3
 8014912:	23f9      	movs	r3, #249	; 0xf9
 8014914:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8014916:	2310      	movs	r3, #16
 8014918:	18fb      	adds	r3, r7, r3
 801491a:	2207      	movs	r2, #7
 801491c:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ );
 801491e:	2517      	movs	r5, #23
 8014920:	197c      	adds	r4, r7, r5
 8014922:	20ff      	movs	r0, #255	; 0xff
 8014924:	f7fd fb44 	bl	8011fb0 <SendReJoinReq>
 8014928:	0003      	movs	r3, r0
 801492a:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 801492c:	197b      	adds	r3, r7, r5
 801492e:	781b      	ldrb	r3, [r3, #0]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d100      	bne.n	8014936 <LoRaMacMlmeRequest+0xea>
 8014934:	e0a9      	b.n	8014a8a <LoRaMacMlmeRequest+0x23e>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8014936:	4b6b      	ldr	r3, [pc, #428]	; (8014ae4 <LoRaMacMlmeRequest+0x298>)
 8014938:	4a6e      	ldr	r2, [pc, #440]	; (8014af4 <LoRaMacMlmeRequest+0x2a8>)
 801493a:	589b      	ldr	r3, [r3, r2]
 801493c:	7818      	ldrb	r0, [r3, #0]
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	791b      	ldrb	r3, [r3, #4]
 8014942:	b259      	sxtb	r1, r3
 8014944:	4b67      	ldr	r3, [pc, #412]	; (8014ae4 <LoRaMacMlmeRequest+0x298>)
 8014946:	4a6b      	ldr	r2, [pc, #428]	; (8014af4 <LoRaMacMlmeRequest+0x2a8>)
 8014948:	589c      	ldr	r4, [r3, r2]
 801494a:	2201      	movs	r2, #1
 801494c:	f002 ff70 	bl	8017830 <RegionAlternateDr>
 8014950:	0003      	movs	r3, r0
 8014952:	001a      	movs	r2, r3
 8014954:	23f9      	movs	r3, #249	; 0xf9
 8014956:	54e2      	strb	r2, [r4, r3]
            }
            break;
 8014958:	e097      	b.n	8014a8a <LoRaMacMlmeRequest+0x23e>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801495a:	2317      	movs	r3, #23
 801495c:	18fb      	adds	r3, r7, r3
 801495e:	2200      	movs	r2, #0
 8014960:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014962:	230c      	movs	r3, #12
 8014964:	18fb      	adds	r3, r7, r3
 8014966:	2200      	movs	r2, #0
 8014968:	0019      	movs	r1, r3
 801496a:	2002      	movs	r0, #2
 801496c:	f000 fd4e 	bl	801540c <LoRaMacCommandsAddCmd>
 8014970:	1e03      	subs	r3, r0, #0
 8014972:	d100      	bne.n	8014976 <LoRaMacMlmeRequest+0x12a>
 8014974:	e08b      	b.n	8014a8e <LoRaMacMlmeRequest+0x242>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014976:	2317      	movs	r3, #23
 8014978:	18fb      	adds	r3, r7, r3
 801497a:	2213      	movs	r2, #19
 801497c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801497e:	e086      	b.n	8014a8e <LoRaMacMlmeRequest+0x242>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	889b      	ldrh	r3, [r3, #4]
 8014984:	2217      	movs	r2, #23
 8014986:	18bc      	adds	r4, r7, r2
 8014988:	0018      	movs	r0, r3
 801498a:	f7fe f971 	bl	8012c70 <SetTxContinuousWave>
 801498e:	0003      	movs	r3, r0
 8014990:	7023      	strb	r3, [r4, #0]
            break;
 8014992:	e083      	b.n	8014a9c <LoRaMacMlmeRequest+0x250>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	8898      	ldrh	r0, [r3, #4]
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	6899      	ldr	r1, [r3, #8]
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	7b1b      	ldrb	r3, [r3, #12]
 80149a0:	2217      	movs	r2, #23
 80149a2:	18bc      	adds	r4, r7, r2
 80149a4:	001a      	movs	r2, r3
 80149a6:	f7fe f9b1 	bl	8012d0c <SetTxContinuousWave1>
 80149aa:	0003      	movs	r3, r0
 80149ac:	7023      	strb	r3, [r4, #0]
            break;
 80149ae:	e075      	b.n	8014a9c <LoRaMacMlmeRequest+0x250>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80149b0:	2317      	movs	r3, #23
 80149b2:	18fb      	adds	r3, r7, r3
 80149b4:	2200      	movs	r2, #0
 80149b6:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80149b8:	230c      	movs	r3, #12
 80149ba:	18fb      	adds	r3, r7, r3
 80149bc:	2200      	movs	r2, #0
 80149be:	0019      	movs	r1, r3
 80149c0:	200d      	movs	r0, #13
 80149c2:	f000 fd23 	bl	801540c <LoRaMacCommandsAddCmd>
 80149c6:	1e03      	subs	r3, r0, #0
 80149c8:	d063      	beq.n	8014a92 <LoRaMacMlmeRequest+0x246>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80149ca:	2317      	movs	r3, #23
 80149cc:	18fb      	adds	r3, r7, r3
 80149ce:	2213      	movs	r2, #19
 80149d0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80149d2:	e05e      	b.n	8014a92 <LoRaMacMlmeRequest+0x246>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 80149d4:	4b43      	ldr	r3, [pc, #268]	; (8014ae4 <LoRaMacMlmeRequest+0x298>)
 80149d6:	4a47      	ldr	r2, [pc, #284]	; (8014af4 <LoRaMacMlmeRequest+0x2a8>)
 80149d8:	589b      	ldr	r3, [r3, r2]
 80149da:	22f0      	movs	r2, #240	; 0xf0
 80149dc:	5c9b      	ldrb	r3, [r3, r2]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d159      	bne.n	8014a96 <LoRaMacMlmeRequest+0x24a>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80149e2:	2416      	movs	r4, #22
 80149e4:	193b      	adds	r3, r7, r4
 80149e6:	687a      	ldr	r2, [r7, #4]
 80149e8:	7912      	ldrb	r2, [r2, #4]
 80149ea:	701a      	strb	r2, [r3, #0]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	791b      	ldrb	r3, [r3, #4]
 80149f0:	075b      	lsls	r3, r3, #29
 80149f2:	0f5b      	lsrs	r3, r3, #29
 80149f4:	b2db      	uxtb	r3, r3
 80149f6:	0018      	movs	r0, r3
 80149f8:	f000 fb33 	bl	8015062 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80149fc:	210c      	movs	r1, #12
 80149fe:	187b      	adds	r3, r7, r1
 8014a00:	193a      	adds	r2, r7, r4
 8014a02:	7812      	ldrb	r2, [r2, #0]
 8014a04:	701a      	strb	r2, [r3, #0]
                status = LORAMAC_STATUS_OK;
 8014a06:	2317      	movs	r3, #23
 8014a08:	18fb      	adds	r3, r7, r3
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	701a      	strb	r2, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8014a0e:	187b      	adds	r3, r7, r1
 8014a10:	2201      	movs	r2, #1
 8014a12:	0019      	movs	r1, r3
 8014a14:	2010      	movs	r0, #16
 8014a16:	f000 fcf9 	bl	801540c <LoRaMacCommandsAddCmd>
 8014a1a:	1e03      	subs	r3, r0, #0
 8014a1c:	d03b      	beq.n	8014a96 <LoRaMacMlmeRequest+0x24a>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014a1e:	2317      	movs	r3, #23
 8014a20:	18fb      	adds	r3, r7, r3
 8014a22:	2213      	movs	r2, #19
 8014a24:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 8014a26:	e036      	b.n	8014a96 <LoRaMacMlmeRequest+0x24a>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014a28:	2317      	movs	r3, #23
 8014a2a:	18fb      	adds	r3, r7, r3
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014a30:	230c      	movs	r3, #12
 8014a32:	18fb      	adds	r3, r7, r3
 8014a34:	2200      	movs	r2, #0
 8014a36:	0019      	movs	r1, r3
 8014a38:	2012      	movs	r0, #18
 8014a3a:	f000 fce7 	bl	801540c <LoRaMacCommandsAddCmd>
 8014a3e:	1e03      	subs	r3, r0, #0
 8014a40:	d02b      	beq.n	8014a9a <LoRaMacMlmeRequest+0x24e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014a42:	2317      	movs	r3, #23
 8014a44:	18fb      	adds	r3, r7, r3
 8014a46:	2213      	movs	r2, #19
 8014a48:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014a4a:	e026      	b.n	8014a9a <LoRaMacMlmeRequest+0x24e>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8014a4c:	2310      	movs	r3, #16
 8014a4e:	18fb      	adds	r3, r7, r3
 8014a50:	2201      	movs	r2, #1
 8014a52:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8014a54:	f000 fac3 	bl	8014fde <LoRaMacClassBIsAcquisitionInProgress>
 8014a58:	0003      	movs	r3, r0
 8014a5a:	001a      	movs	r2, r3
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	4053      	eors	r3, r2
 8014a60:	b2db      	uxtb	r3, r3
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d00a      	beq.n	8014a7c <LoRaMacMlmeRequest+0x230>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8014a66:	2000      	movs	r0, #0
 8014a68:	f000 fa9b 	bl	8014fa2 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8014a6c:	2000      	movs	r0, #0
 8014a6e:	f000 fabc 	bl	8014fea <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8014a72:	2317      	movs	r3, #23
 8014a74:	18fb      	adds	r3, r7, r3
 8014a76:	2200      	movs	r2, #0
 8014a78:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8014a7a:	e00f      	b.n	8014a9c <LoRaMacMlmeRequest+0x250>
                status = LORAMAC_STATUS_BUSY;
 8014a7c:	2317      	movs	r3, #23
 8014a7e:	18fb      	adds	r3, r7, r3
 8014a80:	2201      	movs	r2, #1
 8014a82:	701a      	strb	r2, [r3, #0]
            break;
 8014a84:	e00a      	b.n	8014a9c <LoRaMacMlmeRequest+0x250>
        }
        default:
            break;
 8014a86:	46c0      	nop			; (mov r8, r8)
 8014a88:	e008      	b.n	8014a9c <LoRaMacMlmeRequest+0x250>
            break;
 8014a8a:	46c0      	nop			; (mov r8, r8)
 8014a8c:	e006      	b.n	8014a9c <LoRaMacMlmeRequest+0x250>
            break;
 8014a8e:	46c0      	nop			; (mov r8, r8)
 8014a90:	e004      	b.n	8014a9c <LoRaMacMlmeRequest+0x250>
            break;
 8014a92:	46c0      	nop			; (mov r8, r8)
 8014a94:	e002      	b.n	8014a9c <LoRaMacMlmeRequest+0x250>
            break;
 8014a96:	46c0      	nop			; (mov r8, r8)
 8014a98:	e000      	b.n	8014a9c <LoRaMacMlmeRequest+0x250>
            break;
 8014a9a:	46c0      	nop			; (mov r8, r8)
    }

    if( status != LORAMAC_STATUS_OK )
 8014a9c:	2317      	movs	r3, #23
 8014a9e:	18fb      	adds	r3, r7, r3
 8014aa0:	781b      	ldrb	r3, [r3, #0]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d00e      	beq.n	8014ac4 <LoRaMacMlmeRequest+0x278>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014aa6:	f000 fff5 	bl	8015a94 <LoRaMacConfirmQueueGetCnt>
 8014aaa:	1e03      	subs	r3, r0, #0
 8014aac:	d111      	bne.n	8014ad2 <LoRaMacMlmeRequest+0x286>
        {
            MacCtx.NodeAckRequested = false;
 8014aae:	4b0d      	ldr	r3, [pc, #52]	; (8014ae4 <LoRaMacMlmeRequest+0x298>)
 8014ab0:	4a11      	ldr	r2, [pc, #68]	; (8014af8 <LoRaMacMlmeRequest+0x2ac>)
 8014ab2:	2100      	movs	r1, #0
 8014ab4:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8014ab6:	4b0b      	ldr	r3, [pc, #44]	; (8014ae4 <LoRaMacMlmeRequest+0x298>)
 8014ab8:	4a0c      	ldr	r2, [pc, #48]	; (8014aec <LoRaMacMlmeRequest+0x2a0>)
 8014aba:	5c99      	ldrb	r1, [r3, r2]
 8014abc:	2004      	movs	r0, #4
 8014abe:	4381      	bics	r1, r0
 8014ac0:	5499      	strb	r1, [r3, r2]
 8014ac2:	e006      	b.n	8014ad2 <LoRaMacMlmeRequest+0x286>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8014ac4:	2310      	movs	r3, #16
 8014ac6:	18fb      	adds	r3, r7, r3
 8014ac8:	0018      	movs	r0, r3
 8014aca:	f000 fe91 	bl	80157f0 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 8014ace:	f7fe fbaf 	bl	8013230 <EventMacNvmCtxChanged>
    }
    return status;
 8014ad2:	2317      	movs	r3, #23
 8014ad4:	18fb      	adds	r3, r7, r3
 8014ad6:	781b      	ldrb	r3, [r3, #0]
}
 8014ad8:	0018      	movs	r0, r3
 8014ada:	46bd      	mov	sp, r7
 8014adc:	b006      	add	sp, #24
 8014ade:	bdb0      	pop	{r4, r5, r7, pc}
 8014ae0:	20000d40 	.word	0x20000d40
 8014ae4:	200008f0 	.word	0x200008f0
 8014ae8:	00000451 	.word	0x00000451
 8014aec:	00000481 	.word	0x00000481
 8014af0:	0801d1e8 	.word	0x0801d1e8
 8014af4:	00000484 	.word	0x00000484
 8014af8:	00000414 	.word	0x00000414

08014afc <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 8014afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014afe:	b08b      	sub	sp, #44	; 0x2c
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014b04:	2327      	movs	r3, #39	; 0x27
 8014b06:	18fb      	adds	r3, r7, r3
 8014b08:	2202      	movs	r2, #2
 8014b0a:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8014b0c:	2326      	movs	r3, #38	; 0x26
 8014b0e:	18fb      	adds	r3, r7, r3
 8014b10:	2200      	movs	r2, #0
 8014b12:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8014b14:	231d      	movs	r3, #29
 8014b16:	18fb      	adds	r3, r7, r3
 8014b18:	2200      	movs	r2, #0
 8014b1a:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 8014b1c:	231c      	movs	r3, #28
 8014b1e:	18fb      	adds	r3, r7, r3
 8014b20:	2200      	movs	r2, #0
 8014b22:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d101      	bne.n	8014b2e <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014b2a:	2303      	movs	r3, #3
 8014b2c:	e113      	b.n	8014d56 <LoRaMacMcpsRequest+0x25a>
    }
    if( LoRaMacIsBusy( ) == true )
 8014b2e:	f7fb fd97 	bl	8010660 <LoRaMacIsBusy>
 8014b32:	1e03      	subs	r3, r0, #0
 8014b34:	d001      	beq.n	8014b3a <LoRaMacMcpsRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8014b36:	2301      	movs	r3, #1
 8014b38:	e10d      	b.n	8014d56 <LoRaMacMcpsRequest+0x25a>
    }

    macHdr.Value = 0;
 8014b3a:	2310      	movs	r3, #16
 8014b3c:	18fb      	adds	r3, r7, r3
 8014b3e:	2200      	movs	r2, #0
 8014b40:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8014b42:	4b87      	ldr	r3, [pc, #540]	; (8014d60 <LoRaMacMcpsRequest+0x264>)
 8014b44:	2214      	movs	r2, #20
 8014b46:	2100      	movs	r1, #0
 8014b48:	0018      	movs	r0, r3
 8014b4a:	f006 fdad 	bl	801b6a8 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014b4e:	4b85      	ldr	r3, [pc, #532]	; (8014d64 <LoRaMacMcpsRequest+0x268>)
 8014b50:	4a85      	ldr	r2, [pc, #532]	; (8014d68 <LoRaMacMcpsRequest+0x26c>)
 8014b52:	2101      	movs	r1, #1
 8014b54:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8014b56:	4b83      	ldr	r3, [pc, #524]	; (8014d64 <LoRaMacMcpsRequest+0x268>)
 8014b58:	4a84      	ldr	r2, [pc, #528]	; (8014d6c <LoRaMacMcpsRequest+0x270>)
 8014b5a:	2101      	movs	r1, #1
 8014b5c:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	781b      	ldrb	r3, [r3, #0]
 8014b62:	2b01      	cmp	r3, #1
 8014b64:	d028      	beq.n	8014bb8 <LoRaMacMcpsRequest+0xbc>
 8014b66:	2b03      	cmp	r3, #3
 8014b68:	d053      	beq.n	8014c12 <LoRaMacMcpsRequest+0x116>
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d000      	beq.n	8014b70 <LoRaMacMcpsRequest+0x74>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8014b6e:	e06d      	b.n	8014c4c <LoRaMacMcpsRequest+0x150>
            readyToSend = true;
 8014b70:	231c      	movs	r3, #28
 8014b72:	18fb      	adds	r3, r7, r3
 8014b74:	2201      	movs	r2, #1
 8014b76:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 8014b78:	4b7a      	ldr	r3, [pc, #488]	; (8014d64 <LoRaMacMcpsRequest+0x268>)
 8014b7a:	4a7d      	ldr	r2, [pc, #500]	; (8014d70 <LoRaMacMcpsRequest+0x274>)
 8014b7c:	2101      	movs	r1, #1
 8014b7e:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8014b80:	2310      	movs	r3, #16
 8014b82:	18fb      	adds	r3, r7, r3
 8014b84:	781a      	ldrb	r2, [r3, #0]
 8014b86:	211f      	movs	r1, #31
 8014b88:	400a      	ands	r2, r1
 8014b8a:	1c11      	adds	r1, r2, #0
 8014b8c:	2240      	movs	r2, #64	; 0x40
 8014b8e:	430a      	orrs	r2, r1
 8014b90:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8014b92:	2326      	movs	r3, #38	; 0x26
 8014b94:	18fb      	adds	r3, r7, r3
 8014b96:	687a      	ldr	r2, [r7, #4]
 8014b98:	7912      	ldrb	r2, [r2, #4]
 8014b9a:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	689b      	ldr	r3, [r3, #8]
 8014ba0:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8014ba2:	231e      	movs	r3, #30
 8014ba4:	18fb      	adds	r3, r7, r3
 8014ba6:	687a      	ldr	r2, [r7, #4]
 8014ba8:	8992      	ldrh	r2, [r2, #12]
 8014baa:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8014bac:	231d      	movs	r3, #29
 8014bae:	18fb      	adds	r3, r7, r3
 8014bb0:	687a      	ldr	r2, [r7, #4]
 8014bb2:	7b92      	ldrb	r2, [r2, #14]
 8014bb4:	701a      	strb	r2, [r3, #0]
            break;
 8014bb6:	e049      	b.n	8014c4c <LoRaMacMcpsRequest+0x150>
            readyToSend = true;
 8014bb8:	231c      	movs	r3, #28
 8014bba:	18fb      	adds	r3, r7, r3
 8014bbc:	2201      	movs	r2, #1
 8014bbe:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	7bdb      	ldrb	r3, [r3, #15]
 8014bc4:	1c1a      	adds	r2, r3, #0
 8014bc6:	b2d3      	uxtb	r3, r2
 8014bc8:	2b08      	cmp	r3, #8
 8014bca:	d901      	bls.n	8014bd0 <LoRaMacMcpsRequest+0xd4>
 8014bcc:	2308      	movs	r3, #8
 8014bce:	1c1a      	adds	r2, r3, #0
 8014bd0:	b2d1      	uxtb	r1, r2
 8014bd2:	4b64      	ldr	r3, [pc, #400]	; (8014d64 <LoRaMacMcpsRequest+0x268>)
 8014bd4:	4a66      	ldr	r2, [pc, #408]	; (8014d70 <LoRaMacMcpsRequest+0x274>)
 8014bd6:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8014bd8:	2310      	movs	r3, #16
 8014bda:	18fb      	adds	r3, r7, r3
 8014bdc:	781a      	ldrb	r2, [r3, #0]
 8014bde:	211f      	movs	r1, #31
 8014be0:	400a      	ands	r2, r1
 8014be2:	1c11      	adds	r1, r2, #0
 8014be4:	2280      	movs	r2, #128	; 0x80
 8014be6:	4252      	negs	r2, r2
 8014be8:	430a      	orrs	r2, r1
 8014bea:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8014bec:	2326      	movs	r3, #38	; 0x26
 8014bee:	18fb      	adds	r3, r7, r3
 8014bf0:	687a      	ldr	r2, [r7, #4]
 8014bf2:	7912      	ldrb	r2, [r2, #4]
 8014bf4:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	689b      	ldr	r3, [r3, #8]
 8014bfa:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8014bfc:	231e      	movs	r3, #30
 8014bfe:	18fb      	adds	r3, r7, r3
 8014c00:	687a      	ldr	r2, [r7, #4]
 8014c02:	8992      	ldrh	r2, [r2, #12]
 8014c04:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8014c06:	231d      	movs	r3, #29
 8014c08:	18fb      	adds	r3, r7, r3
 8014c0a:	687a      	ldr	r2, [r7, #4]
 8014c0c:	7b92      	ldrb	r2, [r2, #14]
 8014c0e:	701a      	strb	r2, [r3, #0]
            break;
 8014c10:	e01c      	b.n	8014c4c <LoRaMacMcpsRequest+0x150>
            readyToSend = true;
 8014c12:	231c      	movs	r3, #28
 8014c14:	18fb      	adds	r3, r7, r3
 8014c16:	2201      	movs	r2, #1
 8014c18:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 8014c1a:	4b52      	ldr	r3, [pc, #328]	; (8014d64 <LoRaMacMcpsRequest+0x268>)
 8014c1c:	4a54      	ldr	r2, [pc, #336]	; (8014d70 <LoRaMacMcpsRequest+0x274>)
 8014c1e:	2101      	movs	r1, #1
 8014c20:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8014c22:	2310      	movs	r3, #16
 8014c24:	18fb      	adds	r3, r7, r3
 8014c26:	781a      	ldrb	r2, [r3, #0]
 8014c28:	2120      	movs	r1, #32
 8014c2a:	4249      	negs	r1, r1
 8014c2c:	430a      	orrs	r2, r1
 8014c2e:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	685b      	ldr	r3, [r3, #4]
 8014c34:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8014c36:	231e      	movs	r3, #30
 8014c38:	18fb      	adds	r3, r7, r3
 8014c3a:	687a      	ldr	r2, [r7, #4]
 8014c3c:	8912      	ldrh	r2, [r2, #8]
 8014c3e:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8014c40:	231d      	movs	r3, #29
 8014c42:	18fb      	adds	r3, r7, r3
 8014c44:	687a      	ldr	r2, [r7, #4]
 8014c46:	7a92      	ldrb	r2, [r2, #10]
 8014c48:	701a      	strb	r2, [r3, #0]
            break;
 8014c4a:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8014c4c:	2118      	movs	r1, #24
 8014c4e:	187b      	adds	r3, r7, r1
 8014c50:	2202      	movs	r2, #2
 8014c52:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8014c54:	4b43      	ldr	r3, [pc, #268]	; (8014d64 <LoRaMacMcpsRequest+0x268>)
 8014c56:	4a47      	ldr	r2, [pc, #284]	; (8014d74 <LoRaMacMcpsRequest+0x278>)
 8014c58:	589a      	ldr	r2, [r3, r2]
 8014c5a:	2396      	movs	r3, #150	; 0x96
 8014c5c:	005b      	lsls	r3, r3, #1
 8014c5e:	5cd2      	ldrb	r2, [r2, r3]
 8014c60:	187b      	adds	r3, r7, r1
 8014c62:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8014c64:	4b3f      	ldr	r3, [pc, #252]	; (8014d64 <LoRaMacMcpsRequest+0x268>)
 8014c66:	4a43      	ldr	r2, [pc, #268]	; (8014d74 <LoRaMacMcpsRequest+0x278>)
 8014c68:	589b      	ldr	r3, [r3, r2]
 8014c6a:	781b      	ldrb	r3, [r3, #0]
 8014c6c:	187a      	adds	r2, r7, r1
 8014c6e:	0011      	movs	r1, r2
 8014c70:	0018      	movs	r0, r3
 8014c72:	f002 fc5f 	bl	8017534 <RegionGetPhyParam>
 8014c76:	0003      	movs	r3, r0
 8014c78:	001a      	movs	r2, r3
 8014c7a:	2114      	movs	r1, #20
 8014c7c:	187b      	adds	r3, r7, r1
 8014c7e:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8014c80:	187b      	adds	r3, r7, r1
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	b259      	sxtb	r1, r3
 8014c86:	231d      	movs	r3, #29
 8014c88:	18fa      	adds	r2, r7, r3
 8014c8a:	18fb      	adds	r3, r7, r3
 8014c8c:	1c0c      	adds	r4, r1, #0
 8014c8e:	781b      	ldrb	r3, [r3, #0]
 8014c90:	b258      	sxtb	r0, r3
 8014c92:	b261      	sxtb	r1, r4
 8014c94:	4288      	cmp	r0, r1
 8014c96:	da00      	bge.n	8014c9a <LoRaMacMcpsRequest+0x19e>
 8014c98:	1c23      	adds	r3, r4, #0
 8014c9a:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 8014c9c:	231c      	movs	r3, #28
 8014c9e:	18fb      	adds	r3, r7, r3
 8014ca0:	781b      	ldrb	r3, [r3, #0]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d052      	beq.n	8014d4c <LoRaMacMcpsRequest+0x250>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 8014ca6:	4b2f      	ldr	r3, [pc, #188]	; (8014d64 <LoRaMacMcpsRequest+0x268>)
 8014ca8:	4a32      	ldr	r2, [pc, #200]	; (8014d74 <LoRaMacMcpsRequest+0x278>)
 8014caa:	589b      	ldr	r3, [r3, r2]
 8014cac:	22f2      	movs	r2, #242	; 0xf2
 8014cae:	5c9b      	ldrb	r3, [r3, r2]
 8014cb0:	2201      	movs	r2, #1
 8014cb2:	4053      	eors	r3, r2
 8014cb4:	b2db      	uxtb	r3, r3
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d024      	beq.n	8014d04 <LoRaMacMcpsRequest+0x208>
        {
            verify.DatarateParams.Datarate = datarate;
 8014cba:	210c      	movs	r1, #12
 8014cbc:	187b      	adds	r3, r7, r1
 8014cbe:	221d      	movs	r2, #29
 8014cc0:	18ba      	adds	r2, r7, r2
 8014cc2:	7812      	ldrb	r2, [r2, #0]
 8014cc4:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8014cc6:	4b27      	ldr	r3, [pc, #156]	; (8014d64 <LoRaMacMcpsRequest+0x268>)
 8014cc8:	4a2a      	ldr	r2, [pc, #168]	; (8014d74 <LoRaMacMcpsRequest+0x278>)
 8014cca:	589a      	ldr	r2, [r3, r2]
 8014ccc:	2396      	movs	r3, #150	; 0x96
 8014cce:	005b      	lsls	r3, r3, #1
 8014cd0:	5cd2      	ldrb	r2, [r2, r3]
 8014cd2:	187b      	adds	r3, r7, r1
 8014cd4:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8014cd6:	4b23      	ldr	r3, [pc, #140]	; (8014d64 <LoRaMacMcpsRequest+0x268>)
 8014cd8:	4a26      	ldr	r2, [pc, #152]	; (8014d74 <LoRaMacMcpsRequest+0x278>)
 8014cda:	589b      	ldr	r3, [r3, r2]
 8014cdc:	781b      	ldrb	r3, [r3, #0]
 8014cde:	1879      	adds	r1, r7, r1
 8014ce0:	2205      	movs	r2, #5
 8014ce2:	0018      	movs	r0, r3
 8014ce4:	f002 fc8d 	bl	8017602 <RegionVerify>
 8014ce8:	1e03      	subs	r3, r0, #0
 8014cea:	d009      	beq.n	8014d00 <LoRaMacMcpsRequest+0x204>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014cec:	4b1d      	ldr	r3, [pc, #116]	; (8014d64 <LoRaMacMcpsRequest+0x268>)
 8014cee:	4a21      	ldr	r2, [pc, #132]	; (8014d74 <LoRaMacMcpsRequest+0x278>)
 8014cf0:	589b      	ldr	r3, [r3, r2]
 8014cf2:	220c      	movs	r2, #12
 8014cf4:	18ba      	adds	r2, r7, r2
 8014cf6:	2100      	movs	r1, #0
 8014cf8:	5651      	ldrsb	r1, [r2, r1]
 8014cfa:	22f9      	movs	r2, #249	; 0xf9
 8014cfc:	5499      	strb	r1, [r3, r2]
 8014cfe:	e001      	b.n	8014d04 <LoRaMacMcpsRequest+0x208>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8014d00:	2303      	movs	r3, #3
 8014d02:	e028      	b.n	8014d56 <LoRaMacMcpsRequest+0x25a>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 8014d04:	2627      	movs	r6, #39	; 0x27
 8014d06:	19bc      	adds	r4, r7, r6
 8014d08:	231e      	movs	r3, #30
 8014d0a:	18fb      	adds	r3, r7, r3
 8014d0c:	881d      	ldrh	r5, [r3, #0]
 8014d0e:	6a3a      	ldr	r2, [r7, #32]
 8014d10:	2326      	movs	r3, #38	; 0x26
 8014d12:	18fb      	adds	r3, r7, r3
 8014d14:	7819      	ldrb	r1, [r3, #0]
 8014d16:	2310      	movs	r3, #16
 8014d18:	18f8      	adds	r0, r7, r3
 8014d1a:	002b      	movs	r3, r5
 8014d1c:	f7fd f810 	bl	8011d40 <Send>
 8014d20:	0003      	movs	r3, r0
 8014d22:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 8014d24:	19bb      	adds	r3, r7, r6
 8014d26:	781b      	ldrb	r3, [r3, #0]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d10b      	bne.n	8014d44 <LoRaMacMcpsRequest+0x248>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	7819      	ldrb	r1, [r3, #0]
 8014d30:	4b0c      	ldr	r3, [pc, #48]	; (8014d64 <LoRaMacMcpsRequest+0x268>)
 8014d32:	4a11      	ldr	r2, [pc, #68]	; (8014d78 <LoRaMacMcpsRequest+0x27c>)
 8014d34:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8014d36:	4b0b      	ldr	r3, [pc, #44]	; (8014d64 <LoRaMacMcpsRequest+0x268>)
 8014d38:	4a10      	ldr	r2, [pc, #64]	; (8014d7c <LoRaMacMcpsRequest+0x280>)
 8014d3a:	5c99      	ldrb	r1, [r3, r2]
 8014d3c:	2001      	movs	r0, #1
 8014d3e:	4301      	orrs	r1, r0
 8014d40:	5499      	strb	r1, [r3, r2]
 8014d42:	e003      	b.n	8014d4c <LoRaMacMcpsRequest+0x250>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8014d44:	4b07      	ldr	r3, [pc, #28]	; (8014d64 <LoRaMacMcpsRequest+0x268>)
 8014d46:	4a0e      	ldr	r2, [pc, #56]	; (8014d80 <LoRaMacMcpsRequest+0x284>)
 8014d48:	2100      	movs	r1, #0
 8014d4a:	5499      	strb	r1, [r3, r2]
        }
    }

    EventMacNvmCtxChanged( );
 8014d4c:	f7fe fa70 	bl	8013230 <EventMacNvmCtxChanged>
    return status;
 8014d50:	2327      	movs	r3, #39	; 0x27
 8014d52:	18fb      	adds	r3, r7, r3
 8014d54:	781b      	ldrb	r3, [r3, #0]
}
 8014d56:	0018      	movs	r0, r3
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	b00b      	add	sp, #44	; 0x2c
 8014d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d5e:	46c0      	nop			; (mov r8, r8)
 8014d60:	20000d2c 	.word	0x20000d2c
 8014d64:	200008f0 	.word	0x200008f0
 8014d68:	0000043d 	.word	0x0000043d
 8014d6c:	00000412 	.word	0x00000412
 8014d70:	00000411 	.word	0x00000411
 8014d74:	00000484 	.word	0x00000484
 8014d78:	0000043c 	.word	0x0000043c
 8014d7c:	00000481 	.word	0x00000481
 8014d80:	00000414 	.word	0x00000414

08014d84 <CalcNextV10X>:

#include "region/Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8014d84:	b590      	push	{r4, r7, lr}
 8014d86:	b08b      	sub	sp, #44	; 0x2c
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	60f8      	str	r0, [r7, #12]
 8014d8c:	60b9      	str	r1, [r7, #8]
 8014d8e:	607a      	str	r2, [r7, #4]
 8014d90:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8014d92:	2327      	movs	r3, #39	; 0x27
 8014d94:	18fb      	adds	r3, r7, r3
 8014d96:	2200      	movs	r2, #0
 8014d98:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 8014d9a:	2326      	movs	r3, #38	; 0x26
 8014d9c:	18fb      	adds	r3, r7, r3
 8014d9e:	68fa      	ldr	r2, [r7, #12]
 8014da0:	7c12      	ldrb	r2, [r2, #16]
 8014da2:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 8014da4:	2325      	movs	r3, #37	; 0x25
 8014da6:	18fb      	adds	r3, r7, r3
 8014da8:	68fa      	ldr	r2, [r7, #12]
 8014daa:	7c52      	ldrb	r2, [r2, #17]
 8014dac:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	689a      	ldr	r2, [r3, #8]
 8014db2:	683b      	ldr	r3, [r7, #0]
 8014db4:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	795b      	ldrb	r3, [r3, #5]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d100      	bne.n	8014dc0 <CalcNextV10X+0x3c>
 8014dbe:	e0a8      	b.n	8014f12 <CalcNextV10X+0x18e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8014dc0:	2120      	movs	r1, #32
 8014dc2:	187b      	adds	r3, r7, r1
 8014dc4:	2202      	movs	r2, #2
 8014dc6:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	7c9a      	ldrb	r2, [r3, #18]
 8014dcc:	187b      	adds	r3, r7, r1
 8014dce:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	7cdb      	ldrb	r3, [r3, #19]
 8014dd4:	187a      	adds	r2, r7, r1
 8014dd6:	0011      	movs	r1, r2
 8014dd8:	0018      	movs	r0, r3
 8014dda:	f002 fbab 	bl	8017534 <RegionGetPhyParam>
 8014dde:	0003      	movs	r3, r0
 8014de0:	001a      	movs	r2, r3
 8014de2:	211c      	movs	r1, #28
 8014de4:	187b      	adds	r3, r7, r1
 8014de6:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 8014de8:	187b      	adds	r3, r7, r1
 8014dea:	681a      	ldr	r2, [r3, #0]
 8014dec:	2124      	movs	r1, #36	; 0x24
 8014dee:	187b      	adds	r3, r7, r1
 8014df0:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 8014df2:	2026      	movs	r0, #38	; 0x26
 8014df4:	183a      	adds	r2, r7, r0
 8014df6:	187b      	adds	r3, r7, r1
 8014df8:	1839      	adds	r1, r7, r0
 8014dfa:	780c      	ldrb	r4, [r1, #0]
 8014dfc:	781b      	ldrb	r3, [r3, #0]
 8014dfe:	b258      	sxtb	r0, r3
 8014e00:	b261      	sxtb	r1, r4
 8014e02:	4288      	cmp	r0, r1
 8014e04:	da00      	bge.n	8014e08 <CalcNextV10X+0x84>
 8014e06:	1c23      	adds	r3, r4, #0
 8014e08:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 8014e0a:	2326      	movs	r3, #38	; 0x26
 8014e0c:	18fa      	adds	r2, r7, r3
 8014e0e:	2324      	movs	r3, #36	; 0x24
 8014e10:	18fb      	adds	r3, r7, r3
 8014e12:	7812      	ldrb	r2, [r2, #0]
 8014e14:	b252      	sxtb	r2, r2
 8014e16:	781b      	ldrb	r3, [r3, #0]
 8014e18:	b25b      	sxtb	r3, r3
 8014e1a:	429a      	cmp	r2, r3
 8014e1c:	d107      	bne.n	8014e2e <CalcNextV10X+0xaa>
        {
            *adrAckCounter = 0;
 8014e1e:	683b      	ldr	r3, [r7, #0]
 8014e20:	2200      	movs	r2, #0
 8014e22:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8014e24:	2327      	movs	r3, #39	; 0x27
 8014e26:	18fb      	adds	r3, r7, r3
 8014e28:	2200      	movs	r2, #0
 8014e2a:	701a      	strb	r2, [r3, #0]
 8014e2c:	e071      	b.n	8014f12 <CalcNextV10X+0x18e>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	689b      	ldr	r3, [r3, #8]
 8014e32:	68fa      	ldr	r2, [r7, #12]
 8014e34:	8992      	ldrh	r2, [r2, #12]
 8014e36:	4293      	cmp	r3, r2
 8014e38:	d304      	bcc.n	8014e44 <CalcNextV10X+0xc0>
            {
                adrAckReq = true;
 8014e3a:	2327      	movs	r3, #39	; 0x27
 8014e3c:	18fb      	adds	r3, r7, r3
 8014e3e:	2201      	movs	r2, #1
 8014e40:	701a      	strb	r2, [r3, #0]
 8014e42:	e003      	b.n	8014e4c <CalcNextV10X+0xc8>
            }
            else
            {
                adrAckReq = false;
 8014e44:	2327      	movs	r3, #39	; 0x27
 8014e46:	18fb      	adds	r3, r7, r3
 8014e48:	2200      	movs	r2, #0
 8014e4a:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	689b      	ldr	r3, [r3, #8]
 8014e50:	68fa      	ldr	r2, [r7, #12]
 8014e52:	8992      	ldrh	r2, [r2, #12]
 8014e54:	0011      	movs	r1, r2
 8014e56:	68fa      	ldr	r2, [r7, #12]
 8014e58:	89d2      	ldrh	r2, [r2, #14]
 8014e5a:	188a      	adds	r2, r1, r2
 8014e5c:	4293      	cmp	r3, r2
 8014e5e:	d358      	bcc.n	8014f12 <CalcNextV10X+0x18e>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8014e60:	2120      	movs	r1, #32
 8014e62:	187b      	adds	r3, r7, r1
 8014e64:	2208      	movs	r2, #8
 8014e66:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	7cdb      	ldrb	r3, [r3, #19]
 8014e6c:	187a      	adds	r2, r7, r1
 8014e6e:	0011      	movs	r1, r2
 8014e70:	0018      	movs	r0, r3
 8014e72:	f002 fb5f 	bl	8017534 <RegionGetPhyParam>
 8014e76:	0003      	movs	r3, r0
 8014e78:	001a      	movs	r2, r3
 8014e7a:	211c      	movs	r1, #28
 8014e7c:	187b      	adds	r3, r7, r1
 8014e7e:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 8014e80:	187b      	adds	r3, r7, r1
 8014e82:	681a      	ldr	r2, [r3, #0]
 8014e84:	2325      	movs	r3, #37	; 0x25
 8014e86:	18fb      	adds	r3, r7, r3
 8014e88:	701a      	strb	r2, [r3, #0]

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	689a      	ldr	r2, [r3, #8]
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	89db      	ldrh	r3, [r3, #14]
 8014e92:	0019      	movs	r1, r3
 8014e94:	0010      	movs	r0, r2
 8014e96:	f7eb f9bd 	bl	8000214 <__aeabi_uidivmod>
 8014e9a:	000b      	movs	r3, r1
 8014e9c:	2b01      	cmp	r3, #1
 8014e9e:	d138      	bne.n	8014f12 <CalcNextV10X+0x18e>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8014ea0:	2120      	movs	r1, #32
 8014ea2:	187b      	adds	r3, r7, r1
 8014ea4:	2222      	movs	r2, #34	; 0x22
 8014ea6:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 8014ea8:	187b      	adds	r3, r7, r1
 8014eaa:	2426      	movs	r4, #38	; 0x26
 8014eac:	193a      	adds	r2, r7, r4
 8014eae:	7812      	ldrb	r2, [r2, #0]
 8014eb0:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	7c9a      	ldrb	r2, [r3, #18]
 8014eb6:	187b      	adds	r3, r7, r1
 8014eb8:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	7cdb      	ldrb	r3, [r3, #19]
 8014ebe:	187a      	adds	r2, r7, r1
 8014ec0:	0011      	movs	r1, r2
 8014ec2:	0018      	movs	r0, r3
 8014ec4:	f002 fb36 	bl	8017534 <RegionGetPhyParam>
 8014ec8:	0003      	movs	r3, r0
 8014eca:	001a      	movs	r2, r3
 8014ecc:	211c      	movs	r1, #28
 8014ece:	187b      	adds	r3, r7, r1
 8014ed0:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 8014ed2:	187b      	adds	r3, r7, r1
 8014ed4:	681a      	ldr	r2, [r3, #0]
 8014ed6:	193b      	adds	r3, r7, r4
 8014ed8:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 8014eda:	193a      	adds	r2, r7, r4
 8014edc:	2324      	movs	r3, #36	; 0x24
 8014ede:	18fb      	adds	r3, r7, r3
 8014ee0:	7812      	ldrb	r2, [r2, #0]
 8014ee2:	b252      	sxtb	r2, r2
 8014ee4:	781b      	ldrb	r3, [r3, #0]
 8014ee6:	b25b      	sxtb	r3, r3
 8014ee8:	429a      	cmp	r2, r3
 8014eea:	d112      	bne.n	8014f12 <CalcNextV10X+0x18e>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8014eec:	2327      	movs	r3, #39	; 0x27
 8014eee:	18fb      	adds	r3, r7, r3
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	791b      	ldrb	r3, [r3, #4]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d00a      	beq.n	8014f12 <CalcNextV10X+0x18e>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 8014efc:	2114      	movs	r1, #20
 8014efe:	187b      	adds	r3, r7, r1
 8014f00:	2201      	movs	r2, #1
 8014f02:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	7cdb      	ldrb	r3, [r3, #19]
 8014f08:	187a      	adds	r2, r7, r1
 8014f0a:	0011      	movs	r1, r2
 8014f0c:	0018      	movs	r0, r3
 8014f0e:	f002 fb4d 	bl	80175ac <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8014f12:	68bb      	ldr	r3, [r7, #8]
 8014f14:	2226      	movs	r2, #38	; 0x26
 8014f16:	18ba      	adds	r2, r7, r2
 8014f18:	7812      	ldrb	r2, [r2, #0]
 8014f1a:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	2225      	movs	r2, #37	; 0x25
 8014f20:	18ba      	adds	r2, r7, r2
 8014f22:	7812      	ldrb	r2, [r2, #0]
 8014f24:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8014f26:	2327      	movs	r3, #39	; 0x27
 8014f28:	18fb      	adds	r3, r7, r3
 8014f2a:	781b      	ldrb	r3, [r3, #0]
}
 8014f2c:	0018      	movs	r0, r3
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	b00b      	add	sp, #44	; 0x2c
 8014f32:	bd90      	pop	{r4, r7, pc}

08014f34 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b084      	sub	sp, #16
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	60f8      	str	r0, [r7, #12]
 8014f3c:	60b9      	str	r1, [r7, #8]
 8014f3e:	607a      	str	r2, [r7, #4]
 8014f40:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	789b      	ldrb	r3, [r3, #2]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d107      	bne.n	8014f5a <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8014f4a:	683b      	ldr	r3, [r7, #0]
 8014f4c:	687a      	ldr	r2, [r7, #4]
 8014f4e:	68b9      	ldr	r1, [r7, #8]
 8014f50:	68f8      	ldr	r0, [r7, #12]
 8014f52:	f7ff ff17 	bl	8014d84 <CalcNextV10X>
 8014f56:	0003      	movs	r3, r0
 8014f58:	e000      	b.n	8014f5c <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8014f5a:	2300      	movs	r3, #0
}
 8014f5c:	0018      	movs	r0, r3
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	b004      	add	sp, #16
 8014f62:	bd80      	pop	{r7, pc}

08014f64 <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmEvent classBNvmCtxChanged )
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b084      	sub	sp, #16
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	60f8      	str	r0, [r7, #12]
 8014f6c:	60b9      	str	r1, [r7, #8]
 8014f6e:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8014f70:	46c0      	nop			; (mov r8, r8)
 8014f72:	46bd      	mov	sp, r7
 8014f74:	b004      	add	sp, #16
 8014f76:	bd80      	pop	{r7, pc}

08014f78 <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b082      	sub	sp, #8
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 8014f80:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 8014f82:	0018      	movs	r0, r3
 8014f84:	46bd      	mov	sp, r7
 8014f86:	b002      	add	sp, #8
 8014f88:	bd80      	pop	{r7, pc}

08014f8a <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 8014f8a:	b580      	push	{r7, lr}
 8014f8c:	b082      	sub	sp, #8
 8014f8e:	af00      	add	r7, sp, #0
 8014f90:	6078      	str	r0, [r7, #4]
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	2200      	movs	r2, #0
 8014f96:	601a      	str	r2, [r3, #0]
    return NULL;
 8014f98:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014f9a:	0018      	movs	r0, r3
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	b002      	add	sp, #8
 8014fa0:	bd80      	pop	{r7, pc}

08014fa2 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8014fa2:	b580      	push	{r7, lr}
 8014fa4:	b082      	sub	sp, #8
 8014fa6:	af00      	add	r7, sp, #0
 8014fa8:	0002      	movs	r2, r0
 8014faa:	1dfb      	adds	r3, r7, #7
 8014fac:	701a      	strb	r2, [r3, #0]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014fae:	46c0      	nop			; (mov r8, r8)
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	b002      	add	sp, #8
 8014fb4:	bd80      	pop	{r7, pc}

08014fb6 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8014fb6:	b580      	push	{r7, lr}
 8014fb8:	b082      	sub	sp, #8
 8014fba:	af00      	add	r7, sp, #0
 8014fbc:	0002      	movs	r2, r0
 8014fbe:	1dfb      	adds	r3, r7, #7
 8014fc0:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014fc2:	46c0      	nop			; (mov r8, r8)
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	b002      	add	sp, #8
 8014fc8:	bd80      	pop	{r7, pc}

08014fca <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014fca:	b580      	push	{r7, lr}
 8014fcc:	b082      	sub	sp, #8
 8014fce:	af00      	add	r7, sp, #0
 8014fd0:	0002      	movs	r2, r0
 8014fd2:	1dfb      	adds	r3, r7, #7
 8014fd4:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014fd6:	46c0      	nop			; (mov r8, r8)
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	b002      	add	sp, #8
 8014fdc:	bd80      	pop	{r7, pc}

08014fde <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8014fde:	b580      	push	{r7, lr}
 8014fe0:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8014fe2:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014fe4:	0018      	movs	r0, r3
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	bd80      	pop	{r7, pc}

08014fea <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8014fea:	b580      	push	{r7, lr}
 8014fec:	b082      	sub	sp, #8
 8014fee:	af00      	add	r7, sp, #0
 8014ff0:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014ff2:	46c0      	nop			; (mov r8, r8)
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	b002      	add	sp, #8
 8014ff8:	bd80      	pop	{r7, pc}

08014ffa <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8014ffa:	b580      	push	{r7, lr}
 8014ffc:	b082      	sub	sp, #8
 8014ffe:	af00      	add	r7, sp, #0
 8015000:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8015002:	46c0      	nop			; (mov r8, r8)
 8015004:	46bd      	mov	sp, r7
 8015006:	b002      	add	sp, #8
 8015008:	bd80      	pop	{r7, pc}

0801500a <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801500a:	b580      	push	{r7, lr}
 801500c:	b082      	sub	sp, #8
 801500e:	af00      	add	r7, sp, #0
 8015010:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8015012:	46c0      	nop			; (mov r8, r8)
 8015014:	46bd      	mov	sp, r7
 8015016:	b002      	add	sp, #8
 8015018:	bd80      	pop	{r7, pc}

0801501a <LoRaMacClassBRxBeacon>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801501a:	b580      	push	{r7, lr}
 801501c:	b082      	sub	sp, #8
 801501e:	af00      	add	r7, sp, #0
 8015020:	6078      	str	r0, [r7, #4]
 8015022:	000a      	movs	r2, r1
 8015024:	1cbb      	adds	r3, r7, #2
 8015026:	801a      	strh	r2, [r3, #0]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8015028:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801502a:	0018      	movs	r0, r3
 801502c:	46bd      	mov	sp, r7
 801502e:	b002      	add	sp, #8
 8015030:	bd80      	pop	{r7, pc}

08015032 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8015032:	b580      	push	{r7, lr}
 8015034:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015036:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8015038:	0018      	movs	r0, r3
 801503a:	46bd      	mov	sp, r7
 801503c:	bd80      	pop	{r7, pc}

0801503e <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 801503e:	b580      	push	{r7, lr}
 8015040:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015042:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8015044:	0018      	movs	r0, r3
 8015046:	46bd      	mov	sp, r7
 8015048:	bd80      	pop	{r7, pc}

0801504a <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801504a:	b580      	push	{r7, lr}
 801504c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801504e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8015050:	0018      	movs	r0, r3
 8015052:	46bd      	mov	sp, r7
 8015054:	bd80      	pop	{r7, pc}

08015056 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8015056:	b580      	push	{r7, lr}
 8015058:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801505a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801505c:	0018      	movs	r0, r3
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}

08015062 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8015062:	b580      	push	{r7, lr}
 8015064:	b082      	sub	sp, #8
 8015066:	af00      	add	r7, sp, #0
 8015068:	0002      	movs	r2, r0
 801506a:	1dfb      	adds	r3, r7, #7
 801506c:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 801506e:	46c0      	nop			; (mov r8, r8)
 8015070:	46bd      	mov	sp, r7
 8015072:	b002      	add	sp, #8
 8015074:	bd80      	pop	{r7, pc}

08015076 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8015076:	b580      	push	{r7, lr}
 8015078:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801507a:	46c0      	nop			; (mov r8, r8)
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}

08015080 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8015080:	b580      	push	{r7, lr}
 8015082:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8015084:	46c0      	nop			; (mov r8, r8)
 8015086:	46bd      	mov	sp, r7
 8015088:	bd80      	pop	{r7, pc}

0801508a <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801508a:	b580      	push	{r7, lr}
 801508c:	b082      	sub	sp, #8
 801508e:	af00      	add	r7, sp, #0
 8015090:	0002      	movs	r2, r0
 8015092:	1dfb      	adds	r3, r7, #7
 8015094:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015096:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8015098:	0018      	movs	r0, r3
 801509a:	46bd      	mov	sp, r7
 801509c:	b002      	add	sp, #8
 801509e:	bd80      	pop	{r7, pc}

080150a0 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b082      	sub	sp, #8
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80150a8:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 80150aa:	0018      	movs	r0, r3
 80150ac:	46bd      	mov	sp, r7
 80150ae:	b002      	add	sp, #8
 80150b0:	bd80      	pop	{r7, pc}

080150b2 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80150b2:	b580      	push	{r7, lr}
 80150b4:	b082      	sub	sp, #8
 80150b6:	af00      	add	r7, sp, #0
 80150b8:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80150ba:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 80150bc:	0018      	movs	r0, r3
 80150be:	46bd      	mov	sp, r7
 80150c0:	b002      	add	sp, #8
 80150c2:	bd80      	pop	{r7, pc}

080150c4 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	af00      	add	r7, sp, #0
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80150c8:	46c0      	nop			; (mov r8, r8)
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}

080150ce <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80150ce:	b580      	push	{r7, lr}
 80150d0:	b082      	sub	sp, #8
 80150d2:	af00      	add	r7, sp, #0
 80150d4:	0002      	movs	r2, r0
 80150d6:	6039      	str	r1, [r7, #0]
 80150d8:	1dfb      	adds	r3, r7, #7
 80150da:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 80150dc:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80150de:	0018      	movs	r0, r3
 80150e0:	46bd      	mov	sp, r7
 80150e2:	b002      	add	sp, #8
 80150e4:	bd80      	pop	{r7, pc}

080150e6 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80150e6:	b580      	push	{r7, lr}
 80150e8:	b082      	sub	sp, #8
 80150ea:	af00      	add	r7, sp, #0
 80150ec:	603a      	str	r2, [r7, #0]
 80150ee:	1dbb      	adds	r3, r7, #6
 80150f0:	1c02      	adds	r2, r0, #0
 80150f2:	801a      	strh	r2, [r3, #0]
 80150f4:	1d7b      	adds	r3, r7, #5
 80150f6:	1c0a      	adds	r2, r1, #0
 80150f8:	701a      	strb	r2, [r3, #0]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80150fa:	46c0      	nop			; (mov r8, r8)
 80150fc:	46bd      	mov	sp, r7
 80150fe:	b002      	add	sp, #8
 8015100:	bd80      	pop	{r7, pc}

08015102 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8015102:	b580      	push	{r7, lr}
 8015104:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8015106:	46c0      	nop			; (mov r8, r8)
 8015108:	46bd      	mov	sp, r7
 801510a:	bd80      	pop	{r7, pc}

0801510c <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b082      	sub	sp, #8
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
        NvmContextChange( );
        return true;
    }
    return false;
#else
    return false;
 8015114:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8015116:	0018      	movs	r0, r3
 8015118:	46bd      	mov	sp, r7
 801511a:	b002      	add	sp, #8
 801511c:	bd80      	pop	{r7, pc}

0801511e <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801511e:	b580      	push	{r7, lr}
 8015120:	b082      	sub	sp, #8
 8015122:	af00      	add	r7, sp, #0
 8015124:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8015126:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8015128:	0018      	movs	r0, r3
 801512a:	46bd      	mov	sp, r7
 801512c:	b002      	add	sp, #8
 801512e:	bd80      	pop	{r7, pc}

08015130 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8015130:	b580      	push	{r7, lr}
 8015132:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8015134:	46c0      	nop			; (mov r8, r8)
 8015136:	46bd      	mov	sp, r7
 8015138:	bd80      	pop	{r7, pc}

0801513a <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 801513a:	b580      	push	{r7, lr}
 801513c:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801513e:	46c0      	nop			; (mov r8, r8)
 8015140:	46bd      	mov	sp, r7
 8015142:	bd80      	pop	{r7, pc}

08015144 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b084      	sub	sp, #16
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015150:	230e      	movs	r3, #14
 8015152:	18fb      	adds	r3, r7, r3
 8015154:	2200      	movs	r2, #0
 8015156:	801a      	strh	r2, [r3, #0]
 8015158:	e00f      	b.n	801517a <IsSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 801515a:	230e      	movs	r3, #14
 801515c:	18fb      	adds	r3, r7, r3
 801515e:	881b      	ldrh	r3, [r3, #0]
 8015160:	68ba      	ldr	r2, [r7, #8]
 8015162:	18d3      	adds	r3, r2, r3
 8015164:	781b      	ldrb	r3, [r3, #0]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d001      	beq.n	801516e <IsSlotFree+0x2a>
        {
            return false;
 801516a:	2300      	movs	r3, #0
 801516c:	e00b      	b.n	8015186 <IsSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801516e:	210e      	movs	r1, #14
 8015170:	187b      	adds	r3, r7, r1
 8015172:	881a      	ldrh	r2, [r3, #0]
 8015174:	187b      	adds	r3, r7, r1
 8015176:	3201      	adds	r2, #1
 8015178:	801a      	strh	r2, [r3, #0]
 801517a:	230e      	movs	r3, #14
 801517c:	18fb      	adds	r3, r7, r3
 801517e:	881b      	ldrh	r3, [r3, #0]
 8015180:	2b0f      	cmp	r3, #15
 8015182:	d9ea      	bls.n	801515a <IsSlotFree+0x16>
        }
    }
    return true;
 8015184:	2301      	movs	r3, #1
}
 8015186:	0018      	movs	r0, r3
 8015188:	46bd      	mov	sp, r7
 801518a:	b004      	add	sp, #16
 801518c:	bd80      	pop	{r7, pc}
	...

08015190 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b082      	sub	sp, #8
 8015194:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8015196:	1dfb      	adds	r3, r7, #7
 8015198:	2200      	movs	r2, #0
 801519a:	701a      	strb	r2, [r3, #0]

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 801519c:	e00a      	b.n	80151b4 <MallocNewMacCommandSlot+0x24>
    {
        itr++;
 801519e:	1dfb      	adds	r3, r7, #7
 80151a0:	781a      	ldrb	r2, [r3, #0]
 80151a2:	1dfb      	adds	r3, r7, #7
 80151a4:	3201      	adds	r2, #1
 80151a6:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 80151a8:	1dfb      	adds	r3, r7, #7
 80151aa:	781b      	ldrb	r3, [r3, #0]
 80151ac:	2b0f      	cmp	r3, #15
 80151ae:	d101      	bne.n	80151b4 <MallocNewMacCommandSlot+0x24>
        {
            return 0;
 80151b0:	2300      	movs	r3, #0
 80151b2:	e017      	b.n	80151e4 <MallocNewMacCommandSlot+0x54>
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 80151b4:	1dfb      	adds	r3, r7, #7
 80151b6:	781b      	ldrb	r3, [r3, #0]
 80151b8:	011b      	lsls	r3, r3, #4
 80151ba:	3308      	adds	r3, #8
 80151bc:	001a      	movs	r2, r3
 80151be:	4b0b      	ldr	r3, [pc, #44]	; (80151ec <MallocNewMacCommandSlot+0x5c>)
 80151c0:	18d3      	adds	r3, r2, r3
 80151c2:	0018      	movs	r0, r3
 80151c4:	f7ff ffbe 	bl	8015144 <IsSlotFree>
 80151c8:	0003      	movs	r3, r0
 80151ca:	001a      	movs	r2, r3
 80151cc:	2301      	movs	r3, #1
 80151ce:	4053      	eors	r3, r2
 80151d0:	b2db      	uxtb	r3, r3
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d1e3      	bne.n	801519e <MallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 80151d6:	1dfb      	adds	r3, r7, #7
 80151d8:	781b      	ldrb	r3, [r3, #0]
 80151da:	011b      	lsls	r3, r3, #4
 80151dc:	3308      	adds	r3, #8
 80151de:	001a      	movs	r2, r3
 80151e0:	4b02      	ldr	r3, [pc, #8]	; (80151ec <MallocNewMacCommandSlot+0x5c>)
 80151e2:	18d3      	adds	r3, r2, r3
}
 80151e4:	0018      	movs	r0, r3
 80151e6:	46bd      	mov	sp, r7
 80151e8:	b002      	add	sp, #8
 80151ea:	bd80      	pop	{r7, pc}
 80151ec:	20000f5c 	.word	0x20000f5c

080151f0 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b082      	sub	sp, #8
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
    if( slot == 0 )
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d101      	bne.n	8015202 <FreeMacCommandSlot+0x12>
    {
        return false;
 80151fe:	2300      	movs	r3, #0
 8015200:	e006      	b.n	8015210 <FreeMacCommandSlot+0x20>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	2210      	movs	r2, #16
 8015206:	2100      	movs	r1, #0
 8015208:	0018      	movs	r0, r3
 801520a:	f006 fa4d 	bl	801b6a8 <memset1>

    return true;
 801520e:	2301      	movs	r3, #1
}
 8015210:	0018      	movs	r0, r3
 8015212:	46bd      	mov	sp, r7
 8015214:	b002      	add	sp, #8
 8015216:	bd80      	pop	{r7, pc}

08015218 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015218:	b580      	push	{r7, lr}
 801521a:	b082      	sub	sp, #8
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
    if( list == 0 )
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d101      	bne.n	801522a <LinkedListInit+0x12>
    {
        return false;
 8015226:	2300      	movs	r3, #0
 8015228:	e006      	b.n	8015238 <LinkedListInit+0x20>
    }

    list->First = 0;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	2200      	movs	r2, #0
 801522e:	601a      	str	r2, [r3, #0]
    list->Last = 0;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	2200      	movs	r2, #0
 8015234:	605a      	str	r2, [r3, #4]

    return true;
 8015236:	2301      	movs	r3, #1
}
 8015238:	0018      	movs	r0, r3
 801523a:	46bd      	mov	sp, r7
 801523c:	b002      	add	sp, #8
 801523e:	bd80      	pop	{r7, pc}

08015240 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b082      	sub	sp, #8
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
 8015248:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d104      	bne.n	801525a <LinkedListAdd+0x1a>
 8015250:	683b      	ldr	r3, [r7, #0]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d101      	bne.n	801525a <LinkedListAdd+0x1a>
    {
        return false;
 8015256:	2300      	movs	r3, #0
 8015258:	e015      	b.n	8015286 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == 0 )
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d102      	bne.n	8015268 <LinkedListAdd+0x28>
    {
        list->First = element;
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	683a      	ldr	r2, [r7, #0]
 8015266:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	685b      	ldr	r3, [r3, #4]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d003      	beq.n	8015278 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	685b      	ldr	r3, [r3, #4]
 8015274:	683a      	ldr	r2, [r7, #0]
 8015276:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = 0;
 8015278:	683b      	ldr	r3, [r7, #0]
 801527a:	2200      	movs	r2, #0
 801527c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	683a      	ldr	r2, [r7, #0]
 8015282:	605a      	str	r2, [r3, #4]

    return true;
 8015284:	2301      	movs	r3, #1
}
 8015286:	0018      	movs	r0, r3
 8015288:	46bd      	mov	sp, r7
 801528a:	b002      	add	sp, #8
 801528c:	bd80      	pop	{r7, pc}

0801528e <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 801528e:	b580      	push	{r7, lr}
 8015290:	b084      	sub	sp, #16
 8015292:	af00      	add	r7, sp, #0
 8015294:	6078      	str	r0, [r7, #4]
 8015296:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d104      	bne.n	80152a8 <LinkedListGetPrevious+0x1a>
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d101      	bne.n	80152a8 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80152a4:	2300      	movs	r3, #0
 80152a6:	e016      	b.n	80152d6 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80152ae:	683a      	ldr	r2, [r7, #0]
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	429a      	cmp	r2, r3
 80152b4:	d00c      	beq.n	80152d0 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80152b6:	e002      	b.n	80152be <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d007      	beq.n	80152d4 <LinkedListGetPrevious+0x46>
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	683a      	ldr	r2, [r7, #0]
 80152ca:	429a      	cmp	r2, r3
 80152cc:	d1f4      	bne.n	80152b8 <LinkedListGetPrevious+0x2a>
 80152ce:	e001      	b.n	80152d4 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80152d0:	2300      	movs	r3, #0
 80152d2:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80152d4:	68fb      	ldr	r3, [r7, #12]
}
 80152d6:	0018      	movs	r0, r3
 80152d8:	46bd      	mov	sp, r7
 80152da:	b004      	add	sp, #16
 80152dc:	bd80      	pop	{r7, pc}

080152de <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80152de:	b580      	push	{r7, lr}
 80152e0:	b084      	sub	sp, #16
 80152e2:	af00      	add	r7, sp, #0
 80152e4:	6078      	str	r0, [r7, #4]
 80152e6:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d104      	bne.n	80152f8 <LinkedListRemove+0x1a>
 80152ee:	683b      	ldr	r3, [r7, #0]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d101      	bne.n	80152f8 <LinkedListRemove+0x1a>
    {
        return false;
 80152f4:	2300      	movs	r3, #0
 80152f6:	e023      	b.n	8015340 <LinkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80152f8:	683a      	ldr	r2, [r7, #0]
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	0011      	movs	r1, r2
 80152fe:	0018      	movs	r0, r3
 8015300:	f7ff ffc5 	bl	801528e <LinkedListGetPrevious>
 8015304:	0003      	movs	r3, r0
 8015306:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	683a      	ldr	r2, [r7, #0]
 801530e:	429a      	cmp	r2, r3
 8015310:	d103      	bne.n	801531a <LinkedListRemove+0x3c>
    {
        list->First = element->Next;
 8015312:	683b      	ldr	r3, [r7, #0]
 8015314:	681a      	ldr	r2, [r3, #0]
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	685b      	ldr	r3, [r3, #4]
 801531e:	683a      	ldr	r2, [r7, #0]
 8015320:	429a      	cmp	r2, r3
 8015322:	d102      	bne.n	801532a <LinkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	68fa      	ldr	r2, [r7, #12]
 8015328:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d003      	beq.n	8015338 <LinkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	681a      	ldr	r2, [r3, #0]
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8015338:	683b      	ldr	r3, [r7, #0]
 801533a:	2200      	movs	r2, #0
 801533c:	601a      	str	r2, [r3, #0]

    return true;
 801533e:	2301      	movs	r3, #1
}
 8015340:	0018      	movs	r0, r3
 8015342:	46bd      	mov	sp, r7
 8015344:	b004      	add	sp, #16
 8015346:	bd80      	pop	{r7, pc}

08015348 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b082      	sub	sp, #8
 801534c:	af00      	add	r7, sp, #0
 801534e:	0002      	movs	r2, r0
 8015350:	1dfb      	adds	r3, r7, #7
 8015352:	701a      	strb	r2, [r3, #0]
    switch( cid )
 8015354:	1dfb      	adds	r3, r7, #7
 8015356:	781b      	ldrb	r3, [r3, #0]
 8015358:	2b08      	cmp	r3, #8
 801535a:	d003      	beq.n	8015364 <IsSticky+0x1c>
 801535c:	2b0a      	cmp	r3, #10
 801535e:	d001      	beq.n	8015364 <IsSticky+0x1c>
 8015360:	2b05      	cmp	r3, #5
 8015362:	d101      	bne.n	8015368 <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            return true;
 8015364:	2301      	movs	r3, #1
 8015366:	e000      	b.n	801536a <IsSticky+0x22>
        default:
            return false;
 8015368:	2300      	movs	r3, #0
    }
}
 801536a:	0018      	movs	r0, r3
 801536c:	46bd      	mov	sp, r7
 801536e:	b002      	add	sp, #8
 8015370:	bd80      	pop	{r7, pc}
	...

08015374 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 8015374:	b580      	push	{r7, lr}
 8015376:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 8015378:	4b04      	ldr	r3, [pc, #16]	; (801538c <NvmCtxCallback+0x18>)
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d002      	beq.n	8015386 <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 8015380:	4b02      	ldr	r3, [pc, #8]	; (801538c <NvmCtxCallback+0x18>)
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	4798      	blx	r3
    }
}
 8015386:	46c0      	nop			; (mov r8, r8)
 8015388:	46bd      	mov	sp, r7
 801538a:	bd80      	pop	{r7, pc}
 801538c:	20000f58 	.word	0x20000f58

08015390 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b082      	sub	sp, #8
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 8015398:	4b08      	ldr	r3, [pc, #32]	; (80153bc <LoRaMacCommandsInit+0x2c>)
 801539a:	22fc      	movs	r2, #252	; 0xfc
 801539c:	2100      	movs	r1, #0
 801539e:	0018      	movs	r0, r3
 80153a0:	f006 f982 	bl	801b6a8 <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 80153a4:	4b05      	ldr	r3, [pc, #20]	; (80153bc <LoRaMacCommandsInit+0x2c>)
 80153a6:	0018      	movs	r0, r3
 80153a8:	f7ff ff36 	bl	8015218 <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 80153ac:	4b04      	ldr	r3, [pc, #16]	; (80153c0 <LoRaMacCommandsInit+0x30>)
 80153ae:	687a      	ldr	r2, [r7, #4]
 80153b0:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 80153b2:	2300      	movs	r3, #0
}
 80153b4:	0018      	movs	r0, r3
 80153b6:	46bd      	mov	sp, r7
 80153b8:	b002      	add	sp, #8
 80153ba:	bd80      	pop	{r7, pc}
 80153bc:	20000f5c 	.word	0x20000f5c
 80153c0:	20000f58 	.word	0x20000f58

080153c4 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b082      	sub	sp, #8
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d007      	beq.n	80153e2 <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 80153d2:	6879      	ldr	r1, [r7, #4]
 80153d4:	4b05      	ldr	r3, [pc, #20]	; (80153ec <LoRaMacCommandsRestoreNvmCtx+0x28>)
 80153d6:	22fc      	movs	r2, #252	; 0xfc
 80153d8:	0018      	movs	r0, r3
 80153da:	f006 f929 	bl	801b630 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 80153de:	2300      	movs	r3, #0
 80153e0:	e000      	b.n	80153e4 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80153e2:	2301      	movs	r3, #1
    }
}
 80153e4:	0018      	movs	r0, r3
 80153e6:	46bd      	mov	sp, r7
 80153e8:	b002      	add	sp, #8
 80153ea:	bd80      	pop	{r7, pc}
 80153ec:	20000f5c 	.word	0x20000f5c

080153f0 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b082      	sub	sp, #8
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	22fc      	movs	r2, #252	; 0xfc
 80153fc:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 80153fe:	4b02      	ldr	r3, [pc, #8]	; (8015408 <LoRaMacCommandsGetNvmCtx+0x18>)
}
 8015400:	0018      	movs	r0, r3
 8015402:	46bd      	mov	sp, r7
 8015404:	b002      	add	sp, #8
 8015406:	bd80      	pop	{r7, pc}
 8015408:	20000f5c 	.word	0x20000f5c

0801540c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 801540c:	b590      	push	{r4, r7, lr}
 801540e:	b087      	sub	sp, #28
 8015410:	af00      	add	r7, sp, #0
 8015412:	60b9      	str	r1, [r7, #8]
 8015414:	607a      	str	r2, [r7, #4]
 8015416:	230f      	movs	r3, #15
 8015418:	18fb      	adds	r3, r7, r3
 801541a:	1c02      	adds	r2, r0, #0
 801541c:	701a      	strb	r2, [r3, #0]
    if( payload == 0 )
 801541e:	68bb      	ldr	r3, [r7, #8]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d101      	bne.n	8015428 <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015424:	2301      	movs	r3, #1
 8015426:	e03c      	b.n	80154a2 <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8015428:	f7ff feb2 	bl	8015190 <MallocNewMacCommandSlot>
 801542c:	0003      	movs	r3, r0
 801542e:	617b      	str	r3, [r7, #20]

    if( newCmd == 0 )
 8015430:	697b      	ldr	r3, [r7, #20]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d101      	bne.n	801543a <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8015436:	2302      	movs	r3, #2
 8015438:	e033      	b.n	80154a2 <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 801543a:	697a      	ldr	r2, [r7, #20]
 801543c:	4b1b      	ldr	r3, [pc, #108]	; (80154ac <LoRaMacCommandsAddCmd+0xa0>)
 801543e:	0011      	movs	r1, r2
 8015440:	0018      	movs	r0, r3
 8015442:	f7ff fefd 	bl	8015240 <LinkedListAdd>
 8015446:	0003      	movs	r3, r0
 8015448:	001a      	movs	r2, r3
 801544a:	2301      	movs	r3, #1
 801544c:	4053      	eors	r3, r2
 801544e:	b2db      	uxtb	r3, r3
 8015450:	2b00      	cmp	r3, #0
 8015452:	d001      	beq.n	8015458 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015454:	2305      	movs	r3, #5
 8015456:	e024      	b.n	80154a2 <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 8015458:	697b      	ldr	r3, [r7, #20]
 801545a:	240f      	movs	r4, #15
 801545c:	193a      	adds	r2, r7, r4
 801545e:	7812      	ldrb	r2, [r2, #0]
 8015460:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8015462:	697b      	ldr	r3, [r7, #20]
 8015464:	687a      	ldr	r2, [r7, #4]
 8015466:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8015468:	697b      	ldr	r3, [r7, #20]
 801546a:	3305      	adds	r3, #5
 801546c:	687a      	ldr	r2, [r7, #4]
 801546e:	b292      	uxth	r2, r2
 8015470:	68b9      	ldr	r1, [r7, #8]
 8015472:	0018      	movs	r0, r3
 8015474:	f006 f8dc 	bl	801b630 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8015478:	193b      	adds	r3, r7, r4
 801547a:	781b      	ldrb	r3, [r3, #0]
 801547c:	0018      	movs	r0, r3
 801547e:	f7ff ff63 	bl	8015348 <IsSticky>
 8015482:	0003      	movs	r3, r0
 8015484:	001a      	movs	r2, r3
 8015486:	697b      	ldr	r3, [r7, #20]
 8015488:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 801548a:	4b08      	ldr	r3, [pc, #32]	; (80154ac <LoRaMacCommandsAddCmd+0xa0>)
 801548c:	22f8      	movs	r2, #248	; 0xf8
 801548e:	589a      	ldr	r2, [r3, r2]
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	18d3      	adds	r3, r2, r3
 8015494:	1c5a      	adds	r2, r3, #1
 8015496:	4b05      	ldr	r3, [pc, #20]	; (80154ac <LoRaMacCommandsAddCmd+0xa0>)
 8015498:	21f8      	movs	r1, #248	; 0xf8
 801549a:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 801549c:	f7ff ff6a 	bl	8015374 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80154a0:	2300      	movs	r3, #0
}
 80154a2:	0018      	movs	r0, r3
 80154a4:	46bd      	mov	sp, r7
 80154a6:	b007      	add	sp, #28
 80154a8:	bd90      	pop	{r4, r7, pc}
 80154aa:	46c0      	nop			; (mov r8, r8)
 80154ac:	20000f5c 	.word	0x20000f5c

080154b0 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b082      	sub	sp, #8
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d101      	bne.n	80154c2 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80154be:	2301      	movs	r3, #1
 80154c0:	e028      	b.n	8015514 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 80154c2:	687a      	ldr	r2, [r7, #4]
 80154c4:	4b15      	ldr	r3, [pc, #84]	; (801551c <LoRaMacCommandsRemoveCmd+0x6c>)
 80154c6:	0011      	movs	r1, r2
 80154c8:	0018      	movs	r0, r3
 80154ca:	f7ff ff08 	bl	80152de <LinkedListRemove>
 80154ce:	0003      	movs	r3, r0
 80154d0:	001a      	movs	r2, r3
 80154d2:	2301      	movs	r3, #1
 80154d4:	4053      	eors	r3, r2
 80154d6:	b2db      	uxtb	r3, r3
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d001      	beq.n	80154e0 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80154dc:	2303      	movs	r3, #3
 80154de:	e019      	b.n	8015514 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 80154e0:	4b0e      	ldr	r3, [pc, #56]	; (801551c <LoRaMacCommandsRemoveCmd+0x6c>)
 80154e2:	22f8      	movs	r2, #248	; 0xf8
 80154e4:	589a      	ldr	r2, [r3, r2]
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	689b      	ldr	r3, [r3, #8]
 80154ea:	1ad3      	subs	r3, r2, r3
 80154ec:	1e5a      	subs	r2, r3, #1
 80154ee:	4b0b      	ldr	r3, [pc, #44]	; (801551c <LoRaMacCommandsRemoveCmd+0x6c>)
 80154f0:	21f8      	movs	r1, #248	; 0xf8
 80154f2:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	0018      	movs	r0, r3
 80154f8:	f7ff fe7a 	bl	80151f0 <FreeMacCommandSlot>
 80154fc:	0003      	movs	r3, r0
 80154fe:	001a      	movs	r2, r3
 8015500:	2301      	movs	r3, #1
 8015502:	4053      	eors	r3, r2
 8015504:	b2db      	uxtb	r3, r3
 8015506:	2b00      	cmp	r3, #0
 8015508:	d001      	beq.n	801550e <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 801550a:	2305      	movs	r3, #5
 801550c:	e002      	b.n	8015514 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 801550e:	f7ff ff31 	bl	8015374 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8015512:	2300      	movs	r3, #0
}
 8015514:	0018      	movs	r0, r3
 8015516:	46bd      	mov	sp, r7
 8015518:	b002      	add	sp, #8
 801551a:	bd80      	pop	{r7, pc}
 801551c:	20000f5c 	.word	0x20000f5c

08015520 <LoRaMacCommandsRemoveNoneStickyCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b082      	sub	sp, #8
 8015524:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8015526:	4b11      	ldr	r3, [pc, #68]	; (801556c <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801552c:	e013      	b.n	8015556 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	7b1b      	ldrb	r3, [r3, #12]
 8015532:	2201      	movs	r2, #1
 8015534:	4053      	eors	r3, r2
 8015536:	b2db      	uxtb	r3, r3
 8015538:	2b00      	cmp	r3, #0
 801553a:	d009      	beq.n	8015550 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	0018      	movs	r0, r3
 8015546:	f7ff ffb3 	bl	80154b0 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 801554a:	683b      	ldr	r3, [r7, #0]
 801554c:	607b      	str	r3, [r7, #4]
 801554e:	e002      	b.n	8015556 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d1e8      	bne.n	801552e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 801555c:	f7ff ff0a 	bl	8015374 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8015560:	2300      	movs	r3, #0
}
 8015562:	0018      	movs	r0, r3
 8015564:	46bd      	mov	sp, r7
 8015566:	b002      	add	sp, #8
 8015568:	bd80      	pop	{r7, pc}
 801556a:	46c0      	nop			; (mov r8, r8)
 801556c:	20000f5c 	.word	0x20000f5c

08015570 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b082      	sub	sp, #8
 8015574:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8015576:	4b0f      	ldr	r3, [pc, #60]	; (80155b4 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>)
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801557c:	e00f      	b.n	801559e <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	681b      	ldr	r3, [r3, #0]
 8015582:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	791b      	ldrb	r3, [r3, #4]
 8015588:	0018      	movs	r0, r3
 801558a:	f7ff fedd 	bl	8015348 <IsSticky>
 801558e:	1e03      	subs	r3, r0, #0
 8015590:	d003      	beq.n	801559a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	0018      	movs	r0, r3
 8015596:	f7ff ff8b 	bl	80154b0 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 801559a:	683b      	ldr	r3, [r7, #0]
 801559c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d1ec      	bne.n	801557e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 80155a4:	f7ff fee6 	bl	8015374 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80155a8:	2300      	movs	r3, #0
}
 80155aa:	0018      	movs	r0, r3
 80155ac:	46bd      	mov	sp, r7
 80155ae:	b002      	add	sp, #8
 80155b0:	bd80      	pop	{r7, pc}
 80155b2:	46c0      	nop			; (mov r8, r8)
 80155b4:	20000f5c 	.word	0x20000f5c

080155b8 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b082      	sub	sp, #8
 80155bc:	af00      	add	r7, sp, #0
 80155be:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d101      	bne.n	80155ca <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80155c6:	2301      	movs	r3, #1
 80155c8:	e005      	b.n	80155d6 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 80155ca:	4b05      	ldr	r3, [pc, #20]	; (80155e0 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80155cc:	22f8      	movs	r2, #248	; 0xf8
 80155ce:	589a      	ldr	r2, [r3, r2]
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80155d4:	2300      	movs	r3, #0
}
 80155d6:	0018      	movs	r0, r3
 80155d8:	46bd      	mov	sp, r7
 80155da:	b002      	add	sp, #8
 80155dc:	bd80      	pop	{r7, pc}
 80155de:	46c0      	nop			; (mov r8, r8)
 80155e0:	20000f5c 	.word	0x20000f5c

080155e4 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80155e4:	b590      	push	{r4, r7, lr}
 80155e6:	b087      	sub	sp, #28
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	60f8      	str	r0, [r7, #12]
 80155ec:	60b9      	str	r1, [r7, #8]
 80155ee:	607a      	str	r2, [r7, #4]
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d002      	beq.n	80155fc <LoRaMacCommandsSerializeCmds+0x18>
 80155f6:	68bb      	ldr	r3, [r7, #8]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d101      	bne.n	8015600 <LoRaMacCommandsSerializeCmds+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80155fc:	2301      	movs	r3, #1
 80155fe:	e03a      	b.n	8015676 <LoRaMacCommandsSerializeCmds+0x92>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 8015600:	4b1f      	ldr	r3, [pc, #124]	; (8015680 <LoRaMacCommandsSerializeCmds+0x9c>)
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	617b      	str	r3, [r7, #20]
    uint8_t itr = 0;
 8015606:	2313      	movs	r3, #19
 8015608:	18fb      	adds	r3, r7, r3
 801560a:	2200      	movs	r2, #0
 801560c:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 801560e:	e02c      	b.n	801566a <LoRaMacCommandsSerializeCmds+0x86>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8015610:	2313      	movs	r3, #19
 8015612:	18fb      	adds	r3, r7, r3
 8015614:	781b      	ldrb	r3, [r3, #0]
 8015616:	68fa      	ldr	r2, [r7, #12]
 8015618:	1ad2      	subs	r2, r2, r3
 801561a:	697b      	ldr	r3, [r7, #20]
 801561c:	689b      	ldr	r3, [r3, #8]
 801561e:	3301      	adds	r3, #1
 8015620:	429a      	cmp	r2, r3
 8015622:	d326      	bcc.n	8015672 <LoRaMacCommandsSerializeCmds+0x8e>
        {
            buffer[itr++] = curElement->CID;
 8015624:	2413      	movs	r4, #19
 8015626:	193b      	adds	r3, r7, r4
 8015628:	781b      	ldrb	r3, [r3, #0]
 801562a:	193a      	adds	r2, r7, r4
 801562c:	1c59      	adds	r1, r3, #1
 801562e:	7011      	strb	r1, [r2, #0]
 8015630:	001a      	movs	r2, r3
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	189b      	adds	r3, r3, r2
 8015636:	697a      	ldr	r2, [r7, #20]
 8015638:	7912      	ldrb	r2, [r2, #4]
 801563a:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 801563c:	193b      	adds	r3, r7, r4
 801563e:	781b      	ldrb	r3, [r3, #0]
 8015640:	687a      	ldr	r2, [r7, #4]
 8015642:	18d0      	adds	r0, r2, r3
 8015644:	697b      	ldr	r3, [r7, #20]
 8015646:	1d59      	adds	r1, r3, #5
 8015648:	697b      	ldr	r3, [r7, #20]
 801564a:	689b      	ldr	r3, [r3, #8]
 801564c:	b29b      	uxth	r3, r3
 801564e:	001a      	movs	r2, r3
 8015650:	f005 ffee 	bl	801b630 <memcpy1>
            itr = itr + curElement->PayloadSize;
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	689b      	ldr	r3, [r3, #8]
 8015658:	b2d9      	uxtb	r1, r3
 801565a:	193b      	adds	r3, r7, r4
 801565c:	193a      	adds	r2, r7, r4
 801565e:	7812      	ldrb	r2, [r2, #0]
 8015660:	188a      	adds	r2, r1, r2
 8015662:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8015664:	697b      	ldr	r3, [r7, #20]
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	617b      	str	r3, [r7, #20]
    while( curElement != NULL )
 801566a:	697b      	ldr	r3, [r7, #20]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d1cf      	bne.n	8015610 <LoRaMacCommandsSerializeCmds+0x2c>
 8015670:	e000      	b.n	8015674 <LoRaMacCommandsSerializeCmds+0x90>
            break;
 8015672:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015674:	2300      	movs	r3, #0
}
 8015676:	0018      	movs	r0, r3
 8015678:	46bd      	mov	sp, r7
 801567a:	b007      	add	sp, #28
 801567c:	bd90      	pop	{r4, r7, pc}
 801567e:	46c0      	nop			; (mov r8, r8)
 8015680:	20000f5c 	.word	0x20000f5c

08015684 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b084      	sub	sp, #16
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d101      	bne.n	8015696 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015692:	2301      	movs	r3, #1
 8015694:	e016      	b.n	80156c4 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 8015696:	4b0d      	ldr	r3, [pc, #52]	; (80156cc <LoRaMacCommandsStickyCmdsPending+0x48>)
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	2200      	movs	r2, #0
 80156a0:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80156a2:	e00b      	b.n	80156bc <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	7b1b      	ldrb	r3, [r3, #12]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d004      	beq.n	80156b6 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	2201      	movs	r2, #1
 80156b0:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80156b2:	2300      	movs	r3, #0
 80156b4:	e006      	b.n	80156c4 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d1f0      	bne.n	80156a4 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80156c2:	2300      	movs	r3, #0
}
 80156c4:	0018      	movs	r0, r3
 80156c6:	46bd      	mov	sp, r7
 80156c8:	b004      	add	sp, #16
 80156ca:	bd80      	pop	{r7, pc}
 80156cc:	20000f5c 	.word	0x20000f5c

080156d0 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b082      	sub	sp, #8
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80156d8:	4b08      	ldr	r3, [pc, #32]	; (80156fc <IncreaseBufferPointer+0x2c>)
 80156da:	691b      	ldr	r3, [r3, #16]
 80156dc:	3310      	adds	r3, #16
 80156de:	687a      	ldr	r2, [r7, #4]
 80156e0:	429a      	cmp	r2, r3
 80156e2:	d103      	bne.n	80156ec <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80156e4:	4b05      	ldr	r3, [pc, #20]	; (80156fc <IncreaseBufferPointer+0x2c>)
 80156e6:	691b      	ldr	r3, [r3, #16]
 80156e8:	607b      	str	r3, [r7, #4]
 80156ea:	e002      	b.n	80156f2 <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	3304      	adds	r3, #4
 80156f0:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80156f2:	687b      	ldr	r3, [r7, #4]
}
 80156f4:	0018      	movs	r0, r3
 80156f6:	46bd      	mov	sp, r7
 80156f8:	b002      	add	sp, #8
 80156fa:	bd80      	pop	{r7, pc}
 80156fc:	20001070 	.word	0x20001070

08015700 <GetElement>:
    }
    return bufferPointer;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b086      	sub	sp, #24
 8015704:	af00      	add	r7, sp, #0
 8015706:	60b9      	str	r1, [r7, #8]
 8015708:	607a      	str	r2, [r7, #4]
 801570a:	230f      	movs	r3, #15
 801570c:	18fb      	adds	r3, r7, r3
 801570e:	1c02      	adds	r2, r0, #0
 8015710:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 8015712:	68bb      	ldr	r3, [r7, #8]
 8015714:	617b      	str	r3, [r7, #20]

    while( element != bufferEnd )
 8015716:	e00e      	b.n	8015736 <GetElement+0x36>
    {
        if( element->Request == request )
 8015718:	697b      	ldr	r3, [r7, #20]
 801571a:	781b      	ldrb	r3, [r3, #0]
 801571c:	220f      	movs	r2, #15
 801571e:	18ba      	adds	r2, r7, r2
 8015720:	7812      	ldrb	r2, [r2, #0]
 8015722:	429a      	cmp	r2, r3
 8015724:	d101      	bne.n	801572a <GetElement+0x2a>
        {
            // We have found the element
            return element;
 8015726:	697b      	ldr	r3, [r7, #20]
 8015728:	e00a      	b.n	8015740 <GetElement+0x40>
        }
        else
        {
            element = IncreaseBufferPointer( element );
 801572a:	697b      	ldr	r3, [r7, #20]
 801572c:	0018      	movs	r0, r3
 801572e:	f7ff ffcf 	bl	80156d0 <IncreaseBufferPointer>
 8015732:	0003      	movs	r3, r0
 8015734:	617b      	str	r3, [r7, #20]
    while( element != bufferEnd )
 8015736:	697a      	ldr	r2, [r7, #20]
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	429a      	cmp	r2, r3
 801573c:	d1ec      	bne.n	8015718 <GetElement+0x18>
        }
    }
    return NULL;
 801573e:	2300      	movs	r3, #0
}
 8015740:	0018      	movs	r0, r3
 8015742:	46bd      	mov	sp, r7
 8015744:	b006      	add	sp, #24
 8015746:	bd80      	pop	{r7, pc}

08015748 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 8015748:	b580      	push	{r7, lr}
 801574a:	b082      	sub	sp, #8
 801574c:	af00      	add	r7, sp, #0
 801574e:	6078      	str	r0, [r7, #4]
 8015750:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 8015752:	4b13      	ldr	r3, [pc, #76]	; (80157a0 <LoRaMacConfirmQueueInit+0x58>)
 8015754:	687a      	ldr	r2, [r7, #4]
 8015756:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 8015758:	4b11      	ldr	r3, [pc, #68]	; (80157a0 <LoRaMacConfirmQueueInit+0x58>)
 801575a:	4a12      	ldr	r2, [pc, #72]	; (80157a4 <LoRaMacConfirmQueueInit+0x5c>)
 801575c:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 801575e:	4b10      	ldr	r3, [pc, #64]	; (80157a0 <LoRaMacConfirmQueueInit+0x58>)
 8015760:	691b      	ldr	r3, [r3, #16]
 8015762:	2200      	movs	r2, #0
 8015764:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8015766:	4b0e      	ldr	r3, [pc, #56]	; (80157a0 <LoRaMacConfirmQueueInit+0x58>)
 8015768:	691b      	ldr	r3, [r3, #16]
 801576a:	001a      	movs	r2, r3
 801576c:	4b0c      	ldr	r3, [pc, #48]	; (80157a0 <LoRaMacConfirmQueueInit+0x58>)
 801576e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8015770:	4b0b      	ldr	r3, [pc, #44]	; (80157a0 <LoRaMacConfirmQueueInit+0x58>)
 8015772:	691b      	ldr	r3, [r3, #16]
 8015774:	001a      	movs	r2, r3
 8015776:	4b0a      	ldr	r3, [pc, #40]	; (80157a0 <LoRaMacConfirmQueueInit+0x58>)
 8015778:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 801577a:	4b09      	ldr	r3, [pc, #36]	; (80157a0 <LoRaMacConfirmQueueInit+0x58>)
 801577c:	691b      	ldr	r3, [r3, #16]
 801577e:	2214      	movs	r2, #20
 8015780:	21ff      	movs	r1, #255	; 0xff
 8015782:	0018      	movs	r0, r3
 8015784:	f005 ff90 	bl	801b6a8 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015788:	4b05      	ldr	r3, [pc, #20]	; (80157a0 <LoRaMacConfirmQueueInit+0x58>)
 801578a:	691b      	ldr	r3, [r3, #16]
 801578c:	2201      	movs	r2, #1
 801578e:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 8015790:	4b03      	ldr	r3, [pc, #12]	; (80157a0 <LoRaMacConfirmQueueInit+0x58>)
 8015792:	683a      	ldr	r2, [r7, #0]
 8015794:	60da      	str	r2, [r3, #12]
}
 8015796:	46c0      	nop			; (mov r8, r8)
 8015798:	46bd      	mov	sp, r7
 801579a:	b002      	add	sp, #8
 801579c:	bd80      	pop	{r7, pc}
 801579e:	46c0      	nop			; (mov r8, r8)
 80157a0:	20001070 	.word	0x20001070
 80157a4:	20001058 	.word	0x20001058

080157a8 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b082      	sub	sp, #8
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d007      	beq.n	80157c6 <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 80157b6:	6879      	ldr	r1, [r7, #4]
 80157b8:	4b05      	ldr	r3, [pc, #20]	; (80157d0 <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 80157ba:	2216      	movs	r2, #22
 80157bc:	0018      	movs	r0, r3
 80157be:	f005 ff37 	bl	801b630 <memcpy1>
        return true;
 80157c2:	2301      	movs	r3, #1
 80157c4:	e000      	b.n	80157c8 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 80157c6:	2300      	movs	r3, #0
    }
}
 80157c8:	0018      	movs	r0, r3
 80157ca:	46bd      	mov	sp, r7
 80157cc:	b002      	add	sp, #8
 80157ce:	bd80      	pop	{r7, pc}
 80157d0:	20001058 	.word	0x20001058

080157d4 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b082      	sub	sp, #8
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	2216      	movs	r2, #22
 80157e0:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 80157e2:	4b02      	ldr	r3, [pc, #8]	; (80157ec <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 80157e4:	0018      	movs	r0, r3
 80157e6:	46bd      	mov	sp, r7
 80157e8:	b002      	add	sp, #8
 80157ea:	bd80      	pop	{r7, pc}
 80157ec:	20001058 	.word	0x20001058

080157f0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b082      	sub	sp, #8
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80157f8:	4b16      	ldr	r3, [pc, #88]	; (8015854 <LoRaMacConfirmQueueAdd+0x64>)
 80157fa:	691b      	ldr	r3, [r3, #16]
 80157fc:	7d1b      	ldrb	r3, [r3, #20]
 80157fe:	2b04      	cmp	r3, #4
 8015800:	d901      	bls.n	8015806 <LoRaMacConfirmQueueAdd+0x16>
    {
        // Protect the buffer against overwrites
        return false;
 8015802:	2300      	movs	r3, #0
 8015804:	e021      	b.n	801584a <LoRaMacConfirmQueueAdd+0x5a>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8015806:	4b13      	ldr	r3, [pc, #76]	; (8015854 <LoRaMacConfirmQueueAdd+0x64>)
 8015808:	689b      	ldr	r3, [r3, #8]
 801580a:	687a      	ldr	r2, [r7, #4]
 801580c:	7812      	ldrb	r2, [r2, #0]
 801580e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8015810:	4b10      	ldr	r3, [pc, #64]	; (8015854 <LoRaMacConfirmQueueAdd+0x64>)
 8015812:	689b      	ldr	r3, [r3, #8]
 8015814:	687a      	ldr	r2, [r7, #4]
 8015816:	7852      	ldrb	r2, [r2, #1]
 8015818:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801581a:	4b0e      	ldr	r3, [pc, #56]	; (8015854 <LoRaMacConfirmQueueAdd+0x64>)
 801581c:	689b      	ldr	r3, [r3, #8]
 801581e:	687a      	ldr	r2, [r7, #4]
 8015820:	78d2      	ldrb	r2, [r2, #3]
 8015822:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8015824:	4b0b      	ldr	r3, [pc, #44]	; (8015854 <LoRaMacConfirmQueueAdd+0x64>)
 8015826:	689b      	ldr	r3, [r3, #8]
 8015828:	2200      	movs	r2, #0
 801582a:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 801582c:	4b09      	ldr	r3, [pc, #36]	; (8015854 <LoRaMacConfirmQueueAdd+0x64>)
 801582e:	691b      	ldr	r3, [r3, #16]
 8015830:	7d1a      	ldrb	r2, [r3, #20]
 8015832:	3201      	adds	r2, #1
 8015834:	b2d2      	uxtb	r2, r2
 8015836:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8015838:	4b06      	ldr	r3, [pc, #24]	; (8015854 <LoRaMacConfirmQueueAdd+0x64>)
 801583a:	689b      	ldr	r3, [r3, #8]
 801583c:	0018      	movs	r0, r3
 801583e:	f7ff ff47 	bl	80156d0 <IncreaseBufferPointer>
 8015842:	0002      	movs	r2, r0
 8015844:	4b03      	ldr	r3, [pc, #12]	; (8015854 <LoRaMacConfirmQueueAdd+0x64>)
 8015846:	609a      	str	r2, [r3, #8]

    return true;
 8015848:	2301      	movs	r3, #1
}
 801584a:	0018      	movs	r0, r3
 801584c:	46bd      	mov	sp, r7
 801584e:	b002      	add	sp, #8
 8015850:	bd80      	pop	{r7, pc}
 8015852:	46c0      	nop			; (mov r8, r8)
 8015854:	20001070 	.word	0x20001070

08015858 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8015858:	b580      	push	{r7, lr}
 801585a:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 801585c:	4b0c      	ldr	r3, [pc, #48]	; (8015890 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 801585e:	691b      	ldr	r3, [r3, #16]
 8015860:	7d1b      	ldrb	r3, [r3, #20]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d101      	bne.n	801586a <LoRaMacConfirmQueueRemoveFirst+0x12>
    {
        return false;
 8015866:	2300      	movs	r3, #0
 8015868:	e00e      	b.n	8015888 <LoRaMacConfirmQueueRemoveFirst+0x30>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 801586a:	4b09      	ldr	r3, [pc, #36]	; (8015890 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 801586c:	691b      	ldr	r3, [r3, #16]
 801586e:	7d1a      	ldrb	r2, [r3, #20]
 8015870:	3a01      	subs	r2, #1
 8015872:	b2d2      	uxtb	r2, r2
 8015874:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8015876:	4b06      	ldr	r3, [pc, #24]	; (8015890 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 8015878:	685b      	ldr	r3, [r3, #4]
 801587a:	0018      	movs	r0, r3
 801587c:	f7ff ff28 	bl	80156d0 <IncreaseBufferPointer>
 8015880:	0002      	movs	r2, r0
 8015882:	4b03      	ldr	r3, [pc, #12]	; (8015890 <LoRaMacConfirmQueueRemoveFirst+0x38>)
 8015884:	605a      	str	r2, [r3, #4]

    return true;
 8015886:	2301      	movs	r3, #1
}
 8015888:	0018      	movs	r0, r3
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}
 801588e:	46c0      	nop			; (mov r8, r8)
 8015890:	20001070 	.word	0x20001070

08015894 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b084      	sub	sp, #16
 8015898:	af00      	add	r7, sp, #0
 801589a:	0002      	movs	r2, r0
 801589c:	1dfb      	adds	r3, r7, #7
 801589e:	701a      	strb	r2, [r3, #0]
 80158a0:	1dbb      	adds	r3, r7, #6
 80158a2:	1c0a      	adds	r2, r1, #0
 80158a4:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 80158a6:	2300      	movs	r3, #0
 80158a8:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 80158aa:	4b0f      	ldr	r3, [pc, #60]	; (80158e8 <LoRaMacConfirmQueueSetStatus+0x54>)
 80158ac:	691b      	ldr	r3, [r3, #16]
 80158ae:	7d1b      	ldrb	r3, [r3, #20]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d014      	beq.n	80158de <LoRaMacConfirmQueueSetStatus+0x4a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80158b4:	4b0c      	ldr	r3, [pc, #48]	; (80158e8 <LoRaMacConfirmQueueSetStatus+0x54>)
 80158b6:	6859      	ldr	r1, [r3, #4]
 80158b8:	4b0b      	ldr	r3, [pc, #44]	; (80158e8 <LoRaMacConfirmQueueSetStatus+0x54>)
 80158ba:	689a      	ldr	r2, [r3, #8]
 80158bc:	1dbb      	adds	r3, r7, #6
 80158be:	781b      	ldrb	r3, [r3, #0]
 80158c0:	0018      	movs	r0, r3
 80158c2:	f7ff ff1d 	bl	8015700 <GetElement>
 80158c6:	0003      	movs	r3, r0
 80158c8:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d006      	beq.n	80158de <LoRaMacConfirmQueueSetStatus+0x4a>
        {
            element->Status = status;
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	1dfa      	adds	r2, r7, #7
 80158d4:	7812      	ldrb	r2, [r2, #0]
 80158d6:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	2201      	movs	r2, #1
 80158dc:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80158de:	46c0      	nop			; (mov r8, r8)
 80158e0:	46bd      	mov	sp, r7
 80158e2:	b004      	add	sp, #16
 80158e4:	bd80      	pop	{r7, pc}
 80158e6:	46c0      	nop			; (mov r8, r8)
 80158e8:	20001070 	.word	0x20001070

080158ec <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b084      	sub	sp, #16
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	0002      	movs	r2, r0
 80158f4:	1dfb      	adds	r3, r7, #7
 80158f6:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 80158f8:	2300      	movs	r3, #0
 80158fa:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 80158fc:	4b0d      	ldr	r3, [pc, #52]	; (8015934 <LoRaMacConfirmQueueGetStatus+0x48>)
 80158fe:	691b      	ldr	r3, [r3, #16]
 8015900:	7d1b      	ldrb	r3, [r3, #20]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d010      	beq.n	8015928 <LoRaMacConfirmQueueGetStatus+0x3c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015906:	4b0b      	ldr	r3, [pc, #44]	; (8015934 <LoRaMacConfirmQueueGetStatus+0x48>)
 8015908:	6859      	ldr	r1, [r3, #4]
 801590a:	4b0a      	ldr	r3, [pc, #40]	; (8015934 <LoRaMacConfirmQueueGetStatus+0x48>)
 801590c:	689a      	ldr	r2, [r3, #8]
 801590e:	1dfb      	adds	r3, r7, #7
 8015910:	781b      	ldrb	r3, [r3, #0]
 8015912:	0018      	movs	r0, r3
 8015914:	f7ff fef4 	bl	8015700 <GetElement>
 8015918:	0003      	movs	r3, r0
 801591a:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d002      	beq.n	8015928 <LoRaMacConfirmQueueGetStatus+0x3c>
        {
            return element->Status;
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	785b      	ldrb	r3, [r3, #1]
 8015926:	e000      	b.n	801592a <LoRaMacConfirmQueueGetStatus+0x3e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015928:	2301      	movs	r3, #1
}
 801592a:	0018      	movs	r0, r3
 801592c:	46bd      	mov	sp, r7
 801592e:	b004      	add	sp, #16
 8015930:	bd80      	pop	{r7, pc}
 8015932:	46c0      	nop			; (mov r8, r8)
 8015934:	20001070 	.word	0x20001070

08015938 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b084      	sub	sp, #16
 801593c:	af00      	add	r7, sp, #0
 801593e:	0002      	movs	r2, r0
 8015940:	1dfb      	adds	r3, r7, #7
 8015942:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8015944:	4b14      	ldr	r3, [pc, #80]	; (8015998 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8015946:	685b      	ldr	r3, [r3, #4]
 8015948:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 801594a:	4b13      	ldr	r3, [pc, #76]	; (8015998 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 801594c:	691b      	ldr	r3, [r3, #16]
 801594e:	1dfa      	adds	r2, r7, #7
 8015950:	7812      	ldrb	r2, [r2, #0]
 8015952:	755a      	strb	r2, [r3, #21]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8015954:	4b10      	ldr	r3, [pc, #64]	; (8015998 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8015956:	691b      	ldr	r3, [r3, #16]
 8015958:	7d1b      	ldrb	r3, [r3, #20]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d018      	beq.n	8015990 <LoRaMacConfirmQueueSetStatusCmn+0x58>
    {
        do
        {
            element->Status = status;
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	1dfa      	adds	r2, r7, #7
 8015962:	7812      	ldrb	r2, [r2, #0]
 8015964:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	78db      	ldrb	r3, [r3, #3]
 801596a:	2201      	movs	r2, #1
 801596c:	4053      	eors	r3, r2
 801596e:	b2db      	uxtb	r3, r3
 8015970:	2b00      	cmp	r3, #0
 8015972:	d002      	beq.n	801597a <LoRaMacConfirmQueueSetStatusCmn+0x42>
            {
                element->ReadyToHandle = true;
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	2201      	movs	r2, #1
 8015978:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	0018      	movs	r0, r3
 801597e:	f7ff fea7 	bl	80156d0 <IncreaseBufferPointer>
 8015982:	0003      	movs	r3, r0
 8015984:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8015986:	4b04      	ldr	r3, [pc, #16]	; (8015998 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8015988:	689b      	ldr	r3, [r3, #8]
 801598a:	68fa      	ldr	r2, [r7, #12]
 801598c:	429a      	cmp	r2, r3
 801598e:	d1e6      	bne.n	801595e <LoRaMacConfirmQueueSetStatusCmn+0x26>
    }
}
 8015990:	46c0      	nop			; (mov r8, r8)
 8015992:	46bd      	mov	sp, r7
 8015994:	b004      	add	sp, #16
 8015996:	bd80      	pop	{r7, pc}
 8015998:	20001070 	.word	0x20001070

0801599c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b082      	sub	sp, #8
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	0002      	movs	r2, r0
 80159a4:	1dfb      	adds	r3, r7, #7
 80159a6:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80159a8:	4b08      	ldr	r3, [pc, #32]	; (80159cc <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80159aa:	6859      	ldr	r1, [r3, #4]
 80159ac:	4b07      	ldr	r3, [pc, #28]	; (80159cc <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80159ae:	689a      	ldr	r2, [r3, #8]
 80159b0:	1dfb      	adds	r3, r7, #7
 80159b2:	781b      	ldrb	r3, [r3, #0]
 80159b4:	0018      	movs	r0, r3
 80159b6:	f7ff fea3 	bl	8015700 <GetElement>
 80159ba:	1e03      	subs	r3, r0, #0
 80159bc:	d001      	beq.n	80159c2 <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 80159be:	2301      	movs	r3, #1
 80159c0:	e000      	b.n	80159c4 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 80159c2:	2300      	movs	r3, #0
}
 80159c4:	0018      	movs	r0, r3
 80159c6:	46bd      	mov	sp, r7
 80159c8:	b002      	add	sp, #8
 80159ca:	bd80      	pop	{r7, pc}
 80159cc:	20001070 	.word	0x20001070

080159d0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b084      	sub	sp, #16
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 80159d8:	4b2d      	ldr	r3, [pc, #180]	; (8015a90 <LoRaMacConfirmQueueHandleCb+0xc0>)
 80159da:	691a      	ldr	r2, [r3, #16]
 80159dc:	230e      	movs	r3, #14
 80159de:	18fb      	adds	r3, r7, r3
 80159e0:	7d12      	ldrb	r2, [r2, #20]
 80159e2:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 80159e4:	230d      	movs	r3, #13
 80159e6:	18fb      	adds	r3, r7, r3
 80159e8:	2200      	movs	r2, #0
 80159ea:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80159ec:	230f      	movs	r3, #15
 80159ee:	18fb      	adds	r3, r7, r3
 80159f0:	2200      	movs	r2, #0
 80159f2:	701a      	strb	r2, [r3, #0]
 80159f4:	e03f      	b.n	8015a76 <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80159f6:	4b26      	ldr	r3, [pc, #152]	; (8015a90 <LoRaMacConfirmQueueHandleCb+0xc0>)
 80159f8:	685b      	ldr	r3, [r3, #4]
 80159fa:	781a      	ldrb	r2, [r3, #0]
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8015a00:	4b23      	ldr	r3, [pc, #140]	; (8015a90 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015a02:	685b      	ldr	r3, [r3, #4]
 8015a04:	785a      	ldrb	r2, [r3, #1]
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8015a0a:	4b21      	ldr	r3, [pc, #132]	; (8015a90 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015a0c:	685a      	ldr	r2, [r3, #4]
 8015a0e:	210d      	movs	r1, #13
 8015a10:	187b      	adds	r3, r7, r1
 8015a12:	7892      	ldrb	r2, [r2, #2]
 8015a14:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 8015a16:	187b      	adds	r3, r7, r1
 8015a18:	781b      	ldrb	r3, [r3, #0]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d006      	beq.n	8015a2c <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8015a1e:	4b1c      	ldr	r3, [pc, #112]	; (8015a90 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	689b      	ldr	r3, [r3, #8]
 8015a24:	687a      	ldr	r2, [r7, #4]
 8015a26:	0010      	movs	r0, r2
 8015a28:	4798      	blx	r3
 8015a2a:	e00f      	b.n	8015a4c <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8015a2c:	4b18      	ldr	r3, [pc, #96]	; (8015a90 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015a2e:	685b      	ldr	r3, [r3, #4]
 8015a30:	781a      	ldrb	r2, [r3, #0]
 8015a32:	2108      	movs	r1, #8
 8015a34:	187b      	adds	r3, r7, r1
 8015a36:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8015a38:	4b15      	ldr	r3, [pc, #84]	; (8015a90 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015a3a:	685b      	ldr	r3, [r3, #4]
 8015a3c:	785a      	ldrb	r2, [r3, #1]
 8015a3e:	187b      	adds	r3, r7, r1
 8015a40:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8015a42:	4b13      	ldr	r3, [pc, #76]	; (8015a90 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015a44:	685b      	ldr	r3, [r3, #4]
 8015a46:	78da      	ldrb	r2, [r3, #3]
 8015a48:	187b      	adds	r3, r7, r1
 8015a4a:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8015a4c:	f7ff ff04 	bl	8015858 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8015a50:	230d      	movs	r3, #13
 8015a52:	18fb      	adds	r3, r7, r3
 8015a54:	781b      	ldrb	r3, [r3, #0]
 8015a56:	2201      	movs	r2, #1
 8015a58:	4053      	eors	r3, r2
 8015a5a:	b2db      	uxtb	r3, r3
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d004      	beq.n	8015a6a <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8015a60:	2308      	movs	r3, #8
 8015a62:	18fb      	adds	r3, r7, r3
 8015a64:	0018      	movs	r0, r3
 8015a66:	f7ff fec3 	bl	80157f0 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8015a6a:	210f      	movs	r1, #15
 8015a6c:	187b      	adds	r3, r7, r1
 8015a6e:	781a      	ldrb	r2, [r3, #0]
 8015a70:	187b      	adds	r3, r7, r1
 8015a72:	3201      	adds	r2, #1
 8015a74:	701a      	strb	r2, [r3, #0]
 8015a76:	230f      	movs	r3, #15
 8015a78:	18fa      	adds	r2, r7, r3
 8015a7a:	230e      	movs	r3, #14
 8015a7c:	18fb      	adds	r3, r7, r3
 8015a7e:	7812      	ldrb	r2, [r2, #0]
 8015a80:	781b      	ldrb	r3, [r3, #0]
 8015a82:	429a      	cmp	r2, r3
 8015a84:	d3b7      	bcc.n	80159f6 <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 8015a86:	46c0      	nop			; (mov r8, r8)
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	b004      	add	sp, #16
 8015a8c:	bd80      	pop	{r7, pc}
 8015a8e:	46c0      	nop			; (mov r8, r8)
 8015a90:	20001070 	.word	0x20001070

08015a94 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8015a98:	4b02      	ldr	r3, [pc, #8]	; (8015aa4 <LoRaMacConfirmQueueGetCnt+0x10>)
 8015a9a:	691b      	ldr	r3, [r3, #16]
 8015a9c:	7d1b      	ldrb	r3, [r3, #20]
}
 8015a9e:	0018      	movs	r0, r3
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd80      	pop	{r7, pc}
 8015aa4:	20001070 	.word	0x20001070

08015aa8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8015aac:	4b05      	ldr	r3, [pc, #20]	; (8015ac4 <LoRaMacConfirmQueueIsFull+0x1c>)
 8015aae:	691b      	ldr	r3, [r3, #16]
 8015ab0:	7d1b      	ldrb	r3, [r3, #20]
 8015ab2:	2b04      	cmp	r3, #4
 8015ab4:	d901      	bls.n	8015aba <LoRaMacConfirmQueueIsFull+0x12>
    {
        return true;
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	e000      	b.n	8015abc <LoRaMacConfirmQueueIsFull+0x14>
    }
    else
    {
        return false;
 8015aba:	2300      	movs	r3, #0
    }
}
 8015abc:	0018      	movs	r0, r3
 8015abe:	46bd      	mov	sp, r7
 8015ac0:	bd80      	pop	{r7, pc}
 8015ac2:	46c0      	nop			; (mov r8, r8)
 8015ac4:	20001070 	.word	0x20001070

08015ac8 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8015ac8:	b590      	push	{r4, r7, lr}
 8015aca:	b08f      	sub	sp, #60	; 0x3c
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	60f8      	str	r0, [r7, #12]
 8015ad0:	0008      	movs	r0, r1
 8015ad2:	0011      	movs	r1, r2
 8015ad4:	607b      	str	r3, [r7, #4]
 8015ad6:	230a      	movs	r3, #10
 8015ad8:	18fb      	adds	r3, r7, r3
 8015ada:	1c02      	adds	r2, r0, #0
 8015adc:	801a      	strh	r2, [r3, #0]
 8015ade:	2309      	movs	r3, #9
 8015ae0:	18fb      	adds	r3, r7, r3
 8015ae2:	1c0a      	adds	r2, r1, #0
 8015ae4:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d101      	bne.n	8015af0 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015aec:	230a      	movs	r3, #10
 8015aee:	e0ab      	b.n	8015c48 <PayloadEncrypt+0x180>
    }

    uint8_t bufferIndex = 0;
 8015af0:	2337      	movs	r3, #55	; 0x37
 8015af2:	18fb      	adds	r3, r7, r3
 8015af4:	2200      	movs	r2, #0
 8015af6:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 8015af8:	2334      	movs	r3, #52	; 0x34
 8015afa:	18fb      	adds	r3, r7, r3
 8015afc:	2201      	movs	r2, #1
 8015afe:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 8015b00:	2320      	movs	r3, #32
 8015b02:	18fb      	adds	r3, r7, r3
 8015b04:	0018      	movs	r0, r3
 8015b06:	2310      	movs	r3, #16
 8015b08:	001a      	movs	r2, r3
 8015b0a:	2100      	movs	r1, #0
 8015b0c:	f005 fe14 	bl	801b738 <memset>
    uint8_t aBlock[16] = { 0 };
 8015b10:	2110      	movs	r1, #16
 8015b12:	000c      	movs	r4, r1
 8015b14:	187b      	adds	r3, r7, r1
 8015b16:	0018      	movs	r0, r3
 8015b18:	2310      	movs	r3, #16
 8015b1a:	001a      	movs	r2, r3
 8015b1c:	2100      	movs	r1, #0
 8015b1e:	f005 fe0b 	bl	801b738 <memset>

    aBlock[0] = 0x01;
 8015b22:	0021      	movs	r1, r4
 8015b24:	187b      	adds	r3, r7, r1
 8015b26:	2201      	movs	r2, #1
 8015b28:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 8015b2a:	187b      	adds	r3, r7, r1
 8015b2c:	2240      	movs	r2, #64	; 0x40
 8015b2e:	2008      	movs	r0, #8
 8015b30:	4684      	mov	ip, r0
 8015b32:	44bc      	add	ip, r7
 8015b34:	4462      	add	r2, ip
 8015b36:	7812      	ldrb	r2, [r2, #0]
 8015b38:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	b2da      	uxtb	r2, r3
 8015b3e:	187b      	adds	r3, r7, r1
 8015b40:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	0a1b      	lsrs	r3, r3, #8
 8015b46:	b2da      	uxtb	r2, r3
 8015b48:	187b      	adds	r3, r7, r1
 8015b4a:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	0c1b      	lsrs	r3, r3, #16
 8015b50:	b2da      	uxtb	r2, r3
 8015b52:	187b      	adds	r3, r7, r1
 8015b54:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	0e1b      	lsrs	r3, r3, #24
 8015b5a:	b2da      	uxtb	r2, r3
 8015b5c:	187b      	adds	r3, r7, r1
 8015b5e:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 8015b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b62:	b2da      	uxtb	r2, r3
 8015b64:	187b      	adds	r3, r7, r1
 8015b66:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b6a:	0a1b      	lsrs	r3, r3, #8
 8015b6c:	b2da      	uxtb	r2, r3
 8015b6e:	187b      	adds	r3, r7, r1
 8015b70:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8015b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b74:	0c1b      	lsrs	r3, r3, #16
 8015b76:	b2da      	uxtb	r2, r3
 8015b78:	187b      	adds	r3, r7, r1
 8015b7a:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b7e:	0e1b      	lsrs	r3, r3, #24
 8015b80:	b2da      	uxtb	r2, r3
 8015b82:	187b      	adds	r3, r7, r1
 8015b84:	735a      	strb	r2, [r3, #13]

    while( size > 0 )
 8015b86:	e058      	b.n	8015c3a <PayloadEncrypt+0x172>
    {
        aBlock[15] = ctr & 0xFF;
 8015b88:	2134      	movs	r1, #52	; 0x34
 8015b8a:	187b      	adds	r3, r7, r1
 8015b8c:	881b      	ldrh	r3, [r3, #0]
 8015b8e:	b2da      	uxtb	r2, r3
 8015b90:	2010      	movs	r0, #16
 8015b92:	183b      	adds	r3, r7, r0
 8015b94:	73da      	strb	r2, [r3, #15]
        ctr++;
 8015b96:	187b      	adds	r3, r7, r1
 8015b98:	881a      	ldrh	r2, [r3, #0]
 8015b9a:	187b      	adds	r3, r7, r1
 8015b9c:	3201      	adds	r2, #1
 8015b9e:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8015ba0:	2320      	movs	r3, #32
 8015ba2:	18f9      	adds	r1, r7, r3
 8015ba4:	2309      	movs	r3, #9
 8015ba6:	18fb      	adds	r3, r7, r3
 8015ba8:	781a      	ldrb	r2, [r3, #0]
 8015baa:	1838      	adds	r0, r7, r0
 8015bac:	000b      	movs	r3, r1
 8015bae:	2110      	movs	r1, #16
 8015bb0:	f7f9 fb96 	bl	800f2e0 <SecureElementAesEncrypt>
 8015bb4:	1e03      	subs	r3, r0, #0
 8015bb6:	d001      	beq.n	8015bbc <PayloadEncrypt+0xf4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015bb8:	230f      	movs	r3, #15
 8015bba:	e045      	b.n	8015c48 <PayloadEncrypt+0x180>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015bbc:	2333      	movs	r3, #51	; 0x33
 8015bbe:	18fb      	adds	r3, r7, r3
 8015bc0:	2200      	movs	r2, #0
 8015bc2:	701a      	strb	r2, [r3, #0]
 8015bc4:	e01f      	b.n	8015c06 <PayloadEncrypt+0x13e>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8015bc6:	2037      	movs	r0, #55	; 0x37
 8015bc8:	183b      	adds	r3, r7, r0
 8015bca:	781a      	ldrb	r2, [r3, #0]
 8015bcc:	2433      	movs	r4, #51	; 0x33
 8015bce:	193b      	adds	r3, r7, r4
 8015bd0:	781b      	ldrb	r3, [r3, #0]
 8015bd2:	18d3      	adds	r3, r2, r3
 8015bd4:	001a      	movs	r2, r3
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	189b      	adds	r3, r3, r2
 8015bda:	7819      	ldrb	r1, [r3, #0]
 8015bdc:	193b      	adds	r3, r7, r4
 8015bde:	781b      	ldrb	r3, [r3, #0]
 8015be0:	2220      	movs	r2, #32
 8015be2:	18ba      	adds	r2, r7, r2
 8015be4:	5cd2      	ldrb	r2, [r2, r3]
 8015be6:	183b      	adds	r3, r7, r0
 8015be8:	7818      	ldrb	r0, [r3, #0]
 8015bea:	193b      	adds	r3, r7, r4
 8015bec:	781b      	ldrb	r3, [r3, #0]
 8015bee:	18c3      	adds	r3, r0, r3
 8015bf0:	0018      	movs	r0, r3
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	181b      	adds	r3, r3, r0
 8015bf6:	404a      	eors	r2, r1
 8015bf8:	b2d2      	uxtb	r2, r2
 8015bfa:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015bfc:	193b      	adds	r3, r7, r4
 8015bfe:	781a      	ldrb	r2, [r3, #0]
 8015c00:	193b      	adds	r3, r7, r4
 8015c02:	3201      	adds	r2, #1
 8015c04:	701a      	strb	r2, [r3, #0]
 8015c06:	2333      	movs	r3, #51	; 0x33
 8015c08:	18fb      	adds	r3, r7, r3
 8015c0a:	781a      	ldrb	r2, [r3, #0]
 8015c0c:	230a      	movs	r3, #10
 8015c0e:	18fb      	adds	r3, r7, r3
 8015c10:	881b      	ldrh	r3, [r3, #0]
 8015c12:	b219      	sxth	r1, r3
 8015c14:	2910      	cmp	r1, #16
 8015c16:	dd00      	ble.n	8015c1a <PayloadEncrypt+0x152>
 8015c18:	2310      	movs	r3, #16
 8015c1a:	b21b      	sxth	r3, r3
 8015c1c:	429a      	cmp	r2, r3
 8015c1e:	dbd2      	blt.n	8015bc6 <PayloadEncrypt+0xfe>
        }
        size -= 16;
 8015c20:	210a      	movs	r1, #10
 8015c22:	187b      	adds	r3, r7, r1
 8015c24:	881b      	ldrh	r3, [r3, #0]
 8015c26:	3b10      	subs	r3, #16
 8015c28:	b29a      	uxth	r2, r3
 8015c2a:	187b      	adds	r3, r7, r1
 8015c2c:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 8015c2e:	2237      	movs	r2, #55	; 0x37
 8015c30:	18bb      	adds	r3, r7, r2
 8015c32:	18ba      	adds	r2, r7, r2
 8015c34:	7812      	ldrb	r2, [r2, #0]
 8015c36:	3210      	adds	r2, #16
 8015c38:	701a      	strb	r2, [r3, #0]
    while( size > 0 )
 8015c3a:	230a      	movs	r3, #10
 8015c3c:	18fb      	adds	r3, r7, r3
 8015c3e:	2200      	movs	r2, #0
 8015c40:	5e9b      	ldrsh	r3, [r3, r2]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	dca0      	bgt.n	8015b88 <PayloadEncrypt+0xc0>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015c46:	2300      	movs	r3, #0
}
 8015c48:	0018      	movs	r0, r3
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	b00f      	add	sp, #60	; 0x3c
 8015c4e:	bd90      	pop	{r4, r7, pc}

08015c50 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8015c50:	b5b0      	push	{r4, r5, r7, lr}
 8015c52:	b084      	sub	sp, #16
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	0005      	movs	r5, r0
 8015c58:	000c      	movs	r4, r1
 8015c5a:	0010      	movs	r0, r2
 8015c5c:	0019      	movs	r1, r3
 8015c5e:	1dbb      	adds	r3, r7, #6
 8015c60:	1c2a      	adds	r2, r5, #0
 8015c62:	801a      	strh	r2, [r3, #0]
 8015c64:	1d7b      	adds	r3, r7, #5
 8015c66:	1c22      	adds	r2, r4, #0
 8015c68:	701a      	strb	r2, [r3, #0]
 8015c6a:	1d3b      	adds	r3, r7, #4
 8015c6c:	1c02      	adds	r2, r0, #0
 8015c6e:	701a      	strb	r2, [r3, #0]
 8015c70:	1cfb      	adds	r3, r7, #3
 8015c72:	1c0a      	adds	r2, r1, #0
 8015c74:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 8015c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d101      	bne.n	8015c80 <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015c7c:	230a      	movs	r3, #10
 8015c7e:	e070      	b.n	8015d62 <PrepareB0+0x112>
    }

    b0[0] = 0x49;
 8015c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c82:	2249      	movs	r2, #73	; 0x49
 8015c84:	701a      	strb	r2, [r3, #0]

    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 8015c86:	1d3b      	adds	r3, r7, #4
 8015c88:	781b      	ldrb	r3, [r3, #0]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d01b      	beq.n	8015cc6 <PrepareB0+0x76>
 8015c8e:	1cfb      	adds	r3, r7, #3
 8015c90:	781b      	ldrb	r3, [r3, #0]
 8015c92:	2b01      	cmp	r3, #1
 8015c94:	d117      	bne.n	8015cc6 <PrepareB0+0x76>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink or downlink frame that is being acknowledged
        uint16_t confFCnt = 0;
 8015c96:	210e      	movs	r1, #14
 8015c98:	187b      	adds	r3, r7, r1
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	801a      	strh	r2, [r3, #0]

        confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntList.FCntUp % 65536 );
 8015c9e:	4b33      	ldr	r3, [pc, #204]	; (8015d6c <PrepareB0+0x11c>)
 8015ca0:	685b      	ldr	r3, [r3, #4]
 8015ca2:	68da      	ldr	r2, [r3, #12]
 8015ca4:	187b      	adds	r3, r7, r1
 8015ca6:	801a      	strh	r2, [r3, #0]

        b0[1] = confFCnt & 0xFF;
 8015ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015caa:	3301      	adds	r3, #1
 8015cac:	187a      	adds	r2, r7, r1
 8015cae:	8812      	ldrh	r2, [r2, #0]
 8015cb0:	b2d2      	uxtb	r2, r2
 8015cb2:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 8015cb4:	187b      	adds	r3, r7, r1
 8015cb6:	881b      	ldrh	r3, [r3, #0]
 8015cb8:	0a1b      	lsrs	r3, r3, #8
 8015cba:	b29a      	uxth	r2, r3
 8015cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cbe:	3302      	adds	r3, #2
 8015cc0:	b2d2      	uxtb	r2, r2
 8015cc2:	701a      	strb	r2, [r3, #0]
    {
 8015cc4:	e007      	b.n	8015cd6 <PrepareB0+0x86>
    }
    else
    {
        b0[1] = 0x00;
 8015cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc8:	3301      	adds	r3, #1
 8015cca:	2200      	movs	r2, #0
 8015ccc:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8015cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cd0:	3302      	adds	r3, #2
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8015cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cd8:	3303      	adds	r3, #3
 8015cda:	2200      	movs	r2, #0
 8015cdc:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8015cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce0:	3304      	adds	r3, #4
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8015ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce8:	3305      	adds	r3, #5
 8015cea:	1cfa      	adds	r2, r7, #3
 8015cec:	7812      	ldrb	r2, [r2, #0]
 8015cee:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8015cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cf2:	3306      	adds	r3, #6
 8015cf4:	6a3a      	ldr	r2, [r7, #32]
 8015cf6:	b2d2      	uxtb	r2, r2
 8015cf8:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8015cfa:	6a3b      	ldr	r3, [r7, #32]
 8015cfc:	0a1a      	lsrs	r2, r3, #8
 8015cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d00:	3307      	adds	r3, #7
 8015d02:	b2d2      	uxtb	r2, r2
 8015d04:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8015d06:	6a3b      	ldr	r3, [r7, #32]
 8015d08:	0c1a      	lsrs	r2, r3, #16
 8015d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d0c:	3308      	adds	r3, #8
 8015d0e:	b2d2      	uxtb	r2, r2
 8015d10:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8015d12:	6a3b      	ldr	r3, [r7, #32]
 8015d14:	0e1a      	lsrs	r2, r3, #24
 8015d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d18:	3309      	adds	r3, #9
 8015d1a:	b2d2      	uxtb	r2, r2
 8015d1c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8015d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d20:	330a      	adds	r3, #10
 8015d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d24:	b2d2      	uxtb	r2, r2
 8015d26:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8015d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d2a:	0a1a      	lsrs	r2, r3, #8
 8015d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d2e:	330b      	adds	r3, #11
 8015d30:	b2d2      	uxtb	r2, r2
 8015d32:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8015d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d36:	0c1a      	lsrs	r2, r3, #16
 8015d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d3a:	330c      	adds	r3, #12
 8015d3c:	b2d2      	uxtb	r2, r2
 8015d3e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8015d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d42:	0e1a      	lsrs	r2, r3, #24
 8015d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d46:	330d      	adds	r3, #13
 8015d48:	b2d2      	uxtb	r2, r2
 8015d4a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8015d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d4e:	330e      	adds	r3, #14
 8015d50:	2200      	movs	r2, #0
 8015d52:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8015d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d56:	330f      	adds	r3, #15
 8015d58:	1dba      	adds	r2, r7, #6
 8015d5a:	8812      	ldrh	r2, [r2, #0]
 8015d5c:	b2d2      	uxtb	r2, r2
 8015d5e:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015d60:	2300      	movs	r3, #0
}
 8015d62:	0018      	movs	r0, r3
 8015d64:	46bd      	mov	sp, r7
 8015d66:	b004      	add	sp, #16
 8015d68:	bdb0      	pop	{r4, r5, r7, pc}
 8015d6a:	46c0      	nop			; (mov r8, r8)
 8015d6c:	20001084 	.word	0x20001084

08015d70 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8015d70:	b5b0      	push	{r4, r5, r7, lr}
 8015d72:	b08a      	sub	sp, #40	; 0x28
 8015d74:	af04      	add	r7, sp, #16
 8015d76:	6078      	str	r0, [r7, #4]
 8015d78:	000c      	movs	r4, r1
 8015d7a:	0010      	movs	r0, r2
 8015d7c:	0019      	movs	r1, r3
 8015d7e:	1cbb      	adds	r3, r7, #2
 8015d80:	1c22      	adds	r2, r4, #0
 8015d82:	801a      	strh	r2, [r3, #0]
 8015d84:	1c7b      	adds	r3, r7, #1
 8015d86:	1c02      	adds	r2, r0, #0
 8015d88:	701a      	strb	r2, [r3, #0]
 8015d8a:	003b      	movs	r3, r7
 8015d8c:	1c0a      	adds	r2, r1, #0
 8015d8e:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d002      	beq.n	8015d9c <ComputeCmacB0+0x2c>
 8015d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d101      	bne.n	8015da0 <ComputeCmacB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015d9c:	230a      	movs	r3, #10
 8015d9e:	e02a      	b.n	8015df6 <ComputeCmacB0+0x86>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015da0:	1cbb      	adds	r3, r7, #2
 8015da2:	881a      	ldrh	r2, [r3, #0]
 8015da4:	2380      	movs	r3, #128	; 0x80
 8015da6:	005b      	lsls	r3, r3, #1
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d901      	bls.n	8015db0 <ComputeCmacB0+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015dac:	230e      	movs	r3, #14
 8015dae:	e022      	b.n	8015df6 <ComputeCmacB0+0x86>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015db0:	2328      	movs	r3, #40	; 0x28
 8015db2:	18fb      	adds	r3, r7, r3
 8015db4:	781c      	ldrb	r4, [r3, #0]
 8015db6:	003b      	movs	r3, r7
 8015db8:	781a      	ldrb	r2, [r3, #0]
 8015dba:	1c7b      	adds	r3, r7, #1
 8015dbc:	7819      	ldrb	r1, [r3, #0]
 8015dbe:	1cbb      	adds	r3, r7, #2
 8015dc0:	8818      	ldrh	r0, [r3, #0]
 8015dc2:	2508      	movs	r5, #8
 8015dc4:	197b      	adds	r3, r7, r5
 8015dc6:	9302      	str	r3, [sp, #8]
 8015dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dca:	9301      	str	r3, [sp, #4]
 8015dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dce:	9300      	str	r3, [sp, #0]
 8015dd0:	0023      	movs	r3, r4
 8015dd2:	f7ff ff3d 	bl	8015c50 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8015dd6:	1c7b      	adds	r3, r7, #1
 8015dd8:	781c      	ldrb	r4, [r3, #0]
 8015dda:	1cbb      	adds	r3, r7, #2
 8015ddc:	881a      	ldrh	r2, [r3, #0]
 8015dde:	6879      	ldr	r1, [r7, #4]
 8015de0:	1978      	adds	r0, r7, r5
 8015de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015de4:	9300      	str	r3, [sp, #0]
 8015de6:	0023      	movs	r3, r4
 8015de8:	f7f9 fa16 	bl	800f218 <SecureElementComputeAesCmac>
 8015dec:	1e03      	subs	r3, r0, #0
 8015dee:	d001      	beq.n	8015df4 <ComputeCmacB0+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015df0:	230f      	movs	r3, #15
 8015df2:	e000      	b.n	8015df6 <ComputeCmacB0+0x86>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015df4:	2300      	movs	r3, #0
}
 8015df6:	0018      	movs	r0, r3
 8015df8:	46bd      	mov	sp, r7
 8015dfa:	b006      	add	sp, #24
 8015dfc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015e00 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8015e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e02:	b0cd      	sub	sp, #308	; 0x134
 8015e04:	af04      	add	r7, sp, #16
 8015e06:	6078      	str	r0, [r7, #4]
 8015e08:	000c      	movs	r4, r1
 8015e0a:	0010      	movs	r0, r2
 8015e0c:	0019      	movs	r1, r3
 8015e0e:	4b52      	ldr	r3, [pc, #328]	; (8015f58 <VerifyCmacB0+0x158>)
 8015e10:	2290      	movs	r2, #144	; 0x90
 8015e12:	0052      	lsls	r2, r2, #1
 8015e14:	4694      	mov	ip, r2
 8015e16:	44bc      	add	ip, r7
 8015e18:	4463      	add	r3, ip
 8015e1a:	1c22      	adds	r2, r4, #0
 8015e1c:	801a      	strh	r2, [r3, #0]
 8015e1e:	4b4f      	ldr	r3, [pc, #316]	; (8015f5c <VerifyCmacB0+0x15c>)
 8015e20:	2290      	movs	r2, #144	; 0x90
 8015e22:	0052      	lsls	r2, r2, #1
 8015e24:	4694      	mov	ip, r2
 8015e26:	44bc      	add	ip, r7
 8015e28:	4463      	add	r3, ip
 8015e2a:	1c02      	adds	r2, r0, #0
 8015e2c:	701a      	strb	r2, [r3, #0]
 8015e2e:	4b4c      	ldr	r3, [pc, #304]	; (8015f60 <VerifyCmacB0+0x160>)
 8015e30:	2290      	movs	r2, #144	; 0x90
 8015e32:	0052      	lsls	r2, r2, #1
 8015e34:	4694      	mov	ip, r2
 8015e36:	44bc      	add	ip, r7
 8015e38:	4463      	add	r3, ip
 8015e3a:	1c0a      	adds	r2, r1, #0
 8015e3c:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d101      	bne.n	8015e48 <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015e44:	230a      	movs	r3, #10
 8015e46:	e083      	b.n	8015f50 <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015e48:	4b43      	ldr	r3, [pc, #268]	; (8015f58 <VerifyCmacB0+0x158>)
 8015e4a:	2290      	movs	r2, #144	; 0x90
 8015e4c:	0052      	lsls	r2, r2, #1
 8015e4e:	4694      	mov	ip, r2
 8015e50:	44bc      	add	ip, r7
 8015e52:	4463      	add	r3, ip
 8015e54:	881a      	ldrh	r2, [r3, #0]
 8015e56:	2380      	movs	r3, #128	; 0x80
 8015e58:	005b      	lsls	r3, r3, #1
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d901      	bls.n	8015e62 <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015e5e:	230e      	movs	r3, #14
 8015e60:	e076      	b.n	8015f50 <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8015e62:	2388      	movs	r3, #136	; 0x88
 8015e64:	005a      	lsls	r2, r3, #1
 8015e66:	250c      	movs	r5, #12
 8015e68:	197b      	adds	r3, r7, r5
 8015e6a:	2100      	movs	r1, #0
 8015e6c:	0018      	movs	r0, r3
 8015e6e:	f005 fc1b 	bl	801b6a8 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015e72:	2398      	movs	r3, #152	; 0x98
 8015e74:	005b      	lsls	r3, r3, #1
 8015e76:	2208      	movs	r2, #8
 8015e78:	4694      	mov	ip, r2
 8015e7a:	44bc      	add	ip, r7
 8015e7c:	4463      	add	r3, ip
 8015e7e:	781c      	ldrb	r4, [r3, #0]
 8015e80:	4b37      	ldr	r3, [pc, #220]	; (8015f60 <VerifyCmacB0+0x160>)
 8015e82:	2290      	movs	r2, #144	; 0x90
 8015e84:	0052      	lsls	r2, r2, #1
 8015e86:	4694      	mov	ip, r2
 8015e88:	44bc      	add	ip, r7
 8015e8a:	4463      	add	r3, ip
 8015e8c:	781a      	ldrb	r2, [r3, #0]
 8015e8e:	4b33      	ldr	r3, [pc, #204]	; (8015f5c <VerifyCmacB0+0x15c>)
 8015e90:	2190      	movs	r1, #144	; 0x90
 8015e92:	0049      	lsls	r1, r1, #1
 8015e94:	468c      	mov	ip, r1
 8015e96:	44bc      	add	ip, r7
 8015e98:	4463      	add	r3, ip
 8015e9a:	7819      	ldrb	r1, [r3, #0]
 8015e9c:	4b2e      	ldr	r3, [pc, #184]	; (8015f58 <VerifyCmacB0+0x158>)
 8015e9e:	2090      	movs	r0, #144	; 0x90
 8015ea0:	0040      	lsls	r0, r0, #1
 8015ea2:	4684      	mov	ip, r0
 8015ea4:	44bc      	add	ip, r7
 8015ea6:	4463      	add	r3, ip
 8015ea8:	8818      	ldrh	r0, [r3, #0]
 8015eaa:	197b      	adds	r3, r7, r5
 8015eac:	9302      	str	r3, [sp, #8]
 8015eae:	239c      	movs	r3, #156	; 0x9c
 8015eb0:	005b      	lsls	r3, r3, #1
 8015eb2:	2608      	movs	r6, #8
 8015eb4:	46b4      	mov	ip, r6
 8015eb6:	44bc      	add	ip, r7
 8015eb8:	4463      	add	r3, ip
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	9301      	str	r3, [sp, #4]
 8015ebe:	239a      	movs	r3, #154	; 0x9a
 8015ec0:	005b      	lsls	r3, r3, #1
 8015ec2:	2608      	movs	r6, #8
 8015ec4:	46b4      	mov	ip, r6
 8015ec6:	44bc      	add	ip, r7
 8015ec8:	4463      	add	r3, ip
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	9300      	str	r3, [sp, #0]
 8015ece:	0023      	movs	r3, r4
 8015ed0:	f7ff febe 	bl	8015c50 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8015ed4:	197b      	adds	r3, r7, r5
 8015ed6:	3310      	adds	r3, #16
 8015ed8:	4a1f      	ldr	r2, [pc, #124]	; (8015f58 <VerifyCmacB0+0x158>)
 8015eda:	2190      	movs	r1, #144	; 0x90
 8015edc:	0049      	lsls	r1, r1, #1
 8015ede:	468c      	mov	ip, r1
 8015ee0:	44bc      	add	ip, r7
 8015ee2:	4462      	add	r2, ip
 8015ee4:	8812      	ldrh	r2, [r2, #0]
 8015ee6:	6879      	ldr	r1, [r7, #4]
 8015ee8:	0018      	movs	r0, r3
 8015eea:	f005 fba1 	bl	801b630 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8015eee:	2620      	movs	r6, #32
 8015ef0:	36ff      	adds	r6, #255	; 0xff
 8015ef2:	19bb      	adds	r3, r7, r6
 8015ef4:	2206      	movs	r2, #6
 8015ef6:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8015ef8:	4b17      	ldr	r3, [pc, #92]	; (8015f58 <VerifyCmacB0+0x158>)
 8015efa:	2290      	movs	r2, #144	; 0x90
 8015efc:	0052      	lsls	r2, r2, #1
 8015efe:	4694      	mov	ip, r2
 8015f00:	44bc      	add	ip, r7
 8015f02:	4463      	add	r3, ip
 8015f04:	881b      	ldrh	r3, [r3, #0]
 8015f06:	3310      	adds	r3, #16
 8015f08:	b299      	uxth	r1, r3
 8015f0a:	19bc      	adds	r4, r7, r6
 8015f0c:	4b13      	ldr	r3, [pc, #76]	; (8015f5c <VerifyCmacB0+0x15c>)
 8015f0e:	2290      	movs	r2, #144	; 0x90
 8015f10:	0052      	lsls	r2, r2, #1
 8015f12:	4694      	mov	ip, r2
 8015f14:	44bc      	add	ip, r7
 8015f16:	4463      	add	r3, ip
 8015f18:	781b      	ldrb	r3, [r3, #0]
 8015f1a:	229e      	movs	r2, #158	; 0x9e
 8015f1c:	0052      	lsls	r2, r2, #1
 8015f1e:	2008      	movs	r0, #8
 8015f20:	4684      	mov	ip, r0
 8015f22:	44bc      	add	ip, r7
 8015f24:	4462      	add	r2, ip
 8015f26:	6812      	ldr	r2, [r2, #0]
 8015f28:	1978      	adds	r0, r7, r5
 8015f2a:	f7f9 f996 	bl	800f25a <SecureElementVerifyAesCmac>
 8015f2e:	0003      	movs	r3, r0
 8015f30:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8015f32:	19bb      	adds	r3, r7, r6
 8015f34:	781b      	ldrb	r3, [r3, #0]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d101      	bne.n	8015f3e <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	e008      	b.n	8015f50 <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8015f3e:	2320      	movs	r3, #32
 8015f40:	33ff      	adds	r3, #255	; 0xff
 8015f42:	18fb      	adds	r3, r7, r3
 8015f44:	781b      	ldrb	r3, [r3, #0]
 8015f46:	2b01      	cmp	r3, #1
 8015f48:	d101      	bne.n	8015f4e <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8015f4a:	2301      	movs	r3, #1
 8015f4c:	e000      	b.n	8015f50 <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015f4e:	230f      	movs	r3, #15
}
 8015f50:	0018      	movs	r0, r3
 8015f52:	46bd      	mov	sp, r7
 8015f54:	b049      	add	sp, #292	; 0x124
 8015f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f58:	fffffee2 	.word	0xfffffee2
 8015f5c:	fffffee1 	.word	0xfffffee1
 8015f60:	fffffee0 	.word	0xfffffee0

08015f64 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b084      	sub	sp, #16
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	0002      	movs	r2, r0
 8015f6c:	6039      	str	r1, [r7, #0]
 8015f6e:	1dfb      	adds	r3, r7, #7
 8015f70:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015f72:	230f      	movs	r3, #15
 8015f74:	18fb      	adds	r3, r7, r3
 8015f76:	2200      	movs	r2, #0
 8015f78:	701a      	strb	r2, [r3, #0]
 8015f7a:	e019      	b.n	8015fb0 <GetKeyAddrItem+0x4c>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8015f7c:	230f      	movs	r3, #15
 8015f7e:	18fb      	adds	r3, r7, r3
 8015f80:	781a      	ldrb	r2, [r3, #0]
 8015f82:	4b10      	ldr	r3, [pc, #64]	; (8015fc4 <GetKeyAddrItem+0x60>)
 8015f84:	0092      	lsls	r2, r2, #2
 8015f86:	5cd3      	ldrb	r3, [r2, r3]
 8015f88:	1dfa      	adds	r2, r7, #7
 8015f8a:	7812      	ldrb	r2, [r2, #0]
 8015f8c:	429a      	cmp	r2, r3
 8015f8e:	d109      	bne.n	8015fa4 <GetKeyAddrItem+0x40>
        {
            *item = &( KeyAddrList[i] );
 8015f90:	230f      	movs	r3, #15
 8015f92:	18fb      	adds	r3, r7, r3
 8015f94:	781b      	ldrb	r3, [r3, #0]
 8015f96:	009a      	lsls	r2, r3, #2
 8015f98:	4b0a      	ldr	r3, [pc, #40]	; (8015fc4 <GetKeyAddrItem+0x60>)
 8015f9a:	18d2      	adds	r2, r2, r3
 8015f9c:	683b      	ldr	r3, [r7, #0]
 8015f9e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	e00b      	b.n	8015fbc <GetKeyAddrItem+0x58>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015fa4:	210f      	movs	r1, #15
 8015fa6:	187b      	adds	r3, r7, r1
 8015fa8:	781a      	ldrb	r2, [r3, #0]
 8015faa:	187b      	adds	r3, r7, r1
 8015fac:	3201      	adds	r2, #1
 8015fae:	701a      	strb	r2, [r3, #0]
 8015fb0:	230f      	movs	r3, #15
 8015fb2:	18fb      	adds	r3, r7, r3
 8015fb4:	781b      	ldrb	r3, [r3, #0]
 8015fb6:	2b04      	cmp	r3, #4
 8015fb8:	d9e0      	bls.n	8015f7c <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8015fba:	230c      	movs	r3, #12
}
 8015fbc:	0018      	movs	r0, r3
 8015fbe:	46bd      	mov	sp, r7
 8015fc0:	b004      	add	sp, #16
 8015fc2:	bd80      	pop	{r7, pc}
 8015fc4:	20000074 	.word	0x20000074

08015fc8 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 8015fc8:	b590      	push	{r4, r7, lr}
 8015fca:	b089      	sub	sp, #36	; 0x24
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	60b9      	str	r1, [r7, #8]
 8015fd0:	607a      	str	r2, [r7, #4]
 8015fd2:	603b      	str	r3, [r7, #0]
 8015fd4:	230f      	movs	r3, #15
 8015fd6:	18fb      	adds	r3, r7, r3
 8015fd8:	1c02      	adds	r2, r0, #0
 8015fda:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 8015fdc:	68bb      	ldr	r3, [r7, #8]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d005      	beq.n	8015fee <DeriveSessionKey10x+0x26>
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d002      	beq.n	8015fee <DeriveSessionKey10x+0x26>
 8015fe8:	683b      	ldr	r3, [r7, #0]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d101      	bne.n	8015ff2 <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015fee:	230a      	movs	r3, #10
 8015ff0:	e043      	b.n	801607a <DeriveSessionKey10x+0xb2>
    }

    uint8_t compBase[16] = { 0 };
 8015ff2:	2310      	movs	r3, #16
 8015ff4:	18fb      	adds	r3, r7, r3
 8015ff6:	0018      	movs	r0, r3
 8015ff8:	2310      	movs	r3, #16
 8015ffa:	001a      	movs	r2, r3
 8015ffc:	2100      	movs	r1, #0
 8015ffe:	f005 fb9b 	bl	801b738 <memset>

    switch( keyID )
 8016002:	230f      	movs	r3, #15
 8016004:	18fb      	adds	r3, r7, r3
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	2b05      	cmp	r3, #5
 801600a:	db0e      	blt.n	801602a <DeriveSessionKey10x+0x62>
 801600c:	2b07      	cmp	r3, #7
 801600e:	dd02      	ble.n	8016016 <DeriveSessionKey10x+0x4e>
 8016010:	2b08      	cmp	r3, #8
 8016012:	d005      	beq.n	8016020 <DeriveSessionKey10x+0x58>
 8016014:	e009      	b.n	801602a <DeriveSessionKey10x+0x62>
    {
        case F_NWK_S_INT_KEY:
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
            compBase[0] = 0x01;
 8016016:	2310      	movs	r3, #16
 8016018:	18fb      	adds	r3, r7, r3
 801601a:	2201      	movs	r2, #1
 801601c:	701a      	strb	r2, [r3, #0]
            break;
 801601e:	e006      	b.n	801602e <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8016020:	2310      	movs	r3, #16
 8016022:	18fb      	adds	r3, r7, r3
 8016024:	2202      	movs	r2, #2
 8016026:	701a      	strb	r2, [r3, #0]
            break;
 8016028:	e001      	b.n	801602e <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801602a:	230b      	movs	r3, #11
 801602c:	e025      	b.n	801607a <DeriveSessionKey10x+0xb2>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 801602e:	2410      	movs	r4, #16
 8016030:	193b      	adds	r3, r7, r4
 8016032:	3301      	adds	r3, #1
 8016034:	68b9      	ldr	r1, [r7, #8]
 8016036:	2203      	movs	r2, #3
 8016038:	0018      	movs	r0, r3
 801603a:	f005 faf9 	bl	801b630 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 801603e:	193b      	adds	r3, r7, r4
 8016040:	3304      	adds	r3, #4
 8016042:	6879      	ldr	r1, [r7, #4]
 8016044:	2203      	movs	r2, #3
 8016046:	0018      	movs	r0, r3
 8016048:	f005 faf2 	bl	801b630 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 801604c:	193b      	adds	r3, r7, r4
 801604e:	3307      	adds	r3, #7
 8016050:	6839      	ldr	r1, [r7, #0]
 8016052:	2202      	movs	r2, #2
 8016054:	0018      	movs	r0, r3
 8016056:	f005 faeb 	bl	801b630 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 801605a:	4b0a      	ldr	r3, [pc, #40]	; (8016084 <DeriveSessionKey10x+0xbc>)
 801605c:	685b      	ldr	r3, [r3, #4]
 801605e:	220f      	movs	r2, #15
 8016060:	18ba      	adds	r2, r7, r2
 8016062:	7812      	ldrb	r2, [r2, #0]
 8016064:	1939      	adds	r1, r7, r4
 8016066:	6818      	ldr	r0, [r3, #0]
 8016068:	0013      	movs	r3, r2
 801606a:	2202      	movs	r2, #2
 801606c:	f7f9 f9a2 	bl	800f3b4 <SecureElementDeriveAndStoreKey>
 8016070:	1e03      	subs	r3, r0, #0
 8016072:	d001      	beq.n	8016078 <DeriveSessionKey10x+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016074:	230f      	movs	r3, #15
 8016076:	e000      	b.n	801607a <DeriveSessionKey10x+0xb2>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016078:	2300      	movs	r3, #0
}
 801607a:	0018      	movs	r0, r3
 801607c:	46bd      	mov	sp, r7
 801607e:	b009      	add	sp, #36	; 0x24
 8016080:	bd90      	pop	{r4, r7, pc}
 8016082:	46c0      	nop			; (mov r8, r8)
 8016084:	20001084 	.word	0x20001084

08016088 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b082      	sub	sp, #8
 801608c:	af00      	add	r7, sp, #0
 801608e:	0002      	movs	r2, r0
 8016090:	6039      	str	r1, [r7, #0]
 8016092:	1dfb      	adds	r3, r7, #7
 8016094:	701a      	strb	r2, [r3, #0]
    if( lastDown == NULL )
 8016096:	683b      	ldr	r3, [r7, #0]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d101      	bne.n	80160a0 <GetLastFcntDown+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801609c:	230a      	movs	r3, #10
 801609e:	e047      	b.n	8016130 <GetLastFcntDown+0xa8>
    }
    switch( fCntID )
 80160a0:	1dfb      	adds	r3, r7, #7
 80160a2:	781b      	ldrb	r3, [r3, #0]
 80160a4:	2b07      	cmp	r3, #7
 80160a6:	d840      	bhi.n	801612a <GetLastFcntDown+0xa2>
 80160a8:	009a      	lsls	r2, r3, #2
 80160aa:	4b23      	ldr	r3, [pc, #140]	; (8016138 <GetLastFcntDown+0xb0>)
 80160ac:	18d3      	adds	r3, r2, r3
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 80160b2:	4b22      	ldr	r3, [pc, #136]	; (801613c <GetLastFcntDown+0xb4>)
 80160b4:	685b      	ldr	r3, [r3, #4]
 80160b6:	691a      	ldr	r2, [r3, #16]
 80160b8:	683b      	ldr	r3, [r7, #0]
 80160ba:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 80160bc:	4b1f      	ldr	r3, [pc, #124]	; (801613c <GetLastFcntDown+0xb4>)
 80160be:	685a      	ldr	r2, [r3, #4]
 80160c0:	4b1e      	ldr	r3, [pc, #120]	; (801613c <GetLastFcntDown+0xb4>)
 80160c2:	685b      	ldr	r3, [r3, #4]
 80160c4:	3210      	adds	r2, #16
 80160c6:	631a      	str	r2, [r3, #48]	; 0x30
            break;
 80160c8:	e031      	b.n	801612e <GetLastFcntDown+0xa6>
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 80160ca:	4b1c      	ldr	r3, [pc, #112]	; (801613c <GetLastFcntDown+0xb4>)
 80160cc:	685b      	ldr	r3, [r3, #4]
 80160ce:	695a      	ldr	r2, [r3, #20]
 80160d0:	683b      	ldr	r3, [r7, #0]
 80160d2:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 80160d4:	4b19      	ldr	r3, [pc, #100]	; (801613c <GetLastFcntDown+0xb4>)
 80160d6:	685a      	ldr	r2, [r3, #4]
 80160d8:	4b18      	ldr	r3, [pc, #96]	; (801613c <GetLastFcntDown+0xb4>)
 80160da:	685b      	ldr	r3, [r3, #4]
 80160dc:	3214      	adds	r2, #20
 80160de:	631a      	str	r2, [r3, #48]	; 0x30
            break;
 80160e0:	e025      	b.n	801612e <GetLastFcntDown+0xa6>
        case FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 80160e2:	4b16      	ldr	r3, [pc, #88]	; (801613c <GetLastFcntDown+0xb4>)
 80160e4:	685b      	ldr	r3, [r3, #4]
 80160e6:	699a      	ldr	r2, [r3, #24]
 80160e8:	683b      	ldr	r3, [r7, #0]
 80160ea:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 80160ec:	4b13      	ldr	r3, [pc, #76]	; (801613c <GetLastFcntDown+0xb4>)
 80160ee:	685a      	ldr	r2, [r3, #4]
 80160f0:	4b12      	ldr	r3, [pc, #72]	; (801613c <GetLastFcntDown+0xb4>)
 80160f2:	685b      	ldr	r3, [r3, #4]
 80160f4:	3218      	adds	r2, #24
 80160f6:	631a      	str	r2, [r3, #48]	; 0x30
            break;
 80160f8:	e019      	b.n	801612e <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 80160fa:	4b10      	ldr	r3, [pc, #64]	; (801613c <GetLastFcntDown+0xb4>)
 80160fc:	685b      	ldr	r3, [r3, #4]
 80160fe:	69da      	ldr	r2, [r3, #28]
 8016100:	683b      	ldr	r3, [r7, #0]
 8016102:	601a      	str	r2, [r3, #0]
            break;
 8016104:	e013      	b.n	801612e <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_1:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 8016106:	4b0d      	ldr	r3, [pc, #52]	; (801613c <GetLastFcntDown+0xb4>)
 8016108:	685b      	ldr	r3, [r3, #4]
 801610a:	6a1a      	ldr	r2, [r3, #32]
 801610c:	683b      	ldr	r3, [r7, #0]
 801610e:	601a      	str	r2, [r3, #0]
            break;
 8016110:	e00d      	b.n	801612e <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_2:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 8016112:	4b0a      	ldr	r3, [pc, #40]	; (801613c <GetLastFcntDown+0xb4>)
 8016114:	685b      	ldr	r3, [r3, #4]
 8016116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016118:	683b      	ldr	r3, [r7, #0]
 801611a:	601a      	str	r2, [r3, #0]
            break;
 801611c:	e007      	b.n	801612e <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 801611e:	4b07      	ldr	r3, [pc, #28]	; (801613c <GetLastFcntDown+0xb4>)
 8016120:	685b      	ldr	r3, [r3, #4]
 8016122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016124:	683b      	ldr	r3, [r7, #0]
 8016126:	601a      	str	r2, [r3, #0]
            break;
 8016128:	e001      	b.n	801612e <GetLastFcntDown+0xa6>
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 801612a:	2305      	movs	r3, #5
 801612c:	e000      	b.n	8016130 <GetLastFcntDown+0xa8>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801612e:	2300      	movs	r3, #0
}
 8016130:	0018      	movs	r0, r3
 8016132:	46bd      	mov	sp, r7
 8016134:	b002      	add	sp, #8
 8016136:	bd80      	pop	{r7, pc}
 8016138:	0801d220 	.word	0x0801d220
 801613c:	20001084 	.word	0x20001084

08016140 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b084      	sub	sp, #16
 8016144:	af00      	add	r7, sp, #0
 8016146:	0002      	movs	r2, r0
 8016148:	6039      	str	r1, [r7, #0]
 801614a:	1dfb      	adds	r3, r7, #7
 801614c:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 801614e:	2300      	movs	r3, #0
 8016150:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8016152:	230c      	movs	r3, #12
 8016154:	18fa      	adds	r2, r7, r3
 8016156:	1dfb      	adds	r3, r7, #7
 8016158:	781b      	ldrb	r3, [r3, #0]
 801615a:	0011      	movs	r1, r2
 801615c:	0018      	movs	r0, r3
 801615e:	f7ff ff93 	bl	8016088 <GetLastFcntDown>
 8016162:	1e03      	subs	r3, r0, #0
 8016164:	d001      	beq.n	801616a <CheckFCntDown+0x2a>
    {
        return false;
 8016166:	2300      	movs	r3, #0
 8016168:	e009      	b.n	801617e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	683a      	ldr	r2, [r7, #0]
 801616e:	429a      	cmp	r2, r3
 8016170:	d802      	bhi.n	8016178 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8016172:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8016174:	3301      	adds	r3, #1
 8016176:	d101      	bne.n	801617c <CheckFCntDown+0x3c>
    {
        return true;
 8016178:	2301      	movs	r3, #1
 801617a:	e000      	b.n	801617e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 801617c:	2300      	movs	r3, #0
    }
}
 801617e:	0018      	movs	r0, r3
 8016180:	46bd      	mov	sp, r7
 8016182:	b004      	add	sp, #16
 8016184:	bd80      	pop	{r7, pc}
	...

08016188 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b082      	sub	sp, #8
 801618c:	af00      	add	r7, sp, #0
 801618e:	0002      	movs	r2, r0
 8016190:	6039      	str	r1, [r7, #0]
 8016192:	1dfb      	adds	r3, r7, #7
 8016194:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 8016196:	1dfb      	adds	r3, r7, #7
 8016198:	781b      	ldrb	r3, [r3, #0]
 801619a:	2b07      	cmp	r3, #7
 801619c:	d827      	bhi.n	80161ee <UpdateFCntDown+0x66>
 801619e:	009a      	lsls	r2, r3, #2
 80161a0:	4b17      	ldr	r3, [pc, #92]	; (8016200 <UpdateFCntDown+0x78>)
 80161a2:	18d3      	adds	r3, r2, r3
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 80161a8:	4b16      	ldr	r3, [pc, #88]	; (8016204 <UpdateFCntDown+0x7c>)
 80161aa:	685b      	ldr	r3, [r3, #4]
 80161ac:	683a      	ldr	r2, [r7, #0]
 80161ae:	611a      	str	r2, [r3, #16]
            break;
 80161b0:	e01e      	b.n	80161f0 <UpdateFCntDown+0x68>
        case A_FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 80161b2:	4b14      	ldr	r3, [pc, #80]	; (8016204 <UpdateFCntDown+0x7c>)
 80161b4:	685b      	ldr	r3, [r3, #4]
 80161b6:	683a      	ldr	r2, [r7, #0]
 80161b8:	615a      	str	r2, [r3, #20]
            break;
 80161ba:	e019      	b.n	80161f0 <UpdateFCntDown+0x68>
        case FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 80161bc:	4b11      	ldr	r3, [pc, #68]	; (8016204 <UpdateFCntDown+0x7c>)
 80161be:	685b      	ldr	r3, [r3, #4]
 80161c0:	683a      	ldr	r2, [r7, #0]
 80161c2:	619a      	str	r2, [r3, #24]
            break;
 80161c4:	e014      	b.n	80161f0 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_0:
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 80161c6:	4b0f      	ldr	r3, [pc, #60]	; (8016204 <UpdateFCntDown+0x7c>)
 80161c8:	685b      	ldr	r3, [r3, #4]
 80161ca:	683a      	ldr	r2, [r7, #0]
 80161cc:	61da      	str	r2, [r3, #28]
            break;
 80161ce:	e00f      	b.n	80161f0 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_1:
            CryptoCtx.NvmCtx->FCntList.McFCntDown1 = currentDown;
 80161d0:	4b0c      	ldr	r3, [pc, #48]	; (8016204 <UpdateFCntDown+0x7c>)
 80161d2:	685b      	ldr	r3, [r3, #4]
 80161d4:	683a      	ldr	r2, [r7, #0]
 80161d6:	621a      	str	r2, [r3, #32]
            break;
 80161d8:	e00a      	b.n	80161f0 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_2:
            CryptoCtx.NvmCtx->FCntList.McFCntDown2 = currentDown;
 80161da:	4b0a      	ldr	r3, [pc, #40]	; (8016204 <UpdateFCntDown+0x7c>)
 80161dc:	685b      	ldr	r3, [r3, #4]
 80161de:	683a      	ldr	r2, [r7, #0]
 80161e0:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 80161e2:	e005      	b.n	80161f0 <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 80161e4:	4b07      	ldr	r3, [pc, #28]	; (8016204 <UpdateFCntDown+0x7c>)
 80161e6:	685b      	ldr	r3, [r3, #4]
 80161e8:	683a      	ldr	r2, [r7, #0]
 80161ea:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 80161ec:	e000      	b.n	80161f0 <UpdateFCntDown+0x68>
        default:
            break;
 80161ee:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80161f0:	4b04      	ldr	r3, [pc, #16]	; (8016204 <UpdateFCntDown+0x7c>)
 80161f2:	689b      	ldr	r3, [r3, #8]
 80161f4:	4798      	blx	r3
}
 80161f6:	46c0      	nop			; (mov r8, r8)
 80161f8:	46bd      	mov	sp, r7
 80161fa:	b002      	add	sp, #8
 80161fc:	bd80      	pop	{r7, pc}
 80161fe:	46c0      	nop			; (mov r8, r8)
 8016200:	0801d240 	.word	0x0801d240
 8016204:	20001084 	.word	0x20001084

08016208 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8016208:	b580      	push	{r7, lr}
 801620a:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 801620c:	4b19      	ldr	r3, [pc, #100]	; (8016274 <ResetFCnts+0x6c>)
 801620e:	685b      	ldr	r3, [r3, #4]
 8016210:	2200      	movs	r2, #0
 8016212:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016214:	4b17      	ldr	r3, [pc, #92]	; (8016274 <ResetFCnts+0x6c>)
 8016216:	685b      	ldr	r3, [r3, #4]
 8016218:	2201      	movs	r2, #1
 801621a:	4252      	negs	r2, r2
 801621c:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801621e:	4b15      	ldr	r3, [pc, #84]	; (8016274 <ResetFCnts+0x6c>)
 8016220:	685b      	ldr	r3, [r3, #4]
 8016222:	2201      	movs	r2, #1
 8016224:	4252      	negs	r2, r2
 8016226:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8016228:	4b12      	ldr	r3, [pc, #72]	; (8016274 <ResetFCnts+0x6c>)
 801622a:	685b      	ldr	r3, [r3, #4]
 801622c:	2201      	movs	r2, #1
 801622e:	4252      	negs	r2, r2
 8016230:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8016232:	4b10      	ldr	r3, [pc, #64]	; (8016274 <ResetFCnts+0x6c>)
 8016234:	685a      	ldr	r2, [r3, #4]
 8016236:	4b0f      	ldr	r3, [pc, #60]	; (8016274 <ResetFCnts+0x6c>)
 8016238:	685b      	ldr	r3, [r3, #4]
 801623a:	3218      	adds	r2, #24
 801623c:	631a      	str	r2, [r3, #48]	; 0x30

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 801623e:	4b0d      	ldr	r3, [pc, #52]	; (8016274 <ResetFCnts+0x6c>)
 8016240:	685b      	ldr	r3, [r3, #4]
 8016242:	2201      	movs	r2, #1
 8016244:	4252      	negs	r2, r2
 8016246:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 8016248:	4b0a      	ldr	r3, [pc, #40]	; (8016274 <ResetFCnts+0x6c>)
 801624a:	685b      	ldr	r3, [r3, #4]
 801624c:	2201      	movs	r2, #1
 801624e:	4252      	negs	r2, r2
 8016250:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 8016252:	4b08      	ldr	r3, [pc, #32]	; (8016274 <ResetFCnts+0x6c>)
 8016254:	685b      	ldr	r3, [r3, #4]
 8016256:	2201      	movs	r2, #1
 8016258:	4252      	negs	r2, r2
 801625a:	625a      	str	r2, [r3, #36]	; 0x24
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 801625c:	4b05      	ldr	r3, [pc, #20]	; (8016274 <ResetFCnts+0x6c>)
 801625e:	685b      	ldr	r3, [r3, #4]
 8016260:	2201      	movs	r2, #1
 8016262:	4252      	negs	r2, r2
 8016264:	629a      	str	r2, [r3, #40]	; 0x28

    CryptoCtx.EventCryptoNvmCtxChanged( );
 8016266:	4b03      	ldr	r3, [pc, #12]	; (8016274 <ResetFCnts+0x6c>)
 8016268:	689b      	ldr	r3, [r3, #8]
 801626a:	4798      	blx	r3
}
 801626c:	46c0      	nop			; (mov r8, r8)
 801626e:	46bd      	mov	sp, r7
 8016270:	bd80      	pop	{r7, pc}
 8016272:	46c0      	nop			; (mov r8, r8)
 8016274:	20001084 	.word	0x20001084

08016278 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8016278:	b580      	push	{r7, lr}
 801627a:	af00      	add	r7, sp, #0
    return;
 801627c:	46c0      	nop			; (mov r8, r8)
}
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}
	...

08016284 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b082      	sub	sp, #8
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 801628c:	4b15      	ldr	r3, [pc, #84]	; (80162e4 <LoRaMacCryptoInit+0x60>)
 801628e:	4a16      	ldr	r2, [pc, #88]	; (80162e8 <LoRaMacCryptoInit+0x64>)
 8016290:	605a      	str	r2, [r3, #4]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d003      	beq.n	80162a0 <LoRaMacCryptoInit+0x1c>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 8016298:	4b12      	ldr	r3, [pc, #72]	; (80162e4 <LoRaMacCryptoInit+0x60>)
 801629a:	687a      	ldr	r2, [r7, #4]
 801629c:	609a      	str	r2, [r3, #8]
 801629e:	e002      	b.n	80162a6 <LoRaMacCryptoInit+0x22>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 80162a0:	4b10      	ldr	r3, [pc, #64]	; (80162e4 <LoRaMacCryptoInit+0x60>)
 80162a2:	4a12      	ldr	r2, [pc, #72]	; (80162ec <LoRaMacCryptoInit+0x68>)
 80162a4:	609a      	str	r2, [r3, #8]
    }

    // Initialize with default
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 80162a6:	4b0f      	ldr	r3, [pc, #60]	; (80162e4 <LoRaMacCryptoInit+0x60>)
 80162a8:	685b      	ldr	r3, [r3, #4]
 80162aa:	2234      	movs	r2, #52	; 0x34
 80162ac:	2100      	movs	r1, #0
 80162ae:	0018      	movs	r0, r3
 80162b0:	f005 f9fa 	bl	801b6a8 <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 80162b4:	4b0b      	ldr	r3, [pc, #44]	; (80162e4 <LoRaMacCryptoInit+0x60>)
 80162b6:	685b      	ldr	r3, [r3, #4]
 80162b8:	2201      	movs	r2, #1
 80162ba:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 80162bc:	4b09      	ldr	r3, [pc, #36]	; (80162e4 <LoRaMacCryptoInit+0x60>)
 80162be:	685b      	ldr	r3, [r3, #4]
 80162c0:	2201      	movs	r2, #1
 80162c2:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 1;
 80162c4:	4b07      	ldr	r3, [pc, #28]	; (80162e4 <LoRaMacCryptoInit+0x60>)
 80162c6:	685b      	ldr	r3, [r3, #4]
 80162c8:	2201      	movs	r2, #1
 80162ca:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Rfu = 0;
 80162cc:	4b05      	ldr	r3, [pc, #20]	; (80162e4 <LoRaMacCryptoInit+0x60>)
 80162ce:	685b      	ldr	r3, [r3, #4]
 80162d0:	2200      	movs	r2, #0
 80162d2:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80162d4:	f7ff ff98 	bl	8016208 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80162d8:	2300      	movs	r3, #0
}
 80162da:	0018      	movs	r0, r3
 80162dc:	46bd      	mov	sp, r7
 80162de:	b002      	add	sp, #8
 80162e0:	bd80      	pop	{r7, pc}
 80162e2:	46c0      	nop			; (mov r8, r8)
 80162e4:	20001084 	.word	0x20001084
 80162e8:	20001090 	.word	0x20001090
 80162ec:	08016279 	.word	0x08016279

080162f0 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b082      	sub	sp, #8
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	6078      	str	r0, [r7, #4]
    CryptoCtx.NvmCtx->LrWanVersion = version;
 80162f8:	4b04      	ldr	r3, [pc, #16]	; (801630c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 80162fa:	685b      	ldr	r3, [r3, #4]
 80162fc:	687a      	ldr	r2, [r7, #4]
 80162fe:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8016300:	2300      	movs	r3, #0
}
 8016302:	0018      	movs	r0, r3
 8016304:	46bd      	mov	sp, r7
 8016306:	b002      	add	sp, #8
 8016308:	bd80      	pop	{r7, pc}
 801630a:	46c0      	nop			; (mov r8, r8)
 801630c:	20001084 	.word	0x20001084

08016310 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b082      	sub	sp, #8
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d007      	beq.n	801632e <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 801631e:	6879      	ldr	r1, [r7, #4]
 8016320:	4b05      	ldr	r3, [pc, #20]	; (8016338 <LoRaMacCryptoRestoreNvmCtx+0x28>)
 8016322:	2234      	movs	r2, #52	; 0x34
 8016324:	0018      	movs	r0, r3
 8016326:	f005 f983 	bl	801b630 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 801632a:	2300      	movs	r3, #0
 801632c:	e000      	b.n	8016330 <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801632e:	230a      	movs	r3, #10
    }
}
 8016330:	0018      	movs	r0, r3
 8016332:	46bd      	mov	sp, r7
 8016334:	b002      	add	sp, #8
 8016336:	bd80      	pop	{r7, pc}
 8016338:	20001090 	.word	0x20001090

0801633c <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 801633c:	b580      	push	{r7, lr}
 801633e:	b082      	sub	sp, #8
 8016340:	af00      	add	r7, sp, #0
 8016342:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	2234      	movs	r2, #52	; 0x34
 8016348:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 801634a:	4b02      	ldr	r3, [pc, #8]	; (8016354 <LoRaMacCryptoGetNvmCtx+0x18>)
}
 801634c:	0018      	movs	r0, r3
 801634e:	46bd      	mov	sp, r7
 8016350:	b002      	add	sp, #8
 8016352:	bd80      	pop	{r7, pc}
 8016354:	20001090 	.word	0x20001090

08016358 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b082      	sub	sp, #8
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d101      	bne.n	801636a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016366:	230a      	movs	r3, #10
 8016368:	e006      	b.n	8016378 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 801636a:	4b05      	ldr	r3, [pc, #20]	; (8016380 <LoRaMacCryptoGetFCntUp+0x28>)
 801636c:	685b      	ldr	r3, [r3, #4]
 801636e:	68db      	ldr	r3, [r3, #12]
 8016370:	1c5a      	adds	r2, r3, #1
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016376:	2300      	movs	r3, #0
}
 8016378:	0018      	movs	r0, r3
 801637a:	46bd      	mov	sp, r7
 801637c:	b002      	add	sp, #8
 801637e:	bd80      	pop	{r7, pc}
 8016380:	20001084 	.word	0x20001084

08016384 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016386:	b08d      	sub	sp, #52	; 0x34
 8016388:	af00      	add	r7, sp, #0
 801638a:	61ba      	str	r2, [r7, #24]
 801638c:	617b      	str	r3, [r7, #20]
 801638e:	230f      	movs	r3, #15
 8016390:	2210      	movs	r2, #16
 8016392:	4694      	mov	ip, r2
 8016394:	44bc      	add	ip, r7
 8016396:	4463      	add	r3, ip
 8016398:	1c02      	adds	r2, r0, #0
 801639a:	701a      	strb	r2, [r3, #0]
 801639c:	230c      	movs	r3, #12
 801639e:	2210      	movs	r2, #16
 80163a0:	4694      	mov	ip, r2
 80163a2:	44bc      	add	ip, r7
 80163a4:	4463      	add	r3, ip
 80163a6:	1c0a      	adds	r2, r1, #0
 80163a8:	801a      	strh	r2, [r3, #0]
    uint32_t lastDown = 0;
 80163aa:	2300      	movs	r3, #0
 80163ac:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t fCntDiff = 0;
 80163ae:	2300      	movs	r3, #0
 80163b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80163b2:	231b      	movs	r3, #27
 80163b4:	2210      	movs	r2, #16
 80163b6:	4694      	mov	ip, r2
 80163b8:	44bc      	add	ip, r7
 80163ba:	4463      	add	r3, ip
 80163bc:	2213      	movs	r2, #19
 80163be:	701a      	strb	r2, [r3, #0]

    if( currentDown == NULL )
 80163c0:	697b      	ldr	r3, [r7, #20]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d101      	bne.n	80163ca <LoRaMacCryptoGetFCntDown+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80163c6:	230a      	movs	r3, #10
 80163c8:	e06f      	b.n	80164aa <LoRaMacCryptoGetFCntDown+0x126>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80163ca:	231b      	movs	r3, #27
 80163cc:	2010      	movs	r0, #16
 80163ce:	183a      	adds	r2, r7, r0
 80163d0:	18d4      	adds	r4, r2, r3
 80163d2:	2214      	movs	r2, #20
 80163d4:	2310      	movs	r3, #16
 80163d6:	469c      	mov	ip, r3
 80163d8:	44bc      	add	ip, r7
 80163da:	4462      	add	r2, ip
 80163dc:	210f      	movs	r1, #15
 80163de:	183b      	adds	r3, r7, r0
 80163e0:	185b      	adds	r3, r3, r1
 80163e2:	781b      	ldrb	r3, [r3, #0]
 80163e4:	0011      	movs	r1, r2
 80163e6:	0018      	movs	r0, r3
 80163e8:	f7ff fe4e 	bl	8016088 <GetLastFcntDown>
 80163ec:	0003      	movs	r3, r0
 80163ee:	7023      	strb	r3, [r4, #0]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80163f0:	231b      	movs	r3, #27
 80163f2:	2210      	movs	r2, #16
 80163f4:	4694      	mov	ip, r2
 80163f6:	44bc      	add	ip, r7
 80163f8:	4463      	add	r3, ip
 80163fa:	781b      	ldrb	r3, [r3, #0]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d006      	beq.n	801640e <LoRaMacCryptoGetFCntDown+0x8a>
    {
        return cryptoStatus;
 8016400:	231b      	movs	r3, #27
 8016402:	2210      	movs	r2, #16
 8016404:	4694      	mov	ip, r2
 8016406:	44bc      	add	ip, r7
 8016408:	4463      	add	r3, ip
 801640a:	781b      	ldrb	r3, [r3, #0]
 801640c:	e04d      	b.n	80164aa <LoRaMacCryptoGetFCntDown+0x126>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 801640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016410:	3301      	adds	r3, #1
 8016412:	d103      	bne.n	801641c <LoRaMacCryptoGetFCntDown+0x98>
    {
         *currentDown = frameFcnt;
 8016414:	697b      	ldr	r3, [r7, #20]
 8016416:	69ba      	ldr	r2, [r7, #24]
 8016418:	601a      	str	r2, [r3, #0]
 801641a:	e020      	b.n	801645e <LoRaMacCryptoGetFCntDown+0xda>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 801641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801641e:	041b      	lsls	r3, r3, #16
 8016420:	0c1b      	lsrs	r3, r3, #16
 8016422:	69ba      	ldr	r2, [r7, #24]
 8016424:	1ad3      	subs	r3, r2, r3
 8016426:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( fCntDiff > 0 )
 8016428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801642a:	2b00      	cmp	r3, #0
 801642c:	dd05      	ble.n	801643a <LoRaMacCryptoGetFCntDown+0xb6>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801642e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016432:	18d2      	adds	r2, r2, r3
 8016434:	697b      	ldr	r3, [r7, #20]
 8016436:	601a      	str	r2, [r3, #0]
 8016438:	e011      	b.n	801645e <LoRaMacCryptoGetFCntDown+0xda>
        }
        else if( fCntDiff == 0 )
 801643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801643c:	2b00      	cmp	r3, #0
 801643e:	d104      	bne.n	801644a <LoRaMacCryptoGetFCntDown+0xc6>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8016440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016442:	697b      	ldr	r3, [r7, #20]
 8016444:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8016446:	2307      	movs	r3, #7
 8016448:	e02f      	b.n	80164aa <LoRaMacCryptoGetFCntDown+0x126>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 801644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801644c:	0c1b      	lsrs	r3, r3, #16
 801644e:	041a      	lsls	r2, r3, #16
 8016450:	69bb      	ldr	r3, [r7, #24]
 8016452:	18d3      	adds	r3, r2, r3
 8016454:	2280      	movs	r2, #128	; 0x80
 8016456:	0252      	lsls	r2, r2, #9
 8016458:	189a      	adds	r2, r3, r2
 801645a:	697b      	ldr	r3, [r7, #20]
 801645c:	601a      	str	r2, [r3, #0]
        }
    }


    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 801645e:	4b15      	ldr	r3, [pc, #84]	; (80164b4 <LoRaMacCryptoGetFCntDown+0x130>)
 8016460:	685b      	ldr	r3, [r3, #4]
 8016462:	789b      	ldrb	r3, [r3, #2]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d11f      	bne.n	80164a8 <LoRaMacCryptoGetFCntDown+0x124>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8016468:	697b      	ldr	r3, [r7, #20]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	60bb      	str	r3, [r7, #8]
 801646e:	2300      	movs	r3, #0
 8016470:	60fb      	str	r3, [r7, #12]
 8016472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016474:	603b      	str	r3, [r7, #0]
 8016476:	2300      	movs	r3, #0
 8016478:	607b      	str	r3, [r7, #4]
 801647a:	68bb      	ldr	r3, [r7, #8]
 801647c:	68fc      	ldr	r4, [r7, #12]
 801647e:	6839      	ldr	r1, [r7, #0]
 8016480:	687a      	ldr	r2, [r7, #4]
 8016482:	1a5b      	subs	r3, r3, r1
 8016484:	4194      	sbcs	r4, r2
 8016486:	220c      	movs	r2, #12
 8016488:	2110      	movs	r1, #16
 801648a:	468c      	mov	ip, r1
 801648c:	44bc      	add	ip, r7
 801648e:	4462      	add	r2, ip
 8016490:	8812      	ldrh	r2, [r2, #0]
 8016492:	b292      	uxth	r2, r2
 8016494:	0015      	movs	r5, r2
 8016496:	2200      	movs	r2, #0
 8016498:	0016      	movs	r6, r2
 801649a:	42a6      	cmp	r6, r4
 801649c:	dc04      	bgt.n	80164a8 <LoRaMacCryptoGetFCntDown+0x124>
 801649e:	d101      	bne.n	80164a4 <LoRaMacCryptoGetFCntDown+0x120>
 80164a0:	429d      	cmp	r5, r3
 80164a2:	d801      	bhi.n	80164a8 <LoRaMacCryptoGetFCntDown+0x124>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 80164a4:	2308      	movs	r3, #8
 80164a6:	e000      	b.n	80164aa <LoRaMacCryptoGetFCntDown+0x126>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80164a8:	2300      	movs	r3, #0
}
 80164aa:	0018      	movs	r0, r3
 80164ac:	46bd      	mov	sp, r7
 80164ae:	b00d      	add	sp, #52	; 0x34
 80164b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164b2:	46c0      	nop			; (mov r8, r8)
 80164b4:	20001084 	.word	0x20001084

080164b8 <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b082      	sub	sp, #8
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d101      	bne.n	80164ca <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80164c6:	230a      	movs	r3, #10
 80164c8:	e018      	b.n	80164fc <LoRaMacCryptoSetMulticastReference+0x44>
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 80164ca:	4b0e      	ldr	r3, [pc, #56]	; (8016504 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80164cc:	685b      	ldr	r3, [r3, #4]
 80164ce:	331c      	adds	r3, #28
 80164d0:	001a      	movs	r2, r3
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	61da      	str	r2, [r3, #28]
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 80164d6:	4b0b      	ldr	r3, [pc, #44]	; (8016504 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80164d8:	685a      	ldr	r2, [r3, #4]
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	3328      	adds	r3, #40	; 0x28
 80164de:	3220      	adds	r2, #32
 80164e0:	61da      	str	r2, [r3, #28]
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 80164e2:	4b08      	ldr	r3, [pc, #32]	; (8016504 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80164e4:	685a      	ldr	r2, [r3, #4]
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	3350      	adds	r3, #80	; 0x50
 80164ea:	3224      	adds	r2, #36	; 0x24
 80164ec:	61da      	str	r2, [r3, #28]
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 80164ee:	4b05      	ldr	r3, [pc, #20]	; (8016504 <LoRaMacCryptoSetMulticastReference+0x4c>)
 80164f0:	685a      	ldr	r2, [r3, #4]
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	3378      	adds	r3, #120	; 0x78
 80164f6:	3228      	adds	r2, #40	; 0x28
 80164f8:	61da      	str	r2, [r3, #28]

    return LORAMAC_CRYPTO_SUCCESS;
 80164fa:	2300      	movs	r3, #0
}
 80164fc:	0018      	movs	r0, r3
 80164fe:	46bd      	mov	sp, r7
 8016500:	b002      	add	sp, #8
 8016502:	bd80      	pop	{r7, pc}
 8016504:	20001084 	.word	0x20001084

08016508 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b082      	sub	sp, #8
 801650c:	af00      	add	r7, sp, #0
 801650e:	0002      	movs	r2, r0
 8016510:	6039      	str	r1, [r7, #0]
 8016512:	1dfb      	adds	r3, r7, #7
 8016514:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016516:	683a      	ldr	r2, [r7, #0]
 8016518:	1dfb      	adds	r3, r7, #7
 801651a:	781b      	ldrb	r3, [r3, #0]
 801651c:	0011      	movs	r1, r2
 801651e:	0018      	movs	r0, r3
 8016520:	f7f8 fdf2 	bl	800f108 <SecureElementSetKey>
 8016524:	1e03      	subs	r3, r0, #0
 8016526:	d001      	beq.n	801652c <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016528:	230f      	movs	r3, #15
 801652a:	e018      	b.n	801655e <LoRaMacCryptoSetKey+0x56>
    }
    if( ( keyID == GEN_APP_KEY ) || ( keyID == APP_KEY ) )
 801652c:	1dfb      	adds	r3, r7, #7
 801652e:	781b      	ldrb	r3, [r3, #0]
 8016530:	2b01      	cmp	r3, #1
 8016532:	d003      	beq.n	801653c <LoRaMacCryptoSetKey+0x34>
 8016534:	1dfb      	adds	r3, r7, #7
 8016536:	781b      	ldrb	r3, [r3, #0]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d10f      	bne.n	801655c <LoRaMacCryptoSetKey+0x54>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 801653c:	1dfb      	adds	r3, r7, #7
 801653e:	781b      	ldrb	r3, [r3, #0]
 8016540:	0018      	movs	r0, r3
 8016542:	f000 fbb3 	bl	8016cac <LoRaMacCryptoDeriveMcRootKey>
 8016546:	1e03      	subs	r3, r0, #0
 8016548:	d001      	beq.n	801654e <LoRaMacCryptoSetKey+0x46>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801654a:	230f      	movs	r3, #15
 801654c:	e007      	b.n	801655e <LoRaMacCryptoSetKey+0x56>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801654e:	2009      	movs	r0, #9
 8016550:	f000 fbec 	bl	8016d2c <LoRaMacCryptoDeriveMcKEKey>
 8016554:	1e03      	subs	r3, r0, #0
 8016556:	d001      	beq.n	801655c <LoRaMacCryptoSetKey+0x54>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016558:	230f      	movs	r3, #15
 801655a:	e000      	b.n	801655e <LoRaMacCryptoSetKey+0x56>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801655c:	2300      	movs	r3, #0
}
 801655e:	0018      	movs	r0, r3
 8016560:	46bd      	mov	sp, r7
 8016562:	b002      	add	sp, #8
 8016564:	bd80      	pop	{r7, pc}
	...

08016568 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016568:	b580      	push	{r7, lr}
 801656a:	b086      	sub	sp, #24
 801656c:	af02      	add	r7, sp, #8
 801656e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	2b00      	cmp	r3, #0
 8016574:	d101      	bne.n	801657a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016576:	230a      	movs	r3, #10
 8016578:	e039      	b.n	80165ee <LoRaMacCryptoPrepareJoinRequest+0x86>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801657a:	230f      	movs	r3, #15
 801657c:	18fb      	adds	r3, r7, r3
 801657e:	2202      	movs	r2, #2
 8016580:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8016582:	2300      	movs	r3, #0
 8016584:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8016586:	2308      	movs	r3, #8
 8016588:	18fb      	adds	r3, r7, r3
 801658a:	0018      	movs	r0, r3
 801658c:	f7f8 ff70 	bl	800f470 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 8016590:	68ba      	ldr	r2, [r7, #8]
 8016592:	4b19      	ldr	r3, [pc, #100]	; (80165f8 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8016594:	685b      	ldr	r3, [r3, #4]
 8016596:	b292      	uxth	r2, r2
 8016598:	809a      	strh	r2, [r3, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 801659a:	4b17      	ldr	r3, [pc, #92]	; (80165f8 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 801659c:	689b      	ldr	r3, [r3, #8]
 801659e:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 80165a0:	4b15      	ldr	r3, [pc, #84]	; (80165f8 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 80165a2:	685b      	ldr	r3, [r3, #4]
 80165a4:	889a      	ldrh	r2, [r3, #4]
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	0018      	movs	r0, r3
 80165ae:	f000 fde8 	bl	8017182 <LoRaMacSerializerJoinRequest>
 80165b2:	1e03      	subs	r3, r0, #0
 80165b4:	d001      	beq.n	80165ba <LoRaMacCryptoPrepareJoinRequest+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80165b6:	2311      	movs	r3, #17
 80165b8:	e019      	b.n	80165ee <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	6819      	ldr	r1, [r3, #0]
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	3318      	adds	r3, #24
 80165c2:	220f      	movs	r2, #15
 80165c4:	18ba      	adds	r2, r7, r2
 80165c6:	7812      	ldrb	r2, [r2, #0]
 80165c8:	9300      	str	r3, [sp, #0]
 80165ca:	0013      	movs	r3, r2
 80165cc:	2213      	movs	r2, #19
 80165ce:	2000      	movs	r0, #0
 80165d0:	f7f8 fe22 	bl	800f218 <SecureElementComputeAesCmac>
 80165d4:	1e03      	subs	r3, r0, #0
 80165d6:	d001      	beq.n	80165dc <LoRaMacCryptoPrepareJoinRequest+0x74>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80165d8:	230f      	movs	r3, #15
 80165da:	e008      	b.n	80165ee <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	0018      	movs	r0, r3
 80165e0:	f000 fdcf 	bl	8017182 <LoRaMacSerializerJoinRequest>
 80165e4:	1e03      	subs	r3, r0, #0
 80165e6:	d001      	beq.n	80165ec <LoRaMacCryptoPrepareJoinRequest+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80165e8:	2311      	movs	r3, #17
 80165ea:	e000      	b.n	80165ee <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80165ec:	2300      	movs	r3, #0
}
 80165ee:	0018      	movs	r0, r3
 80165f0:	46bd      	mov	sp, r7
 80165f2:	b004      	add	sp, #16
 80165f4:	bd80      	pop	{r7, pc}
 80165f6:	46c0      	nop			; (mov r8, r8)
 80165f8:	20001084 	.word	0x20001084

080165fc <LoRaMacCryptoHandleJoinAccept>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80165fc:	b5b0      	push	{r4, r5, r7, lr}
 80165fe:	b0ca      	sub	sp, #296	; 0x128
 8016600:	af00      	add	r7, sp, #0
 8016602:	60b9      	str	r1, [r7, #8]
 8016604:	607a      	str	r2, [r7, #4]
 8016606:	4bdb      	ldr	r3, [pc, #876]	; (8016974 <LoRaMacCryptoHandleJoinAccept+0x378>)
 8016608:	2294      	movs	r2, #148	; 0x94
 801660a:	0052      	lsls	r2, r2, #1
 801660c:	4694      	mov	ip, r2
 801660e:	44bc      	add	ip, r7
 8016610:	4463      	add	r3, ip
 8016612:	1c02      	adds	r2, r0, #0
 8016614:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d002      	beq.n	8016622 <LoRaMacCryptoHandleJoinAccept+0x26>
 801661c:	68bb      	ldr	r3, [r7, #8]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d101      	bne.n	8016626 <LoRaMacCryptoHandleJoinAccept+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016622:	230a      	movs	r3, #10
 8016624:	e1df      	b.n	80169e6 <LoRaMacCryptoHandleJoinAccept+0x3ea>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016626:	2392      	movs	r3, #146	; 0x92
 8016628:	005b      	lsls	r3, r3, #1
 801662a:	18fb      	adds	r3, r7, r3
 801662c:	2213      	movs	r2, #19
 801662e:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID;
    KeyIdentifier_t encryptionKeyID;
    uint8_t micComputationOffset = 0;
 8016630:	2326      	movs	r3, #38	; 0x26
 8016632:	33ff      	adds	r3, #255	; 0xff
 8016634:	18fb      	adds	r3, r7, r3
 8016636:	2200      	movs	r2, #0
 8016638:	701a      	strb	r2, [r3, #0]
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
#endif

    // Determine decryption key and DevNonce for key derivation
    if( joinReqType == JOIN_REQ )
 801663a:	4bce      	ldr	r3, [pc, #824]	; (8016974 <LoRaMacCryptoHandleJoinAccept+0x378>)
 801663c:	2294      	movs	r2, #148	; 0x94
 801663e:	0052      	lsls	r2, r2, #1
 8016640:	4694      	mov	ip, r2
 8016642:	44bc      	add	ip, r7
 8016644:	4463      	add	r3, ip
 8016646:	781b      	ldrb	r3, [r3, #0]
 8016648:	2bff      	cmp	r3, #255	; 0xff
 801664a:	d109      	bne.n	8016660 <LoRaMacCryptoHandleJoinAccept+0x64>
    {
        encryptionKeyID = NWK_KEY;
 801664c:	2393      	movs	r3, #147	; 0x93
 801664e:	005b      	lsls	r3, r3, #1
 8016650:	18fb      	adds	r3, r7, r3
 8016652:	2202      	movs	r2, #2
 8016654:	701a      	strb	r2, [r3, #0]
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 8016656:	2326      	movs	r3, #38	; 0x26
 8016658:	33ff      	adds	r3, #255	; 0xff
 801665a:	18fb      	adds	r3, r7, r3
 801665c:	220c      	movs	r2, #12
 801665e:	701a      	strb	r2, [r3, #0]
        }
    }
#endif
    // Decrypt header, skip MHDR
    uint8_t procBuffer[CRYPTO_MAXMESSAGE_SIZE + CRYPTO_MIC_COMPUTATION_OFFSET];
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	791b      	ldrb	r3, [r3, #4]
 8016664:	b29a      	uxth	r2, r3
 8016666:	2426      	movs	r4, #38	; 0x26
 8016668:	34ff      	adds	r4, #255	; 0xff
 801666a:	193b      	adds	r3, r7, r4
 801666c:	781b      	ldrb	r3, [r3, #0]
 801666e:	b29b      	uxth	r3, r3
 8016670:	18d3      	adds	r3, r2, r3
 8016672:	b29a      	uxth	r2, r3
 8016674:	2510      	movs	r5, #16
 8016676:	197b      	adds	r3, r7, r5
 8016678:	2100      	movs	r1, #0
 801667a:	0018      	movs	r0, r3
 801667c:	f005 f814 	bl	801b6a8 <memset1>

    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	1c58      	adds	r0, r3, #1
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	791b      	ldrb	r3, [r3, #4]
 801668a:	b29b      	uxth	r3, r3
 801668c:	3b01      	subs	r3, #1
 801668e:	b299      	uxth	r1, r3
 8016690:	193b      	adds	r3, r7, r4
 8016692:	781b      	ldrb	r3, [r3, #0]
 8016694:	197a      	adds	r2, r7, r5
 8016696:	18d4      	adds	r4, r2, r3
 8016698:	2393      	movs	r3, #147	; 0x93
 801669a:	005b      	lsls	r3, r3, #1
 801669c:	18fb      	adds	r3, r7, r3
 801669e:	781a      	ldrb	r2, [r3, #0]
 80166a0:	0023      	movs	r3, r4
 80166a2:	f7f8 fe1d 	bl	800f2e0 <SecureElementAesEncrypt>
 80166a6:	1e03      	subs	r3, r0, #0
 80166a8:	d001      	beq.n	80166ae <LoRaMacCryptoHandleJoinAccept+0xb2>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80166aa:	230f      	movs	r3, #15
 80166ac:	e19b      	b.n	80169e6 <LoRaMacCryptoHandleJoinAccept+0x3ea>
    }
    // Copy the result to an offset location to keep space for additional information which have to be added in case of 1.1 and later
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	1c58      	adds	r0, r3, #1
 80166b4:	2326      	movs	r3, #38	; 0x26
 80166b6:	33ff      	adds	r3, #255	; 0xff
 80166b8:	18fb      	adds	r3, r7, r3
 80166ba:	781b      	ldrb	r3, [r3, #0]
 80166bc:	2210      	movs	r2, #16
 80166be:	18ba      	adds	r2, r7, r2
 80166c0:	18d1      	adds	r1, r2, r3
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	791b      	ldrb	r3, [r3, #4]
 80166c6:	b29b      	uxth	r3, r3
 80166c8:	3b01      	subs	r3, #1
 80166ca:	b29b      	uxth	r3, r3
 80166cc:	001a      	movs	r2, r3
 80166ce:	f004 ffaf 	bl	801b630 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	0018      	movs	r0, r3
 80166d6:	f000 fb51 	bl	8016d7c <LoRaMacParserJoinAccept>
 80166da:	1e03      	subs	r3, r0, #0
 80166dc:	d001      	beq.n	80166e2 <LoRaMacCryptoHandleJoinAccept+0xe6>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80166de:	2310      	movs	r3, #16
 80166e0:	e181      	b.n	80169e6 <LoRaMacCryptoHandleJoinAccept+0x3ea>
    }

    // Is it a LoRaWAN 1.1.0 or later ?
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	7c1b      	ldrb	r3, [r3, #16]
 80166e6:	227f      	movs	r2, #127	; 0x7f
 80166e8:	4393      	bics	r3, r2
 80166ea:	b2db      	uxtb	r3, r3
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d009      	beq.n	8016704 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 80166f0:	4ba1      	ldr	r3, [pc, #644]	; (8016978 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 80166f2:	685b      	ldr	r3, [r3, #4]
 80166f4:	2201      	movs	r2, #1
 80166f6:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 80166f8:	2328      	movs	r3, #40	; 0x28
 80166fa:	33ff      	adds	r3, #255	; 0xff
 80166fc:	18fb      	adds	r3, r7, r3
 80166fe:	2203      	movs	r2, #3
 8016700:	701a      	strb	r2, [r3, #0]
 8016702:	e008      	b.n	8016716 <LoRaMacCryptoHandleJoinAccept+0x11a>
    }
    else
    {
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 0;
 8016704:	4b9c      	ldr	r3, [pc, #624]	; (8016978 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8016706:	685b      	ldr	r3, [r3, #4]
 8016708:	2200      	movs	r2, #0
 801670a:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = NWK_KEY;
 801670c:	2328      	movs	r3, #40	; 0x28
 801670e:	33ff      	adds	r3, #255	; 0xff
 8016710:	18fb      	adds	r3, r7, r3
 8016712:	2202      	movs	r2, #2
 8016714:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8016716:	4b98      	ldr	r3, [pc, #608]	; (8016978 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8016718:	685b      	ldr	r3, [r3, #4]
 801671a:	789b      	ldrb	r3, [r3, #2]
 801671c:	2b00      	cmp	r3, #0
 801671e:	d113      	bne.n	8016748 <LoRaMacCryptoHandleJoinAccept+0x14c>
    {
        // For legacy mode :
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)
        if( SecureElementVerifyAesCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	6818      	ldr	r0, [r3, #0]
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	791b      	ldrb	r3, [r3, #4]
 8016728:	b29b      	uxth	r3, r3
 801672a:	3b04      	subs	r3, #4
 801672c:	b299      	uxth	r1, r3
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016732:	2328      	movs	r3, #40	; 0x28
 8016734:	33ff      	adds	r3, #255	; 0xff
 8016736:	18fb      	adds	r3, r7, r3
 8016738:	781b      	ldrb	r3, [r3, #0]
 801673a:	f7f8 fd8e 	bl	800f25a <SecureElementVerifyAesCmac>
 801673e:	1e03      	subs	r3, r0, #0
 8016740:	d100      	bne.n	8016744 <LoRaMacCryptoHandleJoinAccept+0x148>
 8016742:	e0a9      	b.n	8016898 <LoRaMacCryptoHandleJoinAccept+0x29c>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016744:	230f      	movs	r3, #15
 8016746:	e14e      	b.n	80169e6 <LoRaMacCryptoHandleJoinAccept+0x3ea>
    {
        // For 1.1 and later:
        //   cmac = aes128_cmac(JSIntKey, JoinReqType | JoinEUI | DevNonce | MHDR | JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)

        // Prepare the msg for integrity check (adding JoinReqType, JoinEUI and DevNonce)
        uint16_t bufItr = 0;
 8016748:	2091      	movs	r0, #145	; 0x91
 801674a:	0040      	lsls	r0, r0, #1
 801674c:	183b      	adds	r3, r7, r0
 801674e:	2200      	movs	r2, #0
 8016750:	801a      	strh	r2, [r3, #0]
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 8016752:	183b      	adds	r3, r7, r0
 8016754:	881b      	ldrh	r3, [r3, #0]
 8016756:	183a      	adds	r2, r7, r0
 8016758:	1c59      	adds	r1, r3, #1
 801675a:	8011      	strh	r1, [r2, #0]
 801675c:	0019      	movs	r1, r3
 801675e:	4b87      	ldr	r3, [pc, #540]	; (801697c <LoRaMacCryptoHandleJoinAccept+0x380>)
 8016760:	2294      	movs	r2, #148	; 0x94
 8016762:	0052      	lsls	r2, r2, #1
 8016764:	4694      	mov	ip, r2
 8016766:	44bc      	add	ip, r7
 8016768:	4463      	add	r3, ip
 801676a:	4a82      	ldr	r2, [pc, #520]	; (8016974 <LoRaMacCryptoHandleJoinAccept+0x378>)
 801676c:	2494      	movs	r4, #148	; 0x94
 801676e:	0064      	lsls	r4, r4, #1
 8016770:	46a4      	mov	ip, r4
 8016772:	44bc      	add	ip, r7
 8016774:	4462      	add	r2, ip
 8016776:	7812      	ldrb	r2, [r2, #0]
 8016778:	545a      	strb	r2, [r3, r1]

        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801677a:	0004      	movs	r4, r0
 801677c:	183b      	adds	r3, r7, r0
 801677e:	881b      	ldrh	r3, [r3, #0]
 8016780:	2510      	movs	r5, #16
 8016782:	197a      	adds	r2, r7, r5
 8016784:	18d3      	adds	r3, r2, r3
 8016786:	68b9      	ldr	r1, [r7, #8]
 8016788:	2208      	movs	r2, #8
 801678a:	0018      	movs	r0, r3
 801678c:	f004 ff6b 	bl	801b666 <memcpyr>
        bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8016790:	0020      	movs	r0, r4
 8016792:	183b      	adds	r3, r7, r0
 8016794:	183a      	adds	r2, r7, r0
 8016796:	8812      	ldrh	r2, [r2, #0]
 8016798:	3208      	adds	r2, #8
 801679a:	801a      	strh	r2, [r3, #0]

        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 801679c:	4b76      	ldr	r3, [pc, #472]	; (8016978 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 801679e:	685b      	ldr	r3, [r3, #4]
 80167a0:	8899      	ldrh	r1, [r3, #4]
 80167a2:	183b      	adds	r3, r7, r0
 80167a4:	881b      	ldrh	r3, [r3, #0]
 80167a6:	0004      	movs	r4, r0
 80167a8:	183a      	adds	r2, r7, r0
 80167aa:	1c58      	adds	r0, r3, #1
 80167ac:	8010      	strh	r0, [r2, #0]
 80167ae:	001a      	movs	r2, r3
 80167b0:	b2c9      	uxtb	r1, r1
 80167b2:	4b72      	ldr	r3, [pc, #456]	; (801697c <LoRaMacCryptoHandleJoinAccept+0x380>)
 80167b4:	2094      	movs	r0, #148	; 0x94
 80167b6:	0040      	lsls	r0, r0, #1
 80167b8:	4684      	mov	ip, r0
 80167ba:	44bc      	add	ip, r7
 80167bc:	4463      	add	r3, ip
 80167be:	5499      	strb	r1, [r3, r2]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 80167c0:	4b6d      	ldr	r3, [pc, #436]	; (8016978 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 80167c2:	685b      	ldr	r3, [r3, #4]
 80167c4:	889b      	ldrh	r3, [r3, #4]
 80167c6:	0a1b      	lsrs	r3, r3, #8
 80167c8:	b299      	uxth	r1, r3
 80167ca:	193b      	adds	r3, r7, r4
 80167cc:	881b      	ldrh	r3, [r3, #0]
 80167ce:	193a      	adds	r2, r7, r4
 80167d0:	1c58      	adds	r0, r3, #1
 80167d2:	8010      	strh	r0, [r2, #0]
 80167d4:	001a      	movs	r2, r3
 80167d6:	b2c9      	uxtb	r1, r1
 80167d8:	4b68      	ldr	r3, [pc, #416]	; (801697c <LoRaMacCryptoHandleJoinAccept+0x380>)
 80167da:	2094      	movs	r0, #148	; 0x94
 80167dc:	0040      	lsls	r0, r0, #1
 80167de:	4684      	mov	ip, r0
 80167e0:	44bc      	add	ip, r7
 80167e2:	4463      	add	r3, ip
 80167e4:	5499      	strb	r1, [r3, r2]

        procBuffer[bufItr++] = macMsg->MHDR.Value;
 80167e6:	193b      	adds	r3, r7, r4
 80167e8:	881b      	ldrh	r3, [r3, #0]
 80167ea:	193a      	adds	r2, r7, r4
 80167ec:	1c59      	adds	r1, r3, #1
 80167ee:	8011      	strh	r1, [r2, #0]
 80167f0:	001a      	movs	r2, r3
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	7959      	ldrb	r1, [r3, #5]
 80167f6:	4b61      	ldr	r3, [pc, #388]	; (801697c <LoRaMacCryptoHandleJoinAccept+0x380>)
 80167f8:	2094      	movs	r0, #148	; 0x94
 80167fa:	0040      	lsls	r0, r0, #1
 80167fc:	4684      	mov	ip, r0
 80167fe:	44bc      	add	ip, r7
 8016800:	4463      	add	r3, ip
 8016802:	5499      	strb	r1, [r3, r2]

        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	791b      	ldrb	r3, [r3, #4]
 8016808:	b29a      	uxth	r2, r3
 801680a:	2326      	movs	r3, #38	; 0x26
 801680c:	33ff      	adds	r3, #255	; 0xff
 801680e:	18fb      	adds	r3, r7, r3
 8016810:	781b      	ldrb	r3, [r3, #0]
 8016812:	b29b      	uxth	r3, r3
 8016814:	18d3      	adds	r3, r2, r3
 8016816:	b29b      	uxth	r3, r3
 8016818:	3b05      	subs	r3, #5
 801681a:	b299      	uxth	r1, r3
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016820:	2328      	movs	r3, #40	; 0x28
 8016822:	33ff      	adds	r3, #255	; 0xff
 8016824:	18fb      	adds	r3, r7, r3
 8016826:	781b      	ldrb	r3, [r3, #0]
 8016828:	1978      	adds	r0, r7, r5
 801682a:	f7f8 fd16 	bl	800f25a <SecureElementVerifyAesCmac>
 801682e:	1e03      	subs	r3, r0, #0
 8016830:	d001      	beq.n	8016836 <LoRaMacCryptoHandleJoinAccept+0x23a>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016832:	230f      	movs	r3, #15
 8016834:	e0d7      	b.n	80169e6 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }

        // Check if the JoinNonce is greater as the previous one
        uint32_t currentJoinNonce = 0;
 8016836:	2300      	movs	r3, #0
 8016838:	228e      	movs	r2, #142	; 0x8e
 801683a:	0052      	lsls	r2, r2, #1
 801683c:	18b9      	adds	r1, r7, r2
 801683e:	600b      	str	r3, [r1, #0]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	799b      	ldrb	r3, [r3, #6]
 8016844:	18b9      	adds	r1, r7, r2
 8016846:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	79db      	ldrb	r3, [r3, #7]
 801684c:	021b      	lsls	r3, r3, #8
 801684e:	0011      	movs	r1, r2
 8016850:	18ba      	adds	r2, r7, r2
 8016852:	6812      	ldr	r2, [r2, #0]
 8016854:	4313      	orrs	r3, r2
 8016856:	000a      	movs	r2, r1
 8016858:	18b9      	adds	r1, r7, r2
 801685a:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	7a1b      	ldrb	r3, [r3, #8]
 8016860:	041b      	lsls	r3, r3, #16
 8016862:	0011      	movs	r1, r2
 8016864:	18ba      	adds	r2, r7, r2
 8016866:	6812      	ldr	r2, [r2, #0]
 8016868:	4313      	orrs	r3, r2
 801686a:	000a      	movs	r2, r1
 801686c:	18b9      	adds	r1, r7, r2
 801686e:	600b      	str	r3, [r1, #0]

        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 8016870:	4b41      	ldr	r3, [pc, #260]	; (8016978 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8016872:	685b      	ldr	r3, [r3, #4]
 8016874:	689b      	ldr	r3, [r3, #8]
 8016876:	18ba      	adds	r2, r7, r2
 8016878:	6812      	ldr	r2, [r2, #0]
 801687a:	429a      	cmp	r2, r3
 801687c:	d90a      	bls.n	8016894 <LoRaMacCryptoHandleJoinAccept+0x298>
        {
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 801687e:	4b3e      	ldr	r3, [pc, #248]	; (8016978 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8016880:	685b      	ldr	r3, [r3, #4]
 8016882:	228e      	movs	r2, #142	; 0x8e
 8016884:	0052      	lsls	r2, r2, #1
 8016886:	18ba      	adds	r2, r7, r2
 8016888:	6812      	ldr	r2, [r2, #0]
 801688a:	609a      	str	r2, [r3, #8]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 801688c:	4b3a      	ldr	r3, [pc, #232]	; (8016978 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 801688e:	689b      	ldr	r3, [r3, #8]
 8016890:	4798      	blx	r3
 8016892:	e001      	b.n	8016898 <LoRaMacCryptoHandleJoinAccept+0x29c>
        }
        else
        {
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8016894:	2303      	movs	r3, #3
 8016896:	e0a6      	b.n	80169e6 <LoRaMacCryptoHandleJoinAccept+0x3ea>
    }
    else
#endif
    {
        // prior LoRaWAN 1.1.0
        retval = LoRaMacCryptoDeriveMcRootKey( GEN_APP_KEY );
 8016898:	2592      	movs	r5, #146	; 0x92
 801689a:	006d      	lsls	r5, r5, #1
 801689c:	197c      	adds	r4, r7, r5
 801689e:	2001      	movs	r0, #1
 80168a0:	f000 fa04 	bl	8016cac <LoRaMacCryptoDeriveMcRootKey>
 80168a4:	0003      	movs	r3, r0
 80168a6:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80168a8:	197b      	adds	r3, r7, r5
 80168aa:	781b      	ldrb	r3, [r3, #0]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d004      	beq.n	80168ba <LoRaMacCryptoHandleJoinAccept+0x2be>
        {
            return retval;
 80168b0:	2392      	movs	r3, #146	; 0x92
 80168b2:	005b      	lsls	r3, r3, #1
 80168b4:	18fb      	adds	r3, r7, r3
 80168b6:	781b      	ldrb	r3, [r3, #0]
 80168b8:	e095      	b.n	80169e6 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }

        retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80168ba:	2592      	movs	r5, #146	; 0x92
 80168bc:	006d      	lsls	r5, r5, #1
 80168be:	197c      	adds	r4, r7, r5
 80168c0:	2009      	movs	r0, #9
 80168c2:	f000 fa33 	bl	8016d2c <LoRaMacCryptoDeriveMcKEKey>
 80168c6:	0003      	movs	r3, r0
 80168c8:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80168ca:	197b      	adds	r3, r7, r5
 80168cc:	781b      	ldrb	r3, [r3, #0]
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d004      	beq.n	80168dc <LoRaMacCryptoHandleJoinAccept+0x2e0>
        {
            return retval;
 80168d2:	2392      	movs	r3, #146	; 0x92
 80168d4:	005b      	lsls	r3, r3, #1
 80168d6:	18fb      	adds	r3, r7, r3
 80168d8:	781b      	ldrb	r3, [r3, #0]
 80168da:	e084      	b.n	80169e6 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }

        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	1d99      	adds	r1, r3, #6
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	3309      	adds	r3, #9
 80168e4:	001a      	movs	r2, r3
 80168e6:	4b24      	ldr	r3, [pc, #144]	; (8016978 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 80168e8:	685b      	ldr	r3, [r3, #4]
 80168ea:	3304      	adds	r3, #4
 80168ec:	2592      	movs	r5, #146	; 0x92
 80168ee:	006d      	lsls	r5, r5, #1
 80168f0:	197c      	adds	r4, r7, r5
 80168f2:	2008      	movs	r0, #8
 80168f4:	f7ff fb68 	bl	8015fc8 <DeriveSessionKey10x>
 80168f8:	0003      	movs	r3, r0
 80168fa:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80168fc:	197b      	adds	r3, r7, r5
 80168fe:	781b      	ldrb	r3, [r3, #0]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d004      	beq.n	801690e <LoRaMacCryptoHandleJoinAccept+0x312>
        {
            return retval;
 8016904:	2392      	movs	r3, #146	; 0x92
 8016906:	005b      	lsls	r3, r3, #1
 8016908:	18fb      	adds	r3, r7, r3
 801690a:	781b      	ldrb	r3, [r3, #0]
 801690c:	e06b      	b.n	80169e6 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }

        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	1d99      	adds	r1, r3, #6
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	3309      	adds	r3, #9
 8016916:	001a      	movs	r2, r3
 8016918:	4b17      	ldr	r3, [pc, #92]	; (8016978 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 801691a:	685b      	ldr	r3, [r3, #4]
 801691c:	3304      	adds	r3, #4
 801691e:	2592      	movs	r5, #146	; 0x92
 8016920:	006d      	lsls	r5, r5, #1
 8016922:	197c      	adds	r4, r7, r5
 8016924:	2007      	movs	r0, #7
 8016926:	f7ff fb4f 	bl	8015fc8 <DeriveSessionKey10x>
 801692a:	0003      	movs	r3, r0
 801692c:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801692e:	197b      	adds	r3, r7, r5
 8016930:	781b      	ldrb	r3, [r3, #0]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d004      	beq.n	8016940 <LoRaMacCryptoHandleJoinAccept+0x344>
        {
            return retval;
 8016936:	2392      	movs	r3, #146	; 0x92
 8016938:	005b      	lsls	r3, r3, #1
 801693a:	18fb      	adds	r3, r7, r3
 801693c:	781b      	ldrb	r3, [r3, #0]
 801693e:	e052      	b.n	80169e6 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }

        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	1d99      	adds	r1, r3, #6
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	3309      	adds	r3, #9
 8016948:	001a      	movs	r2, r3
 801694a:	4b0b      	ldr	r3, [pc, #44]	; (8016978 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 801694c:	685b      	ldr	r3, [r3, #4]
 801694e:	3304      	adds	r3, #4
 8016950:	2592      	movs	r5, #146	; 0x92
 8016952:	006d      	lsls	r5, r5, #1
 8016954:	197c      	adds	r4, r7, r5
 8016956:	2005      	movs	r0, #5
 8016958:	f7ff fb36 	bl	8015fc8 <DeriveSessionKey10x>
 801695c:	0003      	movs	r3, r0
 801695e:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016960:	197b      	adds	r3, r7, r5
 8016962:	781b      	ldrb	r3, [r3, #0]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d00b      	beq.n	8016980 <LoRaMacCryptoHandleJoinAccept+0x384>
        {
            return retval;
 8016968:	2392      	movs	r3, #146	; 0x92
 801696a:	005b      	lsls	r3, r3, #1
 801696c:	18fb      	adds	r3, r7, r3
 801696e:	781b      	ldrb	r3, [r3, #0]
 8016970:	e039      	b.n	80169e6 <LoRaMacCryptoHandleJoinAccept+0x3ea>
 8016972:	46c0      	nop			; (mov r8, r8)
 8016974:	fffffee7 	.word	0xfffffee7
 8016978:	20001084 	.word	0x20001084
 801697c:	fffffee8 	.word	0xfffffee8
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	1d99      	adds	r1, r3, #6
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	3309      	adds	r3, #9
 8016988:	001a      	movs	r2, r3
 801698a:	4b19      	ldr	r3, [pc, #100]	; (80169f0 <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 801698c:	685b      	ldr	r3, [r3, #4]
 801698e:	3304      	adds	r3, #4
 8016990:	2592      	movs	r5, #146	; 0x92
 8016992:	006d      	lsls	r5, r5, #1
 8016994:	197c      	adds	r4, r7, r5
 8016996:	2006      	movs	r0, #6
 8016998:	f7ff fb16 	bl	8015fc8 <DeriveSessionKey10x>
 801699c:	0003      	movs	r3, r0
 801699e:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80169a0:	197b      	adds	r3, r7, r5
 80169a2:	781b      	ldrb	r3, [r3, #0]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d004      	beq.n	80169b2 <LoRaMacCryptoHandleJoinAccept+0x3b6>
        {
            return retval;
 80169a8:	2392      	movs	r3, #146	; 0x92
 80169aa:	005b      	lsls	r3, r3, #1
 80169ac:	18fb      	adds	r3, r7, r3
 80169ae:	781b      	ldrb	r3, [r3, #0]
 80169b0:	e019      	b.n	80169e6 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }
    }

    // Join-Accept is successfully processed, reset frame counters
    CryptoCtx.RJcount0 = 0;
 80169b2:	4b0f      	ldr	r3, [pc, #60]	; (80169f0 <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 80169b4:	2200      	movs	r2, #0
 80169b6:	801a      	strh	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 80169b8:	4b0d      	ldr	r3, [pc, #52]	; (80169f0 <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 80169ba:	685b      	ldr	r3, [r3, #4]
 80169bc:	2200      	movs	r2, #0
 80169be:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80169c0:	4b0b      	ldr	r3, [pc, #44]	; (80169f0 <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 80169c2:	685b      	ldr	r3, [r3, #4]
 80169c4:	2201      	movs	r2, #1
 80169c6:	4252      	negs	r2, r2
 80169c8:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80169ca:	4b09      	ldr	r3, [pc, #36]	; (80169f0 <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 80169cc:	685b      	ldr	r3, [r3, #4]
 80169ce:	2201      	movs	r2, #1
 80169d0:	4252      	negs	r2, r2
 80169d2:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80169d4:	4b06      	ldr	r3, [pc, #24]	; (80169f0 <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 80169d6:	685b      	ldr	r3, [r3, #4]
 80169d8:	2201      	movs	r2, #1
 80169da:	4252      	negs	r2, r2
 80169dc:	615a      	str	r2, [r3, #20]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80169de:	4b04      	ldr	r3, [pc, #16]	; (80169f0 <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 80169e0:	689b      	ldr	r3, [r3, #8]
 80169e2:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 80169e4:	2300      	movs	r3, #0
}
 80169e6:	0018      	movs	r0, r3
 80169e8:	46bd      	mov	sp, r7
 80169ea:	b04a      	add	sp, #296	; 0x128
 80169ec:	bdb0      	pop	{r4, r5, r7, pc}
 80169ee:	46c0      	nop			; (mov r8, r8)
 80169f0:	20001084 	.word	0x20001084

080169f4 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80169f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80169f6:	b08b      	sub	sp, #44	; 0x2c
 80169f8:	af04      	add	r7, sp, #16
 80169fa:	60f8      	str	r0, [r7, #12]
 80169fc:	0008      	movs	r0, r1
 80169fe:	0011      	movs	r1, r2
 8016a00:	607b      	str	r3, [r7, #4]
 8016a02:	230b      	movs	r3, #11
 8016a04:	18fb      	adds	r3, r7, r3
 8016a06:	1c02      	adds	r2, r0, #0
 8016a08:	701a      	strb	r2, [r3, #0]
 8016a0a:	230a      	movs	r3, #10
 8016a0c:	18fb      	adds	r3, r7, r3
 8016a0e:	1c0a      	adds	r2, r1, #0
 8016a10:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016a12:	2316      	movs	r3, #22
 8016a14:	18fb      	adds	r3, r7, r3
 8016a16:	2213      	movs	r2, #19
 8016a18:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016a1a:	2317      	movs	r3, #23
 8016a1c:	18fb      	adds	r3, r7, r3
 8016a1e:	2208      	movs	r2, #8
 8016a20:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d101      	bne.n	8016a2c <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016a28:	230a      	movs	r3, #10
 8016a2a:	e06d      	b.n	8016b08 <LoRaMacCryptoSecureMessage+0x114>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 8016a2c:	4b38      	ldr	r3, [pc, #224]	; (8016b10 <LoRaMacCryptoSecureMessage+0x11c>)
 8016a2e:	685b      	ldr	r3, [r3, #4]
 8016a30:	68db      	ldr	r3, [r3, #12]
 8016a32:	68fa      	ldr	r2, [r7, #12]
 8016a34:	429a      	cmp	r2, r3
 8016a36:	d201      	bcs.n	8016a3c <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016a38:	2306      	movs	r3, #6
 8016a3a:	e065      	b.n	8016b08 <LoRaMacCryptoSecureMessage+0x114>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	2220      	movs	r2, #32
 8016a40:	5c9b      	ldrb	r3, [r3, r2]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d103      	bne.n	8016a4e <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8016a46:	2317      	movs	r3, #23
 8016a48:	18fb      	adds	r3, r7, r3
 8016a4a:	2207      	movs	r2, #7
 8016a4c:	701a      	strb	r2, [r3, #0]
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 8016a4e:	4b30      	ldr	r3, [pc, #192]	; (8016b10 <LoRaMacCryptoSecureMessage+0x11c>)
 8016a50:	685b      	ldr	r3, [r3, #4]
 8016a52:	68db      	ldr	r3, [r3, #12]
 8016a54:	68fa      	ldr	r2, [r7, #12]
 8016a56:	429a      	cmp	r2, r3
 8016a58:	d91d      	bls.n	8016a96 <LoRaMacCryptoSecureMessage+0xa2>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	2228      	movs	r2, #40	; 0x28
 8016a62:	5c9b      	ldrb	r3, [r3, r2]
 8016a64:	b219      	sxth	r1, r3
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	689d      	ldr	r5, [r3, #8]
 8016a6a:	2616      	movs	r6, #22
 8016a6c:	19bc      	adds	r4, r7, r6
 8016a6e:	2317      	movs	r3, #23
 8016a70:	18fb      	adds	r3, r7, r3
 8016a72:	781a      	ldrb	r2, [r3, #0]
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	9301      	str	r3, [sp, #4]
 8016a78:	2300      	movs	r3, #0
 8016a7a:	9300      	str	r3, [sp, #0]
 8016a7c:	002b      	movs	r3, r5
 8016a7e:	f7ff f823 	bl	8015ac8 <PayloadEncrypt>
 8016a82:	0003      	movs	r3, r0
 8016a84:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016a86:	19bb      	adds	r3, r7, r6
 8016a88:	781b      	ldrb	r3, [r3, #0]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d003      	beq.n	8016a96 <LoRaMacCryptoSecureMessage+0xa2>
        {
            return retval;
 8016a8e:	2316      	movs	r3, #22
 8016a90:	18fb      	adds	r3, r7, r3
 8016a92:	781b      	ldrb	r3, [r3, #0]
 8016a94:	e038      	b.n	8016b08 <LoRaMacCryptoSecureMessage+0x114>
                return retval;
            }
        }
#endif
    }
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 8016a96:	4b1e      	ldr	r3, [pc, #120]	; (8016b10 <LoRaMacCryptoSecureMessage+0x11c>)
 8016a98:	685b      	ldr	r3, [r3, #4]
 8016a9a:	68fa      	ldr	r2, [r7, #12]
 8016a9c:	60da      	str	r2, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8016a9e:	4b1c      	ldr	r3, [pc, #112]	; (8016b10 <LoRaMacCryptoSecureMessage+0x11c>)
 8016aa0:	689b      	ldr	r3, [r3, #8]
 8016aa2:	4798      	blx	r3

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	0018      	movs	r0, r3
 8016aa8:	f000 fc06 	bl	80172b8 <LoRaMacSerializerData>
 8016aac:	1e03      	subs	r3, r0, #0
 8016aae:	d001      	beq.n	8016ab4 <LoRaMacCryptoSecureMessage+0xc0>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016ab0:	2311      	movs	r3, #17
 8016ab2:	e029      	b.n	8016b08 <LoRaMacCryptoSecureMessage+0x114>
    else
#endif
    {
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	6818      	ldr	r0, [r3, #0]
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	791b      	ldrb	r3, [r3, #4]
 8016abc:	b29b      	uxth	r3, r3
 8016abe:	3b04      	subs	r3, #4
 8016ac0:	b299      	uxth	r1, r3
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	689b      	ldr	r3, [r3, #8]
 8016ac6:	687a      	ldr	r2, [r7, #4]
 8016ac8:	322c      	adds	r2, #44	; 0x2c
 8016aca:	2516      	movs	r5, #22
 8016acc:	197c      	adds	r4, r7, r5
 8016ace:	9203      	str	r2, [sp, #12]
 8016ad0:	68fa      	ldr	r2, [r7, #12]
 8016ad2:	9202      	str	r2, [sp, #8]
 8016ad4:	9301      	str	r3, [sp, #4]
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	9300      	str	r3, [sp, #0]
 8016ada:	2300      	movs	r3, #0
 8016adc:	2207      	movs	r2, #7
 8016ade:	f7ff f947 	bl	8015d70 <ComputeCmacB0>
 8016ae2:	0003      	movs	r3, r0
 8016ae4:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016ae6:	197b      	adds	r3, r7, r5
 8016ae8:	781b      	ldrb	r3, [r3, #0]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d003      	beq.n	8016af6 <LoRaMacCryptoSecureMessage+0x102>
        {
            return retval;
 8016aee:	2316      	movs	r3, #22
 8016af0:	18fb      	adds	r3, r7, r3
 8016af2:	781b      	ldrb	r3, [r3, #0]
 8016af4:	e008      	b.n	8016b08 <LoRaMacCryptoSecureMessage+0x114>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	0018      	movs	r0, r3
 8016afa:	f000 fbdd 	bl	80172b8 <LoRaMacSerializerData>
 8016afe:	1e03      	subs	r3, r0, #0
 8016b00:	d001      	beq.n	8016b06 <LoRaMacCryptoSecureMessage+0x112>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016b02:	2311      	movs	r3, #17
 8016b04:	e000      	b.n	8016b08 <LoRaMacCryptoSecureMessage+0x114>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016b06:	2300      	movs	r3, #0
}
 8016b08:	0018      	movs	r0, r3
 8016b0a:	46bd      	mov	sp, r7
 8016b0c:	b007      	add	sp, #28
 8016b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b10:	20001084 	.word	0x20001084

08016b14 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b16:	b08b      	sub	sp, #44	; 0x2c
 8016b18:	af04      	add	r7, sp, #16
 8016b1a:	60b9      	str	r1, [r7, #8]
 8016b1c:	0011      	movs	r1, r2
 8016b1e:	607b      	str	r3, [r7, #4]
 8016b20:	230f      	movs	r3, #15
 8016b22:	18fb      	adds	r3, r7, r3
 8016b24:	1c02      	adds	r2, r0, #0
 8016b26:	701a      	strb	r2, [r3, #0]
 8016b28:	230e      	movs	r3, #14
 8016b2a:	18fb      	adds	r3, r7, r3
 8016b2c:	1c0a      	adds	r2, r1, #0
 8016b2e:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 8016b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d101      	bne.n	8016b3a <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016b36:	230a      	movs	r3, #10
 8016b38:	e0b2      	b.n	8016ca0 <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016b3a:	687a      	ldr	r2, [r7, #4]
 8016b3c:	230e      	movs	r3, #14
 8016b3e:	18fb      	adds	r3, r7, r3
 8016b40:	781b      	ldrb	r3, [r3, #0]
 8016b42:	0011      	movs	r1, r2
 8016b44:	0018      	movs	r0, r3
 8016b46:	f7ff fafb 	bl	8016140 <CheckFCntDown>
 8016b4a:	0003      	movs	r3, r0
 8016b4c:	001a      	movs	r2, r3
 8016b4e:	2301      	movs	r3, #1
 8016b50:	4053      	eors	r3, r2
 8016b52:	b2db      	uxtb	r3, r3
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d001      	beq.n	8016b5c <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016b58:	2306      	movs	r3, #6
 8016b5a:	e0a1      	b.n	8016ca0 <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016b5c:	2315      	movs	r3, #21
 8016b5e:	18fb      	adds	r3, r7, r3
 8016b60:	2213      	movs	r2, #19
 8016b62:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016b64:	2317      	movs	r3, #23
 8016b66:	18fb      	adds	r3, r7, r3
 8016b68:	2208      	movs	r2, #8
 8016b6a:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
 8016b6c:	2314      	movs	r3, #20
 8016b6e:	18fb      	adds	r3, r7, r3
 8016b70:	2206      	movs	r2, #6
 8016b72:	701a      	strb	r2, [r3, #0]
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b76:	0018      	movs	r0, r3
 8016b78:	f000 f9f1 	bl	8016f5e <LoRaMacParserData>
 8016b7c:	1e03      	subs	r3, r0, #0
 8016b7e:	d001      	beq.n	8016b84 <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016b80:	2310      	movs	r3, #16
 8016b82:	e08d      	b.n	8016ca0 <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016b84:	2515      	movs	r5, #21
 8016b86:	197c      	adds	r4, r7, r5
 8016b88:	2310      	movs	r3, #16
 8016b8a:	18fa      	adds	r2, r7, r3
 8016b8c:	230f      	movs	r3, #15
 8016b8e:	18fb      	adds	r3, r7, r3
 8016b90:	781b      	ldrb	r3, [r3, #0]
 8016b92:	0011      	movs	r1, r2
 8016b94:	0018      	movs	r0, r3
 8016b96:	f7ff f9e5 	bl	8015f64 <GetKeyAddrItem>
 8016b9a:	0003      	movs	r3, r0
 8016b9c:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016b9e:	197b      	adds	r3, r7, r5
 8016ba0:	781b      	ldrb	r3, [r3, #0]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d003      	beq.n	8016bae <LoRaMacCryptoUnsecureMessage+0x9a>
    {
        return retval;
 8016ba6:	2315      	movs	r3, #21
 8016ba8:	18fb      	adds	r3, r7, r3
 8016baa:	781b      	ldrb	r3, [r3, #0]
 8016bac:	e078      	b.n	8016ca0 <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8016bae:	693a      	ldr	r2, [r7, #16]
 8016bb0:	2317      	movs	r3, #23
 8016bb2:	18fb      	adds	r3, r7, r3
 8016bb4:	7852      	ldrb	r2, [r2, #1]
 8016bb6:	701a      	strb	r2, [r3, #0]
    micComputationKeyID = curItem->NwkSkey;
 8016bb8:	693a      	ldr	r2, [r7, #16]
 8016bba:	2314      	movs	r3, #20
 8016bbc:	18fb      	adds	r3, r7, r3
 8016bbe:	7892      	ldrb	r2, [r2, #2]
 8016bc0:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8016bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bc4:	689b      	ldr	r3, [r3, #8]
 8016bc6:	68ba      	ldr	r2, [r7, #8]
 8016bc8:	429a      	cmp	r2, r3
 8016bca:	d001      	beq.n	8016bd0 <LoRaMacCryptoUnsecureMessage+0xbc>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8016bcc:	2302      	movs	r3, #2
 8016bce:	e067      	b.n	8016ca0 <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8016bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bd2:	7b1b      	ldrb	r3, [r3, #12]
 8016bd4:	069b      	lsls	r3, r3, #26
 8016bd6:	0fdb      	lsrs	r3, r3, #31
 8016bd8:	b2db      	uxtb	r3, r3
 8016bda:	001a      	movs	r2, r3
 8016bdc:	2316      	movs	r3, #22
 8016bde:	18fb      	adds	r3, r7, r3
 8016be0:	1e51      	subs	r1, r2, #1
 8016be2:	418a      	sbcs	r2, r1
 8016be4:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8016be6:	4b30      	ldr	r3, [pc, #192]	; (8016ca8 <LoRaMacCryptoUnsecureMessage+0x194>)
 8016be8:	685b      	ldr	r3, [r3, #4]
 8016bea:	789b      	ldrb	r3, [r3, #2]
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d103      	bne.n	8016bf8 <LoRaMacCryptoUnsecureMessage+0xe4>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8016bf0:	2316      	movs	r3, #22
 8016bf2:	18fb      	adds	r3, r7, r3
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8016bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bfa:	6818      	ldr	r0, [r3, #0]
 8016bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bfe:	791b      	ldrb	r3, [r3, #4]
 8016c00:	b29b      	uxth	r3, r3
 8016c02:	3b04      	subs	r3, #4
 8016c04:	b299      	uxth	r1, r3
 8016c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c0a:	2615      	movs	r6, #21
 8016c0c:	19bc      	adds	r4, r7, r6
 8016c0e:	2216      	movs	r2, #22
 8016c10:	18ba      	adds	r2, r7, r2
 8016c12:	7815      	ldrb	r5, [r2, #0]
 8016c14:	2214      	movs	r2, #20
 8016c16:	18ba      	adds	r2, r7, r2
 8016c18:	7812      	ldrb	r2, [r2, #0]
 8016c1a:	9303      	str	r3, [sp, #12]
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	9302      	str	r3, [sp, #8]
 8016c20:	68bb      	ldr	r3, [r7, #8]
 8016c22:	9301      	str	r3, [sp, #4]
 8016c24:	2301      	movs	r3, #1
 8016c26:	9300      	str	r3, [sp, #0]
 8016c28:	002b      	movs	r3, r5
 8016c2a:	f7ff f8e9 	bl	8015e00 <VerifyCmacB0>
 8016c2e:	0003      	movs	r3, r0
 8016c30:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016c32:	19bb      	adds	r3, r7, r6
 8016c34:	781b      	ldrb	r3, [r3, #0]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d003      	beq.n	8016c42 <LoRaMacCryptoUnsecureMessage+0x12e>
    {
        return retval;
 8016c3a:	2315      	movs	r3, #21
 8016c3c:	18fb      	adds	r3, r7, r3
 8016c3e:	781b      	ldrb	r3, [r3, #0]
 8016c40:	e02e      	b.n	8016ca0 <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8016c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c44:	2220      	movs	r2, #32
 8016c46:	5c9b      	ldrb	r3, [r3, r2]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d103      	bne.n	8016c54 <LoRaMacCryptoUnsecureMessage+0x140>
    {
        // Use network session encryption key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8016c4c:	2317      	movs	r3, #23
 8016c4e:	18fb      	adds	r3, r7, r3
 8016c50:	2207      	movs	r2, #7
 8016c52:	701a      	strb	r2, [r3, #0]
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8016c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c56:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c5a:	2228      	movs	r2, #40	; 0x28
 8016c5c:	5c9b      	ldrb	r3, [r3, r2]
 8016c5e:	b219      	sxth	r1, r3
 8016c60:	2615      	movs	r6, #21
 8016c62:	19bc      	adds	r4, r7, r6
 8016c64:	68bd      	ldr	r5, [r7, #8]
 8016c66:	2317      	movs	r3, #23
 8016c68:	18fb      	adds	r3, r7, r3
 8016c6a:	781a      	ldrb	r2, [r3, #0]
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	9301      	str	r3, [sp, #4]
 8016c70:	2301      	movs	r3, #1
 8016c72:	9300      	str	r3, [sp, #0]
 8016c74:	002b      	movs	r3, r5
 8016c76:	f7fe ff27 	bl	8015ac8 <PayloadEncrypt>
 8016c7a:	0003      	movs	r3, r0
 8016c7c:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016c7e:	19bb      	adds	r3, r7, r6
 8016c80:	781b      	ldrb	r3, [r3, #0]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d003      	beq.n	8016c8e <LoRaMacCryptoUnsecureMessage+0x17a>
    {
        return retval;
 8016c86:	2315      	movs	r3, #21
 8016c88:	18fb      	adds	r3, r7, r3
 8016c8a:	781b      	ldrb	r3, [r3, #0]
 8016c8c:	e008      	b.n	8016ca0 <LoRaMacCryptoUnsecureMessage+0x18c>
            return retval;
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8016c8e:	687a      	ldr	r2, [r7, #4]
 8016c90:	230e      	movs	r3, #14
 8016c92:	18fb      	adds	r3, r7, r3
 8016c94:	781b      	ldrb	r3, [r3, #0]
 8016c96:	0011      	movs	r1, r2
 8016c98:	0018      	movs	r0, r3
 8016c9a:	f7ff fa75 	bl	8016188 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8016c9e:	2300      	movs	r3, #0
}
 8016ca0:	0018      	movs	r0, r3
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	b007      	add	sp, #28
 8016ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ca8:	20001084 	.word	0x20001084

08016cac <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b086      	sub	sp, #24
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	0002      	movs	r2, r0
 8016cb4:	1dfb      	adds	r3, r7, #7
 8016cb6:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than GenAppKey for LoRaWAN 1.0.x or AppKey for LoRaWAN 1.1 or later
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 8016cb8:	1dfb      	adds	r3, r7, #7
 8016cba:	781b      	ldrb	r3, [r3, #0]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d104      	bne.n	8016cca <LoRaMacCryptoDeriveMcRootKey+0x1e>
 8016cc0:	4b19      	ldr	r3, [pc, #100]	; (8016d28 <LoRaMacCryptoDeriveMcRootKey+0x7c>)
 8016cc2:	685b      	ldr	r3, [r3, #4]
 8016cc4:	789b      	ldrb	r3, [r3, #2]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d008      	beq.n	8016cdc <LoRaMacCryptoDeriveMcRootKey+0x30>
 8016cca:	1dfb      	adds	r3, r7, #7
 8016ccc:	781b      	ldrb	r3, [r3, #0]
 8016cce:	2b01      	cmp	r3, #1
 8016cd0:	d106      	bne.n	8016ce0 <LoRaMacCryptoDeriveMcRootKey+0x34>
        ( ( keyID == GEN_APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 ) ) )
 8016cd2:	4b15      	ldr	r3, [pc, #84]	; (8016d28 <LoRaMacCryptoDeriveMcRootKey+0x7c>)
 8016cd4:	685b      	ldr	r3, [r3, #4]
 8016cd6:	789b      	ldrb	r3, [r3, #2]
 8016cd8:	2b01      	cmp	r3, #1
 8016cda:	d101      	bne.n	8016ce0 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016cdc:	230b      	movs	r3, #11
 8016cde:	e01f      	b.n	8016d20 <LoRaMacCryptoDeriveMcRootKey+0x74>
    }
    uint8_t compBase[16] = { 0 };
 8016ce0:	2308      	movs	r3, #8
 8016ce2:	18fb      	adds	r3, r7, r3
 8016ce4:	0018      	movs	r0, r3
 8016ce6:	2310      	movs	r3, #16
 8016ce8:	001a      	movs	r2, r3
 8016cea:	2100      	movs	r1, #0
 8016cec:	f004 fd24 	bl	801b738 <memset>

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 8016cf0:	4b0d      	ldr	r3, [pc, #52]	; (8016d28 <LoRaMacCryptoDeriveMcRootKey+0x7c>)
 8016cf2:	685b      	ldr	r3, [r3, #4]
 8016cf4:	789b      	ldrb	r3, [r3, #2]
 8016cf6:	2b01      	cmp	r3, #1
 8016cf8:	d103      	bne.n	8016d02 <LoRaMacCryptoDeriveMcRootKey+0x56>
    {
        compBase[0] = 0x20;
 8016cfa:	2308      	movs	r3, #8
 8016cfc:	18fb      	adds	r3, r7, r3
 8016cfe:	2220      	movs	r2, #32
 8016d00:	701a      	strb	r2, [r3, #0]
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8016d02:	4b09      	ldr	r3, [pc, #36]	; (8016d28 <LoRaMacCryptoDeriveMcRootKey+0x7c>)
 8016d04:	685b      	ldr	r3, [r3, #4]
 8016d06:	1dfa      	adds	r2, r7, #7
 8016d08:	7812      	ldrb	r2, [r2, #0]
 8016d0a:	2108      	movs	r1, #8
 8016d0c:	1879      	adds	r1, r7, r1
 8016d0e:	6818      	ldr	r0, [r3, #0]
 8016d10:	2309      	movs	r3, #9
 8016d12:	f7f8 fb4f 	bl	800f3b4 <SecureElementDeriveAndStoreKey>
 8016d16:	1e03      	subs	r3, r0, #0
 8016d18:	d001      	beq.n	8016d1e <LoRaMacCryptoDeriveMcRootKey+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016d1a:	230f      	movs	r3, #15
 8016d1c:	e000      	b.n	8016d20 <LoRaMacCryptoDeriveMcRootKey+0x74>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016d1e:	2300      	movs	r3, #0
}
 8016d20:	0018      	movs	r0, r3
 8016d22:	46bd      	mov	sp, r7
 8016d24:	b006      	add	sp, #24
 8016d26:	bd80      	pop	{r7, pc}
 8016d28:	20001084 	.word	0x20001084

08016d2c <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8016d2c:	b590      	push	{r4, r7, lr}
 8016d2e:	b087      	sub	sp, #28
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	0002      	movs	r2, r0
 8016d34:	1dfb      	adds	r3, r7, #7
 8016d36:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8016d38:	1dfb      	adds	r3, r7, #7
 8016d3a:	781b      	ldrb	r3, [r3, #0]
 8016d3c:	2b09      	cmp	r3, #9
 8016d3e:	d001      	beq.n	8016d44 <LoRaMacCryptoDeriveMcKEKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016d40:	230b      	movs	r3, #11
 8016d42:	e015      	b.n	8016d70 <LoRaMacCryptoDeriveMcKEKey+0x44>
    }
    uint8_t compBase[16] = { 0 };
 8016d44:	2408      	movs	r4, #8
 8016d46:	193b      	adds	r3, r7, r4
 8016d48:	0018      	movs	r0, r3
 8016d4a:	2310      	movs	r3, #16
 8016d4c:	001a      	movs	r2, r3
 8016d4e:	2100      	movs	r1, #0
 8016d50:	f004 fcf2 	bl	801b738 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8016d54:	4b08      	ldr	r3, [pc, #32]	; (8016d78 <LoRaMacCryptoDeriveMcKEKey+0x4c>)
 8016d56:	685b      	ldr	r3, [r3, #4]
 8016d58:	1dfa      	adds	r2, r7, #7
 8016d5a:	7812      	ldrb	r2, [r2, #0]
 8016d5c:	1939      	adds	r1, r7, r4
 8016d5e:	6818      	ldr	r0, [r3, #0]
 8016d60:	237f      	movs	r3, #127	; 0x7f
 8016d62:	f7f8 fb27 	bl	800f3b4 <SecureElementDeriveAndStoreKey>
 8016d66:	1e03      	subs	r3, r0, #0
 8016d68:	d001      	beq.n	8016d6e <LoRaMacCryptoDeriveMcKEKey+0x42>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016d6a:	230f      	movs	r3, #15
 8016d6c:	e000      	b.n	8016d70 <LoRaMacCryptoDeriveMcKEKey+0x44>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016d6e:	2300      	movs	r3, #0
}
 8016d70:	0018      	movs	r0, r3
 8016d72:	46bd      	mov	sp, r7
 8016d74:	b007      	add	sp, #28
 8016d76:	bd90      	pop	{r4, r7, pc}
 8016d78:	20001084 	.word	0x20001084

08016d7c <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8016d7c:	b590      	push	{r4, r7, lr}
 8016d7e:	b085      	sub	sp, #20
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d003      	beq.n	8016d92 <LoRaMacParserJoinAccept+0x16>
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d101      	bne.n	8016d96 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016d92:	2302      	movs	r3, #2
 8016d94:	e0df      	b.n	8016f56 <LoRaMacParserJoinAccept+0x1da>
    }

    uint16_t bufItr = 0;
 8016d96:	240e      	movs	r4, #14
 8016d98:	193b      	adds	r3, r7, r4
 8016d9a:	2200      	movs	r2, #0
 8016d9c:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	681a      	ldr	r2, [r3, #0]
 8016da2:	193b      	adds	r3, r7, r4
 8016da4:	881b      	ldrh	r3, [r3, #0]
 8016da6:	1939      	adds	r1, r7, r4
 8016da8:	1c58      	adds	r0, r3, #1
 8016daa:	8008      	strh	r0, [r1, #0]
 8016dac:	18d3      	adds	r3, r2, r3
 8016dae:	781a      	ldrb	r2, [r3, #0]
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	1d98      	adds	r0, r3, #6
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	681a      	ldr	r2, [r3, #0]
 8016dbc:	193b      	adds	r3, r7, r4
 8016dbe:	881b      	ldrh	r3, [r3, #0]
 8016dc0:	18d3      	adds	r3, r2, r3
 8016dc2:	2203      	movs	r2, #3
 8016dc4:	0019      	movs	r1, r3
 8016dc6:	f004 fc33 	bl	801b630 <memcpy1>
    bufItr = bufItr + 3;
 8016dca:	193b      	adds	r3, r7, r4
 8016dcc:	193a      	adds	r2, r7, r4
 8016dce:	8812      	ldrh	r2, [r2, #0]
 8016dd0:	3203      	adds	r2, #3
 8016dd2:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	3309      	adds	r3, #9
 8016dd8:	0018      	movs	r0, r3
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	681a      	ldr	r2, [r3, #0]
 8016dde:	193b      	adds	r3, r7, r4
 8016de0:	881b      	ldrh	r3, [r3, #0]
 8016de2:	18d3      	adds	r3, r2, r3
 8016de4:	2203      	movs	r2, #3
 8016de6:	0019      	movs	r1, r3
 8016de8:	f004 fc22 	bl	801b630 <memcpy1>
    bufItr = bufItr + 3;
 8016dec:	193b      	adds	r3, r7, r4
 8016dee:	193a      	adds	r2, r7, r4
 8016df0:	8812      	ldrh	r2, [r2, #0]
 8016df2:	3203      	adds	r2, #3
 8016df4:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	681a      	ldr	r2, [r3, #0]
 8016dfa:	193b      	adds	r3, r7, r4
 8016dfc:	881b      	ldrh	r3, [r3, #0]
 8016dfe:	1939      	adds	r1, r7, r4
 8016e00:	1c58      	adds	r0, r3, #1
 8016e02:	8008      	strh	r0, [r1, #0]
 8016e04:	18d3      	adds	r3, r2, r3
 8016e06:	781b      	ldrb	r3, [r3, #0]
 8016e08:	001a      	movs	r2, r3
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	681a      	ldr	r2, [r3, #0]
 8016e12:	193b      	adds	r3, r7, r4
 8016e14:	881b      	ldrh	r3, [r3, #0]
 8016e16:	1939      	adds	r1, r7, r4
 8016e18:	1c58      	adds	r0, r3, #1
 8016e1a:	8008      	strh	r0, [r1, #0]
 8016e1c:	18d3      	adds	r3, r2, r3
 8016e1e:	781b      	ldrb	r3, [r3, #0]
 8016e20:	021a      	lsls	r2, r3, #8
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	68db      	ldr	r3, [r3, #12]
 8016e26:	431a      	orrs	r2, r3
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	681a      	ldr	r2, [r3, #0]
 8016e30:	193b      	adds	r3, r7, r4
 8016e32:	881b      	ldrh	r3, [r3, #0]
 8016e34:	1939      	adds	r1, r7, r4
 8016e36:	1c58      	adds	r0, r3, #1
 8016e38:	8008      	strh	r0, [r1, #0]
 8016e3a:	18d3      	adds	r3, r2, r3
 8016e3c:	781b      	ldrb	r3, [r3, #0]
 8016e3e:	041a      	lsls	r2, r3, #16
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	68db      	ldr	r3, [r3, #12]
 8016e44:	431a      	orrs	r2, r3
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	681a      	ldr	r2, [r3, #0]
 8016e4e:	193b      	adds	r3, r7, r4
 8016e50:	881b      	ldrh	r3, [r3, #0]
 8016e52:	1939      	adds	r1, r7, r4
 8016e54:	1c58      	adds	r0, r3, #1
 8016e56:	8008      	strh	r0, [r1, #0]
 8016e58:	18d3      	adds	r3, r2, r3
 8016e5a:	781b      	ldrb	r3, [r3, #0]
 8016e5c:	061a      	lsls	r2, r3, #24
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	68db      	ldr	r3, [r3, #12]
 8016e62:	431a      	orrs	r2, r3
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	681a      	ldr	r2, [r3, #0]
 8016e6c:	193b      	adds	r3, r7, r4
 8016e6e:	881b      	ldrh	r3, [r3, #0]
 8016e70:	1939      	adds	r1, r7, r4
 8016e72:	1c58      	adds	r0, r3, #1
 8016e74:	8008      	strh	r0, [r1, #0]
 8016e76:	18d3      	adds	r3, r2, r3
 8016e78:	781a      	ldrb	r2, [r3, #0]
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	681a      	ldr	r2, [r3, #0]
 8016e82:	193b      	adds	r3, r7, r4
 8016e84:	881b      	ldrh	r3, [r3, #0]
 8016e86:	1939      	adds	r1, r7, r4
 8016e88:	1c58      	adds	r0, r3, #1
 8016e8a:	8008      	strh	r0, [r1, #0]
 8016e8c:	18d3      	adds	r3, r2, r3
 8016e8e:	781a      	ldrb	r2, [r3, #0]
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	791b      	ldrb	r3, [r3, #4]
 8016e98:	1f1a      	subs	r2, r3, #4
 8016e9a:	193b      	adds	r3, r7, r4
 8016e9c:	881b      	ldrh	r3, [r3, #0]
 8016e9e:	1ad3      	subs	r3, r2, r3
 8016ea0:	2b10      	cmp	r3, #16
 8016ea2:	d112      	bne.n	8016eca <LoRaMacParserJoinAccept+0x14e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	3312      	adds	r3, #18
 8016ea8:	0018      	movs	r0, r3
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	681a      	ldr	r2, [r3, #0]
 8016eae:	240e      	movs	r4, #14
 8016eb0:	193b      	adds	r3, r7, r4
 8016eb2:	881b      	ldrh	r3, [r3, #0]
 8016eb4:	18d3      	adds	r3, r2, r3
 8016eb6:	2210      	movs	r2, #16
 8016eb8:	0019      	movs	r1, r3
 8016eba:	f004 fbb9 	bl	801b630 <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 8016ebe:	193b      	adds	r3, r7, r4
 8016ec0:	193a      	adds	r2, r7, r4
 8016ec2:	8812      	ldrh	r2, [r2, #0]
 8016ec4:	3210      	adds	r2, #16
 8016ec6:	801a      	strh	r2, [r3, #0]
 8016ec8:	e00a      	b.n	8016ee0 <LoRaMacParserJoinAccept+0x164>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	791b      	ldrb	r3, [r3, #4]
 8016ece:	1f1a      	subs	r2, r3, #4
 8016ed0:	230e      	movs	r3, #14
 8016ed2:	18fb      	adds	r3, r7, r3
 8016ed4:	881b      	ldrh	r3, [r3, #0]
 8016ed6:	1ad3      	subs	r3, r2, r3
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	dd01      	ble.n	8016ee0 <LoRaMacParserJoinAccept+0x164>
    {
        return LORAMAC_PARSER_FAIL;
 8016edc:	2301      	movs	r3, #1
 8016ede:	e03a      	b.n	8016f56 <LoRaMacParserJoinAccept+0x1da>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	681a      	ldr	r2, [r3, #0]
 8016ee4:	240e      	movs	r4, #14
 8016ee6:	193b      	adds	r3, r7, r4
 8016ee8:	881b      	ldrh	r3, [r3, #0]
 8016eea:	1939      	adds	r1, r7, r4
 8016eec:	1c58      	adds	r0, r3, #1
 8016eee:	8008      	strh	r0, [r1, #0]
 8016ef0:	18d3      	adds	r3, r2, r3
 8016ef2:	781b      	ldrb	r3, [r3, #0]
 8016ef4:	001a      	movs	r2, r3
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	681a      	ldr	r2, [r3, #0]
 8016efe:	193b      	adds	r3, r7, r4
 8016f00:	881b      	ldrh	r3, [r3, #0]
 8016f02:	1939      	adds	r1, r7, r4
 8016f04:	1c58      	adds	r0, r3, #1
 8016f06:	8008      	strh	r0, [r1, #0]
 8016f08:	18d3      	adds	r3, r2, r3
 8016f0a:	781b      	ldrb	r3, [r3, #0]
 8016f0c:	021a      	lsls	r2, r3, #8
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f12:	431a      	orrs	r2, r3
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	681a      	ldr	r2, [r3, #0]
 8016f1c:	193b      	adds	r3, r7, r4
 8016f1e:	881b      	ldrh	r3, [r3, #0]
 8016f20:	1939      	adds	r1, r7, r4
 8016f22:	1c58      	adds	r0, r3, #1
 8016f24:	8008      	strh	r0, [r1, #0]
 8016f26:	18d3      	adds	r3, r2, r3
 8016f28:	781b      	ldrb	r3, [r3, #0]
 8016f2a:	041a      	lsls	r2, r3, #16
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f30:	431a      	orrs	r2, r3
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	681a      	ldr	r2, [r3, #0]
 8016f3a:	193b      	adds	r3, r7, r4
 8016f3c:	881b      	ldrh	r3, [r3, #0]
 8016f3e:	1939      	adds	r1, r7, r4
 8016f40:	1c58      	adds	r0, r3, #1
 8016f42:	8008      	strh	r0, [r1, #0]
 8016f44:	18d3      	adds	r3, r2, r3
 8016f46:	781b      	ldrb	r3, [r3, #0]
 8016f48:	061a      	lsls	r2, r3, #24
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f4e:	431a      	orrs	r2, r3
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8016f54:	2300      	movs	r3, #0
}
 8016f56:	0018      	movs	r0, r3
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	b005      	add	sp, #20
 8016f5c:	bd90      	pop	{r4, r7, pc}

08016f5e <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8016f5e:	b590      	push	{r4, r7, lr}
 8016f60:	b085      	sub	sp, #20
 8016f62:	af00      	add	r7, sp, #0
 8016f64:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d003      	beq.n	8016f74 <LoRaMacParserData+0x16>
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d101      	bne.n	8016f78 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016f74:	2302      	movs	r3, #2
 8016f76:	e100      	b.n	801717a <LoRaMacParserData+0x21c>
    }

    uint16_t bufItr = 0;
 8016f78:	240e      	movs	r4, #14
 8016f7a:	193b      	adds	r3, r7, r4
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	681a      	ldr	r2, [r3, #0]
 8016f84:	193b      	adds	r3, r7, r4
 8016f86:	881b      	ldrh	r3, [r3, #0]
 8016f88:	1939      	adds	r1, r7, r4
 8016f8a:	1c58      	adds	r0, r3, #1
 8016f8c:	8008      	strh	r0, [r1, #0]
 8016f8e:	18d3      	adds	r3, r2, r3
 8016f90:	781a      	ldrb	r2, [r3, #0]
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	681a      	ldr	r2, [r3, #0]
 8016f9a:	193b      	adds	r3, r7, r4
 8016f9c:	881b      	ldrh	r3, [r3, #0]
 8016f9e:	1939      	adds	r1, r7, r4
 8016fa0:	1c58      	adds	r0, r3, #1
 8016fa2:	8008      	strh	r0, [r1, #0]
 8016fa4:	18d3      	adds	r3, r2, r3
 8016fa6:	781b      	ldrb	r3, [r3, #0]
 8016fa8:	001a      	movs	r2, r3
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	681a      	ldr	r2, [r3, #0]
 8016fb2:	193b      	adds	r3, r7, r4
 8016fb4:	881b      	ldrh	r3, [r3, #0]
 8016fb6:	1939      	adds	r1, r7, r4
 8016fb8:	1c58      	adds	r0, r3, #1
 8016fba:	8008      	strh	r0, [r1, #0]
 8016fbc:	18d3      	adds	r3, r2, r3
 8016fbe:	781b      	ldrb	r3, [r3, #0]
 8016fc0:	021a      	lsls	r2, r3, #8
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	689b      	ldr	r3, [r3, #8]
 8016fc6:	431a      	orrs	r2, r3
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	681a      	ldr	r2, [r3, #0]
 8016fd0:	193b      	adds	r3, r7, r4
 8016fd2:	881b      	ldrh	r3, [r3, #0]
 8016fd4:	1939      	adds	r1, r7, r4
 8016fd6:	1c58      	adds	r0, r3, #1
 8016fd8:	8008      	strh	r0, [r1, #0]
 8016fda:	18d3      	adds	r3, r2, r3
 8016fdc:	781b      	ldrb	r3, [r3, #0]
 8016fde:	041a      	lsls	r2, r3, #16
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	689b      	ldr	r3, [r3, #8]
 8016fe4:	431a      	orrs	r2, r3
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681a      	ldr	r2, [r3, #0]
 8016fee:	193b      	adds	r3, r7, r4
 8016ff0:	881b      	ldrh	r3, [r3, #0]
 8016ff2:	1939      	adds	r1, r7, r4
 8016ff4:	1c58      	adds	r0, r3, #1
 8016ff6:	8008      	strh	r0, [r1, #0]
 8016ff8:	18d3      	adds	r3, r2, r3
 8016ffa:	781b      	ldrb	r3, [r3, #0]
 8016ffc:	061a      	lsls	r2, r3, #24
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	689b      	ldr	r3, [r3, #8]
 8017002:	431a      	orrs	r2, r3
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	681a      	ldr	r2, [r3, #0]
 801700c:	193b      	adds	r3, r7, r4
 801700e:	881b      	ldrh	r3, [r3, #0]
 8017010:	1939      	adds	r1, r7, r4
 8017012:	1c58      	adds	r0, r3, #1
 8017014:	8008      	strh	r0, [r1, #0]
 8017016:	18d3      	adds	r3, r2, r3
 8017018:	781a      	ldrb	r2, [r3, #0]
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	681a      	ldr	r2, [r3, #0]
 8017022:	193b      	adds	r3, r7, r4
 8017024:	881b      	ldrh	r3, [r3, #0]
 8017026:	1939      	adds	r1, r7, r4
 8017028:	1c58      	adds	r0, r3, #1
 801702a:	8008      	strh	r0, [r1, #0]
 801702c:	18d3      	adds	r3, r2, r3
 801702e:	781b      	ldrb	r3, [r3, #0]
 8017030:	b29a      	uxth	r2, r3
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	681a      	ldr	r2, [r3, #0]
 801703a:	193b      	adds	r3, r7, r4
 801703c:	881b      	ldrh	r3, [r3, #0]
 801703e:	1939      	adds	r1, r7, r4
 8017040:	1c58      	adds	r0, r3, #1
 8017042:	8008      	strh	r0, [r1, #0]
 8017044:	18d3      	adds	r3, r2, r3
 8017046:	781b      	ldrb	r3, [r3, #0]
 8017048:	0219      	lsls	r1, r3, #8
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	89db      	ldrh	r3, [r3, #14]
 801704e:	b21a      	sxth	r2, r3
 8017050:	b20b      	sxth	r3, r1
 8017052:	4313      	orrs	r3, r2
 8017054:	b21b      	sxth	r3, r3
 8017056:	b29a      	uxth	r2, r3
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	3310      	adds	r3, #16
 8017060:	0018      	movs	r0, r3
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	681a      	ldr	r2, [r3, #0]
 8017066:	193b      	adds	r3, r7, r4
 8017068:	881b      	ldrh	r3, [r3, #0]
 801706a:	18d1      	adds	r1, r2, r3
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	7b1b      	ldrb	r3, [r3, #12]
 8017070:	071b      	lsls	r3, r3, #28
 8017072:	0f1b      	lsrs	r3, r3, #28
 8017074:	b2db      	uxtb	r3, r3
 8017076:	b29b      	uxth	r3, r3
 8017078:	001a      	movs	r2, r3
 801707a:	f004 fad9 	bl	801b630 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	7b1b      	ldrb	r3, [r3, #12]
 8017082:	071b      	lsls	r3, r3, #28
 8017084:	0f1b      	lsrs	r3, r3, #28
 8017086:	b2db      	uxtb	r3, r3
 8017088:	b299      	uxth	r1, r3
 801708a:	193b      	adds	r3, r7, r4
 801708c:	193a      	adds	r2, r7, r4
 801708e:	8812      	ldrh	r2, [r2, #0]
 8017090:	188a      	adds	r2, r1, r2
 8017092:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	2220      	movs	r2, #32
 8017098:	2100      	movs	r1, #0
 801709a:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	2228      	movs	r2, #40	; 0x28
 80170a0:	2100      	movs	r1, #0
 80170a2:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	791b      	ldrb	r3, [r3, #4]
 80170a8:	001a      	movs	r2, r3
 80170aa:	193b      	adds	r3, r7, r4
 80170ac:	881b      	ldrh	r3, [r3, #0]
 80170ae:	1ad3      	subs	r3, r2, r3
 80170b0:	3b04      	subs	r3, #4
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	dd2f      	ble.n	8017116 <LoRaMacParserData+0x1b8>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	681a      	ldr	r2, [r3, #0]
 80170ba:	240e      	movs	r4, #14
 80170bc:	193b      	adds	r3, r7, r4
 80170be:	881b      	ldrh	r3, [r3, #0]
 80170c0:	1939      	adds	r1, r7, r4
 80170c2:	1c58      	adds	r0, r3, #1
 80170c4:	8008      	strh	r0, [r1, #0]
 80170c6:	18d3      	adds	r3, r2, r3
 80170c8:	7819      	ldrb	r1, [r3, #0]
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	2220      	movs	r2, #32
 80170ce:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	791a      	ldrb	r2, [r3, #4]
 80170d4:	193b      	adds	r3, r7, r4
 80170d6:	881b      	ldrh	r3, [r3, #0]
 80170d8:	b2db      	uxtb	r3, r3
 80170da:	1ad3      	subs	r3, r2, r3
 80170dc:	b2db      	uxtb	r3, r3
 80170de:	3b04      	subs	r3, #4
 80170e0:	b2d9      	uxtb	r1, r3
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	2228      	movs	r2, #40	; 0x28
 80170e6:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	681a      	ldr	r2, [r3, #0]
 80170f0:	193b      	adds	r3, r7, r4
 80170f2:	881b      	ldrh	r3, [r3, #0]
 80170f4:	18d1      	adds	r1, r2, r3
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	2228      	movs	r2, #40	; 0x28
 80170fa:	5c9b      	ldrb	r3, [r3, r2]
 80170fc:	b29b      	uxth	r3, r3
 80170fe:	001a      	movs	r2, r3
 8017100:	f004 fa96 	bl	801b630 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	2228      	movs	r2, #40	; 0x28
 8017108:	5c9b      	ldrb	r3, [r3, r2]
 801710a:	b299      	uxth	r1, r3
 801710c:	193b      	adds	r3, r7, r4
 801710e:	193a      	adds	r2, r7, r4
 8017110:	8812      	ldrh	r2, [r2, #0]
 8017112:	188a      	adds	r2, r1, r2
 8017114:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	681a      	ldr	r2, [r3, #0]
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	791b      	ldrb	r3, [r3, #4]
 801711e:	3b04      	subs	r3, #4
 8017120:	18d3      	adds	r3, r2, r3
 8017122:	781b      	ldrb	r3, [r3, #0]
 8017124:	001a      	movs	r2, r3
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	6819      	ldr	r1, [r3, #0]
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	791b      	ldrb	r3, [r3, #4]
 8017136:	3b03      	subs	r3, #3
 8017138:	18cb      	adds	r3, r1, r3
 801713a:	781b      	ldrb	r3, [r3, #0]
 801713c:	021b      	lsls	r3, r3, #8
 801713e:	431a      	orrs	r2, r3
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	6819      	ldr	r1, [r3, #0]
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	791b      	ldrb	r3, [r3, #4]
 8017150:	3b02      	subs	r3, #2
 8017152:	18cb      	adds	r3, r1, r3
 8017154:	781b      	ldrb	r3, [r3, #0]
 8017156:	041b      	lsls	r3, r3, #16
 8017158:	431a      	orrs	r2, r3
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	6819      	ldr	r1, [r3, #0]
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	791b      	ldrb	r3, [r3, #4]
 801716a:	3b01      	subs	r3, #1
 801716c:	18cb      	adds	r3, r1, r3
 801716e:	781b      	ldrb	r3, [r3, #0]
 8017170:	061b      	lsls	r3, r3, #24
 8017172:	431a      	orrs	r2, r3
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8017178:	2300      	movs	r3, #0
}
 801717a:	0018      	movs	r0, r3
 801717c:	46bd      	mov	sp, r7
 801717e:	b005      	add	sp, #20
 8017180:	bd90      	pop	{r4, r7, pc}

08017182 <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8017182:	b5b0      	push	{r4, r5, r7, lr}
 8017184:	b084      	sub	sp, #16
 8017186:	af00      	add	r7, sp, #0
 8017188:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d003      	beq.n	8017198 <LoRaMacSerializerJoinRequest+0x16>
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	2b00      	cmp	r3, #0
 8017196:	d101      	bne.n	801719c <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017198:	2301      	movs	r3, #1
 801719a:	e089      	b.n	80172b0 <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 801719c:	230e      	movs	r3, #14
 801719e:	18fb      	adds	r3, r7, r3
 80171a0:	2200      	movs	r2, #0
 80171a2:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	791b      	ldrb	r3, [r3, #4]
 80171a8:	2b16      	cmp	r3, #22
 80171aa:	d801      	bhi.n	80171b0 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80171ac:	2302      	movs	r3, #2
 80171ae:	e07f      	b.n	80172b0 <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	681a      	ldr	r2, [r3, #0]
 80171b4:	240e      	movs	r4, #14
 80171b6:	193b      	adds	r3, r7, r4
 80171b8:	881b      	ldrh	r3, [r3, #0]
 80171ba:	1939      	adds	r1, r7, r4
 80171bc:	1c58      	adds	r0, r3, #1
 80171be:	8008      	strh	r0, [r1, #0]
 80171c0:	18d3      	adds	r3, r2, r3
 80171c2:	687a      	ldr	r2, [r7, #4]
 80171c4:	7952      	ldrb	r2, [r2, #5]
 80171c6:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	681a      	ldr	r2, [r3, #0]
 80171cc:	193b      	adds	r3, r7, r4
 80171ce:	881b      	ldrh	r3, [r3, #0]
 80171d0:	18d0      	adds	r0, r2, r3
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	3306      	adds	r3, #6
 80171d6:	2208      	movs	r2, #8
 80171d8:	0019      	movs	r1, r3
 80171da:	f004 fa44 	bl	801b666 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80171de:	193b      	adds	r3, r7, r4
 80171e0:	193a      	adds	r2, r7, r4
 80171e2:	8812      	ldrh	r2, [r2, #0]
 80171e4:	3208      	adds	r2, #8
 80171e6:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	681a      	ldr	r2, [r3, #0]
 80171ec:	193b      	adds	r3, r7, r4
 80171ee:	881b      	ldrh	r3, [r3, #0]
 80171f0:	18d0      	adds	r0, r2, r3
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	330e      	adds	r3, #14
 80171f6:	2208      	movs	r2, #8
 80171f8:	0019      	movs	r1, r3
 80171fa:	f004 fa34 	bl	801b666 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80171fe:	193b      	adds	r3, r7, r4
 8017200:	0025      	movs	r5, r4
 8017202:	193a      	adds	r2, r7, r4
 8017204:	8812      	ldrh	r2, [r2, #0]
 8017206:	3208      	adds	r2, #8
 8017208:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	8ad8      	ldrh	r0, [r3, #22]
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	681a      	ldr	r2, [r3, #0]
 8017212:	197b      	adds	r3, r7, r5
 8017214:	881b      	ldrh	r3, [r3, #0]
 8017216:	1979      	adds	r1, r7, r5
 8017218:	1c5c      	adds	r4, r3, #1
 801721a:	800c      	strh	r4, [r1, #0]
 801721c:	18d3      	adds	r3, r2, r3
 801721e:	b2c2      	uxtb	r2, r0
 8017220:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	8adb      	ldrh	r3, [r3, #22]
 8017226:	0a1b      	lsrs	r3, r3, #8
 8017228:	b298      	uxth	r0, r3
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	681a      	ldr	r2, [r3, #0]
 801722e:	197b      	adds	r3, r7, r5
 8017230:	881b      	ldrh	r3, [r3, #0]
 8017232:	1979      	adds	r1, r7, r5
 8017234:	1c5c      	adds	r4, r3, #1
 8017236:	800c      	strh	r4, [r1, #0]
 8017238:	18d3      	adds	r3, r2, r3
 801723a:	b2c2      	uxtb	r2, r0
 801723c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	6998      	ldr	r0, [r3, #24]
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	681a      	ldr	r2, [r3, #0]
 8017246:	197b      	adds	r3, r7, r5
 8017248:	881b      	ldrh	r3, [r3, #0]
 801724a:	1979      	adds	r1, r7, r5
 801724c:	1c5c      	adds	r4, r3, #1
 801724e:	800c      	strh	r4, [r1, #0]
 8017250:	18d3      	adds	r3, r2, r3
 8017252:	b2c2      	uxtb	r2, r0
 8017254:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	699b      	ldr	r3, [r3, #24]
 801725a:	0a18      	lsrs	r0, r3, #8
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	681a      	ldr	r2, [r3, #0]
 8017260:	197b      	adds	r3, r7, r5
 8017262:	881b      	ldrh	r3, [r3, #0]
 8017264:	1979      	adds	r1, r7, r5
 8017266:	1c5c      	adds	r4, r3, #1
 8017268:	800c      	strh	r4, [r1, #0]
 801726a:	18d3      	adds	r3, r2, r3
 801726c:	b2c2      	uxtb	r2, r0
 801726e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	699b      	ldr	r3, [r3, #24]
 8017274:	0c18      	lsrs	r0, r3, #16
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	681a      	ldr	r2, [r3, #0]
 801727a:	197b      	adds	r3, r7, r5
 801727c:	881b      	ldrh	r3, [r3, #0]
 801727e:	1979      	adds	r1, r7, r5
 8017280:	1c5c      	adds	r4, r3, #1
 8017282:	800c      	strh	r4, [r1, #0]
 8017284:	18d3      	adds	r3, r2, r3
 8017286:	b2c2      	uxtb	r2, r0
 8017288:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	699b      	ldr	r3, [r3, #24]
 801728e:	0e18      	lsrs	r0, r3, #24
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	681a      	ldr	r2, [r3, #0]
 8017294:	197b      	adds	r3, r7, r5
 8017296:	881b      	ldrh	r3, [r3, #0]
 8017298:	1979      	adds	r1, r7, r5
 801729a:	1c5c      	adds	r4, r3, #1
 801729c:	800c      	strh	r4, [r1, #0]
 801729e:	18d3      	adds	r3, r2, r3
 80172a0:	b2c2      	uxtb	r2, r0
 80172a2:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80172a4:	197b      	adds	r3, r7, r5
 80172a6:	881b      	ldrh	r3, [r3, #0]
 80172a8:	b2da      	uxtb	r2, r3
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80172ae:	2300      	movs	r3, #0
}
 80172b0:	0018      	movs	r0, r3
 80172b2:	46bd      	mov	sp, r7
 80172b4:	b004      	add	sp, #16
 80172b6:	bdb0      	pop	{r4, r5, r7, pc}

080172b8 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80172b8:	b5b0      	push	{r4, r5, r7, lr}
 80172ba:	b084      	sub	sp, #16
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d003      	beq.n	80172ce <LoRaMacSerializerData+0x16>
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d101      	bne.n	80172d2 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80172ce:	2301      	movs	r3, #1
 80172d0:	e11b      	b.n	801750a <LoRaMacSerializerData+0x252>
    }

    uint16_t bufItr = 0;
 80172d2:	230e      	movs	r3, #14
 80172d4:	18fb      	adds	r3, r7, r3
 80172d6:	2200      	movs	r2, #0
 80172d8:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80172da:	200c      	movs	r0, #12
 80172dc:	183b      	adds	r3, r7, r0
 80172de:	2208      	movs	r2, #8
 80172e0:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	7b1b      	ldrb	r3, [r3, #12]
 80172e6:	071b      	lsls	r3, r3, #28
 80172e8:	0f1b      	lsrs	r3, r3, #28
 80172ea:	b2db      	uxtb	r3, r3
 80172ec:	b299      	uxth	r1, r3
 80172ee:	183b      	adds	r3, r7, r0
 80172f0:	183a      	adds	r2, r7, r0
 80172f2:	8812      	ldrh	r2, [r2, #0]
 80172f4:	188a      	adds	r2, r1, r2
 80172f6:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	2228      	movs	r2, #40	; 0x28
 80172fc:	5c9b      	ldrb	r3, [r3, r2]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d005      	beq.n	801730e <LoRaMacSerializerData+0x56>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8017302:	220c      	movs	r2, #12
 8017304:	18bb      	adds	r3, r7, r2
 8017306:	18ba      	adds	r2, r7, r2
 8017308:	8812      	ldrh	r2, [r2, #0]
 801730a:	3201      	adds	r2, #1
 801730c:	801a      	strh	r2, [r3, #0]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	2228      	movs	r2, #40	; 0x28
 8017312:	5c9b      	ldrb	r3, [r3, r2]
 8017314:	b299      	uxth	r1, r3
 8017316:	200c      	movs	r0, #12
 8017318:	183b      	adds	r3, r7, r0
 801731a:	183a      	adds	r2, r7, r0
 801731c:	8812      	ldrh	r2, [r2, #0]
 801731e:	188a      	adds	r2, r1, r2
 8017320:	801a      	strh	r2, [r3, #0]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8017322:	0001      	movs	r1, r0
 8017324:	187b      	adds	r3, r7, r1
 8017326:	187a      	adds	r2, r7, r1
 8017328:	8812      	ldrh	r2, [r2, #0]
 801732a:	3204      	adds	r2, #4
 801732c:	801a      	strh	r2, [r3, #0]

    if( macMsg->BufSize < computedBufSize )
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	791b      	ldrb	r3, [r3, #4]
 8017332:	b29b      	uxth	r3, r3
 8017334:	187a      	adds	r2, r7, r1
 8017336:	8812      	ldrh	r2, [r2, #0]
 8017338:	429a      	cmp	r2, r3
 801733a:	d901      	bls.n	8017340 <LoRaMacSerializerData+0x88>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801733c:	2302      	movs	r3, #2
 801733e:	e0e4      	b.n	801750a <LoRaMacSerializerData+0x252>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	681a      	ldr	r2, [r3, #0]
 8017344:	250e      	movs	r5, #14
 8017346:	197b      	adds	r3, r7, r5
 8017348:	881b      	ldrh	r3, [r3, #0]
 801734a:	1979      	adds	r1, r7, r5
 801734c:	1c58      	adds	r0, r3, #1
 801734e:	8008      	strh	r0, [r1, #0]
 8017350:	18d3      	adds	r3, r2, r3
 8017352:	687a      	ldr	r2, [r7, #4]
 8017354:	7952      	ldrb	r2, [r2, #5]
 8017356:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	6898      	ldr	r0, [r3, #8]
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	681a      	ldr	r2, [r3, #0]
 8017360:	197b      	adds	r3, r7, r5
 8017362:	881b      	ldrh	r3, [r3, #0]
 8017364:	1979      	adds	r1, r7, r5
 8017366:	1c5c      	adds	r4, r3, #1
 8017368:	800c      	strh	r4, [r1, #0]
 801736a:	18d3      	adds	r3, r2, r3
 801736c:	b2c2      	uxtb	r2, r0
 801736e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	689b      	ldr	r3, [r3, #8]
 8017374:	0a18      	lsrs	r0, r3, #8
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	681a      	ldr	r2, [r3, #0]
 801737a:	197b      	adds	r3, r7, r5
 801737c:	881b      	ldrh	r3, [r3, #0]
 801737e:	1979      	adds	r1, r7, r5
 8017380:	1c5c      	adds	r4, r3, #1
 8017382:	800c      	strh	r4, [r1, #0]
 8017384:	18d3      	adds	r3, r2, r3
 8017386:	b2c2      	uxtb	r2, r0
 8017388:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	689b      	ldr	r3, [r3, #8]
 801738e:	0c18      	lsrs	r0, r3, #16
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	681a      	ldr	r2, [r3, #0]
 8017394:	197b      	adds	r3, r7, r5
 8017396:	881b      	ldrh	r3, [r3, #0]
 8017398:	1979      	adds	r1, r7, r5
 801739a:	1c5c      	adds	r4, r3, #1
 801739c:	800c      	strh	r4, [r1, #0]
 801739e:	18d3      	adds	r3, r2, r3
 80173a0:	b2c2      	uxtb	r2, r0
 80173a2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	689b      	ldr	r3, [r3, #8]
 80173a8:	0e18      	lsrs	r0, r3, #24
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	681a      	ldr	r2, [r3, #0]
 80173ae:	197b      	adds	r3, r7, r5
 80173b0:	881b      	ldrh	r3, [r3, #0]
 80173b2:	1979      	adds	r1, r7, r5
 80173b4:	1c5c      	adds	r4, r3, #1
 80173b6:	800c      	strh	r4, [r1, #0]
 80173b8:	18d3      	adds	r3, r2, r3
 80173ba:	b2c2      	uxtb	r2, r0
 80173bc:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	681a      	ldr	r2, [r3, #0]
 80173c2:	197b      	adds	r3, r7, r5
 80173c4:	881b      	ldrh	r3, [r3, #0]
 80173c6:	1979      	adds	r1, r7, r5
 80173c8:	1c58      	adds	r0, r3, #1
 80173ca:	8008      	strh	r0, [r1, #0]
 80173cc:	18d3      	adds	r3, r2, r3
 80173ce:	687a      	ldr	r2, [r7, #4]
 80173d0:	7b12      	ldrb	r2, [r2, #12]
 80173d2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	89d8      	ldrh	r0, [r3, #14]
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	681a      	ldr	r2, [r3, #0]
 80173dc:	197b      	adds	r3, r7, r5
 80173de:	881b      	ldrh	r3, [r3, #0]
 80173e0:	1979      	adds	r1, r7, r5
 80173e2:	1c5c      	adds	r4, r3, #1
 80173e4:	800c      	strh	r4, [r1, #0]
 80173e6:	18d3      	adds	r3, r2, r3
 80173e8:	b2c2      	uxtb	r2, r0
 80173ea:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	89db      	ldrh	r3, [r3, #14]
 80173f0:	0a1b      	lsrs	r3, r3, #8
 80173f2:	b298      	uxth	r0, r3
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	681a      	ldr	r2, [r3, #0]
 80173f8:	197b      	adds	r3, r7, r5
 80173fa:	881b      	ldrh	r3, [r3, #0]
 80173fc:	1979      	adds	r1, r7, r5
 80173fe:	1c5c      	adds	r4, r3, #1
 8017400:	800c      	strh	r4, [r1, #0]
 8017402:	18d3      	adds	r3, r2, r3
 8017404:	b2c2      	uxtb	r2, r0
 8017406:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	681a      	ldr	r2, [r3, #0]
 801740c:	002c      	movs	r4, r5
 801740e:	197b      	adds	r3, r7, r5
 8017410:	881b      	ldrh	r3, [r3, #0]
 8017412:	18d0      	adds	r0, r2, r3
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	3310      	adds	r3, #16
 8017418:	0019      	movs	r1, r3
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	7b1b      	ldrb	r3, [r3, #12]
 801741e:	071b      	lsls	r3, r3, #28
 8017420:	0f1b      	lsrs	r3, r3, #28
 8017422:	b2db      	uxtb	r3, r3
 8017424:	b29b      	uxth	r3, r3
 8017426:	001a      	movs	r2, r3
 8017428:	f004 f902 	bl	801b630 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	7b1b      	ldrb	r3, [r3, #12]
 8017430:	071b      	lsls	r3, r3, #28
 8017432:	0f1b      	lsrs	r3, r3, #28
 8017434:	b2db      	uxtb	r3, r3
 8017436:	b299      	uxth	r1, r3
 8017438:	193b      	adds	r3, r7, r4
 801743a:	193a      	adds	r2, r7, r4
 801743c:	8812      	ldrh	r2, [r2, #0]
 801743e:	188a      	adds	r2, r1, r2
 8017440:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	2228      	movs	r2, #40	; 0x28
 8017446:	5c9b      	ldrb	r3, [r3, r2]
 8017448:	2b00      	cmp	r3, #0
 801744a:	d00c      	beq.n	8017466 <LoRaMacSerializerData+0x1ae>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	681a      	ldr	r2, [r3, #0]
 8017450:	210e      	movs	r1, #14
 8017452:	187b      	adds	r3, r7, r1
 8017454:	881b      	ldrh	r3, [r3, #0]
 8017456:	1879      	adds	r1, r7, r1
 8017458:	1c58      	adds	r0, r3, #1
 801745a:	8008      	strh	r0, [r1, #0]
 801745c:	18d3      	adds	r3, r2, r3
 801745e:	687a      	ldr	r2, [r7, #4]
 8017460:	2120      	movs	r1, #32
 8017462:	5c52      	ldrb	r2, [r2, r1]
 8017464:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	681a      	ldr	r2, [r3, #0]
 801746a:	240e      	movs	r4, #14
 801746c:	193b      	adds	r3, r7, r4
 801746e:	881b      	ldrh	r3, [r3, #0]
 8017470:	18d0      	adds	r0, r2, r3
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	2228      	movs	r2, #40	; 0x28
 801747a:	5c9b      	ldrb	r3, [r3, r2]
 801747c:	b29b      	uxth	r3, r3
 801747e:	001a      	movs	r2, r3
 8017480:	f004 f8d6 	bl	801b630 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	2228      	movs	r2, #40	; 0x28
 8017488:	5c9b      	ldrb	r3, [r3, r2]
 801748a:	b299      	uxth	r1, r3
 801748c:	193b      	adds	r3, r7, r4
 801748e:	193a      	adds	r2, r7, r4
 8017490:	8812      	ldrh	r2, [r2, #0]
 8017492:	188a      	adds	r2, r1, r2
 8017494:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	681a      	ldr	r2, [r3, #0]
 801749e:	193b      	adds	r3, r7, r4
 80174a0:	881b      	ldrh	r3, [r3, #0]
 80174a2:	0025      	movs	r5, r4
 80174a4:	1939      	adds	r1, r7, r4
 80174a6:	1c5c      	adds	r4, r3, #1
 80174a8:	800c      	strh	r4, [r1, #0]
 80174aa:	18d3      	adds	r3, r2, r3
 80174ac:	b2c2      	uxtb	r2, r0
 80174ae:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174b4:	0a18      	lsrs	r0, r3, #8
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	681a      	ldr	r2, [r3, #0]
 80174ba:	197b      	adds	r3, r7, r5
 80174bc:	881b      	ldrh	r3, [r3, #0]
 80174be:	1979      	adds	r1, r7, r5
 80174c0:	1c5c      	adds	r4, r3, #1
 80174c2:	800c      	strh	r4, [r1, #0]
 80174c4:	18d3      	adds	r3, r2, r3
 80174c6:	b2c2      	uxtb	r2, r0
 80174c8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174ce:	0c18      	lsrs	r0, r3, #16
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	681a      	ldr	r2, [r3, #0]
 80174d4:	197b      	adds	r3, r7, r5
 80174d6:	881b      	ldrh	r3, [r3, #0]
 80174d8:	1979      	adds	r1, r7, r5
 80174da:	1c5c      	adds	r4, r3, #1
 80174dc:	800c      	strh	r4, [r1, #0]
 80174de:	18d3      	adds	r3, r2, r3
 80174e0:	b2c2      	uxtb	r2, r0
 80174e2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174e8:	0e18      	lsrs	r0, r3, #24
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	681a      	ldr	r2, [r3, #0]
 80174ee:	197b      	adds	r3, r7, r5
 80174f0:	881b      	ldrh	r3, [r3, #0]
 80174f2:	1979      	adds	r1, r7, r5
 80174f4:	1c5c      	adds	r4, r3, #1
 80174f6:	800c      	strh	r4, [r1, #0]
 80174f8:	18d3      	adds	r3, r2, r3
 80174fa:	b2c2      	uxtb	r2, r0
 80174fc:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80174fe:	197b      	adds	r3, r7, r5
 8017500:	881b      	ldrh	r3, [r3, #0]
 8017502:	b2da      	uxtb	r2, r3
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017508:	2300      	movs	r3, #0
}
 801750a:	0018      	movs	r0, r3
 801750c:	46bd      	mov	sp, r7
 801750e:	b004      	add	sp, #16
 8017510:	bdb0      	pop	{r4, r5, r7, pc}

08017512 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8017512:	b580      	push	{r7, lr}
 8017514:	b082      	sub	sp, #8
 8017516:	af00      	add	r7, sp, #0
 8017518:	0002      	movs	r2, r0
 801751a:	1dfb      	adds	r3, r7, #7
 801751c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801751e:	1dfb      	adds	r3, r7, #7
 8017520:	781b      	ldrb	r3, [r3, #0]
 8017522:	2b07      	cmp	r3, #7
 8017524:	d101      	bne.n	801752a <RegionIsActive+0x18>
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
 8017526:	2301      	movs	r3, #1
 8017528:	e000      	b.n	801752c <RegionIsActive+0x1a>
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801752a:	2300      	movs	r3, #0
        }
    }
}
 801752c:	0018      	movs	r0, r3
 801752e:	46bd      	mov	sp, r7
 8017530:	b002      	add	sp, #8
 8017532:	bd80      	pop	{r7, pc}

08017534 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b084      	sub	sp, #16
 8017538:	af00      	add	r7, sp, #0
 801753a:	0002      	movs	r2, r0
 801753c:	6039      	str	r1, [r7, #0]
 801753e:	1dfb      	adds	r3, r7, #7
 8017540:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 8017542:	2308      	movs	r3, #8
 8017544:	18fb      	adds	r3, r7, r3
 8017546:	2200      	movs	r2, #0
 8017548:	601a      	str	r2, [r3, #0]
    switch( region )
 801754a:	1dfb      	adds	r3, r7, #7
 801754c:	781b      	ldrb	r3, [r3, #0]
 801754e:	2b07      	cmp	r3, #7
 8017550:	d109      	bne.n	8017566 <RegionGetPhyParam+0x32>
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
 8017552:	683b      	ldr	r3, [r7, #0]
 8017554:	0018      	movs	r0, r3
 8017556:	f001 f8cd 	bl	80186f4 <RegionIN865GetPhyParam>
 801755a:	0003      	movs	r3, r0
 801755c:	001a      	movs	r2, r3
 801755e:	230c      	movs	r3, #12
 8017560:	18fb      	adds	r3, r7, r3
 8017562:	601a      	str	r2, [r3, #0]
 8017564:	e005      	b.n	8017572 <RegionGetPhyParam+0x3e>
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8017566:	230c      	movs	r3, #12
 8017568:	18fb      	adds	r3, r7, r3
 801756a:	2208      	movs	r2, #8
 801756c:	18ba      	adds	r2, r7, r2
 801756e:	6812      	ldr	r2, [r2, #0]
 8017570:	601a      	str	r2, [r3, #0]
 8017572:	230c      	movs	r3, #12
 8017574:	18fb      	adds	r3, r7, r3
 8017576:	2200      	movs	r2, #0
 8017578:	681a      	ldr	r2, [r3, #0]
 801757a:	0013      	movs	r3, r2
        }
    }
}
 801757c:	0018      	movs	r0, r3
 801757e:	46bd      	mov	sp, r7
 8017580:	b004      	add	sp, #16
 8017582:	bd80      	pop	{r7, pc}

08017584 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b082      	sub	sp, #8
 8017588:	af00      	add	r7, sp, #0
 801758a:	0002      	movs	r2, r0
 801758c:	6039      	str	r1, [r7, #0]
 801758e:	1dfb      	adds	r3, r7, #7
 8017590:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017592:	1dfb      	adds	r3, r7, #7
 8017594:	781b      	ldrb	r3, [r3, #0]
 8017596:	2b07      	cmp	r3, #7
 8017598:	d000      	beq.n	801759c <RegionSetBandTxDone+0x18>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801759a:	e004      	b.n	80175a6 <RegionSetBandTxDone+0x22>
        IN865_SET_BAND_TX_DONE( );
 801759c:	683b      	ldr	r3, [r7, #0]
 801759e:	0018      	movs	r0, r3
 80175a0:	f001 f9ac 	bl	80188fc <RegionIN865SetBandTxDone>
 80175a4:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80175a6:	46bd      	mov	sp, r7
 80175a8:	b002      	add	sp, #8
 80175aa:	bd80      	pop	{r7, pc}

080175ac <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b082      	sub	sp, #8
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	0002      	movs	r2, r0
 80175b4:	6039      	str	r1, [r7, #0]
 80175b6:	1dfb      	adds	r3, r7, #7
 80175b8:	701a      	strb	r2, [r3, #0]
    switch( region )
 80175ba:	1dfb      	adds	r3, r7, #7
 80175bc:	781b      	ldrb	r3, [r3, #0]
 80175be:	2b07      	cmp	r3, #7
 80175c0:	d000      	beq.n	80175c4 <RegionInitDefaults+0x18>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80175c2:	e004      	b.n	80175ce <RegionInitDefaults+0x22>
        IN865_INIT_DEFAULTS( );
 80175c4:	683b      	ldr	r3, [r7, #0]
 80175c6:	0018      	movs	r0, r3
 80175c8:	f001 f9b8 	bl	801893c <RegionIN865InitDefaults>
 80175cc:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80175ce:	46c0      	nop			; (mov r8, r8)
 80175d0:	46bd      	mov	sp, r7
 80175d2:	b002      	add	sp, #8
 80175d4:	bd80      	pop	{r7, pc}

080175d6 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 80175d6:	b580      	push	{r7, lr}
 80175d8:	b082      	sub	sp, #8
 80175da:	af00      	add	r7, sp, #0
 80175dc:	0002      	movs	r2, r0
 80175de:	6039      	str	r1, [r7, #0]
 80175e0:	1dfb      	adds	r3, r7, #7
 80175e2:	701a      	strb	r2, [r3, #0]
    switch( region )
 80175e4:	1dfb      	adds	r3, r7, #7
 80175e6:	781b      	ldrb	r3, [r3, #0]
 80175e8:	2b07      	cmp	r3, #7
 80175ea:	d105      	bne.n	80175f8 <RegionGetNvmCtx+0x22>
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
        KR920_GET_NVM_CTX( );
        IN865_GET_NVM_CTX( );
 80175ec:	683b      	ldr	r3, [r7, #0]
 80175ee:	0018      	movs	r0, r3
 80175f0:	f001 fa1a 	bl	8018a28 <RegionIN865GetNvmCtx>
 80175f4:	0003      	movs	r3, r0
 80175f6:	e000      	b.n	80175fa <RegionGetNvmCtx+0x24>
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 80175f8:	2300      	movs	r3, #0
        }
    }
}
 80175fa:	0018      	movs	r0, r3
 80175fc:	46bd      	mov	sp, r7
 80175fe:	b002      	add	sp, #8
 8017600:	bd80      	pop	{r7, pc}

08017602 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017602:	b580      	push	{r7, lr}
 8017604:	b082      	sub	sp, #8
 8017606:	af00      	add	r7, sp, #0
 8017608:	6039      	str	r1, [r7, #0]
 801760a:	0011      	movs	r1, r2
 801760c:	1dfb      	adds	r3, r7, #7
 801760e:	1c02      	adds	r2, r0, #0
 8017610:	701a      	strb	r2, [r3, #0]
 8017612:	1dbb      	adds	r3, r7, #6
 8017614:	1c0a      	adds	r2, r1, #0
 8017616:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017618:	1dfb      	adds	r3, r7, #7
 801761a:	781b      	ldrb	r3, [r3, #0]
 801761c:	2b07      	cmp	r3, #7
 801761e:	d108      	bne.n	8017632 <RegionVerify+0x30>
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
        KR920_VERIFY( );
        IN865_VERIFY( );
 8017620:	1dbb      	adds	r3, r7, #6
 8017622:	781a      	ldrb	r2, [r3, #0]
 8017624:	683b      	ldr	r3, [r7, #0]
 8017626:	0011      	movs	r1, r2
 8017628:	0018      	movs	r0, r3
 801762a:	f001 fa0b 	bl	8018a44 <RegionIN865Verify>
 801762e:	0003      	movs	r3, r0
 8017630:	e000      	b.n	8017634 <RegionVerify+0x32>
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8017632:	2300      	movs	r3, #0
        }
    }
}
 8017634:	0018      	movs	r0, r3
 8017636:	46bd      	mov	sp, r7
 8017638:	b002      	add	sp, #8
 801763a:	bd80      	pop	{r7, pc}

0801763c <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801763c:	b580      	push	{r7, lr}
 801763e:	b082      	sub	sp, #8
 8017640:	af00      	add	r7, sp, #0
 8017642:	0002      	movs	r2, r0
 8017644:	6039      	str	r1, [r7, #0]
 8017646:	1dfb      	adds	r3, r7, #7
 8017648:	701a      	strb	r2, [r3, #0]
    switch( region )
 801764a:	1dfb      	adds	r3, r7, #7
 801764c:	781b      	ldrb	r3, [r3, #0]
 801764e:	2b07      	cmp	r3, #7
 8017650:	d000      	beq.n	8017654 <RegionApplyCFList+0x18>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8017652:	e004      	b.n	801765e <RegionApplyCFList+0x22>
        IN865_APPLY_CF_LIST( );
 8017654:	683b      	ldr	r3, [r7, #0]
 8017656:	0018      	movs	r0, r3
 8017658:	f001 fa56 	bl	8018b08 <RegionIN865ApplyCFList>
 801765c:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801765e:	46c0      	nop			; (mov r8, r8)
 8017660:	46bd      	mov	sp, r7
 8017662:	b002      	add	sp, #8
 8017664:	bd80      	pop	{r7, pc}

08017666 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8017666:	b580      	push	{r7, lr}
 8017668:	b082      	sub	sp, #8
 801766a:	af00      	add	r7, sp, #0
 801766c:	0002      	movs	r2, r0
 801766e:	6039      	str	r1, [r7, #0]
 8017670:	1dfb      	adds	r3, r7, #7
 8017672:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017674:	1dfb      	adds	r3, r7, #7
 8017676:	781b      	ldrb	r3, [r3, #0]
 8017678:	2b07      	cmp	r3, #7
 801767a:	d105      	bne.n	8017688 <RegionChanMaskSet+0x22>
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
 801767c:	683b      	ldr	r3, [r7, #0]
 801767e:	0018      	movs	r0, r3
 8017680:	f001 fad4 	bl	8018c2c <RegionIN865ChanMaskSet>
 8017684:	0003      	movs	r3, r0
 8017686:	e000      	b.n	801768a <RegionChanMaskSet+0x24>
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8017688:	2300      	movs	r3, #0
        }
    }
}
 801768a:	0018      	movs	r0, r3
 801768c:	46bd      	mov	sp, r7
 801768e:	b002      	add	sp, #8
 8017690:	bd80      	pop	{r7, pc}

08017692 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017692:	b590      	push	{r4, r7, lr}
 8017694:	b083      	sub	sp, #12
 8017696:	af00      	add	r7, sp, #0
 8017698:	0004      	movs	r4, r0
 801769a:	0008      	movs	r0, r1
 801769c:	0011      	movs	r1, r2
 801769e:	603b      	str	r3, [r7, #0]
 80176a0:	1dfb      	adds	r3, r7, #7
 80176a2:	1c22      	adds	r2, r4, #0
 80176a4:	701a      	strb	r2, [r3, #0]
 80176a6:	1dbb      	adds	r3, r7, #6
 80176a8:	1c02      	adds	r2, r0, #0
 80176aa:	701a      	strb	r2, [r3, #0]
 80176ac:	1d7b      	adds	r3, r7, #5
 80176ae:	1c0a      	adds	r2, r1, #0
 80176b0:	701a      	strb	r2, [r3, #0]
    switch( region )
 80176b2:	1dfb      	adds	r3, r7, #7
 80176b4:	781b      	ldrb	r3, [r3, #0]
 80176b6:	2b07      	cmp	r3, #7
 80176b8:	d000      	beq.n	80176bc <RegionComputeRxWindowParameters+0x2a>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80176ba:	e00a      	b.n	80176d2 <RegionComputeRxWindowParameters+0x40>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
 80176bc:	69bc      	ldr	r4, [r7, #24]
 80176be:	683a      	ldr	r2, [r7, #0]
 80176c0:	1d7b      	adds	r3, r7, #5
 80176c2:	7819      	ldrb	r1, [r3, #0]
 80176c4:	1dbb      	adds	r3, r7, #6
 80176c6:	2000      	movs	r0, #0
 80176c8:	5618      	ldrsb	r0, [r3, r0]
 80176ca:	0023      	movs	r3, r4
 80176cc:	f001 fad4 	bl	8018c78 <RegionIN865ComputeRxWindowParameters>
 80176d0:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80176d2:	46c0      	nop			; (mov r8, r8)
 80176d4:	46bd      	mov	sp, r7
 80176d6:	b003      	add	sp, #12
 80176d8:	bd90      	pop	{r4, r7, pc}

080176da <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80176da:	b580      	push	{r7, lr}
 80176dc:	b084      	sub	sp, #16
 80176de:	af00      	add	r7, sp, #0
 80176e0:	60b9      	str	r1, [r7, #8]
 80176e2:	607a      	str	r2, [r7, #4]
 80176e4:	210f      	movs	r1, #15
 80176e6:	187b      	adds	r3, r7, r1
 80176e8:	1c02      	adds	r2, r0, #0
 80176ea:	701a      	strb	r2, [r3, #0]
    switch( region )
 80176ec:	187b      	adds	r3, r7, r1
 80176ee:	781b      	ldrb	r3, [r3, #0]
 80176f0:	2b07      	cmp	r3, #7
 80176f2:	d107      	bne.n	8017704 <RegionRxConfig+0x2a>
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
 80176f4:	687a      	ldr	r2, [r7, #4]
 80176f6:	68bb      	ldr	r3, [r7, #8]
 80176f8:	0011      	movs	r1, r2
 80176fa:	0018      	movs	r0, r3
 80176fc:	f001 fb26 	bl	8018d4c <RegionIN865RxConfig>
 8017700:	0003      	movs	r3, r0
 8017702:	e000      	b.n	8017706 <RegionRxConfig+0x2c>
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8017704:	2300      	movs	r3, #0
        }
    }
}
 8017706:	0018      	movs	r0, r3
 8017708:	46bd      	mov	sp, r7
 801770a:	b004      	add	sp, #16
 801770c:	bd80      	pop	{r7, pc}

0801770e <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801770e:	b580      	push	{r7, lr}
 8017710:	b084      	sub	sp, #16
 8017712:	af00      	add	r7, sp, #0
 8017714:	60b9      	str	r1, [r7, #8]
 8017716:	607a      	str	r2, [r7, #4]
 8017718:	603b      	str	r3, [r7, #0]
 801771a:	210f      	movs	r1, #15
 801771c:	187b      	adds	r3, r7, r1
 801771e:	1c02      	adds	r2, r0, #0
 8017720:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017722:	187b      	adds	r3, r7, r1
 8017724:	781b      	ldrb	r3, [r3, #0]
 8017726:	2b07      	cmp	r3, #7
 8017728:	d107      	bne.n	801773a <RegionTxConfig+0x2c>
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
 801772a:	683a      	ldr	r2, [r7, #0]
 801772c:	6879      	ldr	r1, [r7, #4]
 801772e:	68bb      	ldr	r3, [r7, #8]
 8017730:	0018      	movs	r0, r3
 8017732:	f001 fbf7 	bl	8018f24 <RegionIN865TxConfig>
 8017736:	0003      	movs	r3, r0
 8017738:	e000      	b.n	801773c <RegionTxConfig+0x2e>
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801773a:	2300      	movs	r3, #0
        }
    }
}
 801773c:	0018      	movs	r0, r3
 801773e:	46bd      	mov	sp, r7
 8017740:	b004      	add	sp, #16
 8017742:	bd80      	pop	{r7, pc}

08017744 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017744:	b590      	push	{r4, r7, lr}
 8017746:	b087      	sub	sp, #28
 8017748:	af02      	add	r7, sp, #8
 801774a:	60b9      	str	r1, [r7, #8]
 801774c:	607a      	str	r2, [r7, #4]
 801774e:	603b      	str	r3, [r7, #0]
 8017750:	210f      	movs	r1, #15
 8017752:	187b      	adds	r3, r7, r1
 8017754:	1c02      	adds	r2, r0, #0
 8017756:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017758:	187b      	adds	r3, r7, r1
 801775a:	781b      	ldrb	r3, [r3, #0]
 801775c:	2b07      	cmp	r3, #7
 801775e:	d10a      	bne.n	8017776 <RegionLinkAdrReq+0x32>
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
 8017760:	6a3c      	ldr	r4, [r7, #32]
 8017762:	683a      	ldr	r2, [r7, #0]
 8017764:	6879      	ldr	r1, [r7, #4]
 8017766:	68b8      	ldr	r0, [r7, #8]
 8017768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801776a:	9300      	str	r3, [sp, #0]
 801776c:	0023      	movs	r3, r4
 801776e:	f001 fcb1 	bl	80190d4 <RegionIN865LinkAdrReq>
 8017772:	0003      	movs	r3, r0
 8017774:	e000      	b.n	8017778 <RegionLinkAdrReq+0x34>
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8017776:	2300      	movs	r3, #0
        }
    }
}
 8017778:	0018      	movs	r0, r3
 801777a:	46bd      	mov	sp, r7
 801777c:	b005      	add	sp, #20
 801777e:	bd90      	pop	{r4, r7, pc}

08017780 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017780:	b580      	push	{r7, lr}
 8017782:	b082      	sub	sp, #8
 8017784:	af00      	add	r7, sp, #0
 8017786:	0002      	movs	r2, r0
 8017788:	6039      	str	r1, [r7, #0]
 801778a:	1dfb      	adds	r3, r7, #7
 801778c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801778e:	1dfb      	adds	r3, r7, #7
 8017790:	781b      	ldrb	r3, [r3, #0]
 8017792:	2b07      	cmp	r3, #7
 8017794:	d105      	bne.n	80177a2 <RegionRxParamSetupReq+0x22>
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
 8017796:	683b      	ldr	r3, [r7, #0]
 8017798:	0018      	movs	r0, r3
 801779a:	f001 fdfd 	bl	8019398 <RegionIN865RxParamSetupReq>
 801779e:	0003      	movs	r3, r0
 80177a0:	e000      	b.n	80177a4 <RegionRxParamSetupReq+0x24>
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80177a2:	2300      	movs	r3, #0
        }
    }
}
 80177a4:	0018      	movs	r0, r3
 80177a6:	46bd      	mov	sp, r7
 80177a8:	b002      	add	sp, #8
 80177aa:	bd80      	pop	{r7, pc}

080177ac <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80177ac:	b580      	push	{r7, lr}
 80177ae:	b082      	sub	sp, #8
 80177b0:	af00      	add	r7, sp, #0
 80177b2:	0002      	movs	r2, r0
 80177b4:	6039      	str	r1, [r7, #0]
 80177b6:	1dfb      	adds	r3, r7, #7
 80177b8:	701a      	strb	r2, [r3, #0]
    switch( region )
 80177ba:	1dfb      	adds	r3, r7, #7
 80177bc:	781b      	ldrb	r3, [r3, #0]
 80177be:	2b07      	cmp	r3, #7
 80177c0:	d105      	bne.n	80177ce <RegionNewChannelReq+0x22>
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
 80177c2:	683b      	ldr	r3, [r7, #0]
 80177c4:	0018      	movs	r0, r3
 80177c6:	f001 fe2b 	bl	8019420 <RegionIN865NewChannelReq>
 80177ca:	0003      	movs	r3, r0
 80177cc:	e000      	b.n	80177d0 <RegionNewChannelReq+0x24>
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80177ce:	2300      	movs	r3, #0
        }
    }
}
 80177d0:	0018      	movs	r0, r3
 80177d2:	46bd      	mov	sp, r7
 80177d4:	b002      	add	sp, #8
 80177d6:	bd80      	pop	{r7, pc}

080177d8 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b082      	sub	sp, #8
 80177dc:	af00      	add	r7, sp, #0
 80177de:	0002      	movs	r2, r0
 80177e0:	6039      	str	r1, [r7, #0]
 80177e2:	1dfb      	adds	r3, r7, #7
 80177e4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80177e6:	1dfb      	adds	r3, r7, #7
 80177e8:	781b      	ldrb	r3, [r3, #0]
 80177ea:	2b07      	cmp	r3, #7
 80177ec:	d105      	bne.n	80177fa <RegionTxParamSetupReq+0x22>
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
 80177ee:	683b      	ldr	r3, [r7, #0]
 80177f0:	0018      	movs	r0, r3
 80177f2:	f001 fe7f 	bl	80194f4 <RegionIN865TxParamSetupReq>
 80177f6:	0003      	movs	r3, r0
 80177f8:	e000      	b.n	80177fc <RegionTxParamSetupReq+0x24>
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80177fa:	2300      	movs	r3, #0
        }
    }
}
 80177fc:	0018      	movs	r0, r3
 80177fe:	46bd      	mov	sp, r7
 8017800:	b002      	add	sp, #8
 8017802:	bd80      	pop	{r7, pc}

08017804 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b082      	sub	sp, #8
 8017808:	af00      	add	r7, sp, #0
 801780a:	0002      	movs	r2, r0
 801780c:	6039      	str	r1, [r7, #0]
 801780e:	1dfb      	adds	r3, r7, #7
 8017810:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017812:	1dfb      	adds	r3, r7, #7
 8017814:	781b      	ldrb	r3, [r3, #0]
 8017816:	2b07      	cmp	r3, #7
 8017818:	d105      	bne.n	8017826 <RegionDlChannelReq+0x22>
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
 801781a:	683b      	ldr	r3, [r7, #0]
 801781c:	0018      	movs	r0, r3
 801781e:	f001 fe73 	bl	8019508 <RegionIN865DlChannelReq>
 8017822:	0003      	movs	r3, r0
 8017824:	e000      	b.n	8017828 <RegionDlChannelReq+0x24>
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017826:	2300      	movs	r3, #0
        }
    }
}
 8017828:	0018      	movs	r0, r3
 801782a:	46bd      	mov	sp, r7
 801782c:	b002      	add	sp, #8
 801782e:	bd80      	pop	{r7, pc}

08017830 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017830:	b590      	push	{r4, r7, lr}
 8017832:	b083      	sub	sp, #12
 8017834:	af00      	add	r7, sp, #0
 8017836:	0004      	movs	r4, r0
 8017838:	0008      	movs	r0, r1
 801783a:	0011      	movs	r1, r2
 801783c:	1dfb      	adds	r3, r7, #7
 801783e:	1c22      	adds	r2, r4, #0
 8017840:	701a      	strb	r2, [r3, #0]
 8017842:	1dbb      	adds	r3, r7, #6
 8017844:	1c02      	adds	r2, r0, #0
 8017846:	701a      	strb	r2, [r3, #0]
 8017848:	1d7b      	adds	r3, r7, #5
 801784a:	1c0a      	adds	r2, r1, #0
 801784c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801784e:	1dfb      	adds	r3, r7, #7
 8017850:	781b      	ldrb	r3, [r3, #0]
 8017852:	2b07      	cmp	r3, #7
 8017854:	d10a      	bne.n	801786c <RegionAlternateDr+0x3c>
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
 8017856:	1d7b      	adds	r3, r7, #5
 8017858:	781a      	ldrb	r2, [r3, #0]
 801785a:	1dbb      	adds	r3, r7, #6
 801785c:	781b      	ldrb	r3, [r3, #0]
 801785e:	b25b      	sxtb	r3, r3
 8017860:	0011      	movs	r1, r2
 8017862:	0018      	movs	r0, r3
 8017864:	f001 fe98 	bl	8019598 <RegionIN865AlternateDr>
 8017868:	0003      	movs	r3, r0
 801786a:	e000      	b.n	801786e <RegionAlternateDr+0x3e>
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 801786c:	2300      	movs	r3, #0
        }
    }
}
 801786e:	0018      	movs	r0, r3
 8017870:	46bd      	mov	sp, r7
 8017872:	b003      	add	sp, #12
 8017874:	bd90      	pop	{r4, r7, pc}

08017876 <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 8017876:	b580      	push	{r7, lr}
 8017878:	b082      	sub	sp, #8
 801787a:	af00      	add	r7, sp, #0
 801787c:	0002      	movs	r2, r0
 801787e:	6039      	str	r1, [r7, #0]
 8017880:	1dfb      	adds	r3, r7, #7
 8017882:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017884:	1dfb      	adds	r3, r7, #7
 8017886:	781b      	ldrb	r3, [r3, #0]
 8017888:	2b07      	cmp	r3, #7
 801788a:	d000      	beq.n	801788e <RegionCalcBackOff+0x18>
        IN865_CALC_BACKOFF( );
        US915_CALC_BACKOFF( );
        RU864_CALC_BACKOFF( );
        default:
        {
            break;
 801788c:	e004      	b.n	8017898 <RegionCalcBackOff+0x22>
        IN865_CALC_BACKOFF( );
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	0018      	movs	r0, r3
 8017892:	f001 fe91 	bl	80195b8 <RegionIN865CalcBackOff>
 8017896:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8017898:	46c0      	nop			; (mov r8, r8)
 801789a:	46bd      	mov	sp, r7
 801789c:	b002      	add	sp, #8
 801789e:	bd80      	pop	{r7, pc}

080178a0 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b084      	sub	sp, #16
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	60b9      	str	r1, [r7, #8]
 80178a8:	607a      	str	r2, [r7, #4]
 80178aa:	603b      	str	r3, [r7, #0]
 80178ac:	210f      	movs	r1, #15
 80178ae:	187b      	adds	r3, r7, r1
 80178b0:	1c02      	adds	r2, r0, #0
 80178b2:	701a      	strb	r2, [r3, #0]
    switch( region )
 80178b4:	187b      	adds	r3, r7, r1
 80178b6:	781b      	ldrb	r3, [r3, #0]
 80178b8:	2b07      	cmp	r3, #7
 80178ba:	d107      	bne.n	80178cc <RegionNextChannel+0x2c>
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
 80178bc:	69bb      	ldr	r3, [r7, #24]
 80178be:	683a      	ldr	r2, [r7, #0]
 80178c0:	6879      	ldr	r1, [r7, #4]
 80178c2:	68b8      	ldr	r0, [r7, #8]
 80178c4:	f001 fea8 	bl	8019618 <RegionIN865NextChannel>
 80178c8:	0003      	movs	r3, r0
 80178ca:	e000      	b.n	80178ce <RegionNextChannel+0x2e>
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80178cc:	2309      	movs	r3, #9
        }
    }
}
 80178ce:	0018      	movs	r0, r3
 80178d0:	46bd      	mov	sp, r7
 80178d2:	b004      	add	sp, #16
 80178d4:	bd80      	pop	{r7, pc}

080178d6 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 80178d6:	b580      	push	{r7, lr}
 80178d8:	b082      	sub	sp, #8
 80178da:	af00      	add	r7, sp, #0
 80178dc:	0002      	movs	r2, r0
 80178de:	6039      	str	r1, [r7, #0]
 80178e0:	1dfb      	adds	r3, r7, #7
 80178e2:	701a      	strb	r2, [r3, #0]
    switch( region )
 80178e4:	1dfb      	adds	r3, r7, #7
 80178e6:	781b      	ldrb	r3, [r3, #0]
 80178e8:	2b07      	cmp	r3, #7
 80178ea:	d000      	beq.n	80178ee <RegionSetContinuousWave+0x18>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 80178ec:	e004      	b.n	80178f8 <RegionSetContinuousWave+0x22>
        IN865_SET_CONTINUOUS_WAVE( );
 80178ee:	683b      	ldr	r3, [r7, #0]
 80178f0:	0018      	movs	r0, r3
 80178f2:	f002 f81d 	bl	8019930 <RegionIN865SetContinuousWave>
 80178f6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80178f8:	46c0      	nop			; (mov r8, r8)
 80178fa:	46bd      	mov	sp, r7
 80178fc:	b002      	add	sp, #8
 80178fe:	bd80      	pop	{r7, pc}

08017900 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017900:	b5b0      	push	{r4, r5, r7, lr}
 8017902:	b082      	sub	sp, #8
 8017904:	af00      	add	r7, sp, #0
 8017906:	0005      	movs	r5, r0
 8017908:	000c      	movs	r4, r1
 801790a:	0010      	movs	r0, r2
 801790c:	0019      	movs	r1, r3
 801790e:	1dfb      	adds	r3, r7, #7
 8017910:	1c2a      	adds	r2, r5, #0
 8017912:	701a      	strb	r2, [r3, #0]
 8017914:	1dbb      	adds	r3, r7, #6
 8017916:	1c22      	adds	r2, r4, #0
 8017918:	701a      	strb	r2, [r3, #0]
 801791a:	1d7b      	adds	r3, r7, #5
 801791c:	1c02      	adds	r2, r0, #0
 801791e:	701a      	strb	r2, [r3, #0]
 8017920:	1d3b      	adds	r3, r7, #4
 8017922:	1c0a      	adds	r2, r1, #0
 8017924:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017926:	1dfb      	adds	r3, r7, #7
 8017928:	781b      	ldrb	r3, [r3, #0]
 801792a:	2b07      	cmp	r3, #7
 801792c:	d10c      	bne.n	8017948 <RegionApplyDrOffset+0x48>
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
 801792e:	1d3b      	adds	r3, r7, #4
 8017930:	2200      	movs	r2, #0
 8017932:	569a      	ldrsb	r2, [r3, r2]
 8017934:	1d7b      	adds	r3, r7, #5
 8017936:	2100      	movs	r1, #0
 8017938:	5659      	ldrsb	r1, [r3, r1]
 801793a:	1dbb      	adds	r3, r7, #6
 801793c:	781b      	ldrb	r3, [r3, #0]
 801793e:	0018      	movs	r0, r3
 8017940:	f002 f84a 	bl	80199d8 <RegionIN865ApplyDrOffset>
 8017944:	0003      	movs	r3, r0
 8017946:	e001      	b.n	801794c <RegionApplyDrOffset+0x4c>
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017948:	1d7b      	adds	r3, r7, #5
 801794a:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 801794c:	0018      	movs	r0, r3
 801794e:	46bd      	mov	sp, r7
 8017950:	b002      	add	sp, #8
 8017952:	bdb0      	pop	{r4, r5, r7, pc}

08017954 <CountChannels>:
#define BACKOFF_DC_1_HOUR       100
#define BACKOFF_DC_10_HOURS     1000
#define BACKOFF_DC_24_HOURS     10000

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8017954:	b580      	push	{r7, lr}
 8017956:	b084      	sub	sp, #16
 8017958:	af00      	add	r7, sp, #0
 801795a:	0002      	movs	r2, r0
 801795c:	1dbb      	adds	r3, r7, #6
 801795e:	801a      	strh	r2, [r3, #0]
 8017960:	1d7b      	adds	r3, r7, #5
 8017962:	1c0a      	adds	r2, r1, #0
 8017964:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 8017966:	230f      	movs	r3, #15
 8017968:	18fb      	adds	r3, r7, r3
 801796a:	2200      	movs	r2, #0
 801796c:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 801796e:	230e      	movs	r3, #14
 8017970:	18fb      	adds	r3, r7, r3
 8017972:	2200      	movs	r2, #0
 8017974:	701a      	strb	r2, [r3, #0]
 8017976:	e01b      	b.n	80179b0 <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8017978:	1dbb      	adds	r3, r7, #6
 801797a:	881b      	ldrh	r3, [r3, #0]
 801797c:	200e      	movs	r0, #14
 801797e:	183a      	adds	r2, r7, r0
 8017980:	7812      	ldrb	r2, [r2, #0]
 8017982:	2101      	movs	r1, #1
 8017984:	4091      	lsls	r1, r2
 8017986:	000a      	movs	r2, r1
 8017988:	401a      	ands	r2, r3
 801798a:	183b      	adds	r3, r7, r0
 801798c:	781b      	ldrb	r3, [r3, #0]
 801798e:	2101      	movs	r1, #1
 8017990:	4099      	lsls	r1, r3
 8017992:	000b      	movs	r3, r1
 8017994:	429a      	cmp	r2, r3
 8017996:	d105      	bne.n	80179a4 <CountChannels+0x50>
        {
            nbActiveBits++;
 8017998:	210f      	movs	r1, #15
 801799a:	187b      	adds	r3, r7, r1
 801799c:	781a      	ldrb	r2, [r3, #0]
 801799e:	187b      	adds	r3, r7, r1
 80179a0:	3201      	adds	r2, #1
 80179a2:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 80179a4:	210e      	movs	r1, #14
 80179a6:	187b      	adds	r3, r7, r1
 80179a8:	781a      	ldrb	r2, [r3, #0]
 80179aa:	187b      	adds	r3, r7, r1
 80179ac:	3201      	adds	r2, #1
 80179ae:	701a      	strb	r2, [r3, #0]
 80179b0:	230e      	movs	r3, #14
 80179b2:	18fa      	adds	r2, r7, r3
 80179b4:	1d7b      	adds	r3, r7, #5
 80179b6:	7812      	ldrb	r2, [r2, #0]
 80179b8:	781b      	ldrb	r3, [r3, #0]
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d3dc      	bcc.n	8017978 <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 80179be:	230f      	movs	r3, #15
 80179c0:	18fb      	adds	r3, r7, r3
 80179c2:	781b      	ldrb	r3, [r3, #0]
}
 80179c4:	0018      	movs	r0, r3
 80179c6:	46bd      	mov	sp, r7
 80179c8:	b004      	add	sp, #16
 80179ca:	bd80      	pop	{r7, pc}

080179cc <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
 80179cc:	b580      	push	{r7, lr}
 80179ce:	b084      	sub	sp, #16
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	6078      	str	r0, [r7, #4]
    uint16_t dutyCycle = 0;
 80179d4:	230e      	movs	r3, #14
 80179d6:	18fb      	adds	r3, r7, r3
 80179d8:	2200      	movs	r2, #0
 80179da:	801a      	strh	r2, [r3, #0]

    if( elapsedTime < 3600000 )
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	4a0e      	ldr	r2, [pc, #56]	; (8017a18 <RegionCommonGetJoinDc+0x4c>)
 80179e0:	4293      	cmp	r3, r2
 80179e2:	d804      	bhi.n	80179ee <RegionCommonGetJoinDc+0x22>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 80179e4:	230e      	movs	r3, #14
 80179e6:	18fb      	adds	r3, r7, r3
 80179e8:	2264      	movs	r2, #100	; 0x64
 80179ea:	801a      	strh	r2, [r3, #0]
 80179ec:	e00d      	b.n	8017a0a <RegionCommonGetJoinDc+0x3e>
    }
    else if( elapsedTime < ( 3600000 + 36000000 ) )
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	4a0a      	ldr	r2, [pc, #40]	; (8017a1c <RegionCommonGetJoinDc+0x50>)
 80179f2:	4293      	cmp	r3, r2
 80179f4:	d805      	bhi.n	8017a02 <RegionCommonGetJoinDc+0x36>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 80179f6:	230e      	movs	r3, #14
 80179f8:	18fb      	adds	r3, r7, r3
 80179fa:	22fa      	movs	r2, #250	; 0xfa
 80179fc:	0092      	lsls	r2, r2, #2
 80179fe:	801a      	strh	r2, [r3, #0]
 8017a00:	e003      	b.n	8017a0a <RegionCommonGetJoinDc+0x3e>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 8017a02:	230e      	movs	r3, #14
 8017a04:	18fb      	adds	r3, r7, r3
 8017a06:	4a06      	ldr	r2, [pc, #24]	; (8017a20 <RegionCommonGetJoinDc+0x54>)
 8017a08:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 8017a0a:	230e      	movs	r3, #14
 8017a0c:	18fb      	adds	r3, r7, r3
 8017a0e:	881b      	ldrh	r3, [r3, #0]
}
 8017a10:	0018      	movs	r0, r3
 8017a12:	46bd      	mov	sp, r7
 8017a14:	b004      	add	sp, #16
 8017a16:	bd80      	pop	{r7, pc}
 8017a18:	0036ee7f 	.word	0x0036ee7f
 8017a1c:	025c3f7f 	.word	0x025c3f7f
 8017a20:	00002710 	.word	0x00002710

08017a24 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8017a24:	b590      	push	{r4, r7, lr}
 8017a26:	b085      	sub	sp, #20
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	0004      	movs	r4, r0
 8017a2c:	6039      	str	r1, [r7, #0]
 8017a2e:	0010      	movs	r0, r2
 8017a30:	0019      	movs	r1, r3
 8017a32:	1dfb      	adds	r3, r7, #7
 8017a34:	1c22      	adds	r2, r4, #0
 8017a36:	701a      	strb	r2, [r3, #0]
 8017a38:	1dbb      	adds	r3, r7, #6
 8017a3a:	1c02      	adds	r2, r0, #0
 8017a3c:	701a      	strb	r2, [r3, #0]
 8017a3e:	1d7b      	adds	r3, r7, #5
 8017a40:	1c0a      	adds	r2, r1, #0
 8017a42:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8017a44:	2320      	movs	r3, #32
 8017a46:	18fb      	adds	r3, r7, r3
 8017a48:	2200      	movs	r2, #0
 8017a4a:	569a      	ldrsb	r2, [r3, r2]
 8017a4c:	1d7b      	adds	r3, r7, #5
 8017a4e:	2100      	movs	r1, #0
 8017a50:	5659      	ldrsb	r1, [r3, r1]
 8017a52:	1dbb      	adds	r3, r7, #6
 8017a54:	781b      	ldrb	r3, [r3, #0]
 8017a56:	b25b      	sxtb	r3, r3
 8017a58:	0018      	movs	r0, r3
 8017a5a:	f000 f87d 	bl	8017b58 <RegionCommonValueInRange>
 8017a5e:	1e03      	subs	r3, r0, #0
 8017a60:	d101      	bne.n	8017a66 <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 8017a62:	2300      	movs	r3, #0
 8017a64:	e074      	b.n	8017b50 <RegionCommonChanVerifyDr+0x12c>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017a66:	230f      	movs	r3, #15
 8017a68:	18fb      	adds	r3, r7, r3
 8017a6a:	2200      	movs	r2, #0
 8017a6c:	701a      	strb	r2, [r3, #0]
 8017a6e:	230e      	movs	r3, #14
 8017a70:	18fb      	adds	r3, r7, r3
 8017a72:	2200      	movs	r2, #0
 8017a74:	701a      	strb	r2, [r3, #0]
 8017a76:	e063      	b.n	8017b40 <RegionCommonChanVerifyDr+0x11c>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017a78:	230d      	movs	r3, #13
 8017a7a:	18fb      	adds	r3, r7, r3
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	701a      	strb	r2, [r3, #0]
 8017a80:	e04d      	b.n	8017b1e <RegionCommonChanVerifyDr+0xfa>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8017a82:	230e      	movs	r3, #14
 8017a84:	18fb      	adds	r3, r7, r3
 8017a86:	781b      	ldrb	r3, [r3, #0]
 8017a88:	005b      	lsls	r3, r3, #1
 8017a8a:	683a      	ldr	r2, [r7, #0]
 8017a8c:	18d3      	adds	r3, r2, r3
 8017a8e:	881b      	ldrh	r3, [r3, #0]
 8017a90:	001a      	movs	r2, r3
 8017a92:	230d      	movs	r3, #13
 8017a94:	18fb      	adds	r3, r7, r3
 8017a96:	781b      	ldrb	r3, [r3, #0]
 8017a98:	411a      	asrs	r2, r3
 8017a9a:	0013      	movs	r3, r2
 8017a9c:	2201      	movs	r2, #1
 8017a9e:	4013      	ands	r3, r2
 8017aa0:	d037      	beq.n	8017b12 <RegionCommonChanVerifyDr+0xee>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017aa2:	200f      	movs	r0, #15
 8017aa4:	183b      	adds	r3, r7, r0
 8017aa6:	781a      	ldrb	r2, [r3, #0]
 8017aa8:	240d      	movs	r4, #13
 8017aaa:	193b      	adds	r3, r7, r4
 8017aac:	781b      	ldrb	r3, [r3, #0]
 8017aae:	18d3      	adds	r3, r2, r3
 8017ab0:	001a      	movs	r2, r3
 8017ab2:	0013      	movs	r3, r2
 8017ab4:	005b      	lsls	r3, r3, #1
 8017ab6:	189b      	adds	r3, r3, r2
 8017ab8:	009b      	lsls	r3, r3, #2
 8017aba:	001a      	movs	r2, r3
 8017abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017abe:	189b      	adds	r3, r3, r2
 8017ac0:	7a1b      	ldrb	r3, [r3, #8]
 8017ac2:	011b      	lsls	r3, r3, #4
 8017ac4:	b25b      	sxtb	r3, r3
 8017ac6:	111b      	asrs	r3, r3, #4
 8017ac8:	b25b      	sxtb	r3, r3
 8017aca:	001a      	movs	r2, r3
 8017acc:	230f      	movs	r3, #15
 8017ace:	4013      	ands	r3, r2
 8017ad0:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8017ad2:	183b      	adds	r3, r7, r0
 8017ad4:	781a      	ldrb	r2, [r3, #0]
 8017ad6:	193b      	adds	r3, r7, r4
 8017ad8:	781b      	ldrb	r3, [r3, #0]
 8017ada:	18d3      	adds	r3, r2, r3
 8017adc:	001a      	movs	r2, r3
 8017ade:	0013      	movs	r3, r2
 8017ae0:	005b      	lsls	r3, r3, #1
 8017ae2:	189b      	adds	r3, r3, r2
 8017ae4:	009b      	lsls	r3, r3, #2
 8017ae6:	001a      	movs	r2, r3
 8017ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aea:	189b      	adds	r3, r3, r2
 8017aec:	7a1b      	ldrb	r3, [r3, #8]
 8017aee:	b25b      	sxtb	r3, r3
 8017af0:	111b      	asrs	r3, r3, #4
 8017af2:	b25b      	sxtb	r3, r3
 8017af4:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017af6:	230f      	movs	r3, #15
 8017af8:	4013      	ands	r3, r2
 8017afa:	b25a      	sxtb	r2, r3
 8017afc:	1dbb      	adds	r3, r7, #6
 8017afe:	781b      	ldrb	r3, [r3, #0]
 8017b00:	b25b      	sxtb	r3, r3
 8017b02:	0018      	movs	r0, r3
 8017b04:	f000 f828 	bl	8017b58 <RegionCommonValueInRange>
 8017b08:	0003      	movs	r3, r0
 8017b0a:	2b01      	cmp	r3, #1
 8017b0c:	d101      	bne.n	8017b12 <RegionCommonChanVerifyDr+0xee>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8017b0e:	2301      	movs	r3, #1
 8017b10:	e01e      	b.n	8017b50 <RegionCommonChanVerifyDr+0x12c>
        for( uint8_t j = 0; j < 16; j++ )
 8017b12:	210d      	movs	r1, #13
 8017b14:	187b      	adds	r3, r7, r1
 8017b16:	781a      	ldrb	r2, [r3, #0]
 8017b18:	187b      	adds	r3, r7, r1
 8017b1a:	3201      	adds	r2, #1
 8017b1c:	701a      	strb	r2, [r3, #0]
 8017b1e:	230d      	movs	r3, #13
 8017b20:	18fb      	adds	r3, r7, r3
 8017b22:	781b      	ldrb	r3, [r3, #0]
 8017b24:	2b0f      	cmp	r3, #15
 8017b26:	d9ac      	bls.n	8017a82 <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017b28:	220f      	movs	r2, #15
 8017b2a:	18bb      	adds	r3, r7, r2
 8017b2c:	18ba      	adds	r2, r7, r2
 8017b2e:	7812      	ldrb	r2, [r2, #0]
 8017b30:	3210      	adds	r2, #16
 8017b32:	701a      	strb	r2, [r3, #0]
 8017b34:	210e      	movs	r1, #14
 8017b36:	187b      	adds	r3, r7, r1
 8017b38:	781a      	ldrb	r2, [r3, #0]
 8017b3a:	187b      	adds	r3, r7, r1
 8017b3c:	3201      	adds	r2, #1
 8017b3e:	701a      	strb	r2, [r3, #0]
 8017b40:	230f      	movs	r3, #15
 8017b42:	18fa      	adds	r2, r7, r3
 8017b44:	1dfb      	adds	r3, r7, #7
 8017b46:	7812      	ldrb	r2, [r2, #0]
 8017b48:	781b      	ldrb	r3, [r3, #0]
 8017b4a:	429a      	cmp	r2, r3
 8017b4c:	d394      	bcc.n	8017a78 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 8017b4e:	2300      	movs	r3, #0
}
 8017b50:	0018      	movs	r0, r3
 8017b52:	46bd      	mov	sp, r7
 8017b54:	b005      	add	sp, #20
 8017b56:	bd90      	pop	{r4, r7, pc}

08017b58 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8017b58:	b590      	push	{r4, r7, lr}
 8017b5a:	b083      	sub	sp, #12
 8017b5c:	af00      	add	r7, sp, #0
 8017b5e:	0004      	movs	r4, r0
 8017b60:	0008      	movs	r0, r1
 8017b62:	0011      	movs	r1, r2
 8017b64:	1dfb      	adds	r3, r7, #7
 8017b66:	1c22      	adds	r2, r4, #0
 8017b68:	701a      	strb	r2, [r3, #0]
 8017b6a:	1dbb      	adds	r3, r7, #6
 8017b6c:	1c02      	adds	r2, r0, #0
 8017b6e:	701a      	strb	r2, [r3, #0]
 8017b70:	1d7b      	adds	r3, r7, #5
 8017b72:	1c0a      	adds	r2, r1, #0
 8017b74:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 8017b76:	1dfa      	adds	r2, r7, #7
 8017b78:	1dbb      	adds	r3, r7, #6
 8017b7a:	7812      	ldrb	r2, [r2, #0]
 8017b7c:	b252      	sxtb	r2, r2
 8017b7e:	781b      	ldrb	r3, [r3, #0]
 8017b80:	b25b      	sxtb	r3, r3
 8017b82:	429a      	cmp	r2, r3
 8017b84:	db09      	blt.n	8017b9a <RegionCommonValueInRange+0x42>
 8017b86:	1dfa      	adds	r2, r7, #7
 8017b88:	1d7b      	adds	r3, r7, #5
 8017b8a:	7812      	ldrb	r2, [r2, #0]
 8017b8c:	b252      	sxtb	r2, r2
 8017b8e:	781b      	ldrb	r3, [r3, #0]
 8017b90:	b25b      	sxtb	r3, r3
 8017b92:	429a      	cmp	r2, r3
 8017b94:	dc01      	bgt.n	8017b9a <RegionCommonValueInRange+0x42>
    {
        return 1;
 8017b96:	2301      	movs	r3, #1
 8017b98:	e000      	b.n	8017b9c <RegionCommonValueInRange+0x44>
    }
    return 0;
 8017b9a:	2300      	movs	r3, #0
}
 8017b9c:	0018      	movs	r0, r3
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	b003      	add	sp, #12
 8017ba2:	bd90      	pop	{r4, r7, pc}

08017ba4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8017ba4:	b580      	push	{r7, lr}
 8017ba6:	b084      	sub	sp, #16
 8017ba8:	af00      	add	r7, sp, #0
 8017baa:	6078      	str	r0, [r7, #4]
 8017bac:	0008      	movs	r0, r1
 8017bae:	0011      	movs	r1, r2
 8017bb0:	1cfb      	adds	r3, r7, #3
 8017bb2:	1c02      	adds	r2, r0, #0
 8017bb4:	701a      	strb	r2, [r3, #0]
 8017bb6:	1cbb      	adds	r3, r7, #2
 8017bb8:	1c0a      	adds	r2, r1, #0
 8017bba:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 8017bbc:	210f      	movs	r1, #15
 8017bbe:	187b      	adds	r3, r7, r1
 8017bc0:	1cfa      	adds	r2, r7, #3
 8017bc2:	7812      	ldrb	r2, [r2, #0]
 8017bc4:	0912      	lsrs	r2, r2, #4
 8017bc6:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8017bc8:	1cbb      	adds	r3, r7, #2
 8017bca:	781b      	ldrb	r3, [r3, #0]
 8017bcc:	091b      	lsrs	r3, r3, #4
 8017bce:	b2db      	uxtb	r3, r3
 8017bd0:	187a      	adds	r2, r7, r1
 8017bd2:	7812      	ldrb	r2, [r2, #0]
 8017bd4:	429a      	cmp	r2, r3
 8017bd6:	d805      	bhi.n	8017be4 <RegionCommonChanDisable+0x40>
 8017bd8:	1cfa      	adds	r2, r7, #3
 8017bda:	1cbb      	adds	r3, r7, #2
 8017bdc:	7812      	ldrb	r2, [r2, #0]
 8017bde:	781b      	ldrb	r3, [r3, #0]
 8017be0:	429a      	cmp	r2, r3
 8017be2:	d301      	bcc.n	8017be8 <RegionCommonChanDisable+0x44>
    {
        return false;
 8017be4:	2300      	movs	r3, #0
 8017be6:	e01b      	b.n	8017c20 <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8017be8:	200f      	movs	r0, #15
 8017bea:	183b      	adds	r3, r7, r0
 8017bec:	781b      	ldrb	r3, [r3, #0]
 8017bee:	005b      	lsls	r3, r3, #1
 8017bf0:	687a      	ldr	r2, [r7, #4]
 8017bf2:	18d3      	adds	r3, r2, r3
 8017bf4:	881b      	ldrh	r3, [r3, #0]
 8017bf6:	b21b      	sxth	r3, r3
 8017bf8:	1cfa      	adds	r2, r7, #3
 8017bfa:	7812      	ldrb	r2, [r2, #0]
 8017bfc:	210f      	movs	r1, #15
 8017bfe:	400a      	ands	r2, r1
 8017c00:	2101      	movs	r1, #1
 8017c02:	4091      	lsls	r1, r2
 8017c04:	000a      	movs	r2, r1
 8017c06:	b212      	sxth	r2, r2
 8017c08:	43d2      	mvns	r2, r2
 8017c0a:	b212      	sxth	r2, r2
 8017c0c:	4013      	ands	r3, r2
 8017c0e:	b219      	sxth	r1, r3
 8017c10:	183b      	adds	r3, r7, r0
 8017c12:	781b      	ldrb	r3, [r3, #0]
 8017c14:	005b      	lsls	r3, r3, #1
 8017c16:	687a      	ldr	r2, [r7, #4]
 8017c18:	18d3      	adds	r3, r2, r3
 8017c1a:	b28a      	uxth	r2, r1
 8017c1c:	801a      	strh	r2, [r3, #0]

    return true;
 8017c1e:	2301      	movs	r3, #1
}
 8017c20:	0018      	movs	r0, r3
 8017c22:	46bd      	mov	sp, r7
 8017c24:	b004      	add	sp, #16
 8017c26:	bd80      	pop	{r7, pc}

08017c28 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8017c28:	b590      	push	{r4, r7, lr}
 8017c2a:	b085      	sub	sp, #20
 8017c2c:	af00      	add	r7, sp, #0
 8017c2e:	6078      	str	r0, [r7, #4]
 8017c30:	0008      	movs	r0, r1
 8017c32:	0011      	movs	r1, r2
 8017c34:	1cfb      	adds	r3, r7, #3
 8017c36:	1c02      	adds	r2, r0, #0
 8017c38:	701a      	strb	r2, [r3, #0]
 8017c3a:	1cbb      	adds	r3, r7, #2
 8017c3c:	1c0a      	adds	r2, r1, #0
 8017c3e:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 8017c40:	230f      	movs	r3, #15
 8017c42:	18fb      	adds	r3, r7, r3
 8017c44:	2200      	movs	r2, #0
 8017c46:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d101      	bne.n	8017c52 <RegionCommonCountChannels+0x2a>
    {
        return 0;
 8017c4e:	2300      	movs	r3, #0
 8017c50:	e027      	b.n	8017ca2 <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017c52:	230e      	movs	r3, #14
 8017c54:	18fb      	adds	r3, r7, r3
 8017c56:	1cfa      	adds	r2, r7, #3
 8017c58:	7812      	ldrb	r2, [r2, #0]
 8017c5a:	701a      	strb	r2, [r3, #0]
 8017c5c:	e017      	b.n	8017c8e <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017c5e:	240e      	movs	r4, #14
 8017c60:	193b      	adds	r3, r7, r4
 8017c62:	781b      	ldrb	r3, [r3, #0]
 8017c64:	005b      	lsls	r3, r3, #1
 8017c66:	687a      	ldr	r2, [r7, #4]
 8017c68:	18d3      	adds	r3, r2, r3
 8017c6a:	881b      	ldrh	r3, [r3, #0]
 8017c6c:	2110      	movs	r1, #16
 8017c6e:	0018      	movs	r0, r3
 8017c70:	f7ff fe70 	bl	8017954 <CountChannels>
 8017c74:	0003      	movs	r3, r0
 8017c76:	0019      	movs	r1, r3
 8017c78:	220f      	movs	r2, #15
 8017c7a:	18bb      	adds	r3, r7, r2
 8017c7c:	18ba      	adds	r2, r7, r2
 8017c7e:	7812      	ldrb	r2, [r2, #0]
 8017c80:	188a      	adds	r2, r1, r2
 8017c82:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017c84:	193b      	adds	r3, r7, r4
 8017c86:	781a      	ldrb	r2, [r3, #0]
 8017c88:	193b      	adds	r3, r7, r4
 8017c8a:	3201      	adds	r2, #1
 8017c8c:	701a      	strb	r2, [r3, #0]
 8017c8e:	230e      	movs	r3, #14
 8017c90:	18fa      	adds	r2, r7, r3
 8017c92:	1cbb      	adds	r3, r7, #2
 8017c94:	7812      	ldrb	r2, [r2, #0]
 8017c96:	781b      	ldrb	r3, [r3, #0]
 8017c98:	429a      	cmp	r2, r3
 8017c9a:	d3e0      	bcc.n	8017c5e <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 8017c9c:	230f      	movs	r3, #15
 8017c9e:	18fb      	adds	r3, r7, r3
 8017ca0:	781b      	ldrb	r3, [r3, #0]
}
 8017ca2:	0018      	movs	r0, r3
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	b005      	add	sp, #20
 8017ca8:	bd90      	pop	{r4, r7, pc}

08017caa <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017caa:	b580      	push	{r7, lr}
 8017cac:	b086      	sub	sp, #24
 8017cae:	af00      	add	r7, sp, #0
 8017cb0:	60f8      	str	r0, [r7, #12]
 8017cb2:	60b9      	str	r1, [r7, #8]
 8017cb4:	1dfb      	adds	r3, r7, #7
 8017cb6:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d020      	beq.n	8017d00 <RegionCommonChanMaskCopy+0x56>
 8017cbe:	68bb      	ldr	r3, [r7, #8]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d01d      	beq.n	8017d00 <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 8017cc4:	2317      	movs	r3, #23
 8017cc6:	18fb      	adds	r3, r7, r3
 8017cc8:	2200      	movs	r2, #0
 8017cca:	701a      	strb	r2, [r3, #0]
 8017ccc:	e011      	b.n	8017cf2 <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017cce:	2017      	movs	r0, #23
 8017cd0:	183b      	adds	r3, r7, r0
 8017cd2:	781b      	ldrb	r3, [r3, #0]
 8017cd4:	005b      	lsls	r3, r3, #1
 8017cd6:	68ba      	ldr	r2, [r7, #8]
 8017cd8:	18d2      	adds	r2, r2, r3
 8017cda:	183b      	adds	r3, r7, r0
 8017cdc:	781b      	ldrb	r3, [r3, #0]
 8017cde:	005b      	lsls	r3, r3, #1
 8017ce0:	68f9      	ldr	r1, [r7, #12]
 8017ce2:	18cb      	adds	r3, r1, r3
 8017ce4:	8812      	ldrh	r2, [r2, #0]
 8017ce6:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8017ce8:	183b      	adds	r3, r7, r0
 8017cea:	781a      	ldrb	r2, [r3, #0]
 8017cec:	183b      	adds	r3, r7, r0
 8017cee:	3201      	adds	r2, #1
 8017cf0:	701a      	strb	r2, [r3, #0]
 8017cf2:	2317      	movs	r3, #23
 8017cf4:	18fa      	adds	r2, r7, r3
 8017cf6:	1dfb      	adds	r3, r7, #7
 8017cf8:	7812      	ldrb	r2, [r2, #0]
 8017cfa:	781b      	ldrb	r3, [r3, #0]
 8017cfc:	429a      	cmp	r2, r3
 8017cfe:	d3e6      	bcc.n	8017cce <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 8017d00:	46c0      	nop			; (mov r8, r8)
 8017d02:	46bd      	mov	sp, r7
 8017d04:	b006      	add	sp, #24
 8017d06:	bd80      	pop	{r7, pc}

08017d08 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
 8017d08:	b580      	push	{r7, lr}
 8017d0a:	b084      	sub	sp, #16
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	60b9      	str	r1, [r7, #8]
 8017d10:	607a      	str	r2, [r7, #4]
 8017d12:	210f      	movs	r1, #15
 8017d14:	187b      	adds	r3, r7, r1
 8017d16:	1c02      	adds	r2, r0, #0
 8017d18:	701a      	strb	r2, [r3, #0]
    if( joined == true )
 8017d1a:	187b      	adds	r3, r7, r1
 8017d1c:	781b      	ldrb	r3, [r3, #0]
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d003      	beq.n	8017d2a <RegionCommonSetBandTxDone+0x22>
    {
        band->LastTxDoneTime = lastTxDone;
 8017d22:	68bb      	ldr	r3, [r7, #8]
 8017d24:	687a      	ldr	r2, [r7, #4]
 8017d26:	609a      	str	r2, [r3, #8]
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 8017d28:	e005      	b.n	8017d36 <RegionCommonSetBandTxDone+0x2e>
        band->LastTxDoneTime = lastTxDone;
 8017d2a:	68bb      	ldr	r3, [r7, #8]
 8017d2c:	687a      	ldr	r2, [r7, #4]
 8017d2e:	609a      	str	r2, [r3, #8]
        band->LastJoinTxDoneTime = lastTxDone;
 8017d30:	68bb      	ldr	r3, [r7, #8]
 8017d32:	687a      	ldr	r2, [r7, #4]
 8017d34:	605a      	str	r2, [r3, #4]
}
 8017d36:	46c0      	nop			; (mov r8, r8)
 8017d38:	46bd      	mov	sp, r7
 8017d3a:	b004      	add	sp, #16
 8017d3c:	bd80      	pop	{r7, pc}

08017d3e <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 8017d3e:	b590      	push	{r4, r7, lr}
 8017d40:	b089      	sub	sp, #36	; 0x24
 8017d42:	af00      	add	r7, sp, #0
 8017d44:	0004      	movs	r4, r0
 8017d46:	0008      	movs	r0, r1
 8017d48:	603a      	str	r2, [r7, #0]
 8017d4a:	0019      	movs	r1, r3
 8017d4c:	1dfb      	adds	r3, r7, #7
 8017d4e:	1c22      	adds	r2, r4, #0
 8017d50:	701a      	strb	r2, [r3, #0]
 8017d52:	1dbb      	adds	r3, r7, #6
 8017d54:	1c02      	adds	r2, r0, #0
 8017d56:	701a      	strb	r2, [r3, #0]
 8017d58:	1d7b      	adds	r3, r7, #5
 8017d5a:	1c0a      	adds	r2, r1, #0
 8017d5c:	701a      	strb	r2, [r3, #0]
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 8017d5e:	2301      	movs	r3, #1
 8017d60:	425b      	negs	r3, r3
 8017d62:	61fb      	str	r3, [r7, #28]

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 8017d64:	231b      	movs	r3, #27
 8017d66:	18fb      	adds	r3, r7, r3
 8017d68:	2200      	movs	r2, #0
 8017d6a:	701a      	strb	r2, [r3, #0]
 8017d6c:	e09c      	b.n	8017ea8 <RegionCommonUpdateBandTimeOff+0x16a>
    {
        if( joined == false )
 8017d6e:	1dfb      	adds	r3, r7, #7
 8017d70:	781b      	ldrb	r3, [r3, #0]
 8017d72:	2201      	movs	r2, #1
 8017d74:	4053      	eors	r3, r2
 8017d76:	b2db      	uxtb	r3, r3
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d04c      	beq.n	8017e16 <RegionCommonUpdateBandTimeOff+0xd8>
        {
            TimerTime_t elapsedJoin = TimerGetElapsedTime( bands[i].LastJoinTxDoneTime );
 8017d7c:	241b      	movs	r4, #27
 8017d7e:	193b      	adds	r3, r7, r4
 8017d80:	781b      	ldrb	r3, [r3, #0]
 8017d82:	011b      	lsls	r3, r3, #4
 8017d84:	683a      	ldr	r2, [r7, #0]
 8017d86:	18d3      	adds	r3, r2, r3
 8017d88:	685b      	ldr	r3, [r3, #4]
 8017d8a:	0018      	movs	r0, r3
 8017d8c:	f003 fa87 	bl	801b29e <TimerGetElapsedTime>
 8017d90:	0003      	movs	r3, r0
 8017d92:	613b      	str	r3, [r7, #16]
            TimerTime_t elapsedTx = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 8017d94:	193b      	adds	r3, r7, r4
 8017d96:	781b      	ldrb	r3, [r3, #0]
 8017d98:	011b      	lsls	r3, r3, #4
 8017d9a:	683a      	ldr	r2, [r7, #0]
 8017d9c:	18d3      	adds	r3, r2, r3
 8017d9e:	689b      	ldr	r3, [r3, #8]
 8017da0:	0018      	movs	r0, r3
 8017da2:	f003 fa7c 	bl	801b29e <TimerGetElapsedTime>
 8017da6:	0003      	movs	r3, r0
 8017da8:	60fb      	str	r3, [r7, #12]
            TimerTime_t txDoneTime =  MAX( elapsedJoin,
 8017daa:	1dbb      	adds	r3, r7, #6
 8017dac:	781b      	ldrb	r3, [r3, #0]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d001      	beq.n	8017db6 <RegionCommonUpdateBandTimeOff+0x78>
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	e000      	b.n	8017db8 <RegionCommonUpdateBandTimeOff+0x7a>
 8017db6:	2300      	movs	r3, #0
 8017db8:	693a      	ldr	r2, [r7, #16]
 8017dba:	4293      	cmp	r3, r2
 8017dbc:	d200      	bcs.n	8017dc0 <RegionCommonUpdateBandTimeOff+0x82>
 8017dbe:	0013      	movs	r3, r2
 8017dc0:	60bb      	str	r3, [r7, #8]
                                        ( dutyCycle == true ) ? elapsedTx : 0 );

            if( bands[i].TimeOff <= txDoneTime )
 8017dc2:	231b      	movs	r3, #27
 8017dc4:	18fb      	adds	r3, r7, r3
 8017dc6:	781b      	ldrb	r3, [r3, #0]
 8017dc8:	011b      	lsls	r3, r3, #4
 8017dca:	683a      	ldr	r2, [r7, #0]
 8017dcc:	18d3      	adds	r3, r2, r3
 8017dce:	68db      	ldr	r3, [r3, #12]
 8017dd0:	68ba      	ldr	r2, [r7, #8]
 8017dd2:	429a      	cmp	r2, r3
 8017dd4:	d307      	bcc.n	8017de6 <RegionCommonUpdateBandTimeOff+0xa8>
            {
                bands[i].TimeOff = 0;
 8017dd6:	231b      	movs	r3, #27
 8017dd8:	18fb      	adds	r3, r7, r3
 8017dda:	781b      	ldrb	r3, [r3, #0]
 8017ddc:	011b      	lsls	r3, r3, #4
 8017dde:	683a      	ldr	r2, [r7, #0]
 8017de0:	18d3      	adds	r3, r2, r3
 8017de2:	2200      	movs	r2, #0
 8017de4:	60da      	str	r2, [r3, #12]
            }
            if( bands[i].TimeOff != 0 )
 8017de6:	231b      	movs	r3, #27
 8017de8:	18fb      	adds	r3, r7, r3
 8017dea:	781b      	ldrb	r3, [r3, #0]
 8017dec:	011b      	lsls	r3, r3, #4
 8017dee:	683a      	ldr	r2, [r7, #0]
 8017df0:	18d3      	adds	r3, r2, r3
 8017df2:	68db      	ldr	r3, [r3, #12]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d051      	beq.n	8017e9c <RegionCommonUpdateBandTimeOff+0x15e>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 8017df8:	231b      	movs	r3, #27
 8017dfa:	18fb      	adds	r3, r7, r3
 8017dfc:	781b      	ldrb	r3, [r3, #0]
 8017dfe:	011b      	lsls	r3, r3, #4
 8017e00:	683a      	ldr	r2, [r7, #0]
 8017e02:	18d3      	adds	r3, r2, r3
 8017e04:	68da      	ldr	r2, [r3, #12]
 8017e06:	68bb      	ldr	r3, [r7, #8]
 8017e08:	1ad2      	subs	r2, r2, r3
 8017e0a:	69fb      	ldr	r3, [r7, #28]
 8017e0c:	4293      	cmp	r3, r2
 8017e0e:	d900      	bls.n	8017e12 <RegionCommonUpdateBandTimeOff+0xd4>
 8017e10:	0013      	movs	r3, r2
 8017e12:	61fb      	str	r3, [r7, #28]
 8017e14:	e042      	b.n	8017e9c <RegionCommonUpdateBandTimeOff+0x15e>
            }
        }
        else
        {
            if( dutyCycle == true )
 8017e16:	1dbb      	adds	r3, r7, #6
 8017e18:	781b      	ldrb	r3, [r3, #0]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d034      	beq.n	8017e88 <RegionCommonUpdateBandTimeOff+0x14a>
            {
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 8017e1e:	241b      	movs	r4, #27
 8017e20:	193b      	adds	r3, r7, r4
 8017e22:	781b      	ldrb	r3, [r3, #0]
 8017e24:	011b      	lsls	r3, r3, #4
 8017e26:	683a      	ldr	r2, [r7, #0]
 8017e28:	18d3      	adds	r3, r2, r3
 8017e2a:	689b      	ldr	r3, [r3, #8]
 8017e2c:	0018      	movs	r0, r3
 8017e2e:	f003 fa36 	bl	801b29e <TimerGetElapsedTime>
 8017e32:	0003      	movs	r3, r0
 8017e34:	617b      	str	r3, [r7, #20]
                if( bands[i].TimeOff <= elapsed )
 8017e36:	193b      	adds	r3, r7, r4
 8017e38:	781b      	ldrb	r3, [r3, #0]
 8017e3a:	011b      	lsls	r3, r3, #4
 8017e3c:	683a      	ldr	r2, [r7, #0]
 8017e3e:	18d3      	adds	r3, r2, r3
 8017e40:	68db      	ldr	r3, [r3, #12]
 8017e42:	697a      	ldr	r2, [r7, #20]
 8017e44:	429a      	cmp	r2, r3
 8017e46:	d307      	bcc.n	8017e58 <RegionCommonUpdateBandTimeOff+0x11a>
                {
                    bands[i].TimeOff = 0;
 8017e48:	231b      	movs	r3, #27
 8017e4a:	18fb      	adds	r3, r7, r3
 8017e4c:	781b      	ldrb	r3, [r3, #0]
 8017e4e:	011b      	lsls	r3, r3, #4
 8017e50:	683a      	ldr	r2, [r7, #0]
 8017e52:	18d3      	adds	r3, r2, r3
 8017e54:	2200      	movs	r2, #0
 8017e56:	60da      	str	r2, [r3, #12]
                }
                if( bands[i].TimeOff != 0 )
 8017e58:	231b      	movs	r3, #27
 8017e5a:	18fb      	adds	r3, r7, r3
 8017e5c:	781b      	ldrb	r3, [r3, #0]
 8017e5e:	011b      	lsls	r3, r3, #4
 8017e60:	683a      	ldr	r2, [r7, #0]
 8017e62:	18d3      	adds	r3, r2, r3
 8017e64:	68db      	ldr	r3, [r3, #12]
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d018      	beq.n	8017e9c <RegionCommonUpdateBandTimeOff+0x15e>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - elapsed, nextTxDelay );
 8017e6a:	231b      	movs	r3, #27
 8017e6c:	18fb      	adds	r3, r7, r3
 8017e6e:	781b      	ldrb	r3, [r3, #0]
 8017e70:	011b      	lsls	r3, r3, #4
 8017e72:	683a      	ldr	r2, [r7, #0]
 8017e74:	18d3      	adds	r3, r2, r3
 8017e76:	68da      	ldr	r2, [r3, #12]
 8017e78:	697b      	ldr	r3, [r7, #20]
 8017e7a:	1ad2      	subs	r2, r2, r3
 8017e7c:	69fb      	ldr	r3, [r7, #28]
 8017e7e:	4293      	cmp	r3, r2
 8017e80:	d900      	bls.n	8017e84 <RegionCommonUpdateBandTimeOff+0x146>
 8017e82:	0013      	movs	r3, r2
 8017e84:	61fb      	str	r3, [r7, #28]
 8017e86:	e009      	b.n	8017e9c <RegionCommonUpdateBandTimeOff+0x15e>
                }
            }
            else
            {
                nextTxDelay = 0;
 8017e88:	2300      	movs	r3, #0
 8017e8a:	61fb      	str	r3, [r7, #28]
                bands[i].TimeOff = 0;
 8017e8c:	231b      	movs	r3, #27
 8017e8e:	18fb      	adds	r3, r7, r3
 8017e90:	781b      	ldrb	r3, [r3, #0]
 8017e92:	011b      	lsls	r3, r3, #4
 8017e94:	683a      	ldr	r2, [r7, #0]
 8017e96:	18d3      	adds	r3, r2, r3
 8017e98:	2200      	movs	r2, #0
 8017e9a:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 8017e9c:	211b      	movs	r1, #27
 8017e9e:	187b      	adds	r3, r7, r1
 8017ea0:	781a      	ldrb	r2, [r3, #0]
 8017ea2:	187b      	adds	r3, r7, r1
 8017ea4:	3201      	adds	r2, #1
 8017ea6:	701a      	strb	r2, [r3, #0]
 8017ea8:	231b      	movs	r3, #27
 8017eaa:	18fa      	adds	r2, r7, r3
 8017eac:	1d7b      	adds	r3, r7, #5
 8017eae:	7812      	ldrb	r2, [r2, #0]
 8017eb0:	781b      	ldrb	r3, [r3, #0]
 8017eb2:	429a      	cmp	r2, r3
 8017eb4:	d200      	bcs.n	8017eb8 <RegionCommonUpdateBandTimeOff+0x17a>
 8017eb6:	e75a      	b.n	8017d6e <RegionCommonUpdateBandTimeOff+0x30>
            }
        }
    }

    return ( nextTxDelay == TIMERTIME_T_MAX ) ? 0 : nextTxDelay;
 8017eb8:	69fb      	ldr	r3, [r7, #28]
 8017eba:	3301      	adds	r3, #1
 8017ebc:	d001      	beq.n	8017ec2 <RegionCommonUpdateBandTimeOff+0x184>
 8017ebe:	69fb      	ldr	r3, [r7, #28]
 8017ec0:	e000      	b.n	8017ec4 <RegionCommonUpdateBandTimeOff+0x186>
 8017ec2:	2300      	movs	r3, #0
}
 8017ec4:	0018      	movs	r0, r3
 8017ec6:	46bd      	mov	sp, r7
 8017ec8:	b009      	add	sp, #36	; 0x24
 8017eca:	bd90      	pop	{r4, r7, pc}

08017ecc <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b084      	sub	sp, #16
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
 8017ed4:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8017ed6:	230f      	movs	r3, #15
 8017ed8:	18fb      	adds	r3, r7, r3
 8017eda:	2200      	movs	r2, #0
 8017edc:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	781b      	ldrb	r3, [r3, #0]
 8017ee2:	2b03      	cmp	r3, #3
 8017ee4:	d141      	bne.n	8017f6a <RegionCommonParseLinkAdrReq+0x9e>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	3301      	adds	r3, #1
 8017eea:	781b      	ldrb	r3, [r3, #0]
 8017eec:	b25a      	sxtb	r2, r3
 8017eee:	683b      	ldr	r3, [r7, #0]
 8017ef0:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8017ef2:	683b      	ldr	r3, [r7, #0]
 8017ef4:	785b      	ldrb	r3, [r3, #1]
 8017ef6:	b25b      	sxtb	r3, r3
 8017ef8:	220f      	movs	r2, #15
 8017efa:	4013      	ands	r3, r2
 8017efc:	b25a      	sxtb	r2, r3
 8017efe:	683b      	ldr	r3, [r7, #0]
 8017f00:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8017f02:	683b      	ldr	r3, [r7, #0]
 8017f04:	785b      	ldrb	r3, [r3, #1]
 8017f06:	b25b      	sxtb	r3, r3
 8017f08:	b2db      	uxtb	r3, r3
 8017f0a:	091b      	lsrs	r3, r3, #4
 8017f0c:	b2db      	uxtb	r3, r3
 8017f0e:	b25a      	sxtb	r2, r3
 8017f10:	683b      	ldr	r3, [r7, #0]
 8017f12:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	3302      	adds	r3, #2
 8017f18:	781b      	ldrb	r3, [r3, #0]
 8017f1a:	b29a      	uxth	r2, r3
 8017f1c:	683b      	ldr	r3, [r7, #0]
 8017f1e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017f20:	683b      	ldr	r3, [r7, #0]
 8017f22:	889b      	ldrh	r3, [r3, #4]
 8017f24:	b21a      	sxth	r2, r3
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	3303      	adds	r3, #3
 8017f2a:	781b      	ldrb	r3, [r3, #0]
 8017f2c:	021b      	lsls	r3, r3, #8
 8017f2e:	b21b      	sxth	r3, r3
 8017f30:	4313      	orrs	r3, r2
 8017f32:	b21b      	sxth	r3, r3
 8017f34:	b29a      	uxth	r2, r3
 8017f36:	683b      	ldr	r3, [r7, #0]
 8017f38:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	791a      	ldrb	r2, [r3, #4]
 8017f3e:	683b      	ldr	r3, [r7, #0]
 8017f40:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8017f42:	683b      	ldr	r3, [r7, #0]
 8017f44:	781b      	ldrb	r3, [r3, #0]
 8017f46:	091b      	lsrs	r3, r3, #4
 8017f48:	b2db      	uxtb	r3, r3
 8017f4a:	2207      	movs	r2, #7
 8017f4c:	4013      	ands	r3, r2
 8017f4e:	b2da      	uxtb	r2, r3
 8017f50:	683b      	ldr	r3, [r7, #0]
 8017f52:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017f54:	683b      	ldr	r3, [r7, #0]
 8017f56:	781b      	ldrb	r3, [r3, #0]
 8017f58:	220f      	movs	r2, #15
 8017f5a:	4013      	ands	r3, r2
 8017f5c:	b2da      	uxtb	r2, r3
 8017f5e:	683b      	ldr	r3, [r7, #0]
 8017f60:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017f62:	230f      	movs	r3, #15
 8017f64:	18fb      	adds	r3, r7, r3
 8017f66:	2205      	movs	r2, #5
 8017f68:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 8017f6a:	230f      	movs	r3, #15
 8017f6c:	18fb      	adds	r3, r7, r3
 8017f6e:	781b      	ldrb	r3, [r3, #0]
}
 8017f70:	0018      	movs	r0, r3
 8017f72:	46bd      	mov	sp, r7
 8017f74:	b004      	add	sp, #16
 8017f76:	bd80      	pop	{r7, pc}

08017f78 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017f78:	b5b0      	push	{r4, r5, r7, lr}
 8017f7a:	b088      	sub	sp, #32
 8017f7c:	af02      	add	r7, sp, #8
 8017f7e:	60f8      	str	r0, [r7, #12]
 8017f80:	60b9      	str	r1, [r7, #8]
 8017f82:	607a      	str	r2, [r7, #4]
 8017f84:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017f86:	2317      	movs	r3, #23
 8017f88:	18fb      	adds	r3, r7, r3
 8017f8a:	68fa      	ldr	r2, [r7, #12]
 8017f8c:	7912      	ldrb	r2, [r2, #4]
 8017f8e:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 8017f90:	2316      	movs	r3, #22
 8017f92:	18fb      	adds	r3, r7, r3
 8017f94:	68fa      	ldr	r2, [r7, #12]
 8017f96:	7992      	ldrb	r2, [r2, #6]
 8017f98:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 8017f9a:	2315      	movs	r3, #21
 8017f9c:	18fb      	adds	r3, r7, r3
 8017f9e:	68fa      	ldr	r2, [r7, #12]
 8017fa0:	79d2      	ldrb	r2, [r2, #7]
 8017fa2:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	7a1a      	ldrb	r2, [r3, #8]
 8017fa8:	2314      	movs	r3, #20
 8017faa:	18fb      	adds	r3, r7, r3
 8017fac:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	795b      	ldrb	r3, [r3, #5]
 8017fb2:	2201      	movs	r2, #1
 8017fb4:	4053      	eors	r3, r2
 8017fb6:	b2db      	uxtb	r3, r3
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d00e      	beq.n	8017fda <RegionCommonLinkAdrReqVerifyParams+0x62>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8017fbc:	2314      	movs	r3, #20
 8017fbe:	18fb      	adds	r3, r7, r3
 8017fc0:	68fa      	ldr	r2, [r7, #12]
 8017fc2:	7ad2      	ldrb	r2, [r2, #11]
 8017fc4:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 8017fc6:	2316      	movs	r3, #22
 8017fc8:	18fb      	adds	r3, r7, r3
 8017fca:	68fa      	ldr	r2, [r7, #12]
 8017fcc:	7a52      	ldrb	r2, [r2, #9]
 8017fce:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 8017fd0:	2315      	movs	r3, #21
 8017fd2:	18fb      	adds	r3, r7, r3
 8017fd4:	68fa      	ldr	r2, [r7, #12]
 8017fd6:	7a92      	ldrb	r2, [r2, #10]
 8017fd8:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 8017fda:	2317      	movs	r3, #23
 8017fdc:	18fb      	adds	r3, r7, r3
 8017fde:	781b      	ldrb	r3, [r3, #0]
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d049      	beq.n	8018078 <RegionCommonLinkAdrReqVerifyParams+0x100>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017fe4:	68fb      	ldr	r3, [r7, #12]
 8017fe6:	7b18      	ldrb	r0, [r3, #12]
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	691c      	ldr	r4, [r3, #16]
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	2514      	movs	r5, #20
 8017ff0:	575d      	ldrsb	r5, [r3, r5]
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	2215      	movs	r2, #21
 8017ff6:	569a      	ldrsb	r2, [r3, r2]
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	699b      	ldr	r3, [r3, #24]
 8017ffc:	2116      	movs	r1, #22
 8017ffe:	1879      	adds	r1, r7, r1
 8018000:	7809      	ldrb	r1, [r1, #0]
 8018002:	b249      	sxtb	r1, r1
 8018004:	9301      	str	r3, [sp, #4]
 8018006:	9200      	str	r2, [sp, #0]
 8018008:	002b      	movs	r3, r5
 801800a:	000a      	movs	r2, r1
 801800c:	0021      	movs	r1, r4
 801800e:	f7ff fd09 	bl	8017a24 <RegionCommonChanVerifyDr>
 8018012:	0003      	movs	r3, r0
 8018014:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8018016:	2301      	movs	r3, #1
 8018018:	4053      	eors	r3, r2
 801801a:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801801c:	2b00      	cmp	r3, #0
 801801e:	d006      	beq.n	801802e <RegionCommonLinkAdrReqVerifyParams+0xb6>
        {
            status &= 0xFD; // Datarate KO
 8018020:	2217      	movs	r2, #23
 8018022:	18bb      	adds	r3, r7, r2
 8018024:	18ba      	adds	r2, r7, r2
 8018026:	7812      	ldrb	r2, [r2, #0]
 8018028:	2102      	movs	r1, #2
 801802a:	438a      	bics	r2, r1
 801802c:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	211d      	movs	r1, #29
 8018032:	5659      	ldrsb	r1, [r3, r1]
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	221c      	movs	r2, #28
 8018038:	569a      	ldrsb	r2, [r3, r2]
 801803a:	2315      	movs	r3, #21
 801803c:	18fb      	adds	r3, r7, r3
 801803e:	781b      	ldrb	r3, [r3, #0]
 8018040:	b25b      	sxtb	r3, r3
 8018042:	0018      	movs	r0, r3
 8018044:	f7ff fd88 	bl	8017b58 <RegionCommonValueInRange>
 8018048:	1e03      	subs	r3, r0, #0
 801804a:	d115      	bne.n	8018078 <RegionCommonLinkAdrReqVerifyParams+0x100>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	7f5b      	ldrb	r3, [r3, #29]
 8018050:	b25b      	sxtb	r3, r3
 8018052:	2215      	movs	r2, #21
 8018054:	18ba      	adds	r2, r7, r2
 8018056:	7812      	ldrb	r2, [r2, #0]
 8018058:	b252      	sxtb	r2, r2
 801805a:	429a      	cmp	r2, r3
 801805c:	da05      	bge.n	801806a <RegionCommonLinkAdrReqVerifyParams+0xf2>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801805e:	2315      	movs	r3, #21
 8018060:	18fb      	adds	r3, r7, r3
 8018062:	68fa      	ldr	r2, [r7, #12]
 8018064:	7f52      	ldrb	r2, [r2, #29]
 8018066:	701a      	strb	r2, [r3, #0]
 8018068:	e006      	b.n	8018078 <RegionCommonLinkAdrReqVerifyParams+0x100>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801806a:	2217      	movs	r2, #23
 801806c:	18bb      	adds	r3, r7, r2
 801806e:	18ba      	adds	r2, r7, r2
 8018070:	7812      	ldrb	r2, [r2, #0]
 8018072:	2104      	movs	r1, #4
 8018074:	438a      	bics	r2, r1
 8018076:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8018078:	2317      	movs	r3, #23
 801807a:	18fb      	adds	r3, r7, r3
 801807c:	781b      	ldrb	r3, [r3, #0]
 801807e:	2b07      	cmp	r3, #7
 8018080:	d109      	bne.n	8018096 <RegionCommonLinkAdrReqVerifyParams+0x11e>
    {
        if( nbRepetitions == 0 )
 8018082:	2314      	movs	r3, #20
 8018084:	18fb      	adds	r3, r7, r3
 8018086:	781b      	ldrb	r3, [r3, #0]
 8018088:	b25b      	sxtb	r3, r3
 801808a:	2b00      	cmp	r3, #0
 801808c:	d103      	bne.n	8018096 <RegionCommonLinkAdrReqVerifyParams+0x11e>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 801808e:	2314      	movs	r3, #20
 8018090:	18fb      	adds	r3, r7, r3
 8018092:	2201      	movs	r2, #1
 8018094:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 8018096:	68bb      	ldr	r3, [r7, #8]
 8018098:	2216      	movs	r2, #22
 801809a:	18ba      	adds	r2, r7, r2
 801809c:	7812      	ldrb	r2, [r2, #0]
 801809e:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	2215      	movs	r2, #21
 80180a4:	18ba      	adds	r2, r7, r2
 80180a6:	7812      	ldrb	r2, [r2, #0]
 80180a8:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80180aa:	2314      	movs	r3, #20
 80180ac:	18fb      	adds	r3, r7, r3
 80180ae:	781a      	ldrb	r2, [r3, #0]
 80180b0:	683b      	ldr	r3, [r7, #0]
 80180b2:	701a      	strb	r2, [r3, #0]

    return status;
 80180b4:	2317      	movs	r3, #23
 80180b6:	18fb      	adds	r3, r7, r3
 80180b8:	781b      	ldrb	r3, [r3, #0]
}
 80180ba:	0018      	movs	r0, r3
 80180bc:	46bd      	mov	sp, r7
 80180be:	b006      	add	sp, #24
 80180c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080180c4 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 80180c4:	b5b0      	push	{r4, r5, r7, lr}
 80180c6:	b082      	sub	sp, #8
 80180c8:	af00      	add	r7, sp, #0
 80180ca:	0002      	movs	r2, r0
 80180cc:	6039      	str	r1, [r7, #0]
 80180ce:	1dfb      	adds	r3, r7, #7
 80180d0:	701a      	strb	r2, [r3, #0]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 80180d2:	1dfb      	adds	r3, r7, #7
 80180d4:	781b      	ldrb	r3, [r3, #0]
 80180d6:	2201      	movs	r2, #1
 80180d8:	409a      	lsls	r2, r3
 80180da:	0013      	movs	r3, r2
 80180dc:	0018      	movs	r0, r3
 80180de:	f7ea fe11 	bl	8002d04 <__aeabi_i2d>
 80180e2:	0004      	movs	r4, r0
 80180e4:	000d      	movs	r5, r1
 80180e6:	6838      	ldr	r0, [r7, #0]
 80180e8:	f7ea fe46 	bl	8002d78 <__aeabi_ui2d>
 80180ec:	0002      	movs	r2, r0
 80180ee:	000b      	movs	r3, r1
 80180f0:	0020      	movs	r0, r4
 80180f2:	0029      	movs	r1, r5
 80180f4:	f7e9 fc0c 	bl	8001910 <__aeabi_ddiv>
 80180f8:	0003      	movs	r3, r0
 80180fa:	000c      	movs	r4, r1
 80180fc:	0018      	movs	r0, r3
 80180fe:	0021      	movs	r1, r4
 8018100:	2200      	movs	r2, #0
 8018102:	4b05      	ldr	r3, [pc, #20]	; (8018118 <RegionCommonComputeSymbolTimeLoRa+0x54>)
 8018104:	f7ea f80e 	bl	8002124 <__aeabi_dmul>
 8018108:	0003      	movs	r3, r0
 801810a:	000c      	movs	r4, r1
}
 801810c:	0018      	movs	r0, r3
 801810e:	0021      	movs	r1, r4
 8018110:	46bd      	mov	sp, r7
 8018112:	b002      	add	sp, #8
 8018114:	bdb0      	pop	{r4, r5, r7, pc}
 8018116:	46c0      	nop			; (mov r8, r8)
 8018118:	408f4000 	.word	0x408f4000

0801811c <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 801811c:	b590      	push	{r4, r7, lr}
 801811e:	b083      	sub	sp, #12
 8018120:	af00      	add	r7, sp, #0
 8018122:	0002      	movs	r2, r0
 8018124:	1dfb      	adds	r3, r7, #7
 8018126:	701a      	strb	r2, [r3, #0]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 8018128:	1dfb      	adds	r3, r7, #7
 801812a:	781b      	ldrb	r3, [r3, #0]
 801812c:	0018      	movs	r0, r3
 801812e:	f7ea fe23 	bl	8002d78 <__aeabi_ui2d>
 8018132:	0003      	movs	r3, r0
 8018134:	000c      	movs	r4, r1
 8018136:	001a      	movs	r2, r3
 8018138:	0023      	movs	r3, r4
 801813a:	2000      	movs	r0, #0
 801813c:	4904      	ldr	r1, [pc, #16]	; (8018150 <RegionCommonComputeSymbolTimeFsk+0x34>)
 801813e:	f7e9 fbe7 	bl	8001910 <__aeabi_ddiv>
 8018142:	0003      	movs	r3, r0
 8018144:	000c      	movs	r4, r1
}
 8018146:	0018      	movs	r0, r3
 8018148:	0021      	movs	r1, r4
 801814a:	46bd      	mov	sp, r7
 801814c:	b003      	add	sp, #12
 801814e:	bd90      	pop	{r4, r7, pc}
 8018150:	40200000 	.word	0x40200000

08018154 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 8018154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018156:	b085      	sub	sp, #20
 8018158:	af00      	add	r7, sp, #0
 801815a:	60b8      	str	r0, [r7, #8]
 801815c:	60f9      	str	r1, [r7, #12]
 801815e:	603b      	str	r3, [r7, #0]
 8018160:	1dfb      	adds	r3, r7, #7
 8018162:	701a      	strb	r2, [r3, #0]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 8018164:	1dfb      	adds	r3, r7, #7
 8018166:	781c      	ldrb	r4, [r3, #0]
 8018168:	1dfb      	adds	r3, r7, #7
 801816a:	781b      	ldrb	r3, [r3, #0]
 801816c:	3b04      	subs	r3, #4
 801816e:	005b      	lsls	r3, r3, #1
 8018170:	0018      	movs	r0, r3
 8018172:	f7ea fdc7 	bl	8002d04 <__aeabi_i2d>
 8018176:	68ba      	ldr	r2, [r7, #8]
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	f7e9 ffd3 	bl	8002124 <__aeabi_dmul>
 801817e:	0002      	movs	r2, r0
 8018180:	000b      	movs	r3, r1
 8018182:	0015      	movs	r5, r2
 8018184:	001e      	movs	r6, r3
 8018186:	683b      	ldr	r3, [r7, #0]
 8018188:	005b      	lsls	r3, r3, #1
 801818a:	0018      	movs	r0, r3
 801818c:	f7ea fdf4 	bl	8002d78 <__aeabi_ui2d>
 8018190:	0002      	movs	r2, r0
 8018192:	000b      	movs	r3, r1
 8018194:	0028      	movs	r0, r5
 8018196:	0031      	movs	r1, r6
 8018198:	f7e9 f89e 	bl	80012d8 <__aeabi_dadd>
 801819c:	0002      	movs	r2, r0
 801819e:	000b      	movs	r3, r1
 80181a0:	0010      	movs	r0, r2
 80181a2:	0019      	movs	r1, r3
 80181a4:	68ba      	ldr	r2, [r7, #8]
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	f7e9 fbb2 	bl	8001910 <__aeabi_ddiv>
 80181ac:	0002      	movs	r2, r0
 80181ae:	000b      	movs	r3, r1
 80181b0:	0010      	movs	r0, r2
 80181b2:	0019      	movs	r1, r3
 80181b4:	f003 ff08 	bl	801bfc8 <ceil>
 80181b8:	0002      	movs	r2, r0
 80181ba:	000b      	movs	r3, r1
 80181bc:	0010      	movs	r0, r2
 80181be:	0019      	movs	r1, r3
 80181c0:	f7e8 fa16 	bl	80005f0 <__aeabi_d2uiz>
 80181c4:	0002      	movs	r2, r0
 80181c6:	0023      	movs	r3, r4
 80181c8:	4293      	cmp	r3, r2
 80181ca:	d200      	bcs.n	80181ce <RegionCommonComputeRxWindowParameters+0x7a>
 80181cc:	0013      	movs	r3, r2
 80181ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181d0:	6013      	str	r3, [r2, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 80181d2:	2200      	movs	r2, #0
 80181d4:	4b20      	ldr	r3, [pc, #128]	; (8018258 <RegionCommonComputeRxWindowParameters+0x104>)
 80181d6:	68b8      	ldr	r0, [r7, #8]
 80181d8:	68f9      	ldr	r1, [r7, #12]
 80181da:	f7e9 ffa3 	bl	8002124 <__aeabi_dmul>
 80181de:	0003      	movs	r3, r0
 80181e0:	000c      	movs	r4, r1
 80181e2:	0025      	movs	r5, r4
 80181e4:	001c      	movs	r4, r3
 80181e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	0018      	movs	r0, r3
 80181ec:	f7ea fdc4 	bl	8002d78 <__aeabi_ui2d>
 80181f0:	68ba      	ldr	r2, [r7, #8]
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	f7e9 ff96 	bl	8002124 <__aeabi_dmul>
 80181f8:	0002      	movs	r2, r0
 80181fa:	000b      	movs	r3, r1
 80181fc:	0010      	movs	r0, r2
 80181fe:	0019      	movs	r1, r3
 8018200:	2200      	movs	r2, #0
 8018202:	2380      	movs	r3, #128	; 0x80
 8018204:	05db      	lsls	r3, r3, #23
 8018206:	f7e9 fb83 	bl	8001910 <__aeabi_ddiv>
 801820a:	0002      	movs	r2, r0
 801820c:	000b      	movs	r3, r1
 801820e:	0020      	movs	r0, r4
 8018210:	0029      	movs	r1, r5
 8018212:	f7ea f9f9 	bl	8002608 <__aeabi_dsub>
 8018216:	0003      	movs	r3, r0
 8018218:	000c      	movs	r4, r1
 801821a:	0025      	movs	r5, r4
 801821c:	001c      	movs	r4, r3
 801821e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018220:	f7ea fdaa 	bl	8002d78 <__aeabi_ui2d>
 8018224:	0002      	movs	r2, r0
 8018226:	000b      	movs	r3, r1
 8018228:	0020      	movs	r0, r4
 801822a:	0029      	movs	r1, r5
 801822c:	f7ea f9ec 	bl	8002608 <__aeabi_dsub>
 8018230:	0003      	movs	r3, r0
 8018232:	000c      	movs	r4, r1
 8018234:	0018      	movs	r0, r3
 8018236:	0021      	movs	r1, r4
 8018238:	f003 fec6 	bl	801bfc8 <ceil>
 801823c:	0003      	movs	r3, r0
 801823e:	000c      	movs	r4, r1
 8018240:	0018      	movs	r0, r3
 8018242:	0021      	movs	r1, r4
 8018244:	f7ea fd28 	bl	8002c98 <__aeabi_d2iz>
 8018248:	0002      	movs	r2, r0
 801824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801824c:	601a      	str	r2, [r3, #0]
}
 801824e:	46c0      	nop			; (mov r8, r8)
 8018250:	46bd      	mov	sp, r7
 8018252:	b005      	add	sp, #20
 8018254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018256:	46c0      	nop			; (mov r8, r8)
 8018258:	40100000 	.word	0x40100000

0801825c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 801825c:	b5b0      	push	{r4, r5, r7, lr}
 801825e:	b086      	sub	sp, #24
 8018260:	af00      	add	r7, sp, #0
 8018262:	60b9      	str	r1, [r7, #8]
 8018264:	607a      	str	r2, [r7, #4]
 8018266:	210f      	movs	r1, #15
 8018268:	187b      	adds	r3, r7, r1
 801826a:	1c02      	adds	r2, r0, #0
 801826c:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
 801826e:	2517      	movs	r5, #23
 8018270:	197b      	adds	r3, r7, r5
 8018272:	2200      	movs	r2, #0
 8018274:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8018276:	187b      	adds	r3, r7, r1
 8018278:	781b      	ldrb	r3, [r3, #0]
 801827a:	b25b      	sxtb	r3, r3
 801827c:	005b      	lsls	r3, r3, #1
 801827e:	0018      	movs	r0, r3
 8018280:	f7e8 ffea 	bl	8001258 <__aeabi_ui2f>
 8018284:	1c03      	adds	r3, r0, #0
 8018286:	1c19      	adds	r1, r3, #0
 8018288:	68b8      	ldr	r0, [r7, #8]
 801828a:	f7e8 fdb7 	bl	8000dfc <__aeabi_fsub>
 801828e:	1c03      	adds	r3, r0, #0
 8018290:	6879      	ldr	r1, [r7, #4]
 8018292:	1c18      	adds	r0, r3, #0
 8018294:	f7e8 fdb2 	bl	8000dfc <__aeabi_fsub>
 8018298:	1c03      	adds	r3, r0, #0
 801829a:	1c18      	adds	r0, r3, #0
 801829c:	f7ea fd9e 	bl	8002ddc <__aeabi_f2d>
 80182a0:	0003      	movs	r3, r0
 80182a2:	000c      	movs	r4, r1
 80182a4:	0018      	movs	r0, r3
 80182a6:	0021      	movs	r1, r4
 80182a8:	f003 ff10 	bl	801c0cc <floor>
 80182ac:	0002      	movs	r2, r0
 80182ae:	000b      	movs	r3, r1
 80182b0:	197c      	adds	r4, r7, r5
 80182b2:	0010      	movs	r0, r2
 80182b4:	0019      	movs	r1, r3
 80182b6:	f7ea fcef 	bl	8002c98 <__aeabi_d2iz>
 80182ba:	0003      	movs	r3, r0
 80182bc:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 80182be:	197b      	adds	r3, r7, r5
 80182c0:	781b      	ldrb	r3, [r3, #0]
 80182c2:	b25b      	sxtb	r3, r3
}
 80182c4:	0018      	movs	r0, r3
 80182c6:	46bd      	mov	sp, r7
 80182c8:	b006      	add	sp, #24
 80182ca:	bdb0      	pop	{r4, r5, r7, pc}

080182cc <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 80182cc:	b5b0      	push	{r4, r5, r7, lr}
 80182ce:	b084      	sub	sp, #16
 80182d0:	af00      	add	r7, sp, #0
 80182d2:	6078      	str	r0, [r7, #4]
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	681a      	ldr	r2, [r3, #0]
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	7adb      	ldrb	r3, [r3, #11]
 80182dc:	0019      	movs	r1, r3
 80182de:	000b      	movs	r3, r1
 80182e0:	005b      	lsls	r3, r3, #1
 80182e2:	185b      	adds	r3, r3, r1
 80182e4:	009b      	lsls	r3, r3, #2
 80182e6:	18d2      	adds	r2, r2, r3
 80182e8:	210f      	movs	r1, #15
 80182ea:	187b      	adds	r3, r7, r1
 80182ec:	7a52      	ldrb	r2, [r2, #9]
 80182ee:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	685a      	ldr	r2, [r3, #4]
 80182f4:	187b      	adds	r3, r7, r1
 80182f6:	781b      	ldrb	r3, [r3, #0]
 80182f8:	011b      	lsls	r3, r3, #4
 80182fa:	18d2      	adds	r2, r2, r3
 80182fc:	230c      	movs	r3, #12
 80182fe:	18fb      	adds	r3, r7, r3
 8018300:	8812      	ldrh	r2, [r2, #0]
 8018302:	801a      	strh	r2, [r3, #0]
    uint16_t joinDutyCycle = 0;
 8018304:	230a      	movs	r3, #10
 8018306:	18fb      	adds	r3, r7, r3
 8018308:	2200      	movs	r2, #0
 801830a:	801a      	strh	r2, [r3, #0]

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	685a      	ldr	r2, [r3, #4]
 8018310:	187b      	adds	r3, r7, r1
 8018312:	781b      	ldrb	r3, [r3, #0]
 8018314:	011b      	lsls	r3, r3, #4
 8018316:	18d3      	adds	r3, r2, r3
 8018318:	2200      	movs	r2, #0
 801831a:	60da      	str	r2, [r3, #12]

    if( calcBackOffParams->Joined == false )
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	7a5b      	ldrb	r3, [r3, #9]
 8018320:	2201      	movs	r2, #1
 8018322:	4053      	eors	r3, r2
 8018324:	b2db      	uxtb	r3, r3
 8018326:	2b00      	cmp	r3, #0
 8018328:	d03c      	beq.n	80183a4 <RegionCommonCalcBackOff+0xd8>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	68db      	ldr	r3, [r3, #12]
 801832e:	250a      	movs	r5, #10
 8018330:	197c      	adds	r4, r7, r5
 8018332:	0018      	movs	r0, r3
 8018334:	f7ff fb4a 	bl	80179cc <RegionCommonGetJoinDc>
 8018338:	0003      	movs	r3, r0
 801833a:	8023      	strh	r3, [r4, #0]
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801833c:	210c      	movs	r1, #12
 801833e:	187a      	adds	r2, r7, r1
 8018340:	197b      	adds	r3, r7, r5
 8018342:	1879      	adds	r1, r7, r1
 8018344:	880c      	ldrh	r4, [r1, #0]
 8018346:	881b      	ldrh	r3, [r3, #0]
 8018348:	b298      	uxth	r0, r3
 801834a:	b2a1      	uxth	r1, r4
 801834c:	4288      	cmp	r0, r1
 801834e:	d200      	bcs.n	8018352 <RegionCommonCalcBackOff+0x86>
 8018350:	1c23      	adds	r3, r4, #0
 8018352:	8013      	strh	r3, [r2, #0]
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	7a9b      	ldrb	r3, [r3, #10]
 8018358:	2201      	movs	r2, #1
 801835a:	4053      	eors	r3, r2
 801835c:	b2db      	uxtb	r3, r3
 801835e:	2b00      	cmp	r3, #0
 8018360:	d010      	beq.n	8018384 <RegionCommonCalcBackOff+0xb8>
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	7a1b      	ldrb	r3, [r3, #8]
 8018366:	2201      	movs	r2, #1
 8018368:	4053      	eors	r3, r2
 801836a:	b2db      	uxtb	r3, r3
 801836c:	2b00      	cmp	r3, #0
 801836e:	d009      	beq.n	8018384 <RegionCommonCalcBackOff+0xb8>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	685a      	ldr	r2, [r3, #4]
 8018374:	230f      	movs	r3, #15
 8018376:	18fb      	adds	r3, r7, r3
 8018378:	781b      	ldrb	r3, [r3, #0]
 801837a:	011b      	lsls	r3, r3, #4
 801837c:	18d3      	adds	r3, r2, r3
 801837e:	2200      	movs	r2, #0
 8018380:	60da      	str	r2, [r3, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 8018382:	e02c      	b.n	80183de <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8018384:	230c      	movs	r3, #12
 8018386:	18fb      	adds	r3, r7, r3
 8018388:	881b      	ldrh	r3, [r3, #0]
 801838a:	1e5a      	subs	r2, r3, #1
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	6919      	ldr	r1, [r3, #16]
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	6858      	ldr	r0, [r3, #4]
 8018394:	230f      	movs	r3, #15
 8018396:	18fb      	adds	r3, r7, r3
 8018398:	781b      	ldrb	r3, [r3, #0]
 801839a:	011b      	lsls	r3, r3, #4
 801839c:	18c3      	adds	r3, r0, r3
 801839e:	434a      	muls	r2, r1
 80183a0:	60da      	str	r2, [r3, #12]
}
 80183a2:	e01c      	b.n	80183de <RegionCommonCalcBackOff+0x112>
        if( calcBackOffParams->DutyCycleEnabled == true )
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	7a9b      	ldrb	r3, [r3, #10]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d00f      	beq.n	80183cc <RegionCommonCalcBackOff+0x100>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 80183ac:	230c      	movs	r3, #12
 80183ae:	18fb      	adds	r3, r7, r3
 80183b0:	881b      	ldrh	r3, [r3, #0]
 80183b2:	1e5a      	subs	r2, r3, #1
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	6919      	ldr	r1, [r3, #16]
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	6858      	ldr	r0, [r3, #4]
 80183bc:	230f      	movs	r3, #15
 80183be:	18fb      	adds	r3, r7, r3
 80183c0:	781b      	ldrb	r3, [r3, #0]
 80183c2:	011b      	lsls	r3, r3, #4
 80183c4:	18c3      	adds	r3, r0, r3
 80183c6:	434a      	muls	r2, r1
 80183c8:	60da      	str	r2, [r3, #12]
}
 80183ca:	e008      	b.n	80183de <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	685a      	ldr	r2, [r3, #4]
 80183d0:	230f      	movs	r3, #15
 80183d2:	18fb      	adds	r3, r7, r3
 80183d4:	781b      	ldrb	r3, [r3, #0]
 80183d6:	011b      	lsls	r3, r3, #4
 80183d8:	18d3      	adds	r3, r2, r3
 80183da:	2200      	movs	r2, #0
 80183dc:	60da      	str	r2, [r3, #12]
}
 80183de:	46c0      	nop			; (mov r8, r8)
 80183e0:	46bd      	mov	sp, r7
 80183e2:	b004      	add	sp, #16
 80183e4:	bdb0      	pop	{r4, r5, r7, pc}

080183e6 <GetNextLowerTxDr>:
 */
static RegionIN865NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 80183e6:	b580      	push	{r7, lr}
 80183e8:	b084      	sub	sp, #16
 80183ea:	af00      	add	r7, sp, #0
 80183ec:	0002      	movs	r2, r0
 80183ee:	1dfb      	adds	r3, r7, #7
 80183f0:	701a      	strb	r2, [r3, #0]
 80183f2:	1dbb      	adds	r3, r7, #6
 80183f4:	1c0a      	adds	r2, r1, #0
 80183f6:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 80183f8:	230f      	movs	r3, #15
 80183fa:	18fb      	adds	r3, r7, r3
 80183fc:	2200      	movs	r2, #0
 80183fe:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8018400:	1dfa      	adds	r2, r7, #7
 8018402:	1dbb      	adds	r3, r7, #6
 8018404:	7812      	ldrb	r2, [r2, #0]
 8018406:	b252      	sxtb	r2, r2
 8018408:	781b      	ldrb	r3, [r3, #0]
 801840a:	b25b      	sxtb	r3, r3
 801840c:	429a      	cmp	r2, r3
 801840e:	d105      	bne.n	801841c <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 8018410:	230f      	movs	r3, #15
 8018412:	18fb      	adds	r3, r7, r3
 8018414:	1dba      	adds	r2, r7, #6
 8018416:	7812      	ldrb	r2, [r2, #0]
 8018418:	701a      	strb	r2, [r3, #0]
 801841a:	e00f      	b.n	801843c <GetNextLowerTxDr+0x56>
    }
    else if( dr == DR_7 )
 801841c:	1dfb      	adds	r3, r7, #7
 801841e:	781b      	ldrb	r3, [r3, #0]
 8018420:	b25b      	sxtb	r3, r3
 8018422:	2b07      	cmp	r3, #7
 8018424:	d104      	bne.n	8018430 <GetNextLowerTxDr+0x4a>
    {
        nextLowerDr = DR_5;
 8018426:	230f      	movs	r3, #15
 8018428:	18fb      	adds	r3, r7, r3
 801842a:	2205      	movs	r2, #5
 801842c:	701a      	strb	r2, [r3, #0]
 801842e:	e005      	b.n	801843c <GetNextLowerTxDr+0x56>
    }
    else
    {
        nextLowerDr = dr - 1;
 8018430:	1dfb      	adds	r3, r7, #7
 8018432:	781a      	ldrb	r2, [r3, #0]
 8018434:	230f      	movs	r3, #15
 8018436:	18fb      	adds	r3, r7, r3
 8018438:	3a01      	subs	r2, #1
 801843a:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 801843c:	230f      	movs	r3, #15
 801843e:	18fb      	adds	r3, r7, r3
 8018440:	781b      	ldrb	r3, [r3, #0]
 8018442:	b25b      	sxtb	r3, r3
}
 8018444:	0018      	movs	r0, r3
 8018446:	46bd      	mov	sp, r7
 8018448:	b004      	add	sp, #16
 801844a:	bd80      	pop	{r7, pc}

0801844c <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 801844c:	b580      	push	{r7, lr}
 801844e:	b082      	sub	sp, #8
 8018450:	af00      	add	r7, sp, #0
 8018452:	6078      	str	r0, [r7, #4]
    switch( BandwidthsIN865[drIndex] )
 8018454:	4b09      	ldr	r3, [pc, #36]	; (801847c <GetBandwidth+0x30>)
 8018456:	687a      	ldr	r2, [r7, #4]
 8018458:	0092      	lsls	r2, r2, #2
 801845a:	58d3      	ldr	r3, [r2, r3]
 801845c:	4a08      	ldr	r2, [pc, #32]	; (8018480 <GetBandwidth+0x34>)
 801845e:	4293      	cmp	r3, r2
 8018460:	d004      	beq.n	801846c <GetBandwidth+0x20>
 8018462:	4a08      	ldr	r2, [pc, #32]	; (8018484 <GetBandwidth+0x38>)
 8018464:	4293      	cmp	r3, r2
 8018466:	d003      	beq.n	8018470 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8018468:	2300      	movs	r3, #0
 801846a:	e002      	b.n	8018472 <GetBandwidth+0x26>
        case 250000:
            return 1;
 801846c:	2301      	movs	r3, #1
 801846e:	e000      	b.n	8018472 <GetBandwidth+0x26>
        case 500000:
            return 2;
 8018470:	2302      	movs	r3, #2
    }
}
 8018472:	0018      	movs	r0, r3
 8018474:	46bd      	mov	sp, r7
 8018476:	b002      	add	sp, #8
 8018478:	bd80      	pop	{r7, pc}
 801847a:	46c0      	nop			; (mov r8, r8)
 801847c:	0801d268 	.word	0x0801d268
 8018480:	0003d090 	.word	0x0003d090
 8018484:	0007a120 	.word	0x0007a120

08018488 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8018488:	b590      	push	{r4, r7, lr}
 801848a:	b085      	sub	sp, #20
 801848c:	af00      	add	r7, sp, #0
 801848e:	0004      	movs	r4, r0
 8018490:	0008      	movs	r0, r1
 8018492:	0011      	movs	r1, r2
 8018494:	603b      	str	r3, [r7, #0]
 8018496:	1dfb      	adds	r3, r7, #7
 8018498:	1c22      	adds	r2, r4, #0
 801849a:	701a      	strb	r2, [r3, #0]
 801849c:	1dbb      	adds	r3, r7, #6
 801849e:	1c02      	adds	r2, r0, #0
 80184a0:	701a      	strb	r2, [r3, #0]
 80184a2:	1d7b      	adds	r3, r7, #5
 80184a4:	1c0a      	adds	r2, r1, #0
 80184a6:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 80184a8:	210f      	movs	r1, #15
 80184aa:	187b      	adds	r3, r7, r1
 80184ac:	1dfa      	adds	r2, r7, #7
 80184ae:	7812      	ldrb	r2, [r2, #0]
 80184b0:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 80184b2:	187a      	adds	r2, r7, r1
 80184b4:	1dbb      	adds	r3, r7, #6
 80184b6:	1df9      	adds	r1, r7, #7
 80184b8:	780c      	ldrb	r4, [r1, #0]
 80184ba:	781b      	ldrb	r3, [r3, #0]
 80184bc:	b258      	sxtb	r0, r3
 80184be:	b261      	sxtb	r1, r4
 80184c0:	4288      	cmp	r0, r1
 80184c2:	da00      	bge.n	80184c6 <LimitTxPower+0x3e>
 80184c4:	1c23      	adds	r3, r4, #0
 80184c6:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 80184c8:	230f      	movs	r3, #15
 80184ca:	18fb      	adds	r3, r7, r3
 80184cc:	781b      	ldrb	r3, [r3, #0]
 80184ce:	b25b      	sxtb	r3, r3
}
 80184d0:	0018      	movs	r0, r3
 80184d2:	46bd      	mov	sp, r7
 80184d4:	b005      	add	sp, #20
 80184d6:	bd90      	pop	{r4, r7, pc}

080184d8 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	b082      	sub	sp, #8
 80184dc:	af00      	add	r7, sp, #0
 80184de:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80184e0:	4b0e      	ldr	r3, [pc, #56]	; (801851c <VerifyRfFreq+0x44>)
 80184e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80184e4:	687a      	ldr	r2, [r7, #4]
 80184e6:	0010      	movs	r0, r2
 80184e8:	4798      	blx	r3
 80184ea:	0003      	movs	r3, r0
 80184ec:	001a      	movs	r2, r3
 80184ee:	2301      	movs	r3, #1
 80184f0:	4053      	eors	r3, r2
 80184f2:	b2db      	uxtb	r3, r3
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d001      	beq.n	80184fc <VerifyRfFreq+0x24>
    {
        return false;
 80184f8:	2300      	movs	r3, #0
 80184fa:	e00a      	b.n	8018512 <VerifyRfFreq+0x3a>
    }

    if( ( freq < 865000000 ) || ( freq > 867000000 ) )
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	4a08      	ldr	r2, [pc, #32]	; (8018520 <VerifyRfFreq+0x48>)
 8018500:	4293      	cmp	r3, r2
 8018502:	d903      	bls.n	801850c <VerifyRfFreq+0x34>
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	4a07      	ldr	r2, [pc, #28]	; (8018524 <VerifyRfFreq+0x4c>)
 8018508:	4293      	cmp	r3, r2
 801850a:	d901      	bls.n	8018510 <VerifyRfFreq+0x38>
    {
        return false;
 801850c:	2300      	movs	r3, #0
 801850e:	e000      	b.n	8018512 <VerifyRfFreq+0x3a>
    }
    return true;
 8018510:	2301      	movs	r3, #1
}
 8018512:	0018      	movs	r0, r3
 8018514:	46bd      	mov	sp, r7
 8018516:	b002      	add	sp, #8
 8018518:	bd80      	pop	{r7, pc}
 801851a:	46c0      	nop			; (mov r8, r8)
 801851c:	0801cb08 	.word	0x0801cb08
 8018520:	338eda3f 	.word	0x338eda3f
 8018524:	33ad5ec0 	.word	0x33ad5ec0

08018528 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8018528:	b5b0      	push	{r4, r5, r7, lr}
 801852a:	b086      	sub	sp, #24
 801852c:	af00      	add	r7, sp, #0
 801852e:	60ba      	str	r2, [r7, #8]
 8018530:	607b      	str	r3, [r7, #4]
 8018532:	230f      	movs	r3, #15
 8018534:	18fb      	adds	r3, r7, r3
 8018536:	1c02      	adds	r2, r0, #0
 8018538:	701a      	strb	r2, [r3, #0]
 801853a:	230e      	movs	r3, #14
 801853c:	18fb      	adds	r3, r7, r3
 801853e:	1c0a      	adds	r2, r1, #0
 8018540:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 8018542:	2317      	movs	r3, #23
 8018544:	18fb      	adds	r3, r7, r3
 8018546:	2200      	movs	r2, #0
 8018548:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 801854a:	2316      	movs	r3, #22
 801854c:	18fb      	adds	r3, r7, r3
 801854e:	2200      	movs	r2, #0
 8018550:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < IN865_MAX_NB_CHANNELS; i += 16, k++ )
 8018552:	2315      	movs	r3, #21
 8018554:	18fb      	adds	r3, r7, r3
 8018556:	2200      	movs	r2, #0
 8018558:	701a      	strb	r2, [r3, #0]
 801855a:	2314      	movs	r3, #20
 801855c:	18fb      	adds	r3, r7, r3
 801855e:	2200      	movs	r2, #0
 8018560:	701a      	strb	r2, [r3, #0]
 8018562:	e0b4      	b.n	80186ce <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018564:	2313      	movs	r3, #19
 8018566:	18fb      	adds	r3, r7, r3
 8018568:	2200      	movs	r2, #0
 801856a:	701a      	strb	r2, [r3, #0]
 801856c:	e09d      	b.n	80186aa <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 801856e:	2314      	movs	r3, #20
 8018570:	18fb      	adds	r3, r7, r3
 8018572:	781b      	ldrb	r3, [r3, #0]
 8018574:	005b      	lsls	r3, r3, #1
 8018576:	68ba      	ldr	r2, [r7, #8]
 8018578:	18d3      	adds	r3, r2, r3
 801857a:	881b      	ldrh	r3, [r3, #0]
 801857c:	001a      	movs	r2, r3
 801857e:	2313      	movs	r3, #19
 8018580:	18fb      	adds	r3, r7, r3
 8018582:	781b      	ldrb	r3, [r3, #0]
 8018584:	411a      	asrs	r2, r3
 8018586:	0013      	movs	r3, r2
 8018588:	2201      	movs	r2, #1
 801858a:	4013      	ands	r3, r2
 801858c:	d100      	bne.n	8018590 <CountNbOfEnabledChannels+0x68>
 801858e:	e086      	b.n	801869e <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 8018590:	2315      	movs	r3, #21
 8018592:	18fb      	adds	r3, r7, r3
 8018594:	781a      	ldrb	r2, [r3, #0]
 8018596:	2313      	movs	r3, #19
 8018598:	18fb      	adds	r3, r7, r3
 801859a:	781b      	ldrb	r3, [r3, #0]
 801859c:	18d3      	adds	r3, r2, r3
 801859e:	001a      	movs	r2, r3
 80185a0:	0013      	movs	r3, r2
 80185a2:	005b      	lsls	r3, r3, #1
 80185a4:	189b      	adds	r3, r3, r2
 80185a6:	009b      	lsls	r3, r3, #2
 80185a8:	001a      	movs	r2, r3
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	189b      	adds	r3, r3, r2
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d06f      	beq.n	8018694 <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 80185b4:	230f      	movs	r3, #15
 80185b6:	18fb      	adds	r3, r7, r3
 80185b8:	781b      	ldrb	r3, [r3, #0]
 80185ba:	2201      	movs	r2, #1
 80185bc:	4053      	eors	r3, r2
 80185be:	b2db      	uxtb	r3, r3
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d008      	beq.n	80185d6 <CountNbOfEnabledChannels+0xae>
                {
                    if( ( IN865_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 80185c4:	2313      	movs	r3, #19
 80185c6:	18fb      	adds	r3, r7, r3
 80185c8:	781b      	ldrb	r3, [r3, #0]
 80185ca:	2207      	movs	r2, #7
 80185cc:	411a      	asrs	r2, r3
 80185ce:	0013      	movs	r3, r2
 80185d0:	2201      	movs	r2, #1
 80185d2:	4013      	ands	r3, r2
 80185d4:	d060      	beq.n	8018698 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 80185d6:	230e      	movs	r3, #14
 80185d8:	18fb      	adds	r3, r7, r3
 80185da:	2000      	movs	r0, #0
 80185dc:	5618      	ldrsb	r0, [r3, r0]
 80185de:	2415      	movs	r4, #21
 80185e0:	193b      	adds	r3, r7, r4
 80185e2:	781a      	ldrb	r2, [r3, #0]
 80185e4:	2513      	movs	r5, #19
 80185e6:	197b      	adds	r3, r7, r5
 80185e8:	781b      	ldrb	r3, [r3, #0]
 80185ea:	18d3      	adds	r3, r2, r3
 80185ec:	001a      	movs	r2, r3
 80185ee:	0013      	movs	r3, r2
 80185f0:	005b      	lsls	r3, r3, #1
 80185f2:	189b      	adds	r3, r3, r2
 80185f4:	009b      	lsls	r3, r3, #2
 80185f6:	001a      	movs	r2, r3
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	189b      	adds	r3, r3, r2
 80185fc:	7a1b      	ldrb	r3, [r3, #8]
 80185fe:	011b      	lsls	r3, r3, #4
 8018600:	b25b      	sxtb	r3, r3
 8018602:	111b      	asrs	r3, r3, #4
 8018604:	b25b      	sxtb	r3, r3
 8018606:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8018608:	193b      	adds	r3, r7, r4
 801860a:	781a      	ldrb	r2, [r3, #0]
 801860c:	197b      	adds	r3, r7, r5
 801860e:	781b      	ldrb	r3, [r3, #0]
 8018610:	18d3      	adds	r3, r2, r3
 8018612:	001a      	movs	r2, r3
 8018614:	0013      	movs	r3, r2
 8018616:	005b      	lsls	r3, r3, #1
 8018618:	189b      	adds	r3, r3, r2
 801861a:	009b      	lsls	r3, r3, #2
 801861c:	001a      	movs	r2, r3
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	189b      	adds	r3, r3, r2
 8018622:	7a1b      	ldrb	r3, [r3, #8]
 8018624:	b25b      	sxtb	r3, r3
 8018626:	111b      	asrs	r3, r3, #4
 8018628:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 801862a:	001a      	movs	r2, r3
 801862c:	f7ff fa94 	bl	8017b58 <RegionCommonValueInRange>
 8018630:	1e03      	subs	r3, r0, #0
 8018632:	d033      	beq.n	801869c <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8018634:	2315      	movs	r3, #21
 8018636:	18fb      	adds	r3, r7, r3
 8018638:	781a      	ldrb	r2, [r3, #0]
 801863a:	2313      	movs	r3, #19
 801863c:	18fb      	adds	r3, r7, r3
 801863e:	781b      	ldrb	r3, [r3, #0]
 8018640:	18d3      	adds	r3, r2, r3
 8018642:	001a      	movs	r2, r3
 8018644:	0013      	movs	r3, r2
 8018646:	005b      	lsls	r3, r3, #1
 8018648:	189b      	adds	r3, r3, r2
 801864a:	009b      	lsls	r3, r3, #2
 801864c:	001a      	movs	r2, r3
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	189b      	adds	r3, r3, r2
 8018652:	7a5b      	ldrb	r3, [r3, #9]
 8018654:	011b      	lsls	r3, r3, #4
 8018656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018658:	18d3      	adds	r3, r2, r3
 801865a:	68db      	ldr	r3, [r3, #12]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d006      	beq.n	801866e <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 8018660:	2116      	movs	r1, #22
 8018662:	187b      	adds	r3, r7, r1
 8018664:	781a      	ldrb	r2, [r3, #0]
 8018666:	187b      	adds	r3, r7, r1
 8018668:	3201      	adds	r2, #1
 801866a:	701a      	strb	r2, [r3, #0]
                    continue;
 801866c:	e017      	b.n	801869e <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 801866e:	2217      	movs	r2, #23
 8018670:	18bb      	adds	r3, r7, r2
 8018672:	781b      	ldrb	r3, [r3, #0]
 8018674:	18ba      	adds	r2, r7, r2
 8018676:	1c59      	adds	r1, r3, #1
 8018678:	7011      	strb	r1, [r2, #0]
 801867a:	001a      	movs	r2, r3
 801867c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801867e:	189b      	adds	r3, r3, r2
 8018680:	2215      	movs	r2, #21
 8018682:	18b9      	adds	r1, r7, r2
 8018684:	2213      	movs	r2, #19
 8018686:	18ba      	adds	r2, r7, r2
 8018688:	7809      	ldrb	r1, [r1, #0]
 801868a:	7812      	ldrb	r2, [r2, #0]
 801868c:	188a      	adds	r2, r1, r2
 801868e:	b2d2      	uxtb	r2, r2
 8018690:	701a      	strb	r2, [r3, #0]
 8018692:	e004      	b.n	801869e <CountNbOfEnabledChannels+0x176>
                    continue;
 8018694:	46c0      	nop			; (mov r8, r8)
 8018696:	e002      	b.n	801869e <CountNbOfEnabledChannels+0x176>
                        continue;
 8018698:	46c0      	nop			; (mov r8, r8)
 801869a:	e000      	b.n	801869e <CountNbOfEnabledChannels+0x176>
                    continue;
 801869c:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 801869e:	2113      	movs	r1, #19
 80186a0:	187b      	adds	r3, r7, r1
 80186a2:	781a      	ldrb	r2, [r3, #0]
 80186a4:	187b      	adds	r3, r7, r1
 80186a6:	3201      	adds	r2, #1
 80186a8:	701a      	strb	r2, [r3, #0]
 80186aa:	2313      	movs	r3, #19
 80186ac:	18fb      	adds	r3, r7, r3
 80186ae:	781b      	ldrb	r3, [r3, #0]
 80186b0:	2b0f      	cmp	r3, #15
 80186b2:	d800      	bhi.n	80186b6 <CountNbOfEnabledChannels+0x18e>
 80186b4:	e75b      	b.n	801856e <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < IN865_MAX_NB_CHANNELS; i += 16, k++ )
 80186b6:	2215      	movs	r2, #21
 80186b8:	18bb      	adds	r3, r7, r2
 80186ba:	18ba      	adds	r2, r7, r2
 80186bc:	7812      	ldrb	r2, [r2, #0]
 80186be:	3210      	adds	r2, #16
 80186c0:	701a      	strb	r2, [r3, #0]
 80186c2:	2114      	movs	r1, #20
 80186c4:	187b      	adds	r3, r7, r1
 80186c6:	781a      	ldrb	r2, [r3, #0]
 80186c8:	187b      	adds	r3, r7, r1
 80186ca:	3201      	adds	r2, #1
 80186cc:	701a      	strb	r2, [r3, #0]
 80186ce:	2315      	movs	r3, #21
 80186d0:	18fb      	adds	r3, r7, r3
 80186d2:	781b      	ldrb	r3, [r3, #0]
 80186d4:	2b0f      	cmp	r3, #15
 80186d6:	d800      	bhi.n	80186da <CountNbOfEnabledChannels+0x1b2>
 80186d8:	e744      	b.n	8018564 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 80186da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186dc:	2216      	movs	r2, #22
 80186de:	18ba      	adds	r2, r7, r2
 80186e0:	7812      	ldrb	r2, [r2, #0]
 80186e2:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 80186e4:	2317      	movs	r3, #23
 80186e6:	18fb      	adds	r3, r7, r3
 80186e8:	781b      	ldrb	r3, [r3, #0]
}
 80186ea:	0018      	movs	r0, r3
 80186ec:	46bd      	mov	sp, r7
 80186ee:	b006      	add	sp, #24
 80186f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080186f4 <RegionIN865GetPhyParam>:

PhyParam_t RegionIN865GetPhyParam( GetPhyParams_t* getPhy )
{
 80186f4:	b580      	push	{r7, lr}
 80186f6:	b084      	sub	sp, #16
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80186fc:	2308      	movs	r3, #8
 80186fe:	18fb      	adds	r3, r7, r3
 8018700:	2200      	movs	r2, #0
 8018702:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	781b      	ldrb	r3, [r3, #0]
 8018708:	2b35      	cmp	r3, #53	; 0x35
 801870a:	d900      	bls.n	801870e <RegionIN865GetPhyParam+0x1a>
 801870c:	e0cd      	b.n	80188aa <RegionIN865GetPhyParam+0x1b6>
 801870e:	009a      	lsls	r2, r3, #2
 8018710:	4b6d      	ldr	r3, [pc, #436]	; (80188c8 <RegionIN865GetPhyParam+0x1d4>)
 8018712:	18d3      	adds	r3, r2, r3
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = IN865_RX_MIN_DATARATE;
 8018718:	2308      	movs	r3, #8
 801871a:	18fb      	adds	r3, r7, r3
 801871c:	2200      	movs	r2, #0
 801871e:	601a      	str	r2, [r3, #0]
            break;
 8018720:	e0c4      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = IN865_TX_MIN_DATARATE;
 8018722:	2308      	movs	r3, #8
 8018724:	18fb      	adds	r3, r7, r3
 8018726:	2200      	movs	r2, #0
 8018728:	601a      	str	r2, [r3, #0]
            break;
 801872a:	e0bf      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = IN865_DEFAULT_DATARATE;
 801872c:	2308      	movs	r3, #8
 801872e:	18fb      	adds	r3, r7, r3
 8018730:	2200      	movs	r2, #0
 8018732:	601a      	str	r2, [r3, #0]
            break;
 8018734:	e0ba      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, IN865_TX_MIN_DATARATE );
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	785b      	ldrb	r3, [r3, #1]
 801873a:	b25b      	sxtb	r3, r3
 801873c:	2100      	movs	r1, #0
 801873e:	0018      	movs	r0, r3
 8018740:	f7ff fe51 	bl	80183e6 <GetNextLowerTxDr>
 8018744:	0003      	movs	r3, r0
 8018746:	001a      	movs	r2, r3
 8018748:	2308      	movs	r3, #8
 801874a:	18fb      	adds	r3, r7, r3
 801874c:	601a      	str	r2, [r3, #0]
            break;
 801874e:	e0ad      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = IN865_MAX_TX_POWER;
 8018750:	2308      	movs	r3, #8
 8018752:	18fb      	adds	r3, r7, r3
 8018754:	2200      	movs	r2, #0
 8018756:	601a      	str	r2, [r3, #0]
            break;
 8018758:	e0a8      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = IN865_DEFAULT_TX_POWER;
 801875a:	2308      	movs	r3, #8
 801875c:	18fb      	adds	r3, r7, r3
 801875e:	2200      	movs	r2, #0
 8018760:	601a      	str	r2, [r3, #0]
            break;
 8018762:	e0a3      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = IN865_ADR_ACK_LIMIT;
 8018764:	2308      	movs	r3, #8
 8018766:	18fb      	adds	r3, r7, r3
 8018768:	2240      	movs	r2, #64	; 0x40
 801876a:	601a      	str	r2, [r3, #0]
            break;
 801876c:	e09e      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = IN865_ADR_ACK_DELAY;
 801876e:	2308      	movs	r3, #8
 8018770:	18fb      	adds	r3, r7, r3
 8018772:	2220      	movs	r2, #32
 8018774:	601a      	str	r2, [r3, #0]
            break;
 8018776:	e099      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateIN865[getPhy->Datarate];
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	785b      	ldrb	r3, [r3, #1]
 801877c:	b25b      	sxtb	r3, r3
 801877e:	001a      	movs	r2, r3
 8018780:	4b52      	ldr	r3, [pc, #328]	; (80188cc <RegionIN865GetPhyParam+0x1d8>)
 8018782:	5c9b      	ldrb	r3, [r3, r2]
 8018784:	001a      	movs	r2, r3
 8018786:	2308      	movs	r3, #8
 8018788:	18fb      	adds	r3, r7, r3
 801878a:	601a      	str	r2, [r3, #0]
            break;
 801878c:	e08e      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterIN865[getPhy->Datarate];
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	785b      	ldrb	r3, [r3, #1]
 8018792:	b25b      	sxtb	r3, r3
 8018794:	001a      	movs	r2, r3
 8018796:	4b4e      	ldr	r3, [pc, #312]	; (80188d0 <RegionIN865GetPhyParam+0x1dc>)
 8018798:	5c9b      	ldrb	r3, [r3, r2]
 801879a:	001a      	movs	r2, r3
 801879c:	2308      	movs	r3, #8
 801879e:	18fb      	adds	r3, r7, r3
 80187a0:	601a      	str	r2, [r3, #0]
            break;
 80187a2:	e083      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = IN865_DUTY_CYCLE_ENABLED;
 80187a4:	2308      	movs	r3, #8
 80187a6:	18fb      	adds	r3, r7, r3
 80187a8:	2201      	movs	r2, #1
 80187aa:	601a      	str	r2, [r3, #0]
            break;
 80187ac:	e07e      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = IN865_MAX_RX_WINDOW;
 80187ae:	2308      	movs	r3, #8
 80187b0:	18fb      	adds	r3, r7, r3
 80187b2:	4a48      	ldr	r2, [pc, #288]	; (80188d4 <RegionIN865GetPhyParam+0x1e0>)
 80187b4:	601a      	str	r2, [r3, #0]
            break;
 80187b6:	e079      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = IN865_RECEIVE_DELAY1;
 80187b8:	2308      	movs	r3, #8
 80187ba:	18fb      	adds	r3, r7, r3
 80187bc:	22fa      	movs	r2, #250	; 0xfa
 80187be:	0092      	lsls	r2, r2, #2
 80187c0:	601a      	str	r2, [r3, #0]
            break;
 80187c2:	e073      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = IN865_RECEIVE_DELAY2;
 80187c4:	2308      	movs	r3, #8
 80187c6:	18fb      	adds	r3, r7, r3
 80187c8:	22fa      	movs	r2, #250	; 0xfa
 80187ca:	00d2      	lsls	r2, r2, #3
 80187cc:	601a      	str	r2, [r3, #0]
            break;
 80187ce:	e06d      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = IN865_JOIN_ACCEPT_DELAY1;
 80187d0:	2308      	movs	r3, #8
 80187d2:	18fb      	adds	r3, r7, r3
 80187d4:	4a40      	ldr	r2, [pc, #256]	; (80188d8 <RegionIN865GetPhyParam+0x1e4>)
 80187d6:	601a      	str	r2, [r3, #0]
            break;
 80187d8:	e068      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = IN865_JOIN_ACCEPT_DELAY2;
 80187da:	2308      	movs	r3, #8
 80187dc:	18fb      	adds	r3, r7, r3
 80187de:	4a3f      	ldr	r2, [pc, #252]	; (80188dc <RegionIN865GetPhyParam+0x1e8>)
 80187e0:	601a      	str	r2, [r3, #0]
            break;
 80187e2:	e063      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = IN865_MAX_FCNT_GAP;
 80187e4:	2308      	movs	r3, #8
 80187e6:	18fb      	adds	r3, r7, r3
 80187e8:	2280      	movs	r2, #128	; 0x80
 80187ea:	01d2      	lsls	r2, r2, #7
 80187ec:	601a      	str	r2, [r3, #0]
            break;
 80187ee:	e05d      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( IN865_ACKTIMEOUT + randr( -IN865_ACK_TIMEOUT_RND, IN865_ACK_TIMEOUT_RND ) );
 80187f0:	23fa      	movs	r3, #250	; 0xfa
 80187f2:	009b      	lsls	r3, r3, #2
 80187f4:	4a3a      	ldr	r2, [pc, #232]	; (80188e0 <RegionIN865GetPhyParam+0x1ec>)
 80187f6:	0019      	movs	r1, r3
 80187f8:	0010      	movs	r0, r2
 80187fa:	f002 ff03 	bl	801b604 <randr>
 80187fe:	0003      	movs	r3, r0
 8018800:	22fa      	movs	r2, #250	; 0xfa
 8018802:	00d2      	lsls	r2, r2, #3
 8018804:	4694      	mov	ip, r2
 8018806:	4463      	add	r3, ip
 8018808:	001a      	movs	r2, r3
 801880a:	2308      	movs	r3, #8
 801880c:	18fb      	adds	r3, r7, r3
 801880e:	601a      	str	r2, [r3, #0]
            break;
 8018810:	e04c      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = IN865_DEFAULT_RX1_DR_OFFSET;
 8018812:	2308      	movs	r3, #8
 8018814:	18fb      	adds	r3, r7, r3
 8018816:	2200      	movs	r2, #0
 8018818:	601a      	str	r2, [r3, #0]
            break;
 801881a:	e047      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = IN865_RX_WND_2_FREQ;
 801881c:	2308      	movs	r3, #8
 801881e:	18fb      	adds	r3, r7, r3
 8018820:	4a30      	ldr	r2, [pc, #192]	; (80188e4 <RegionIN865GetPhyParam+0x1f0>)
 8018822:	601a      	str	r2, [r3, #0]
            break;
 8018824:	e042      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = IN865_RX_WND_2_DR;
 8018826:	2308      	movs	r3, #8
 8018828:	18fb      	adds	r3, r7, r3
 801882a:	2202      	movs	r2, #2
 801882c:	601a      	str	r2, [r3, #0]
            break;
 801882e:	e03d      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8018830:	2308      	movs	r3, #8
 8018832:	18fb      	adds	r3, r7, r3
 8018834:	4a2c      	ldr	r2, [pc, #176]	; (80188e8 <RegionIN865GetPhyParam+0x1f4>)
 8018836:	601a      	str	r2, [r3, #0]
            break;
 8018838:	e038      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 801883a:	2308      	movs	r3, #8
 801883c:	18fb      	adds	r3, r7, r3
 801883e:	4a2b      	ldr	r2, [pc, #172]	; (80188ec <RegionIN865GetPhyParam+0x1f8>)
 8018840:	601a      	str	r2, [r3, #0]
            break;
 8018842:	e033      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = IN865_MAX_NB_CHANNELS;
 8018844:	2308      	movs	r3, #8
 8018846:	18fb      	adds	r3, r7, r3
 8018848:	2210      	movs	r2, #16
 801884a:	601a      	str	r2, [r3, #0]
            break;
 801884c:	e02e      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 801884e:	2308      	movs	r3, #8
 8018850:	18fb      	adds	r3, r7, r3
 8018852:	4a27      	ldr	r2, [pc, #156]	; (80188f0 <RegionIN865GetPhyParam+0x1fc>)
 8018854:	601a      	str	r2, [r3, #0]
            break;
 8018856:	e029      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8018858:	2308      	movs	r3, #8
 801885a:	18fb      	adds	r3, r7, r3
 801885c:	2200      	movs	r2, #0
 801885e:	601a      	str	r2, [r3, #0]
            break;
 8018860:	e024      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = IN865_DEFAULT_MAX_EIRP;
 8018862:	2308      	movs	r3, #8
 8018864:	18fb      	adds	r3, r7, r3
 8018866:	4a23      	ldr	r2, [pc, #140]	; (80188f4 <RegionIN865GetPhyParam+0x200>)
 8018868:	601a      	str	r2, [r3, #0]
            break;
 801886a:	e01f      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = IN865_DEFAULT_ANTENNA_GAIN;
 801886c:	2308      	movs	r3, #8
 801886e:	18fb      	adds	r3, r7, r3
 8018870:	4a21      	ldr	r2, [pc, #132]	; (80188f8 <RegionIN865GetPhyParam+0x204>)
 8018872:	601a      	str	r2, [r3, #0]
            break;
 8018874:	e01a      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = IN865_BEACON_CHANNEL_FREQ;
 8018876:	2308      	movs	r3, #8
 8018878:	18fb      	adds	r3, r7, r3
 801887a:	4a1a      	ldr	r2, [pc, #104]	; (80188e4 <RegionIN865GetPhyParam+0x1f0>)
 801887c:	601a      	str	r2, [r3, #0]
            break;
 801887e:	e015      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = IN865_BEACON_SIZE;
 8018880:	2108      	movs	r1, #8
 8018882:	187b      	adds	r3, r7, r1
 8018884:	2213      	movs	r2, #19
 8018886:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = IN865_RFU1_SIZE;
 8018888:	187b      	adds	r3, r7, r1
 801888a:	2201      	movs	r2, #1
 801888c:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = IN865_RFU2_SIZE;
 801888e:	187b      	adds	r3, r7, r1
 8018890:	2203      	movs	r2, #3
 8018892:	709a      	strb	r2, [r3, #2]
            break;
 8018894:	e00a      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = IN865_BEACON_CHANNEL_DR;
 8018896:	2308      	movs	r3, #8
 8018898:	18fb      	adds	r3, r7, r3
 801889a:	2204      	movs	r2, #4
 801889c:	601a      	str	r2, [r3, #0]
            break;
 801889e:	e005      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = IN865_PING_SLOT_CHANNEL_DR;
 80188a0:	2308      	movs	r3, #8
 80188a2:	18fb      	adds	r3, r7, r3
 80188a4:	2204      	movs	r2, #4
 80188a6:	601a      	str	r2, [r3, #0]
            break;
 80188a8:	e000      	b.n	80188ac <RegionIN865GetPhyParam+0x1b8>
        }
        default:
        {
            break;
 80188aa:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 80188ac:	210c      	movs	r1, #12
 80188ae:	187b      	adds	r3, r7, r1
 80188b0:	2208      	movs	r2, #8
 80188b2:	18ba      	adds	r2, r7, r2
 80188b4:	6812      	ldr	r2, [r2, #0]
 80188b6:	601a      	str	r2, [r3, #0]
 80188b8:	187b      	adds	r3, r7, r1
 80188ba:	2200      	movs	r2, #0
 80188bc:	681a      	ldr	r2, [r3, #0]
 80188be:	0013      	movs	r3, r2
}
 80188c0:	0018      	movs	r0, r3
 80188c2:	46bd      	mov	sp, r7
 80188c4:	b004      	add	sp, #16
 80188c6:	bd80      	pop	{r7, pc}
 80188c8:	0801d2a0 	.word	0x0801d2a0
 80188cc:	0801d288 	.word	0x0801d288
 80188d0:	0801d290 	.word	0x0801d290
 80188d4:	00000bb8 	.word	0x00000bb8
 80188d8:	00001388 	.word	0x00001388
 80188dc:	00001770 	.word	0x00001770
 80188e0:	fffffc18 	.word	0xfffffc18
 80188e4:	33a680f0 	.word	0x33a680f0
 80188e8:	20001194 	.word	0x20001194
 80188ec:	20001196 	.word	0x20001196
 80188f0:	200010c4 	.word	0x200010c4
 80188f4:	41f00000 	.word	0x41f00000
 80188f8:	4009999a 	.word	0x4009999a

080188fc <RegionIN865SetBandTxDone>:

void RegionIN865SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80188fc:	b580      	push	{r7, lr}
 80188fe:	b082      	sub	sp, #8
 8018900:	af00      	add	r7, sp, #0
 8018902:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	7858      	ldrb	r0, [r3, #1]
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	781b      	ldrb	r3, [r3, #0]
 801890c:	0019      	movs	r1, r3
 801890e:	4a0a      	ldr	r2, [pc, #40]	; (8018938 <RegionIN865SetBandTxDone+0x3c>)
 8018910:	000b      	movs	r3, r1
 8018912:	005b      	lsls	r3, r3, #1
 8018914:	185b      	adds	r3, r3, r1
 8018916:	009b      	lsls	r3, r3, #2
 8018918:	18d3      	adds	r3, r2, r3
 801891a:	3309      	adds	r3, #9
 801891c:	781b      	ldrb	r3, [r3, #0]
 801891e:	330c      	adds	r3, #12
 8018920:	011a      	lsls	r2, r3, #4
 8018922:	4b05      	ldr	r3, [pc, #20]	; (8018938 <RegionIN865SetBandTxDone+0x3c>)
 8018924:	18d1      	adds	r1, r2, r3
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	685b      	ldr	r3, [r3, #4]
 801892a:	001a      	movs	r2, r3
 801892c:	f7ff f9ec 	bl	8017d08 <RegionCommonSetBandTxDone>
}
 8018930:	46c0      	nop			; (mov r8, r8)
 8018932:	46bd      	mov	sp, r7
 8018934:	b002      	add	sp, #8
 8018936:	bd80      	pop	{r7, pc}
 8018938:	200010c4 	.word	0x200010c4

0801893c <RegionIN865InitDefaults>:

void RegionIN865InitDefaults( InitDefaultsParams_t* params )
{
 801893c:	b590      	push	{r4, r7, lr}
 801893e:	b087      	sub	sp, #28
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]
    Band_t bands[IN865_MAX_NB_BANDS] =
 8018944:	2108      	movs	r1, #8
 8018946:	187b      	adds	r3, r7, r1
 8018948:	2201      	movs	r2, #1
 801894a:	801a      	strh	r2, [r3, #0]
 801894c:	187b      	adds	r3, r7, r1
 801894e:	2200      	movs	r2, #0
 8018950:	709a      	strb	r2, [r3, #2]
 8018952:	187b      	adds	r3, r7, r1
 8018954:	2200      	movs	r2, #0
 8018956:	605a      	str	r2, [r3, #4]
 8018958:	187b      	adds	r3, r7, r1
 801895a:	2200      	movs	r2, #0
 801895c:	609a      	str	r2, [r3, #8]
 801895e:	187b      	adds	r3, r7, r1
 8018960:	2200      	movs	r2, #0
 8018962:	60da      	str	r2, [r3, #12]
    {
        IN865_BAND0
    };

    switch( params->Type )
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	791b      	ldrb	r3, [r3, #4]
 8018968:	2b01      	cmp	r3, #1
 801896a:	d030      	beq.n	80189ce <RegionIN865InitDefaults+0x92>
 801896c:	2b02      	cmp	r3, #2
 801896e:	d022      	beq.n	80189b6 <RegionIN865InitDefaults+0x7a>
 8018970:	2b00      	cmp	r3, #0
 8018972:	d000      	beq.n	8018976 <RegionIN865InitDefaults+0x3a>
            NvmCtx.Channels[2] = ( ChannelParams_t ) IN865_LC3;
            break;
        }
        default:
        {
            break;
 8018974:	e046      	b.n	8018a04 <RegionIN865InitDefaults+0xc8>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * IN865_MAX_NB_BANDS );
 8018976:	2308      	movs	r3, #8
 8018978:	18f9      	adds	r1, r7, r3
 801897a:	4b24      	ldr	r3, [pc, #144]	; (8018a0c <RegionIN865InitDefaults+0xd0>)
 801897c:	2210      	movs	r2, #16
 801897e:	0018      	movs	r0, r3
 8018980:	f002 fe56 	bl	801b630 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) IN865_LC1;
 8018984:	4b22      	ldr	r3, [pc, #136]	; (8018a10 <RegionIN865InitDefaults+0xd4>)
 8018986:	4a23      	ldr	r2, [pc, #140]	; (8018a14 <RegionIN865InitDefaults+0xd8>)
 8018988:	ca13      	ldmia	r2!, {r0, r1, r4}
 801898a:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) IN865_LC2;
 801898c:	4b20      	ldr	r3, [pc, #128]	; (8018a10 <RegionIN865InitDefaults+0xd4>)
 801898e:	4a22      	ldr	r2, [pc, #136]	; (8018a18 <RegionIN865InitDefaults+0xdc>)
 8018990:	330c      	adds	r3, #12
 8018992:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018994:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) IN865_LC3;
 8018996:	4b1e      	ldr	r3, [pc, #120]	; (8018a10 <RegionIN865InitDefaults+0xd4>)
 8018998:	4a20      	ldr	r2, [pc, #128]	; (8018a1c <RegionIN865InitDefaults+0xe0>)
 801899a:	3318      	adds	r3, #24
 801899c:	ca13      	ldmia	r2!, {r0, r1, r4}
 801899e:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80189a0:	4b1b      	ldr	r3, [pc, #108]	; (8018a10 <RegionIN865InitDefaults+0xd4>)
 80189a2:	22d2      	movs	r2, #210	; 0xd2
 80189a4:	2107      	movs	r1, #7
 80189a6:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 80189a8:	491d      	ldr	r1, [pc, #116]	; (8018a20 <RegionIN865InitDefaults+0xe4>)
 80189aa:	4b1e      	ldr	r3, [pc, #120]	; (8018a24 <RegionIN865InitDefaults+0xe8>)
 80189ac:	2201      	movs	r2, #1
 80189ae:	0018      	movs	r0, r3
 80189b0:	f7ff f97b 	bl	8017caa <RegionCommonChanMaskCopy>
            break;
 80189b4:	e026      	b.n	8018a04 <RegionIN865InitDefaults+0xc8>
            if( params->NvmCtx != 0 )
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d021      	beq.n	8018a02 <RegionIN865InitDefaults+0xc6>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	6819      	ldr	r1, [r3, #0]
 80189c2:	4b13      	ldr	r3, [pc, #76]	; (8018a10 <RegionIN865InitDefaults+0xd4>)
 80189c4:	22d4      	movs	r2, #212	; 0xd4
 80189c6:	0018      	movs	r0, r3
 80189c8:	f002 fe32 	bl	801b630 <memcpy1>
            break;
 80189cc:	e019      	b.n	8018a02 <RegionIN865InitDefaults+0xc6>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 80189ce:	4b10      	ldr	r3, [pc, #64]	; (8018a10 <RegionIN865InitDefaults+0xd4>)
 80189d0:	22d0      	movs	r2, #208	; 0xd0
 80189d2:	5a9a      	ldrh	r2, [r3, r2]
 80189d4:	4b0e      	ldr	r3, [pc, #56]	; (8018a10 <RegionIN865InitDefaults+0xd4>)
 80189d6:	21d2      	movs	r1, #210	; 0xd2
 80189d8:	5a5b      	ldrh	r3, [r3, r1]
 80189da:	4313      	orrs	r3, r2
 80189dc:	b299      	uxth	r1, r3
 80189de:	4b0c      	ldr	r3, [pc, #48]	; (8018a10 <RegionIN865InitDefaults+0xd4>)
 80189e0:	22d0      	movs	r2, #208	; 0xd0
 80189e2:	5299      	strh	r1, [r3, r2]
            NvmCtx.Channels[0] = ( ChannelParams_t ) IN865_LC1;
 80189e4:	4b0a      	ldr	r3, [pc, #40]	; (8018a10 <RegionIN865InitDefaults+0xd4>)
 80189e6:	4a0b      	ldr	r2, [pc, #44]	; (8018a14 <RegionIN865InitDefaults+0xd8>)
 80189e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80189ea:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) IN865_LC2;
 80189ec:	4b08      	ldr	r3, [pc, #32]	; (8018a10 <RegionIN865InitDefaults+0xd4>)
 80189ee:	4a0a      	ldr	r2, [pc, #40]	; (8018a18 <RegionIN865InitDefaults+0xdc>)
 80189f0:	330c      	adds	r3, #12
 80189f2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80189f4:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) IN865_LC3;
 80189f6:	4b06      	ldr	r3, [pc, #24]	; (8018a10 <RegionIN865InitDefaults+0xd4>)
 80189f8:	4a08      	ldr	r2, [pc, #32]	; (8018a1c <RegionIN865InitDefaults+0xe0>)
 80189fa:	3318      	adds	r3, #24
 80189fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80189fe:	c313      	stmia	r3!, {r0, r1, r4}
            break;
 8018a00:	e000      	b.n	8018a04 <RegionIN865InitDefaults+0xc8>
            break;
 8018a02:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8018a04:	46c0      	nop			; (mov r8, r8)
 8018a06:	46bd      	mov	sp, r7
 8018a08:	b007      	add	sp, #28
 8018a0a:	bd90      	pop	{r4, r7, pc}
 8018a0c:	20001184 	.word	0x20001184
 8018a10:	200010c4 	.word	0x200010c4
 8018a14:	0801c3f8 	.word	0x0801c3f8
 8018a18:	0801c404 	.word	0x0801c404
 8018a1c:	0801c410 	.word	0x0801c410
 8018a20:	20001196 	.word	0x20001196
 8018a24:	20001194 	.word	0x20001194

08018a28 <RegionIN865GetNvmCtx>:

void* RegionIN865GetNvmCtx( GetNvmCtxParams_t* params )
{
 8018a28:	b580      	push	{r7, lr}
 8018a2a:	b082      	sub	sp, #8
 8018a2c:	af00      	add	r7, sp, #0
 8018a2e:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionIN865NvmCtx_t );
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	22d4      	movs	r2, #212	; 0xd4
 8018a34:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8018a36:	4b02      	ldr	r3, [pc, #8]	; (8018a40 <RegionIN865GetNvmCtx+0x18>)
}
 8018a38:	0018      	movs	r0, r3
 8018a3a:	46bd      	mov	sp, r7
 8018a3c:	b002      	add	sp, #8
 8018a3e:	bd80      	pop	{r7, pc}
 8018a40:	200010c4 	.word	0x200010c4

08018a44 <RegionIN865Verify>:

bool RegionIN865Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018a44:	b580      	push	{r7, lr}
 8018a46:	b082      	sub	sp, #8
 8018a48:	af00      	add	r7, sp, #0
 8018a4a:	6078      	str	r0, [r7, #4]
 8018a4c:	000a      	movs	r2, r1
 8018a4e:	1cfb      	adds	r3, r7, #3
 8018a50:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 8018a52:	1cfb      	adds	r3, r7, #3
 8018a54:	781b      	ldrb	r3, [r3, #0]
 8018a56:	2b0f      	cmp	r3, #15
 8018a58:	d84f      	bhi.n	8018afa <RegionIN865Verify+0xb6>
 8018a5a:	009a      	lsls	r2, r3, #2
 8018a5c:	4b29      	ldr	r3, [pc, #164]	; (8018b04 <RegionIN865Verify+0xc0>)
 8018a5e:	18d3      	adds	r3, r2, r3
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	469f      	mov	pc, r3
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	0018      	movs	r0, r3
 8018a6a:	f7ff fd35 	bl	80184d8 <VerifyRfFreq>
 8018a6e:	0003      	movs	r3, r0
 8018a70:	e044      	b.n	8018afc <RegionIN865Verify+0xb8>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	781b      	ldrb	r3, [r3, #0]
 8018a76:	b25b      	sxtb	r3, r3
 8018a78:	2b06      	cmp	r3, #6
 8018a7a:	d101      	bne.n	8018a80 <RegionIN865Verify+0x3c>
            {// DR_6 is not supported by this region
                return false;
 8018a7c:	2300      	movs	r3, #0
 8018a7e:	e03d      	b.n	8018afc <RegionIN865Verify+0xb8>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE );
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	781b      	ldrb	r3, [r3, #0]
 8018a84:	b25b      	sxtb	r3, r3
 8018a86:	2207      	movs	r2, #7
 8018a88:	2100      	movs	r1, #0
 8018a8a:	0018      	movs	r0, r3
 8018a8c:	f7ff f864 	bl	8017b58 <RegionCommonValueInRange>
 8018a90:	0003      	movs	r3, r0
 8018a92:	1e5a      	subs	r2, r3, #1
 8018a94:	4193      	sbcs	r3, r2
 8018a96:	b2db      	uxtb	r3, r3
 8018a98:	e030      	b.n	8018afc <RegionIN865Verify+0xb8>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	781b      	ldrb	r3, [r3, #0]
 8018a9e:	b25b      	sxtb	r3, r3
 8018aa0:	2205      	movs	r2, #5
 8018aa2:	2100      	movs	r1, #0
 8018aa4:	0018      	movs	r0, r3
 8018aa6:	f7ff f857 	bl	8017b58 <RegionCommonValueInRange>
 8018aaa:	0003      	movs	r3, r0
 8018aac:	1e5a      	subs	r2, r3, #1
 8018aae:	4193      	sbcs	r3, r2
 8018ab0:	b2db      	uxtb	r3, r3
 8018ab2:	e023      	b.n	8018afc <RegionIN865Verify+0xb8>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	781b      	ldrb	r3, [r3, #0]
 8018ab8:	b25b      	sxtb	r3, r3
 8018aba:	2b06      	cmp	r3, #6
 8018abc:	d101      	bne.n	8018ac2 <RegionIN865Verify+0x7e>
            {// DR_6 is not supported by this region
                return false;
 8018abe:	2300      	movs	r3, #0
 8018ac0:	e01c      	b.n	8018afc <RegionIN865Verify+0xb8>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE );
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	781b      	ldrb	r3, [r3, #0]
 8018ac6:	b25b      	sxtb	r3, r3
 8018ac8:	2207      	movs	r2, #7
 8018aca:	2100      	movs	r1, #0
 8018acc:	0018      	movs	r0, r3
 8018ace:	f7ff f843 	bl	8017b58 <RegionCommonValueInRange>
 8018ad2:	0003      	movs	r3, r0
 8018ad4:	1e5a      	subs	r2, r3, #1
 8018ad6:	4193      	sbcs	r3, r2
 8018ad8:	b2db      	uxtb	r3, r3
 8018ada:	e00f      	b.n	8018afc <RegionIN865Verify+0xb8>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, IN865_MAX_TX_POWER, IN865_MIN_TX_POWER );
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	781b      	ldrb	r3, [r3, #0]
 8018ae0:	b25b      	sxtb	r3, r3
 8018ae2:	220a      	movs	r2, #10
 8018ae4:	2100      	movs	r1, #0
 8018ae6:	0018      	movs	r0, r3
 8018ae8:	f7ff f836 	bl	8017b58 <RegionCommonValueInRange>
 8018aec:	0003      	movs	r3, r0
 8018aee:	1e5a      	subs	r2, r3, #1
 8018af0:	4193      	sbcs	r3, r2
 8018af2:	b2db      	uxtb	r3, r3
 8018af4:	e002      	b.n	8018afc <RegionIN865Verify+0xb8>
        }
        case PHY_DUTY_CYCLE:
        {
            return IN865_DUTY_CYCLE_ENABLED;
 8018af6:	2301      	movs	r3, #1
 8018af8:	e000      	b.n	8018afc <RegionIN865Verify+0xb8>
        }
        default:
            return false;
 8018afa:	2300      	movs	r3, #0
    }
}
 8018afc:	0018      	movs	r0, r3
 8018afe:	46bd      	mov	sp, r7
 8018b00:	b002      	add	sp, #8
 8018b02:	bd80      	pop	{r7, pc}
 8018b04:	0801d378 	.word	0x0801d378

08018b08 <RegionIN865ApplyCFList>:

void RegionIN865ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018b08:	b590      	push	{r4, r7, lr}
 8018b0a:	b08b      	sub	sp, #44	; 0x2c
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8018b10:	2318      	movs	r3, #24
 8018b12:	18fb      	adds	r3, r7, r3
 8018b14:	2250      	movs	r2, #80	; 0x50
 8018b16:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	791b      	ldrb	r3, [r3, #4]
 8018b1c:	2b10      	cmp	r3, #16
 8018b1e:	d000      	beq.n	8018b22 <RegionIN865ApplyCFList+0x1a>
 8018b20:	e07d      	b.n	8018c1e <RegionIN865ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	330f      	adds	r3, #15
 8018b28:	781b      	ldrb	r3, [r3, #0]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d000      	beq.n	8018b30 <RegionIN865ApplyCFList+0x28>
 8018b2e:	e078      	b.n	8018c22 <RegionIN865ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018b30:	2327      	movs	r3, #39	; 0x27
 8018b32:	18fb      	adds	r3, r7, r3
 8018b34:	2200      	movs	r2, #0
 8018b36:	701a      	strb	r2, [r3, #0]
 8018b38:	2326      	movs	r3, #38	; 0x26
 8018b3a:	18fb      	adds	r3, r7, r3
 8018b3c:	2203      	movs	r2, #3
 8018b3e:	701a      	strb	r2, [r3, #0]
 8018b40:	e067      	b.n	8018c12 <RegionIN865ApplyCFList+0x10a>
    {
        if( chanIdx < ( IN865_NUMB_CHANNELS_CF_LIST + IN865_NUMB_DEFAULT_CHANNELS ) )
 8018b42:	2326      	movs	r3, #38	; 0x26
 8018b44:	18fb      	adds	r3, r7, r3
 8018b46:	781b      	ldrb	r3, [r3, #0]
 8018b48:	2b07      	cmp	r3, #7
 8018b4a:	d82e      	bhi.n	8018baa <RegionIN865ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	681a      	ldr	r2, [r3, #0]
 8018b50:	2427      	movs	r4, #39	; 0x27
 8018b52:	193b      	adds	r3, r7, r4
 8018b54:	781b      	ldrb	r3, [r3, #0]
 8018b56:	18d3      	adds	r3, r2, r3
 8018b58:	781b      	ldrb	r3, [r3, #0]
 8018b5a:	001a      	movs	r2, r3
 8018b5c:	2018      	movs	r0, #24
 8018b5e:	183b      	adds	r3, r7, r0
 8018b60:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8018b62:	183b      	adds	r3, r7, r0
 8018b64:	681a      	ldr	r2, [r3, #0]
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	6819      	ldr	r1, [r3, #0]
 8018b6a:	193b      	adds	r3, r7, r4
 8018b6c:	781b      	ldrb	r3, [r3, #0]
 8018b6e:	3301      	adds	r3, #1
 8018b70:	18cb      	adds	r3, r1, r3
 8018b72:	781b      	ldrb	r3, [r3, #0]
 8018b74:	021b      	lsls	r3, r3, #8
 8018b76:	431a      	orrs	r2, r3
 8018b78:	183b      	adds	r3, r7, r0
 8018b7a:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8018b7c:	183b      	adds	r3, r7, r0
 8018b7e:	681a      	ldr	r2, [r3, #0]
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	6819      	ldr	r1, [r3, #0]
 8018b84:	193b      	adds	r3, r7, r4
 8018b86:	781b      	ldrb	r3, [r3, #0]
 8018b88:	3302      	adds	r3, #2
 8018b8a:	18cb      	adds	r3, r1, r3
 8018b8c:	781b      	ldrb	r3, [r3, #0]
 8018b8e:	041b      	lsls	r3, r3, #16
 8018b90:	431a      	orrs	r2, r3
 8018b92:	183b      	adds	r3, r7, r0
 8018b94:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 8018b96:	183b      	adds	r3, r7, r0
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	2264      	movs	r2, #100	; 0x64
 8018b9c:	435a      	muls	r2, r3
 8018b9e:	183b      	adds	r3, r7, r0
 8018ba0:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8018ba2:	183b      	adds	r3, r7, r0
 8018ba4:	2200      	movs	r2, #0
 8018ba6:	605a      	str	r2, [r3, #4]
 8018ba8:	e009      	b.n	8018bbe <RegionIN865ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 8018baa:	2118      	movs	r1, #24
 8018bac:	187b      	adds	r3, r7, r1
 8018bae:	2200      	movs	r2, #0
 8018bb0:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 8018bb2:	187b      	adds	r3, r7, r1
 8018bb4:	2200      	movs	r2, #0
 8018bb6:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8018bb8:	187b      	adds	r3, r7, r1
 8018bba:	2200      	movs	r2, #0
 8018bbc:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8018bbe:	2318      	movs	r3, #24
 8018bc0:	18fb      	adds	r3, r7, r3
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d00e      	beq.n	8018be6 <RegionIN865ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 8018bc8:	2110      	movs	r1, #16
 8018bca:	187b      	adds	r3, r7, r1
 8018bcc:	2218      	movs	r2, #24
 8018bce:	18ba      	adds	r2, r7, r2
 8018bd0:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8018bd2:	187b      	adds	r3, r7, r1
 8018bd4:	2226      	movs	r2, #38	; 0x26
 8018bd6:	18ba      	adds	r2, r7, r2
 8018bd8:	7812      	ldrb	r2, [r2, #0]
 8018bda:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionIN865ChannelAdd( &channelAdd );
 8018bdc:	187b      	adds	r3, r7, r1
 8018bde:	0018      	movs	r0, r3
 8018be0:	f000 fdbe 	bl	8019760 <RegionIN865ChannelAdd>
 8018be4:	e009      	b.n	8018bfa <RegionIN865ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8018be6:	210c      	movs	r1, #12
 8018be8:	187b      	adds	r3, r7, r1
 8018bea:	2226      	movs	r2, #38	; 0x26
 8018bec:	18ba      	adds	r2, r7, r2
 8018bee:	7812      	ldrb	r2, [r2, #0]
 8018bf0:	701a      	strb	r2, [r3, #0]

            RegionIN865ChannelsRemove( &channelRemove );
 8018bf2:	187b      	adds	r3, r7, r1
 8018bf4:	0018      	movs	r0, r3
 8018bf6:	f000 fe6d 	bl	80198d4 <RegionIN865ChannelsRemove>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018bfa:	2227      	movs	r2, #39	; 0x27
 8018bfc:	18bb      	adds	r3, r7, r2
 8018bfe:	18ba      	adds	r2, r7, r2
 8018c00:	7812      	ldrb	r2, [r2, #0]
 8018c02:	3203      	adds	r2, #3
 8018c04:	701a      	strb	r2, [r3, #0]
 8018c06:	2126      	movs	r1, #38	; 0x26
 8018c08:	187b      	adds	r3, r7, r1
 8018c0a:	781a      	ldrb	r2, [r3, #0]
 8018c0c:	187b      	adds	r3, r7, r1
 8018c0e:	3201      	adds	r2, #1
 8018c10:	701a      	strb	r2, [r3, #0]
 8018c12:	2326      	movs	r3, #38	; 0x26
 8018c14:	18fb      	adds	r3, r7, r3
 8018c16:	781b      	ldrb	r3, [r3, #0]
 8018c18:	2b0f      	cmp	r3, #15
 8018c1a:	d992      	bls.n	8018b42 <RegionIN865ApplyCFList+0x3a>
 8018c1c:	e002      	b.n	8018c24 <RegionIN865ApplyCFList+0x11c>
        return;
 8018c1e:	46c0      	nop			; (mov r8, r8)
 8018c20:	e000      	b.n	8018c24 <RegionIN865ApplyCFList+0x11c>
        return;
 8018c22:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8018c24:	46bd      	mov	sp, r7
 8018c26:	b00b      	add	sp, #44	; 0x2c
 8018c28:	bd90      	pop	{r4, r7, pc}
	...

08018c2c <RegionIN865ChanMaskSet>:

bool RegionIN865ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b082      	sub	sp, #8
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	791b      	ldrb	r3, [r3, #4]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d002      	beq.n	8018c42 <RegionIN865ChanMaskSet+0x16>
 8018c3c:	2b01      	cmp	r3, #1
 8018c3e:	d008      	beq.n	8018c52 <RegionIN865ChanMaskSet+0x26>
 8018c40:	e00f      	b.n	8018c62 <RegionIN865ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	6819      	ldr	r1, [r3, #0]
 8018c46:	4b0a      	ldr	r3, [pc, #40]	; (8018c70 <RegionIN865ChanMaskSet+0x44>)
 8018c48:	2201      	movs	r2, #1
 8018c4a:	0018      	movs	r0, r3
 8018c4c:	f7ff f82d 	bl	8017caa <RegionCommonChanMaskCopy>
            break;
 8018c50:	e009      	b.n	8018c66 <RegionIN865ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	6819      	ldr	r1, [r3, #0]
 8018c56:	4b07      	ldr	r3, [pc, #28]	; (8018c74 <RegionIN865ChanMaskSet+0x48>)
 8018c58:	2201      	movs	r2, #1
 8018c5a:	0018      	movs	r0, r3
 8018c5c:	f7ff f825 	bl	8017caa <RegionCommonChanMaskCopy>
            break;
 8018c60:	e001      	b.n	8018c66 <RegionIN865ChanMaskSet+0x3a>
        }
        default:
            return false;
 8018c62:	2300      	movs	r3, #0
 8018c64:	e000      	b.n	8018c68 <RegionIN865ChanMaskSet+0x3c>
    }
    return true;
 8018c66:	2301      	movs	r3, #1
}
 8018c68:	0018      	movs	r0, r3
 8018c6a:	46bd      	mov	sp, r7
 8018c6c:	b002      	add	sp, #8
 8018c6e:	bd80      	pop	{r7, pc}
 8018c70:	20001194 	.word	0x20001194
 8018c74:	20001196 	.word	0x20001196

08018c78 <RegionIN865ComputeRxWindowParameters>:

void RegionIN865ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c7a:	b08b      	sub	sp, #44	; 0x2c
 8018c7c:	af04      	add	r7, sp, #16
 8018c7e:	60ba      	str	r2, [r7, #8]
 8018c80:	607b      	str	r3, [r7, #4]
 8018c82:	250f      	movs	r5, #15
 8018c84:	197b      	adds	r3, r7, r5
 8018c86:	1c02      	adds	r2, r0, #0
 8018c88:	701a      	strb	r2, [r3, #0]
 8018c8a:	230e      	movs	r3, #14
 8018c8c:	18fb      	adds	r3, r7, r3
 8018c8e:	1c0a      	adds	r2, r1, #0
 8018c90:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 8018c92:	2300      	movs	r3, #0
 8018c94:	2400      	movs	r4, #0
 8018c96:	613b      	str	r3, [r7, #16]
 8018c98:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, IN865_RX_MAX_DATARATE );
 8018c9a:	197b      	adds	r3, r7, r5
 8018c9c:	781b      	ldrb	r3, [r3, #0]
 8018c9e:	b25a      	sxtb	r2, r3
 8018ca0:	2a07      	cmp	r2, #7
 8018ca2:	dd00      	ble.n	8018ca6 <RegionIN865ComputeRxWindowParameters+0x2e>
 8018ca4:	2307      	movs	r3, #7
 8018ca6:	b25a      	sxtb	r2, r3
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	785b      	ldrb	r3, [r3, #1]
 8018cb0:	b25b      	sxtb	r3, r3
 8018cb2:	0018      	movs	r0, r3
 8018cb4:	f7ff fbca 	bl	801844c <GetBandwidth>
 8018cb8:	0003      	movs	r3, r0
 8018cba:	b2da      	uxtb	r2, r3
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	785b      	ldrb	r3, [r3, #1]
 8018cc4:	b25b      	sxtb	r3, r3
 8018cc6:	2b07      	cmp	r3, #7
 8018cc8:	d10d      	bne.n	8018ce6 <RegionIN865ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	785b      	ldrb	r3, [r3, #1]
 8018cce:	b25b      	sxtb	r3, r3
 8018cd0:	001a      	movs	r2, r3
 8018cd2:	4b1b      	ldr	r3, [pc, #108]	; (8018d40 <RegionIN865ComputeRxWindowParameters+0xc8>)
 8018cd4:	5c9b      	ldrb	r3, [r3, r2]
 8018cd6:	0018      	movs	r0, r3
 8018cd8:	f7ff fa20 	bl	801811c <RegionCommonComputeSymbolTimeFsk>
 8018cdc:	0003      	movs	r3, r0
 8018cde:	000c      	movs	r4, r1
 8018ce0:	613b      	str	r3, [r7, #16]
 8018ce2:	617c      	str	r4, [r7, #20]
 8018ce4:	e013      	b.n	8018d0e <RegionIN865ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesIN865[rxConfigParams->Datarate], BandwidthsIN865[rxConfigParams->Datarate] );
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	785b      	ldrb	r3, [r3, #1]
 8018cea:	b25b      	sxtb	r3, r3
 8018cec:	001a      	movs	r2, r3
 8018cee:	4b14      	ldr	r3, [pc, #80]	; (8018d40 <RegionIN865ComputeRxWindowParameters+0xc8>)
 8018cf0:	5c98      	ldrb	r0, [r3, r2]
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	785b      	ldrb	r3, [r3, #1]
 8018cf6:	b25b      	sxtb	r3, r3
 8018cf8:	001a      	movs	r2, r3
 8018cfa:	4b12      	ldr	r3, [pc, #72]	; (8018d44 <RegionIN865ComputeRxWindowParameters+0xcc>)
 8018cfc:	0092      	lsls	r2, r2, #2
 8018cfe:	58d3      	ldr	r3, [r2, r3]
 8018d00:	0019      	movs	r1, r3
 8018d02:	f7ff f9df 	bl	80180c4 <RegionCommonComputeSymbolTimeLoRa>
 8018d06:	0003      	movs	r3, r0
 8018d08:	000c      	movs	r4, r1
 8018d0a:	613b      	str	r3, [r7, #16]
 8018d0c:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018d0e:	4b0e      	ldr	r3, [pc, #56]	; (8018d48 <RegionIN865ComputeRxWindowParameters+0xd0>)
 8018d10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018d12:	4798      	blx	r3
 8018d14:	0006      	movs	r6, r0
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	3308      	adds	r3, #8
 8018d1a:	687a      	ldr	r2, [r7, #4]
 8018d1c:	320c      	adds	r2, #12
 8018d1e:	68bd      	ldr	r5, [r7, #8]
 8018d20:	210e      	movs	r1, #14
 8018d22:	1879      	adds	r1, r7, r1
 8018d24:	780c      	ldrb	r4, [r1, #0]
 8018d26:	6938      	ldr	r0, [r7, #16]
 8018d28:	6979      	ldr	r1, [r7, #20]
 8018d2a:	9202      	str	r2, [sp, #8]
 8018d2c:	9301      	str	r3, [sp, #4]
 8018d2e:	9600      	str	r6, [sp, #0]
 8018d30:	002b      	movs	r3, r5
 8018d32:	0022      	movs	r2, r4
 8018d34:	f7ff fa0e 	bl	8018154 <RegionCommonComputeRxWindowParameters>
}
 8018d38:	46c0      	nop			; (mov r8, r8)
 8018d3a:	46bd      	mov	sp, r7
 8018d3c:	b007      	add	sp, #28
 8018d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d40:	0801d260 	.word	0x0801d260
 8018d44:	0801d268 	.word	0x0801d268
 8018d48:	0801cb08 	.word	0x0801cb08

08018d4c <RegionIN865RxConfig>:

bool RegionIN865RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d4e:	b091      	sub	sp, #68	; 0x44
 8018d50:	af0a      	add	r7, sp, #40	; 0x28
 8018d52:	6078      	str	r0, [r7, #4]
 8018d54:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8018d56:	230f      	movs	r3, #15
 8018d58:	18fb      	adds	r3, r7, r3
 8018d5a:	687a      	ldr	r2, [r7, #4]
 8018d5c:	7852      	ldrb	r2, [r2, #1]
 8018d5e:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8018d60:	2316      	movs	r3, #22
 8018d62:	18fb      	adds	r3, r7, r3
 8018d64:	2200      	movs	r2, #0
 8018d66:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8018d68:	230e      	movs	r3, #14
 8018d6a:	18fb      	adds	r3, r7, r3
 8018d6c:	2200      	movs	r2, #0
 8018d6e:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	685b      	ldr	r3, [r3, #4]
 8018d74:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8018d76:	4b64      	ldr	r3, [pc, #400]	; (8018f08 <RegionIN865RxConfig+0x1bc>)
 8018d78:	68db      	ldr	r3, [r3, #12]
 8018d7a:	4798      	blx	r3
 8018d7c:	1e03      	subs	r3, r0, #0
 8018d7e:	d001      	beq.n	8018d84 <RegionIN865RxConfig+0x38>
    {
        return false;
 8018d80:	2300      	movs	r3, #0
 8018d82:	e0bc      	b.n	8018efe <RegionIN865RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	7cdb      	ldrb	r3, [r3, #19]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d122      	bne.n	8018dd2 <RegionIN865RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	781b      	ldrb	r3, [r3, #0]
 8018d90:	0019      	movs	r1, r3
 8018d92:	4a5e      	ldr	r2, [pc, #376]	; (8018f0c <RegionIN865RxConfig+0x1c0>)
 8018d94:	000b      	movs	r3, r1
 8018d96:	005b      	lsls	r3, r3, #1
 8018d98:	185b      	adds	r3, r3, r1
 8018d9a:	009b      	lsls	r3, r3, #2
 8018d9c:	589b      	ldr	r3, [r3, r2]
 8018d9e:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	781b      	ldrb	r3, [r3, #0]
 8018da4:	0019      	movs	r1, r3
 8018da6:	4a59      	ldr	r2, [pc, #356]	; (8018f0c <RegionIN865RxConfig+0x1c0>)
 8018da8:	000b      	movs	r3, r1
 8018daa:	005b      	lsls	r3, r3, #1
 8018dac:	185b      	adds	r3, r3, r1
 8018dae:	009b      	lsls	r3, r3, #2
 8018db0:	18d3      	adds	r3, r2, r3
 8018db2:	3304      	adds	r3, #4
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d00b      	beq.n	8018dd2 <RegionIN865RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	781b      	ldrb	r3, [r3, #0]
 8018dbe:	0019      	movs	r1, r3
 8018dc0:	4a52      	ldr	r2, [pc, #328]	; (8018f0c <RegionIN865RxConfig+0x1c0>)
 8018dc2:	000b      	movs	r3, r1
 8018dc4:	005b      	lsls	r3, r3, #1
 8018dc6:	185b      	adds	r3, r3, r1
 8018dc8:	009b      	lsls	r3, r3, #2
 8018dca:	18d3      	adds	r3, r2, r3
 8018dcc:	3304      	adds	r3, #4
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesIN865[dr];
 8018dd2:	240f      	movs	r4, #15
 8018dd4:	193b      	adds	r3, r7, r4
 8018dd6:	781b      	ldrb	r3, [r3, #0]
 8018dd8:	b25b      	sxtb	r3, r3
 8018dda:	4a4d      	ldr	r2, [pc, #308]	; (8018f10 <RegionIN865RxConfig+0x1c4>)
 8018ddc:	5cd2      	ldrb	r2, [r2, r3]
 8018dde:	230e      	movs	r3, #14
 8018de0:	18fb      	adds	r3, r7, r3
 8018de2:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8018de4:	4b48      	ldr	r3, [pc, #288]	; (8018f08 <RegionIN865RxConfig+0x1bc>)
 8018de6:	695b      	ldr	r3, [r3, #20]
 8018de8:	693a      	ldr	r2, [r7, #16]
 8018dea:	0010      	movs	r0, r2
 8018dec:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8018dee:	193b      	adds	r3, r7, r4
 8018df0:	781b      	ldrb	r3, [r3, #0]
 8018df2:	b25b      	sxtb	r3, r3
 8018df4:	2b07      	cmp	r3, #7
 8018df6:	d12f      	bne.n	8018e58 <RegionIN865RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 8018df8:	2117      	movs	r1, #23
 8018dfa:	187b      	adds	r3, r7, r1
 8018dfc:	2200      	movs	r2, #0
 8018dfe:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8018e00:	4b41      	ldr	r3, [pc, #260]	; (8018f08 <RegionIN865RxConfig+0x1bc>)
 8018e02:	6a1c      	ldr	r4, [r3, #32]
 8018e04:	230e      	movs	r3, #14
 8018e06:	18fb      	adds	r3, r7, r3
 8018e08:	2200      	movs	r2, #0
 8018e0a:	569a      	ldrsb	r2, [r3, r2]
 8018e0c:	0013      	movs	r3, r2
 8018e0e:	015b      	lsls	r3, r3, #5
 8018e10:	1a9b      	subs	r3, r3, r2
 8018e12:	009b      	lsls	r3, r3, #2
 8018e14:	189b      	adds	r3, r3, r2
 8018e16:	00db      	lsls	r3, r3, #3
 8018e18:	001e      	movs	r6, r3
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	689b      	ldr	r3, [r3, #8]
 8018e1e:	b29b      	uxth	r3, r3
 8018e20:	687a      	ldr	r2, [r7, #4]
 8018e22:	7c92      	ldrb	r2, [r2, #18]
 8018e24:	4d3b      	ldr	r5, [pc, #236]	; (8018f14 <RegionIN865RxConfig+0x1c8>)
 8018e26:	1879      	adds	r1, r7, r1
 8018e28:	7808      	ldrb	r0, [r1, #0]
 8018e2a:	9209      	str	r2, [sp, #36]	; 0x24
 8018e2c:	2200      	movs	r2, #0
 8018e2e:	9208      	str	r2, [sp, #32]
 8018e30:	2200      	movs	r2, #0
 8018e32:	9207      	str	r2, [sp, #28]
 8018e34:	2200      	movs	r2, #0
 8018e36:	9206      	str	r2, [sp, #24]
 8018e38:	2201      	movs	r2, #1
 8018e3a:	9205      	str	r2, [sp, #20]
 8018e3c:	2200      	movs	r2, #0
 8018e3e:	9204      	str	r2, [sp, #16]
 8018e40:	2200      	movs	r2, #0
 8018e42:	9203      	str	r2, [sp, #12]
 8018e44:	9302      	str	r3, [sp, #8]
 8018e46:	2305      	movs	r3, #5
 8018e48:	9301      	str	r3, [sp, #4]
 8018e4a:	4b33      	ldr	r3, [pc, #204]	; (8018f18 <RegionIN865RxConfig+0x1cc>)
 8018e4c:	9300      	str	r3, [sp, #0]
 8018e4e:	2300      	movs	r3, #0
 8018e50:	0032      	movs	r2, r6
 8018e52:	0029      	movs	r1, r5
 8018e54:	47a0      	blx	r4
 8018e56:	e029      	b.n	8018eac <RegionIN865RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 8018e58:	2117      	movs	r1, #23
 8018e5a:	187b      	adds	r3, r7, r1
 8018e5c:	2201      	movs	r2, #1
 8018e5e:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8018e60:	4b29      	ldr	r3, [pc, #164]	; (8018f08 <RegionIN865RxConfig+0x1bc>)
 8018e62:	6a1c      	ldr	r4, [r3, #32]
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	789b      	ldrb	r3, [r3, #2]
 8018e68:	001e      	movs	r6, r3
 8018e6a:	230e      	movs	r3, #14
 8018e6c:	18fb      	adds	r3, r7, r3
 8018e6e:	2500      	movs	r5, #0
 8018e70:	575d      	ldrsb	r5, [r3, r5]
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	689b      	ldr	r3, [r3, #8]
 8018e76:	b29b      	uxth	r3, r3
 8018e78:	687a      	ldr	r2, [r7, #4]
 8018e7a:	7c92      	ldrb	r2, [r2, #18]
 8018e7c:	1879      	adds	r1, r7, r1
 8018e7e:	7808      	ldrb	r0, [r1, #0]
 8018e80:	9209      	str	r2, [sp, #36]	; 0x24
 8018e82:	2201      	movs	r2, #1
 8018e84:	9208      	str	r2, [sp, #32]
 8018e86:	2200      	movs	r2, #0
 8018e88:	9207      	str	r2, [sp, #28]
 8018e8a:	2200      	movs	r2, #0
 8018e8c:	9206      	str	r2, [sp, #24]
 8018e8e:	2200      	movs	r2, #0
 8018e90:	9205      	str	r2, [sp, #20]
 8018e92:	2200      	movs	r2, #0
 8018e94:	9204      	str	r2, [sp, #16]
 8018e96:	2200      	movs	r2, #0
 8018e98:	9203      	str	r2, [sp, #12]
 8018e9a:	9302      	str	r3, [sp, #8]
 8018e9c:	2308      	movs	r3, #8
 8018e9e:	9301      	str	r3, [sp, #4]
 8018ea0:	2300      	movs	r3, #0
 8018ea2:	9300      	str	r3, [sp, #0]
 8018ea4:	2301      	movs	r3, #1
 8018ea6:	002a      	movs	r2, r5
 8018ea8:	0031      	movs	r1, r6
 8018eaa:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	7c5b      	ldrb	r3, [r3, #17]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d009      	beq.n	8018ec8 <RegionIN865RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterIN865[dr];
 8018eb4:	230f      	movs	r3, #15
 8018eb6:	18fb      	adds	r3, r7, r3
 8018eb8:	2200      	movs	r2, #0
 8018eba:	569a      	ldrsb	r2, [r3, r2]
 8018ebc:	2316      	movs	r3, #22
 8018ebe:	18fb      	adds	r3, r7, r3
 8018ec0:	4916      	ldr	r1, [pc, #88]	; (8018f1c <RegionIN865RxConfig+0x1d0>)
 8018ec2:	5c8a      	ldrb	r2, [r1, r2]
 8018ec4:	701a      	strb	r2, [r3, #0]
 8018ec6:	e008      	b.n	8018eda <RegionIN865RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateIN865[dr];
 8018ec8:	230f      	movs	r3, #15
 8018eca:	18fb      	adds	r3, r7, r3
 8018ecc:	2200      	movs	r2, #0
 8018ece:	569a      	ldrsb	r2, [r3, r2]
 8018ed0:	2316      	movs	r3, #22
 8018ed2:	18fb      	adds	r3, r7, r3
 8018ed4:	4912      	ldr	r1, [pc, #72]	; (8018f20 <RegionIN865RxConfig+0x1d4>)
 8018ed6:	5c8a      	ldrb	r2, [r1, r2]
 8018ed8:	701a      	strb	r2, [r3, #0]
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8018eda:	4b0b      	ldr	r3, [pc, #44]	; (8018f08 <RegionIN865RxConfig+0x1bc>)
 8018edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ede:	2216      	movs	r2, #22
 8018ee0:	18ba      	adds	r2, r7, r2
 8018ee2:	7812      	ldrb	r2, [r2, #0]
 8018ee4:	320d      	adds	r2, #13
 8018ee6:	b2d1      	uxtb	r1, r2
 8018ee8:	2217      	movs	r2, #23
 8018eea:	18ba      	adds	r2, r7, r2
 8018eec:	7812      	ldrb	r2, [r2, #0]
 8018eee:	0010      	movs	r0, r2
 8018ef0:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 8018ef2:	683b      	ldr	r3, [r7, #0]
 8018ef4:	220f      	movs	r2, #15
 8018ef6:	18ba      	adds	r2, r7, r2
 8018ef8:	7812      	ldrb	r2, [r2, #0]
 8018efa:	701a      	strb	r2, [r3, #0]
    return true;
 8018efc:	2301      	movs	r3, #1
}
 8018efe:	0018      	movs	r0, r3
 8018f00:	46bd      	mov	sp, r7
 8018f02:	b007      	add	sp, #28
 8018f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f06:	46c0      	nop			; (mov r8, r8)
 8018f08:	0801cb08 	.word	0x0801cb08
 8018f0c:	200010c4 	.word	0x200010c4
 8018f10:	0801d260 	.word	0x0801d260
 8018f14:	0000c350 	.word	0x0000c350
 8018f18:	00014585 	.word	0x00014585
 8018f1c:	0801d290 	.word	0x0801d290
 8018f20:	0801d288 	.word	0x0801d288

08018f24 <RegionIN865TxConfig>:

bool RegionIN865TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f26:	b093      	sub	sp, #76	; 0x4c
 8018f28:	af0a      	add	r7, sp, #40	; 0x28
 8018f2a:	60f8      	str	r0, [r7, #12]
 8018f2c:	60b9      	str	r1, [r7, #8]
 8018f2e:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesIN865[txConfig->Datarate];
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	785b      	ldrb	r3, [r3, #1]
 8018f34:	b25b      	sxtb	r3, r3
 8018f36:	001a      	movs	r2, r3
 8018f38:	4b61      	ldr	r3, [pc, #388]	; (80190c0 <RegionIN865TxConfig+0x19c>)
 8018f3a:	5c9a      	ldrb	r2, [r3, r2]
 8018f3c:	231e      	movs	r3, #30
 8018f3e:	18fb      	adds	r3, r7, r3
 8018f40:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	2002      	movs	r0, #2
 8018f46:	5618      	ldrsb	r0, [r3, r0]
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	781b      	ldrb	r3, [r3, #0]
 8018f4c:	0019      	movs	r1, r3
 8018f4e:	4a5d      	ldr	r2, [pc, #372]	; (80190c4 <RegionIN865TxConfig+0x1a0>)
 8018f50:	000b      	movs	r3, r1
 8018f52:	005b      	lsls	r3, r3, #1
 8018f54:	185b      	adds	r3, r3, r1
 8018f56:	009b      	lsls	r3, r3, #2
 8018f58:	18d3      	adds	r3, r2, r3
 8018f5a:	3309      	adds	r3, #9
 8018f5c:	781b      	ldrb	r3, [r3, #0]
 8018f5e:	4a59      	ldr	r2, [pc, #356]	; (80190c4 <RegionIN865TxConfig+0x1a0>)
 8018f60:	330c      	adds	r3, #12
 8018f62:	011b      	lsls	r3, r3, #4
 8018f64:	18d3      	adds	r3, r2, r3
 8018f66:	3302      	adds	r3, #2
 8018f68:	2100      	movs	r1, #0
 8018f6a:	5659      	ldrsb	r1, [r3, r1]
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	2201      	movs	r2, #1
 8018f70:	569a      	ldrsb	r2, [r3, r2]
 8018f72:	251d      	movs	r5, #29
 8018f74:	197c      	adds	r4, r7, r5
 8018f76:	4b54      	ldr	r3, [pc, #336]	; (80190c8 <RegionIN865TxConfig+0x1a4>)
 8018f78:	f7ff fa86 	bl	8018488 <LimitTxPower>
 8018f7c:	0003      	movs	r3, r0
 8018f7e:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	785b      	ldrb	r3, [r3, #1]
 8018f84:	b25b      	sxtb	r3, r3
 8018f86:	0018      	movs	r0, r3
 8018f88:	f7ff fa60 	bl	801844c <GetBandwidth>
 8018f8c:	0003      	movs	r3, r0
 8018f8e:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 8018f90:	2017      	movs	r0, #23
 8018f92:	183b      	adds	r3, r7, r0
 8018f94:	2200      	movs	r2, #0
 8018f96:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	6859      	ldr	r1, [r3, #4]
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	689a      	ldr	r2, [r3, #8]
 8018fa0:	183c      	adds	r4, r7, r0
 8018fa2:	197b      	adds	r3, r7, r5
 8018fa4:	781b      	ldrb	r3, [r3, #0]
 8018fa6:	b25b      	sxtb	r3, r3
 8018fa8:	0018      	movs	r0, r3
 8018faa:	f7ff f957 	bl	801825c <RegionCommonComputeTxPower>
 8018fae:	0003      	movs	r3, r0
 8018fb0:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8018fb2:	4b46      	ldr	r3, [pc, #280]	; (80190cc <RegionIN865TxConfig+0x1a8>)
 8018fb4:	695a      	ldr	r2, [r3, #20]
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	781b      	ldrb	r3, [r3, #0]
 8018fba:	0018      	movs	r0, r3
 8018fbc:	4941      	ldr	r1, [pc, #260]	; (80190c4 <RegionIN865TxConfig+0x1a0>)
 8018fbe:	0003      	movs	r3, r0
 8018fc0:	005b      	lsls	r3, r3, #1
 8018fc2:	181b      	adds	r3, r3, r0
 8018fc4:	009b      	lsls	r3, r3, #2
 8018fc6:	585b      	ldr	r3, [r3, r1]
 8018fc8:	0018      	movs	r0, r3
 8018fca:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8018fcc:	68fb      	ldr	r3, [r7, #12]
 8018fce:	785b      	ldrb	r3, [r3, #1]
 8018fd0:	b25b      	sxtb	r3, r3
 8018fd2:	2b07      	cmp	r3, #7
 8018fd4:	d12e      	bne.n	8019034 <RegionIN865TxConfig+0x110>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8018fd6:	201f      	movs	r0, #31
 8018fd8:	183b      	adds	r3, r7, r0
 8018fda:	2200      	movs	r2, #0
 8018fdc:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8018fde:	4b3b      	ldr	r3, [pc, #236]	; (80190cc <RegionIN865TxConfig+0x1a8>)
 8018fe0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018fe2:	231e      	movs	r3, #30
 8018fe4:	18fb      	adds	r3, r7, r3
 8018fe6:	2200      	movs	r2, #0
 8018fe8:	569a      	ldrsb	r2, [r3, r2]
 8018fea:	0013      	movs	r3, r2
 8018fec:	015b      	lsls	r3, r3, #5
 8018fee:	1a9b      	subs	r3, r3, r2
 8018ff0:	009b      	lsls	r3, r3, #2
 8018ff2:	189b      	adds	r3, r3, r2
 8018ff4:	00db      	lsls	r3, r3, #3
 8018ff6:	001d      	movs	r5, r3
 8018ff8:	69ba      	ldr	r2, [r7, #24]
 8018ffa:	4e35      	ldr	r6, [pc, #212]	; (80190d0 <RegionIN865TxConfig+0x1ac>)
 8018ffc:	2317      	movs	r3, #23
 8018ffe:	18fb      	adds	r3, r7, r3
 8019000:	2100      	movs	r1, #0
 8019002:	5659      	ldrsb	r1, [r3, r1]
 8019004:	183b      	adds	r3, r7, r0
 8019006:	7818      	ldrb	r0, [r3, #0]
 8019008:	23fa      	movs	r3, #250	; 0xfa
 801900a:	011b      	lsls	r3, r3, #4
 801900c:	9308      	str	r3, [sp, #32]
 801900e:	2300      	movs	r3, #0
 8019010:	9307      	str	r3, [sp, #28]
 8019012:	2300      	movs	r3, #0
 8019014:	9306      	str	r3, [sp, #24]
 8019016:	2300      	movs	r3, #0
 8019018:	9305      	str	r3, [sp, #20]
 801901a:	2301      	movs	r3, #1
 801901c:	9304      	str	r3, [sp, #16]
 801901e:	2300      	movs	r3, #0
 8019020:	9303      	str	r3, [sp, #12]
 8019022:	2305      	movs	r3, #5
 8019024:	9302      	str	r3, [sp, #8]
 8019026:	2300      	movs	r3, #0
 8019028:	9301      	str	r3, [sp, #4]
 801902a:	9500      	str	r5, [sp, #0]
 801902c:	0013      	movs	r3, r2
 801902e:	0032      	movs	r2, r6
 8019030:	47a0      	blx	r4
 8019032:	e025      	b.n	8019080 <RegionIN865TxConfig+0x15c>
    }
    else
    {
        modem = MODEM_LORA;
 8019034:	201f      	movs	r0, #31
 8019036:	183b      	adds	r3, r7, r0
 8019038:	2201      	movs	r2, #1
 801903a:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801903c:	4b23      	ldr	r3, [pc, #140]	; (80190cc <RegionIN865TxConfig+0x1a8>)
 801903e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019040:	231e      	movs	r3, #30
 8019042:	18fb      	adds	r3, r7, r3
 8019044:	781b      	ldrb	r3, [r3, #0]
 8019046:	b25b      	sxtb	r3, r3
 8019048:	69bd      	ldr	r5, [r7, #24]
 801904a:	2217      	movs	r2, #23
 801904c:	18ba      	adds	r2, r7, r2
 801904e:	2100      	movs	r1, #0
 8019050:	5651      	ldrsb	r1, [r2, r1]
 8019052:	183a      	adds	r2, r7, r0
 8019054:	7810      	ldrb	r0, [r2, #0]
 8019056:	22fa      	movs	r2, #250	; 0xfa
 8019058:	0112      	lsls	r2, r2, #4
 801905a:	9208      	str	r2, [sp, #32]
 801905c:	2200      	movs	r2, #0
 801905e:	9207      	str	r2, [sp, #28]
 8019060:	2200      	movs	r2, #0
 8019062:	9206      	str	r2, [sp, #24]
 8019064:	2200      	movs	r2, #0
 8019066:	9205      	str	r2, [sp, #20]
 8019068:	2201      	movs	r2, #1
 801906a:	9204      	str	r2, [sp, #16]
 801906c:	2200      	movs	r2, #0
 801906e:	9203      	str	r2, [sp, #12]
 8019070:	2208      	movs	r2, #8
 8019072:	9202      	str	r2, [sp, #8]
 8019074:	2201      	movs	r2, #1
 8019076:	9201      	str	r2, [sp, #4]
 8019078:	9300      	str	r3, [sp, #0]
 801907a:	002b      	movs	r3, r5
 801907c:	2200      	movs	r2, #0
 801907e:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8019080:	4b12      	ldr	r3, [pc, #72]	; (80190cc <RegionIN865TxConfig+0x1a8>)
 8019082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019084:	68fa      	ldr	r2, [r7, #12]
 8019086:	8992      	ldrh	r2, [r2, #12]
 8019088:	b2d1      	uxtb	r1, r2
 801908a:	241f      	movs	r4, #31
 801908c:	193a      	adds	r2, r7, r4
 801908e:	7812      	ldrb	r2, [r2, #0]
 8019090:	0010      	movs	r0, r2
 8019092:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 8019094:	4b0d      	ldr	r3, [pc, #52]	; (80190cc <RegionIN865TxConfig+0x1a8>)
 8019096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019098:	68fa      	ldr	r2, [r7, #12]
 801909a:	8992      	ldrh	r2, [r2, #12]
 801909c:	b2d1      	uxtb	r1, r2
 801909e:	193a      	adds	r2, r7, r4
 80190a0:	7812      	ldrb	r2, [r2, #0]
 80190a2:	0010      	movs	r0, r2
 80190a4:	4798      	blx	r3
 80190a6:	0002      	movs	r2, r0
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80190ac:	68bb      	ldr	r3, [r7, #8]
 80190ae:	221d      	movs	r2, #29
 80190b0:	18ba      	adds	r2, r7, r2
 80190b2:	7812      	ldrb	r2, [r2, #0]
 80190b4:	701a      	strb	r2, [r3, #0]
    return true;
 80190b6:	2301      	movs	r3, #1
}
 80190b8:	0018      	movs	r0, r3
 80190ba:	46bd      	mov	sp, r7
 80190bc:	b009      	add	sp, #36	; 0x24
 80190be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190c0:	0801d260 	.word	0x0801d260
 80190c4:	200010c4 	.word	0x200010c4
 80190c8:	20001194 	.word	0x20001194
 80190cc:	0801cb08 	.word	0x0801cb08
 80190d0:	000061a8 	.word	0x000061a8

080190d4 <RegionIN865LinkAdrReq>:

uint8_t RegionIN865LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80190d4:	b5b0      	push	{r4, r5, r7, lr}
 80190d6:	b092      	sub	sp, #72	; 0x48
 80190d8:	af00      	add	r7, sp, #0
 80190da:	60f8      	str	r0, [r7, #12]
 80190dc:	60b9      	str	r1, [r7, #8]
 80190de:	607a      	str	r2, [r7, #4]
 80190e0:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80190e2:	2347      	movs	r3, #71	; 0x47
 80190e4:	18fb      	adds	r3, r7, r3
 80190e6:	2207      	movs	r2, #7
 80190e8:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 80190ea:	2344      	movs	r3, #68	; 0x44
 80190ec:	18fb      	adds	r3, r7, r3
 80190ee:	2200      	movs	r2, #0
 80190f0:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 80190f2:	2346      	movs	r3, #70	; 0x46
 80190f4:	18fb      	adds	r3, r7, r3
 80190f6:	2200      	movs	r2, #0
 80190f8:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 80190fa:	233a      	movs	r3, #58	; 0x3a
 80190fc:	18fb      	adds	r3, r7, r3
 80190fe:	2200      	movs	r2, #0
 8019100:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019102:	e09e      	b.n	8019242 <RegionIN865LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8019104:	68fb      	ldr	r3, [r7, #12]
 8019106:	685a      	ldr	r2, [r3, #4]
 8019108:	2346      	movs	r3, #70	; 0x46
 801910a:	18fb      	adds	r3, r7, r3
 801910c:	781b      	ldrb	r3, [r3, #0]
 801910e:	18d3      	adds	r3, r2, r3
 8019110:	2544      	movs	r5, #68	; 0x44
 8019112:	197c      	adds	r4, r7, r5
 8019114:	223c      	movs	r2, #60	; 0x3c
 8019116:	18ba      	adds	r2, r7, r2
 8019118:	0011      	movs	r1, r2
 801911a:	0018      	movs	r0, r3
 801911c:	f7fe fed6 	bl	8017ecc <RegionCommonParseLinkAdrReq>
 8019120:	0003      	movs	r3, r0
 8019122:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8019124:	197b      	adds	r3, r7, r5
 8019126:	781b      	ldrb	r3, [r3, #0]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d100      	bne.n	801912e <RegionIN865LinkAdrReq+0x5a>
 801912c:	e092      	b.n	8019254 <RegionIN865LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801912e:	2246      	movs	r2, #70	; 0x46
 8019130:	18bb      	adds	r3, r7, r2
 8019132:	18b9      	adds	r1, r7, r2
 8019134:	2244      	movs	r2, #68	; 0x44
 8019136:	18ba      	adds	r2, r7, r2
 8019138:	7809      	ldrb	r1, [r1, #0]
 801913a:	7812      	ldrb	r2, [r2, #0]
 801913c:	188a      	adds	r2, r1, r2
 801913e:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8019140:	2347      	movs	r3, #71	; 0x47
 8019142:	18fb      	adds	r3, r7, r3
 8019144:	2207      	movs	r2, #7
 8019146:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8019148:	213c      	movs	r1, #60	; 0x3c
 801914a:	187b      	adds	r3, r7, r1
 801914c:	889a      	ldrh	r2, [r3, #4]
 801914e:	233a      	movs	r3, #58	; 0x3a
 8019150:	18fb      	adds	r3, r7, r3
 8019152:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8019154:	187b      	adds	r3, r7, r1
 8019156:	78db      	ldrb	r3, [r3, #3]
 8019158:	2b00      	cmp	r3, #0
 801915a:	d10c      	bne.n	8019176 <RegionIN865LinkAdrReq+0xa2>
 801915c:	233a      	movs	r3, #58	; 0x3a
 801915e:	18fb      	adds	r3, r7, r3
 8019160:	881b      	ldrh	r3, [r3, #0]
 8019162:	2b00      	cmp	r3, #0
 8019164:	d107      	bne.n	8019176 <RegionIN865LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 8019166:	2247      	movs	r2, #71	; 0x47
 8019168:	18bb      	adds	r3, r7, r2
 801916a:	18ba      	adds	r2, r7, r2
 801916c:	7812      	ldrb	r2, [r2, #0]
 801916e:	2101      	movs	r1, #1
 8019170:	438a      	bics	r2, r1
 8019172:	701a      	strb	r2, [r3, #0]
 8019174:	e065      	b.n	8019242 <RegionIN865LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019176:	233c      	movs	r3, #60	; 0x3c
 8019178:	18fb      	adds	r3, r7, r3
 801917a:	78db      	ldrb	r3, [r3, #3]
 801917c:	2b00      	cmp	r3, #0
 801917e:	d004      	beq.n	801918a <RegionIN865LinkAdrReq+0xb6>
 8019180:	233c      	movs	r3, #60	; 0x3c
 8019182:	18fb      	adds	r3, r7, r3
 8019184:	78db      	ldrb	r3, [r3, #3]
 8019186:	2b05      	cmp	r3, #5
 8019188:	d904      	bls.n	8019194 <RegionIN865LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801918a:	233c      	movs	r3, #60	; 0x3c
 801918c:	18fb      	adds	r3, r7, r3
 801918e:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019190:	2b06      	cmp	r3, #6
 8019192:	d907      	bls.n	80191a4 <RegionIN865LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8019194:	2247      	movs	r2, #71	; 0x47
 8019196:	18bb      	adds	r3, r7, r2
 8019198:	18ba      	adds	r2, r7, r2
 801919a:	7812      	ldrb	r2, [r2, #0]
 801919c:	2101      	movs	r1, #1
 801919e:	438a      	bics	r2, r1
 80191a0:	701a      	strb	r2, [r3, #0]
 80191a2:	e04e      	b.n	8019242 <RegionIN865LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 80191a4:	2345      	movs	r3, #69	; 0x45
 80191a6:	18fb      	adds	r3, r7, r3
 80191a8:	2200      	movs	r2, #0
 80191aa:	701a      	strb	r2, [r3, #0]
 80191ac:	e044      	b.n	8019238 <RegionIN865LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80191ae:	233c      	movs	r3, #60	; 0x3c
 80191b0:	18fb      	adds	r3, r7, r3
 80191b2:	78db      	ldrb	r3, [r3, #3]
 80191b4:	2b06      	cmp	r3, #6
 80191b6:	d11b      	bne.n	80191f0 <RegionIN865LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 80191b8:	2345      	movs	r3, #69	; 0x45
 80191ba:	18fb      	adds	r3, r7, r3
 80191bc:	781a      	ldrb	r2, [r3, #0]
 80191be:	4974      	ldr	r1, [pc, #464]	; (8019390 <RegionIN865LinkAdrReq+0x2bc>)
 80191c0:	0013      	movs	r3, r2
 80191c2:	005b      	lsls	r3, r3, #1
 80191c4:	189b      	adds	r3, r3, r2
 80191c6:	009b      	lsls	r3, r3, #2
 80191c8:	585b      	ldr	r3, [r3, r1]
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d02e      	beq.n	801922c <RegionIN865LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 80191ce:	2345      	movs	r3, #69	; 0x45
 80191d0:	18fb      	adds	r3, r7, r3
 80191d2:	781b      	ldrb	r3, [r3, #0]
 80191d4:	2201      	movs	r2, #1
 80191d6:	409a      	lsls	r2, r3
 80191d8:	0013      	movs	r3, r2
 80191da:	b21a      	sxth	r2, r3
 80191dc:	213a      	movs	r1, #58	; 0x3a
 80191de:	187b      	adds	r3, r7, r1
 80191e0:	881b      	ldrh	r3, [r3, #0]
 80191e2:	b21b      	sxth	r3, r3
 80191e4:	4313      	orrs	r3, r2
 80191e6:	b21b      	sxth	r3, r3
 80191e8:	b29a      	uxth	r2, r3
 80191ea:	187b      	adds	r3, r7, r1
 80191ec:	801a      	strh	r2, [r3, #0]
 80191ee:	e01d      	b.n	801922c <RegionIN865LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80191f0:	233a      	movs	r3, #58	; 0x3a
 80191f2:	18fb      	adds	r3, r7, r3
 80191f4:	881b      	ldrh	r3, [r3, #0]
 80191f6:	001a      	movs	r2, r3
 80191f8:	2345      	movs	r3, #69	; 0x45
 80191fa:	18fb      	adds	r3, r7, r3
 80191fc:	781b      	ldrb	r3, [r3, #0]
 80191fe:	411a      	asrs	r2, r3
 8019200:	0013      	movs	r3, r2
 8019202:	2201      	movs	r2, #1
 8019204:	4013      	ands	r3, r2
 8019206:	d011      	beq.n	801922c <RegionIN865LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8019208:	2345      	movs	r3, #69	; 0x45
 801920a:	18fb      	adds	r3, r7, r3
 801920c:	781a      	ldrb	r2, [r3, #0]
 801920e:	4960      	ldr	r1, [pc, #384]	; (8019390 <RegionIN865LinkAdrReq+0x2bc>)
 8019210:	0013      	movs	r3, r2
 8019212:	005b      	lsls	r3, r3, #1
 8019214:	189b      	adds	r3, r3, r2
 8019216:	009b      	lsls	r3, r3, #2
 8019218:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801921a:	2b00      	cmp	r3, #0
 801921c:	d106      	bne.n	801922c <RegionIN865LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801921e:	2247      	movs	r2, #71	; 0x47
 8019220:	18bb      	adds	r3, r7, r2
 8019222:	18ba      	adds	r2, r7, r2
 8019224:	7812      	ldrb	r2, [r2, #0]
 8019226:	2101      	movs	r1, #1
 8019228:	438a      	bics	r2, r1
 801922a:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 801922c:	2145      	movs	r1, #69	; 0x45
 801922e:	187b      	adds	r3, r7, r1
 8019230:	781a      	ldrb	r2, [r3, #0]
 8019232:	187b      	adds	r3, r7, r1
 8019234:	3201      	adds	r2, #1
 8019236:	701a      	strb	r2, [r3, #0]
 8019238:	2345      	movs	r3, #69	; 0x45
 801923a:	18fb      	adds	r3, r7, r3
 801923c:	781b      	ldrb	r3, [r3, #0]
 801923e:	2b0f      	cmp	r3, #15
 8019240:	d9b5      	bls.n	80191ae <RegionIN865LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	7a1b      	ldrb	r3, [r3, #8]
 8019246:	2246      	movs	r2, #70	; 0x46
 8019248:	18ba      	adds	r2, r7, r2
 801924a:	7812      	ldrb	r2, [r2, #0]
 801924c:	429a      	cmp	r2, r3
 801924e:	d200      	bcs.n	8019252 <RegionIN865LinkAdrReq+0x17e>
 8019250:	e758      	b.n	8019104 <RegionIN865LinkAdrReq+0x30>
 8019252:	e000      	b.n	8019256 <RegionIN865LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 8019254:	46c0      	nop			; (mov r8, r8)
                }
            }
        }
    }

    if( linkAdrParams.Datarate != DR_6 )
 8019256:	233c      	movs	r3, #60	; 0x3c
 8019258:	18fb      	adds	r3, r7, r3
 801925a:	785b      	ldrb	r3, [r3, #1]
 801925c:	b25b      	sxtb	r3, r3
 801925e:	2b06      	cmp	r3, #6
 8019260:	d063      	beq.n	801932a <RegionIN865LinkAdrReq+0x256>
    {
        // Get the minimum possible datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8019262:	2134      	movs	r1, #52	; 0x34
 8019264:	187b      	adds	r3, r7, r1
 8019266:	2202      	movs	r2, #2
 8019268:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801926a:	68fb      	ldr	r3, [r7, #12]
 801926c:	7a5a      	ldrb	r2, [r3, #9]
 801926e:	187b      	adds	r3, r7, r1
 8019270:	709a      	strb	r2, [r3, #2]
        phyParam = RegionIN865GetPhyParam( &getPhy );
 8019272:	187b      	adds	r3, r7, r1
 8019274:	0018      	movs	r0, r3
 8019276:	f7ff fa3d 	bl	80186f4 <RegionIN865GetPhyParam>
 801927a:	0003      	movs	r3, r0
 801927c:	001a      	movs	r2, r3
 801927e:	2030      	movs	r0, #48	; 0x30
 8019280:	183b      	adds	r3, r7, r0
 8019282:	601a      	str	r2, [r3, #0]

        linkAdrVerifyParams.Status = status;
 8019284:	2110      	movs	r1, #16
 8019286:	187b      	adds	r3, r7, r1
 8019288:	2447      	movs	r4, #71	; 0x47
 801928a:	193a      	adds	r2, r7, r4
 801928c:	7812      	ldrb	r2, [r2, #0]
 801928e:	711a      	strb	r2, [r3, #4]
        linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	7a9a      	ldrb	r2, [r3, #10]
 8019294:	187b      	adds	r3, r7, r1
 8019296:	715a      	strb	r2, [r3, #5]
        linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8019298:	253c      	movs	r5, #60	; 0x3c
 801929a:	197b      	adds	r3, r7, r5
 801929c:	2201      	movs	r2, #1
 801929e:	569a      	ldrsb	r2, [r3, r2]
 80192a0:	187b      	adds	r3, r7, r1
 80192a2:	719a      	strb	r2, [r3, #6]
        linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80192a4:	197b      	adds	r3, r7, r5
 80192a6:	2202      	movs	r2, #2
 80192a8:	569a      	ldrsb	r2, [r3, r2]
 80192aa:	187b      	adds	r3, r7, r1
 80192ac:	71da      	strb	r2, [r3, #7]
        linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80192ae:	197b      	adds	r3, r7, r5
 80192b0:	781a      	ldrb	r2, [r3, #0]
 80192b2:	187b      	adds	r3, r7, r1
 80192b4:	721a      	strb	r2, [r3, #8]
        linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	220b      	movs	r2, #11
 80192ba:	569a      	ldrsb	r2, [r3, r2]
 80192bc:	187b      	adds	r3, r7, r1
 80192be:	725a      	strb	r2, [r3, #9]
        linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80192c0:	68fb      	ldr	r3, [r7, #12]
 80192c2:	220c      	movs	r2, #12
 80192c4:	569a      	ldrsb	r2, [r3, r2]
 80192c6:	187b      	adds	r3, r7, r1
 80192c8:	729a      	strb	r2, [r3, #10]
        linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	7b5b      	ldrb	r3, [r3, #13]
 80192ce:	b25a      	sxtb	r2, r3
 80192d0:	187b      	adds	r3, r7, r1
 80192d2:	72da      	strb	r2, [r3, #11]
        linkAdrVerifyParams.NbChannels = IN865_MAX_NB_CHANNELS;
 80192d4:	187b      	adds	r3, r7, r1
 80192d6:	2210      	movs	r2, #16
 80192d8:	731a      	strb	r2, [r3, #12]
        linkAdrVerifyParams.ChannelsMask = &chMask;
 80192da:	187b      	adds	r3, r7, r1
 80192dc:	223a      	movs	r2, #58	; 0x3a
 80192de:	18ba      	adds	r2, r7, r2
 80192e0:	611a      	str	r2, [r3, #16]
        linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80192e2:	183b      	adds	r3, r7, r0
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	b25a      	sxtb	r2, r3
 80192e8:	0008      	movs	r0, r1
 80192ea:	183b      	adds	r3, r7, r0
 80192ec:	751a      	strb	r2, [r3, #20]
        linkAdrVerifyParams.MaxDatarate = IN865_TX_MAX_DATARATE;
 80192ee:	183b      	adds	r3, r7, r0
 80192f0:	2207      	movs	r2, #7
 80192f2:	755a      	strb	r2, [r3, #21]
        linkAdrVerifyParams.Channels = NvmCtx.Channels;
 80192f4:	183b      	adds	r3, r7, r0
 80192f6:	4a26      	ldr	r2, [pc, #152]	; (8019390 <RegionIN865LinkAdrReq+0x2bc>)
 80192f8:	619a      	str	r2, [r3, #24]
        linkAdrVerifyParams.MinTxPower = IN865_MIN_TX_POWER;
 80192fa:	183b      	adds	r3, r7, r0
 80192fc:	220a      	movs	r2, #10
 80192fe:	771a      	strb	r2, [r3, #28]
        linkAdrVerifyParams.MaxTxPower = IN865_MAX_TX_POWER;
 8019300:	183b      	adds	r3, r7, r0
 8019302:	2200      	movs	r2, #0
 8019304:	775a      	strb	r2, [r3, #29]
        linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019306:	183b      	adds	r3, r7, r0
 8019308:	68fa      	ldr	r2, [r7, #12]
 801930a:	6812      	ldr	r2, [r2, #0]
 801930c:	601a      	str	r2, [r3, #0]

        // Verify the parameters and update, if necessary
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801930e:	193c      	adds	r4, r7, r4
 8019310:	0029      	movs	r1, r5
 8019312:	187d      	adds	r5, r7, r1
 8019314:	187b      	adds	r3, r7, r1
 8019316:	1c9a      	adds	r2, r3, #2
 8019318:	187b      	adds	r3, r7, r1
 801931a:	1c59      	adds	r1, r3, #1
 801931c:	1838      	adds	r0, r7, r0
 801931e:	002b      	movs	r3, r5
 8019320:	f7fe fe2a 	bl	8017f78 <RegionCommonLinkAdrReqVerifyParams>
 8019324:	0003      	movs	r3, r0
 8019326:	7023      	strb	r3, [r4, #0]
 8019328:	e006      	b.n	8019338 <RegionIN865LinkAdrReq+0x264>
    }
    else
    {// DR_6 is not supported by this region
        status &= 0xFD; // Datarate KO
 801932a:	2247      	movs	r2, #71	; 0x47
 801932c:	18bb      	adds	r3, r7, r2
 801932e:	18ba      	adds	r2, r7, r2
 8019330:	7812      	ldrb	r2, [r2, #0]
 8019332:	2102      	movs	r1, #2
 8019334:	438a      	bics	r2, r1
 8019336:	701a      	strb	r2, [r3, #0]
    }

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019338:	2347      	movs	r3, #71	; 0x47
 801933a:	18fb      	adds	r3, r7, r3
 801933c:	781b      	ldrb	r3, [r3, #0]
 801933e:	2b07      	cmp	r3, #7
 8019340:	d10b      	bne.n	801935a <RegionIN865LinkAdrReq+0x286>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8019342:	4b14      	ldr	r3, [pc, #80]	; (8019394 <RegionIN865LinkAdrReq+0x2c0>)
 8019344:	2202      	movs	r2, #2
 8019346:	2100      	movs	r1, #0
 8019348:	0018      	movs	r0, r3
 801934a:	f002 f9ad 	bl	801b6a8 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 801934e:	233a      	movs	r3, #58	; 0x3a
 8019350:	18fb      	adds	r3, r7, r3
 8019352:	8819      	ldrh	r1, [r3, #0]
 8019354:	4b0e      	ldr	r3, [pc, #56]	; (8019390 <RegionIN865LinkAdrReq+0x2bc>)
 8019356:	22d0      	movs	r2, #208	; 0xd0
 8019358:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801935a:	213c      	movs	r1, #60	; 0x3c
 801935c:	187b      	adds	r3, r7, r1
 801935e:	2201      	movs	r2, #1
 8019360:	569a      	ldrsb	r2, [r3, r2]
 8019362:	68bb      	ldr	r3, [r7, #8]
 8019364:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019366:	187b      	adds	r3, r7, r1
 8019368:	2202      	movs	r2, #2
 801936a:	569a      	ldrsb	r2, [r3, r2]
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8019370:	187b      	adds	r3, r7, r1
 8019372:	781a      	ldrb	r2, [r3, #0]
 8019374:	683b      	ldr	r3, [r7, #0]
 8019376:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8019378:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801937a:	2246      	movs	r2, #70	; 0x46
 801937c:	18ba      	adds	r2, r7, r2
 801937e:	7812      	ldrb	r2, [r2, #0]
 8019380:	701a      	strb	r2, [r3, #0]

    return status;
 8019382:	2347      	movs	r3, #71	; 0x47
 8019384:	18fb      	adds	r3, r7, r3
 8019386:	781b      	ldrb	r3, [r3, #0]
}
 8019388:	0018      	movs	r0, r3
 801938a:	46bd      	mov	sp, r7
 801938c:	b012      	add	sp, #72	; 0x48
 801938e:	bdb0      	pop	{r4, r5, r7, pc}
 8019390:	200010c4 	.word	0x200010c4
 8019394:	20001194 	.word	0x20001194

08019398 <RegionIN865RxParamSetupReq>:

uint8_t RegionIN865RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019398:	b580      	push	{r7, lr}
 801939a:	b084      	sub	sp, #16
 801939c:	af00      	add	r7, sp, #0
 801939e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80193a0:	230f      	movs	r3, #15
 80193a2:	18fb      	adds	r3, r7, r3
 80193a4:	2207      	movs	r2, #7
 80193a6:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	685b      	ldr	r3, [r3, #4]
 80193ac:	0018      	movs	r0, r3
 80193ae:	f7ff f893 	bl	80184d8 <VerifyRfFreq>
 80193b2:	0003      	movs	r3, r0
 80193b4:	001a      	movs	r2, r3
 80193b6:	2301      	movs	r3, #1
 80193b8:	4053      	eors	r3, r2
 80193ba:	b2db      	uxtb	r3, r3
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d006      	beq.n	80193ce <RegionIN865RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 80193c0:	220f      	movs	r2, #15
 80193c2:	18bb      	adds	r3, r7, r2
 80193c4:	18ba      	adds	r2, r7, r2
 80193c6:	7812      	ldrb	r2, [r2, #0]
 80193c8:	2101      	movs	r1, #1
 80193ca:	438a      	bics	r2, r1
 80193cc:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false )
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	781b      	ldrb	r3, [r3, #0]
 80193d2:	b25b      	sxtb	r3, r3
 80193d4:	2207      	movs	r2, #7
 80193d6:	2100      	movs	r1, #0
 80193d8:	0018      	movs	r0, r3
 80193da:	f7fe fbbd 	bl	8017b58 <RegionCommonValueInRange>
 80193de:	1e03      	subs	r3, r0, #0
 80193e0:	d106      	bne.n	80193f0 <RegionIN865RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 80193e2:	220f      	movs	r2, #15
 80193e4:	18bb      	adds	r3, r7, r2
 80193e6:	18ba      	adds	r2, r7, r2
 80193e8:	7812      	ldrb	r2, [r2, #0]
 80193ea:	2102      	movs	r1, #2
 80193ec:	438a      	bics	r2, r1
 80193ee:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, IN865_MIN_RX1_DR_OFFSET, IN865_MAX_RX1_DR_OFFSET ) == false )
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	785b      	ldrb	r3, [r3, #1]
 80193f4:	b25b      	sxtb	r3, r3
 80193f6:	2207      	movs	r2, #7
 80193f8:	2100      	movs	r1, #0
 80193fa:	0018      	movs	r0, r3
 80193fc:	f7fe fbac 	bl	8017b58 <RegionCommonValueInRange>
 8019400:	1e03      	subs	r3, r0, #0
 8019402:	d106      	bne.n	8019412 <RegionIN865RxParamSetupReq+0x7a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019404:	220f      	movs	r2, #15
 8019406:	18bb      	adds	r3, r7, r2
 8019408:	18ba      	adds	r2, r7, r2
 801940a:	7812      	ldrb	r2, [r2, #0]
 801940c:	2104      	movs	r1, #4
 801940e:	438a      	bics	r2, r1
 8019410:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8019412:	230f      	movs	r3, #15
 8019414:	18fb      	adds	r3, r7, r3
 8019416:	781b      	ldrb	r3, [r3, #0]
}
 8019418:	0018      	movs	r0, r3
 801941a:	46bd      	mov	sp, r7
 801941c:	b004      	add	sp, #16
 801941e:	bd80      	pop	{r7, pc}

08019420 <RegionIN865NewChannelReq>:

uint8_t RegionIN865NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019420:	b580      	push	{r7, lr}
 8019422:	b086      	sub	sp, #24
 8019424:	af00      	add	r7, sp, #0
 8019426:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019428:	2317      	movs	r3, #23
 801942a:	18fb      	adds	r3, r7, r3
 801942c:	2203      	movs	r2, #3
 801942e:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	2b00      	cmp	r3, #0
 8019438:	d119      	bne.n	801946e <RegionIN865NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	791b      	ldrb	r3, [r3, #4]
 801943e:	b25b      	sxtb	r3, r3
 8019440:	b2da      	uxtb	r2, r3
 8019442:	2108      	movs	r1, #8
 8019444:	187b      	adds	r3, r7, r1
 8019446:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionIN865ChannelsRemove( &channelRemove ) == false )
 8019448:	187b      	adds	r3, r7, r1
 801944a:	0018      	movs	r0, r3
 801944c:	f000 fa42 	bl	80198d4 <RegionIN865ChannelsRemove>
 8019450:	0003      	movs	r3, r0
 8019452:	001a      	movs	r2, r3
 8019454:	2301      	movs	r3, #1
 8019456:	4053      	eors	r3, r2
 8019458:	b2db      	uxtb	r3, r3
 801945a:	2b00      	cmp	r3, #0
 801945c:	d043      	beq.n	80194e6 <RegionIN865NewChannelReq+0xc6>
        {
            status &= 0xFC;
 801945e:	2217      	movs	r2, #23
 8019460:	18bb      	adds	r3, r7, r2
 8019462:	18ba      	adds	r2, r7, r2
 8019464:	7812      	ldrb	r2, [r2, #0]
 8019466:	2103      	movs	r1, #3
 8019468:	438a      	bics	r2, r1
 801946a:	701a      	strb	r2, [r3, #0]
 801946c:	e03b      	b.n	80194e6 <RegionIN865NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	681a      	ldr	r2, [r3, #0]
 8019472:	210c      	movs	r1, #12
 8019474:	187b      	adds	r3, r7, r1
 8019476:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	791b      	ldrb	r3, [r3, #4]
 801947c:	b25b      	sxtb	r3, r3
 801947e:	b2da      	uxtb	r2, r3
 8019480:	187b      	adds	r3, r7, r1
 8019482:	711a      	strb	r2, [r3, #4]

        switch( RegionIN865ChannelAdd( &channelAdd ) )
 8019484:	187b      	adds	r3, r7, r1
 8019486:	0018      	movs	r0, r3
 8019488:	f000 f96a 	bl	8019760 <RegionIN865ChannelAdd>
 801948c:	0003      	movs	r3, r0
 801948e:	2b04      	cmp	r3, #4
 8019490:	d008      	beq.n	80194a4 <RegionIN865NewChannelReq+0x84>
 8019492:	dc02      	bgt.n	801949a <RegionIN865NewChannelReq+0x7a>
 8019494:	2b00      	cmp	r3, #0
 8019496:	d025      	beq.n	80194e4 <RegionIN865NewChannelReq+0xc4>
 8019498:	e01c      	b.n	80194d4 <RegionIN865NewChannelReq+0xb4>
 801949a:	2b05      	cmp	r3, #5
 801949c:	d00a      	beq.n	80194b4 <RegionIN865NewChannelReq+0x94>
 801949e:	2b06      	cmp	r3, #6
 80194a0:	d010      	beq.n	80194c4 <RegionIN865NewChannelReq+0xa4>
 80194a2:	e017      	b.n	80194d4 <RegionIN865NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80194a4:	2217      	movs	r2, #23
 80194a6:	18bb      	adds	r3, r7, r2
 80194a8:	18ba      	adds	r2, r7, r2
 80194aa:	7812      	ldrb	r2, [r2, #0]
 80194ac:	2101      	movs	r1, #1
 80194ae:	438a      	bics	r2, r1
 80194b0:	701a      	strb	r2, [r3, #0]
                break;
 80194b2:	e018      	b.n	80194e6 <RegionIN865NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80194b4:	2217      	movs	r2, #23
 80194b6:	18bb      	adds	r3, r7, r2
 80194b8:	18ba      	adds	r2, r7, r2
 80194ba:	7812      	ldrb	r2, [r2, #0]
 80194bc:	2102      	movs	r1, #2
 80194be:	438a      	bics	r2, r1
 80194c0:	701a      	strb	r2, [r3, #0]
                break;
 80194c2:	e010      	b.n	80194e6 <RegionIN865NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80194c4:	2217      	movs	r2, #23
 80194c6:	18bb      	adds	r3, r7, r2
 80194c8:	18ba      	adds	r2, r7, r2
 80194ca:	7812      	ldrb	r2, [r2, #0]
 80194cc:	2103      	movs	r1, #3
 80194ce:	438a      	bics	r2, r1
 80194d0:	701a      	strb	r2, [r3, #0]
                break;
 80194d2:	e008      	b.n	80194e6 <RegionIN865NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 80194d4:	2217      	movs	r2, #23
 80194d6:	18bb      	adds	r3, r7, r2
 80194d8:	18ba      	adds	r2, r7, r2
 80194da:	7812      	ldrb	r2, [r2, #0]
 80194dc:	2103      	movs	r1, #3
 80194de:	438a      	bics	r2, r1
 80194e0:	701a      	strb	r2, [r3, #0]
                break;
 80194e2:	e000      	b.n	80194e6 <RegionIN865NewChannelReq+0xc6>
                break;
 80194e4:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 80194e6:	2317      	movs	r3, #23
 80194e8:	18fb      	adds	r3, r7, r3
 80194ea:	781b      	ldrb	r3, [r3, #0]
}
 80194ec:	0018      	movs	r0, r3
 80194ee:	46bd      	mov	sp, r7
 80194f0:	b006      	add	sp, #24
 80194f2:	bd80      	pop	{r7, pc}

080194f4 <RegionIN865TxParamSetupReq>:

int8_t RegionIN865TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80194f4:	b580      	push	{r7, lr}
 80194f6:	b082      	sub	sp, #8
 80194f8:	af00      	add	r7, sp, #0
 80194fa:	6078      	str	r0, [r7, #4]
    return -1;
 80194fc:	2301      	movs	r3, #1
 80194fe:	425b      	negs	r3, r3
}
 8019500:	0018      	movs	r0, r3
 8019502:	46bd      	mov	sp, r7
 8019504:	b002      	add	sp, #8
 8019506:	bd80      	pop	{r7, pc}

08019508 <RegionIN865DlChannelReq>:

uint8_t RegionIN865DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019508:	b580      	push	{r7, lr}
 801950a:	b084      	sub	sp, #16
 801950c:	af00      	add	r7, sp, #0
 801950e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019510:	230f      	movs	r3, #15
 8019512:	18fb      	adds	r3, r7, r3
 8019514:	2203      	movs	r2, #3
 8019516:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	685b      	ldr	r3, [r3, #4]
 801951c:	0018      	movs	r0, r3
 801951e:	f7fe ffdb 	bl	80184d8 <VerifyRfFreq>
 8019522:	0003      	movs	r3, r0
 8019524:	001a      	movs	r2, r3
 8019526:	2301      	movs	r3, #1
 8019528:	4053      	eors	r3, r2
 801952a:	b2db      	uxtb	r3, r3
 801952c:	2b00      	cmp	r3, #0
 801952e:	d006      	beq.n	801953e <RegionIN865DlChannelReq+0x36>
    {
        status &= 0xFE;
 8019530:	220f      	movs	r2, #15
 8019532:	18bb      	adds	r3, r7, r2
 8019534:	18ba      	adds	r2, r7, r2
 8019536:	7812      	ldrb	r2, [r2, #0]
 8019538:	2101      	movs	r1, #1
 801953a:	438a      	bics	r2, r1
 801953c:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	781b      	ldrb	r3, [r3, #0]
 8019542:	0019      	movs	r1, r3
 8019544:	4a13      	ldr	r2, [pc, #76]	; (8019594 <RegionIN865DlChannelReq+0x8c>)
 8019546:	000b      	movs	r3, r1
 8019548:	005b      	lsls	r3, r3, #1
 801954a:	185b      	adds	r3, r3, r1
 801954c:	009b      	lsls	r3, r3, #2
 801954e:	589b      	ldr	r3, [r3, r2]
 8019550:	2b00      	cmp	r3, #0
 8019552:	d106      	bne.n	8019562 <RegionIN865DlChannelReq+0x5a>
    {
        status &= 0xFD;
 8019554:	220f      	movs	r2, #15
 8019556:	18bb      	adds	r3, r7, r2
 8019558:	18ba      	adds	r2, r7, r2
 801955a:	7812      	ldrb	r2, [r2, #0]
 801955c:	2102      	movs	r1, #2
 801955e:	438a      	bics	r2, r1
 8019560:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8019562:	230f      	movs	r3, #15
 8019564:	18fb      	adds	r3, r7, r3
 8019566:	781b      	ldrb	r3, [r3, #0]
 8019568:	2b03      	cmp	r3, #3
 801956a:	d10c      	bne.n	8019586 <RegionIN865DlChannelReq+0x7e>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	781b      	ldrb	r3, [r3, #0]
 8019570:	0018      	movs	r0, r3
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	685a      	ldr	r2, [r3, #4]
 8019576:	4907      	ldr	r1, [pc, #28]	; (8019594 <RegionIN865DlChannelReq+0x8c>)
 8019578:	0003      	movs	r3, r0
 801957a:	005b      	lsls	r3, r3, #1
 801957c:	181b      	adds	r3, r3, r0
 801957e:	009b      	lsls	r3, r3, #2
 8019580:	18cb      	adds	r3, r1, r3
 8019582:	3304      	adds	r3, #4
 8019584:	601a      	str	r2, [r3, #0]
    }

    return status;
 8019586:	230f      	movs	r3, #15
 8019588:	18fb      	adds	r3, r7, r3
 801958a:	781b      	ldrb	r3, [r3, #0]
}
 801958c:	0018      	movs	r0, r3
 801958e:	46bd      	mov	sp, r7
 8019590:	b004      	add	sp, #16
 8019592:	bd80      	pop	{r7, pc}
 8019594:	200010c4 	.word	0x200010c4

08019598 <RegionIN865AlternateDr>:

int8_t RegionIN865AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b082      	sub	sp, #8
 801959c:	af00      	add	r7, sp, #0
 801959e:	0002      	movs	r2, r0
 80195a0:	1dfb      	adds	r3, r7, #7
 80195a2:	701a      	strb	r2, [r3, #0]
 80195a4:	1dbb      	adds	r3, r7, #6
 80195a6:	1c0a      	adds	r2, r1, #0
 80195a8:	701a      	strb	r2, [r3, #0]
    return currentDr;
 80195aa:	1dfb      	adds	r3, r7, #7
 80195ac:	781b      	ldrb	r3, [r3, #0]
 80195ae:	b25b      	sxtb	r3, r3
}
 80195b0:	0018      	movs	r0, r3
 80195b2:	46bd      	mov	sp, r7
 80195b4:	b002      	add	sp, #8
 80195b6:	bd80      	pop	{r7, pc}

080195b8 <RegionIN865CalcBackOff>:

void RegionIN865CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 80195b8:	b580      	push	{r7, lr}
 80195ba:	b088      	sub	sp, #32
 80195bc:	af00      	add	r7, sp, #0
 80195be:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 80195c0:	210c      	movs	r1, #12
 80195c2:	187b      	adds	r3, r7, r1
 80195c4:	4a12      	ldr	r2, [pc, #72]	; (8019610 <RegionIN865CalcBackOff+0x58>)
 80195c6:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 80195c8:	187b      	adds	r3, r7, r1
 80195ca:	4a12      	ldr	r2, [pc, #72]	; (8019614 <RegionIN865CalcBackOff+0x5c>)
 80195cc:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	785a      	ldrb	r2, [r3, #1]
 80195d2:	187b      	adds	r3, r7, r1
 80195d4:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	781a      	ldrb	r2, [r3, #0]
 80195da:	187b      	adds	r3, r7, r1
 80195dc:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	789a      	ldrb	r2, [r3, #2]
 80195e2:	187b      	adds	r3, r7, r1
 80195e4:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	78da      	ldrb	r2, [r3, #3]
 80195ea:	187b      	adds	r3, r7, r1
 80195ec:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	685a      	ldr	r2, [r3, #4]
 80195f2:	187b      	adds	r3, r7, r1
 80195f4:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	689a      	ldr	r2, [r3, #8]
 80195fa:	187b      	adds	r3, r7, r1
 80195fc:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 80195fe:	187b      	adds	r3, r7, r1
 8019600:	0018      	movs	r0, r3
 8019602:	f7fe fe63 	bl	80182cc <RegionCommonCalcBackOff>
}
 8019606:	46c0      	nop			; (mov r8, r8)
 8019608:	46bd      	mov	sp, r7
 801960a:	b008      	add	sp, #32
 801960c:	bd80      	pop	{r7, pc}
 801960e:	46c0      	nop			; (mov r8, r8)
 8019610:	200010c4 	.word	0x200010c4
 8019614:	20001184 	.word	0x20001184

08019618 <RegionIN865NextChannel>:

LoRaMacStatus_t RegionIN865NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019618:	b5b0      	push	{r4, r5, r7, lr}
 801961a:	b090      	sub	sp, #64	; 0x40
 801961c:	af04      	add	r7, sp, #16
 801961e:	60f8      	str	r0, [r7, #12]
 8019620:	60b9      	str	r1, [r7, #8]
 8019622:	607a      	str	r2, [r7, #4]
 8019624:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8019626:	232f      	movs	r3, #47	; 0x2f
 8019628:	18fb      	adds	r3, r7, r3
 801962a:	2200      	movs	r2, #0
 801962c:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 801962e:	2323      	movs	r3, #35	; 0x23
 8019630:	18fb      	adds	r3, r7, r3
 8019632:	2200      	movs	r2, #0
 8019634:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[IN865_MAX_NB_CHANNELS] = { 0 };
 8019636:	2310      	movs	r3, #16
 8019638:	18fb      	adds	r3, r7, r3
 801963a:	0018      	movs	r0, r3
 801963c:	2310      	movs	r3, #16
 801963e:	001a      	movs	r2, r3
 8019640:	2100      	movs	r1, #0
 8019642:	f002 f879 	bl	801b738 <memset>
    TimerTime_t nextTxDelay = 0;
 8019646:	2300      	movs	r3, #0
 8019648:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 801964a:	4b42      	ldr	r3, [pc, #264]	; (8019754 <RegionIN865NextChannel+0x13c>)
 801964c:	2201      	movs	r2, #1
 801964e:	2100      	movs	r1, #0
 8019650:	0018      	movs	r0, r3
 8019652:	f7fe fae9 	bl	8017c28 <RegionCommonCountChannels>
 8019656:	1e03      	subs	r3, r0, #0
 8019658:	d108      	bne.n	801966c <RegionIN865NextChannel+0x54>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801965a:	4b3f      	ldr	r3, [pc, #252]	; (8019758 <RegionIN865NextChannel+0x140>)
 801965c:	22d0      	movs	r2, #208	; 0xd0
 801965e:	5a9b      	ldrh	r3, [r3, r2]
 8019660:	2207      	movs	r2, #7
 8019662:	4313      	orrs	r3, r2
 8019664:	b299      	uxth	r1, r3
 8019666:	4b3c      	ldr	r3, [pc, #240]	; (8019758 <RegionIN865NextChannel+0x140>)
 8019668:	22d0      	movs	r2, #208	; 0xd0
 801966a:	5299      	strh	r1, [r3, r2]
    }

    TimerTime_t elapsed = TimerGetElapsedTime( nextChanParams->LastAggrTx );
 801966c:	68fb      	ldr	r3, [r7, #12]
 801966e:	685b      	ldr	r3, [r3, #4]
 8019670:	0018      	movs	r0, r3
 8019672:	f001 fe14 	bl	801b29e <TimerGetElapsedTime>
 8019676:	0003      	movs	r3, r0
 8019678:	627b      	str	r3, [r7, #36]	; 0x24
    if( ( nextChanParams->LastAggrTx == 0 ) || ( nextChanParams->AggrTimeOff <= elapsed ) )
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	685b      	ldr	r3, [r3, #4]
 801967e:	2b00      	cmp	r3, #0
 8019680:	d004      	beq.n	801968c <RegionIN865NextChannel+0x74>
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019688:	429a      	cmp	r2, r3
 801968a:	d324      	bcc.n	80196d6 <RegionIN865NextChannel+0xbe>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801968c:	683b      	ldr	r3, [r7, #0]
 801968e:	2200      	movs	r2, #0
 8019690:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, IN865_MAX_NB_BANDS );
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	7a58      	ldrb	r0, [r3, #9]
 8019696:	68fb      	ldr	r3, [r7, #12]
 8019698:	7a99      	ldrb	r1, [r3, #10]
 801969a:	4a30      	ldr	r2, [pc, #192]	; (801975c <RegionIN865NextChannel+0x144>)
 801969c:	2301      	movs	r3, #1
 801969e:	f7fe fb4e 	bl	8017d3e <RegionCommonUpdateBandTimeOff>
 80196a2:	0003      	movs	r3, r0
 80196a4:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 80196a6:	68fb      	ldr	r3, [r7, #12]
 80196a8:	7a58      	ldrb	r0, [r3, #9]
 80196aa:	68fb      	ldr	r3, [r7, #12]
 80196ac:	7a1b      	ldrb	r3, [r3, #8]
 80196ae:	b25b      	sxtb	r3, r3
 80196b0:	b2d9      	uxtb	r1, r3
 80196b2:	232f      	movs	r3, #47	; 0x2f
 80196b4:	18fc      	adds	r4, r7, r3
 80196b6:	4d28      	ldr	r5, [pc, #160]	; (8019758 <RegionIN865NextChannel+0x140>)
 80196b8:	4a26      	ldr	r2, [pc, #152]	; (8019754 <RegionIN865NextChannel+0x13c>)
 80196ba:	2323      	movs	r3, #35	; 0x23
 80196bc:	18fb      	adds	r3, r7, r3
 80196be:	9302      	str	r3, [sp, #8]
 80196c0:	2310      	movs	r3, #16
 80196c2:	18fb      	adds	r3, r7, r3
 80196c4:	9301      	str	r3, [sp, #4]
 80196c6:	4b25      	ldr	r3, [pc, #148]	; (801975c <RegionIN865NextChannel+0x144>)
 80196c8:	9300      	str	r3, [sp, #0]
 80196ca:	002b      	movs	r3, r5
 80196cc:	f7fe ff2c 	bl	8018528 <CountNbOfEnabledChannels>
 80196d0:	0003      	movs	r3, r0
 80196d2:	7023      	strb	r3, [r4, #0]
 80196d4:	e00b      	b.n	80196ee <RegionIN865NextChannel+0xd6>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 80196d6:	2123      	movs	r1, #35	; 0x23
 80196d8:	187b      	adds	r3, r7, r1
 80196da:	781b      	ldrb	r3, [r3, #0]
 80196dc:	3301      	adds	r3, #1
 80196de:	b2da      	uxtb	r2, r3
 80196e0:	187b      	adds	r3, r7, r1
 80196e2:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	681a      	ldr	r2, [r3, #0]
 80196e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196ea:	1ad3      	subs	r3, r2, r3
 80196ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 80196ee:	232f      	movs	r3, #47	; 0x2f
 80196f0:	18fb      	adds	r3, r7, r3
 80196f2:	781b      	ldrb	r3, [r3, #0]
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d012      	beq.n	801971e <RegionIN865NextChannel+0x106>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80196f8:	232f      	movs	r3, #47	; 0x2f
 80196fa:	18fb      	adds	r3, r7, r3
 80196fc:	781b      	ldrb	r3, [r3, #0]
 80196fe:	3b01      	subs	r3, #1
 8019700:	0019      	movs	r1, r3
 8019702:	2000      	movs	r0, #0
 8019704:	f001 ff7e 	bl	801b604 <randr>
 8019708:	0002      	movs	r2, r0
 801970a:	2310      	movs	r3, #16
 801970c:	18fb      	adds	r3, r7, r3
 801970e:	5c9a      	ldrb	r2, [r3, r2]
 8019710:	68bb      	ldr	r3, [r7, #8]
 8019712:	701a      	strb	r2, [r3, #0]

        *time = 0;
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	2200      	movs	r2, #0
 8019718:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801971a:	2300      	movs	r3, #0
 801971c:	e016      	b.n	801974c <RegionIN865NextChannel+0x134>
    }
    else
    {
        if( delayTx > 0 )
 801971e:	2323      	movs	r3, #35	; 0x23
 8019720:	18fb      	adds	r3, r7, r3
 8019722:	781b      	ldrb	r3, [r3, #0]
 8019724:	2b00      	cmp	r3, #0
 8019726:	d004      	beq.n	8019732 <RegionIN865NextChannel+0x11a>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801972c:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801972e:	230b      	movs	r3, #11
 8019730:	e00c      	b.n	801974c <RegionIN865NextChannel+0x134>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019732:	4b09      	ldr	r3, [pc, #36]	; (8019758 <RegionIN865NextChannel+0x140>)
 8019734:	22d0      	movs	r2, #208	; 0xd0
 8019736:	5a9b      	ldrh	r3, [r3, r2]
 8019738:	2207      	movs	r2, #7
 801973a:	4313      	orrs	r3, r2
 801973c:	b299      	uxth	r1, r3
 801973e:	4b06      	ldr	r3, [pc, #24]	; (8019758 <RegionIN865NextChannel+0x140>)
 8019740:	22d0      	movs	r2, #208	; 0xd0
 8019742:	5299      	strh	r1, [r3, r2]
        *time = 0;
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	2200      	movs	r2, #0
 8019748:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801974a:	230c      	movs	r3, #12
    }
}
 801974c:	0018      	movs	r0, r3
 801974e:	46bd      	mov	sp, r7
 8019750:	b00c      	add	sp, #48	; 0x30
 8019752:	bdb0      	pop	{r4, r5, r7, pc}
 8019754:	20001194 	.word	0x20001194
 8019758:	200010c4 	.word	0x200010c4
 801975c:	20001184 	.word	0x20001184

08019760 <RegionIN865ChannelAdd>:

LoRaMacStatus_t RegionIN865ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019760:	b590      	push	{r4, r7, lr}
 8019762:	b085      	sub	sp, #20
 8019764:	af00      	add	r7, sp, #0
 8019766:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 8019768:	230f      	movs	r3, #15
 801976a:	18fb      	adds	r3, r7, r3
 801976c:	2200      	movs	r2, #0
 801976e:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8019770:	230e      	movs	r3, #14
 8019772:	18fb      	adds	r3, r7, r3
 8019774:	2200      	movs	r2, #0
 8019776:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8019778:	210d      	movs	r1, #13
 801977a:	187b      	adds	r3, r7, r1
 801977c:	687a      	ldr	r2, [r7, #4]
 801977e:	7912      	ldrb	r2, [r2, #4]
 8019780:	701a      	strb	r2, [r3, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 8019782:	187b      	adds	r3, r7, r1
 8019784:	781b      	ldrb	r3, [r3, #0]
 8019786:	2b02      	cmp	r3, #2
 8019788:	d801      	bhi.n	801978e <RegionIN865ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801978a:	2306      	movs	r3, #6
 801978c:	e09c      	b.n	80198c8 <RegionIN865ChannelAdd+0x168>
    }

    if( id >= IN865_MAX_NB_CHANNELS )
 801978e:	230d      	movs	r3, #13
 8019790:	18fb      	adds	r3, r7, r3
 8019792:	781b      	ldrb	r3, [r3, #0]
 8019794:	2b0f      	cmp	r3, #15
 8019796:	d901      	bls.n	801979c <RegionIN865ChannelAdd+0x3c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019798:	2303      	movs	r3, #3
 801979a:	e095      	b.n	80198c8 <RegionIN865ChannelAdd+0x168>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	7a1b      	ldrb	r3, [r3, #8]
 80197a2:	011b      	lsls	r3, r3, #4
 80197a4:	b25b      	sxtb	r3, r3
 80197a6:	111b      	asrs	r3, r3, #4
 80197a8:	b25b      	sxtb	r3, r3
 80197aa:	2207      	movs	r2, #7
 80197ac:	2100      	movs	r1, #0
 80197ae:	0018      	movs	r0, r3
 80197b0:	f7fe f9d2 	bl	8017b58 <RegionCommonValueInRange>
 80197b4:	1e03      	subs	r3, r0, #0
 80197b6:	d103      	bne.n	80197c0 <RegionIN865ChannelAdd+0x60>
    {
        drInvalid = true;
 80197b8:	230f      	movs	r3, #15
 80197ba:	18fb      	adds	r3, r7, r3
 80197bc:	2201      	movs	r2, #1
 80197be:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	7a1b      	ldrb	r3, [r3, #8]
 80197c6:	b25b      	sxtb	r3, r3
 80197c8:	111b      	asrs	r3, r3, #4
 80197ca:	b25b      	sxtb	r3, r3
 80197cc:	2207      	movs	r2, #7
 80197ce:	2100      	movs	r1, #0
 80197d0:	0018      	movs	r0, r3
 80197d2:	f7fe f9c1 	bl	8017b58 <RegionCommonValueInRange>
 80197d6:	1e03      	subs	r3, r0, #0
 80197d8:	d103      	bne.n	80197e2 <RegionIN865ChannelAdd+0x82>
    {
        drInvalid = true;
 80197da:	230f      	movs	r3, #15
 80197dc:	18fb      	adds	r3, r7, r3
 80197de:	2201      	movs	r2, #1
 80197e0:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	7a1b      	ldrb	r3, [r3, #8]
 80197e8:	011b      	lsls	r3, r3, #4
 80197ea:	b25b      	sxtb	r3, r3
 80197ec:	111b      	asrs	r3, r3, #4
 80197ee:	b25a      	sxtb	r2, r3
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	7a1b      	ldrb	r3, [r3, #8]
 80197f6:	b25b      	sxtb	r3, r3
 80197f8:	111b      	asrs	r3, r3, #4
 80197fa:	b25b      	sxtb	r3, r3
 80197fc:	429a      	cmp	r2, r3
 80197fe:	dd03      	ble.n	8019808 <RegionIN865ChannelAdd+0xa8>
    {
        drInvalid = true;
 8019800:	230f      	movs	r3, #15
 8019802:	18fb      	adds	r3, r7, r3
 8019804:	2201      	movs	r2, #1
 8019806:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8019808:	230e      	movs	r3, #14
 801980a:	18fb      	adds	r3, r7, r3
 801980c:	781b      	ldrb	r3, [r3, #0]
 801980e:	2201      	movs	r2, #1
 8019810:	4053      	eors	r3, r2
 8019812:	b2db      	uxtb	r3, r3
 8019814:	2b00      	cmp	r3, #0
 8019816:	d010      	beq.n	801983a <RegionIN865ChannelAdd+0xda>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	0018      	movs	r0, r3
 8019820:	f7fe fe5a 	bl	80184d8 <VerifyRfFreq>
 8019824:	0003      	movs	r3, r0
 8019826:	001a      	movs	r2, r3
 8019828:	2301      	movs	r3, #1
 801982a:	4053      	eors	r3, r2
 801982c:	b2db      	uxtb	r3, r3
 801982e:	2b00      	cmp	r3, #0
 8019830:	d003      	beq.n	801983a <RegionIN865ChannelAdd+0xda>
        {
            freqInvalid = true;
 8019832:	230e      	movs	r3, #14
 8019834:	18fb      	adds	r3, r7, r3
 8019836:	2201      	movs	r2, #1
 8019838:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801983a:	230f      	movs	r3, #15
 801983c:	18fb      	adds	r3, r7, r3
 801983e:	781b      	ldrb	r3, [r3, #0]
 8019840:	2b00      	cmp	r3, #0
 8019842:	d006      	beq.n	8019852 <RegionIN865ChannelAdd+0xf2>
 8019844:	230e      	movs	r3, #14
 8019846:	18fb      	adds	r3, r7, r3
 8019848:	781b      	ldrb	r3, [r3, #0]
 801984a:	2b00      	cmp	r3, #0
 801984c:	d001      	beq.n	8019852 <RegionIN865ChannelAdd+0xf2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801984e:	2306      	movs	r3, #6
 8019850:	e03a      	b.n	80198c8 <RegionIN865ChannelAdd+0x168>
    }
    if( drInvalid == true )
 8019852:	230f      	movs	r3, #15
 8019854:	18fb      	adds	r3, r7, r3
 8019856:	781b      	ldrb	r3, [r3, #0]
 8019858:	2b00      	cmp	r3, #0
 801985a:	d001      	beq.n	8019860 <RegionIN865ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801985c:	2305      	movs	r3, #5
 801985e:	e033      	b.n	80198c8 <RegionIN865ChannelAdd+0x168>
    }
    if( freqInvalid == true )
 8019860:	230e      	movs	r3, #14
 8019862:	18fb      	adds	r3, r7, r3
 8019864:	781b      	ldrb	r3, [r3, #0]
 8019866:	2b00      	cmp	r3, #0
 8019868:	d001      	beq.n	801986e <RegionIN865ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801986a:	2304      	movs	r3, #4
 801986c:	e02c      	b.n	80198c8 <RegionIN865ChannelAdd+0x168>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 801986e:	200d      	movs	r0, #13
 8019870:	0004      	movs	r4, r0
 8019872:	183b      	adds	r3, r7, r0
 8019874:	781a      	ldrb	r2, [r3, #0]
 8019876:	0013      	movs	r3, r2
 8019878:	005b      	lsls	r3, r3, #1
 801987a:	189b      	adds	r3, r3, r2
 801987c:	009b      	lsls	r3, r3, #2
 801987e:	4a14      	ldr	r2, [pc, #80]	; (80198d0 <RegionIN865ChannelAdd+0x170>)
 8019880:	1898      	adds	r0, r3, r2
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	220c      	movs	r2, #12
 8019888:	0019      	movs	r1, r3
 801988a:	f001 fed1 	bl	801b630 <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 801988e:	0020      	movs	r0, r4
 8019890:	183b      	adds	r3, r7, r0
 8019892:	781a      	ldrb	r2, [r3, #0]
 8019894:	490e      	ldr	r1, [pc, #56]	; (80198d0 <RegionIN865ChannelAdd+0x170>)
 8019896:	0013      	movs	r3, r2
 8019898:	005b      	lsls	r3, r3, #1
 801989a:	189b      	adds	r3, r3, r2
 801989c:	009b      	lsls	r3, r3, #2
 801989e:	18cb      	adds	r3, r1, r3
 80198a0:	3309      	adds	r3, #9
 80198a2:	2200      	movs	r2, #0
 80198a4:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 80198a6:	4b0a      	ldr	r3, [pc, #40]	; (80198d0 <RegionIN865ChannelAdd+0x170>)
 80198a8:	22d0      	movs	r2, #208	; 0xd0
 80198aa:	5a9b      	ldrh	r3, [r3, r2]
 80198ac:	b21a      	sxth	r2, r3
 80198ae:	183b      	adds	r3, r7, r0
 80198b0:	781b      	ldrb	r3, [r3, #0]
 80198b2:	2101      	movs	r1, #1
 80198b4:	4099      	lsls	r1, r3
 80198b6:	000b      	movs	r3, r1
 80198b8:	b21b      	sxth	r3, r3
 80198ba:	4313      	orrs	r3, r2
 80198bc:	b21b      	sxth	r3, r3
 80198be:	b299      	uxth	r1, r3
 80198c0:	4b03      	ldr	r3, [pc, #12]	; (80198d0 <RegionIN865ChannelAdd+0x170>)
 80198c2:	22d0      	movs	r2, #208	; 0xd0
 80198c4:	5299      	strh	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
 80198c6:	2300      	movs	r3, #0
}
 80198c8:	0018      	movs	r0, r3
 80198ca:	46bd      	mov	sp, r7
 80198cc:	b005      	add	sp, #20
 80198ce:	bd90      	pop	{r4, r7, pc}
 80198d0:	200010c4 	.word	0x200010c4

080198d4 <RegionIN865ChannelsRemove>:

bool RegionIN865ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80198d4:	b590      	push	{r4, r7, lr}
 80198d6:	b085      	sub	sp, #20
 80198d8:	af00      	add	r7, sp, #0
 80198da:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 80198dc:	210f      	movs	r1, #15
 80198de:	187b      	adds	r3, r7, r1
 80198e0:	687a      	ldr	r2, [r7, #4]
 80198e2:	7812      	ldrb	r2, [r2, #0]
 80198e4:	701a      	strb	r2, [r3, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 80198e6:	187b      	adds	r3, r7, r1
 80198e8:	781b      	ldrb	r3, [r3, #0]
 80198ea:	2b02      	cmp	r3, #2
 80198ec:	d801      	bhi.n	80198f2 <RegionIN865ChannelsRemove+0x1e>
    {
        return false;
 80198ee:	2300      	movs	r3, #0
 80198f0:	e015      	b.n	801991e <RegionIN865ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80198f2:	240f      	movs	r4, #15
 80198f4:	193b      	adds	r3, r7, r4
 80198f6:	781a      	ldrb	r2, [r3, #0]
 80198f8:	490b      	ldr	r1, [pc, #44]	; (8019928 <RegionIN865ChannelsRemove+0x54>)
 80198fa:	0013      	movs	r3, r2
 80198fc:	005b      	lsls	r3, r3, #1
 80198fe:	189b      	adds	r3, r3, r2
 8019900:	009b      	lsls	r3, r3, #2
 8019902:	18cb      	adds	r3, r1, r3
 8019904:	220c      	movs	r2, #12
 8019906:	2100      	movs	r1, #0
 8019908:	0018      	movs	r0, r3
 801990a:	f001 ff15 	bl	801b738 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, IN865_MAX_NB_CHANNELS );
 801990e:	193b      	adds	r3, r7, r4
 8019910:	7819      	ldrb	r1, [r3, #0]
 8019912:	4b06      	ldr	r3, [pc, #24]	; (801992c <RegionIN865ChannelsRemove+0x58>)
 8019914:	2210      	movs	r2, #16
 8019916:	0018      	movs	r0, r3
 8019918:	f7fe f944 	bl	8017ba4 <RegionCommonChanDisable>
 801991c:	0003      	movs	r3, r0
}
 801991e:	0018      	movs	r0, r3
 8019920:	46bd      	mov	sp, r7
 8019922:	b005      	add	sp, #20
 8019924:	bd90      	pop	{r4, r7, pc}
 8019926:	46c0      	nop			; (mov r8, r8)
 8019928:	200010c4 	.word	0x200010c4
 801992c:	20001194 	.word	0x20001194

08019930 <RegionIN865SetContinuousWave>:

void RegionIN865SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019932:	b085      	sub	sp, #20
 8019934:	af00      	add	r7, sp, #0
 8019936:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	2002      	movs	r0, #2
 801993c:	5618      	ldrsb	r0, [r3, r0]
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	781b      	ldrb	r3, [r3, #0]
 8019942:	0019      	movs	r1, r3
 8019944:	4a21      	ldr	r2, [pc, #132]	; (80199cc <RegionIN865SetContinuousWave+0x9c>)
 8019946:	000b      	movs	r3, r1
 8019948:	005b      	lsls	r3, r3, #1
 801994a:	185b      	adds	r3, r3, r1
 801994c:	009b      	lsls	r3, r3, #2
 801994e:	18d3      	adds	r3, r2, r3
 8019950:	3309      	adds	r3, #9
 8019952:	781b      	ldrb	r3, [r3, #0]
 8019954:	4a1d      	ldr	r2, [pc, #116]	; (80199cc <RegionIN865SetContinuousWave+0x9c>)
 8019956:	330c      	adds	r3, #12
 8019958:	011b      	lsls	r3, r3, #4
 801995a:	18d3      	adds	r3, r2, r3
 801995c:	3302      	adds	r3, #2
 801995e:	2100      	movs	r1, #0
 8019960:	5659      	ldrsb	r1, [r3, r1]
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	2201      	movs	r2, #1
 8019966:	569a      	ldrsb	r2, [r3, r2]
 8019968:	260f      	movs	r6, #15
 801996a:	19bc      	adds	r4, r7, r6
 801996c:	4b18      	ldr	r3, [pc, #96]	; (80199d0 <RegionIN865SetContinuousWave+0xa0>)
 801996e:	f7fe fd8b 	bl	8018488 <LimitTxPower>
 8019972:	0003      	movs	r3, r0
 8019974:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 8019976:	200e      	movs	r0, #14
 8019978:	183b      	adds	r3, r7, r0
 801997a:	2200      	movs	r2, #0
 801997c:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	781b      	ldrb	r3, [r3, #0]
 8019982:	0019      	movs	r1, r3
 8019984:	4a11      	ldr	r2, [pc, #68]	; (80199cc <RegionIN865SetContinuousWave+0x9c>)
 8019986:	000b      	movs	r3, r1
 8019988:	005b      	lsls	r3, r3, #1
 801998a:	185b      	adds	r3, r3, r1
 801998c:	009b      	lsls	r3, r3, #2
 801998e:	589b      	ldr	r3, [r3, r2]
 8019990:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	6859      	ldr	r1, [r3, #4]
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	689a      	ldr	r2, [r3, #8]
 801999a:	0005      	movs	r5, r0
 801999c:	183c      	adds	r4, r7, r0
 801999e:	19bb      	adds	r3, r7, r6
 80199a0:	781b      	ldrb	r3, [r3, #0]
 80199a2:	b25b      	sxtb	r3, r3
 80199a4:	0018      	movs	r0, r3
 80199a6:	f7fe fc59 	bl	801825c <RegionCommonComputeTxPower>
 80199aa:	0003      	movs	r3, r0
 80199ac:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80199ae:	4b09      	ldr	r3, [pc, #36]	; (80199d4 <RegionIN865SetContinuousWave+0xa4>)
 80199b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80199b2:	687a      	ldr	r2, [r7, #4]
 80199b4:	8994      	ldrh	r4, [r2, #12]
 80199b6:	0028      	movs	r0, r5
 80199b8:	183a      	adds	r2, r7, r0
 80199ba:	2100      	movs	r1, #0
 80199bc:	5651      	ldrsb	r1, [r2, r1]
 80199be:	68b8      	ldr	r0, [r7, #8]
 80199c0:	0022      	movs	r2, r4
 80199c2:	4798      	blx	r3
}
 80199c4:	46c0      	nop			; (mov r8, r8)
 80199c6:	46bd      	mov	sp, r7
 80199c8:	b005      	add	sp, #20
 80199ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199cc:	200010c4 	.word	0x200010c4
 80199d0:	20001194 	.word	0x20001194
 80199d4:	0801cb08 	.word	0x0801cb08

080199d8 <RegionIN865ApplyDrOffset>:

uint8_t RegionIN865ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80199d8:	b590      	push	{r4, r7, lr}
 80199da:	b083      	sub	sp, #12
 80199dc:	af00      	add	r7, sp, #0
 80199de:	0004      	movs	r4, r0
 80199e0:	0008      	movs	r0, r1
 80199e2:	0011      	movs	r1, r2
 80199e4:	1dfb      	adds	r3, r7, #7
 80199e6:	1c22      	adds	r2, r4, #0
 80199e8:	701a      	strb	r2, [r3, #0]
 80199ea:	1dbb      	adds	r3, r7, #6
 80199ec:	1c02      	adds	r2, r0, #0
 80199ee:	701a      	strb	r2, [r3, #0]
 80199f0:	1d7b      	adds	r3, r7, #5
 80199f2:	1c0a      	adds	r2, r1, #0
 80199f4:	701a      	strb	r2, [r3, #0]
    // Apply offset formula
    return MIN( DR_5, MAX( DR_0, dr - EffectiveRx1DrOffsetIN865[drOffset] ) );
 80199f6:	1dbb      	adds	r3, r7, #6
 80199f8:	781b      	ldrb	r3, [r3, #0]
 80199fa:	b25b      	sxtb	r3, r3
 80199fc:	1d7a      	adds	r2, r7, #5
 80199fe:	7812      	ldrb	r2, [r2, #0]
 8019a00:	b252      	sxtb	r2, r2
 8019a02:	490b      	ldr	r1, [pc, #44]	; (8019a30 <RegionIN865ApplyDrOffset+0x58>)
 8019a04:	568a      	ldrsb	r2, [r1, r2]
 8019a06:	1a9b      	subs	r3, r3, r2
 8019a08:	2b05      	cmp	r3, #5
 8019a0a:	dc0c      	bgt.n	8019a26 <RegionIN865ApplyDrOffset+0x4e>
 8019a0c:	1dbb      	adds	r3, r7, #6
 8019a0e:	781b      	ldrb	r3, [r3, #0]
 8019a10:	b25b      	sxtb	r3, r3
 8019a12:	1d7a      	adds	r2, r7, #5
 8019a14:	7812      	ldrb	r2, [r2, #0]
 8019a16:	b252      	sxtb	r2, r2
 8019a18:	4905      	ldr	r1, [pc, #20]	; (8019a30 <RegionIN865ApplyDrOffset+0x58>)
 8019a1a:	568a      	ldrsb	r2, [r1, r2]
 8019a1c:	1a9b      	subs	r3, r3, r2
 8019a1e:	d500      	bpl.n	8019a22 <RegionIN865ApplyDrOffset+0x4a>
 8019a20:	2300      	movs	r3, #0
 8019a22:	b2db      	uxtb	r3, r3
 8019a24:	e000      	b.n	8019a28 <RegionIN865ApplyDrOffset+0x50>
 8019a26:	2305      	movs	r3, #5
}
 8019a28:	0018      	movs	r0, r3
 8019a2a:	46bd      	mov	sp, r7
 8019a2c:	b003      	add	sp, #12
 8019a2e:	bd90      	pop	{r4, r7, pc}
 8019a30:	0801d298 	.word	0x0801d298

08019a34 <certif_running>:
static void OnCertifTxNextPacketTimerEvent( void* context );
static bool certif_tx( void );

/* Exported functions definition---------------------------------------------------------*/
bool certif_running(void)
{
 8019a34:	b580      	push	{r7, lr}
 8019a36:	af00      	add	r7, sp, #0
    return certifParam.Running;
 8019a38:	4b02      	ldr	r3, [pc, #8]	; (8019a44 <certif_running+0x10>)
 8019a3a:	781b      	ldrb	r3, [r3, #0]
}
 8019a3c:	0018      	movs	r0, r3
 8019a3e:	46bd      	mov	sp, r7
 8019a40:	bd80      	pop	{r7, pc}
 8019a42:	46c0      	nop			; (mov r8, r8)
 8019a44:	200011b0 	.word	0x200011b0

08019a48 <certif_DownLinkIncrement>:

void certif_DownLinkIncrement( void )
{
 8019a48:	b580      	push	{r7, lr}
 8019a4a:	af00      	add	r7, sp, #0
    certifParam.DownLinkCounter++;
 8019a4c:	4b05      	ldr	r3, [pc, #20]	; (8019a64 <certif_DownLinkIncrement+0x1c>)
 8019a4e:	22f6      	movs	r2, #246	; 0xf6
 8019a50:	5a9b      	ldrh	r3, [r3, r2]
 8019a52:	3301      	adds	r3, #1
 8019a54:	b299      	uxth	r1, r3
 8019a56:	4b03      	ldr	r3, [pc, #12]	; (8019a64 <certif_DownLinkIncrement+0x1c>)
 8019a58:	22f6      	movs	r2, #246	; 0xf6
 8019a5a:	5299      	strh	r1, [r3, r2]
}
 8019a5c:	46c0      	nop			; (mov r8, r8)
 8019a5e:	46bd      	mov	sp, r7
 8019a60:	bd80      	pop	{r7, pc}
 8019a62:	46c0      	nop			; (mov r8, r8)
 8019a64:	200011b0 	.word	0x200011b0

08019a68 <certif_linkCheck>:

void certif_linkCheck(MlmeConfirm_t *mlmeConfirm)
{
 8019a68:	b580      	push	{r7, lr}
 8019a6a:	b082      	sub	sp, #8
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	6078      	str	r0, [r7, #4]
  certifParam.LinkCheck = true;
 8019a70:	4b08      	ldr	r3, [pc, #32]	; (8019a94 <certif_linkCheck+0x2c>)
 8019a72:	22f8      	movs	r2, #248	; 0xf8
 8019a74:	2101      	movs	r1, #1
 8019a76:	5499      	strb	r1, [r3, r2]
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	7a19      	ldrb	r1, [r3, #8]
 8019a7c:	4b05      	ldr	r3, [pc, #20]	; (8019a94 <certif_linkCheck+0x2c>)
 8019a7e:	22f9      	movs	r2, #249	; 0xf9
 8019a80:	5499      	strb	r1, [r3, r2]
  certifParam.NbGateways = mlmeConfirm->NbGateways;
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	7a59      	ldrb	r1, [r3, #9]
 8019a86:	4b03      	ldr	r3, [pc, #12]	; (8019a94 <certif_linkCheck+0x2c>)
 8019a88:	22fa      	movs	r2, #250	; 0xfa
 8019a8a:	5499      	strb	r1, [r3, r2]
}
 8019a8c:	46c0      	nop			; (mov r8, r8)
 8019a8e:	46bd      	mov	sp, r7
 8019a90:	b002      	add	sp, #8
 8019a92:	bd80      	pop	{r7, pc}
 8019a94:	200011b0 	.word	0x200011b0

08019a98 <certif_tx>:

static bool certif_tx( void )
{
 8019a98:	b580      	push	{r7, lr}
 8019a9a:	b086      	sub	sp, #24
 8019a9c:	af00      	add	r7, sp, #0
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;
  
  if( certifParam.LinkCheck == true )
 8019a9e:	4b47      	ldr	r3, [pc, #284]	; (8019bbc <certif_tx+0x124>)
 8019aa0:	22f8      	movs	r2, #248	; 0xf8
 8019aa2:	5c9b      	ldrb	r3, [r3, r2]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d017      	beq.n	8019ad8 <certif_tx+0x40>
  {
    certifParam.LinkCheck = false;
 8019aa8:	4b44      	ldr	r3, [pc, #272]	; (8019bbc <certif_tx+0x124>)
 8019aaa:	22f8      	movs	r2, #248	; 0xf8
 8019aac:	2100      	movs	r1, #0
 8019aae:	5499      	strb	r1, [r3, r2]
    certifParam.DataBufferSize = 3;
 8019ab0:	4b42      	ldr	r3, [pc, #264]	; (8019bbc <certif_tx+0x124>)
 8019ab2:	2203      	movs	r2, #3
 8019ab4:	70da      	strb	r2, [r3, #3]
    certifParam.DataBuffer[0] = 5;
 8019ab6:	4b41      	ldr	r3, [pc, #260]	; (8019bbc <certif_tx+0x124>)
 8019ab8:	2205      	movs	r2, #5
 8019aba:	711a      	strb	r2, [r3, #4]
    certifParam.DataBuffer[1] = certifParam.DemodMargin;
 8019abc:	4b3f      	ldr	r3, [pc, #252]	; (8019bbc <certif_tx+0x124>)
 8019abe:	22f9      	movs	r2, #249	; 0xf9
 8019ac0:	5c9a      	ldrb	r2, [r3, r2]
 8019ac2:	4b3e      	ldr	r3, [pc, #248]	; (8019bbc <certif_tx+0x124>)
 8019ac4:	715a      	strb	r2, [r3, #5]
    certifParam.DataBuffer[2] = certifParam.NbGateways;
 8019ac6:	4b3d      	ldr	r3, [pc, #244]	; (8019bbc <certif_tx+0x124>)
 8019ac8:	22fa      	movs	r2, #250	; 0xfa
 8019aca:	5c9a      	ldrb	r2, [r3, r2]
 8019acc:	4b3b      	ldr	r3, [pc, #236]	; (8019bbc <certif_tx+0x124>)
 8019ace:	719a      	strb	r2, [r3, #6]
    certifParam.State = 1;
 8019ad0:	4b3a      	ldr	r3, [pc, #232]	; (8019bbc <certif_tx+0x124>)
 8019ad2:	2201      	movs	r2, #1
 8019ad4:	705a      	strb	r2, [r3, #1]
 8019ad6:	e01b      	b.n	8019b10 <certif_tx+0x78>
  }
  else
  {
    switch( certifParam.State )
 8019ad8:	4b38      	ldr	r3, [pc, #224]	; (8019bbc <certif_tx+0x124>)
 8019ada:	785b      	ldrb	r3, [r3, #1]
 8019adc:	2b01      	cmp	r3, #1
 8019ade:	d005      	beq.n	8019aec <certif_tx+0x54>
 8019ae0:	2b04      	cmp	r3, #4
 8019ae2:	d115      	bne.n	8019b10 <certif_tx+0x78>
    {
    case 4:
      certifParam.State = 1;
 8019ae4:	4b35      	ldr	r3, [pc, #212]	; (8019bbc <certif_tx+0x124>)
 8019ae6:	2201      	movs	r2, #1
 8019ae8:	705a      	strb	r2, [r3, #1]
      break;
 8019aea:	e011      	b.n	8019b10 <certif_tx+0x78>
    case 1:
      certifParam.DataBufferSize = 2;
 8019aec:	4b33      	ldr	r3, [pc, #204]	; (8019bbc <certif_tx+0x124>)
 8019aee:	2202      	movs	r2, #2
 8019af0:	70da      	strb	r2, [r3, #3]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 8019af2:	4b32      	ldr	r3, [pc, #200]	; (8019bbc <certif_tx+0x124>)
 8019af4:	22f6      	movs	r2, #246	; 0xf6
 8019af6:	5a9b      	ldrh	r3, [r3, r2]
 8019af8:	0a1b      	lsrs	r3, r3, #8
 8019afa:	b29b      	uxth	r3, r3
 8019afc:	b2da      	uxtb	r2, r3
 8019afe:	4b2f      	ldr	r3, [pc, #188]	; (8019bbc <certif_tx+0x124>)
 8019b00:	711a      	strb	r2, [r3, #4]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
 8019b02:	4b2e      	ldr	r3, [pc, #184]	; (8019bbc <certif_tx+0x124>)
 8019b04:	22f6      	movs	r2, #246	; 0xf6
 8019b06:	5a9b      	ldrh	r3, [r3, r2]
 8019b08:	b2da      	uxtb	r2, r3
 8019b0a:	4b2c      	ldr	r3, [pc, #176]	; (8019bbc <certif_tx+0x124>)
 8019b0c:	715a      	strb	r2, [r3, #5]
      break;
 8019b0e:	46c0      	nop			; (mov r8, r8)
    }
  }
    
  if( LoRaMacQueryTxPossible( certifParam.DataBufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8019b10:	4b2a      	ldr	r3, [pc, #168]	; (8019bbc <certif_tx+0x124>)
 8019b12:	78db      	ldrb	r3, [r3, #3]
 8019b14:	1d3a      	adds	r2, r7, #4
 8019b16:	0011      	movs	r1, r2
 8019b18:	0018      	movs	r0, r3
 8019b1a:	f7f9 ff93 	bl	8013a44 <LoRaMacQueryTxPossible>
 8019b1e:	1e03      	subs	r3, r0, #0
 8019b20:	d00d      	beq.n	8019b3e <certif_tx+0xa6>
  {
      // Send empty frame in order to flush MAC commands
      mcpsReq.Type = MCPS_UNCONFIRMED;
 8019b22:	2108      	movs	r1, #8
 8019b24:	187b      	adds	r3, r7, r1
 8019b26:	2200      	movs	r2, #0
 8019b28:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8019b2a:	187b      	adds	r3, r7, r1
 8019b2c:	2200      	movs	r2, #0
 8019b2e:	609a      	str	r2, [r3, #8]
      mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8019b30:	187b      	adds	r3, r7, r1
 8019b32:	2200      	movs	r2, #0
 8019b34:	819a      	strh	r2, [r3, #12]
      mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8019b36:	187b      	adds	r3, r7, r1
 8019b38:	2200      	movs	r2, #0
 8019b3a:	739a      	strb	r2, [r3, #14]
 8019b3c:	e02b      	b.n	8019b96 <certif_tx+0xfe>
  }
  else
  {
      if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 8019b3e:	4b20      	ldr	r3, [pc, #128]	; (8019bc0 <certif_tx+0x128>)
 8019b40:	781b      	ldrb	r3, [r3, #0]
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d112      	bne.n	8019b6c <certif_tx+0xd4>
      {
          mcpsReq.Type = MCPS_UNCONFIRMED;
 8019b46:	2108      	movs	r1, #8
 8019b48:	187b      	adds	r3, r7, r1
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
 8019b4e:	187b      	adds	r3, r7, r1
 8019b50:	22e0      	movs	r2, #224	; 0xe0
 8019b52:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
 8019b54:	4b19      	ldr	r3, [pc, #100]	; (8019bbc <certif_tx+0x124>)
 8019b56:	78db      	ldrb	r3, [r3, #3]
 8019b58:	b29a      	uxth	r2, r3
 8019b5a:	187b      	adds	r3, r7, r1
 8019b5c:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
 8019b5e:	187b      	adds	r3, r7, r1
 8019b60:	4a18      	ldr	r2, [pc, #96]	; (8019bc4 <certif_tx+0x12c>)
 8019b62:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8019b64:	187b      	adds	r3, r7, r1
 8019b66:	2200      	movs	r2, #0
 8019b68:	739a      	strb	r2, [r3, #14]
 8019b6a:	e014      	b.n	8019b96 <certif_tx+0xfe>
      }
      else
      {
          mcpsReq.Type = MCPS_CONFIRMED;
 8019b6c:	2108      	movs	r1, #8
 8019b6e:	187b      	adds	r3, r7, r1
 8019b70:	2201      	movs	r2, #1
 8019b72:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Confirmed.fPort = CERTIF_PORT;
 8019b74:	187b      	adds	r3, r7, r1
 8019b76:	22e0      	movs	r2, #224	; 0xe0
 8019b78:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Confirmed.fBufferSize = certifParam.DataBufferSize;
 8019b7a:	4b10      	ldr	r3, [pc, #64]	; (8019bbc <certif_tx+0x124>)
 8019b7c:	78db      	ldrb	r3, [r3, #3]
 8019b7e:	b29a      	uxth	r2, r3
 8019b80:	187b      	adds	r3, r7, r1
 8019b82:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Confirmed.fBuffer = &(certifParam.DataBuffer);
 8019b84:	187b      	adds	r3, r7, r1
 8019b86:	4a0f      	ldr	r2, [pc, #60]	; (8019bc4 <certif_tx+0x12c>)
 8019b88:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Confirmed.NbTrials = 8;
 8019b8a:	187b      	adds	r3, r7, r1
 8019b8c:	2208      	movs	r2, #8
 8019b8e:	73da      	strb	r2, [r3, #15]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 8019b90:	187b      	adds	r3, r7, r1
 8019b92:	2200      	movs	r2, #0
 8019b94:	739a      	strb	r2, [r3, #14]
      }
  }

  /*cerification test on-going*/
  TimerStart( &CertifTxNextPacketTimer );
 8019b96:	4b0c      	ldr	r3, [pc, #48]	; (8019bc8 <certif_tx+0x130>)
 8019b98:	0018      	movs	r0, r3
 8019b9a:	f001 f9f9 	bl	801af90 <TimerStart>
	
  if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 8019b9e:	2308      	movs	r3, #8
 8019ba0:	18fb      	adds	r3, r7, r3
 8019ba2:	0018      	movs	r0, r3
 8019ba4:	f7fa ffaa 	bl	8014afc <LoRaMacMcpsRequest>
 8019ba8:	1e03      	subs	r3, r0, #0
 8019baa:	d101      	bne.n	8019bb0 <certif_tx+0x118>
  {
      return false;
 8019bac:	2300      	movs	r3, #0
 8019bae:	e000      	b.n	8019bb2 <certif_tx+0x11a>
  }
    return true;
 8019bb0:	2301      	movs	r3, #1
}
 8019bb2:	0018      	movs	r0, r3
 8019bb4:	46bd      	mov	sp, r7
 8019bb6:	b006      	add	sp, #24
 8019bb8:	bd80      	pop	{r7, pc}
 8019bba:	46c0      	nop			; (mov r8, r8)
 8019bbc:	200011b0 	.word	0x200011b0
 8019bc0:	200012ac 	.word	0x200012ac
 8019bc4:	200011b4 	.word	0x200011b4
 8019bc8:	20001198 	.word	0x20001198

08019bcc <certif_rx>:

void certif_rx( McpsIndication_t *mcpsIndication, MlmeReqJoin_t* JoinParameters)
{
 8019bcc:	b590      	push	{r4, r7, lr}
 8019bce:	b0a1      	sub	sp, #132	; 0x84
 8019bd0:	af00      	add	r7, sp, #0
 8019bd2:	6078      	str	r0, [r7, #4]
 8019bd4:	6039      	str	r1, [r7, #0]
  if( certifParam.Running == false )
 8019bd6:	4bb2      	ldr	r3, [pc, #712]	; (8019ea0 <certif_rx+0x2d4>)
 8019bd8:	781b      	ldrb	r3, [r3, #0]
 8019bda:	2201      	movs	r2, #1
 8019bdc:	4053      	eors	r3, r2
 8019bde:	b2db      	uxtb	r3, r3
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d062      	beq.n	8019caa <certif_rx+0xde>
  {
      // Check compliance test enable command (i)
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	7b1b      	ldrb	r3, [r3, #12]
 8019be8:	2b04      	cmp	r3, #4
 8019bea:	d000      	beq.n	8019bee <certif_rx+0x22>
 8019bec:	e148      	b.n	8019e80 <certif_rx+0x2b4>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	689b      	ldr	r3, [r3, #8]
 8019bf2:	781b      	ldrb	r3, [r3, #0]
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8019bf4:	2b01      	cmp	r3, #1
 8019bf6:	d000      	beq.n	8019bfa <certif_rx+0x2e>
 8019bf8:	e142      	b.n	8019e80 <certif_rx+0x2b4>
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	689b      	ldr	r3, [r3, #8]
 8019bfe:	3301      	adds	r3, #1
 8019c00:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8019c02:	2b01      	cmp	r3, #1
 8019c04:	d000      	beq.n	8019c08 <certif_rx+0x3c>
 8019c06:	e13b      	b.n	8019e80 <certif_rx+0x2b4>
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	689b      	ldr	r3, [r3, #8]
 8019c0c:	3302      	adds	r3, #2
 8019c0e:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8019c10:	2b01      	cmp	r3, #1
 8019c12:	d000      	beq.n	8019c16 <certif_rx+0x4a>
 8019c14:	e134      	b.n	8019e80 <certif_rx+0x2b4>
          ( mcpsIndication->Buffer[3] == 0x01 ) )
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	689b      	ldr	r3, [r3, #8]
 8019c1a:	3303      	adds	r3, #3
 8019c1c:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8019c1e:	2b01      	cmp	r3, #1
 8019c20:	d000      	beq.n	8019c24 <certif_rx+0x58>
 8019c22:	e12d      	b.n	8019e80 <certif_rx+0x2b4>
      {
          MibRequestConfirm_t mibReq;
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8019c24:	4b9f      	ldr	r3, [pc, #636]	; (8019ea4 <certif_rx+0x2d8>)
 8019c26:	2200      	movs	r2, #0
 8019c28:	701a      	strb	r2, [r3, #0]
          certifParam.DataBufferSize = 2;
 8019c2a:	4b9d      	ldr	r3, [pc, #628]	; (8019ea0 <certif_rx+0x2d4>)
 8019c2c:	2202      	movs	r2, #2
 8019c2e:	70da      	strb	r2, [r3, #3]
          certifParam.DownLinkCounter = 0;
 8019c30:	4b9b      	ldr	r3, [pc, #620]	; (8019ea0 <certif_rx+0x2d4>)
 8019c32:	22f6      	movs	r2, #246	; 0xf6
 8019c34:	2100      	movs	r1, #0
 8019c36:	5299      	strh	r1, [r3, r2]
          certifParam.LinkCheck = false;
 8019c38:	4b99      	ldr	r3, [pc, #612]	; (8019ea0 <certif_rx+0x2d4>)
 8019c3a:	22f8      	movs	r2, #248	; 0xf8
 8019c3c:	2100      	movs	r1, #0
 8019c3e:	5499      	strb	r1, [r3, r2]
          certifParam.DemodMargin = 0;
 8019c40:	4b97      	ldr	r3, [pc, #604]	; (8019ea0 <certif_rx+0x2d4>)
 8019c42:	22f9      	movs	r2, #249	; 0xf9
 8019c44:	2100      	movs	r1, #0
 8019c46:	5499      	strb	r1, [r3, r2]
          certifParam.NbGateways = 0;
 8019c48:	4b95      	ldr	r3, [pc, #596]	; (8019ea0 <certif_rx+0x2d4>)
 8019c4a:	22fa      	movs	r2, #250	; 0xfa
 8019c4c:	2100      	movs	r1, #0
 8019c4e:	5499      	strb	r1, [r3, r2]
          certifParam.Running = true;
 8019c50:	4b93      	ldr	r3, [pc, #588]	; (8019ea0 <certif_rx+0x2d4>)
 8019c52:	2201      	movs	r2, #1
 8019c54:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8019c56:	4b92      	ldr	r3, [pc, #584]	; (8019ea0 <certif_rx+0x2d4>)
 8019c58:	2201      	movs	r2, #1
 8019c5a:	705a      	strb	r2, [r3, #1]

          mibReq.Type = MIB_ADR;
 8019c5c:	210c      	movs	r1, #12
 8019c5e:	187b      	adds	r3, r7, r1
 8019c60:	2204      	movs	r2, #4
 8019c62:	701a      	strb	r2, [r3, #0]

          LoRaMacMibGetRequestConfirm( &mibReq );
 8019c64:	000c      	movs	r4, r1
 8019c66:	187b      	adds	r3, r7, r1
 8019c68:	0018      	movs	r0, r3
 8019c6a:	f7f9 ff99 	bl	8013ba0 <LoRaMacMibGetRequestConfirm>
          AdrEnableInit=mibReq.Param.AdrEnable;
 8019c6e:	0021      	movs	r1, r4
 8019c70:	187b      	adds	r3, r7, r1
 8019c72:	791a      	ldrb	r2, [r3, #4]
 8019c74:	4b8c      	ldr	r3, [pc, #560]	; (8019ea8 <certif_rx+0x2dc>)
 8019c76:	701a      	strb	r2, [r3, #0]
          
          mibReq.Type = MIB_ADR;
 8019c78:	187b      	adds	r3, r7, r1
 8019c7a:	2204      	movs	r2, #4
 8019c7c:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = true;
 8019c7e:	187b      	adds	r3, r7, r1
 8019c80:	2201      	movs	r2, #1
 8019c82:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8019c84:	187b      	adds	r3, r7, r1
 8019c86:	0018      	movs	r0, r3
 8019c88:	f7fa f8e6 	bl	8013e58 <LoRaMacMibSetRequestConfirm>
#if defined( REGION_EU868 ) || defined( REGION_RU864 ) || defined( REGION_CN779 ) || defined( REGION_EU433 )
          LoRaMacTestSetDutyCycleOn( false );
#endif

         
        TimerInit( &CertifTxNextPacketTimer, OnCertifTxNextPacketTimerEvent );
 8019c8c:	4a87      	ldr	r2, [pc, #540]	; (8019eac <certif_rx+0x2e0>)
 8019c8e:	4b88      	ldr	r3, [pc, #544]	; (8019eb0 <certif_rx+0x2e4>)
 8019c90:	0011      	movs	r1, r2
 8019c92:	0018      	movs	r0, r3
 8019c94:	f001 f95d 	bl	801af52 <TimerInit>
        TimerSetValue( &CertifTxNextPacketTimer,  TEST_TX_DUTYCYCLE); 
 8019c98:	4a86      	ldr	r2, [pc, #536]	; (8019eb4 <certif_rx+0x2e8>)
 8019c9a:	4b85      	ldr	r3, [pc, #532]	; (8019eb0 <certif_rx+0x2e4>)
 8019c9c:	0011      	movs	r1, r2
 8019c9e:	0018      	movs	r0, r3
 8019ca0:	f001 fac8 	bl	801b234 <TimerSetValue>
        
        /*confirm test mode activation */
        certif_tx( );
 8019ca4:	f7ff fef8 	bl	8019a98 <certif_tx>
 8019ca8:	e0ea      	b.n	8019e80 <certif_rx+0x2b4>
      }
  }

  else
  {
      certifParam.State = mcpsIndication->Buffer[0];
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	689b      	ldr	r3, [r3, #8]
 8019cae:	781a      	ldrb	r2, [r3, #0]
 8019cb0:	4b7b      	ldr	r3, [pc, #492]	; (8019ea0 <certif_rx+0x2d4>)
 8019cb2:	705a      	strb	r2, [r3, #1]
      switch( certifParam.State )
 8019cb4:	4b7a      	ldr	r3, [pc, #488]	; (8019ea0 <certif_rx+0x2d4>)
 8019cb6:	785b      	ldrb	r3, [r3, #1]
 8019cb8:	2b08      	cmp	r3, #8
 8019cba:	d900      	bls.n	8019cbe <certif_rx+0xf2>
 8019cbc:	e0df      	b.n	8019e7e <certif_rx+0x2b2>
 8019cbe:	009a      	lsls	r2, r3, #2
 8019cc0:	4b7d      	ldr	r3, [pc, #500]	; (8019eb8 <certif_rx+0x2ec>)
 8019cc2:	18d3      	adds	r3, r2, r3
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	469f      	mov	pc, r3
      {
        case 0: // Check compliance test disable command (ii)
        {
          
          certifParam.DownLinkCounter = 0;
 8019cc8:	4b75      	ldr	r3, [pc, #468]	; (8019ea0 <certif_rx+0x2d4>)
 8019cca:	22f6      	movs	r2, #246	; 0xf6
 8019ccc:	2100      	movs	r1, #0
 8019cce:	5299      	strh	r1, [r3, r2]
          certifParam.Running = false;
 8019cd0:	4b73      	ldr	r3, [pc, #460]	; (8019ea0 <certif_rx+0x2d4>)
 8019cd2:	2200      	movs	r2, #0
 8019cd4:	701a      	strb	r2, [r3, #0]
          
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_ADR;
 8019cd6:	210c      	movs	r1, #12
 8019cd8:	187b      	adds	r3, r7, r1
 8019cda:	2204      	movs	r2, #4
 8019cdc:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = AdrEnableInit;
 8019cde:	4b72      	ldr	r3, [pc, #456]	; (8019ea8 <certif_rx+0x2dc>)
 8019ce0:	781a      	ldrb	r2, [r3, #0]
 8019ce2:	187b      	adds	r3, r7, r1
 8019ce4:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8019ce6:	187b      	adds	r3, r7, r1
 8019ce8:	0018      	movs	r0, r3
 8019cea:	f7fa f8b5 	bl	8013e58 <LoRaMacMibSetRequestConfirm>
#if defined( REGION_EU868 ) || defined( REGION_RU864 ) || defined( REGION_CN779 ) || defined( REGION_EU433 )
          LoRaMacTestSetDutyCycleOn( true );
#endif
          
          break;
 8019cee:	46c0      	nop			; (mov r8, r8)
 8019cf0:	e0c6      	b.n	8019e80 <certif_rx+0x2b4>
        }
        case 1: // (iii, iv)
          certifParam.DataBufferSize = 2;
 8019cf2:	4b6b      	ldr	r3, [pc, #428]	; (8019ea0 <certif_rx+0x2d4>)
 8019cf4:	2202      	movs	r2, #2
 8019cf6:	70da      	strb	r2, [r3, #3]
          break;
 8019cf8:	e0c2      	b.n	8019e80 <certif_rx+0x2b4>
        case 2: // Enable confirmed messages (v)
          IsTxConfirmed = LORAWAN_CONFIRMED_MSG;
 8019cfa:	4b6a      	ldr	r3, [pc, #424]	; (8019ea4 <certif_rx+0x2d8>)
 8019cfc:	2201      	movs	r2, #1
 8019cfe:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8019d00:	4b67      	ldr	r3, [pc, #412]	; (8019ea0 <certif_rx+0x2d4>)
 8019d02:	2201      	movs	r2, #1
 8019d04:	705a      	strb	r2, [r3, #1]
          break;
 8019d06:	e0bb      	b.n	8019e80 <certif_rx+0x2b4>
        case 3:  // Disable confirmed messages (vi)
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8019d08:	4b66      	ldr	r3, [pc, #408]	; (8019ea4 <certif_rx+0x2d8>)
 8019d0a:	2200      	movs	r2, #0
 8019d0c:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8019d0e:	4b64      	ldr	r3, [pc, #400]	; (8019ea0 <certif_rx+0x2d4>)
 8019d10:	2201      	movs	r2, #1
 8019d12:	705a      	strb	r2, [r3, #1]
          break;
 8019d14:	e0b4      	b.n	8019e80 <certif_rx+0x2b4>
        case 4: // (vii)
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	7b1a      	ldrb	r2, [r3, #12]
 8019d1a:	4b61      	ldr	r3, [pc, #388]	; (8019ea0 <certif_rx+0x2d4>)
 8019d1c:	70da      	strb	r2, [r3, #3]

          certifParam.DataBuffer[0] = 4;
 8019d1e:	4b60      	ldr	r3, [pc, #384]	; (8019ea0 <certif_rx+0x2d4>)
 8019d20:	2204      	movs	r2, #4
 8019d22:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8019d24:	237f      	movs	r3, #127	; 0x7f
 8019d26:	18fb      	adds	r3, r7, r3
 8019d28:	2201      	movs	r2, #1
 8019d2a:	701a      	strb	r2, [r3, #0]
 8019d2c:	e013      	b.n	8019d56 <certif_rx+0x18a>
          {
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	689a      	ldr	r2, [r3, #8]
 8019d32:	207f      	movs	r0, #127	; 0x7f
 8019d34:	183b      	adds	r3, r7, r0
 8019d36:	781b      	ldrb	r3, [r3, #0]
 8019d38:	18d3      	adds	r3, r2, r3
 8019d3a:	781a      	ldrb	r2, [r3, #0]
 8019d3c:	183b      	adds	r3, r7, r0
 8019d3e:	781b      	ldrb	r3, [r3, #0]
 8019d40:	3201      	adds	r2, #1
 8019d42:	b2d1      	uxtb	r1, r2
 8019d44:	4a56      	ldr	r2, [pc, #344]	; (8019ea0 <certif_rx+0x2d4>)
 8019d46:	18d3      	adds	r3, r2, r3
 8019d48:	1c0a      	adds	r2, r1, #0
 8019d4a:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8019d4c:	183b      	adds	r3, r7, r0
 8019d4e:	781a      	ldrb	r2, [r3, #0]
 8019d50:	183b      	adds	r3, r7, r0
 8019d52:	3201      	adds	r2, #1
 8019d54:	701a      	strb	r2, [r3, #0]
 8019d56:	4b52      	ldr	r3, [pc, #328]	; (8019ea0 <certif_rx+0x2d4>)
 8019d58:	78db      	ldrb	r3, [r3, #3]
 8019d5a:	227f      	movs	r2, #127	; 0x7f
 8019d5c:	18ba      	adds	r2, r7, r2
 8019d5e:	7812      	ldrb	r2, [r2, #0]
 8019d60:	429a      	cmp	r2, r3
 8019d62:	d3e4      	bcc.n	8019d2e <certif_rx+0x162>
          }
          break;
 8019d64:	e08c      	b.n	8019e80 <certif_rx+0x2b4>
        case 5: // (viii)
        {
          MlmeReq_t mlmeReq;
          mlmeReq.Type = MLME_LINK_CHECK;
 8019d66:	216c      	movs	r1, #108	; 0x6c
 8019d68:	187b      	adds	r3, r7, r1
 8019d6a:	2203      	movs	r2, #3
 8019d6c:	701a      	strb	r2, [r3, #0]
          LoRaMacMlmeRequest( &mlmeReq );
 8019d6e:	187b      	adds	r3, r7, r1
 8019d70:	0018      	movs	r0, r3
 8019d72:	f7fa fd6b 	bl	801484c <LoRaMacMlmeRequest>
          break;
 8019d76:	46c0      	nop			; (mov r8, r8)
 8019d78:	e082      	b.n	8019e80 <certif_rx+0x2b4>
        {
            MlmeReq_t mlmeReq;

            // Disable TestMode and revert back to normal operation

            certifParam.DownLinkCounter = 0;
 8019d7a:	4b49      	ldr	r3, [pc, #292]	; (8019ea0 <certif_rx+0x2d4>)
 8019d7c:	22f6      	movs	r2, #246	; 0xf6
 8019d7e:	2100      	movs	r1, #0
 8019d80:	5299      	strh	r1, [r3, r2]
            certifParam.Running = false;
 8019d82:	4b47      	ldr	r3, [pc, #284]	; (8019ea0 <certif_rx+0x2d4>)
 8019d84:	2200      	movs	r2, #0
 8019d86:	701a      	strb	r2, [r3, #0]

            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_ADR;
 8019d88:	210c      	movs	r1, #12
 8019d8a:	187b      	adds	r3, r7, r1
 8019d8c:	2204      	movs	r2, #4
 8019d8e:	701a      	strb	r2, [r3, #0]
            mibReq.Param.AdrEnable = AdrEnableInit;
 8019d90:	4b45      	ldr	r3, [pc, #276]	; (8019ea8 <certif_rx+0x2dc>)
 8019d92:	781a      	ldrb	r2, [r3, #0]
 8019d94:	187b      	adds	r3, r7, r1
 8019d96:	711a      	strb	r2, [r3, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8019d98:	187b      	adds	r3, r7, r1
 8019d9a:	0018      	movs	r0, r3
 8019d9c:	f7fa f85c 	bl	8013e58 <LoRaMacMibSetRequestConfirm>

            mlmeReq.Type = MLME_JOIN;
 8019da0:	215c      	movs	r1, #92	; 0x5c
 8019da2:	187b      	adds	r3, r7, r1
 8019da4:	2200      	movs	r2, #0
 8019da6:	701a      	strb	r2, [r3, #0]
            mlmeReq.Req.Join = *JoinParameters;
 8019da8:	187b      	adds	r3, r7, r1
 8019daa:	683a      	ldr	r2, [r7, #0]
 8019dac:	7812      	ldrb	r2, [r2, #0]
 8019dae:	711a      	strb	r2, [r3, #4]

            LoRaMacMlmeRequest( &mlmeReq );
 8019db0:	187b      	adds	r3, r7, r1
 8019db2:	0018      	movs	r0, r3
 8019db4:	f7fa fd4a 	bl	801484c <LoRaMacMlmeRequest>
            break;
 8019db8:	46c0      	nop			; (mov r8, r8)
 8019dba:	e061      	b.n	8019e80 <certif_rx+0x2b4>
        }

        case 7: // (x)
        {
          if( mcpsIndication->BufferSize == 3 )
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	7b1b      	ldrb	r3, [r3, #12]
 8019dc0:	2b03      	cmp	r3, #3
 8019dc2:	d118      	bne.n	8019df6 <certif_rx+0x22a>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW;
 8019dc4:	214c      	movs	r1, #76	; 0x4c
 8019dc6:	187b      	adds	r3, r7, r1
 8019dc8:	2204      	movs	r2, #4
 8019dca:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	689b      	ldr	r3, [r3, #8]
 8019dd0:	3301      	adds	r3, #1
 8019dd2:	781b      	ldrb	r3, [r3, #0]
 8019dd4:	021b      	lsls	r3, r3, #8
 8019dd6:	b21a      	sxth	r2, r3
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	689b      	ldr	r3, [r3, #8]
 8019ddc:	3302      	adds	r3, #2
 8019dde:	781b      	ldrb	r3, [r3, #0]
 8019de0:	b21b      	sxth	r3, r3
 8019de2:	4313      	orrs	r3, r2
 8019de4:	b21b      	sxth	r3, r3
 8019de6:	b29a      	uxth	r2, r3
 8019de8:	187b      	adds	r3, r7, r1
 8019dea:	809a      	strh	r2, [r3, #4]
              LoRaMacMlmeRequest( &mlmeReq );
 8019dec:	187b      	adds	r3, r7, r1
 8019dee:	0018      	movs	r0, r3
 8019df0:	f7fa fd2c 	bl	801484c <LoRaMacMlmeRequest>
 8019df4:	e035      	b.n	8019e62 <certif_rx+0x296>
          }
          else if( mcpsIndication->BufferSize == 7 )
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	7b1b      	ldrb	r3, [r3, #12]
 8019dfa:	2b07      	cmp	r3, #7
 8019dfc:	d131      	bne.n	8019e62 <certif_rx+0x296>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW_1;
 8019dfe:	213c      	movs	r1, #60	; 0x3c
 8019e00:	187b      	adds	r3, r7, r1
 8019e02:	2205      	movs	r2, #5
 8019e04:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	689b      	ldr	r3, [r3, #8]
 8019e0a:	3301      	adds	r3, #1
 8019e0c:	781b      	ldrb	r3, [r3, #0]
 8019e0e:	021b      	lsls	r3, r3, #8
 8019e10:	b21a      	sxth	r2, r3
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	689b      	ldr	r3, [r3, #8]
 8019e16:	3302      	adds	r3, #2
 8019e18:	781b      	ldrb	r3, [r3, #0]
 8019e1a:	b21b      	sxth	r3, r3
 8019e1c:	4313      	orrs	r3, r2
 8019e1e:	b21b      	sxth	r3, r3
 8019e20:	b29a      	uxth	r2, r3
 8019e22:	187b      	adds	r3, r7, r1
 8019e24:	809a      	strh	r2, [r3, #4]
              mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	689b      	ldr	r3, [r3, #8]
 8019e2a:	3303      	adds	r3, #3
 8019e2c:	781b      	ldrb	r3, [r3, #0]
 8019e2e:	041a      	lsls	r2, r3, #16
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	689b      	ldr	r3, [r3, #8]
 8019e34:	3304      	adds	r3, #4
 8019e36:	781b      	ldrb	r3, [r3, #0]
 8019e38:	021b      	lsls	r3, r3, #8
 8019e3a:	431a      	orrs	r2, r3
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	689b      	ldr	r3, [r3, #8]
 8019e40:	3305      	adds	r3, #5
 8019e42:	781b      	ldrb	r3, [r3, #0]
 8019e44:	4313      	orrs	r3, r2
 8019e46:	001a      	movs	r2, r3
 8019e48:	2364      	movs	r3, #100	; 0x64
 8019e4a:	435a      	muls	r2, r3
 8019e4c:	187b      	adds	r3, r7, r1
 8019e4e:	609a      	str	r2, [r3, #8]
              mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	689b      	ldr	r3, [r3, #8]
 8019e54:	799a      	ldrb	r2, [r3, #6]
 8019e56:	187b      	adds	r3, r7, r1
 8019e58:	731a      	strb	r2, [r3, #12]
              LoRaMacMlmeRequest( &mlmeReq );
 8019e5a:	187b      	adds	r3, r7, r1
 8019e5c:	0018      	movs	r0, r3
 8019e5e:	f7fa fcf5 	bl	801484c <LoRaMacMlmeRequest>
          }
          certifParam.State = 1;
 8019e62:	4b0f      	ldr	r3, [pc, #60]	; (8019ea0 <certif_rx+0x2d4>)
 8019e64:	2201      	movs	r2, #1
 8019e66:	705a      	strb	r2, [r3, #1]
          break;
 8019e68:	e00a      	b.n	8019e80 <certif_rx+0x2b4>
		
        case 8: // Send DeviceTimeReq
        {
          MlmeReq_t mlmeReq;

          mlmeReq.Type = MLME_DEVICE_TIME;
 8019e6a:	212c      	movs	r1, #44	; 0x2c
 8019e6c:	187b      	adds	r3, r7, r1
 8019e6e:	2209      	movs	r2, #9
 8019e70:	701a      	strb	r2, [r3, #0]

          LoRaMacMlmeRequest( &mlmeReq );
 8019e72:	187b      	adds	r3, r7, r1
 8019e74:	0018      	movs	r0, r3
 8019e76:	f7fa fce9 	bl	801484c <LoRaMacMlmeRequest>
          break;
 8019e7a:	46c0      	nop			; (mov r8, r8)
 8019e7c:	e000      	b.n	8019e80 <certif_rx+0x2b4>
          LoRaMacMlmeRequest( &mlmeReq );
          break;
        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:                  
          break;
 8019e7e:	46c0      	nop			; (mov r8, r8)
        }
    }
  
    if ( certifParam.Running == false )
 8019e80:	4b07      	ldr	r3, [pc, #28]	; (8019ea0 <certif_rx+0x2d4>)
 8019e82:	781b      	ldrb	r3, [r3, #0]
 8019e84:	2201      	movs	r2, #1
 8019e86:	4053      	eors	r3, r2
 8019e88:	b2db      	uxtb	r3, r3
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d003      	beq.n	8019e96 <certif_rx+0x2ca>
    {
      /*cerification test stops*/
      TimerStop( &CertifTxNextPacketTimer );
 8019e8e:	4b08      	ldr	r3, [pc, #32]	; (8019eb0 <certif_rx+0x2e4>)
 8019e90:	0018      	movs	r0, r3
 8019e92:	f001 f955 	bl	801b140 <TimerStop>
    }
}
 8019e96:	46c0      	nop			; (mov r8, r8)
 8019e98:	46bd      	mov	sp, r7
 8019e9a:	b021      	add	sp, #132	; 0x84
 8019e9c:	bd90      	pop	{r4, r7, pc}
 8019e9e:	46c0      	nop			; (mov r8, r8)
 8019ea0:	200011b0 	.word	0x200011b0
 8019ea4:	200012ac 	.word	0x200012ac
 8019ea8:	200012ad 	.word	0x200012ad
 8019eac:	08019ebd 	.word	0x08019ebd
 8019eb0:	20001198 	.word	0x20001198
 8019eb4:	00001388 	.word	0x00001388
 8019eb8:	0801d3b8 	.word	0x0801d3b8

08019ebc <OnCertifTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnCertifTxNextPacketTimerEvent( void* context )
{
 8019ebc:	b580      	push	{r7, lr}
 8019ebe:	b082      	sub	sp, #8
 8019ec0:	af00      	add	r7, sp, #0
 8019ec2:	6078      	str	r0, [r7, #4]
    certif_tx( );
 8019ec4:	f7ff fde8 	bl	8019a98 <certif_tx>

}
 8019ec8:	46c0      	nop			; (mov r8, r8)
 8019eca:	46bd      	mov	sp, r7
 8019ecc:	b002      	add	sp, #8
 8019ece:	bd80      	pop	{r7, pc}

08019ed0 <McpsConfirm>:
 *
 * \param   [IN] McpsConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8019ed0:	b580      	push	{r7, lr}
 8019ed2:	b084      	sub	sp, #16
 8019ed4:	af00      	add	r7, sp, #0
 8019ed6:	6078      	str	r0, [r7, #4]
    TVL2( PRINTNOW(); PRINTF("APP> McpsConfirm STATUS: %s\r\n", EventInfoStatusStrings[mcpsConfirm->Status] ); )
  
    if( mcpsConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	785b      	ldrb	r3, [r3, #1]
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d108      	bne.n	8019ef2 <McpsConfirm+0x22>
    {
        switch( mcpsConfirm->McpsRequest )
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	781b      	ldrb	r3, [r3, #0]
 8019ee4:	2b01      	cmp	r3, #1
 8019ee6:	d006      	beq.n	8019ef6 <McpsConfirm+0x26>
 8019ee8:	2b03      	cmp	r3, #3
 8019eea:	d006      	beq.n	8019efa <McpsConfirm+0x2a>
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d006      	beq.n	8019efe <McpsConfirm+0x2e>
            case MCPS_PROPRIETARY:
            {
                break;
            }
            default:
                break;
 8019ef0:	e006      	b.n	8019f00 <McpsConfirm+0x30>
        }
    }
 8019ef2:	46c0      	nop			; (mov r8, r8)
 8019ef4:	e004      	b.n	8019f00 <McpsConfirm+0x30>
                break;
 8019ef6:	46c0      	nop			; (mov r8, r8)
 8019ef8:	e002      	b.n	8019f00 <McpsConfirm+0x30>
                break;
 8019efa:	46c0      	nop			; (mov r8, r8)
 8019efc:	e000      	b.n	8019f00 <McpsConfirm+0x30>
                break;
 8019efe:	46c0      	nop			; (mov r8, r8)
    
    /*implicitely desactivated when VERBOSE_LEVEL < 2*/
    TraceUpLinkFrame(mcpsConfirm);
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	0018      	movs	r0, r3
 8019f04:	f000 fbc0 	bl	801a688 <TraceUpLinkFrame>
}
 8019f08:	46c0      	nop			; (mov r8, r8)
 8019f0a:	46bd      	mov	sp, r7
 8019f0c:	b004      	add	sp, #16
 8019f0e:	bd80      	pop	{r7, pc}

08019f10 <McpsIndication>:
 *
 * \param   [IN] mcpsIndication - Pointer to the indication structure,
 *               containing indication attributes.
 */
static void McpsIndication( McpsIndication_t *mcpsIndication )
{
 8019f10:	b580      	push	{r7, lr}
 8019f12:	b086      	sub	sp, #24
 8019f14:	af00      	add	r7, sp, #0
 8019f16:	6078      	str	r0, [r7, #4]
    TVL2( PRINTNOW(); PRINTF("APP> McpsInd STATUS: %s\r\n", EventInfoStatusStrings[mcpsIndication->Status] );)
    
    lora_AppData_t AppData;
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	785b      	ldrb	r3, [r3, #1]
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d14a      	bne.n	8019fb6 <McpsIndication+0xa6>
    {
        return;
    }

    switch( mcpsIndication->McpsIndication )
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	781b      	ldrb	r3, [r3, #0]
 8019f24:	2b01      	cmp	r3, #1
 8019f26:	d008      	beq.n	8019f3a <McpsIndication+0x2a>
 8019f28:	dc02      	bgt.n	8019f30 <McpsIndication+0x20>
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d007      	beq.n	8019f3e <McpsIndication+0x2e>
        case MCPS_MULTICAST:
        {
            break;
        }
        default:
            break;
 8019f2e:	e00b      	b.n	8019f48 <McpsIndication+0x38>
    switch( mcpsIndication->McpsIndication )
 8019f30:	2b02      	cmp	r3, #2
 8019f32:	d006      	beq.n	8019f42 <McpsIndication+0x32>
 8019f34:	2b03      	cmp	r3, #3
 8019f36:	d006      	beq.n	8019f46 <McpsIndication+0x36>
            break;
 8019f38:	e006      	b.n	8019f48 <McpsIndication+0x38>
            break;
 8019f3a:	46c0      	nop			; (mov r8, r8)
 8019f3c:	e004      	b.n	8019f48 <McpsIndication+0x38>
            break;
 8019f3e:	46c0      	nop			; (mov r8, r8)
 8019f40:	e002      	b.n	8019f48 <McpsIndication+0x38>
            break;
 8019f42:	46c0      	nop			; (mov r8, r8)
 8019f44:	e000      	b.n	8019f48 <McpsIndication+0x38>
            break;
 8019f46:	46c0      	nop			; (mov r8, r8)

    // Check Multicast
    // Check Port
    // Check Datarate
    // Check FramePending
    if( mcpsIndication->FramePending == true )
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	795b      	ldrb	r3, [r3, #5]
 8019f4c:	2b01      	cmp	r3, #1
 8019f4e:	d103      	bne.n	8019f58 <McpsIndication+0x48>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        LoRaMainCallbacks->LORA_TxNeeded( );
 8019f50:	4b1b      	ldr	r3, [pc, #108]	; (8019fc0 <McpsIndication+0xb0>)
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	69db      	ldr	r3, [r3, #28]
 8019f56:	4798      	blx	r3
    // Check Buffer
    // Check BufferSize
    // Check Rssi
    // Check Snr
    // Check RxSlot
    if (certif_running() == true )
 8019f58:	f7ff fd6c 	bl	8019a34 <certif_running>
 8019f5c:	1e03      	subs	r3, r0, #0
 8019f5e:	d001      	beq.n	8019f64 <McpsIndication+0x54>
    {
      certif_DownLinkIncrement( );
 8019f60:	f7ff fd72 	bl	8019a48 <certif_DownLinkIncrement>
    }

    if( mcpsIndication->RxData == true )
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	7b5b      	ldrb	r3, [r3, #13]
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d01e      	beq.n	8019faa <McpsIndication+0x9a>
    {
      switch( mcpsIndication->Port )
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	78db      	ldrb	r3, [r3, #3]
 8019f70:	2be0      	cmp	r3, #224	; 0xe0
 8019f72:	d106      	bne.n	8019f82 <McpsIndication+0x72>
      {
        case CERTIF_PORT:
          certif_rx( mcpsIndication, &JoinParameters );
 8019f74:	4a13      	ldr	r2, [pc, #76]	; (8019fc4 <McpsIndication+0xb4>)
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	0011      	movs	r1, r2
 8019f7a:	0018      	movs	r0, r3
 8019f7c:	f7ff fe26 	bl	8019bcc <certif_rx>
          break;
 8019f80:	e014      	b.n	8019fac <McpsIndication+0x9c>
        default:
          
          AppData.Port = mcpsIndication->Port;
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	78da      	ldrb	r2, [r3, #3]
 8019f86:	2110      	movs	r1, #16
 8019f88:	187b      	adds	r3, r7, r1
 8019f8a:	715a      	strb	r2, [r3, #5]
          AppData.BuffSize = mcpsIndication->BufferSize;
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	7b1a      	ldrb	r2, [r3, #12]
 8019f90:	187b      	adds	r3, r7, r1
 8019f92:	711a      	strb	r2, [r3, #4]
          AppData.Buff = mcpsIndication->Buffer;
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	689a      	ldr	r2, [r3, #8]
 8019f98:	187b      	adds	r3, r7, r1
 8019f9a:	601a      	str	r2, [r3, #0]
        
          LoRaMainCallbacks->LORA_RxData( &AppData );
 8019f9c:	4b08      	ldr	r3, [pc, #32]	; (8019fc0 <McpsIndication+0xb0>)
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	691b      	ldr	r3, [r3, #16]
 8019fa2:	187a      	adds	r2, r7, r1
 8019fa4:	0010      	movs	r0, r2
 8019fa6:	4798      	blx	r3
          break;
 8019fa8:	e000      	b.n	8019fac <McpsIndication+0x9c>
      }
    }
 8019faa:	46c0      	nop			; (mov r8, r8)
    
    /*implicitely desactivated when VERBOSE_LEVEL < 2*/
    TraceDownLinkFrame(mcpsIndication);
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	0018      	movs	r0, r3
 8019fb0:	f000 fb94 	bl	801a6dc <TraceDownLinkFrame>
 8019fb4:	e000      	b.n	8019fb8 <McpsIndication+0xa8>
        return;
 8019fb6:	46c0      	nop			; (mov r8, r8)
}
 8019fb8:	46bd      	mov	sp, r7
 8019fba:	b006      	add	sp, #24
 8019fbc:	bd80      	pop	{r7, pc}
 8019fbe:	46c0      	nop			; (mov r8, r8)
 8019fc0:	200012f8 	.word	0x200012f8
 8019fc4:	200012b0 	.word	0x200012b0

08019fc8 <MlmeConfirm>:
 *
 * \param   [IN] MlmeConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8019fc8:	b580      	push	{r7, lr}
 8019fca:	b084      	sub	sp, #16
 8019fcc:	af00      	add	r7, sp, #0
 8019fce:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MlmeConfirm STATUS: %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );)
    
    switch( mlmeConfirm->MlmeRequest )
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	781b      	ldrb	r3, [r3, #0]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d002      	beq.n	8019fde <MlmeConfirm+0x16>
 8019fd8:	2b03      	cmp	r3, #3
 8019fda:	d00c      	beq.n	8019ff6 <MlmeConfirm+0x2e>
            }  
        }              
#endif /* USE_DEVICE_TIMING */
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 8019fdc:	e018      	b.n	801a010 <MlmeConfirm+0x48>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	785b      	ldrb	r3, [r3, #1]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d104      	bne.n	8019ff0 <MlmeConfirm+0x28>
              LoRaMainCallbacks->LORA_HasJoined();
 8019fe6:	4b0c      	ldr	r3, [pc, #48]	; (801a018 <MlmeConfirm+0x50>)
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	695b      	ldr	r3, [r3, #20]
 8019fec:	4798      	blx	r3
            break;
 8019fee:	e00f      	b.n	801a010 <MlmeConfirm+0x48>
                LORA_Join();
 8019ff0:	f000 f9d0 	bl	801a394 <LORA_Join>
            break;
 8019ff4:	e00c      	b.n	801a010 <MlmeConfirm+0x48>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	785b      	ldrb	r3, [r3, #1]
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	d107      	bne.n	801a00e <MlmeConfirm+0x46>
                if (certif_running() == true )
 8019ffe:	f7ff fd19 	bl	8019a34 <certif_running>
 801a002:	1e03      	subs	r3, r0, #0
 801a004:	d003      	beq.n	801a00e <MlmeConfirm+0x46>
                     certif_linkCheck( mlmeConfirm);
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	0018      	movs	r0, r3
 801a00a:	f7ff fd2d 	bl	8019a68 <certif_linkCheck>
            break;
 801a00e:	46c0      	nop			; (mov r8, r8)
    }
}
 801a010:	46c0      	nop			; (mov r8, r8)
 801a012:	46bd      	mov	sp, r7
 801a014:	b004      	add	sp, #16
 801a016:	bd80      	pop	{r7, pc}
 801a018:	200012f8 	.word	0x200012f8

0801a01c <MlmeIndication>:
 * \brief   MLME-Indication event function
 *
 * \param   [IN] MlmeIndication - Pointer to the indication structure.
 */
static void MlmeIndication( MlmeIndication_t *MlmeIndication )
{
 801a01c:	b580      	push	{r7, lr}
 801a01e:	b084      	sub	sp, #16
 801a020:	af00      	add	r7, sp, #0
 801a022:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MLMEInd STATUS: %s\r\n", EventInfoStatusStrings[MlmeIndication->Status] );    )

    switch( MlmeIndication->MlmeIndication )
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	781b      	ldrb	r3, [r3, #0]
 801a028:	2b06      	cmp	r3, #6
 801a02a:	d000      	beq.n	801a02e <MlmeIndication+0x12>
            break;

        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 801a02c:	e004      	b.n	801a038 <MlmeIndication+0x1c>
            LoRaMainCallbacks->LORA_TxNeeded( );			
 801a02e:	4b04      	ldr	r3, [pc, #16]	; (801a040 <MlmeIndication+0x24>)
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	69db      	ldr	r3, [r3, #28]
 801a034:	4798      	blx	r3
            break;
 801a036:	46c0      	nop			; (mov r8, r8)
    }
}
 801a038:	46c0      	nop			; (mov r8, r8)
 801a03a:	46bd      	mov	sp, r7
 801a03c:	b004      	add	sp, #16
 801a03e:	bd80      	pop	{r7, pc}
 801a040:	200012f8 	.word	0x200012f8

0801a044 <LORA_Init>:
/**
 *  lora Init
 */
void LORA_Init (LoRaMainCallback_t *callbacks, LoRaParam_t* LoRaParam )
{
 801a044:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a046:	46de      	mov	lr, fp
 801a048:	4657      	mov	r7, sl
 801a04a:	464e      	mov	r6, r9
 801a04c:	4645      	mov	r5, r8
 801a04e:	b5e0      	push	{r5, r6, r7, lr}
 801a050:	b09b      	sub	sp, #108	; 0x6c
 801a052:	af0e      	add	r7, sp, #56	; 0x38
 801a054:	61f8      	str	r0, [r7, #28]
 801a056:	61b9      	str	r1, [r7, #24]
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 801a058:	2310      	movs	r3, #16
 801a05a:	2218      	movs	r2, #24
 801a05c:	4694      	mov	ip, r2
 801a05e:	44bc      	add	ip, r7
 801a060:	4463      	add	r3, ip
 801a062:	4ab7      	ldr	r2, [pc, #732]	; (801a340 <LORA_Init+0x2fc>)
 801a064:	ca03      	ldmia	r2!, {r0, r1}
 801a066:	c303      	stmia	r3!, {r0, r1}
  uint8_t joinEui[] = LORAWAN_JOIN_EUI;
 801a068:	2308      	movs	r3, #8
 801a06a:	2218      	movs	r2, #24
 801a06c:	4694      	mov	ip, r2
 801a06e:	44bc      	add	ip, r7
 801a070:	4463      	add	r3, ip
 801a072:	4ab4      	ldr	r2, [pc, #720]	; (801a344 <LORA_Init+0x300>)
 801a074:	ca03      	ldmia	r2!, {r0, r1}
 801a076:	c303      	stmia	r3!, {r0, r1}
  
  /* init the Tx Duty Cycle*/
  LoRaParamInit = LoRaParam;
 801a078:	4bb3      	ldr	r3, [pc, #716]	; (801a348 <LORA_Init+0x304>)
 801a07a:	69ba      	ldr	r2, [r7, #24]
 801a07c:	601a      	str	r2, [r3, #0]
  
  /* init the main call backs*/
  LoRaMainCallbacks = callbacks;
 801a07e:	4bb3      	ldr	r3, [pc, #716]	; (801a34c <LORA_Init+0x308>)
 801a080:	69fa      	ldr	r2, [r7, #28]
 801a082:	601a      	str	r2, [r3, #0]
  // Random seed initialization
  srand1( LoRaMainCallbacks->BoardGetRandomSeed( ) );
  // Choose a random device address
  DevAddr = randr( 0, 0x01FFFFFF );
#endif
  PPRINTF( "ABP\n\r"); 
 801a084:	4bb2      	ldr	r3, [pc, #712]	; (801a350 <LORA_Init+0x30c>)
 801a086:	0018      	movs	r0, r3
 801a088:	f001 f9ca 	bl	801b420 <TraceSend>
 801a08c:	1e03      	subs	r3, r0, #0
 801a08e:	d1f9      	bne.n	801a084 <LORA_Init+0x40>
  PPRINTF( "DevEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(devEui));
 801a090:	2010      	movs	r0, #16
 801a092:	2518      	movs	r5, #24
 801a094:	197b      	adds	r3, r7, r5
 801a096:	181b      	adds	r3, r3, r0
 801a098:	781b      	ldrb	r3, [r3, #0]
 801a09a:	001e      	movs	r6, r3
 801a09c:	197b      	adds	r3, r7, r5
 801a09e:	181b      	adds	r3, r3, r0
 801a0a0:	785b      	ldrb	r3, [r3, #1]
 801a0a2:	617b      	str	r3, [r7, #20]
 801a0a4:	197b      	adds	r3, r7, r5
 801a0a6:	181b      	adds	r3, r3, r0
 801a0a8:	789b      	ldrb	r3, [r3, #2]
 801a0aa:	613b      	str	r3, [r7, #16]
 801a0ac:	197b      	adds	r3, r7, r5
 801a0ae:	181b      	adds	r3, r3, r0
 801a0b0:	78db      	ldrb	r3, [r3, #3]
 801a0b2:	001a      	movs	r2, r3
 801a0b4:	197b      	adds	r3, r7, r5
 801a0b6:	181b      	adds	r3, r3, r0
 801a0b8:	791b      	ldrb	r3, [r3, #4]
 801a0ba:	0019      	movs	r1, r3
 801a0bc:	197b      	adds	r3, r7, r5
 801a0be:	181b      	adds	r3, r3, r0
 801a0c0:	795b      	ldrb	r3, [r3, #5]
 801a0c2:	001c      	movs	r4, r3
 801a0c4:	002b      	movs	r3, r5
 801a0c6:	18fd      	adds	r5, r7, r3
 801a0c8:	182b      	adds	r3, r5, r0
 801a0ca:	799b      	ldrb	r3, [r3, #6]
 801a0cc:	001d      	movs	r5, r3
 801a0ce:	2318      	movs	r3, #24
 801a0d0:	18fb      	adds	r3, r7, r3
 801a0d2:	181b      	adds	r3, r3, r0
 801a0d4:	79db      	ldrb	r3, [r3, #7]
 801a0d6:	489f      	ldr	r0, [pc, #636]	; (801a354 <LORA_Init+0x310>)
 801a0d8:	9304      	str	r3, [sp, #16]
 801a0da:	9503      	str	r5, [sp, #12]
 801a0dc:	9402      	str	r4, [sp, #8]
 801a0de:	9101      	str	r1, [sp, #4]
 801a0e0:	9200      	str	r2, [sp, #0]
 801a0e2:	693b      	ldr	r3, [r7, #16]
 801a0e4:	697a      	ldr	r2, [r7, #20]
 801a0e6:	0031      	movs	r1, r6
 801a0e8:	f001 f99a 	bl	801b420 <TraceSend>
 801a0ec:	1e03      	subs	r3, r0, #0
 801a0ee:	d1cf      	bne.n	801a090 <LORA_Init+0x4c>
  PPRINTF( "DevAdd=  %08X\n\r", DevAddr) ;
 801a0f0:	4b99      	ldr	r3, [pc, #612]	; (801a358 <LORA_Init+0x314>)
 801a0f2:	681a      	ldr	r2, [r3, #0]
 801a0f4:	4b99      	ldr	r3, [pc, #612]	; (801a35c <LORA_Init+0x318>)
 801a0f6:	0011      	movs	r1, r2
 801a0f8:	0018      	movs	r0, r3
 801a0fa:	f001 f991 	bl	801b420 <TraceSend>
 801a0fe:	1e03      	subs	r3, r0, #0
 801a100:	d1f6      	bne.n	801a0f0 <LORA_Init+0xac>
  PPRINTF( "NwkSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(NwkSEncKey));
 801a102:	4b97      	ldr	r3, [pc, #604]	; (801a360 <LORA_Init+0x31c>)
 801a104:	781b      	ldrb	r3, [r3, #0]
 801a106:	617b      	str	r3, [r7, #20]
 801a108:	4b95      	ldr	r3, [pc, #596]	; (801a360 <LORA_Init+0x31c>)
 801a10a:	785b      	ldrb	r3, [r3, #1]
 801a10c:	613b      	str	r3, [r7, #16]
 801a10e:	4b94      	ldr	r3, [pc, #592]	; (801a360 <LORA_Init+0x31c>)
 801a110:	789b      	ldrb	r3, [r3, #2]
 801a112:	60fb      	str	r3, [r7, #12]
 801a114:	4b92      	ldr	r3, [pc, #584]	; (801a360 <LORA_Init+0x31c>)
 801a116:	78db      	ldrb	r3, [r3, #3]
 801a118:	001d      	movs	r5, r3
 801a11a:	4b91      	ldr	r3, [pc, #580]	; (801a360 <LORA_Init+0x31c>)
 801a11c:	791b      	ldrb	r3, [r3, #4]
 801a11e:	001e      	movs	r6, r3
 801a120:	4b8f      	ldr	r3, [pc, #572]	; (801a360 <LORA_Init+0x31c>)
 801a122:	795b      	ldrb	r3, [r3, #5]
 801a124:	469c      	mov	ip, r3
 801a126:	4b8e      	ldr	r3, [pc, #568]	; (801a360 <LORA_Init+0x31c>)
 801a128:	799b      	ldrb	r3, [r3, #6]
 801a12a:	4698      	mov	r8, r3
 801a12c:	4b8c      	ldr	r3, [pc, #560]	; (801a360 <LORA_Init+0x31c>)
 801a12e:	79db      	ldrb	r3, [r3, #7]
 801a130:	4699      	mov	r9, r3
 801a132:	4b8b      	ldr	r3, [pc, #556]	; (801a360 <LORA_Init+0x31c>)
 801a134:	7a1b      	ldrb	r3, [r3, #8]
 801a136:	469a      	mov	sl, r3
 801a138:	4b89      	ldr	r3, [pc, #548]	; (801a360 <LORA_Init+0x31c>)
 801a13a:	7a5b      	ldrb	r3, [r3, #9]
 801a13c:	469b      	mov	fp, r3
 801a13e:	4b88      	ldr	r3, [pc, #544]	; (801a360 <LORA_Init+0x31c>)
 801a140:	7a9b      	ldrb	r3, [r3, #10]
 801a142:	60bb      	str	r3, [r7, #8]
 801a144:	4b86      	ldr	r3, [pc, #536]	; (801a360 <LORA_Init+0x31c>)
 801a146:	7adb      	ldrb	r3, [r3, #11]
 801a148:	607b      	str	r3, [r7, #4]
 801a14a:	4b85      	ldr	r3, [pc, #532]	; (801a360 <LORA_Init+0x31c>)
 801a14c:	7b1b      	ldrb	r3, [r3, #12]
 801a14e:	001c      	movs	r4, r3
 801a150:	4b83      	ldr	r3, [pc, #524]	; (801a360 <LORA_Init+0x31c>)
 801a152:	7b5b      	ldrb	r3, [r3, #13]
 801a154:	0019      	movs	r1, r3
 801a156:	4b82      	ldr	r3, [pc, #520]	; (801a360 <LORA_Init+0x31c>)
 801a158:	7b9b      	ldrb	r3, [r3, #14]
 801a15a:	001a      	movs	r2, r3
 801a15c:	4b80      	ldr	r3, [pc, #512]	; (801a360 <LORA_Init+0x31c>)
 801a15e:	7bdb      	ldrb	r3, [r3, #15]
 801a160:	4880      	ldr	r0, [pc, #512]	; (801a364 <LORA_Init+0x320>)
 801a162:	930c      	str	r3, [sp, #48]	; 0x30
 801a164:	920b      	str	r2, [sp, #44]	; 0x2c
 801a166:	910a      	str	r1, [sp, #40]	; 0x28
 801a168:	9409      	str	r4, [sp, #36]	; 0x24
 801a16a:	687c      	ldr	r4, [r7, #4]
 801a16c:	9408      	str	r4, [sp, #32]
 801a16e:	68bc      	ldr	r4, [r7, #8]
 801a170:	9407      	str	r4, [sp, #28]
 801a172:	465c      	mov	r4, fp
 801a174:	9406      	str	r4, [sp, #24]
 801a176:	4654      	mov	r4, sl
 801a178:	9405      	str	r4, [sp, #20]
 801a17a:	464c      	mov	r4, r9
 801a17c:	9404      	str	r4, [sp, #16]
 801a17e:	4644      	mov	r4, r8
 801a180:	9403      	str	r4, [sp, #12]
 801a182:	4664      	mov	r4, ip
 801a184:	9402      	str	r4, [sp, #8]
 801a186:	9601      	str	r6, [sp, #4]
 801a188:	9500      	str	r5, [sp, #0]
 801a18a:	68fb      	ldr	r3, [r7, #12]
 801a18c:	693a      	ldr	r2, [r7, #16]
 801a18e:	6979      	ldr	r1, [r7, #20]
 801a190:	f001 f946 	bl	801b420 <TraceSend>
 801a194:	1e03      	subs	r3, r0, #0
 801a196:	d1b4      	bne.n	801a102 <LORA_Init+0xbe>
  PPRINTF( "AppSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(AppSKey));
 801a198:	4b73      	ldr	r3, [pc, #460]	; (801a368 <LORA_Init+0x324>)
 801a19a:	781b      	ldrb	r3, [r3, #0]
 801a19c:	617b      	str	r3, [r7, #20]
 801a19e:	4b72      	ldr	r3, [pc, #456]	; (801a368 <LORA_Init+0x324>)
 801a1a0:	785b      	ldrb	r3, [r3, #1]
 801a1a2:	613b      	str	r3, [r7, #16]
 801a1a4:	4b70      	ldr	r3, [pc, #448]	; (801a368 <LORA_Init+0x324>)
 801a1a6:	789b      	ldrb	r3, [r3, #2]
 801a1a8:	60fb      	str	r3, [r7, #12]
 801a1aa:	4b6f      	ldr	r3, [pc, #444]	; (801a368 <LORA_Init+0x324>)
 801a1ac:	78db      	ldrb	r3, [r3, #3]
 801a1ae:	001d      	movs	r5, r3
 801a1b0:	4b6d      	ldr	r3, [pc, #436]	; (801a368 <LORA_Init+0x324>)
 801a1b2:	791b      	ldrb	r3, [r3, #4]
 801a1b4:	001e      	movs	r6, r3
 801a1b6:	4b6c      	ldr	r3, [pc, #432]	; (801a368 <LORA_Init+0x324>)
 801a1b8:	795b      	ldrb	r3, [r3, #5]
 801a1ba:	469c      	mov	ip, r3
 801a1bc:	4b6a      	ldr	r3, [pc, #424]	; (801a368 <LORA_Init+0x324>)
 801a1be:	799b      	ldrb	r3, [r3, #6]
 801a1c0:	4698      	mov	r8, r3
 801a1c2:	4b69      	ldr	r3, [pc, #420]	; (801a368 <LORA_Init+0x324>)
 801a1c4:	79db      	ldrb	r3, [r3, #7]
 801a1c6:	4699      	mov	r9, r3
 801a1c8:	4b67      	ldr	r3, [pc, #412]	; (801a368 <LORA_Init+0x324>)
 801a1ca:	7a1b      	ldrb	r3, [r3, #8]
 801a1cc:	469a      	mov	sl, r3
 801a1ce:	4b66      	ldr	r3, [pc, #408]	; (801a368 <LORA_Init+0x324>)
 801a1d0:	7a5b      	ldrb	r3, [r3, #9]
 801a1d2:	469b      	mov	fp, r3
 801a1d4:	4b64      	ldr	r3, [pc, #400]	; (801a368 <LORA_Init+0x324>)
 801a1d6:	7a9b      	ldrb	r3, [r3, #10]
 801a1d8:	60bb      	str	r3, [r7, #8]
 801a1da:	4b63      	ldr	r3, [pc, #396]	; (801a368 <LORA_Init+0x324>)
 801a1dc:	7adb      	ldrb	r3, [r3, #11]
 801a1de:	607b      	str	r3, [r7, #4]
 801a1e0:	4b61      	ldr	r3, [pc, #388]	; (801a368 <LORA_Init+0x324>)
 801a1e2:	7b1b      	ldrb	r3, [r3, #12]
 801a1e4:	001c      	movs	r4, r3
 801a1e6:	4b60      	ldr	r3, [pc, #384]	; (801a368 <LORA_Init+0x324>)
 801a1e8:	7b5b      	ldrb	r3, [r3, #13]
 801a1ea:	0019      	movs	r1, r3
 801a1ec:	4b5e      	ldr	r3, [pc, #376]	; (801a368 <LORA_Init+0x324>)
 801a1ee:	7b9b      	ldrb	r3, [r3, #14]
 801a1f0:	001a      	movs	r2, r3
 801a1f2:	4b5d      	ldr	r3, [pc, #372]	; (801a368 <LORA_Init+0x324>)
 801a1f4:	7bdb      	ldrb	r3, [r3, #15]
 801a1f6:	485d      	ldr	r0, [pc, #372]	; (801a36c <LORA_Init+0x328>)
 801a1f8:	930c      	str	r3, [sp, #48]	; 0x30
 801a1fa:	920b      	str	r2, [sp, #44]	; 0x2c
 801a1fc:	910a      	str	r1, [sp, #40]	; 0x28
 801a1fe:	9409      	str	r4, [sp, #36]	; 0x24
 801a200:	687c      	ldr	r4, [r7, #4]
 801a202:	9408      	str	r4, [sp, #32]
 801a204:	68bc      	ldr	r4, [r7, #8]
 801a206:	9407      	str	r4, [sp, #28]
 801a208:	465c      	mov	r4, fp
 801a20a:	9406      	str	r4, [sp, #24]
 801a20c:	4654      	mov	r4, sl
 801a20e:	9405      	str	r4, [sp, #20]
 801a210:	464c      	mov	r4, r9
 801a212:	9404      	str	r4, [sp, #16]
 801a214:	4644      	mov	r4, r8
 801a216:	9403      	str	r4, [sp, #12]
 801a218:	4664      	mov	r4, ip
 801a21a:	9402      	str	r4, [sp, #8]
 801a21c:	9601      	str	r6, [sp, #4]
 801a21e:	9500      	str	r5, [sp, #0]
 801a220:	68fb      	ldr	r3, [r7, #12]
 801a222:	693a      	ldr	r2, [r7, #16]
 801a224:	6979      	ldr	r1, [r7, #20]
 801a226:	f001 f8fb 	bl	801b420 <TraceSend>
 801a22a:	1e03      	subs	r3, r0, #0
 801a22c:	d1b4      	bne.n	801a198 <LORA_Init+0x154>
#endif
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 801a22e:	4b50      	ldr	r3, [pc, #320]	; (801a370 <LORA_Init+0x32c>)
 801a230:	4a50      	ldr	r2, [pc, #320]	; (801a374 <LORA_Init+0x330>)
 801a232:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 801a234:	4b4e      	ldr	r3, [pc, #312]	; (801a370 <LORA_Init+0x32c>)
 801a236:	4a50      	ldr	r2, [pc, #320]	; (801a378 <LORA_Init+0x334>)
 801a238:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 801a23a:	4b4d      	ldr	r3, [pc, #308]	; (801a370 <LORA_Init+0x32c>)
 801a23c:	4a4f      	ldr	r2, [pc, #316]	; (801a37c <LORA_Init+0x338>)
 801a23e:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 801a240:	4b4b      	ldr	r3, [pc, #300]	; (801a370 <LORA_Init+0x32c>)
 801a242:	4a4f      	ldr	r2, [pc, #316]	; (801a380 <LORA_Init+0x33c>)
 801a244:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 801a246:	4b41      	ldr	r3, [pc, #260]	; (801a34c <LORA_Init+0x308>)
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	681a      	ldr	r2, [r3, #0]
 801a24c:	4b4d      	ldr	r3, [pc, #308]	; (801a384 <LORA_Init+0x340>)
 801a24e:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LoRaMainCallbacks->BoardGetTemperatureLevel;
 801a250:	4b3e      	ldr	r3, [pc, #248]	; (801a34c <LORA_Init+0x308>)
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	685a      	ldr	r2, [r3, #4]
 801a256:	4b4b      	ldr	r3, [pc, #300]	; (801a384 <LORA_Init+0x340>)
 801a258:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.MacProcessNotify = LoRaMainCallbacks->MacProcessNotify;
 801a25a:	4b3c      	ldr	r3, [pc, #240]	; (801a34c <LORA_Init+0x308>)
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	6a1a      	ldr	r2, [r3, #32]
 801a260:	4b48      	ldr	r3, [pc, #288]	; (801a384 <LORA_Init+0x340>)
 801a262:	60da      	str	r2, [r3, #12]
#elif defined( REGION_CN779 )
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_CN779 );
#elif defined( REGION_EU433 )
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU433 );
#elif defined( REGION_IN865 )
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_IN865 );
 801a264:	4947      	ldr	r1, [pc, #284]	; (801a384 <LORA_Init+0x340>)
 801a266:	4b42      	ldr	r3, [pc, #264]	; (801a370 <LORA_Init+0x32c>)
 801a268:	2207      	movs	r2, #7
 801a26a:	0018      	movs	r0, r3
 801a26c:	f7f9 f834 	bl	80132d8 <LoRaMacInitialization>
  mibReq.Param.ChannelsDefaultMask = channelMask;
  LoRaMacMibSetRequestConfirm( &mibReq );
#endif
#endif

  mibReq.Type = MIB_DEV_EUI;
 801a270:	4b45      	ldr	r3, [pc, #276]	; (801a388 <LORA_Init+0x344>)
 801a272:	2202      	movs	r2, #2
 801a274:	701a      	strb	r2, [r3, #0]
  mibReq.Param.DevEui = devEui;
 801a276:	4b44      	ldr	r3, [pc, #272]	; (801a388 <LORA_Init+0x344>)
 801a278:	2210      	movs	r2, #16
 801a27a:	2118      	movs	r1, #24
 801a27c:	468c      	mov	ip, r1
 801a27e:	44bc      	add	ip, r7
 801a280:	4462      	add	r2, ip
 801a282:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801a284:	4b40      	ldr	r3, [pc, #256]	; (801a388 <LORA_Init+0x344>)
 801a286:	0018      	movs	r0, r3
 801a288:	f7f9 fde6 	bl	8013e58 <LoRaMacMibSetRequestConfirm>
  
  mibReq.Type = MIB_JOIN_EUI;
 801a28c:	4b3e      	ldr	r3, [pc, #248]	; (801a388 <LORA_Init+0x344>)
 801a28e:	2203      	movs	r2, #3
 801a290:	701a      	strb	r2, [r3, #0]
  mibReq.Param.JoinEui = joinEui;
 801a292:	4b3d      	ldr	r3, [pc, #244]	; (801a388 <LORA_Init+0x344>)
 801a294:	2208      	movs	r2, #8
 801a296:	2118      	movs	r1, #24
 801a298:	468c      	mov	ip, r1
 801a29a:	44bc      	add	ip, r7
 801a29c:	4462      	add	r2, ip
 801a29e:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801a2a0:	4b39      	ldr	r3, [pc, #228]	; (801a388 <LORA_Init+0x344>)
 801a2a2:	0018      	movs	r0, r3
 801a2a4:	f7f9 fdd8 	bl	8013e58 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_ADR;
 801a2a8:	4b37      	ldr	r3, [pc, #220]	; (801a388 <LORA_Init+0x344>)
 801a2aa:	2204      	movs	r2, #4
 801a2ac:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 801a2ae:	4b26      	ldr	r3, [pc, #152]	; (801a348 <LORA_Init+0x304>)
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	781a      	ldrb	r2, [r3, #0]
 801a2b4:	4b34      	ldr	r3, [pc, #208]	; (801a388 <LORA_Init+0x344>)
 801a2b6:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801a2b8:	4b33      	ldr	r3, [pc, #204]	; (801a388 <LORA_Init+0x344>)
 801a2ba:	0018      	movs	r0, r3
 801a2bc:	f7f9 fdcc 	bl	8013e58 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_PUBLIC_NETWORK;
 801a2c0:	4b31      	ldr	r3, [pc, #196]	; (801a388 <LORA_Init+0x344>)
 801a2c2:	221d      	movs	r2, #29
 801a2c4:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 801a2c6:	4b20      	ldr	r3, [pc, #128]	; (801a348 <LORA_Init+0x304>)
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	789a      	ldrb	r2, [r3, #2]
 801a2cc:	4b2e      	ldr	r3, [pc, #184]	; (801a388 <LORA_Init+0x344>)
 801a2ce:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801a2d0:	4b2d      	ldr	r3, [pc, #180]	; (801a388 <LORA_Init+0x344>)
 801a2d2:	0018      	movs	r0, r3
 801a2d4:	f7f9 fdc0 	bl	8013e58 <LoRaMacMibSetRequestConfirm>
  
  mibReq.Type = MIB_APP_KEY;
 801a2d8:	4b2b      	ldr	r3, [pc, #172]	; (801a388 <LORA_Init+0x344>)
 801a2da:	2208      	movs	r2, #8
 801a2dc:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AppKey = AppKey;
 801a2de:	4b2a      	ldr	r3, [pc, #168]	; (801a388 <LORA_Init+0x344>)
 801a2e0:	4a2a      	ldr	r2, [pc, #168]	; (801a38c <LORA_Init+0x348>)
 801a2e2:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801a2e4:	4b28      	ldr	r3, [pc, #160]	; (801a388 <LORA_Init+0x344>)
 801a2e6:	0018      	movs	r0, r3
 801a2e8:	f7f9 fdb6 	bl	8013e58 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_NWK_KEY;
 801a2ec:	4b26      	ldr	r3, [pc, #152]	; (801a388 <LORA_Init+0x344>)
 801a2ee:	2209      	movs	r2, #9
 801a2f0:	701a      	strb	r2, [r3, #0]
  mibReq.Param.NwkKey = NwkKey;
 801a2f2:	4b25      	ldr	r3, [pc, #148]	; (801a388 <LORA_Init+0x344>)
 801a2f4:	4a26      	ldr	r2, [pc, #152]	; (801a390 <LORA_Init+0x34c>)
 801a2f6:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801a2f8:	4b23      	ldr	r3, [pc, #140]	; (801a388 <LORA_Init+0x344>)
 801a2fa:	0018      	movs	r0, r3
 801a2fc:	f7f9 fdac 	bl	8013e58 <LoRaMacMibSetRequestConfirm>
                      
  mibReq.Type = MIB_DEVICE_CLASS;
 801a300:	4b21      	ldr	r3, [pc, #132]	; (801a388 <LORA_Init+0x344>)
 801a302:	2200      	movs	r2, #0
 801a304:	701a      	strb	r2, [r3, #0]
  mibReq.Param.Class= CLASS_A;
 801a306:	4b20      	ldr	r3, [pc, #128]	; (801a388 <LORA_Init+0x344>)
 801a308:	2200      	movs	r2, #0
 801a30a:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801a30c:	4b1e      	ldr	r3, [pc, #120]	; (801a388 <LORA_Init+0x344>)
 801a30e:	0018      	movs	r0, r3
 801a310:	f7f9 fda2 	bl	8013e58 <LoRaMacMibSetRequestConfirm>

#if defined( REGION_EU868 ) || defined( REGION_RU864 ) || defined( REGION_CN779 ) || defined( REGION_EU433 )
  LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
#endif
      
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 801a314:	4b1c      	ldr	r3, [pc, #112]	; (801a388 <LORA_Init+0x344>)
 801a316:	2230      	movs	r2, #48	; 0x30
 801a318:	701a      	strb	r2, [r3, #0]
  mibReq.Param.SystemMaxRxError = 20;
 801a31a:	4b1b      	ldr	r3, [pc, #108]	; (801a388 <LORA_Init+0x344>)
 801a31c:	2214      	movs	r2, #20
 801a31e:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801a320:	4b19      	ldr	r3, [pc, #100]	; (801a388 <LORA_Init+0x344>)
 801a322:	0018      	movs	r0, r3
 801a324:	f7f9 fd98 	bl	8013e58 <LoRaMacMibSetRequestConfirm>

  /*set Mac statein Idle*/
  LoRaMacStart( );
 801a328:	f7f9 fb7e 	bl	8013a28 <LoRaMacStart>
}
 801a32c:	46c0      	nop			; (mov r8, r8)
 801a32e:	46bd      	mov	sp, r7
 801a330:	b00d      	add	sp, #52	; 0x34
 801a332:	bc3c      	pop	{r2, r3, r4, r5}
 801a334:	4690      	mov	r8, r2
 801a336:	4699      	mov	r9, r3
 801a338:	46a2      	mov	sl, r4
 801a33a:	46ab      	mov	fp, r5
 801a33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a33e:	46c0      	nop			; (mov r8, r8)
 801a340:	0801c8ec 	.word	0x0801c8ec
 801a344:	0801c8f4 	.word	0x0801c8f4
 801a348:	200012b4 	.word	0x200012b4
 801a34c:	200012f8 	.word	0x200012f8
 801a350:	0801c7e8 	.word	0x0801c7e8
 801a354:	0801c7f0 	.word	0x0801c7f0
 801a358:	200000e8 	.word	0x200000e8
 801a35c:	0801c824 	.word	0x0801c824
 801a360:	200000c8 	.word	0x200000c8
 801a364:	0801c834 	.word	0x0801c834
 801a368:	200000d8 	.word	0x200000d8
 801a36c:	0801c890 	.word	0x0801c890
 801a370:	200012b8 	.word	0x200012b8
 801a374:	08019ed1 	.word	0x08019ed1
 801a378:	08019f11 	.word	0x08019f11
 801a37c:	08019fc9 	.word	0x08019fc9
 801a380:	0801a01d 	.word	0x0801a01d
 801a384:	200012c8 	.word	0x200012c8
 801a388:	200012d8 	.word	0x200012d8
 801a38c:	20000088 	.word	0x20000088
 801a390:	20000098 	.word	0x20000098

0801a394 <LORA_Join>:


void LORA_Join( void)
{
 801a394:	b580      	push	{r7, lr}
 801a396:	b086      	sub	sp, #24
 801a398:	af00      	add	r7, sp, #0
    MlmeReq_t mlmeReq;
  
    mlmeReq.Type = MLME_JOIN;
 801a39a:	2108      	movs	r1, #8
 801a39c:	187b      	adds	r3, r7, r1
 801a39e:	2200      	movs	r2, #0
 801a3a0:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.Datarate = LoRaParamInit->TxDatarate;
 801a3a2:	4b38      	ldr	r3, [pc, #224]	; (801a484 <LORA_Join+0xf0>)
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	785b      	ldrb	r3, [r3, #1]
 801a3a8:	b25b      	sxtb	r3, r3
 801a3aa:	b2da      	uxtb	r2, r3
 801a3ac:	187b      	adds	r3, r7, r1
 801a3ae:	711a      	strb	r2, [r3, #4]
  
    JoinParameters = mlmeReq.Req.Join;
 801a3b0:	4b35      	ldr	r3, [pc, #212]	; (801a488 <LORA_Join+0xf4>)
 801a3b2:	187a      	adds	r2, r7, r1
 801a3b4:	7912      	ldrb	r2, [r2, #4]
 801a3b6:	701a      	strb	r2, [r3, #0]

#if( OVER_THE_AIR_ACTIVATION != 0 )
    LoRaMacMlmeRequest( &mlmeReq );
#else
    mibReq.Type = MIB_NET_ID;
 801a3b8:	4b34      	ldr	r3, [pc, #208]	; (801a48c <LORA_Join+0xf8>)
 801a3ba:	2205      	movs	r2, #5
 801a3bc:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 801a3be:	4b33      	ldr	r3, [pc, #204]	; (801a48c <LORA_Join+0xf8>)
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801a3c4:	4b31      	ldr	r3, [pc, #196]	; (801a48c <LORA_Join+0xf8>)
 801a3c6:	0018      	movs	r0, r3
 801a3c8:	f7f9 fd46 	bl	8013e58 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_ADDR;
 801a3cc:	4b2f      	ldr	r3, [pc, #188]	; (801a48c <LORA_Join+0xf8>)
 801a3ce:	2206      	movs	r2, #6
 801a3d0:	701a      	strb	r2, [r3, #0]
    mibReq.Param.DevAddr = DevAddr;
 801a3d2:	4b2f      	ldr	r3, [pc, #188]	; (801a490 <LORA_Join+0xfc>)
 801a3d4:	681a      	ldr	r2, [r3, #0]
 801a3d6:	4b2d      	ldr	r3, [pc, #180]	; (801a48c <LORA_Join+0xf8>)
 801a3d8:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801a3da:	4b2c      	ldr	r3, [pc, #176]	; (801a48c <LORA_Join+0xf8>)
 801a3dc:	0018      	movs	r0, r3
 801a3de:	f7f9 fd3b 	bl	8013e58 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_F_NWK_S_INT_KEY;
 801a3e2:	4b2a      	ldr	r3, [pc, #168]	; (801a48c <LORA_Join+0xf8>)
 801a3e4:	220c      	movs	r2, #12
 801a3e6:	701a      	strb	r2, [r3, #0]
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 801a3e8:	4b28      	ldr	r3, [pc, #160]	; (801a48c <LORA_Join+0xf8>)
 801a3ea:	4a2a      	ldr	r2, [pc, #168]	; (801a494 <LORA_Join+0x100>)
 801a3ec:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801a3ee:	4b27      	ldr	r3, [pc, #156]	; (801a48c <LORA_Join+0xf8>)
 801a3f0:	0018      	movs	r0, r3
 801a3f2:	f7f9 fd31 	bl	8013e58 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_S_NWK_S_INT_KEY;
 801a3f6:	4b25      	ldr	r3, [pc, #148]	; (801a48c <LORA_Join+0xf8>)
 801a3f8:	220d      	movs	r2, #13
 801a3fa:	701a      	strb	r2, [r3, #0]
    mibReq.Param.SNwkSIntKey = SNwkSIntKey;
 801a3fc:	4b23      	ldr	r3, [pc, #140]	; (801a48c <LORA_Join+0xf8>)
 801a3fe:	4a26      	ldr	r2, [pc, #152]	; (801a498 <LORA_Join+0x104>)
 801a400:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801a402:	4b22      	ldr	r3, [pc, #136]	; (801a48c <LORA_Join+0xf8>)
 801a404:	0018      	movs	r0, r3
 801a406:	f7f9 fd27 	bl	8013e58 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NWK_S_ENC_KEY;
 801a40a:	4b20      	ldr	r3, [pc, #128]	; (801a48c <LORA_Join+0xf8>)
 801a40c:	220e      	movs	r2, #14
 801a40e:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NwkSEncKey = NwkSEncKey;
 801a410:	4b1e      	ldr	r3, [pc, #120]	; (801a48c <LORA_Join+0xf8>)
 801a412:	4a22      	ldr	r2, [pc, #136]	; (801a49c <LORA_Join+0x108>)
 801a414:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801a416:	4b1d      	ldr	r3, [pc, #116]	; (801a48c <LORA_Join+0xf8>)
 801a418:	0018      	movs	r0, r3
 801a41a:	f7f9 fd1d 	bl	8013e58 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_APP_S_KEY;
 801a41e:	4b1b      	ldr	r3, [pc, #108]	; (801a48c <LORA_Join+0xf8>)
 801a420:	220f      	movs	r2, #15
 801a422:	701a      	strb	r2, [r3, #0]
    mibReq.Param.AppSKey = AppSKey;
 801a424:	4b19      	ldr	r3, [pc, #100]	; (801a48c <LORA_Join+0xf8>)
 801a426:	4a1e      	ldr	r2, [pc, #120]	; (801a4a0 <LORA_Join+0x10c>)
 801a428:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801a42a:	4b18      	ldr	r3, [pc, #96]	; (801a48c <LORA_Join+0xf8>)
 801a42c:	0018      	movs	r0, r3
 801a42e:	f7f9 fd13 	bl	8013e58 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 801a432:	4b16      	ldr	r3, [pc, #88]	; (801a48c <LORA_Join+0xf8>)
 801a434:	2201      	movs	r2, #1
 801a436:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 801a438:	4b14      	ldr	r3, [pc, #80]	; (801a48c <LORA_Join+0xf8>)
 801a43a:	2201      	movs	r2, #1
 801a43c:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801a43e:	4b13      	ldr	r3, [pc, #76]	; (801a48c <LORA_Join+0xf8>)
 801a440:	0018      	movs	r0, r3
 801a442:	f7f9 fd09 	bl	8013e58 <LoRaMacMibSetRequestConfirm>
    
    // Enable legacy mode to operate according to LoRaWAN Spec. 1.0.3
    Version_t abpLrWanVersion;

    abpLrWanVersion.Fields.Major    = 1;
 801a446:	1d3b      	adds	r3, r7, #4
 801a448:	2201      	movs	r2, #1
 801a44a:	70da      	strb	r2, [r3, #3]
    abpLrWanVersion.Fields.Minor    = 0;
 801a44c:	1d3b      	adds	r3, r7, #4
 801a44e:	2200      	movs	r2, #0
 801a450:	709a      	strb	r2, [r3, #2]
    abpLrWanVersion.Fields.Revision = 3;
 801a452:	1d3b      	adds	r3, r7, #4
 801a454:	2203      	movs	r2, #3
 801a456:	705a      	strb	r2, [r3, #1]
    abpLrWanVersion.Fields.Rfu      = 0;
 801a458:	1d3b      	adds	r3, r7, #4
 801a45a:	2200      	movs	r2, #0
 801a45c:	701a      	strb	r2, [r3, #0]

    mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 801a45e:	4b0b      	ldr	r3, [pc, #44]	; (801a48c <LORA_Join+0xf8>)
 801a460:	2235      	movs	r2, #53	; 0x35
 801a462:	701a      	strb	r2, [r3, #0]
    mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
 801a464:	4b09      	ldr	r3, [pc, #36]	; (801a48c <LORA_Join+0xf8>)
 801a466:	687a      	ldr	r2, [r7, #4]
 801a468:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801a46a:	4b08      	ldr	r3, [pc, #32]	; (801a48c <LORA_Join+0xf8>)
 801a46c:	0018      	movs	r0, r3
 801a46e:	f7f9 fcf3 	bl	8013e58 <LoRaMacMibSetRequestConfirm>

    LoRaMainCallbacks->LORA_HasJoined();
 801a472:	4b0c      	ldr	r3, [pc, #48]	; (801a4a4 <LORA_Join+0x110>)
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	695b      	ldr	r3, [r3, #20]
 801a478:	4798      	blx	r3
#endif
}
 801a47a:	46c0      	nop			; (mov r8, r8)
 801a47c:	46bd      	mov	sp, r7
 801a47e:	b006      	add	sp, #24
 801a480:	bd80      	pop	{r7, pc}
 801a482:	46c0      	nop			; (mov r8, r8)
 801a484:	200012b4 	.word	0x200012b4
 801a488:	200012b0 	.word	0x200012b0
 801a48c:	200012d8 	.word	0x200012d8
 801a490:	200000e8 	.word	0x200000e8
 801a494:	200000a8 	.word	0x200000a8
 801a498:	200000b8 	.word	0x200000b8
 801a49c:	200000c8 	.word	0x200000c8
 801a4a0:	200000d8 	.word	0x200000d8
 801a4a4:	200012f8 	.word	0x200012f8

0801a4a8 <LORA_JoinStatus>:

LoraFlagStatus LORA_JoinStatus( void)
{
 801a4a8:	b580      	push	{r7, lr}
 801a4aa:	b088      	sub	sp, #32
 801a4ac:	af00      	add	r7, sp, #0
  MibRequestConfirm_t mibReq;

  mibReq.Type = MIB_NETWORK_ACTIVATION;
 801a4ae:	003b      	movs	r3, r7
 801a4b0:	2201      	movs	r2, #1
 801a4b2:	701a      	strb	r2, [r3, #0]
  
  LoRaMacMibGetRequestConfirm( &mibReq );
 801a4b4:	003b      	movs	r3, r7
 801a4b6:	0018      	movs	r0, r3
 801a4b8:	f7f9 fb72 	bl	8013ba0 <LoRaMacMibGetRequestConfirm>

  if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 801a4bc:	003b      	movs	r3, r7
 801a4be:	791b      	ldrb	r3, [r3, #4]
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d101      	bne.n	801a4c8 <LORA_JoinStatus+0x20>
  {
    return LORA_RESET;
 801a4c4:	2300      	movs	r3, #0
 801a4c6:	e000      	b.n	801a4ca <LORA_JoinStatus+0x22>
  }
  else
  {
    return LORA_SET;
 801a4c8:	2301      	movs	r3, #1
  }
}
 801a4ca:	0018      	movs	r0, r3
 801a4cc:	46bd      	mov	sp, r7
 801a4ce:	b008      	add	sp, #32
 801a4d0:	bd80      	pop	{r7, pc}
	...

0801a4d4 <LORA_send>:



bool LORA_send(lora_AppData_t* AppData, LoraConfirm_t IsTxConfirmed)
{
 801a4d4:	b580      	push	{r7, lr}
 801a4d6:	b088      	sub	sp, #32
 801a4d8:	af00      	add	r7, sp, #0
 801a4da:	6078      	str	r0, [r7, #4]
 801a4dc:	000a      	movs	r2, r1
 801a4de:	1cfb      	adds	r3, r7, #3
 801a4e0:	701a      	strb	r2, [r3, #0]
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;
  
    /*if certification test are on going, application data is not sent*/
    if (certif_running() == true)
 801a4e2:	f7ff faa7 	bl	8019a34 <certif_running>
 801a4e6:	1e03      	subs	r3, r0, #0
 801a4e8:	d001      	beq.n	801a4ee <LORA_send+0x1a>
    {
      return false;
 801a4ea:	2300      	movs	r3, #0
 801a4ec:	e05a      	b.n	801a5a4 <LORA_send+0xd0>
    }
    
    if( LoRaMacQueryTxPossible( AppData->BuffSize, &txInfo ) != LORAMAC_STATUS_OK )
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	791b      	ldrb	r3, [r3, #4]
 801a4f2:	220c      	movs	r2, #12
 801a4f4:	18ba      	adds	r2, r7, r2
 801a4f6:	0011      	movs	r1, r2
 801a4f8:	0018      	movs	r0, r3
 801a4fa:	f7f9 faa3 	bl	8013a44 <LoRaMacQueryTxPossible>
 801a4fe:	1e03      	subs	r3, r0, #0
 801a500:	d010      	beq.n	801a524 <LORA_send+0x50>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 801a502:	2110      	movs	r1, #16
 801a504:	187b      	adds	r3, r7, r1
 801a506:	2200      	movs	r2, #0
 801a508:	701a      	strb	r2, [r3, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 801a50a:	187b      	adds	r3, r7, r1
 801a50c:	2200      	movs	r2, #0
 801a50e:	609a      	str	r2, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 801a510:	187b      	adds	r3, r7, r1
 801a512:	2200      	movs	r2, #0
 801a514:	819a      	strh	r2, [r3, #12]
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 801a516:	4b25      	ldr	r3, [pc, #148]	; (801a5ac <LORA_send+0xd8>)
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	2201      	movs	r2, #1
 801a51c:	569a      	ldrsb	r2, [r3, r2]
 801a51e:	187b      	adds	r3, r7, r1
 801a520:	739a      	strb	r2, [r3, #14]
 801a522:	e035      	b.n	801a590 <LORA_send+0xbc>
    }
    else
    {
        if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 801a524:	1cfb      	adds	r3, r7, #3
 801a526:	781b      	ldrb	r3, [r3, #0]
 801a528:	2b00      	cmp	r3, #0
 801a52a:	d117      	bne.n	801a55c <LORA_send+0x88>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 801a52c:	2110      	movs	r1, #16
 801a52e:	187b      	adds	r3, r7, r1
 801a530:	2200      	movs	r2, #0
 801a532:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = AppData->Port;
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	795a      	ldrb	r2, [r3, #5]
 801a538:	187b      	adds	r3, r7, r1
 801a53a:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppData->BuffSize;
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	791b      	ldrb	r3, [r3, #4]
 801a540:	b29a      	uxth	r2, r3
 801a542:	187b      	adds	r3, r7, r1
 801a544:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Unconfirmed.fBuffer = AppData->Buff;
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	681a      	ldr	r2, [r3, #0]
 801a54a:	187b      	adds	r3, r7, r1
 801a54c:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 801a54e:	4b17      	ldr	r3, [pc, #92]	; (801a5ac <LORA_send+0xd8>)
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	2201      	movs	r2, #1
 801a554:	569a      	ldrsb	r2, [r3, r2]
 801a556:	187b      	adds	r3, r7, r1
 801a558:	739a      	strb	r2, [r3, #14]
 801a55a:	e019      	b.n	801a590 <LORA_send+0xbc>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 801a55c:	2110      	movs	r1, #16
 801a55e:	187b      	adds	r3, r7, r1
 801a560:	2201      	movs	r2, #1
 801a562:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Confirmed.fPort = AppData->Port;
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	795a      	ldrb	r2, [r3, #5]
 801a568:	187b      	adds	r3, r7, r1
 801a56a:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Confirmed.fBufferSize = AppData->BuffSize;
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	791b      	ldrb	r3, [r3, #4]
 801a570:	b29a      	uxth	r2, r3
 801a572:	187b      	adds	r3, r7, r1
 801a574:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Confirmed.fBuffer = AppData->Buff;
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	681a      	ldr	r2, [r3, #0]
 801a57a:	187b      	adds	r3, r7, r1
 801a57c:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 801a57e:	187b      	adds	r3, r7, r1
 801a580:	2208      	movs	r2, #8
 801a582:	73da      	strb	r2, [r3, #15]
            mcpsReq.Req.Confirmed.Datarate = LoRaParamInit->TxDatarate;
 801a584:	4b09      	ldr	r3, [pc, #36]	; (801a5ac <LORA_send+0xd8>)
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	2201      	movs	r2, #1
 801a58a:	569a      	ldrsb	r2, [r3, r2]
 801a58c:	187b      	adds	r3, r7, r1
 801a58e:	739a      	strb	r2, [r3, #14]
        }
    }
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 801a590:	2310      	movs	r3, #16
 801a592:	18fb      	adds	r3, r7, r3
 801a594:	0018      	movs	r0, r3
 801a596:	f7fa fab1 	bl	8014afc <LoRaMacMcpsRequest>
 801a59a:	1e03      	subs	r3, r0, #0
 801a59c:	d101      	bne.n	801a5a2 <LORA_send+0xce>
    {
        return false;
 801a59e:	2300      	movs	r3, #0
 801a5a0:	e000      	b.n	801a5a4 <LORA_send+0xd0>
    }
    return true;
 801a5a2:	2301      	movs	r3, #1
}  
 801a5a4:	0018      	movs	r0, r3
 801a5a6:	46bd      	mov	sp, r7
 801a5a8:	b008      	add	sp, #32
 801a5aa:	bd80      	pop	{r7, pc}
 801a5ac:	200012b4 	.word	0x200012b4

0801a5b0 <LORA_RequestClass>:
  }
}
#endif /* LORAMAC_CLASSB_ENABLED */

LoraErrorStatus LORA_RequestClass( DeviceClass_t newClass )
{
 801a5b0:	b590      	push	{r4, r7, lr}
 801a5b2:	b08d      	sub	sp, #52	; 0x34
 801a5b4:	af00      	add	r7, sp, #0
 801a5b6:	0002      	movs	r2, r0
 801a5b8:	1dfb      	adds	r3, r7, #7
 801a5ba:	701a      	strb	r2, [r3, #0]
  LoraErrorStatus Errorstatus = LORA_SUCCESS;
 801a5bc:	232f      	movs	r3, #47	; 0x2f
 801a5be:	18fb      	adds	r3, r7, r3
 801a5c0:	2200      	movs	r2, #0
 801a5c2:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;
  DeviceClass_t currentClass;
  
  mibReq.Type = MIB_DEVICE_CLASS;
 801a5c4:	240c      	movs	r4, #12
 801a5c6:	193b      	adds	r3, r7, r4
 801a5c8:	2200      	movs	r2, #0
 801a5ca:	701a      	strb	r2, [r3, #0]
  LoRaMacMibGetRequestConfirm( &mibReq );
 801a5cc:	193b      	adds	r3, r7, r4
 801a5ce:	0018      	movs	r0, r3
 801a5d0:	f7f9 fae6 	bl	8013ba0 <LoRaMacMibGetRequestConfirm>
  
  currentClass = mibReq.Param.Class;
 801a5d4:	212e      	movs	r1, #46	; 0x2e
 801a5d6:	187b      	adds	r3, r7, r1
 801a5d8:	193a      	adds	r2, r7, r4
 801a5da:	7912      	ldrb	r2, [r2, #4]
 801a5dc:	701a      	strb	r2, [r3, #0]
  /*attempt to swicth only if class update*/
  if (currentClass != newClass)
 801a5de:	187a      	adds	r2, r7, r1
 801a5e0:	1dfb      	adds	r3, r7, #7
 801a5e2:	7812      	ldrb	r2, [r2, #0]
 801a5e4:	781b      	ldrb	r3, [r3, #0]
 801a5e6:	429a      	cmp	r2, r3
 801a5e8:	d040      	beq.n	801a66c <LORA_RequestClass+0xbc>
  {
    switch (newClass)
 801a5ea:	1dfb      	adds	r3, r7, #7
 801a5ec:	781b      	ldrb	r3, [r3, #0]
 801a5ee:	2b01      	cmp	r3, #1
 801a5f0:	d019      	beq.n	801a626 <LORA_RequestClass+0x76>
 801a5f2:	2b02      	cmp	r3, #2
 801a5f4:	d01c      	beq.n	801a630 <LORA_RequestClass+0x80>
 801a5f6:	2b00      	cmp	r3, #0
 801a5f8:	d000      	beq.n	801a5fc <LORA_RequestClass+0x4c>
            Errorstatus = LORA_ERROR;
        }
        break;
      }
      default:
        break;
 801a5fa:	e038      	b.n	801a66e <LORA_RequestClass+0xbe>
        mibReq.Param.Class = CLASS_A;
 801a5fc:	210c      	movs	r1, #12
 801a5fe:	187b      	adds	r3, r7, r1
 801a600:	2200      	movs	r2, #0
 801a602:	711a      	strb	r2, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 801a604:	187b      	adds	r3, r7, r1
 801a606:	0018      	movs	r0, r3
 801a608:	f7f9 fc26 	bl	8013e58 <LoRaMacMibSetRequestConfirm>
 801a60c:	1e03      	subs	r3, r0, #0
 801a60e:	d105      	bne.n	801a61c <LORA_RequestClass+0x6c>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_A);
 801a610:	4b1b      	ldr	r3, [pc, #108]	; (801a680 <LORA_RequestClass+0xd0>)
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	699b      	ldr	r3, [r3, #24]
 801a616:	2000      	movs	r0, #0
 801a618:	4798      	blx	r3
        break;
 801a61a:	e028      	b.n	801a66e <LORA_RequestClass+0xbe>
          Errorstatus = LORA_ERROR;
 801a61c:	232f      	movs	r3, #47	; 0x2f
 801a61e:	18fb      	adds	r3, r7, r3
 801a620:	22ff      	movs	r2, #255	; 0xff
 801a622:	701a      	strb	r2, [r3, #0]
        break;
 801a624:	e023      	b.n	801a66e <LORA_RequestClass+0xbe>
        PRINTF( "warning: LORAMAC_CLASSB_ENABLED has not been defined at compilation\n\r");
 801a626:	4b17      	ldr	r3, [pc, #92]	; (801a684 <LORA_RequestClass+0xd4>)
 801a628:	0018      	movs	r0, r3
 801a62a:	f000 fef9 	bl	801b420 <TraceSend>
        break;
 801a62e:	e01e      	b.n	801a66e <LORA_RequestClass+0xbe>
        if (currentClass != CLASS_A)
 801a630:	232e      	movs	r3, #46	; 0x2e
 801a632:	18fb      	adds	r3, r7, r3
 801a634:	781b      	ldrb	r3, [r3, #0]
 801a636:	2b00      	cmp	r3, #0
 801a638:	d003      	beq.n	801a642 <LORA_RequestClass+0x92>
          Errorstatus = LORA_ERROR;
 801a63a:	232f      	movs	r3, #47	; 0x2f
 801a63c:	18fb      	adds	r3, r7, r3
 801a63e:	22ff      	movs	r2, #255	; 0xff
 801a640:	701a      	strb	r2, [r3, #0]
        mibReq.Param.Class = CLASS_C;
 801a642:	210c      	movs	r1, #12
 801a644:	187b      	adds	r3, r7, r1
 801a646:	2202      	movs	r2, #2
 801a648:	711a      	strb	r2, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 801a64a:	187b      	adds	r3, r7, r1
 801a64c:	0018      	movs	r0, r3
 801a64e:	f7f9 fc03 	bl	8013e58 <LoRaMacMibSetRequestConfirm>
 801a652:	1e03      	subs	r3, r0, #0
 801a654:	d105      	bne.n	801a662 <LORA_RequestClass+0xb2>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 801a656:	4b0a      	ldr	r3, [pc, #40]	; (801a680 <LORA_RequestClass+0xd0>)
 801a658:	681b      	ldr	r3, [r3, #0]
 801a65a:	699b      	ldr	r3, [r3, #24]
 801a65c:	2002      	movs	r0, #2
 801a65e:	4798      	blx	r3
        break;
 801a660:	e005      	b.n	801a66e <LORA_RequestClass+0xbe>
            Errorstatus = LORA_ERROR;
 801a662:	232f      	movs	r3, #47	; 0x2f
 801a664:	18fb      	adds	r3, r7, r3
 801a666:	22ff      	movs	r2, #255	; 0xff
 801a668:	701a      	strb	r2, [r3, #0]
        break;
 801a66a:	e000      	b.n	801a66e <LORA_RequestClass+0xbe>
    } 
  }
 801a66c:	46c0      	nop			; (mov r8, r8)
  return Errorstatus;
 801a66e:	232f      	movs	r3, #47	; 0x2f
 801a670:	18fb      	adds	r3, r7, r3
 801a672:	781b      	ldrb	r3, [r3, #0]
 801a674:	b25b      	sxtb	r3, r3
}
 801a676:	0018      	movs	r0, r3
 801a678:	46bd      	mov	sp, r7
 801a67a:	b00d      	add	sp, #52	; 0x34
 801a67c:	bd90      	pop	{r4, r7, pc}
 801a67e:	46c0      	nop			; (mov r8, r8)
 801a680:	200012f8 	.word	0x200012f8
 801a684:	0801c8fc 	.word	0x0801c8fc

0801a688 <TraceUpLinkFrame>:
  *currentClass = mibReq.Param.Class;
}


static void TraceUpLinkFrame(McpsConfirm_t *mcpsConfirm)
{
 801a688:	b580      	push	{r7, lr}
 801a68a:	b096      	sub	sp, #88	; 0x58
 801a68c:	af00      	add	r7, sp, #0
 801a68e:	6078      	str	r0, [r7, #4]

    MibRequestConfirm_t mibGet;
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_DEVICE_CLASS;
 801a690:	2114      	movs	r1, #20
 801a692:	187b      	adds	r3, r7, r1
 801a694:	2200      	movs	r2, #0
 801a696:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 801a698:	187b      	adds	r3, r7, r1
 801a69a:	0018      	movs	r0, r3
 801a69c:	f7f9 fa80 	bl	8013ba0 <LoRaMacMibGetRequestConfirm>
                             "ABC"[mibReq.Param.Class], \
                             AppData.Port, \
                             AppData.BuffSize, \
                             mcpsConfirm->TxPower );)

    mibGet.Type  = MIB_CHANNELS_MASK;
 801a6a0:	2134      	movs	r1, #52	; 0x34
 801a6a2:	187b      	adds	r3, r7, r1
 801a6a4:	2224      	movs	r2, #36	; 0x24
 801a6a6:	701a      	strb	r2, [r3, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 801a6a8:	187b      	adds	r3, r7, r1
 801a6aa:	0018      	movs	r0, r3
 801a6ac:	f7f9 fa78 	bl	8013ba0 <LoRaMacMibGetRequestConfirm>
 801a6b0:	1e03      	subs	r3, r0, #0
 801a6b2:	d10f      	bne.n	801a6d4 <TraceUpLinkFrame+0x4c>
#if defined( REGION_AS923 ) || defined( REGION_CN779 ) || \
    defined( REGION_EU868 ) || defined( REGION_IN865 ) || \
    defined( REGION_KR920 ) || defined( REGION_EU433 ) || \
    defined( REGION_RU864 )

        for( uint8_t i = 0; i < 1; i++)
 801a6b4:	2357      	movs	r3, #87	; 0x57
 801a6b6:	18fb      	adds	r3, r7, r3
 801a6b8:	2200      	movs	r2, #0
 801a6ba:	701a      	strb	r2, [r3, #0]
 801a6bc:	e005      	b.n	801a6ca <TraceUpLinkFrame+0x42>
 801a6be:	2157      	movs	r1, #87	; 0x57
 801a6c0:	187b      	adds	r3, r7, r1
 801a6c2:	781a      	ldrb	r2, [r3, #0]
 801a6c4:	187b      	adds	r3, r7, r1
 801a6c6:	3201      	adds	r2, #1
 801a6c8:	701a      	strb	r2, [r3, #0]
 801a6ca:	2357      	movs	r3, #87	; 0x57
 801a6cc:	18fb      	adds	r3, r7, r3
 801a6ce:	781b      	ldrb	r3, [r3, #0]
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	d0f4      	beq.n	801a6be <TraceUpLinkFrame+0x36>
            TVL2( PRINTF( "%04X ", mibGet.Param.ChannelsMask[i] );)
        }
    }

    TVL2( PRINTF("\r\n\r\n" );)
} 
 801a6d4:	46c0      	nop			; (mov r8, r8)
 801a6d6:	46bd      	mov	sp, r7
 801a6d8:	b016      	add	sp, #88	; 0x58
 801a6da:	bd80      	pop	{r7, pc}

0801a6dc <TraceDownLinkFrame>:


static void TraceDownLinkFrame(McpsIndication_t *mcpsIndication)
{
 801a6dc:	b590      	push	{r4, r7, lr}
 801a6de:	b08b      	sub	sp, #44	; 0x2c
 801a6e0:	af00      	add	r7, sp, #0
 801a6e2:	6078      	str	r0, [r7, #4]
    const char *slotStrings[] = { "1", "2", "C", "Ping-Slot", "Multicast Ping-Slot" };
 801a6e4:	2314      	movs	r3, #20
 801a6e6:	18fb      	adds	r3, r7, r3
 801a6e8:	4a04      	ldr	r2, [pc, #16]	; (801a6fc <TraceDownLinkFrame+0x20>)
 801a6ea:	ca13      	ldmia	r2!, {r0, r1, r4}
 801a6ec:	c313      	stmia	r3!, {r0, r1, r4}
 801a6ee:	ca03      	ldmia	r2!, {r0, r1}
 801a6f0:	c303      	stmia	r3!, {r0, r1}
                             slotStrings[mcpsIndication->RxSlot], \
                             mcpsIndication->Port, \
                             mcpsIndication->BufferSize, \
                             mcpsIndication->Rssi, \
                             mcpsIndication->Snr );)
}  
 801a6f2:	46c0      	nop			; (mov r8, r8)
 801a6f4:	46bd      	mov	sp, r7
 801a6f6:	b00b      	add	sp, #44	; 0x2c
 801a6f8:	bd90      	pop	{r4, r7, pc}
 801a6fa:	46c0      	nop			; (mov r8, r8)
 801a6fc:	0801c970 	.word	0x0801c970

0801a700 <LPM_SetOffMode>:

/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void LPM_SetOffMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 801a700:	b580      	push	{r7, lr}
 801a702:	b086      	sub	sp, #24
 801a704:	af00      	add	r7, sp, #0
 801a706:	0002      	movs	r2, r0
 801a708:	1dfb      	adds	r3, r7, #7
 801a70a:	701a      	strb	r2, [r3, #0]
 801a70c:	1dbb      	adds	r3, r7, #6
 801a70e:	1c0a      	adds	r2, r1, #0
 801a710:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a712:	f3ef 8310 	mrs	r3, PRIMASK
 801a716:	613b      	str	r3, [r7, #16]
  return(result);
 801a718:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 801a71a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a71c:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 801a71e:	1dbb      	adds	r3, r7, #6
 801a720:	781b      	ldrb	r3, [r3, #0]
 801a722:	2b00      	cmp	r3, #0
 801a724:	d00a      	beq.n	801a73c <LPM_SetOffMode+0x3c>
 801a726:	2b01      	cmp	r3, #1
 801a728:	d000      	beq.n	801a72c <LPM_SetOffMode+0x2c>
    {
      OffModeDisable &= ~(uint32_t)id;
      break;
    }
    default:
      break;
 801a72a:	e010      	b.n	801a74e <LPM_SetOffMode+0x4e>
      OffModeDisable |= (uint32_t)id;
 801a72c:	1dfb      	adds	r3, r7, #7
 801a72e:	781a      	ldrb	r2, [r3, #0]
 801a730:	4b0b      	ldr	r3, [pc, #44]	; (801a760 <LPM_SetOffMode+0x60>)
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	431a      	orrs	r2, r3
 801a736:	4b0a      	ldr	r3, [pc, #40]	; (801a760 <LPM_SetOffMode+0x60>)
 801a738:	601a      	str	r2, [r3, #0]
      break;
 801a73a:	e008      	b.n	801a74e <LPM_SetOffMode+0x4e>
      OffModeDisable &= ~(uint32_t)id;
 801a73c:	1dfb      	adds	r3, r7, #7
 801a73e:	781b      	ldrb	r3, [r3, #0]
 801a740:	43da      	mvns	r2, r3
 801a742:	4b07      	ldr	r3, [pc, #28]	; (801a760 <LPM_SetOffMode+0x60>)
 801a744:	681b      	ldr	r3, [r3, #0]
 801a746:	401a      	ands	r2, r3
 801a748:	4b05      	ldr	r3, [pc, #20]	; (801a760 <LPM_SetOffMode+0x60>)
 801a74a:	601a      	str	r2, [r3, #0]
      break;
 801a74c:	46c0      	nop			; (mov r8, r8)
 801a74e:	697b      	ldr	r3, [r7, #20]
 801a750:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a752:	68fb      	ldr	r3, [r7, #12]
 801a754:	f383 8810 	msr	PRIMASK, r3
  }
  
  RESTORE_PRIMASK( );

  return;
 801a758:	46c0      	nop			; (mov r8, r8)
}
 801a75a:	46bd      	mov	sp, r7
 801a75c:	b006      	add	sp, #24
 801a75e:	bd80      	pop	{r7, pc}
 801a760:	20001300 	.word	0x20001300

0801a764 <LPM_SetStopMode>:

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b086      	sub	sp, #24
 801a768:	af00      	add	r7, sp, #0
 801a76a:	0002      	movs	r2, r0
 801a76c:	1dfb      	adds	r3, r7, #7
 801a76e:	701a      	strb	r2, [r3, #0]
 801a770:	1dbb      	adds	r3, r7, #6
 801a772:	1c0a      	adds	r2, r1, #0
 801a774:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a776:	f3ef 8310 	mrs	r3, PRIMASK
 801a77a:	613b      	str	r3, [r7, #16]
  return(result);
 801a77c:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 801a77e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a780:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 801a782:	1dbb      	adds	r3, r7, #6
 801a784:	781b      	ldrb	r3, [r3, #0]
 801a786:	2b00      	cmp	r3, #0
 801a788:	d00a      	beq.n	801a7a0 <LPM_SetStopMode+0x3c>
 801a78a:	2b01      	cmp	r3, #1
 801a78c:	d000      	beq.n	801a790 <LPM_SetStopMode+0x2c>
    {
      StopModeDisable &= ~(uint32_t)id;
      break;
    }
    default:
      break;
 801a78e:	e010      	b.n	801a7b2 <LPM_SetStopMode+0x4e>
      StopModeDisable |= (uint32_t)id;
 801a790:	1dfb      	adds	r3, r7, #7
 801a792:	781a      	ldrb	r2, [r3, #0]
 801a794:	4b0b      	ldr	r3, [pc, #44]	; (801a7c4 <LPM_SetStopMode+0x60>)
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	431a      	orrs	r2, r3
 801a79a:	4b0a      	ldr	r3, [pc, #40]	; (801a7c4 <LPM_SetStopMode+0x60>)
 801a79c:	601a      	str	r2, [r3, #0]
      break;
 801a79e:	e008      	b.n	801a7b2 <LPM_SetStopMode+0x4e>
      StopModeDisable &= ~(uint32_t)id;
 801a7a0:	1dfb      	adds	r3, r7, #7
 801a7a2:	781b      	ldrb	r3, [r3, #0]
 801a7a4:	43da      	mvns	r2, r3
 801a7a6:	4b07      	ldr	r3, [pc, #28]	; (801a7c4 <LPM_SetStopMode+0x60>)
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	401a      	ands	r2, r3
 801a7ac:	4b05      	ldr	r3, [pc, #20]	; (801a7c4 <LPM_SetStopMode+0x60>)
 801a7ae:	601a      	str	r2, [r3, #0]
      break;
 801a7b0:	46c0      	nop			; (mov r8, r8)
 801a7b2:	697b      	ldr	r3, [r7, #20]
 801a7b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a7b6:	68fb      	ldr	r3, [r7, #12]
 801a7b8:	f383 8810 	msr	PRIMASK, r3
  }
  RESTORE_PRIMASK( );

  return;
 801a7bc:	46c0      	nop			; (mov r8, r8)
}
 801a7be:	46bd      	mov	sp, r7
 801a7c0:	b006      	add	sp, #24
 801a7c2:	bd80      	pop	{r7, pc}
 801a7c4:	200012fc 	.word	0x200012fc

0801a7c8 <LPM_EnterLowPower>:

void LPM_EnterLowPower(void)
{
 801a7c8:	b580      	push	{r7, lr}
 801a7ca:	af00      	add	r7, sp, #0
  if( StopModeDisable )
 801a7cc:	4b0c      	ldr	r3, [pc, #48]	; (801a800 <LPM_EnterLowPower+0x38>)
 801a7ce:	681b      	ldr	r3, [r3, #0]
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d004      	beq.n	801a7de <LPM_EnterLowPower+0x16>
  {
    /**
     * SLEEP mode is required
     */
    LPM_EnterSleepMode();
 801a7d4:	f7eb f8fe 	bl	80059d4 <LPM_EnterSleepMode>
    LPM_ExitSleepMode();
 801a7d8:	f000 f846 	bl	801a868 <LPM_ExitSleepMode>
      LPM_EnterOffMode();
      LPM_ExitOffMode();
    }
  }

  return;
 801a7dc:	e00d      	b.n	801a7fa <LPM_EnterLowPower+0x32>
    if( OffModeDisable )
 801a7de:	4b09      	ldr	r3, [pc, #36]	; (801a804 <LPM_EnterLowPower+0x3c>)
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d004      	beq.n	801a7f0 <LPM_EnterLowPower+0x28>
      LPM_EnterStopMode();
 801a7e6:	f7eb f895 	bl	8005914 <LPM_EnterStopMode>
      LPM_ExitStopMode();
 801a7ea:	f7eb f8b5 	bl	8005958 <LPM_ExitStopMode>
  return;
 801a7ee:	e004      	b.n	801a7fa <LPM_EnterLowPower+0x32>
      LPM_EnterOffMode();
 801a7f0:	f000 f83f 	bl	801a872 <LPM_EnterOffMode>
      LPM_ExitOffMode();
 801a7f4:	f000 f842 	bl	801a87c <LPM_ExitOffMode>
  return;
 801a7f8:	46c0      	nop			; (mov r8, r8)
}
 801a7fa:	46bd      	mov	sp, r7
 801a7fc:	bd80      	pop	{r7, pc}
 801a7fe:	46c0      	nop			; (mov r8, r8)
 801a800:	200012fc 	.word	0x200012fc
 801a804:	20001300 	.word	0x20001300

0801a808 <LPM_GetMode>:

LPM_GetMode_t LPM_GetMode(void)
{
 801a808:	b580      	push	{r7, lr}
 801a80a:	b084      	sub	sp, #16
 801a80c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a80e:	f3ef 8310 	mrs	r3, PRIMASK
 801a812:	607b      	str	r3, [r7, #4]
  return(result);
 801a814:	687b      	ldr	r3, [r7, #4]
  LPM_GetMode_t mode_selected;

  BACKUP_PRIMASK();
 801a816:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 801a818:	b672      	cpsid	i
  
  DISABLE_IRQ( );

  if(StopModeDisable )
 801a81a:	4b11      	ldr	r3, [pc, #68]	; (801a860 <LPM_GetMode+0x58>)
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d004      	beq.n	801a82c <LPM_GetMode+0x24>
  {
    mode_selected = LPM_SleepMode;
 801a822:	230f      	movs	r3, #15
 801a824:	18fb      	adds	r3, r7, r3
 801a826:	2200      	movs	r2, #0
 801a828:	701a      	strb	r2, [r3, #0]
 801a82a:	e00c      	b.n	801a846 <LPM_GetMode+0x3e>
  }
  else
  {
    if(OffModeDisable)
 801a82c:	4b0d      	ldr	r3, [pc, #52]	; (801a864 <LPM_GetMode+0x5c>)
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d004      	beq.n	801a83e <LPM_GetMode+0x36>
    {
      mode_selected = LPM_StopMode;
 801a834:	230f      	movs	r3, #15
 801a836:	18fb      	adds	r3, r7, r3
 801a838:	2201      	movs	r2, #1
 801a83a:	701a      	strb	r2, [r3, #0]
 801a83c:	e003      	b.n	801a846 <LPM_GetMode+0x3e>
    }
    else
    {
      mode_selected = LPM_OffMode;
 801a83e:	230f      	movs	r3, #15
 801a840:	18fb      	adds	r3, r7, r3
 801a842:	2202      	movs	r2, #2
 801a844:	701a      	strb	r2, [r3, #0]
 801a846:	68bb      	ldr	r3, [r7, #8]
 801a848:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a84a:	683b      	ldr	r3, [r7, #0]
 801a84c:	f383 8810 	msr	PRIMASK, r3
    }
  }

  RESTORE_PRIMASK( );

  return mode_selected;
 801a850:	230f      	movs	r3, #15
 801a852:	18fb      	adds	r3, r7, r3
 801a854:	781b      	ldrb	r3, [r3, #0]
}
 801a856:	0018      	movs	r0, r3
 801a858:	46bd      	mov	sp, r7
 801a85a:	b004      	add	sp, #16
 801a85c:	bd80      	pop	{r7, pc}
 801a85e:	46c0      	nop			; (mov r8, r8)
 801a860:	200012fc 	.word	0x200012fc
 801a864:	20001300 	.word	0x20001300

0801a868 <LPM_ExitSleepMode>:

__weak void LPM_EnterSleepMode(void) {}
__weak void LPM_ExitSleepMode(void) {}
 801a868:	b580      	push	{r7, lr}
 801a86a:	af00      	add	r7, sp, #0
 801a86c:	46c0      	nop			; (mov r8, r8)
 801a86e:	46bd      	mov	sp, r7
 801a870:	bd80      	pop	{r7, pc}

0801a872 <LPM_EnterOffMode>:
__weak void LPM_EnterStopMode(void) {}
__weak void LPM_ExitStopMode(void) {}
__weak void LPM_EnterOffMode(void) {}
 801a872:	b580      	push	{r7, lr}
 801a874:	af00      	add	r7, sp, #0
 801a876:	46c0      	nop			; (mov r8, r8)
 801a878:	46bd      	mov	sp, r7
 801a87a:	bd80      	pop	{r7, pc}

0801a87c <LPM_ExitOffMode>:
__weak void LPM_ExitOffMode(void) {}
 801a87c:	b580      	push	{r7, lr}
 801a87e:	af00      	add	r7, sp, #0
 801a880:	46c0      	nop			; (mov r8, r8)
 801a882:	46bd      	mov	sp, r7
 801a884:	bd80      	pop	{r7, pc}

0801a886 <circular_queue_init>:
static int16_t circular_queue_get_free_size(queue_param_t* queue);
static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size);

/* Public functions ----------------------------------------------------------*/
void circular_queue_init(queue_param_t* queue, uint8_t* queue_buff, uint16_t queue_size)
{
 801a886:	b580      	push	{r7, lr}
 801a888:	b084      	sub	sp, #16
 801a88a:	af00      	add	r7, sp, #0
 801a88c:	60f8      	str	r0, [r7, #12]
 801a88e:	60b9      	str	r1, [r7, #8]
 801a890:	1dbb      	adds	r3, r7, #6
 801a892:	801a      	strh	r2, [r3, #0]
  queue->queue_read_idx=0;
 801a894:	68fb      	ldr	r3, [r7, #12]
 801a896:	2200      	movs	r2, #0
 801a898:	801a      	strh	r2, [r3, #0]
  queue->queue_write_idx=0;
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	2200      	movs	r2, #0
 801a89e:	805a      	strh	r2, [r3, #2]
  queue->queue_nb_element=0;
 801a8a0:	68fb      	ldr	r3, [r7, #12]
 801a8a2:	2200      	movs	r2, #0
 801a8a4:	809a      	strh	r2, [r3, #4]
  queue->queue_buff=queue_buff;
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	68ba      	ldr	r2, [r7, #8]
 801a8aa:	609a      	str	r2, [r3, #8]
  queue->queue_size=queue_size;
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	1dba      	adds	r2, r7, #6
 801a8b0:	8812      	ldrh	r2, [r2, #0]
 801a8b2:	80da      	strh	r2, [r3, #6]
  queue->queue_full=0;
 801a8b4:	68fb      	ldr	r3, [r7, #12]
 801a8b6:	2200      	movs	r2, #0
 801a8b8:	731a      	strb	r2, [r3, #12]
}
 801a8ba:	46c0      	nop			; (mov r8, r8)
 801a8bc:	46bd      	mov	sp, r7
 801a8be:	b004      	add	sp, #16
 801a8c0:	bd80      	pop	{r7, pc}

0801a8c2 <circular_queue_add>:

int circular_queue_add(queue_param_t* queue, uint8_t* buff, uint16_t buff_size)
{
 801a8c2:	b5b0      	push	{r4, r5, r7, lr}
 801a8c4:	b086      	sub	sp, #24
 801a8c6:	af00      	add	r7, sp, #0
 801a8c8:	60f8      	str	r0, [r7, #12]
 801a8ca:	60b9      	str	r1, [r7, #8]
 801a8cc:	1dbb      	adds	r3, r7, #6
 801a8ce:	801a      	strh	r2, [r3, #0]
  int status;  
  int16_t free_buff_len=circular_queue_get_free_size(queue);
 801a8d0:	2512      	movs	r5, #18
 801a8d2:	197c      	adds	r4, r7, r5
 801a8d4:	68fb      	ldr	r3, [r7, #12]
 801a8d6:	0018      	movs	r0, r3
 801a8d8:	f000 f985 	bl	801abe6 <circular_queue_get_free_size>
 801a8dc:	0003      	movs	r3, r0
 801a8de:	8023      	strh	r3, [r4, #0]
  
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 801a8e0:	1dbb      	adds	r3, r7, #6
 801a8e2:	881b      	ldrh	r3, [r3, #0]
 801a8e4:	1c9a      	adds	r2, r3, #2
 801a8e6:	197b      	adds	r3, r7, r5
 801a8e8:	2100      	movs	r1, #0
 801a8ea:	5e5b      	ldrsh	r3, [r3, r1]
 801a8ec:	429a      	cmp	r2, r3
 801a8ee:	dc47      	bgt.n	801a980 <circular_queue_add+0xbe>
      ((queue->queue_write_idx+buff_size+ELEMENT_SIZE_LEN<=queue->queue_size) 
 801a8f0:	68fb      	ldr	r3, [r7, #12]
 801a8f2:	885b      	ldrh	r3, [r3, #2]
 801a8f4:	001a      	movs	r2, r3
 801a8f6:	1dbb      	adds	r3, r7, #6
 801a8f8:	881b      	ldrh	r3, [r3, #0]
 801a8fa:	18d3      	adds	r3, r2, r3
 801a8fc:	3302      	adds	r3, #2
 801a8fe:	68fa      	ldr	r2, [r7, #12]
 801a900:	88d2      	ldrh	r2, [r2, #6]
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 801a902:	4293      	cmp	r3, r2
 801a904:	dd07      	ble.n	801a916 <circular_queue_add+0x54>
        || (queue->queue_write_idx>=queue->queue_size-ELEMENT_SIZE_LEN))) /*elementSize cut in 2 or elementSize at Top*/
 801a906:	68fb      	ldr	r3, [r7, #12]
 801a908:	885b      	ldrh	r3, [r3, #2]
 801a90a:	001a      	movs	r2, r3
 801a90c:	68fb      	ldr	r3, [r7, #12]
 801a90e:	88db      	ldrh	r3, [r3, #6]
 801a910:	3b02      	subs	r3, #2
 801a912:	429a      	cmp	r2, r3
 801a914:	db34      	blt.n	801a980 <circular_queue_add+0xbe>
  {
    //add in one element
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 801a916:	1dbb      	adds	r3, r7, #6
 801a918:	881a      	ldrh	r2, [r3, #0]
 801a91a:	68fb      	ldr	r3, [r7, #12]
 801a91c:	0011      	movs	r1, r2
 801a91e:	0018      	movs	r0, r3
 801a920:	f000 f9ad 	bl	801ac7e <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,buff_size);
 801a924:	68fb      	ldr	r3, [r7, #12]
 801a926:	689b      	ldr	r3, [r3, #8]
 801a928:	68fa      	ldr	r2, [r7, #12]
 801a92a:	8852      	ldrh	r2, [r2, #2]
 801a92c:	1898      	adds	r0, r3, r2
 801a92e:	1dbb      	adds	r3, r7, #6
 801a930:	881a      	ldrh	r2, [r3, #0]
 801a932:	68bb      	ldr	r3, [r7, #8]
 801a934:	0019      	movs	r1, r3
 801a936:	f000 f987 	bl	801ac48 <queue_copy>
    queue->queue_write_idx+=buff_size;
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	885a      	ldrh	r2, [r3, #2]
 801a93e:	1dbb      	adds	r3, r7, #6
 801a940:	881b      	ldrh	r3, [r3, #0]
 801a942:	18d3      	adds	r3, r2, r3
 801a944:	b29a      	uxth	r2, r3
 801a946:	68fb      	ldr	r3, [r7, #12]
 801a948:	805a      	strh	r2, [r3, #2]
    /*modulo queue_size*/
    if (queue->queue_write_idx==queue->queue_size)
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	885a      	ldrh	r2, [r3, #2]
 801a94e:	68fb      	ldr	r3, [r7, #12]
 801a950:	88db      	ldrh	r3, [r3, #6]
 801a952:	429a      	cmp	r2, r3
 801a954:	d102      	bne.n	801a95c <circular_queue_add+0x9a>
    {
        queue->queue_write_idx=0;
 801a956:	68fb      	ldr	r3, [r7, #12]
 801a958:	2200      	movs	r2, #0
 801a95a:	805a      	strh	r2, [r3, #2]
    }
    //add one element
    queue->queue_nb_element++; 
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	889b      	ldrh	r3, [r3, #4]
 801a960:	3301      	adds	r3, #1
 801a962:	b29a      	uxth	r2, r3
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	809a      	strh	r2, [r3, #4]
    /*in case que is full*/
    if (queue->queue_write_idx== queue->queue_read_idx)
 801a968:	68fb      	ldr	r3, [r7, #12]
 801a96a:	885a      	ldrh	r2, [r3, #2]
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	881b      	ldrh	r3, [r3, #0]
 801a970:	429a      	cmp	r2, r3
 801a972:	d102      	bne.n	801a97a <circular_queue_add+0xb8>
    {
      queue->queue_full=1;
 801a974:	68fb      	ldr	r3, [r7, #12]
 801a976:	2201      	movs	r2, #1
 801a978:	731a      	strb	r2, [r3, #12]
    }
    status=0;
 801a97a:	2300      	movs	r3, #0
 801a97c:	617b      	str	r3, [r7, #20]
 801a97e:	e060      	b.n	801aa42 <circular_queue_add+0x180>
  }
  else if (buff_size+2*ELEMENT_SIZE_LEN<=free_buff_len)
 801a980:	1dbb      	adds	r3, r7, #6
 801a982:	881b      	ldrh	r3, [r3, #0]
 801a984:	1d1a      	adds	r2, r3, #4
 801a986:	2312      	movs	r3, #18
 801a988:	18fb      	adds	r3, r7, r3
 801a98a:	2100      	movs	r1, #0
 801a98c:	5e5b      	ldrsh	r3, [r3, r1]
 801a98e:	429a      	cmp	r2, r3
 801a990:	dc54      	bgt.n	801aa3c <circular_queue_add+0x17a>
  {
    //split buffer in two elements
    /*fill top of queue with first element of size top_size*/
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 801a992:	68fb      	ldr	r3, [r7, #12]
 801a994:	88da      	ldrh	r2, [r3, #6]
 801a996:	68fb      	ldr	r3, [r7, #12]
 801a998:	885b      	ldrh	r3, [r3, #2]
 801a99a:	1ad3      	subs	r3, r2, r3
 801a99c:	b29a      	uxth	r2, r3
 801a99e:	2410      	movs	r4, #16
 801a9a0:	193b      	adds	r3, r7, r4
 801a9a2:	3a02      	subs	r2, #2
 801a9a4:	801a      	strh	r2, [r3, #0]
    add_elementSize_and_inc_writeIdx(queue,top_size);
 801a9a6:	193b      	adds	r3, r7, r4
 801a9a8:	881a      	ldrh	r2, [r3, #0]
 801a9aa:	68fb      	ldr	r3, [r7, #12]
 801a9ac:	0011      	movs	r1, r2
 801a9ae:	0018      	movs	r0, r3
 801a9b0:	f000 f965 	bl	801ac7e <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 801a9b4:	68fb      	ldr	r3, [r7, #12]
 801a9b6:	689b      	ldr	r3, [r3, #8]
 801a9b8:	68fa      	ldr	r2, [r7, #12]
 801a9ba:	8852      	ldrh	r2, [r2, #2]
 801a9bc:	1898      	adds	r0, r3, r2
 801a9be:	193b      	adds	r3, r7, r4
 801a9c0:	881a      	ldrh	r2, [r3, #0]
 801a9c2:	68bb      	ldr	r3, [r7, #8]
 801a9c4:	0019      	movs	r1, r3
 801a9c6:	f000 f93f 	bl	801ac48 <queue_copy>
    queue->queue_write_idx=0;
 801a9ca:	68fb      	ldr	r3, [r7, #12]
 801a9cc:	2200      	movs	r2, #0
 801a9ce:	805a      	strh	r2, [r3, #2]

    /*fill bottom of queue with second element of size buff_size-top_size*/
    buff_size-=top_size;
 801a9d0:	1dbb      	adds	r3, r7, #6
 801a9d2:	1db9      	adds	r1, r7, #6
 801a9d4:	193a      	adds	r2, r7, r4
 801a9d6:	8809      	ldrh	r1, [r1, #0]
 801a9d8:	8812      	ldrh	r2, [r2, #0]
 801a9da:	1a8a      	subs	r2, r1, r2
 801a9dc:	801a      	strh	r2, [r3, #0]
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 801a9de:	1dbb      	adds	r3, r7, #6
 801a9e0:	881a      	ldrh	r2, [r3, #0]
 801a9e2:	68fb      	ldr	r3, [r7, #12]
 801a9e4:	0011      	movs	r1, r2
 801a9e6:	0018      	movs	r0, r3
 801a9e8:	f000 f949 	bl	801ac7e <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff+top_size,buff_size);
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	689b      	ldr	r3, [r3, #8]
 801a9f0:	68fa      	ldr	r2, [r7, #12]
 801a9f2:	8852      	ldrh	r2, [r2, #2]
 801a9f4:	1898      	adds	r0, r3, r2
 801a9f6:	193b      	adds	r3, r7, r4
 801a9f8:	881b      	ldrh	r3, [r3, #0]
 801a9fa:	68ba      	ldr	r2, [r7, #8]
 801a9fc:	18d1      	adds	r1, r2, r3
 801a9fe:	1dbb      	adds	r3, r7, #6
 801aa00:	881b      	ldrh	r3, [r3, #0]
 801aa02:	001a      	movs	r2, r3
 801aa04:	f000 f920 	bl	801ac48 <queue_copy>
    queue->queue_write_idx+=buff_size;
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	885a      	ldrh	r2, [r3, #2]
 801aa0c:	1dbb      	adds	r3, r7, #6
 801aa0e:	881b      	ldrh	r3, [r3, #0]
 801aa10:	18d3      	adds	r3, r2, r3
 801aa12:	b29a      	uxth	r2, r3
 801aa14:	68fb      	ldr	r3, [r7, #12]
 801aa16:	805a      	strh	r2, [r3, #2]
    // add two elements
    queue->queue_nb_element+=2;
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	889b      	ldrh	r3, [r3, #4]
 801aa1c:	3302      	adds	r3, #2
 801aa1e:	b29a      	uxth	r2, r3
 801aa20:	68fb      	ldr	r3, [r7, #12]
 801aa22:	809a      	strh	r2, [r3, #4]
    /*in case que is full*/
    if (queue->queue_write_idx== queue->queue_read_idx)
 801aa24:	68fb      	ldr	r3, [r7, #12]
 801aa26:	885a      	ldrh	r2, [r3, #2]
 801aa28:	68fb      	ldr	r3, [r7, #12]
 801aa2a:	881b      	ldrh	r3, [r3, #0]
 801aa2c:	429a      	cmp	r2, r3
 801aa2e:	d102      	bne.n	801aa36 <circular_queue_add+0x174>
    {
      queue->queue_full=1;
 801aa30:	68fb      	ldr	r3, [r7, #12]
 801aa32:	2201      	movs	r2, #1
 801aa34:	731a      	strb	r2, [r3, #12]
    }    
    status =0;
 801aa36:	2300      	movs	r3, #0
 801aa38:	617b      	str	r3, [r7, #20]
 801aa3a:	e002      	b.n	801aa42 <circular_queue_add+0x180>
  }
  else
  {
    status=-1;
 801aa3c:	2301      	movs	r3, #1
 801aa3e:	425b      	negs	r3, r3
 801aa40:	617b      	str	r3, [r7, #20]
  }
  return status;
 801aa42:	697b      	ldr	r3, [r7, #20]
}
 801aa44:	0018      	movs	r0, r3
 801aa46:	46bd      	mov	sp, r7
 801aa48:	b006      	add	sp, #24
 801aa4a:	bdb0      	pop	{r4, r5, r7, pc}

0801aa4c <circular_queue_get>:

int circular_queue_get(queue_param_t* queue, uint8_t** buff, uint16_t* buff_size)
{
 801aa4c:	b590      	push	{r4, r7, lr}
 801aa4e:	b087      	sub	sp, #28
 801aa50:	af00      	add	r7, sp, #0
 801aa52:	60f8      	str	r0, [r7, #12]
 801aa54:	60b9      	str	r1, [r7, #8]
 801aa56:	607a      	str	r2, [r7, #4]
  int status;
  if (queue->queue_nb_element==0)
 801aa58:	68fb      	ldr	r3, [r7, #12]
 801aa5a:	889b      	ldrh	r3, [r3, #4]
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	d103      	bne.n	801aa68 <circular_queue_get+0x1c>
  {
    status=-1;
 801aa60:	2301      	movs	r3, #1
 801aa62:	425b      	negs	r3, r3
 801aa64:	617b      	str	r3, [r7, #20]
 801aa66:	e046      	b.n	801aaf6 <circular_queue_get+0xaa>
  }
  else
  {
    uint16_t size;
    uint16_t read_idx=queue->queue_read_idx;
 801aa68:	2412      	movs	r4, #18
 801aa6a:	193b      	adds	r3, r7, r4
 801aa6c:	68fa      	ldr	r2, [r7, #12]
 801aa6e:	8812      	ldrh	r2, [r2, #0]
 801aa70:	801a      	strh	r2, [r3, #0]
    /*retreive and remove 1st element' size and content*/
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	689a      	ldr	r2, [r3, #8]
 801aa76:	193b      	adds	r3, r7, r4
 801aa78:	881b      	ldrh	r3, [r3, #0]
 801aa7a:	1939      	adds	r1, r7, r4
 801aa7c:	1c58      	adds	r0, r3, #1
 801aa7e:	8008      	strh	r0, [r1, #0]
 801aa80:	18d3      	adds	r3, r2, r3
 801aa82:	781b      	ldrb	r3, [r3, #0]
 801aa84:	b29a      	uxth	r2, r3
 801aa86:	2310      	movs	r3, #16
 801aa88:	18fb      	adds	r3, r7, r3
 801aa8a:	0212      	lsls	r2, r2, #8
 801aa8c:	801a      	strh	r2, [r3, #0]
    /*wrap if needed*/
    if (read_idx==queue->queue_size)
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	88db      	ldrh	r3, [r3, #6]
 801aa92:	193a      	adds	r2, r7, r4
 801aa94:	8812      	ldrh	r2, [r2, #0]
 801aa96:	429a      	cmp	r2, r3
 801aa98:	d103      	bne.n	801aaa2 <circular_queue_get+0x56>
    {
      read_idx=0;
 801aa9a:	2312      	movs	r3, #18
 801aa9c:	18fb      	adds	r3, r7, r3
 801aa9e:	2200      	movs	r2, #0
 801aaa0:	801a      	strh	r2, [r3, #0]
    }
    size|=(uint16_t) queue->queue_buff[read_idx++];
 801aaa2:	68fb      	ldr	r3, [r7, #12]
 801aaa4:	689a      	ldr	r2, [r3, #8]
 801aaa6:	2412      	movs	r4, #18
 801aaa8:	193b      	adds	r3, r7, r4
 801aaaa:	881b      	ldrh	r3, [r3, #0]
 801aaac:	1939      	adds	r1, r7, r4
 801aaae:	1c58      	adds	r0, r3, #1
 801aab0:	8008      	strh	r0, [r1, #0]
 801aab2:	18d3      	adds	r3, r2, r3
 801aab4:	781b      	ldrb	r3, [r3, #0]
 801aab6:	b299      	uxth	r1, r3
 801aab8:	2210      	movs	r2, #16
 801aaba:	18bb      	adds	r3, r7, r2
 801aabc:	18ba      	adds	r2, r7, r2
 801aabe:	8812      	ldrh	r2, [r2, #0]
 801aac0:	430a      	orrs	r2, r1
 801aac2:	801a      	strh	r2, [r3, #0]
    /*wrap if needed*/
    if (read_idx==queue->queue_size)
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	88db      	ldrh	r3, [r3, #6]
 801aac8:	193a      	adds	r2, r7, r4
 801aaca:	8812      	ldrh	r2, [r2, #0]
 801aacc:	429a      	cmp	r2, r3
 801aace:	d103      	bne.n	801aad8 <circular_queue_get+0x8c>
    {
      read_idx=0;
 801aad0:	2312      	movs	r3, #18
 801aad2:	18fb      	adds	r3, r7, r3
 801aad4:	2200      	movs	r2, #0
 801aad6:	801a      	strh	r2, [r3, #0]
    }
    *buff= queue->queue_buff+read_idx;
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	689a      	ldr	r2, [r3, #8]
 801aadc:	2312      	movs	r3, #18
 801aade:	18fb      	adds	r3, r7, r3
 801aae0:	881b      	ldrh	r3, [r3, #0]
 801aae2:	18d2      	adds	r2, r2, r3
 801aae4:	68bb      	ldr	r3, [r7, #8]
 801aae6:	601a      	str	r2, [r3, #0]

    * buff_size=size;
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	2210      	movs	r2, #16
 801aaec:	18ba      	adds	r2, r7, r2
 801aaee:	8812      	ldrh	r2, [r2, #0]
 801aaf0:	801a      	strh	r2, [r3, #0]
    status=0;
 801aaf2:	2300      	movs	r3, #0
 801aaf4:	617b      	str	r3, [r7, #20]
  }
  return status;
 801aaf6:	697b      	ldr	r3, [r7, #20]
}
 801aaf8:	0018      	movs	r0, r3
 801aafa:	46bd      	mov	sp, r7
 801aafc:	b007      	add	sp, #28
 801aafe:	bd90      	pop	{r4, r7, pc}

0801ab00 <circular_queue_remove>:

int circular_queue_remove(queue_param_t* queue)
{
 801ab00:	b580      	push	{r7, lr}
 801ab02:	b084      	sub	sp, #16
 801ab04:	af00      	add	r7, sp, #0
 801ab06:	6078      	str	r0, [r7, #4]
  int status;
  if (queue->queue_nb_element==0)
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	889b      	ldrh	r3, [r3, #4]
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d103      	bne.n	801ab18 <circular_queue_remove+0x18>
  {
      status=-1;
 801ab10:	2301      	movs	r3, #1
 801ab12:	425b      	negs	r3, r3
 801ab14:	60fb      	str	r3, [r7, #12]
 801ab16:	e04e      	b.n	801abb6 <circular_queue_remove+0xb6>
  }
  else
  {
    uint16_t size;
    /*retreive and remove 1st element' size and content*/
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	689a      	ldr	r2, [r3, #8]
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	881b      	ldrh	r3, [r3, #0]
 801ab20:	1c59      	adds	r1, r3, #1
 801ab22:	b288      	uxth	r0, r1
 801ab24:	6879      	ldr	r1, [r7, #4]
 801ab26:	8008      	strh	r0, [r1, #0]
 801ab28:	18d3      	adds	r3, r2, r3
 801ab2a:	781b      	ldrb	r3, [r3, #0]
 801ab2c:	b29a      	uxth	r2, r3
 801ab2e:	230a      	movs	r3, #10
 801ab30:	18fb      	adds	r3, r7, r3
 801ab32:	0212      	lsls	r2, r2, #8
 801ab34:	801a      	strh	r2, [r3, #0]
    if (queue->queue_read_idx==queue->queue_size)
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	881a      	ldrh	r2, [r3, #0]
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	88db      	ldrh	r3, [r3, #6]
 801ab3e:	429a      	cmp	r2, r3
 801ab40:	d102      	bne.n	801ab48 <circular_queue_remove+0x48>
    {
      queue->queue_read_idx=0;
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	2200      	movs	r2, #0
 801ab46:	801a      	strh	r2, [r3, #0]
    }
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	689a      	ldr	r2, [r3, #8]
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	881b      	ldrh	r3, [r3, #0]
 801ab50:	1c59      	adds	r1, r3, #1
 801ab52:	b288      	uxth	r0, r1
 801ab54:	6879      	ldr	r1, [r7, #4]
 801ab56:	8008      	strh	r0, [r1, #0]
 801ab58:	18d3      	adds	r3, r2, r3
 801ab5a:	781b      	ldrb	r3, [r3, #0]
 801ab5c:	b299      	uxth	r1, r3
 801ab5e:	220a      	movs	r2, #10
 801ab60:	18bb      	adds	r3, r7, r2
 801ab62:	18ba      	adds	r2, r7, r2
 801ab64:	8812      	ldrh	r2, [r2, #0]
 801ab66:	430a      	orrs	r2, r1
 801ab68:	801a      	strh	r2, [r3, #0]
    if (queue->queue_read_idx==queue->queue_size)
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	881a      	ldrh	r2, [r3, #0]
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	88db      	ldrh	r3, [r3, #6]
 801ab72:	429a      	cmp	r2, r3
 801ab74:	d102      	bne.n	801ab7c <circular_queue_remove+0x7c>
    {
      queue->queue_read_idx=0;
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	2200      	movs	r2, #0
 801ab7a:	801a      	strh	r2, [r3, #0]
    }
    /* increment read index*/
    queue->queue_read_idx+=size;
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	881a      	ldrh	r2, [r3, #0]
 801ab80:	230a      	movs	r3, #10
 801ab82:	18fb      	adds	r3, r7, r3
 801ab84:	881b      	ldrh	r3, [r3, #0]
 801ab86:	18d3      	adds	r3, r2, r3
 801ab88:	b29a      	uxth	r2, r3
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	801a      	strh	r2, [r3, #0]
    /*modulo queue_size*/
    if (queue->queue_read_idx==queue->queue_size)
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	881a      	ldrh	r2, [r3, #0]
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	88db      	ldrh	r3, [r3, #6]
 801ab96:	429a      	cmp	r2, r3
 801ab98:	d102      	bne.n	801aba0 <circular_queue_remove+0xa0>
    {
        queue->queue_read_idx=0;
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	2200      	movs	r2, #0
 801ab9e:	801a      	strh	r2, [r3, #0]
    }
    /* decrement number of element*/
    queue->queue_nb_element--;
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	889b      	ldrh	r3, [r3, #4]
 801aba4:	3b01      	subs	r3, #1
 801aba6:	b29a      	uxth	r2, r3
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	809a      	strh	r2, [r3, #4]
    queue->queue_full=0;
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	2200      	movs	r2, #0
 801abb0:	731a      	strb	r2, [r3, #12]
    status=0;
 801abb2:	2300      	movs	r3, #0
 801abb4:	60fb      	str	r3, [r7, #12]
  }
  return status;
 801abb6:	68fb      	ldr	r3, [r7, #12]
}
 801abb8:	0018      	movs	r0, r3
 801abba:	46bd      	mov	sp, r7
 801abbc:	b004      	add	sp, #16
 801abbe:	bd80      	pop	{r7, pc}

0801abc0 <circular_queue_sense>:

int circular_queue_sense(queue_param_t* queue)
{
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b084      	sub	sp, #16
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
  int status;
  if (queue->queue_nb_element==0)
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	889b      	ldrh	r3, [r3, #4]
 801abcc:	2b00      	cmp	r3, #0
 801abce:	d103      	bne.n	801abd8 <circular_queue_sense+0x18>
  {
    status=-1;
 801abd0:	2301      	movs	r3, #1
 801abd2:	425b      	negs	r3, r3
 801abd4:	60fb      	str	r3, [r7, #12]
 801abd6:	e001      	b.n	801abdc <circular_queue_sense+0x1c>
  }
  else
  {
    status=0;
 801abd8:	2300      	movs	r3, #0
 801abda:	60fb      	str	r3, [r7, #12]
  }
  return status;
 801abdc:	68fb      	ldr	r3, [r7, #12]
}
 801abde:	0018      	movs	r0, r3
 801abe0:	46bd      	mov	sp, r7
 801abe2:	b004      	add	sp, #16
 801abe4:	bd80      	pop	{r7, pc}

0801abe6 <circular_queue_get_free_size>:

/* Private functions ---------------------------------------------------------*/
static int16_t circular_queue_get_free_size(queue_param_t* queue)
{
 801abe6:	b580      	push	{r7, lr}
 801abe8:	b084      	sub	sp, #16
 801abea:	af00      	add	r7, sp, #0
 801abec:	6078      	str	r0, [r7, #4]
  int16_t free_size;
  if (queue->queue_write_idx>=queue->queue_read_idx)
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	885a      	ldrh	r2, [r3, #2]
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	881b      	ldrh	r3, [r3, #0]
 801abf6:	429a      	cmp	r2, r3
 801abf8:	d30d      	bcc.n	801ac16 <circular_queue_get_free_size+0x30>
  {
    free_size=queue->queue_size-(queue->queue_write_idx-queue->queue_read_idx); 
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	88da      	ldrh	r2, [r3, #6]
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	8819      	ldrh	r1, [r3, #0]
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	885b      	ldrh	r3, [r3, #2]
 801ac06:	1acb      	subs	r3, r1, r3
 801ac08:	b29b      	uxth	r3, r3
 801ac0a:	18d3      	adds	r3, r2, r3
 801ac0c:	b29a      	uxth	r2, r3
 801ac0e:	230e      	movs	r3, #14
 801ac10:	18fb      	adds	r3, r7, r3
 801ac12:	801a      	strh	r2, [r3, #0]
 801ac14:	e008      	b.n	801ac28 <circular_queue_get_free_size+0x42>
  }
  else
  {
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	881a      	ldrh	r2, [r3, #0]
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	885b      	ldrh	r3, [r3, #2]
 801ac1e:	1ad3      	subs	r3, r2, r3
 801ac20:	b29a      	uxth	r2, r3
 801ac22:	230e      	movs	r3, #14
 801ac24:	18fb      	adds	r3, r7, r3
 801ac26:	801a      	strh	r2, [r3, #0]
  }
  if ( queue->queue_full==1)
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	7b1b      	ldrb	r3, [r3, #12]
 801ac2c:	2b01      	cmp	r3, #1
 801ac2e:	d103      	bne.n	801ac38 <circular_queue_get_free_size+0x52>
  {
    free_size=0;
 801ac30:	230e      	movs	r3, #14
 801ac32:	18fb      	adds	r3, r7, r3
 801ac34:	2200      	movs	r2, #0
 801ac36:	801a      	strh	r2, [r3, #0]
  }
  return free_size;
 801ac38:	230e      	movs	r3, #14
 801ac3a:	18fb      	adds	r3, r7, r3
 801ac3c:	2200      	movs	r2, #0
 801ac3e:	5e9b      	ldrsh	r3, [r3, r2]
}
 801ac40:	0018      	movs	r0, r3
 801ac42:	46bd      	mov	sp, r7
 801ac44:	b004      	add	sp, #16
 801ac46:	bd80      	pop	{r7, pc}

0801ac48 <queue_copy>:

static void queue_copy(uint8_t* out, const uint8_t* in, uint16_t size)
{
 801ac48:	b580      	push	{r7, lr}
 801ac4a:	b084      	sub	sp, #16
 801ac4c:	af00      	add	r7, sp, #0
 801ac4e:	60f8      	str	r0, [r7, #12]
 801ac50:	60b9      	str	r1, [r7, #8]
 801ac52:	1dbb      	adds	r3, r7, #6
 801ac54:	801a      	strh	r2, [r3, #0]
  while(size--)
 801ac56:	e007      	b.n	801ac68 <queue_copy+0x20>
  {
    *out++= *in++;
 801ac58:	68ba      	ldr	r2, [r7, #8]
 801ac5a:	1c53      	adds	r3, r2, #1
 801ac5c:	60bb      	str	r3, [r7, #8]
 801ac5e:	68fb      	ldr	r3, [r7, #12]
 801ac60:	1c59      	adds	r1, r3, #1
 801ac62:	60f9      	str	r1, [r7, #12]
 801ac64:	7812      	ldrb	r2, [r2, #0]
 801ac66:	701a      	strb	r2, [r3, #0]
  while(size--)
 801ac68:	1dbb      	adds	r3, r7, #6
 801ac6a:	881b      	ldrh	r3, [r3, #0]
 801ac6c:	1dba      	adds	r2, r7, #6
 801ac6e:	1e59      	subs	r1, r3, #1
 801ac70:	8011      	strh	r1, [r2, #0]
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d1f0      	bne.n	801ac58 <queue_copy+0x10>
  }
}
 801ac76:	46c0      	nop			; (mov r8, r8)
 801ac78:	46bd      	mov	sp, r7
 801ac7a:	b004      	add	sp, #16
 801ac7c:	bd80      	pop	{r7, pc}

0801ac7e <add_elementSize_and_inc_writeIdx>:

static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size)
{
 801ac7e:	b590      	push	{r4, r7, lr}
 801ac80:	b083      	sub	sp, #12
 801ac82:	af00      	add	r7, sp, #0
 801ac84:	6078      	str	r0, [r7, #4]
 801ac86:	000a      	movs	r2, r1
 801ac88:	1cbb      	adds	r3, r7, #2
 801ac8a:	801a      	strh	r2, [r3, #0]
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 801ac8c:	1cbb      	adds	r3, r7, #2
 801ac8e:	881b      	ldrh	r3, [r3, #0]
 801ac90:	0a1b      	lsrs	r3, r3, #8
 801ac92:	b298      	uxth	r0, r3
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	689a      	ldr	r2, [r3, #8]
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	885b      	ldrh	r3, [r3, #2]
 801ac9c:	1c59      	adds	r1, r3, #1
 801ac9e:	b28c      	uxth	r4, r1
 801aca0:	6879      	ldr	r1, [r7, #4]
 801aca2:	804c      	strh	r4, [r1, #2]
 801aca4:	18d3      	adds	r3, r2, r3
 801aca6:	b2c2      	uxtb	r2, r0
 801aca8:	701a      	strb	r2, [r3, #0]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	885a      	ldrh	r2, [r3, #2]
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	88db      	ldrh	r3, [r3, #6]
 801acb2:	429a      	cmp	r2, r3
 801acb4:	d102      	bne.n	801acbc <add_elementSize_and_inc_writeIdx+0x3e>
  {
    queue->queue_write_idx=0;
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	2200      	movs	r2, #0
 801acba:	805a      	strh	r2, [r3, #2]
  }
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size);
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	689a      	ldr	r2, [r3, #8]
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	885b      	ldrh	r3, [r3, #2]
 801acc4:	1c59      	adds	r1, r3, #1
 801acc6:	b288      	uxth	r0, r1
 801acc8:	6879      	ldr	r1, [r7, #4]
 801acca:	8048      	strh	r0, [r1, #2]
 801accc:	18d3      	adds	r3, r2, r3
 801acce:	1cba      	adds	r2, r7, #2
 801acd0:	8812      	ldrh	r2, [r2, #0]
 801acd2:	b2d2      	uxtb	r2, r2
 801acd4:	701a      	strb	r2, [r3, #0]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	885a      	ldrh	r2, [r3, #2]
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	88db      	ldrh	r3, [r3, #6]
 801acde:	429a      	cmp	r2, r3
 801ace0:	d102      	bne.n	801ace8 <add_elementSize_and_inc_writeIdx+0x6a>
  {
    queue->queue_write_idx=0;
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	2200      	movs	r2, #0
 801ace6:	805a      	strh	r2, [r3, #2]
  }
}
 801ace8:	46c0      	nop			; (mov r8, r8)
 801acea:	46bd      	mov	sp, r7
 801acec:	b003      	add	sp, #12
 801acee:	bd90      	pop	{r4, r7, pc}

0801acf0 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801acf0:	b082      	sub	sp, #8
 801acf2:	b580      	push	{r7, lr}
 801acf4:	b086      	sub	sp, #24
 801acf6:	af00      	add	r7, sp, #0
 801acf8:	60f8      	str	r0, [r7, #12]
 801acfa:	1d38      	adds	r0, r7, #4
 801acfc:	6001      	str	r1, [r0, #0]
 801acfe:	6042      	str	r2, [r0, #4]
 801ad00:	2204      	movs	r2, #4
 801ad02:	2120      	movs	r1, #32
 801ad04:	468c      	mov	ip, r1
 801ad06:	44bc      	add	ip, r7
 801ad08:	4462      	add	r2, ip
 801ad0a:	6013      	str	r3, [r2, #0]
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801ad0c:	2110      	movs	r1, #16
 801ad0e:	187b      	adds	r3, r7, r1
 801ad10:	2200      	movs	r2, #0
 801ad12:	601a      	str	r2, [r3, #0]
 801ad14:	187b      	adds	r3, r7, r1
 801ad16:	2200      	movs	r2, #0
 801ad18:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds + b.Seconds;
 801ad1a:	1d3b      	adds	r3, r7, #4
 801ad1c:	681a      	ldr	r2, [r3, #0]
 801ad1e:	2304      	movs	r3, #4
 801ad20:	2020      	movs	r0, #32
 801ad22:	4684      	mov	ip, r0
 801ad24:	44bc      	add	ip, r7
 801ad26:	4463      	add	r3, ip
 801ad28:	681b      	ldr	r3, [r3, #0]
 801ad2a:	18d2      	adds	r2, r2, r3
 801ad2c:	187b      	adds	r3, r7, r1
 801ad2e:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801ad30:	1d3b      	adds	r3, r7, #4
 801ad32:	2204      	movs	r2, #4
 801ad34:	5e9b      	ldrsh	r3, [r3, r2]
 801ad36:	b29a      	uxth	r2, r3
 801ad38:	2304      	movs	r3, #4
 801ad3a:	2020      	movs	r0, #32
 801ad3c:	4684      	mov	ip, r0
 801ad3e:	44bc      	add	ip, r7
 801ad40:	4463      	add	r3, ip
 801ad42:	2004      	movs	r0, #4
 801ad44:	5e1b      	ldrsh	r3, [r3, r0]
 801ad46:	b29b      	uxth	r3, r3
 801ad48:	18d3      	adds	r3, r2, r3
 801ad4a:	b29b      	uxth	r3, r3
 801ad4c:	b21a      	sxth	r2, r3
 801ad4e:	187b      	adds	r3, r7, r1
 801ad50:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds >= 1000 )
 801ad52:	187b      	adds	r3, r7, r1
 801ad54:	2204      	movs	r2, #4
 801ad56:	5e9b      	ldrsh	r3, [r3, r2]
 801ad58:	4a0f      	ldr	r2, [pc, #60]	; (801ad98 <SysTimeAdd+0xa8>)
 801ad5a:	4293      	cmp	r3, r2
 801ad5c:	dd10      	ble.n	801ad80 <SysTimeAdd+0x90>
    {
        c.Seconds++;
 801ad5e:	2110      	movs	r1, #16
 801ad60:	187b      	adds	r3, r7, r1
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	1c5a      	adds	r2, r3, #1
 801ad66:	187b      	adds	r3, r7, r1
 801ad68:	601a      	str	r2, [r3, #0]
        c.SubSeconds -= 1000;
 801ad6a:	187b      	adds	r3, r7, r1
 801ad6c:	2204      	movs	r2, #4
 801ad6e:	5e9b      	ldrsh	r3, [r3, r2]
 801ad70:	b29b      	uxth	r3, r3
 801ad72:	4a0a      	ldr	r2, [pc, #40]	; (801ad9c <SysTimeAdd+0xac>)
 801ad74:	4694      	mov	ip, r2
 801ad76:	4463      	add	r3, ip
 801ad78:	b29b      	uxth	r3, r3
 801ad7a:	b21a      	sxth	r2, r3
 801ad7c:	187b      	adds	r3, r7, r1
 801ad7e:	809a      	strh	r2, [r3, #4]
    }
    return c;
 801ad80:	68fb      	ldr	r3, [r7, #12]
 801ad82:	2210      	movs	r2, #16
 801ad84:	18ba      	adds	r2, r7, r2
 801ad86:	ca03      	ldmia	r2!, {r0, r1}
 801ad88:	c303      	stmia	r3!, {r0, r1}
}
 801ad8a:	68f8      	ldr	r0, [r7, #12]
 801ad8c:	46bd      	mov	sp, r7
 801ad8e:	b006      	add	sp, #24
 801ad90:	bc80      	pop	{r7}
 801ad92:	bc08      	pop	{r3}
 801ad94:	b002      	add	sp, #8
 801ad96:	4718      	bx	r3
 801ad98:	000003e7 	.word	0x000003e7
 801ad9c:	fffffc18 	.word	0xfffffc18

0801ada0 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801ada0:	b082      	sub	sp, #8
 801ada2:	b580      	push	{r7, lr}
 801ada4:	b086      	sub	sp, #24
 801ada6:	af00      	add	r7, sp, #0
 801ada8:	60f8      	str	r0, [r7, #12]
 801adaa:	1d38      	adds	r0, r7, #4
 801adac:	6001      	str	r1, [r0, #0]
 801adae:	6042      	str	r2, [r0, #4]
 801adb0:	2204      	movs	r2, #4
 801adb2:	2120      	movs	r1, #32
 801adb4:	468c      	mov	ip, r1
 801adb6:	44bc      	add	ip, r7
 801adb8:	4462      	add	r2, ip
 801adba:	6013      	str	r3, [r2, #0]
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801adbc:	2110      	movs	r1, #16
 801adbe:	187b      	adds	r3, r7, r1
 801adc0:	2200      	movs	r2, #0
 801adc2:	601a      	str	r2, [r3, #0]
 801adc4:	187b      	adds	r3, r7, r1
 801adc6:	2200      	movs	r2, #0
 801adc8:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds - b.Seconds;
 801adca:	1d3b      	adds	r3, r7, #4
 801adcc:	681a      	ldr	r2, [r3, #0]
 801adce:	2304      	movs	r3, #4
 801add0:	2020      	movs	r0, #32
 801add2:	4684      	mov	ip, r0
 801add4:	44bc      	add	ip, r7
 801add6:	4463      	add	r3, ip
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	1ad2      	subs	r2, r2, r3
 801addc:	187b      	adds	r3, r7, r1
 801adde:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801ade0:	1d3b      	adds	r3, r7, #4
 801ade2:	2204      	movs	r2, #4
 801ade4:	5e9b      	ldrsh	r3, [r3, r2]
 801ade6:	b29a      	uxth	r2, r3
 801ade8:	2304      	movs	r3, #4
 801adea:	2020      	movs	r0, #32
 801adec:	4684      	mov	ip, r0
 801adee:	44bc      	add	ip, r7
 801adf0:	4463      	add	r3, ip
 801adf2:	2004      	movs	r0, #4
 801adf4:	5e1b      	ldrsh	r3, [r3, r0]
 801adf6:	b29b      	uxth	r3, r3
 801adf8:	1ad3      	subs	r3, r2, r3
 801adfa:	b29b      	uxth	r3, r3
 801adfc:	b21a      	sxth	r2, r3
 801adfe:	187b      	adds	r3, r7, r1
 801ae00:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds < 0 )
 801ae02:	187b      	adds	r3, r7, r1
 801ae04:	2204      	movs	r2, #4
 801ae06:	5e9b      	ldrsh	r3, [r3, r2]
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	da11      	bge.n	801ae30 <SysTimeSub+0x90>
    {
        c.Seconds--;
 801ae0c:	2110      	movs	r1, #16
 801ae0e:	187b      	adds	r3, r7, r1
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	1e5a      	subs	r2, r3, #1
 801ae14:	187b      	adds	r3, r7, r1
 801ae16:	601a      	str	r2, [r3, #0]
        c.SubSeconds += 1000;
 801ae18:	187b      	adds	r3, r7, r1
 801ae1a:	2204      	movs	r2, #4
 801ae1c:	5e9b      	ldrsh	r3, [r3, r2]
 801ae1e:	b29b      	uxth	r3, r3
 801ae20:	22fa      	movs	r2, #250	; 0xfa
 801ae22:	0092      	lsls	r2, r2, #2
 801ae24:	4694      	mov	ip, r2
 801ae26:	4463      	add	r3, ip
 801ae28:	b29b      	uxth	r3, r3
 801ae2a:	b21a      	sxth	r2, r3
 801ae2c:	187b      	adds	r3, r7, r1
 801ae2e:	809a      	strh	r2, [r3, #4]
    }
    return c;
 801ae30:	68fb      	ldr	r3, [r7, #12]
 801ae32:	2210      	movs	r2, #16
 801ae34:	18ba      	adds	r2, r7, r2
 801ae36:	ca03      	ldmia	r2!, {r0, r1}
 801ae38:	c303      	stmia	r3!, {r0, r1}
}
 801ae3a:	68f8      	ldr	r0, [r7, #12]
 801ae3c:	46bd      	mov	sp, r7
 801ae3e:	b006      	add	sp, #24
 801ae40:	bc80      	pop	{r7}
 801ae42:	bc08      	pop	{r3}
 801ae44:	b002      	add	sp, #8
 801ae46:	4718      	bx	r3

0801ae48 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801ae48:	b5b0      	push	{r4, r5, r7, lr}
 801ae4a:	b088      	sub	sp, #32
 801ae4c:	af02      	add	r7, sp, #8
 801ae4e:	003b      	movs	r3, r7
 801ae50:	6018      	str	r0, [r3, #0]
 801ae52:	6059      	str	r1, [r3, #4]
    SysTime_t DeltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ae54:	2108      	movs	r1, #8
 801ae56:	187b      	adds	r3, r7, r1
 801ae58:	2200      	movs	r2, #0
 801ae5a:	601a      	str	r2, [r3, #0]
 801ae5c:	187b      	adds	r3, r7, r1
 801ae5e:	2200      	movs	r2, #0
 801ae60:	809a      	strh	r2, [r3, #4]

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ae62:	000c      	movs	r4, r1
 801ae64:	187b      	adds	r3, r7, r1
 801ae66:	3304      	adds	r3, #4
 801ae68:	0018      	movs	r0, r3
 801ae6a:	f7e9 fc03 	bl	8004674 <HW_RTC_GetCalendarTime>
 801ae6e:	0002      	movs	r2, r0
 801ae70:	0021      	movs	r1, r4
 801ae72:	187b      	adds	r3, r7, r1
 801ae74:	601a      	str	r2, [r3, #0]

    // sysTime is epoch
    DeltaTime = SysTimeSub( sysTime, calendarTime );
 801ae76:	2510      	movs	r5, #16
 801ae78:	197c      	adds	r4, r7, r5
 801ae7a:	187b      	adds	r3, r7, r1
 801ae7c:	003a      	movs	r2, r7
 801ae7e:	4669      	mov	r1, sp
 801ae80:	6858      	ldr	r0, [r3, #4]
 801ae82:	6008      	str	r0, [r1, #0]
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	6811      	ldr	r1, [r2, #0]
 801ae88:	6852      	ldr	r2, [r2, #4]
 801ae8a:	0020      	movs	r0, r4
 801ae8c:	f7ff ff88 	bl	801ada0 <SysTimeSub>

    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
 801ae90:	197b      	adds	r3, r7, r5
 801ae92:	681a      	ldr	r2, [r3, #0]
 801ae94:	197b      	adds	r3, r7, r5
 801ae96:	2104      	movs	r1, #4
 801ae98:	5e5b      	ldrsh	r3, [r3, r1]
 801ae9a:	0019      	movs	r1, r3
 801ae9c:	0010      	movs	r0, r2
 801ae9e:	f7e9 fc13 	bl	80046c8 <HW_RTC_BKUPWrite>
}
 801aea2:	46c0      	nop			; (mov r8, r8)
 801aea4:	46bd      	mov	sp, r7
 801aea6:	b006      	add	sp, #24
 801aea8:	bdb0      	pop	{r4, r5, r7, pc}

0801aeaa <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801aeaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aeac:	b08b      	sub	sp, #44	; 0x2c
 801aeae:	af02      	add	r7, sp, #8
 801aeb0:	6078      	str	r0, [r7, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801aeb2:	2518      	movs	r5, #24
 801aeb4:	197b      	adds	r3, r7, r5
 801aeb6:	2200      	movs	r2, #0
 801aeb8:	601a      	str	r2, [r3, #0]
 801aeba:	197b      	adds	r3, r7, r5
 801aebc:	2200      	movs	r2, #0
 801aebe:	809a      	strh	r2, [r3, #4]
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801aec0:	2410      	movs	r4, #16
 801aec2:	193b      	adds	r3, r7, r4
 801aec4:	2200      	movs	r2, #0
 801aec6:	601a      	str	r2, [r3, #0]
 801aec8:	193b      	adds	r3, r7, r4
 801aeca:	2200      	movs	r2, #0
 801aecc:	809a      	strh	r2, [r3, #4]
    SysTime_t DeltaTime;

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801aece:	197b      	adds	r3, r7, r5
 801aed0:	3304      	adds	r3, #4
 801aed2:	0018      	movs	r0, r3
 801aed4:	f7e9 fbce 	bl	8004674 <HW_RTC_GetCalendarTime>
 801aed8:	0002      	movs	r2, r0
 801aeda:	197b      	adds	r3, r7, r5
 801aedc:	601a      	str	r2, [r3, #0]

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 801aede:	2108      	movs	r1, #8
 801aee0:	187b      	adds	r3, r7, r1
 801aee2:	1d1a      	adds	r2, r3, #4
 801aee4:	187b      	adds	r3, r7, r1
 801aee6:	0011      	movs	r1, r2
 801aee8:	0018      	movs	r0, r3
 801aeea:	f7e9 fc05 	bl	80046f8 <HW_RTC_BKUPRead>

    sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801aeee:	0026      	movs	r6, r4
 801aef0:	193c      	adds	r4, r7, r4
 801aef2:	197b      	adds	r3, r7, r5
 801aef4:	2108      	movs	r1, #8
 801aef6:	187a      	adds	r2, r7, r1
 801aef8:	4669      	mov	r1, sp
 801aefa:	6858      	ldr	r0, [r3, #4]
 801aefc:	6008      	str	r0, [r1, #0]
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	6811      	ldr	r1, [r2, #0]
 801af02:	6852      	ldr	r2, [r2, #4]
 801af04:	0020      	movs	r0, r4
 801af06:	f7ff fef3 	bl	801acf0 <SysTimeAdd>

    return sysTime;
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	0034      	movs	r4, r6
 801af0e:	193a      	adds	r2, r7, r4
 801af10:	ca03      	ldmia	r2!, {r0, r1}
 801af12:	c303      	stmia	r3!, {r0, r1}
}
 801af14:	6878      	ldr	r0, [r7, #4]
 801af16:	46bd      	mov	sp, r7
 801af18:	b009      	add	sp, #36	; 0x24
 801af1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801af1c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801af1c:	b590      	push	{r4, r7, lr}
 801af1e:	b085      	sub	sp, #20
 801af20:	af00      	add	r7, sp, #0
 801af22:	6078      	str	r0, [r7, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801af24:	2408      	movs	r4, #8
 801af26:	193b      	adds	r3, r7, r4
 801af28:	2200      	movs	r2, #0
 801af2a:	601a      	str	r2, [r3, #0]
 801af2c:	193b      	adds	r3, r7, r4
 801af2e:	2200      	movs	r2, #0
 801af30:	809a      	strh	r2, [r3, #4]

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801af32:	193b      	adds	r3, r7, r4
 801af34:	3304      	adds	r3, #4
 801af36:	0018      	movs	r0, r3
 801af38:	f7e9 fb9c 	bl	8004674 <HW_RTC_GetCalendarTime>
 801af3c:	0002      	movs	r2, r0
 801af3e:	193b      	adds	r3, r7, r4
 801af40:	601a      	str	r2, [r3, #0]
    
    return calendarTime;
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	193a      	adds	r2, r7, r4
 801af46:	ca03      	ldmia	r2!, {r0, r1}
 801af48:	c303      	stmia	r3!, {r0, r1}
}
 801af4a:	6878      	ldr	r0, [r7, #4]
 801af4c:	46bd      	mov	sp, r7
 801af4e:	b005      	add	sp, #20
 801af50:	bd90      	pop	{r4, r7, pc}

0801af52 <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 801af52:	b580      	push	{r7, lr}
 801af54:	b082      	sub	sp, #8
 801af56:	af00      	add	r7, sp, #0
 801af58:	6078      	str	r0, [r7, #4]
 801af5a:	6039      	str	r1, [r7, #0]
  obj->Timestamp = 0;
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	2200      	movs	r2, #0
 801af60:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	2200      	movs	r2, #0
 801af66:	605a      	str	r2, [r3, #4]
  obj->IsStarted = false;
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	2200      	movs	r2, #0
 801af6c:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	2200      	movs	r2, #0
 801af72:	725a      	strb	r2, [r3, #9]
  obj->Callback = callback;
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	683a      	ldr	r2, [r7, #0]
 801af78:	60da      	str	r2, [r3, #12]
  obj->Context = NULL;
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	2200      	movs	r2, #0
 801af7e:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	2200      	movs	r2, #0
 801af84:	615a      	str	r2, [r3, #20]
}
 801af86:	46c0      	nop			; (mov r8, r8)
 801af88:	46bd      	mov	sp, r7
 801af8a:	b002      	add	sp, #8
 801af8c:	bd80      	pop	{r7, pc}
	...

0801af90 <TimerStart>:
{
  obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 801af90:	b580      	push	{r7, lr}
 801af92:	b088      	sub	sp, #32
 801af94:	af00      	add	r7, sp, #0
 801af96:	6078      	str	r0, [r7, #4]
  uint32_t elapsedTime = 0;
 801af98:	2300      	movs	r3, #0
 801af9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801af9c:	f3ef 8310 	mrs	r3, PRIMASK
 801afa0:	617b      	str	r3, [r7, #20]
  return(result);
 801afa2:	697b      	ldr	r3, [r7, #20]
  
  BACKUP_PRIMASK();
 801afa4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801afa6:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  

  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d005      	beq.n	801afba <TimerStart+0x2a>
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	0018      	movs	r0, r3
 801afb2:	f000 f993 	bl	801b2dc <TimerExists>
 801afb6:	1e03      	subs	r3, r0, #0
 801afb8:	d005      	beq.n	801afc6 <TimerStart+0x36>
 801afba:	69bb      	ldr	r3, [r7, #24]
 801afbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801afbe:	693b      	ldr	r3, [r7, #16]
 801afc0:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 801afc4:	e033      	b.n	801b02e <TimerStart+0x9e>
  }
  obj->Timestamp = obj->ReloadValue;
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	685a      	ldr	r2, [r3, #4]
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	601a      	str	r2, [r3, #0]
  obj->IsStarted = true;
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	2201      	movs	r2, #1
 801afd2:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	2200      	movs	r2, #0
 801afd8:	725a      	strb	r2, [r3, #9]

  if( TimerListHead == NULL )
 801afda:	4b16      	ldr	r3, [pc, #88]	; (801b034 <TimerStart+0xa4>)
 801afdc:	681b      	ldr	r3, [r3, #0]
 801afde:	2b00      	cmp	r3, #0
 801afe0:	d106      	bne.n	801aff0 <TimerStart+0x60>
  {
    HW_RTC_SetTimerContext( );
 801afe2:	f7e9 f8fd 	bl	80041e0 <HW_RTC_SetTimerContext>
    TimerInsertNewHeadTimer( obj ); // insert a timeout at now+obj->Timestamp
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	0018      	movs	r0, r3
 801afea:	f000 f9e5 	bl	801b3b8 <TimerInsertNewHeadTimer>
 801afee:	e019      	b.n	801b024 <TimerStart+0x94>
  }
  else 
  {
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 801aff0:	f7e9 f858 	bl	80040a4 <HW_RTC_GetTimerElapsedTime>
 801aff4:	0003      	movs	r3, r0
 801aff6:	61fb      	str	r3, [r7, #28]
    obj->Timestamp += elapsedTime;
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	681a      	ldr	r2, [r3, #0]
 801affc:	69fb      	ldr	r3, [r7, #28]
 801affe:	18d2      	adds	r2, r2, r3
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	601a      	str	r2, [r3, #0]
  
    if( obj->Timestamp < TimerListHead->Timestamp )
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	681a      	ldr	r2, [r3, #0]
 801b008:	4b0a      	ldr	r3, [pc, #40]	; (801b034 <TimerStart+0xa4>)
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	429a      	cmp	r2, r3
 801b010:	d204      	bcs.n	801b01c <TimerStart+0x8c>
    {
      TimerInsertNewHeadTimer( obj);
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	0018      	movs	r0, r3
 801b016:	f000 f9cf 	bl	801b3b8 <TimerInsertNewHeadTimer>
 801b01a:	e003      	b.n	801b024 <TimerStart+0x94>
    }
    else
    {
      TimerInsertTimer( obj);
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	0018      	movs	r0, r3
 801b020:	f000 f99c 	bl	801b35c <TimerInsertTimer>
 801b024:	69bb      	ldr	r3, [r7, #24]
 801b026:	60fb      	str	r3, [r7, #12]
 801b028:	68fb      	ldr	r3, [r7, #12]
 801b02a:	f383 8810 	msr	PRIMASK, r3
    }
  }
  RESTORE_PRIMASK( );
}
 801b02e:	46bd      	mov	sp, r7
 801b030:	b008      	add	sp, #32
 801b032:	bd80      	pop	{r7, pc}
 801b034:	20001304 	.word	0x20001304

0801b038 <TimerIrqHandler>:
{
  return obj->IsStarted;
}

void TimerIrqHandler( void )
{
 801b038:	b590      	push	{r4, r7, lr}
 801b03a:	b087      	sub	sp, #28
 801b03c:	af00      	add	r7, sp, #0
  TimerEvent_t* cur;
  TimerEvent_t* next;
  

  
  uint32_t old =  HW_RTC_GetTimerContext( );
 801b03e:	f7e9 f8e7 	bl	8004210 <HW_RTC_GetTimerContext>
 801b042:	0003      	movs	r3, r0
 801b044:	613b      	str	r3, [r7, #16]
  uint32_t now =  HW_RTC_SetTimerContext( );
 801b046:	f7e9 f8cb 	bl	80041e0 <HW_RTC_SetTimerContext>
 801b04a:	0003      	movs	r3, r0
 801b04c:	60fb      	str	r3, [r7, #12]
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 801b04e:	68fa      	ldr	r2, [r7, #12]
 801b050:	693b      	ldr	r3, [r7, #16]
 801b052:	1ad3      	subs	r3, r2, r3
 801b054:	60bb      	str	r3, [r7, #8]
  
  /* Update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801b056:	4b39      	ldr	r3, [pc, #228]	; (801b13c <TimerIrqHandler+0x104>)
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d01c      	beq.n	801b098 <TimerIrqHandler+0x60>
  {
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 801b05e:	4b37      	ldr	r3, [pc, #220]	; (801b13c <TimerIrqHandler+0x104>)
 801b060:	681b      	ldr	r3, [r3, #0]
 801b062:	617b      	str	r3, [r7, #20]
 801b064:	e014      	b.n	801b090 <TimerIrqHandler+0x58>
    {
      next =cur->Next;
 801b066:	697b      	ldr	r3, [r7, #20]
 801b068:	695b      	ldr	r3, [r3, #20]
 801b06a:	607b      	str	r3, [r7, #4]
      if (next->Timestamp > DeltaContext)
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	68ba      	ldr	r2, [r7, #8]
 801b072:	429a      	cmp	r2, r3
 801b074:	d206      	bcs.n	801b084 <TimerIrqHandler+0x4c>
      {
        next->Timestamp -= DeltaContext;
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	681a      	ldr	r2, [r3, #0]
 801b07a:	68bb      	ldr	r3, [r7, #8]
 801b07c:	1ad2      	subs	r2, r2, r3
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	601a      	str	r2, [r3, #0]
 801b082:	e002      	b.n	801b08a <TimerIrqHandler+0x52>
      }
      else
      {
        next->Timestamp = 0 ;
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	2200      	movs	r2, #0
 801b088:	601a      	str	r2, [r3, #0]
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 801b08a:	697b      	ldr	r3, [r7, #20]
 801b08c:	695b      	ldr	r3, [r3, #20]
 801b08e:	617b      	str	r3, [r7, #20]
 801b090:	697b      	ldr	r3, [r7, #20]
 801b092:	695b      	ldr	r3, [r3, #20]
 801b094:	2b00      	cmp	r3, #0
 801b096:	d1e6      	bne.n	801b066 <TimerIrqHandler+0x2e>
      }
    }
  }
  
  /* execute imediately the alarm callback */
  if ( TimerListHead != NULL )
 801b098:	4b28      	ldr	r3, [pc, #160]	; (801b13c <TimerIrqHandler+0x104>)
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d02c      	beq.n	801b0fa <TimerIrqHandler+0xc2>
  {
    cur = TimerListHead;
 801b0a0:	4b26      	ldr	r3, [pc, #152]	; (801b13c <TimerIrqHandler+0x104>)
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	617b      	str	r3, [r7, #20]
    TimerListHead = TimerListHead->Next;
 801b0a6:	4b25      	ldr	r3, [pc, #148]	; (801b13c <TimerIrqHandler+0x104>)
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	695a      	ldr	r2, [r3, #20]
 801b0ac:	4b23      	ldr	r3, [pc, #140]	; (801b13c <TimerIrqHandler+0x104>)
 801b0ae:	601a      	str	r2, [r3, #0]
    cur->IsStarted = false;
 801b0b0:	697b      	ldr	r3, [r7, #20]
 801b0b2:	2200      	movs	r2, #0
 801b0b4:	721a      	strb	r2, [r3, #8]
    exec_cb( cur->Callback, cur->Context );
 801b0b6:	697b      	ldr	r3, [r7, #20]
 801b0b8:	68db      	ldr	r3, [r3, #12]
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d100      	bne.n	801b0c0 <TimerIrqHandler+0x88>
 801b0be:	e7fe      	b.n	801b0be <TimerIrqHandler+0x86>
 801b0c0:	697b      	ldr	r3, [r7, #20]
 801b0c2:	68da      	ldr	r2, [r3, #12]
 801b0c4:	697b      	ldr	r3, [r7, #20]
 801b0c6:	691b      	ldr	r3, [r3, #16]
 801b0c8:	0018      	movs	r0, r3
 801b0ca:	4790      	blx	r2
  }


  // remove all the expired object from the list
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 801b0cc:	e015      	b.n	801b0fa <TimerIrqHandler+0xc2>
  {
   cur = TimerListHead;
 801b0ce:	4b1b      	ldr	r3, [pc, #108]	; (801b13c <TimerIrqHandler+0x104>)
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	617b      	str	r3, [r7, #20]
   TimerListHead = TimerListHead->Next;
 801b0d4:	4b19      	ldr	r3, [pc, #100]	; (801b13c <TimerIrqHandler+0x104>)
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	695a      	ldr	r2, [r3, #20]
 801b0da:	4b18      	ldr	r3, [pc, #96]	; (801b13c <TimerIrqHandler+0x104>)
 801b0dc:	601a      	str	r2, [r3, #0]
   cur->IsStarted = false;
 801b0de:	697b      	ldr	r3, [r7, #20]
 801b0e0:	2200      	movs	r2, #0
 801b0e2:	721a      	strb	r2, [r3, #8]
   exec_cb( cur->Callback, cur->Context );
 801b0e4:	697b      	ldr	r3, [r7, #20]
 801b0e6:	68db      	ldr	r3, [r3, #12]
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d100      	bne.n	801b0ee <TimerIrqHandler+0xb6>
 801b0ec:	e7fe      	b.n	801b0ec <TimerIrqHandler+0xb4>
 801b0ee:	697b      	ldr	r3, [r7, #20]
 801b0f0:	68da      	ldr	r2, [r3, #12]
 801b0f2:	697b      	ldr	r3, [r7, #20]
 801b0f4:	691b      	ldr	r3, [r3, #16]
 801b0f6:	0018      	movs	r0, r3
 801b0f8:	4790      	blx	r2
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 801b0fa:	4b10      	ldr	r3, [pc, #64]	; (801b13c <TimerIrqHandler+0x104>)
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d007      	beq.n	801b112 <TimerIrqHandler+0xda>
 801b102:	4b0e      	ldr	r3, [pc, #56]	; (801b13c <TimerIrqHandler+0x104>)
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	681c      	ldr	r4, [r3, #0]
 801b108:	f7e8 ffcc 	bl	80040a4 <HW_RTC_GetTimerElapsedTime>
 801b10c:	0003      	movs	r3, r0
 801b10e:	429c      	cmp	r4, r3
 801b110:	d3dd      	bcc.n	801b0ce <TimerIrqHandler+0x96>
  }

  /* start the next TimerListHead if it exists AND NOT running */
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 801b112:	4b0a      	ldr	r3, [pc, #40]	; (801b13c <TimerIrqHandler+0x104>)
 801b114:	681b      	ldr	r3, [r3, #0]
 801b116:	2b00      	cmp	r3, #0
 801b118:	d00c      	beq.n	801b134 <TimerIrqHandler+0xfc>
 801b11a:	4b08      	ldr	r3, [pc, #32]	; (801b13c <TimerIrqHandler+0x104>)
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	7a5b      	ldrb	r3, [r3, #9]
 801b120:	2201      	movs	r2, #1
 801b122:	4053      	eors	r3, r2
 801b124:	b2db      	uxtb	r3, r3
 801b126:	2b00      	cmp	r3, #0
 801b128:	d004      	beq.n	801b134 <TimerIrqHandler+0xfc>
  {
    TimerSetTimeout( TimerListHead );
 801b12a:	4b04      	ldr	r3, [pc, #16]	; (801b13c <TimerIrqHandler+0x104>)
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	0018      	movs	r0, r3
 801b130:	f000 f8f0 	bl	801b314 <TimerSetTimeout>
  }
}
 801b134:	46c0      	nop			; (mov r8, r8)
 801b136:	46bd      	mov	sp, r7
 801b138:	b007      	add	sp, #28
 801b13a:	bd90      	pop	{r4, r7, pc}
 801b13c:	20001304 	.word	0x20001304

0801b140 <TimerStop>:

void TimerStop( TimerEvent_t *obj ) 
{
 801b140:	b580      	push	{r7, lr}
 801b142:	b088      	sub	sp, #32
 801b144:	af00      	add	r7, sp, #0
 801b146:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b148:	f3ef 8310 	mrs	r3, PRIMASK
 801b14c:	613b      	str	r3, [r7, #16]
  return(result);
 801b14e:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 801b150:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b152:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  TimerEvent_t* prev = TimerListHead;
 801b154:	4b36      	ldr	r3, [pc, #216]	; (801b230 <TimerStop+0xf0>)
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	61fb      	str	r3, [r7, #28]
  TimerEvent_t* cur = TimerListHead;
 801b15a:	4b35      	ldr	r3, [pc, #212]	; (801b230 <TimerStop+0xf0>)
 801b15c:	681b      	ldr	r3, [r3, #0]
 801b15e:	61bb      	str	r3, [r7, #24]

  // List is empty or the Obj to stop does not exist 
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 801b160:	4b33      	ldr	r3, [pc, #204]	; (801b230 <TimerStop+0xf0>)
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	2b00      	cmp	r3, #0
 801b166:	d002      	beq.n	801b16e <TimerStop+0x2e>
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d105      	bne.n	801b17a <TimerStop+0x3a>
 801b16e:	697b      	ldr	r3, [r7, #20]
 801b170:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b172:	68fb      	ldr	r3, [r7, #12]
 801b174:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 801b178:	e057      	b.n	801b22a <TimerStop+0xea>
  }

  obj->IsStarted = false;
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	2200      	movs	r2, #0
 801b17e:	721a      	strb	r2, [r3, #8]

  if( TimerListHead == obj ) // Stop the Head                  
 801b180:	4b2b      	ldr	r3, [pc, #172]	; (801b230 <TimerStop+0xf0>)
 801b182:	681b      	ldr	r3, [r3, #0]
 801b184:	687a      	ldr	r2, [r7, #4]
 801b186:	429a      	cmp	r2, r3
 801b188:	d147      	bne.n	801b21a <TimerStop+0xda>
  {
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 801b18a:	4b29      	ldr	r3, [pc, #164]	; (801b230 <TimerStop+0xf0>)
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	7a5b      	ldrb	r3, [r3, #9]
 801b190:	2b00      	cmp	r3, #0
 801b192:	d019      	beq.n	801b1c8 <TimerStop+0x88>
    {  
	  
      TimerListHead->IsNext2Expire = false;
 801b194:	4b26      	ldr	r3, [pc, #152]	; (801b230 <TimerStop+0xf0>)
 801b196:	681b      	ldr	r3, [r3, #0]
 801b198:	2200      	movs	r2, #0
 801b19a:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 801b19c:	4b24      	ldr	r3, [pc, #144]	; (801b230 <TimerStop+0xf0>)
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	695b      	ldr	r3, [r3, #20]
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d00a      	beq.n	801b1bc <TimerStop+0x7c>
      {
        TimerListHead = TimerListHead->Next;
 801b1a6:	4b22      	ldr	r3, [pc, #136]	; (801b230 <TimerStop+0xf0>)
 801b1a8:	681b      	ldr	r3, [r3, #0]
 801b1aa:	695a      	ldr	r2, [r3, #20]
 801b1ac:	4b20      	ldr	r3, [pc, #128]	; (801b230 <TimerStop+0xf0>)
 801b1ae:	601a      	str	r2, [r3, #0]
        TimerSetTimeout( TimerListHead );
 801b1b0:	4b1f      	ldr	r3, [pc, #124]	; (801b230 <TimerStop+0xf0>)
 801b1b2:	681b      	ldr	r3, [r3, #0]
 801b1b4:	0018      	movs	r0, r3
 801b1b6:	f000 f8ad 	bl	801b314 <TimerSetTimeout>
 801b1ba:	e031      	b.n	801b220 <TimerStop+0xe0>
      }
      else
      {
        HW_RTC_StopAlarm( );
 801b1bc:	f7e8 ff9c 	bl	80040f8 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 801b1c0:	4b1b      	ldr	r3, [pc, #108]	; (801b230 <TimerStop+0xf0>)
 801b1c2:	2200      	movs	r2, #0
 801b1c4:	601a      	str	r2, [r3, #0]
 801b1c6:	e02b      	b.n	801b220 <TimerStop+0xe0>
      }
    }
    else // Stop the head before it is started
    {   
      if( TimerListHead->Next != NULL )   
 801b1c8:	4b19      	ldr	r3, [pc, #100]	; (801b230 <TimerStop+0xf0>)
 801b1ca:	681b      	ldr	r3, [r3, #0]
 801b1cc:	695b      	ldr	r3, [r3, #20]
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	d005      	beq.n	801b1de <TimerStop+0x9e>
      {
        TimerListHead = TimerListHead->Next;
 801b1d2:	4b17      	ldr	r3, [pc, #92]	; (801b230 <TimerStop+0xf0>)
 801b1d4:	681b      	ldr	r3, [r3, #0]
 801b1d6:	695a      	ldr	r2, [r3, #20]
 801b1d8:	4b15      	ldr	r3, [pc, #84]	; (801b230 <TimerStop+0xf0>)
 801b1da:	601a      	str	r2, [r3, #0]
 801b1dc:	e020      	b.n	801b220 <TimerStop+0xe0>
      }
      else
      {
        TimerListHead = NULL;
 801b1de:	4b14      	ldr	r3, [pc, #80]	; (801b230 <TimerStop+0xf0>)
 801b1e0:	2200      	movs	r2, #0
 801b1e2:	601a      	str	r2, [r3, #0]
 801b1e4:	e01c      	b.n	801b220 <TimerStop+0xe0>
  }
  else // Stop an object within the list
  {      
    while( cur != NULL )
    {
      if( cur == obj )
 801b1e6:	69ba      	ldr	r2, [r7, #24]
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	429a      	cmp	r2, r3
 801b1ec:	d110      	bne.n	801b210 <TimerStop+0xd0>
      {
        if( cur->Next != NULL )
 801b1ee:	69bb      	ldr	r3, [r7, #24]
 801b1f0:	695b      	ldr	r3, [r3, #20]
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d006      	beq.n	801b204 <TimerStop+0xc4>
        {
          cur = cur->Next;
 801b1f6:	69bb      	ldr	r3, [r7, #24]
 801b1f8:	695b      	ldr	r3, [r3, #20]
 801b1fa:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 801b1fc:	69fb      	ldr	r3, [r7, #28]
 801b1fe:	69ba      	ldr	r2, [r7, #24]
 801b200:	615a      	str	r2, [r3, #20]
        else
        {
          cur = NULL;
          prev->Next = cur;
        }
        break;
 801b202:	e00d      	b.n	801b220 <TimerStop+0xe0>
          cur = NULL;
 801b204:	2300      	movs	r3, #0
 801b206:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 801b208:	69fb      	ldr	r3, [r7, #28]
 801b20a:	69ba      	ldr	r2, [r7, #24]
 801b20c:	615a      	str	r2, [r3, #20]
        break;
 801b20e:	e007      	b.n	801b220 <TimerStop+0xe0>
      }
      else
      {
        prev = cur;
 801b210:	69bb      	ldr	r3, [r7, #24]
 801b212:	61fb      	str	r3, [r7, #28]
        cur = cur->Next;
 801b214:	69bb      	ldr	r3, [r7, #24]
 801b216:	695b      	ldr	r3, [r3, #20]
 801b218:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 801b21a:	69bb      	ldr	r3, [r7, #24]
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d1e2      	bne.n	801b1e6 <TimerStop+0xa6>
 801b220:	697b      	ldr	r3, [r7, #20]
 801b222:	60bb      	str	r3, [r7, #8]
 801b224:	68bb      	ldr	r3, [r7, #8]
 801b226:	f383 8810 	msr	PRIMASK, r3
      }
    }   
  }
  
  RESTORE_PRIMASK( );
}  
 801b22a:	46bd      	mov	sp, r7
 801b22c:	b008      	add	sp, #32
 801b22e:	bd80      	pop	{r7, pc}
 801b230:	20001304 	.word	0x20001304

0801b234 <TimerSetValue>:
  TimerStop( obj );
  TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 801b234:	b580      	push	{r7, lr}
 801b236:	b084      	sub	sp, #16
 801b238:	af00      	add	r7, sp, #0
 801b23a:	6078      	str	r0, [r7, #4]
 801b23c:	6039      	str	r1, [r7, #0]
  uint32_t minValue = 0;
 801b23e:	2300      	movs	r3, #0
 801b240:	60bb      	str	r3, [r7, #8]
  uint32_t ticks = HW_RTC_ms2Tick( value );
 801b242:	683b      	ldr	r3, [r7, #0]
 801b244:	0018      	movs	r0, r3
 801b246:	f7e8 fec5 	bl	8003fd4 <HW_RTC_ms2Tick>
 801b24a:	0003      	movs	r3, r0
 801b24c:	60fb      	str	r3, [r7, #12]

  TimerStop( obj );
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	0018      	movs	r0, r3
 801b252:	f7ff ff75 	bl	801b140 <TimerStop>

  minValue = HW_RTC_GetMinimumTimeout( );
 801b256:	f7e8 feb7 	bl	8003fc8 <HW_RTC_GetMinimumTimeout>
 801b25a:	0003      	movs	r3, r0
 801b25c:	60bb      	str	r3, [r7, #8]
  
  if( ticks < minValue )
 801b25e:	68fa      	ldr	r2, [r7, #12]
 801b260:	68bb      	ldr	r3, [r7, #8]
 801b262:	429a      	cmp	r2, r3
 801b264:	d201      	bcs.n	801b26a <TimerSetValue+0x36>
  {
    ticks = minValue;
 801b266:	68bb      	ldr	r3, [r7, #8]
 801b268:	60fb      	str	r3, [r7, #12]
  }

  obj->Timestamp = ticks;
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	68fa      	ldr	r2, [r7, #12]
 801b26e:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = ticks;
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	68fa      	ldr	r2, [r7, #12]
 801b274:	605a      	str	r2, [r3, #4]
}
 801b276:	46c0      	nop			; (mov r8, r8)
 801b278:	46bd      	mov	sp, r7
 801b27a:	b004      	add	sp, #16
 801b27c:	bd80      	pop	{r7, pc}

0801b27e <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 801b27e:	b580      	push	{r7, lr}
 801b280:	b082      	sub	sp, #8
 801b282:	af00      	add	r7, sp, #0
  uint32_t now = HW_RTC_GetTimerValue( );
 801b284:	f7e8 ff26 	bl	80040d4 <HW_RTC_GetTimerValue>
 801b288:	0003      	movs	r3, r0
 801b28a:	607b      	str	r3, [r7, #4]
  return  HW_RTC_Tick2ms(now);
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	0018      	movs	r0, r3
 801b290:	f7e8 feb8 	bl	8004004 <HW_RTC_Tick2ms>
 801b294:	0003      	movs	r3, r0
}
 801b296:	0018      	movs	r0, r3
 801b298:	46bd      	mov	sp, r7
 801b29a:	b002      	add	sp, #8
 801b29c:	bd80      	pop	{r7, pc}

0801b29e <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 801b29e:	b580      	push	{r7, lr}
 801b2a0:	b084      	sub	sp, #16
 801b2a2:	af00      	add	r7, sp, #0
 801b2a4:	6078      	str	r0, [r7, #4]
  if ( past == 0 )
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d101      	bne.n	801b2b0 <TimerGetElapsedTime+0x12>
  {
    return 0;
 801b2ac:	2300      	movs	r3, #0
 801b2ae:	e010      	b.n	801b2d2 <TimerGetElapsedTime+0x34>
  }
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 801b2b0:	f7e8 ff10 	bl	80040d4 <HW_RTC_GetTimerValue>
 801b2b4:	0003      	movs	r3, r0
 801b2b6:	60fb      	str	r3, [r7, #12]
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	0018      	movs	r0, r3
 801b2bc:	f7e8 fe8a 	bl	8003fd4 <HW_RTC_ms2Tick>
 801b2c0:	0003      	movs	r3, r0
 801b2c2:	60bb      	str	r3, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 801b2c4:	68fa      	ldr	r2, [r7, #12]
 801b2c6:	68bb      	ldr	r3, [r7, #8]
 801b2c8:	1ad3      	subs	r3, r2, r3
 801b2ca:	0018      	movs	r0, r3
 801b2cc:	f7e8 fe9a 	bl	8004004 <HW_RTC_Tick2ms>
 801b2d0:	0003      	movs	r3, r0
}
 801b2d2:	0018      	movs	r0, r3
 801b2d4:	46bd      	mov	sp, r7
 801b2d6:	b004      	add	sp, #16
 801b2d8:	bd80      	pop	{r7, pc}
	...

0801b2dc <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 801b2dc:	b580      	push	{r7, lr}
 801b2de:	b084      	sub	sp, #16
 801b2e0:	af00      	add	r7, sp, #0
 801b2e2:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 801b2e4:	4b0a      	ldr	r3, [pc, #40]	; (801b310 <TimerExists+0x34>)
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801b2ea:	e008      	b.n	801b2fe <TimerExists+0x22>
  {
    if( cur == obj )
 801b2ec:	68fa      	ldr	r2, [r7, #12]
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	429a      	cmp	r2, r3
 801b2f2:	d101      	bne.n	801b2f8 <TimerExists+0x1c>
    {
      return true;
 801b2f4:	2301      	movs	r3, #1
 801b2f6:	e006      	b.n	801b306 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801b2f8:	68fb      	ldr	r3, [r7, #12]
 801b2fa:	695b      	ldr	r3, [r3, #20]
 801b2fc:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801b2fe:	68fb      	ldr	r3, [r7, #12]
 801b300:	2b00      	cmp	r3, #0
 801b302:	d1f3      	bne.n	801b2ec <TimerExists+0x10>
  }
  return false;
 801b304:	2300      	movs	r3, #0
}
 801b306:	0018      	movs	r0, r3
 801b308:	46bd      	mov	sp, r7
 801b30a:	b004      	add	sp, #16
 801b30c:	bd80      	pop	{r7, pc}
 801b30e:	46c0      	nop			; (mov r8, r8)
 801b310:	20001304 	.word	0x20001304

0801b314 <TimerSetTimeout>:
static void TimerSetTimeout( TimerEvent_t *obj )
{
 801b314:	b590      	push	{r4, r7, lr}
 801b316:	b085      	sub	sp, #20
 801b318:	af00      	add	r7, sp, #0
 801b31a:	6078      	str	r0, [r7, #4]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 801b31c:	f7e8 fe54 	bl	8003fc8 <HW_RTC_GetMinimumTimeout>
 801b320:	0003      	movs	r3, r0
 801b322:	60fb      	str	r3, [r7, #12]
  obj->IsNext2Expire = true; 
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	2201      	movs	r2, #1
 801b328:	725a      	strb	r2, [r3, #9]

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	681c      	ldr	r4, [r3, #0]
 801b32e:	f7e8 feb9 	bl	80040a4 <HW_RTC_GetTimerElapsedTime>
 801b332:	0002      	movs	r2, r0
 801b334:	68fb      	ldr	r3, [r7, #12]
 801b336:	18d3      	adds	r3, r2, r3
 801b338:	429c      	cmp	r4, r3
 801b33a:	d206      	bcs.n	801b34a <TimerSetTimeout+0x36>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 801b33c:	f7e8 feb2 	bl	80040a4 <HW_RTC_GetTimerElapsedTime>
 801b340:	0002      	movs	r2, r0
 801b342:	68fb      	ldr	r3, [r7, #12]
 801b344:	18d2      	adds	r2, r2, r3
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	601a      	str	r2, [r3, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	681b      	ldr	r3, [r3, #0]
 801b34e:	0018      	movs	r0, r3
 801b350:	f7e8 fe78 	bl	8004044 <HW_RTC_SetAlarm>
}
 801b354:	46c0      	nop			; (mov r8, r8)
 801b356:	46bd      	mov	sp, r7
 801b358:	b005      	add	sp, #20
 801b35a:	bd90      	pop	{r4, r7, pc}

0801b35c <TimerInsertTimer>:
    return RtcTempCompensation( period, temperature );
}


static void TimerInsertTimer( TimerEvent_t *obj)
{
 801b35c:	b580      	push	{r7, lr}
 801b35e:	b084      	sub	sp, #16
 801b360:	af00      	add	r7, sp, #0
 801b362:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 801b364:	4b13      	ldr	r3, [pc, #76]	; (801b3b4 <TimerInsertTimer+0x58>)
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	60fb      	str	r3, [r7, #12]
  TimerEvent_t* next = TimerListHead->Next;
 801b36a:	4b12      	ldr	r3, [pc, #72]	; (801b3b4 <TimerInsertTimer+0x58>)
 801b36c:	681b      	ldr	r3, [r3, #0]
 801b36e:	695b      	ldr	r3, [r3, #20]
 801b370:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801b372:	e012      	b.n	801b39a <TimerInsertTimer+0x3e>
  {  
    if( obj->Timestamp  > next->Timestamp )
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	681a      	ldr	r2, [r3, #0]
 801b378:	68bb      	ldr	r3, [r7, #8]
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	429a      	cmp	r2, r3
 801b37e:	d905      	bls.n	801b38c <TimerInsertTimer+0x30>
    {
        cur = next;
 801b380:	68bb      	ldr	r3, [r7, #8]
 801b382:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801b384:	68bb      	ldr	r3, [r7, #8]
 801b386:	695b      	ldr	r3, [r3, #20]
 801b388:	60bb      	str	r3, [r7, #8]
 801b38a:	e006      	b.n	801b39a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = obj;
 801b38c:	68fb      	ldr	r3, [r7, #12]
 801b38e:	687a      	ldr	r2, [r7, #4]
 801b390:	615a      	str	r2, [r3, #20]
        obj->Next = next;
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	68ba      	ldr	r2, [r7, #8]
 801b396:	615a      	str	r2, [r3, #20]
        return;
 801b398:	e009      	b.n	801b3ae <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801b39a:	68fb      	ldr	r3, [r7, #12]
 801b39c:	695b      	ldr	r3, [r3, #20]
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	d1e8      	bne.n	801b374 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = obj;
 801b3a2:	68fb      	ldr	r3, [r7, #12]
 801b3a4:	687a      	ldr	r2, [r7, #4]
 801b3a6:	615a      	str	r2, [r3, #20]
  obj->Next = NULL;
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	2200      	movs	r2, #0
 801b3ac:	615a      	str	r2, [r3, #20]
}
 801b3ae:	46bd      	mov	sp, r7
 801b3b0:	b004      	add	sp, #16
 801b3b2:	bd80      	pop	{r7, pc}
 801b3b4:	20001304 	.word	0x20001304

0801b3b8 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 801b3b8:	b580      	push	{r7, lr}
 801b3ba:	b084      	sub	sp, #16
 801b3bc:	af00      	add	r7, sp, #0
 801b3be:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 801b3c0:	4b0b      	ldr	r3, [pc, #44]	; (801b3f0 <TimerInsertNewHeadTimer+0x38>)
 801b3c2:	681b      	ldr	r3, [r3, #0]
 801b3c4:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801b3c6:	68fb      	ldr	r3, [r7, #12]
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d002      	beq.n	801b3d2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsNext2Expire = false;
 801b3cc:	68fb      	ldr	r3, [r7, #12]
 801b3ce:	2200      	movs	r2, #0
 801b3d0:	725a      	strb	r2, [r3, #9]
  }

  obj->Next = cur;
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	68fa      	ldr	r2, [r7, #12]
 801b3d6:	615a      	str	r2, [r3, #20]
  TimerListHead = obj;
 801b3d8:	4b05      	ldr	r3, [pc, #20]	; (801b3f0 <TimerInsertNewHeadTimer+0x38>)
 801b3da:	687a      	ldr	r2, [r7, #4]
 801b3dc:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801b3de:	4b04      	ldr	r3, [pc, #16]	; (801b3f0 <TimerInsertNewHeadTimer+0x38>)
 801b3e0:	681b      	ldr	r3, [r3, #0]
 801b3e2:	0018      	movs	r0, r3
 801b3e4:	f7ff ff96 	bl	801b314 <TimerSetTimeout>
}
 801b3e8:	46c0      	nop			; (mov r8, r8)
 801b3ea:	46bd      	mov	sp, r7
 801b3ec:	b004      	add	sp, #16
 801b3ee:	bd80      	pop	{r7, pc}
 801b3f0:	20001304 	.word	0x20001304

0801b3f4 <TraceInit>:
 */
static void Trace_TxCpltCallback(void);

/* Functions Definition ------------------------------------------------------*/
void TraceInit( void )
{
 801b3f4:	b580      	push	{r7, lr}
 801b3f6:	af00      	add	r7, sp, #0
  OutputInit(Trace_TxCpltCallback);
 801b3f8:	4b06      	ldr	r3, [pc, #24]	; (801b414 <TraceInit+0x20>)
 801b3fa:	0018      	movs	r0, r3
 801b3fc:	f7ea fbdc 	bl	8005bb8 <vcom_Init>

  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 801b400:	2380      	movs	r3, #128	; 0x80
 801b402:	005a      	lsls	r2, r3, #1
 801b404:	4904      	ldr	r1, [pc, #16]	; (801b418 <TraceInit+0x24>)
 801b406:	4b05      	ldr	r3, [pc, #20]	; (801b41c <TraceInit+0x28>)
 801b408:	0018      	movs	r0, r3
 801b40a:	f7ff fa3c 	bl	801a886 <circular_queue_init>

  return;
 801b40e:	46c0      	nop			; (mov r8, r8)
}
 801b410:	46bd      	mov	sp, r7
 801b412:	bd80      	pop	{r7, pc}
 801b414:	0801b535 	.word	0x0801b535
 801b418:	20001318 	.word	0x20001318
 801b41c:	20001308 	.word	0x20001308

0801b420 <TraceSend>:

int32_t TraceSend( const char *strFormat, ...)
{
 801b420:	b40f      	push	{r0, r1, r2, r3}
 801b422:	b5b0      	push	{r4, r5, r7, lr}
 801b424:	b0c8      	sub	sp, #288	; 0x120
 801b426:	af00      	add	r7, sp, #0
  char buf[TEMPBUFSIZE];
  va_list vaArgs;
  uint8_t* buffer;
  va_start( vaArgs, strFormat);
 801b428:	239a      	movs	r3, #154	; 0x9a
 801b42a:	005b      	lsls	r3, r3, #1
 801b42c:	18fb      	adds	r3, r7, r3
 801b42e:	60bb      	str	r3, [r7, #8]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 801b430:	68bc      	ldr	r4, [r7, #8]
 801b432:	2398      	movs	r3, #152	; 0x98
 801b434:	005b      	lsls	r3, r3, #1
 801b436:	18fb      	adds	r3, r7, r3
 801b438:	681a      	ldr	r2, [r3, #0]
 801b43a:	2380      	movs	r3, #128	; 0x80
 801b43c:	0059      	lsls	r1, r3, #1
 801b43e:	250c      	movs	r5, #12
 801b440:	1978      	adds	r0, r7, r5
 801b442:	0023      	movs	r3, r4
 801b444:	f000 f9cc 	bl	801b7e0 <vsniprintf>
 801b448:	0003      	movs	r3, r0
 801b44a:	b29a      	uxth	r2, r3
 801b44c:	4b36      	ldr	r3, [pc, #216]	; (801b528 <TraceSend+0x108>)
 801b44e:	2190      	movs	r1, #144	; 0x90
 801b450:	0049      	lsls	r1, r1, #1
 801b452:	468c      	mov	ip, r1
 801b454:	44bc      	add	ip, r7
 801b456:	4463      	add	r3, ip
 801b458:	801a      	strh	r2, [r3, #0]
  va_end(vaArgs);
  int status=0;
 801b45a:	2300      	movs	r3, #0
 801b45c:	248e      	movs	r4, #142	; 0x8e
 801b45e:	0064      	lsls	r4, r4, #1
 801b460:	193a      	adds	r2, r7, r4
 801b462:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b464:	f3ef 8310 	mrs	r3, PRIMASK
 801b468:	228a      	movs	r2, #138	; 0x8a
 801b46a:	0052      	lsls	r2, r2, #1
 801b46c:	18b9      	adds	r1, r7, r2
 801b46e:	600b      	str	r3, [r1, #0]
  return(result);
 801b470:	18bb      	adds	r3, r7, r2
 801b472:	681b      	ldr	r3, [r3, #0]
  
  BACKUP_PRIMASK();
 801b474:	228c      	movs	r2, #140	; 0x8c
 801b476:	0052      	lsls	r2, r2, #1
 801b478:	18ba      	adds	r2, r7, r2
 801b47a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801b47c:	b672      	cpsid	i
  
  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_15);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_15);
  status =circular_queue_add(&MsgTraceQueue,(uint8_t*)buf, bufSize);
 801b47e:	4b2a      	ldr	r3, [pc, #168]	; (801b528 <TraceSend+0x108>)
 801b480:	2290      	movs	r2, #144	; 0x90
 801b482:	0052      	lsls	r2, r2, #1
 801b484:	4694      	mov	ip, r2
 801b486:	44bc      	add	ip, r7
 801b488:	4463      	add	r3, ip
 801b48a:	881a      	ldrh	r2, [r3, #0]
 801b48c:	1979      	adds	r1, r7, r5
 801b48e:	4b27      	ldr	r3, [pc, #156]	; (801b52c <TraceSend+0x10c>)
 801b490:	0018      	movs	r0, r3
 801b492:	f7ff fa16 	bl	801a8c2 <circular_queue_add>
 801b496:	0003      	movs	r3, r0
 801b498:	193a      	adds	r2, r7, r4
 801b49a:	6013      	str	r3, [r2, #0]
  
  if ((status==0 ) && (TracePeripheralReady==SET))
 801b49c:	193b      	adds	r3, r7, r4
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	2b00      	cmp	r3, #0
 801b4a2:	d12a      	bne.n	801b4fa <TraceSend+0xda>
 801b4a4:	4b22      	ldr	r3, [pc, #136]	; (801b530 <TraceSend+0x110>)
 801b4a6:	781b      	ldrb	r3, [r3, #0]
 801b4a8:	b2db      	uxtb	r3, r3
 801b4aa:	2b01      	cmp	r3, #1
 801b4ac:	d125      	bne.n	801b4fa <TraceSend+0xda>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 801b4ae:	1cba      	adds	r2, r7, #2
 801b4b0:	1d39      	adds	r1, r7, #4
 801b4b2:	4b1e      	ldr	r3, [pc, #120]	; (801b52c <TraceSend+0x10c>)
 801b4b4:	0018      	movs	r0, r3
 801b4b6:	f7ff fac9 	bl	801aa4c <circular_queue_get>
    TracePeripheralReady = RESET;
 801b4ba:	4b1d      	ldr	r3, [pc, #116]	; (801b530 <TraceSend+0x110>)
 801b4bc:	2200      	movs	r2, #0
 801b4be:	701a      	strb	r2, [r3, #0]
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_12);
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 801b4c0:	2101      	movs	r1, #1
 801b4c2:	2020      	movs	r0, #32
 801b4c4:	f7ff f94e 	bl	801a764 <LPM_SetStopMode>
 801b4c8:	238c      	movs	r3, #140	; 0x8c
 801b4ca:	005b      	lsls	r3, r3, #1
 801b4cc:	18fb      	adds	r3, r7, r3
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	2288      	movs	r2, #136	; 0x88
 801b4d2:	0052      	lsls	r2, r2, #1
 801b4d4:	18b9      	adds	r1, r7, r2
 801b4d6:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4d8:	18bb      	adds	r3, r7, r2
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	f383 8810 	msr	PRIMASK, r3

    RESTORE_PRIMASK();
    OutputTrace(buffer, bufSize);
 801b4e0:	687a      	ldr	r2, [r7, #4]
 801b4e2:	4b11      	ldr	r3, [pc, #68]	; (801b528 <TraceSend+0x108>)
 801b4e4:	2190      	movs	r1, #144	; 0x90
 801b4e6:	0049      	lsls	r1, r1, #1
 801b4e8:	468c      	mov	ip, r1
 801b4ea:	44bc      	add	ip, r7
 801b4ec:	4463      	add	r3, ip
 801b4ee:	881b      	ldrh	r3, [r3, #0]
 801b4f0:	0019      	movs	r1, r3
 801b4f2:	0010      	movs	r0, r2
 801b4f4:	f7ea fb90 	bl	8005c18 <vcom_Trace>
 801b4f8:	e00b      	b.n	801b512 <TraceSend+0xf2>
 801b4fa:	238c      	movs	r3, #140	; 0x8c
 801b4fc:	005b      	lsls	r3, r3, #1
 801b4fe:	18fb      	adds	r3, r7, r3
 801b500:	681b      	ldr	r3, [r3, #0]
 801b502:	2286      	movs	r2, #134	; 0x86
 801b504:	0052      	lsls	r2, r2, #1
 801b506:	18b9      	adds	r1, r7, r2
 801b508:	600b      	str	r3, [r1, #0]
 801b50a:	18bb      	adds	r3, r7, r2
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	f383 8810 	msr	PRIMASK, r3
  else
  {
    RESTORE_PRIMASK();
  }
  
  return status;
 801b512:	238e      	movs	r3, #142	; 0x8e
 801b514:	005b      	lsls	r3, r3, #1
 801b516:	18fb      	adds	r3, r7, r3
 801b518:	681b      	ldr	r3, [r3, #0]
}
 801b51a:	0018      	movs	r0, r3
 801b51c:	46bd      	mov	sp, r7
 801b51e:	b048      	add	sp, #288	; 0x120
 801b520:	bcb0      	pop	{r4, r5, r7}
 801b522:	bc08      	pop	{r3}
 801b524:	b004      	add	sp, #16
 801b526:	4718      	bx	r3
 801b528:	fffffee2 	.word	0xfffffee2
 801b52c:	20001308 	.word	0x20001308
 801b530:	200000ec 	.word	0x200000ec

0801b534 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 801b534:	b580      	push	{r7, lr}
 801b536:	b088      	sub	sp, #32
 801b538:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b53a:	f3ef 8310 	mrs	r3, PRIMASK
 801b53e:	617b      	str	r3, [r7, #20]
  return(result);
 801b540:	697b      	ldr	r3, [r7, #20]
  int status;
  uint8_t* buffer;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 801b542:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b544:	b672      	cpsid	i

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  circular_queue_remove(&MsgTraceQueue);
 801b546:	4b18      	ldr	r3, [pc, #96]	; (801b5a8 <Trace_TxCpltCallback+0x74>)
 801b548:	0018      	movs	r0, r3
 801b54a:	f7ff fad9 	bl	801ab00 <circular_queue_remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  status=circular_queue_sense(&MsgTraceQueue);
 801b54e:	4b16      	ldr	r3, [pc, #88]	; (801b5a8 <Trace_TxCpltCallback+0x74>)
 801b550:	0018      	movs	r0, r3
 801b552:	f7ff fb35 	bl	801abc0 <circular_queue_sense>
 801b556:	0003      	movs	r3, r0
 801b558:	61bb      	str	r3, [r7, #24]

  if ( status == 0) 
 801b55a:	69bb      	ldr	r3, [r7, #24]
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d113      	bne.n	801b588 <Trace_TxCpltCallback+0x54>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 801b560:	1dba      	adds	r2, r7, #6
 801b562:	2308      	movs	r3, #8
 801b564:	18f9      	adds	r1, r7, r3
 801b566:	4b10      	ldr	r3, [pc, #64]	; (801b5a8 <Trace_TxCpltCallback+0x74>)
 801b568:	0018      	movs	r0, r3
 801b56a:	f7ff fa6f 	bl	801aa4c <circular_queue_get>
 801b56e:	69fb      	ldr	r3, [r7, #28]
 801b570:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b572:	693b      	ldr	r3, [r7, #16]
 801b574:	f383 8810 	msr	PRIMASK, r3
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace(buffer, bufSize);
 801b578:	68ba      	ldr	r2, [r7, #8]
 801b57a:	1dbb      	adds	r3, r7, #6
 801b57c:	881b      	ldrh	r3, [r3, #0]
 801b57e:	0019      	movs	r1, r3
 801b580:	0010      	movs	r0, r2
 801b582:	f7ea fb49 	bl	8005c18 <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 801b586:	e00b      	b.n	801b5a0 <Trace_TxCpltCallback+0x6c>
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 801b588:	2100      	movs	r1, #0
 801b58a:	2020      	movs	r0, #32
 801b58c:	f7ff f8ea 	bl	801a764 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 801b590:	4b06      	ldr	r3, [pc, #24]	; (801b5ac <Trace_TxCpltCallback+0x78>)
 801b592:	2201      	movs	r2, #1
 801b594:	701a      	strb	r2, [r3, #0]
 801b596:	69fb      	ldr	r3, [r7, #28]
 801b598:	60fb      	str	r3, [r7, #12]
 801b59a:	68fb      	ldr	r3, [r7, #12]
 801b59c:	f383 8810 	msr	PRIMASK, r3
}
 801b5a0:	46c0      	nop			; (mov r8, r8)
 801b5a2:	46bd      	mov	sp, r7
 801b5a4:	b008      	add	sp, #32
 801b5a6:	bd80      	pop	{r7, pc}
 801b5a8:	20001308 	.word	0x20001308
 801b5ac:	200000ec 	.word	0x200000ec

0801b5b0 <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 801b5b0:	b580      	push	{r7, lr}
 801b5b2:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801b5b4:	4b08      	ldr	r3, [pc, #32]	; (801b5d8 <rand1+0x28>)
 801b5b6:	681b      	ldr	r3, [r3, #0]
 801b5b8:	4a08      	ldr	r2, [pc, #32]	; (801b5dc <rand1+0x2c>)
 801b5ba:	4353      	muls	r3, r2
 801b5bc:	4a08      	ldr	r2, [pc, #32]	; (801b5e0 <rand1+0x30>)
 801b5be:	189a      	adds	r2, r3, r2
 801b5c0:	4b05      	ldr	r3, [pc, #20]	; (801b5d8 <rand1+0x28>)
 801b5c2:	601a      	str	r2, [r3, #0]
 801b5c4:	4b04      	ldr	r3, [pc, #16]	; (801b5d8 <rand1+0x28>)
 801b5c6:	681b      	ldr	r3, [r3, #0]
 801b5c8:	4906      	ldr	r1, [pc, #24]	; (801b5e4 <rand1+0x34>)
 801b5ca:	0018      	movs	r0, r3
 801b5cc:	f7e4 fe22 	bl	8000214 <__aeabi_uidivmod>
 801b5d0:	000b      	movs	r3, r1
}
 801b5d2:	0018      	movs	r0, r3
 801b5d4:	46bd      	mov	sp, r7
 801b5d6:	bd80      	pop	{r7, pc}
 801b5d8:	200000f0 	.word	0x200000f0
 801b5dc:	41c64e6d 	.word	0x41c64e6d
 801b5e0:	00003039 	.word	0x00003039
 801b5e4:	7fffffff 	.word	0x7fffffff

0801b5e8 <srand1>:

void srand1( uint32_t seed )
{
 801b5e8:	b580      	push	{r7, lr}
 801b5ea:	b082      	sub	sp, #8
 801b5ec:	af00      	add	r7, sp, #0
 801b5ee:	6078      	str	r0, [r7, #4]
    next = seed;
 801b5f0:	4b03      	ldr	r3, [pc, #12]	; (801b600 <srand1+0x18>)
 801b5f2:	687a      	ldr	r2, [r7, #4]
 801b5f4:	601a      	str	r2, [r3, #0]
}
 801b5f6:	46c0      	nop			; (mov r8, r8)
 801b5f8:	46bd      	mov	sp, r7
 801b5fa:	b002      	add	sp, #8
 801b5fc:	bd80      	pop	{r7, pc}
 801b5fe:	46c0      	nop			; (mov r8, r8)
 801b600:	200000f0 	.word	0x200000f0

0801b604 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801b604:	b580      	push	{r7, lr}
 801b606:	b082      	sub	sp, #8
 801b608:	af00      	add	r7, sp, #0
 801b60a:	6078      	str	r0, [r7, #4]
 801b60c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801b60e:	f7ff ffcf 	bl	801b5b0 <rand1>
 801b612:	683a      	ldr	r2, [r7, #0]
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	1ad3      	subs	r3, r2, r3
 801b618:	3301      	adds	r3, #1
 801b61a:	0019      	movs	r1, r3
 801b61c:	f7e4 fee4 	bl	80003e8 <__aeabi_idivmod>
 801b620:	000b      	movs	r3, r1
 801b622:	001a      	movs	r2, r3
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	18d3      	adds	r3, r2, r3
}
 801b628:	0018      	movs	r0, r3
 801b62a:	46bd      	mov	sp, r7
 801b62c:	b002      	add	sp, #8
 801b62e:	bd80      	pop	{r7, pc}

0801b630 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b630:	b580      	push	{r7, lr}
 801b632:	b084      	sub	sp, #16
 801b634:	af00      	add	r7, sp, #0
 801b636:	60f8      	str	r0, [r7, #12]
 801b638:	60b9      	str	r1, [r7, #8]
 801b63a:	1dbb      	adds	r3, r7, #6
 801b63c:	801a      	strh	r2, [r3, #0]
    while( size-- )
 801b63e:	e007      	b.n	801b650 <memcpy1+0x20>
    {
        *dst++ = *src++;
 801b640:	68ba      	ldr	r2, [r7, #8]
 801b642:	1c53      	adds	r3, r2, #1
 801b644:	60bb      	str	r3, [r7, #8]
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	1c59      	adds	r1, r3, #1
 801b64a:	60f9      	str	r1, [r7, #12]
 801b64c:	7812      	ldrb	r2, [r2, #0]
 801b64e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b650:	1dbb      	adds	r3, r7, #6
 801b652:	881b      	ldrh	r3, [r3, #0]
 801b654:	1dba      	adds	r2, r7, #6
 801b656:	1e59      	subs	r1, r3, #1
 801b658:	8011      	strh	r1, [r2, #0]
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	d1f0      	bne.n	801b640 <memcpy1+0x10>
    }
}
 801b65e:	46c0      	nop			; (mov r8, r8)
 801b660:	46bd      	mov	sp, r7
 801b662:	b004      	add	sp, #16
 801b664:	bd80      	pop	{r7, pc}

0801b666 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b666:	b580      	push	{r7, lr}
 801b668:	b084      	sub	sp, #16
 801b66a:	af00      	add	r7, sp, #0
 801b66c:	60f8      	str	r0, [r7, #12]
 801b66e:	60b9      	str	r1, [r7, #8]
 801b670:	1dbb      	adds	r3, r7, #6
 801b672:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 801b674:	1dbb      	adds	r3, r7, #6
 801b676:	881b      	ldrh	r3, [r3, #0]
 801b678:	3b01      	subs	r3, #1
 801b67a:	68fa      	ldr	r2, [r7, #12]
 801b67c:	18d3      	adds	r3, r2, r3
 801b67e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801b680:	e007      	b.n	801b692 <memcpyr+0x2c>
    {
        *dst-- = *src++;
 801b682:	68ba      	ldr	r2, [r7, #8]
 801b684:	1c53      	adds	r3, r2, #1
 801b686:	60bb      	str	r3, [r7, #8]
 801b688:	68fb      	ldr	r3, [r7, #12]
 801b68a:	1e59      	subs	r1, r3, #1
 801b68c:	60f9      	str	r1, [r7, #12]
 801b68e:	7812      	ldrb	r2, [r2, #0]
 801b690:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b692:	1dbb      	adds	r3, r7, #6
 801b694:	881b      	ldrh	r3, [r3, #0]
 801b696:	1dba      	adds	r2, r7, #6
 801b698:	1e59      	subs	r1, r3, #1
 801b69a:	8011      	strh	r1, [r2, #0]
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d1f0      	bne.n	801b682 <memcpyr+0x1c>
    }
}
 801b6a0:	46c0      	nop			; (mov r8, r8)
 801b6a2:	46bd      	mov	sp, r7
 801b6a4:	b004      	add	sp, #16
 801b6a6:	bd80      	pop	{r7, pc}

0801b6a8 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801b6a8:	b580      	push	{r7, lr}
 801b6aa:	b082      	sub	sp, #8
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	6078      	str	r0, [r7, #4]
 801b6b0:	0008      	movs	r0, r1
 801b6b2:	0011      	movs	r1, r2
 801b6b4:	1cfb      	adds	r3, r7, #3
 801b6b6:	1c02      	adds	r2, r0, #0
 801b6b8:	701a      	strb	r2, [r3, #0]
 801b6ba:	003b      	movs	r3, r7
 801b6bc:	1c0a      	adds	r2, r1, #0
 801b6be:	801a      	strh	r2, [r3, #0]
    while( size-- )
 801b6c0:	e005      	b.n	801b6ce <memset1+0x26>
    {
        *dst++ = value;
 801b6c2:	687b      	ldr	r3, [r7, #4]
 801b6c4:	1c5a      	adds	r2, r3, #1
 801b6c6:	607a      	str	r2, [r7, #4]
 801b6c8:	1cfa      	adds	r2, r7, #3
 801b6ca:	7812      	ldrb	r2, [r2, #0]
 801b6cc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b6ce:	003b      	movs	r3, r7
 801b6d0:	881b      	ldrh	r3, [r3, #0]
 801b6d2:	003a      	movs	r2, r7
 801b6d4:	1e59      	subs	r1, r3, #1
 801b6d6:	8011      	strh	r1, [r2, #0]
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d1f2      	bne.n	801b6c2 <memset1+0x1a>
    }
}
 801b6dc:	46c0      	nop			; (mov r8, r8)
 801b6de:	46bd      	mov	sp, r7
 801b6e0:	b002      	add	sp, #8
 801b6e2:	bd80      	pop	{r7, pc}

0801b6e4 <__errno>:
 801b6e4:	4b01      	ldr	r3, [pc, #4]	; (801b6ec <__errno+0x8>)
 801b6e6:	6818      	ldr	r0, [r3, #0]
 801b6e8:	4770      	bx	lr
 801b6ea:	46c0      	nop			; (mov r8, r8)
 801b6ec:	200000f4 	.word	0x200000f4

0801b6f0 <__libc_init_array>:
 801b6f0:	b570      	push	{r4, r5, r6, lr}
 801b6f2:	2600      	movs	r6, #0
 801b6f4:	4d0c      	ldr	r5, [pc, #48]	; (801b728 <__libc_init_array+0x38>)
 801b6f6:	4c0d      	ldr	r4, [pc, #52]	; (801b72c <__libc_init_array+0x3c>)
 801b6f8:	1b64      	subs	r4, r4, r5
 801b6fa:	10a4      	asrs	r4, r4, #2
 801b6fc:	42a6      	cmp	r6, r4
 801b6fe:	d109      	bne.n	801b714 <__libc_init_array+0x24>
 801b700:	2600      	movs	r6, #0
 801b702:	f000 fdaf 	bl	801c264 <_init>
 801b706:	4d0a      	ldr	r5, [pc, #40]	; (801b730 <__libc_init_array+0x40>)
 801b708:	4c0a      	ldr	r4, [pc, #40]	; (801b734 <__libc_init_array+0x44>)
 801b70a:	1b64      	subs	r4, r4, r5
 801b70c:	10a4      	asrs	r4, r4, #2
 801b70e:	42a6      	cmp	r6, r4
 801b710:	d105      	bne.n	801b71e <__libc_init_array+0x2e>
 801b712:	bd70      	pop	{r4, r5, r6, pc}
 801b714:	00b3      	lsls	r3, r6, #2
 801b716:	58eb      	ldr	r3, [r5, r3]
 801b718:	4798      	blx	r3
 801b71a:	3601      	adds	r6, #1
 801b71c:	e7ee      	b.n	801b6fc <__libc_init_array+0xc>
 801b71e:	00b3      	lsls	r3, r6, #2
 801b720:	58eb      	ldr	r3, [r5, r3]
 801b722:	4798      	blx	r3
 801b724:	3601      	adds	r6, #1
 801b726:	e7f2      	b.n	801b70e <__libc_init_array+0x1e>
 801b728:	0801d478 	.word	0x0801d478
 801b72c:	0801d478 	.word	0x0801d478
 801b730:	0801d478 	.word	0x0801d478
 801b734:	0801d47c 	.word	0x0801d47c

0801b738 <memset>:
 801b738:	0003      	movs	r3, r0
 801b73a:	1812      	adds	r2, r2, r0
 801b73c:	4293      	cmp	r3, r2
 801b73e:	d100      	bne.n	801b742 <memset+0xa>
 801b740:	4770      	bx	lr
 801b742:	7019      	strb	r1, [r3, #0]
 801b744:	3301      	adds	r3, #1
 801b746:	e7f9      	b.n	801b73c <memset+0x4>

0801b748 <siprintf>:
 801b748:	b40e      	push	{r1, r2, r3}
 801b74a:	b500      	push	{lr}
 801b74c:	490b      	ldr	r1, [pc, #44]	; (801b77c <siprintf+0x34>)
 801b74e:	b09c      	sub	sp, #112	; 0x70
 801b750:	ab1d      	add	r3, sp, #116	; 0x74
 801b752:	9002      	str	r0, [sp, #8]
 801b754:	9006      	str	r0, [sp, #24]
 801b756:	9107      	str	r1, [sp, #28]
 801b758:	9104      	str	r1, [sp, #16]
 801b75a:	4809      	ldr	r0, [pc, #36]	; (801b780 <siprintf+0x38>)
 801b75c:	4909      	ldr	r1, [pc, #36]	; (801b784 <siprintf+0x3c>)
 801b75e:	cb04      	ldmia	r3!, {r2}
 801b760:	9105      	str	r1, [sp, #20]
 801b762:	6800      	ldr	r0, [r0, #0]
 801b764:	a902      	add	r1, sp, #8
 801b766:	9301      	str	r3, [sp, #4]
 801b768:	f000 f906 	bl	801b978 <_svfiprintf_r>
 801b76c:	2300      	movs	r3, #0
 801b76e:	9a02      	ldr	r2, [sp, #8]
 801b770:	7013      	strb	r3, [r2, #0]
 801b772:	b01c      	add	sp, #112	; 0x70
 801b774:	bc08      	pop	{r3}
 801b776:	b003      	add	sp, #12
 801b778:	4718      	bx	r3
 801b77a:	46c0      	nop			; (mov r8, r8)
 801b77c:	7fffffff 	.word	0x7fffffff
 801b780:	200000f4 	.word	0x200000f4
 801b784:	ffff0208 	.word	0xffff0208

0801b788 <_vsniprintf_r>:
 801b788:	b530      	push	{r4, r5, lr}
 801b78a:	0014      	movs	r4, r2
 801b78c:	b09b      	sub	sp, #108	; 0x6c
 801b78e:	0005      	movs	r5, r0
 801b790:	001a      	movs	r2, r3
 801b792:	2c00      	cmp	r4, #0
 801b794:	da05      	bge.n	801b7a2 <_vsniprintf_r+0x1a>
 801b796:	238b      	movs	r3, #139	; 0x8b
 801b798:	6003      	str	r3, [r0, #0]
 801b79a:	2001      	movs	r0, #1
 801b79c:	4240      	negs	r0, r0
 801b79e:	b01b      	add	sp, #108	; 0x6c
 801b7a0:	bd30      	pop	{r4, r5, pc}
 801b7a2:	2382      	movs	r3, #130	; 0x82
 801b7a4:	4668      	mov	r0, sp
 801b7a6:	009b      	lsls	r3, r3, #2
 801b7a8:	8183      	strh	r3, [r0, #12]
 801b7aa:	2300      	movs	r3, #0
 801b7ac:	9100      	str	r1, [sp, #0]
 801b7ae:	9104      	str	r1, [sp, #16]
 801b7b0:	429c      	cmp	r4, r3
 801b7b2:	d000      	beq.n	801b7b6 <_vsniprintf_r+0x2e>
 801b7b4:	1e63      	subs	r3, r4, #1
 801b7b6:	9302      	str	r3, [sp, #8]
 801b7b8:	9305      	str	r3, [sp, #20]
 801b7ba:	2301      	movs	r3, #1
 801b7bc:	4669      	mov	r1, sp
 801b7be:	425b      	negs	r3, r3
 801b7c0:	81cb      	strh	r3, [r1, #14]
 801b7c2:	0028      	movs	r0, r5
 801b7c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b7c6:	f000 f8d7 	bl	801b978 <_svfiprintf_r>
 801b7ca:	1c43      	adds	r3, r0, #1
 801b7cc:	da01      	bge.n	801b7d2 <_vsniprintf_r+0x4a>
 801b7ce:	238b      	movs	r3, #139	; 0x8b
 801b7d0:	602b      	str	r3, [r5, #0]
 801b7d2:	2c00      	cmp	r4, #0
 801b7d4:	d0e3      	beq.n	801b79e <_vsniprintf_r+0x16>
 801b7d6:	2300      	movs	r3, #0
 801b7d8:	9a00      	ldr	r2, [sp, #0]
 801b7da:	7013      	strb	r3, [r2, #0]
 801b7dc:	e7df      	b.n	801b79e <_vsniprintf_r+0x16>
	...

0801b7e0 <vsniprintf>:
 801b7e0:	b507      	push	{r0, r1, r2, lr}
 801b7e2:	9300      	str	r3, [sp, #0]
 801b7e4:	0013      	movs	r3, r2
 801b7e6:	000a      	movs	r2, r1
 801b7e8:	0001      	movs	r1, r0
 801b7ea:	4802      	ldr	r0, [pc, #8]	; (801b7f4 <vsniprintf+0x14>)
 801b7ec:	6800      	ldr	r0, [r0, #0]
 801b7ee:	f7ff ffcb 	bl	801b788 <_vsniprintf_r>
 801b7f2:	bd0e      	pop	{r1, r2, r3, pc}
 801b7f4:	200000f4 	.word	0x200000f4

0801b7f8 <_malloc_r>:
 801b7f8:	2303      	movs	r3, #3
 801b7fa:	b570      	push	{r4, r5, r6, lr}
 801b7fc:	1ccd      	adds	r5, r1, #3
 801b7fe:	439d      	bics	r5, r3
 801b800:	3508      	adds	r5, #8
 801b802:	0006      	movs	r6, r0
 801b804:	2d0c      	cmp	r5, #12
 801b806:	d21e      	bcs.n	801b846 <_malloc_r+0x4e>
 801b808:	250c      	movs	r5, #12
 801b80a:	42a9      	cmp	r1, r5
 801b80c:	d81d      	bhi.n	801b84a <_malloc_r+0x52>
 801b80e:	0030      	movs	r0, r6
 801b810:	f000 fb5f 	bl	801bed2 <__malloc_lock>
 801b814:	4a25      	ldr	r2, [pc, #148]	; (801b8ac <_malloc_r+0xb4>)
 801b816:	6814      	ldr	r4, [r2, #0]
 801b818:	0021      	movs	r1, r4
 801b81a:	2900      	cmp	r1, #0
 801b81c:	d119      	bne.n	801b852 <_malloc_r+0x5a>
 801b81e:	4c24      	ldr	r4, [pc, #144]	; (801b8b0 <_malloc_r+0xb8>)
 801b820:	6823      	ldr	r3, [r4, #0]
 801b822:	2b00      	cmp	r3, #0
 801b824:	d103      	bne.n	801b82e <_malloc_r+0x36>
 801b826:	0030      	movs	r0, r6
 801b828:	f000 fb1a 	bl	801be60 <_sbrk_r>
 801b82c:	6020      	str	r0, [r4, #0]
 801b82e:	0029      	movs	r1, r5
 801b830:	0030      	movs	r0, r6
 801b832:	f000 fb15 	bl	801be60 <_sbrk_r>
 801b836:	1c43      	adds	r3, r0, #1
 801b838:	d12b      	bne.n	801b892 <_malloc_r+0x9a>
 801b83a:	230c      	movs	r3, #12
 801b83c:	0030      	movs	r0, r6
 801b83e:	6033      	str	r3, [r6, #0]
 801b840:	f000 fb48 	bl	801bed4 <__malloc_unlock>
 801b844:	e003      	b.n	801b84e <_malloc_r+0x56>
 801b846:	2d00      	cmp	r5, #0
 801b848:	dadf      	bge.n	801b80a <_malloc_r+0x12>
 801b84a:	230c      	movs	r3, #12
 801b84c:	6033      	str	r3, [r6, #0]
 801b84e:	2000      	movs	r0, #0
 801b850:	bd70      	pop	{r4, r5, r6, pc}
 801b852:	680b      	ldr	r3, [r1, #0]
 801b854:	1b5b      	subs	r3, r3, r5
 801b856:	d419      	bmi.n	801b88c <_malloc_r+0x94>
 801b858:	2b0b      	cmp	r3, #11
 801b85a:	d903      	bls.n	801b864 <_malloc_r+0x6c>
 801b85c:	600b      	str	r3, [r1, #0]
 801b85e:	18cc      	adds	r4, r1, r3
 801b860:	6025      	str	r5, [r4, #0]
 801b862:	e003      	b.n	801b86c <_malloc_r+0x74>
 801b864:	684b      	ldr	r3, [r1, #4]
 801b866:	428c      	cmp	r4, r1
 801b868:	d10d      	bne.n	801b886 <_malloc_r+0x8e>
 801b86a:	6013      	str	r3, [r2, #0]
 801b86c:	0030      	movs	r0, r6
 801b86e:	f000 fb31 	bl	801bed4 <__malloc_unlock>
 801b872:	0020      	movs	r0, r4
 801b874:	2207      	movs	r2, #7
 801b876:	300b      	adds	r0, #11
 801b878:	1d23      	adds	r3, r4, #4
 801b87a:	4390      	bics	r0, r2
 801b87c:	1ac3      	subs	r3, r0, r3
 801b87e:	d0e7      	beq.n	801b850 <_malloc_r+0x58>
 801b880:	425a      	negs	r2, r3
 801b882:	50e2      	str	r2, [r4, r3]
 801b884:	e7e4      	b.n	801b850 <_malloc_r+0x58>
 801b886:	6063      	str	r3, [r4, #4]
 801b888:	000c      	movs	r4, r1
 801b88a:	e7ef      	b.n	801b86c <_malloc_r+0x74>
 801b88c:	000c      	movs	r4, r1
 801b88e:	6849      	ldr	r1, [r1, #4]
 801b890:	e7c3      	b.n	801b81a <_malloc_r+0x22>
 801b892:	2303      	movs	r3, #3
 801b894:	1cc4      	adds	r4, r0, #3
 801b896:	439c      	bics	r4, r3
 801b898:	42a0      	cmp	r0, r4
 801b89a:	d0e1      	beq.n	801b860 <_malloc_r+0x68>
 801b89c:	1a21      	subs	r1, r4, r0
 801b89e:	0030      	movs	r0, r6
 801b8a0:	f000 fade 	bl	801be60 <_sbrk_r>
 801b8a4:	1c43      	adds	r3, r0, #1
 801b8a6:	d1db      	bne.n	801b860 <_malloc_r+0x68>
 801b8a8:	e7c7      	b.n	801b83a <_malloc_r+0x42>
 801b8aa:	46c0      	nop			; (mov r8, r8)
 801b8ac:	20001418 	.word	0x20001418
 801b8b0:	2000141c 	.word	0x2000141c

0801b8b4 <__ssputs_r>:
 801b8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b8b6:	688e      	ldr	r6, [r1, #8]
 801b8b8:	b085      	sub	sp, #20
 801b8ba:	0007      	movs	r7, r0
 801b8bc:	000c      	movs	r4, r1
 801b8be:	9203      	str	r2, [sp, #12]
 801b8c0:	9301      	str	r3, [sp, #4]
 801b8c2:	429e      	cmp	r6, r3
 801b8c4:	d83c      	bhi.n	801b940 <__ssputs_r+0x8c>
 801b8c6:	2390      	movs	r3, #144	; 0x90
 801b8c8:	898a      	ldrh	r2, [r1, #12]
 801b8ca:	00db      	lsls	r3, r3, #3
 801b8cc:	421a      	tst	r2, r3
 801b8ce:	d034      	beq.n	801b93a <__ssputs_r+0x86>
 801b8d0:	2503      	movs	r5, #3
 801b8d2:	6909      	ldr	r1, [r1, #16]
 801b8d4:	6823      	ldr	r3, [r4, #0]
 801b8d6:	1a5b      	subs	r3, r3, r1
 801b8d8:	9302      	str	r3, [sp, #8]
 801b8da:	6963      	ldr	r3, [r4, #20]
 801b8dc:	9802      	ldr	r0, [sp, #8]
 801b8de:	435d      	muls	r5, r3
 801b8e0:	0feb      	lsrs	r3, r5, #31
 801b8e2:	195d      	adds	r5, r3, r5
 801b8e4:	9b01      	ldr	r3, [sp, #4]
 801b8e6:	106d      	asrs	r5, r5, #1
 801b8e8:	3301      	adds	r3, #1
 801b8ea:	181b      	adds	r3, r3, r0
 801b8ec:	42ab      	cmp	r3, r5
 801b8ee:	d900      	bls.n	801b8f2 <__ssputs_r+0x3e>
 801b8f0:	001d      	movs	r5, r3
 801b8f2:	0553      	lsls	r3, r2, #21
 801b8f4:	d532      	bpl.n	801b95c <__ssputs_r+0xa8>
 801b8f6:	0029      	movs	r1, r5
 801b8f8:	0038      	movs	r0, r7
 801b8fa:	f7ff ff7d 	bl	801b7f8 <_malloc_r>
 801b8fe:	1e06      	subs	r6, r0, #0
 801b900:	d109      	bne.n	801b916 <__ssputs_r+0x62>
 801b902:	230c      	movs	r3, #12
 801b904:	603b      	str	r3, [r7, #0]
 801b906:	2340      	movs	r3, #64	; 0x40
 801b908:	2001      	movs	r0, #1
 801b90a:	89a2      	ldrh	r2, [r4, #12]
 801b90c:	4240      	negs	r0, r0
 801b90e:	4313      	orrs	r3, r2
 801b910:	81a3      	strh	r3, [r4, #12]
 801b912:	b005      	add	sp, #20
 801b914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b916:	9a02      	ldr	r2, [sp, #8]
 801b918:	6921      	ldr	r1, [r4, #16]
 801b91a:	f000 fabe 	bl	801be9a <memcpy>
 801b91e:	89a3      	ldrh	r3, [r4, #12]
 801b920:	4a14      	ldr	r2, [pc, #80]	; (801b974 <__ssputs_r+0xc0>)
 801b922:	401a      	ands	r2, r3
 801b924:	2380      	movs	r3, #128	; 0x80
 801b926:	4313      	orrs	r3, r2
 801b928:	81a3      	strh	r3, [r4, #12]
 801b92a:	9b02      	ldr	r3, [sp, #8]
 801b92c:	6126      	str	r6, [r4, #16]
 801b92e:	18f6      	adds	r6, r6, r3
 801b930:	6026      	str	r6, [r4, #0]
 801b932:	6165      	str	r5, [r4, #20]
 801b934:	9e01      	ldr	r6, [sp, #4]
 801b936:	1aed      	subs	r5, r5, r3
 801b938:	60a5      	str	r5, [r4, #8]
 801b93a:	9b01      	ldr	r3, [sp, #4]
 801b93c:	429e      	cmp	r6, r3
 801b93e:	d900      	bls.n	801b942 <__ssputs_r+0x8e>
 801b940:	9e01      	ldr	r6, [sp, #4]
 801b942:	0032      	movs	r2, r6
 801b944:	9903      	ldr	r1, [sp, #12]
 801b946:	6820      	ldr	r0, [r4, #0]
 801b948:	f000 fab0 	bl	801beac <memmove>
 801b94c:	68a3      	ldr	r3, [r4, #8]
 801b94e:	2000      	movs	r0, #0
 801b950:	1b9b      	subs	r3, r3, r6
 801b952:	60a3      	str	r3, [r4, #8]
 801b954:	6823      	ldr	r3, [r4, #0]
 801b956:	199e      	adds	r6, r3, r6
 801b958:	6026      	str	r6, [r4, #0]
 801b95a:	e7da      	b.n	801b912 <__ssputs_r+0x5e>
 801b95c:	002a      	movs	r2, r5
 801b95e:	0038      	movs	r0, r7
 801b960:	f000 fb04 	bl	801bf6c <_realloc_r>
 801b964:	1e06      	subs	r6, r0, #0
 801b966:	d1e0      	bne.n	801b92a <__ssputs_r+0x76>
 801b968:	6921      	ldr	r1, [r4, #16]
 801b96a:	0038      	movs	r0, r7
 801b96c:	f000 fab4 	bl	801bed8 <_free_r>
 801b970:	e7c7      	b.n	801b902 <__ssputs_r+0x4e>
 801b972:	46c0      	nop			; (mov r8, r8)
 801b974:	fffffb7f 	.word	0xfffffb7f

0801b978 <_svfiprintf_r>:
 801b978:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b97a:	b0a1      	sub	sp, #132	; 0x84
 801b97c:	9003      	str	r0, [sp, #12]
 801b97e:	001d      	movs	r5, r3
 801b980:	898b      	ldrh	r3, [r1, #12]
 801b982:	000f      	movs	r7, r1
 801b984:	0016      	movs	r6, r2
 801b986:	061b      	lsls	r3, r3, #24
 801b988:	d511      	bpl.n	801b9ae <_svfiprintf_r+0x36>
 801b98a:	690b      	ldr	r3, [r1, #16]
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	d10e      	bne.n	801b9ae <_svfiprintf_r+0x36>
 801b990:	2140      	movs	r1, #64	; 0x40
 801b992:	f7ff ff31 	bl	801b7f8 <_malloc_r>
 801b996:	6038      	str	r0, [r7, #0]
 801b998:	6138      	str	r0, [r7, #16]
 801b99a:	2800      	cmp	r0, #0
 801b99c:	d105      	bne.n	801b9aa <_svfiprintf_r+0x32>
 801b99e:	230c      	movs	r3, #12
 801b9a0:	9a03      	ldr	r2, [sp, #12]
 801b9a2:	3801      	subs	r0, #1
 801b9a4:	6013      	str	r3, [r2, #0]
 801b9a6:	b021      	add	sp, #132	; 0x84
 801b9a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b9aa:	2340      	movs	r3, #64	; 0x40
 801b9ac:	617b      	str	r3, [r7, #20]
 801b9ae:	2300      	movs	r3, #0
 801b9b0:	ac08      	add	r4, sp, #32
 801b9b2:	6163      	str	r3, [r4, #20]
 801b9b4:	3320      	adds	r3, #32
 801b9b6:	7663      	strb	r3, [r4, #25]
 801b9b8:	3310      	adds	r3, #16
 801b9ba:	76a3      	strb	r3, [r4, #26]
 801b9bc:	9507      	str	r5, [sp, #28]
 801b9be:	0035      	movs	r5, r6
 801b9c0:	782b      	ldrb	r3, [r5, #0]
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d001      	beq.n	801b9ca <_svfiprintf_r+0x52>
 801b9c6:	2b25      	cmp	r3, #37	; 0x25
 801b9c8:	d146      	bne.n	801ba58 <_svfiprintf_r+0xe0>
 801b9ca:	1bab      	subs	r3, r5, r6
 801b9cc:	9305      	str	r3, [sp, #20]
 801b9ce:	d00c      	beq.n	801b9ea <_svfiprintf_r+0x72>
 801b9d0:	0032      	movs	r2, r6
 801b9d2:	0039      	movs	r1, r7
 801b9d4:	9803      	ldr	r0, [sp, #12]
 801b9d6:	f7ff ff6d 	bl	801b8b4 <__ssputs_r>
 801b9da:	1c43      	adds	r3, r0, #1
 801b9dc:	d100      	bne.n	801b9e0 <_svfiprintf_r+0x68>
 801b9de:	e0ae      	b.n	801bb3e <_svfiprintf_r+0x1c6>
 801b9e0:	6962      	ldr	r2, [r4, #20]
 801b9e2:	9b05      	ldr	r3, [sp, #20]
 801b9e4:	4694      	mov	ip, r2
 801b9e6:	4463      	add	r3, ip
 801b9e8:	6163      	str	r3, [r4, #20]
 801b9ea:	782b      	ldrb	r3, [r5, #0]
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d100      	bne.n	801b9f2 <_svfiprintf_r+0x7a>
 801b9f0:	e0a5      	b.n	801bb3e <_svfiprintf_r+0x1c6>
 801b9f2:	2201      	movs	r2, #1
 801b9f4:	2300      	movs	r3, #0
 801b9f6:	4252      	negs	r2, r2
 801b9f8:	6062      	str	r2, [r4, #4]
 801b9fa:	a904      	add	r1, sp, #16
 801b9fc:	3254      	adds	r2, #84	; 0x54
 801b9fe:	1852      	adds	r2, r2, r1
 801ba00:	1c6e      	adds	r6, r5, #1
 801ba02:	6023      	str	r3, [r4, #0]
 801ba04:	60e3      	str	r3, [r4, #12]
 801ba06:	60a3      	str	r3, [r4, #8]
 801ba08:	7013      	strb	r3, [r2, #0]
 801ba0a:	65a3      	str	r3, [r4, #88]	; 0x58
 801ba0c:	7831      	ldrb	r1, [r6, #0]
 801ba0e:	2205      	movs	r2, #5
 801ba10:	4853      	ldr	r0, [pc, #332]	; (801bb60 <_svfiprintf_r+0x1e8>)
 801ba12:	f000 fa37 	bl	801be84 <memchr>
 801ba16:	1c75      	adds	r5, r6, #1
 801ba18:	2800      	cmp	r0, #0
 801ba1a:	d11f      	bne.n	801ba5c <_svfiprintf_r+0xe4>
 801ba1c:	6822      	ldr	r2, [r4, #0]
 801ba1e:	06d3      	lsls	r3, r2, #27
 801ba20:	d504      	bpl.n	801ba2c <_svfiprintf_r+0xb4>
 801ba22:	2353      	movs	r3, #83	; 0x53
 801ba24:	a904      	add	r1, sp, #16
 801ba26:	185b      	adds	r3, r3, r1
 801ba28:	2120      	movs	r1, #32
 801ba2a:	7019      	strb	r1, [r3, #0]
 801ba2c:	0713      	lsls	r3, r2, #28
 801ba2e:	d504      	bpl.n	801ba3a <_svfiprintf_r+0xc2>
 801ba30:	2353      	movs	r3, #83	; 0x53
 801ba32:	a904      	add	r1, sp, #16
 801ba34:	185b      	adds	r3, r3, r1
 801ba36:	212b      	movs	r1, #43	; 0x2b
 801ba38:	7019      	strb	r1, [r3, #0]
 801ba3a:	7833      	ldrb	r3, [r6, #0]
 801ba3c:	2b2a      	cmp	r3, #42	; 0x2a
 801ba3e:	d016      	beq.n	801ba6e <_svfiprintf_r+0xf6>
 801ba40:	0035      	movs	r5, r6
 801ba42:	2100      	movs	r1, #0
 801ba44:	200a      	movs	r0, #10
 801ba46:	68e3      	ldr	r3, [r4, #12]
 801ba48:	782a      	ldrb	r2, [r5, #0]
 801ba4a:	1c6e      	adds	r6, r5, #1
 801ba4c:	3a30      	subs	r2, #48	; 0x30
 801ba4e:	2a09      	cmp	r2, #9
 801ba50:	d94e      	bls.n	801baf0 <_svfiprintf_r+0x178>
 801ba52:	2900      	cmp	r1, #0
 801ba54:	d018      	beq.n	801ba88 <_svfiprintf_r+0x110>
 801ba56:	e010      	b.n	801ba7a <_svfiprintf_r+0x102>
 801ba58:	3501      	adds	r5, #1
 801ba5a:	e7b1      	b.n	801b9c0 <_svfiprintf_r+0x48>
 801ba5c:	4b40      	ldr	r3, [pc, #256]	; (801bb60 <_svfiprintf_r+0x1e8>)
 801ba5e:	6822      	ldr	r2, [r4, #0]
 801ba60:	1ac0      	subs	r0, r0, r3
 801ba62:	2301      	movs	r3, #1
 801ba64:	4083      	lsls	r3, r0
 801ba66:	4313      	orrs	r3, r2
 801ba68:	6023      	str	r3, [r4, #0]
 801ba6a:	002e      	movs	r6, r5
 801ba6c:	e7ce      	b.n	801ba0c <_svfiprintf_r+0x94>
 801ba6e:	9b07      	ldr	r3, [sp, #28]
 801ba70:	1d19      	adds	r1, r3, #4
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	9107      	str	r1, [sp, #28]
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	db01      	blt.n	801ba7e <_svfiprintf_r+0x106>
 801ba7a:	930b      	str	r3, [sp, #44]	; 0x2c
 801ba7c:	e004      	b.n	801ba88 <_svfiprintf_r+0x110>
 801ba7e:	425b      	negs	r3, r3
 801ba80:	60e3      	str	r3, [r4, #12]
 801ba82:	2302      	movs	r3, #2
 801ba84:	4313      	orrs	r3, r2
 801ba86:	6023      	str	r3, [r4, #0]
 801ba88:	782b      	ldrb	r3, [r5, #0]
 801ba8a:	2b2e      	cmp	r3, #46	; 0x2e
 801ba8c:	d10a      	bne.n	801baa4 <_svfiprintf_r+0x12c>
 801ba8e:	786b      	ldrb	r3, [r5, #1]
 801ba90:	2b2a      	cmp	r3, #42	; 0x2a
 801ba92:	d135      	bne.n	801bb00 <_svfiprintf_r+0x188>
 801ba94:	9b07      	ldr	r3, [sp, #28]
 801ba96:	3502      	adds	r5, #2
 801ba98:	1d1a      	adds	r2, r3, #4
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	9207      	str	r2, [sp, #28]
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	db2b      	blt.n	801bafa <_svfiprintf_r+0x182>
 801baa2:	9309      	str	r3, [sp, #36]	; 0x24
 801baa4:	4e2f      	ldr	r6, [pc, #188]	; (801bb64 <_svfiprintf_r+0x1ec>)
 801baa6:	7829      	ldrb	r1, [r5, #0]
 801baa8:	2203      	movs	r2, #3
 801baaa:	0030      	movs	r0, r6
 801baac:	f000 f9ea 	bl	801be84 <memchr>
 801bab0:	2800      	cmp	r0, #0
 801bab2:	d006      	beq.n	801bac2 <_svfiprintf_r+0x14a>
 801bab4:	2340      	movs	r3, #64	; 0x40
 801bab6:	1b80      	subs	r0, r0, r6
 801bab8:	4083      	lsls	r3, r0
 801baba:	6822      	ldr	r2, [r4, #0]
 801babc:	3501      	adds	r5, #1
 801babe:	4313      	orrs	r3, r2
 801bac0:	6023      	str	r3, [r4, #0]
 801bac2:	7829      	ldrb	r1, [r5, #0]
 801bac4:	2206      	movs	r2, #6
 801bac6:	4828      	ldr	r0, [pc, #160]	; (801bb68 <_svfiprintf_r+0x1f0>)
 801bac8:	1c6e      	adds	r6, r5, #1
 801baca:	7621      	strb	r1, [r4, #24]
 801bacc:	f000 f9da 	bl	801be84 <memchr>
 801bad0:	2800      	cmp	r0, #0
 801bad2:	d03c      	beq.n	801bb4e <_svfiprintf_r+0x1d6>
 801bad4:	4b25      	ldr	r3, [pc, #148]	; (801bb6c <_svfiprintf_r+0x1f4>)
 801bad6:	2b00      	cmp	r3, #0
 801bad8:	d125      	bne.n	801bb26 <_svfiprintf_r+0x1ae>
 801bada:	2207      	movs	r2, #7
 801badc:	9b07      	ldr	r3, [sp, #28]
 801bade:	3307      	adds	r3, #7
 801bae0:	4393      	bics	r3, r2
 801bae2:	3308      	adds	r3, #8
 801bae4:	9307      	str	r3, [sp, #28]
 801bae6:	6963      	ldr	r3, [r4, #20]
 801bae8:	9a04      	ldr	r2, [sp, #16]
 801baea:	189b      	adds	r3, r3, r2
 801baec:	6163      	str	r3, [r4, #20]
 801baee:	e766      	b.n	801b9be <_svfiprintf_r+0x46>
 801baf0:	4343      	muls	r3, r0
 801baf2:	2101      	movs	r1, #1
 801baf4:	189b      	adds	r3, r3, r2
 801baf6:	0035      	movs	r5, r6
 801baf8:	e7a6      	b.n	801ba48 <_svfiprintf_r+0xd0>
 801bafa:	2301      	movs	r3, #1
 801bafc:	425b      	negs	r3, r3
 801bafe:	e7d0      	b.n	801baa2 <_svfiprintf_r+0x12a>
 801bb00:	2300      	movs	r3, #0
 801bb02:	200a      	movs	r0, #10
 801bb04:	001a      	movs	r2, r3
 801bb06:	3501      	adds	r5, #1
 801bb08:	6063      	str	r3, [r4, #4]
 801bb0a:	7829      	ldrb	r1, [r5, #0]
 801bb0c:	1c6e      	adds	r6, r5, #1
 801bb0e:	3930      	subs	r1, #48	; 0x30
 801bb10:	2909      	cmp	r1, #9
 801bb12:	d903      	bls.n	801bb1c <_svfiprintf_r+0x1a4>
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	d0c5      	beq.n	801baa4 <_svfiprintf_r+0x12c>
 801bb18:	9209      	str	r2, [sp, #36]	; 0x24
 801bb1a:	e7c3      	b.n	801baa4 <_svfiprintf_r+0x12c>
 801bb1c:	4342      	muls	r2, r0
 801bb1e:	2301      	movs	r3, #1
 801bb20:	1852      	adds	r2, r2, r1
 801bb22:	0035      	movs	r5, r6
 801bb24:	e7f1      	b.n	801bb0a <_svfiprintf_r+0x192>
 801bb26:	ab07      	add	r3, sp, #28
 801bb28:	9300      	str	r3, [sp, #0]
 801bb2a:	003a      	movs	r2, r7
 801bb2c:	4b10      	ldr	r3, [pc, #64]	; (801bb70 <_svfiprintf_r+0x1f8>)
 801bb2e:	0021      	movs	r1, r4
 801bb30:	9803      	ldr	r0, [sp, #12]
 801bb32:	e000      	b.n	801bb36 <_svfiprintf_r+0x1be>
 801bb34:	bf00      	nop
 801bb36:	9004      	str	r0, [sp, #16]
 801bb38:	9b04      	ldr	r3, [sp, #16]
 801bb3a:	3301      	adds	r3, #1
 801bb3c:	d1d3      	bne.n	801bae6 <_svfiprintf_r+0x16e>
 801bb3e:	89bb      	ldrh	r3, [r7, #12]
 801bb40:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bb42:	065b      	lsls	r3, r3, #25
 801bb44:	d400      	bmi.n	801bb48 <_svfiprintf_r+0x1d0>
 801bb46:	e72e      	b.n	801b9a6 <_svfiprintf_r+0x2e>
 801bb48:	2001      	movs	r0, #1
 801bb4a:	4240      	negs	r0, r0
 801bb4c:	e72b      	b.n	801b9a6 <_svfiprintf_r+0x2e>
 801bb4e:	ab07      	add	r3, sp, #28
 801bb50:	9300      	str	r3, [sp, #0]
 801bb52:	003a      	movs	r2, r7
 801bb54:	4b06      	ldr	r3, [pc, #24]	; (801bb70 <_svfiprintf_r+0x1f8>)
 801bb56:	0021      	movs	r1, r4
 801bb58:	9803      	ldr	r0, [sp, #12]
 801bb5a:	f000 f879 	bl	801bc50 <_printf_i>
 801bb5e:	e7ea      	b.n	801bb36 <_svfiprintf_r+0x1be>
 801bb60:	0801d43c 	.word	0x0801d43c
 801bb64:	0801d442 	.word	0x0801d442
 801bb68:	0801d446 	.word	0x0801d446
 801bb6c:	00000000 	.word	0x00000000
 801bb70:	0801b8b5 	.word	0x0801b8b5

0801bb74 <_printf_common>:
 801bb74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bb76:	0015      	movs	r5, r2
 801bb78:	9301      	str	r3, [sp, #4]
 801bb7a:	688a      	ldr	r2, [r1, #8]
 801bb7c:	690b      	ldr	r3, [r1, #16]
 801bb7e:	9000      	str	r0, [sp, #0]
 801bb80:	000c      	movs	r4, r1
 801bb82:	4293      	cmp	r3, r2
 801bb84:	da00      	bge.n	801bb88 <_printf_common+0x14>
 801bb86:	0013      	movs	r3, r2
 801bb88:	0022      	movs	r2, r4
 801bb8a:	602b      	str	r3, [r5, #0]
 801bb8c:	3243      	adds	r2, #67	; 0x43
 801bb8e:	7812      	ldrb	r2, [r2, #0]
 801bb90:	2a00      	cmp	r2, #0
 801bb92:	d001      	beq.n	801bb98 <_printf_common+0x24>
 801bb94:	3301      	adds	r3, #1
 801bb96:	602b      	str	r3, [r5, #0]
 801bb98:	6823      	ldr	r3, [r4, #0]
 801bb9a:	069b      	lsls	r3, r3, #26
 801bb9c:	d502      	bpl.n	801bba4 <_printf_common+0x30>
 801bb9e:	682b      	ldr	r3, [r5, #0]
 801bba0:	3302      	adds	r3, #2
 801bba2:	602b      	str	r3, [r5, #0]
 801bba4:	2706      	movs	r7, #6
 801bba6:	6823      	ldr	r3, [r4, #0]
 801bba8:	401f      	ands	r7, r3
 801bbaa:	d027      	beq.n	801bbfc <_printf_common+0x88>
 801bbac:	0023      	movs	r3, r4
 801bbae:	3343      	adds	r3, #67	; 0x43
 801bbb0:	781b      	ldrb	r3, [r3, #0]
 801bbb2:	1e5a      	subs	r2, r3, #1
 801bbb4:	4193      	sbcs	r3, r2
 801bbb6:	6822      	ldr	r2, [r4, #0]
 801bbb8:	0692      	lsls	r2, r2, #26
 801bbba:	d430      	bmi.n	801bc1e <_printf_common+0xaa>
 801bbbc:	0022      	movs	r2, r4
 801bbbe:	9901      	ldr	r1, [sp, #4]
 801bbc0:	3243      	adds	r2, #67	; 0x43
 801bbc2:	9800      	ldr	r0, [sp, #0]
 801bbc4:	9e08      	ldr	r6, [sp, #32]
 801bbc6:	47b0      	blx	r6
 801bbc8:	1c43      	adds	r3, r0, #1
 801bbca:	d025      	beq.n	801bc18 <_printf_common+0xa4>
 801bbcc:	2306      	movs	r3, #6
 801bbce:	6820      	ldr	r0, [r4, #0]
 801bbd0:	682a      	ldr	r2, [r5, #0]
 801bbd2:	68e1      	ldr	r1, [r4, #12]
 801bbd4:	4003      	ands	r3, r0
 801bbd6:	2500      	movs	r5, #0
 801bbd8:	2b04      	cmp	r3, #4
 801bbda:	d103      	bne.n	801bbe4 <_printf_common+0x70>
 801bbdc:	1a8d      	subs	r5, r1, r2
 801bbde:	43eb      	mvns	r3, r5
 801bbe0:	17db      	asrs	r3, r3, #31
 801bbe2:	401d      	ands	r5, r3
 801bbe4:	68a3      	ldr	r3, [r4, #8]
 801bbe6:	6922      	ldr	r2, [r4, #16]
 801bbe8:	4293      	cmp	r3, r2
 801bbea:	dd01      	ble.n	801bbf0 <_printf_common+0x7c>
 801bbec:	1a9b      	subs	r3, r3, r2
 801bbee:	18ed      	adds	r5, r5, r3
 801bbf0:	2700      	movs	r7, #0
 801bbf2:	42bd      	cmp	r5, r7
 801bbf4:	d120      	bne.n	801bc38 <_printf_common+0xc4>
 801bbf6:	2000      	movs	r0, #0
 801bbf8:	e010      	b.n	801bc1c <_printf_common+0xa8>
 801bbfa:	3701      	adds	r7, #1
 801bbfc:	68e3      	ldr	r3, [r4, #12]
 801bbfe:	682a      	ldr	r2, [r5, #0]
 801bc00:	1a9b      	subs	r3, r3, r2
 801bc02:	42bb      	cmp	r3, r7
 801bc04:	ddd2      	ble.n	801bbac <_printf_common+0x38>
 801bc06:	0022      	movs	r2, r4
 801bc08:	2301      	movs	r3, #1
 801bc0a:	3219      	adds	r2, #25
 801bc0c:	9901      	ldr	r1, [sp, #4]
 801bc0e:	9800      	ldr	r0, [sp, #0]
 801bc10:	9e08      	ldr	r6, [sp, #32]
 801bc12:	47b0      	blx	r6
 801bc14:	1c43      	adds	r3, r0, #1
 801bc16:	d1f0      	bne.n	801bbfa <_printf_common+0x86>
 801bc18:	2001      	movs	r0, #1
 801bc1a:	4240      	negs	r0, r0
 801bc1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801bc1e:	2030      	movs	r0, #48	; 0x30
 801bc20:	18e1      	adds	r1, r4, r3
 801bc22:	3143      	adds	r1, #67	; 0x43
 801bc24:	7008      	strb	r0, [r1, #0]
 801bc26:	0021      	movs	r1, r4
 801bc28:	1c5a      	adds	r2, r3, #1
 801bc2a:	3145      	adds	r1, #69	; 0x45
 801bc2c:	7809      	ldrb	r1, [r1, #0]
 801bc2e:	18a2      	adds	r2, r4, r2
 801bc30:	3243      	adds	r2, #67	; 0x43
 801bc32:	3302      	adds	r3, #2
 801bc34:	7011      	strb	r1, [r2, #0]
 801bc36:	e7c1      	b.n	801bbbc <_printf_common+0x48>
 801bc38:	0022      	movs	r2, r4
 801bc3a:	2301      	movs	r3, #1
 801bc3c:	321a      	adds	r2, #26
 801bc3e:	9901      	ldr	r1, [sp, #4]
 801bc40:	9800      	ldr	r0, [sp, #0]
 801bc42:	9e08      	ldr	r6, [sp, #32]
 801bc44:	47b0      	blx	r6
 801bc46:	1c43      	adds	r3, r0, #1
 801bc48:	d0e6      	beq.n	801bc18 <_printf_common+0xa4>
 801bc4a:	3701      	adds	r7, #1
 801bc4c:	e7d1      	b.n	801bbf2 <_printf_common+0x7e>
	...

0801bc50 <_printf_i>:
 801bc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc52:	b089      	sub	sp, #36	; 0x24
 801bc54:	9204      	str	r2, [sp, #16]
 801bc56:	000a      	movs	r2, r1
 801bc58:	3243      	adds	r2, #67	; 0x43
 801bc5a:	9305      	str	r3, [sp, #20]
 801bc5c:	9003      	str	r0, [sp, #12]
 801bc5e:	9202      	str	r2, [sp, #8]
 801bc60:	7e0a      	ldrb	r2, [r1, #24]
 801bc62:	000c      	movs	r4, r1
 801bc64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc66:	2a6e      	cmp	r2, #110	; 0x6e
 801bc68:	d100      	bne.n	801bc6c <_printf_i+0x1c>
 801bc6a:	e086      	b.n	801bd7a <_printf_i+0x12a>
 801bc6c:	d81f      	bhi.n	801bcae <_printf_i+0x5e>
 801bc6e:	2a63      	cmp	r2, #99	; 0x63
 801bc70:	d033      	beq.n	801bcda <_printf_i+0x8a>
 801bc72:	d808      	bhi.n	801bc86 <_printf_i+0x36>
 801bc74:	2a00      	cmp	r2, #0
 801bc76:	d100      	bne.n	801bc7a <_printf_i+0x2a>
 801bc78:	e08c      	b.n	801bd94 <_printf_i+0x144>
 801bc7a:	2a58      	cmp	r2, #88	; 0x58
 801bc7c:	d04d      	beq.n	801bd1a <_printf_i+0xca>
 801bc7e:	0025      	movs	r5, r4
 801bc80:	3542      	adds	r5, #66	; 0x42
 801bc82:	702a      	strb	r2, [r5, #0]
 801bc84:	e030      	b.n	801bce8 <_printf_i+0x98>
 801bc86:	2a64      	cmp	r2, #100	; 0x64
 801bc88:	d001      	beq.n	801bc8e <_printf_i+0x3e>
 801bc8a:	2a69      	cmp	r2, #105	; 0x69
 801bc8c:	d1f7      	bne.n	801bc7e <_printf_i+0x2e>
 801bc8e:	6819      	ldr	r1, [r3, #0]
 801bc90:	6825      	ldr	r5, [r4, #0]
 801bc92:	1d0a      	adds	r2, r1, #4
 801bc94:	0628      	lsls	r0, r5, #24
 801bc96:	d529      	bpl.n	801bcec <_printf_i+0x9c>
 801bc98:	6808      	ldr	r0, [r1, #0]
 801bc9a:	601a      	str	r2, [r3, #0]
 801bc9c:	2800      	cmp	r0, #0
 801bc9e:	da03      	bge.n	801bca8 <_printf_i+0x58>
 801bca0:	232d      	movs	r3, #45	; 0x2d
 801bca2:	9a02      	ldr	r2, [sp, #8]
 801bca4:	4240      	negs	r0, r0
 801bca6:	7013      	strb	r3, [r2, #0]
 801bca8:	4e6b      	ldr	r6, [pc, #428]	; (801be58 <_printf_i+0x208>)
 801bcaa:	270a      	movs	r7, #10
 801bcac:	e04f      	b.n	801bd4e <_printf_i+0xfe>
 801bcae:	2a73      	cmp	r2, #115	; 0x73
 801bcb0:	d074      	beq.n	801bd9c <_printf_i+0x14c>
 801bcb2:	d808      	bhi.n	801bcc6 <_printf_i+0x76>
 801bcb4:	2a6f      	cmp	r2, #111	; 0x6f
 801bcb6:	d01f      	beq.n	801bcf8 <_printf_i+0xa8>
 801bcb8:	2a70      	cmp	r2, #112	; 0x70
 801bcba:	d1e0      	bne.n	801bc7e <_printf_i+0x2e>
 801bcbc:	2220      	movs	r2, #32
 801bcbe:	6809      	ldr	r1, [r1, #0]
 801bcc0:	430a      	orrs	r2, r1
 801bcc2:	6022      	str	r2, [r4, #0]
 801bcc4:	e003      	b.n	801bcce <_printf_i+0x7e>
 801bcc6:	2a75      	cmp	r2, #117	; 0x75
 801bcc8:	d016      	beq.n	801bcf8 <_printf_i+0xa8>
 801bcca:	2a78      	cmp	r2, #120	; 0x78
 801bccc:	d1d7      	bne.n	801bc7e <_printf_i+0x2e>
 801bcce:	0022      	movs	r2, r4
 801bcd0:	2178      	movs	r1, #120	; 0x78
 801bcd2:	3245      	adds	r2, #69	; 0x45
 801bcd4:	7011      	strb	r1, [r2, #0]
 801bcd6:	4e61      	ldr	r6, [pc, #388]	; (801be5c <_printf_i+0x20c>)
 801bcd8:	e022      	b.n	801bd20 <_printf_i+0xd0>
 801bcda:	0025      	movs	r5, r4
 801bcdc:	681a      	ldr	r2, [r3, #0]
 801bcde:	3542      	adds	r5, #66	; 0x42
 801bce0:	1d11      	adds	r1, r2, #4
 801bce2:	6019      	str	r1, [r3, #0]
 801bce4:	6813      	ldr	r3, [r2, #0]
 801bce6:	702b      	strb	r3, [r5, #0]
 801bce8:	2301      	movs	r3, #1
 801bcea:	e065      	b.n	801bdb8 <_printf_i+0x168>
 801bcec:	6808      	ldr	r0, [r1, #0]
 801bcee:	601a      	str	r2, [r3, #0]
 801bcf0:	0669      	lsls	r1, r5, #25
 801bcf2:	d5d3      	bpl.n	801bc9c <_printf_i+0x4c>
 801bcf4:	b200      	sxth	r0, r0
 801bcf6:	e7d1      	b.n	801bc9c <_printf_i+0x4c>
 801bcf8:	6819      	ldr	r1, [r3, #0]
 801bcfa:	6825      	ldr	r5, [r4, #0]
 801bcfc:	1d08      	adds	r0, r1, #4
 801bcfe:	6018      	str	r0, [r3, #0]
 801bd00:	6808      	ldr	r0, [r1, #0]
 801bd02:	062e      	lsls	r6, r5, #24
 801bd04:	d505      	bpl.n	801bd12 <_printf_i+0xc2>
 801bd06:	4e54      	ldr	r6, [pc, #336]	; (801be58 <_printf_i+0x208>)
 801bd08:	2708      	movs	r7, #8
 801bd0a:	2a6f      	cmp	r2, #111	; 0x6f
 801bd0c:	d01b      	beq.n	801bd46 <_printf_i+0xf6>
 801bd0e:	270a      	movs	r7, #10
 801bd10:	e019      	b.n	801bd46 <_printf_i+0xf6>
 801bd12:	066d      	lsls	r5, r5, #25
 801bd14:	d5f7      	bpl.n	801bd06 <_printf_i+0xb6>
 801bd16:	b280      	uxth	r0, r0
 801bd18:	e7f5      	b.n	801bd06 <_printf_i+0xb6>
 801bd1a:	3145      	adds	r1, #69	; 0x45
 801bd1c:	4e4e      	ldr	r6, [pc, #312]	; (801be58 <_printf_i+0x208>)
 801bd1e:	700a      	strb	r2, [r1, #0]
 801bd20:	6818      	ldr	r0, [r3, #0]
 801bd22:	6822      	ldr	r2, [r4, #0]
 801bd24:	1d01      	adds	r1, r0, #4
 801bd26:	6800      	ldr	r0, [r0, #0]
 801bd28:	6019      	str	r1, [r3, #0]
 801bd2a:	0615      	lsls	r5, r2, #24
 801bd2c:	d521      	bpl.n	801bd72 <_printf_i+0x122>
 801bd2e:	07d3      	lsls	r3, r2, #31
 801bd30:	d502      	bpl.n	801bd38 <_printf_i+0xe8>
 801bd32:	2320      	movs	r3, #32
 801bd34:	431a      	orrs	r2, r3
 801bd36:	6022      	str	r2, [r4, #0]
 801bd38:	2710      	movs	r7, #16
 801bd3a:	2800      	cmp	r0, #0
 801bd3c:	d103      	bne.n	801bd46 <_printf_i+0xf6>
 801bd3e:	2320      	movs	r3, #32
 801bd40:	6822      	ldr	r2, [r4, #0]
 801bd42:	439a      	bics	r2, r3
 801bd44:	6022      	str	r2, [r4, #0]
 801bd46:	0023      	movs	r3, r4
 801bd48:	2200      	movs	r2, #0
 801bd4a:	3343      	adds	r3, #67	; 0x43
 801bd4c:	701a      	strb	r2, [r3, #0]
 801bd4e:	6863      	ldr	r3, [r4, #4]
 801bd50:	60a3      	str	r3, [r4, #8]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	db58      	blt.n	801be08 <_printf_i+0x1b8>
 801bd56:	2204      	movs	r2, #4
 801bd58:	6821      	ldr	r1, [r4, #0]
 801bd5a:	4391      	bics	r1, r2
 801bd5c:	6021      	str	r1, [r4, #0]
 801bd5e:	2800      	cmp	r0, #0
 801bd60:	d154      	bne.n	801be0c <_printf_i+0x1bc>
 801bd62:	9d02      	ldr	r5, [sp, #8]
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d05a      	beq.n	801be1e <_printf_i+0x1ce>
 801bd68:	0025      	movs	r5, r4
 801bd6a:	7833      	ldrb	r3, [r6, #0]
 801bd6c:	3542      	adds	r5, #66	; 0x42
 801bd6e:	702b      	strb	r3, [r5, #0]
 801bd70:	e055      	b.n	801be1e <_printf_i+0x1ce>
 801bd72:	0655      	lsls	r5, r2, #25
 801bd74:	d5db      	bpl.n	801bd2e <_printf_i+0xde>
 801bd76:	b280      	uxth	r0, r0
 801bd78:	e7d9      	b.n	801bd2e <_printf_i+0xde>
 801bd7a:	681a      	ldr	r2, [r3, #0]
 801bd7c:	680d      	ldr	r5, [r1, #0]
 801bd7e:	1d10      	adds	r0, r2, #4
 801bd80:	6949      	ldr	r1, [r1, #20]
 801bd82:	6018      	str	r0, [r3, #0]
 801bd84:	6813      	ldr	r3, [r2, #0]
 801bd86:	062e      	lsls	r6, r5, #24
 801bd88:	d501      	bpl.n	801bd8e <_printf_i+0x13e>
 801bd8a:	6019      	str	r1, [r3, #0]
 801bd8c:	e002      	b.n	801bd94 <_printf_i+0x144>
 801bd8e:	066d      	lsls	r5, r5, #25
 801bd90:	d5fb      	bpl.n	801bd8a <_printf_i+0x13a>
 801bd92:	8019      	strh	r1, [r3, #0]
 801bd94:	2300      	movs	r3, #0
 801bd96:	9d02      	ldr	r5, [sp, #8]
 801bd98:	6123      	str	r3, [r4, #16]
 801bd9a:	e04f      	b.n	801be3c <_printf_i+0x1ec>
 801bd9c:	681a      	ldr	r2, [r3, #0]
 801bd9e:	1d11      	adds	r1, r2, #4
 801bda0:	6019      	str	r1, [r3, #0]
 801bda2:	6815      	ldr	r5, [r2, #0]
 801bda4:	2100      	movs	r1, #0
 801bda6:	6862      	ldr	r2, [r4, #4]
 801bda8:	0028      	movs	r0, r5
 801bdaa:	f000 f86b 	bl	801be84 <memchr>
 801bdae:	2800      	cmp	r0, #0
 801bdb0:	d001      	beq.n	801bdb6 <_printf_i+0x166>
 801bdb2:	1b40      	subs	r0, r0, r5
 801bdb4:	6060      	str	r0, [r4, #4]
 801bdb6:	6863      	ldr	r3, [r4, #4]
 801bdb8:	6123      	str	r3, [r4, #16]
 801bdba:	2300      	movs	r3, #0
 801bdbc:	9a02      	ldr	r2, [sp, #8]
 801bdbe:	7013      	strb	r3, [r2, #0]
 801bdc0:	e03c      	b.n	801be3c <_printf_i+0x1ec>
 801bdc2:	6923      	ldr	r3, [r4, #16]
 801bdc4:	002a      	movs	r2, r5
 801bdc6:	9904      	ldr	r1, [sp, #16]
 801bdc8:	9803      	ldr	r0, [sp, #12]
 801bdca:	9d05      	ldr	r5, [sp, #20]
 801bdcc:	47a8      	blx	r5
 801bdce:	1c43      	adds	r3, r0, #1
 801bdd0:	d03e      	beq.n	801be50 <_printf_i+0x200>
 801bdd2:	6823      	ldr	r3, [r4, #0]
 801bdd4:	079b      	lsls	r3, r3, #30
 801bdd6:	d415      	bmi.n	801be04 <_printf_i+0x1b4>
 801bdd8:	9b07      	ldr	r3, [sp, #28]
 801bdda:	68e0      	ldr	r0, [r4, #12]
 801bddc:	4298      	cmp	r0, r3
 801bdde:	da39      	bge.n	801be54 <_printf_i+0x204>
 801bde0:	0018      	movs	r0, r3
 801bde2:	e037      	b.n	801be54 <_printf_i+0x204>
 801bde4:	0022      	movs	r2, r4
 801bde6:	2301      	movs	r3, #1
 801bde8:	3219      	adds	r2, #25
 801bdea:	9904      	ldr	r1, [sp, #16]
 801bdec:	9803      	ldr	r0, [sp, #12]
 801bdee:	9e05      	ldr	r6, [sp, #20]
 801bdf0:	47b0      	blx	r6
 801bdf2:	1c43      	adds	r3, r0, #1
 801bdf4:	d02c      	beq.n	801be50 <_printf_i+0x200>
 801bdf6:	3501      	adds	r5, #1
 801bdf8:	68e3      	ldr	r3, [r4, #12]
 801bdfa:	9a07      	ldr	r2, [sp, #28]
 801bdfc:	1a9b      	subs	r3, r3, r2
 801bdfe:	42ab      	cmp	r3, r5
 801be00:	dcf0      	bgt.n	801bde4 <_printf_i+0x194>
 801be02:	e7e9      	b.n	801bdd8 <_printf_i+0x188>
 801be04:	2500      	movs	r5, #0
 801be06:	e7f7      	b.n	801bdf8 <_printf_i+0x1a8>
 801be08:	2800      	cmp	r0, #0
 801be0a:	d0ad      	beq.n	801bd68 <_printf_i+0x118>
 801be0c:	9d02      	ldr	r5, [sp, #8]
 801be0e:	0039      	movs	r1, r7
 801be10:	f7e4 fa00 	bl	8000214 <__aeabi_uidivmod>
 801be14:	5c73      	ldrb	r3, [r6, r1]
 801be16:	3d01      	subs	r5, #1
 801be18:	702b      	strb	r3, [r5, #0]
 801be1a:	2800      	cmp	r0, #0
 801be1c:	d1f7      	bne.n	801be0e <_printf_i+0x1be>
 801be1e:	2f08      	cmp	r7, #8
 801be20:	d109      	bne.n	801be36 <_printf_i+0x1e6>
 801be22:	6823      	ldr	r3, [r4, #0]
 801be24:	07db      	lsls	r3, r3, #31
 801be26:	d506      	bpl.n	801be36 <_printf_i+0x1e6>
 801be28:	6863      	ldr	r3, [r4, #4]
 801be2a:	6922      	ldr	r2, [r4, #16]
 801be2c:	4293      	cmp	r3, r2
 801be2e:	dc02      	bgt.n	801be36 <_printf_i+0x1e6>
 801be30:	2330      	movs	r3, #48	; 0x30
 801be32:	3d01      	subs	r5, #1
 801be34:	702b      	strb	r3, [r5, #0]
 801be36:	9b02      	ldr	r3, [sp, #8]
 801be38:	1b5b      	subs	r3, r3, r5
 801be3a:	6123      	str	r3, [r4, #16]
 801be3c:	9b05      	ldr	r3, [sp, #20]
 801be3e:	aa07      	add	r2, sp, #28
 801be40:	9300      	str	r3, [sp, #0]
 801be42:	0021      	movs	r1, r4
 801be44:	9b04      	ldr	r3, [sp, #16]
 801be46:	9803      	ldr	r0, [sp, #12]
 801be48:	f7ff fe94 	bl	801bb74 <_printf_common>
 801be4c:	1c43      	adds	r3, r0, #1
 801be4e:	d1b8      	bne.n	801bdc2 <_printf_i+0x172>
 801be50:	2001      	movs	r0, #1
 801be52:	4240      	negs	r0, r0
 801be54:	b009      	add	sp, #36	; 0x24
 801be56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be58:	0801d44d 	.word	0x0801d44d
 801be5c:	0801d45e 	.word	0x0801d45e

0801be60 <_sbrk_r>:
 801be60:	2300      	movs	r3, #0
 801be62:	b570      	push	{r4, r5, r6, lr}
 801be64:	4c06      	ldr	r4, [pc, #24]	; (801be80 <_sbrk_r+0x20>)
 801be66:	0005      	movs	r5, r0
 801be68:	0008      	movs	r0, r1
 801be6a:	6023      	str	r3, [r4, #0]
 801be6c:	f7e9 fe3a 	bl	8005ae4 <_sbrk>
 801be70:	1c43      	adds	r3, r0, #1
 801be72:	d103      	bne.n	801be7c <_sbrk_r+0x1c>
 801be74:	6823      	ldr	r3, [r4, #0]
 801be76:	2b00      	cmp	r3, #0
 801be78:	d000      	beq.n	801be7c <_sbrk_r+0x1c>
 801be7a:	602b      	str	r3, [r5, #0]
 801be7c:	bd70      	pop	{r4, r5, r6, pc}
 801be7e:	46c0      	nop			; (mov r8, r8)
 801be80:	20001698 	.word	0x20001698

0801be84 <memchr>:
 801be84:	b2c9      	uxtb	r1, r1
 801be86:	1882      	adds	r2, r0, r2
 801be88:	4290      	cmp	r0, r2
 801be8a:	d101      	bne.n	801be90 <memchr+0xc>
 801be8c:	2000      	movs	r0, #0
 801be8e:	4770      	bx	lr
 801be90:	7803      	ldrb	r3, [r0, #0]
 801be92:	428b      	cmp	r3, r1
 801be94:	d0fb      	beq.n	801be8e <memchr+0xa>
 801be96:	3001      	adds	r0, #1
 801be98:	e7f6      	b.n	801be88 <memchr+0x4>

0801be9a <memcpy>:
 801be9a:	2300      	movs	r3, #0
 801be9c:	b510      	push	{r4, lr}
 801be9e:	429a      	cmp	r2, r3
 801bea0:	d100      	bne.n	801bea4 <memcpy+0xa>
 801bea2:	bd10      	pop	{r4, pc}
 801bea4:	5ccc      	ldrb	r4, [r1, r3]
 801bea6:	54c4      	strb	r4, [r0, r3]
 801bea8:	3301      	adds	r3, #1
 801beaa:	e7f8      	b.n	801be9e <memcpy+0x4>

0801beac <memmove>:
 801beac:	b510      	push	{r4, lr}
 801beae:	4288      	cmp	r0, r1
 801beb0:	d902      	bls.n	801beb8 <memmove+0xc>
 801beb2:	188b      	adds	r3, r1, r2
 801beb4:	4298      	cmp	r0, r3
 801beb6:	d303      	bcc.n	801bec0 <memmove+0x14>
 801beb8:	2300      	movs	r3, #0
 801beba:	e007      	b.n	801becc <memmove+0x20>
 801bebc:	5c8b      	ldrb	r3, [r1, r2]
 801bebe:	5483      	strb	r3, [r0, r2]
 801bec0:	3a01      	subs	r2, #1
 801bec2:	d2fb      	bcs.n	801bebc <memmove+0x10>
 801bec4:	bd10      	pop	{r4, pc}
 801bec6:	5ccc      	ldrb	r4, [r1, r3]
 801bec8:	54c4      	strb	r4, [r0, r3]
 801beca:	3301      	adds	r3, #1
 801becc:	429a      	cmp	r2, r3
 801bece:	d1fa      	bne.n	801bec6 <memmove+0x1a>
 801bed0:	e7f8      	b.n	801bec4 <memmove+0x18>

0801bed2 <__malloc_lock>:
 801bed2:	4770      	bx	lr

0801bed4 <__malloc_unlock>:
 801bed4:	4770      	bx	lr
	...

0801bed8 <_free_r>:
 801bed8:	b570      	push	{r4, r5, r6, lr}
 801beda:	0005      	movs	r5, r0
 801bedc:	2900      	cmp	r1, #0
 801bede:	d010      	beq.n	801bf02 <_free_r+0x2a>
 801bee0:	1f0c      	subs	r4, r1, #4
 801bee2:	6823      	ldr	r3, [r4, #0]
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	da00      	bge.n	801beea <_free_r+0x12>
 801bee8:	18e4      	adds	r4, r4, r3
 801beea:	0028      	movs	r0, r5
 801beec:	f7ff fff1 	bl	801bed2 <__malloc_lock>
 801bef0:	4a1d      	ldr	r2, [pc, #116]	; (801bf68 <_free_r+0x90>)
 801bef2:	6813      	ldr	r3, [r2, #0]
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d105      	bne.n	801bf04 <_free_r+0x2c>
 801bef8:	6063      	str	r3, [r4, #4]
 801befa:	6014      	str	r4, [r2, #0]
 801befc:	0028      	movs	r0, r5
 801befe:	f7ff ffe9 	bl	801bed4 <__malloc_unlock>
 801bf02:	bd70      	pop	{r4, r5, r6, pc}
 801bf04:	42a3      	cmp	r3, r4
 801bf06:	d909      	bls.n	801bf1c <_free_r+0x44>
 801bf08:	6821      	ldr	r1, [r4, #0]
 801bf0a:	1860      	adds	r0, r4, r1
 801bf0c:	4283      	cmp	r3, r0
 801bf0e:	d1f3      	bne.n	801bef8 <_free_r+0x20>
 801bf10:	6818      	ldr	r0, [r3, #0]
 801bf12:	685b      	ldr	r3, [r3, #4]
 801bf14:	1841      	adds	r1, r0, r1
 801bf16:	6021      	str	r1, [r4, #0]
 801bf18:	e7ee      	b.n	801bef8 <_free_r+0x20>
 801bf1a:	0013      	movs	r3, r2
 801bf1c:	685a      	ldr	r2, [r3, #4]
 801bf1e:	2a00      	cmp	r2, #0
 801bf20:	d001      	beq.n	801bf26 <_free_r+0x4e>
 801bf22:	42a2      	cmp	r2, r4
 801bf24:	d9f9      	bls.n	801bf1a <_free_r+0x42>
 801bf26:	6819      	ldr	r1, [r3, #0]
 801bf28:	1858      	adds	r0, r3, r1
 801bf2a:	42a0      	cmp	r0, r4
 801bf2c:	d10b      	bne.n	801bf46 <_free_r+0x6e>
 801bf2e:	6820      	ldr	r0, [r4, #0]
 801bf30:	1809      	adds	r1, r1, r0
 801bf32:	1858      	adds	r0, r3, r1
 801bf34:	6019      	str	r1, [r3, #0]
 801bf36:	4282      	cmp	r2, r0
 801bf38:	d1e0      	bne.n	801befc <_free_r+0x24>
 801bf3a:	6810      	ldr	r0, [r2, #0]
 801bf3c:	6852      	ldr	r2, [r2, #4]
 801bf3e:	1841      	adds	r1, r0, r1
 801bf40:	6019      	str	r1, [r3, #0]
 801bf42:	605a      	str	r2, [r3, #4]
 801bf44:	e7da      	b.n	801befc <_free_r+0x24>
 801bf46:	42a0      	cmp	r0, r4
 801bf48:	d902      	bls.n	801bf50 <_free_r+0x78>
 801bf4a:	230c      	movs	r3, #12
 801bf4c:	602b      	str	r3, [r5, #0]
 801bf4e:	e7d5      	b.n	801befc <_free_r+0x24>
 801bf50:	6821      	ldr	r1, [r4, #0]
 801bf52:	1860      	adds	r0, r4, r1
 801bf54:	4282      	cmp	r2, r0
 801bf56:	d103      	bne.n	801bf60 <_free_r+0x88>
 801bf58:	6810      	ldr	r0, [r2, #0]
 801bf5a:	6852      	ldr	r2, [r2, #4]
 801bf5c:	1841      	adds	r1, r0, r1
 801bf5e:	6021      	str	r1, [r4, #0]
 801bf60:	6062      	str	r2, [r4, #4]
 801bf62:	605c      	str	r4, [r3, #4]
 801bf64:	e7ca      	b.n	801befc <_free_r+0x24>
 801bf66:	46c0      	nop			; (mov r8, r8)
 801bf68:	20001418 	.word	0x20001418

0801bf6c <_realloc_r>:
 801bf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf6e:	0007      	movs	r7, r0
 801bf70:	000d      	movs	r5, r1
 801bf72:	0016      	movs	r6, r2
 801bf74:	2900      	cmp	r1, #0
 801bf76:	d105      	bne.n	801bf84 <_realloc_r+0x18>
 801bf78:	0011      	movs	r1, r2
 801bf7a:	f7ff fc3d 	bl	801b7f8 <_malloc_r>
 801bf7e:	0004      	movs	r4, r0
 801bf80:	0020      	movs	r0, r4
 801bf82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf84:	2a00      	cmp	r2, #0
 801bf86:	d103      	bne.n	801bf90 <_realloc_r+0x24>
 801bf88:	f7ff ffa6 	bl	801bed8 <_free_r>
 801bf8c:	0034      	movs	r4, r6
 801bf8e:	e7f7      	b.n	801bf80 <_realloc_r+0x14>
 801bf90:	f000 f812 	bl	801bfb8 <_malloc_usable_size_r>
 801bf94:	002c      	movs	r4, r5
 801bf96:	42b0      	cmp	r0, r6
 801bf98:	d2f2      	bcs.n	801bf80 <_realloc_r+0x14>
 801bf9a:	0031      	movs	r1, r6
 801bf9c:	0038      	movs	r0, r7
 801bf9e:	f7ff fc2b 	bl	801b7f8 <_malloc_r>
 801bfa2:	1e04      	subs	r4, r0, #0
 801bfa4:	d0ec      	beq.n	801bf80 <_realloc_r+0x14>
 801bfa6:	0029      	movs	r1, r5
 801bfa8:	0032      	movs	r2, r6
 801bfaa:	f7ff ff76 	bl	801be9a <memcpy>
 801bfae:	0029      	movs	r1, r5
 801bfb0:	0038      	movs	r0, r7
 801bfb2:	f7ff ff91 	bl	801bed8 <_free_r>
 801bfb6:	e7e3      	b.n	801bf80 <_realloc_r+0x14>

0801bfb8 <_malloc_usable_size_r>:
 801bfb8:	1f0b      	subs	r3, r1, #4
 801bfba:	681b      	ldr	r3, [r3, #0]
 801bfbc:	1f18      	subs	r0, r3, #4
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	da01      	bge.n	801bfc6 <_malloc_usable_size_r+0xe>
 801bfc2:	580b      	ldr	r3, [r1, r0]
 801bfc4:	18c0      	adds	r0, r0, r3
 801bfc6:	4770      	bx	lr

0801bfc8 <ceil>:
 801bfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfca:	004b      	lsls	r3, r1, #1
 801bfcc:	4a39      	ldr	r2, [pc, #228]	; (801c0b4 <ceil+0xec>)
 801bfce:	0d5b      	lsrs	r3, r3, #21
 801bfd0:	b085      	sub	sp, #20
 801bfd2:	189e      	adds	r6, r3, r2
 801bfd4:	000c      	movs	r4, r1
 801bfd6:	0005      	movs	r5, r0
 801bfd8:	9003      	str	r0, [sp, #12]
 801bfda:	2e13      	cmp	r6, #19
 801bfdc:	dc32      	bgt.n	801c044 <ceil+0x7c>
 801bfde:	2e00      	cmp	r6, #0
 801bfe0:	da13      	bge.n	801c00a <ceil+0x42>
 801bfe2:	4a35      	ldr	r2, [pc, #212]	; (801c0b8 <ceil+0xf0>)
 801bfe4:	4b35      	ldr	r3, [pc, #212]	; (801c0bc <ceil+0xf4>)
 801bfe6:	f7e5 f977 	bl	80012d8 <__aeabi_dadd>
 801bfea:	2200      	movs	r2, #0
 801bfec:	2300      	movs	r3, #0
 801bfee:	f7e4 fa2b 	bl	8000448 <__aeabi_dcmpgt>
 801bff2:	2800      	cmp	r0, #0
 801bff4:	d006      	beq.n	801c004 <ceil+0x3c>
 801bff6:	2c00      	cmp	r4, #0
 801bff8:	db57      	blt.n	801c0aa <ceil+0xe2>
 801bffa:	432c      	orrs	r4, r5
 801bffc:	2500      	movs	r5, #0
 801bffe:	42ac      	cmp	r4, r5
 801c000:	d000      	beq.n	801c004 <ceil+0x3c>
 801c002:	4c2f      	ldr	r4, [pc, #188]	; (801c0c0 <ceil+0xf8>)
 801c004:	0028      	movs	r0, r5
 801c006:	0021      	movs	r1, r4
 801c008:	e026      	b.n	801c058 <ceil+0x90>
 801c00a:	4f2e      	ldr	r7, [pc, #184]	; (801c0c4 <ceil+0xfc>)
 801c00c:	4137      	asrs	r7, r6
 801c00e:	003b      	movs	r3, r7
 801c010:	400b      	ands	r3, r1
 801c012:	4303      	orrs	r3, r0
 801c014:	d020      	beq.n	801c058 <ceil+0x90>
 801c016:	9000      	str	r0, [sp, #0]
 801c018:	9101      	str	r1, [sp, #4]
 801c01a:	4a27      	ldr	r2, [pc, #156]	; (801c0b8 <ceil+0xf0>)
 801c01c:	4b27      	ldr	r3, [pc, #156]	; (801c0bc <ceil+0xf4>)
 801c01e:	9800      	ldr	r0, [sp, #0]
 801c020:	9901      	ldr	r1, [sp, #4]
 801c022:	f7e5 f959 	bl	80012d8 <__aeabi_dadd>
 801c026:	2200      	movs	r2, #0
 801c028:	2300      	movs	r3, #0
 801c02a:	f7e4 fa0d 	bl	8000448 <__aeabi_dcmpgt>
 801c02e:	2800      	cmp	r0, #0
 801c030:	d0e8      	beq.n	801c004 <ceil+0x3c>
 801c032:	2c00      	cmp	r4, #0
 801c034:	dd03      	ble.n	801c03e <ceil+0x76>
 801c036:	2380      	movs	r3, #128	; 0x80
 801c038:	035b      	lsls	r3, r3, #13
 801c03a:	4133      	asrs	r3, r6
 801c03c:	18e4      	adds	r4, r4, r3
 801c03e:	43bc      	bics	r4, r7
 801c040:	2500      	movs	r5, #0
 801c042:	e7df      	b.n	801c004 <ceil+0x3c>
 801c044:	2e33      	cmp	r6, #51	; 0x33
 801c046:	dd09      	ble.n	801c05c <ceil+0x94>
 801c048:	2380      	movs	r3, #128	; 0x80
 801c04a:	00db      	lsls	r3, r3, #3
 801c04c:	429e      	cmp	r6, r3
 801c04e:	d103      	bne.n	801c058 <ceil+0x90>
 801c050:	0002      	movs	r2, r0
 801c052:	000b      	movs	r3, r1
 801c054:	f7e5 f940 	bl	80012d8 <__aeabi_dadd>
 801c058:	b005      	add	sp, #20
 801c05a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c05c:	2701      	movs	r7, #1
 801c05e:	4a1a      	ldr	r2, [pc, #104]	; (801c0c8 <ceil+0x100>)
 801c060:	427f      	negs	r7, r7
 801c062:	189b      	adds	r3, r3, r2
 801c064:	40df      	lsrs	r7, r3
 801c066:	4238      	tst	r0, r7
 801c068:	d0f6      	beq.n	801c058 <ceil+0x90>
 801c06a:	9000      	str	r0, [sp, #0]
 801c06c:	9101      	str	r1, [sp, #4]
 801c06e:	4a12      	ldr	r2, [pc, #72]	; (801c0b8 <ceil+0xf0>)
 801c070:	4b12      	ldr	r3, [pc, #72]	; (801c0bc <ceil+0xf4>)
 801c072:	9800      	ldr	r0, [sp, #0]
 801c074:	9901      	ldr	r1, [sp, #4]
 801c076:	f7e5 f92f 	bl	80012d8 <__aeabi_dadd>
 801c07a:	2200      	movs	r2, #0
 801c07c:	2300      	movs	r3, #0
 801c07e:	f7e4 f9e3 	bl	8000448 <__aeabi_dcmpgt>
 801c082:	2800      	cmp	r0, #0
 801c084:	d0be      	beq.n	801c004 <ceil+0x3c>
 801c086:	2c00      	cmp	r4, #0
 801c088:	dd02      	ble.n	801c090 <ceil+0xc8>
 801c08a:	2e14      	cmp	r6, #20
 801c08c:	d102      	bne.n	801c094 <ceil+0xcc>
 801c08e:	3401      	adds	r4, #1
 801c090:	43bd      	bics	r5, r7
 801c092:	e7b7      	b.n	801c004 <ceil+0x3c>
 801c094:	2334      	movs	r3, #52	; 0x34
 801c096:	1b9e      	subs	r6, r3, r6
 801c098:	3b33      	subs	r3, #51	; 0x33
 801c09a:	40b3      	lsls	r3, r6
 801c09c:	18ed      	adds	r5, r5, r3
 801c09e:	9b03      	ldr	r3, [sp, #12]
 801c0a0:	429d      	cmp	r5, r3
 801c0a2:	419b      	sbcs	r3, r3
 801c0a4:	425b      	negs	r3, r3
 801c0a6:	18e4      	adds	r4, r4, r3
 801c0a8:	e7f2      	b.n	801c090 <ceil+0xc8>
 801c0aa:	2480      	movs	r4, #128	; 0x80
 801c0ac:	2500      	movs	r5, #0
 801c0ae:	0624      	lsls	r4, r4, #24
 801c0b0:	e7a8      	b.n	801c004 <ceil+0x3c>
 801c0b2:	46c0      	nop			; (mov r8, r8)
 801c0b4:	fffffc01 	.word	0xfffffc01
 801c0b8:	8800759c 	.word	0x8800759c
 801c0bc:	7e37e43c 	.word	0x7e37e43c
 801c0c0:	3ff00000 	.word	0x3ff00000
 801c0c4:	000fffff 	.word	0x000fffff
 801c0c8:	fffffbed 	.word	0xfffffbed

0801c0cc <floor>:
 801c0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0ce:	004b      	lsls	r3, r1, #1
 801c0d0:	4a39      	ldr	r2, [pc, #228]	; (801c1b8 <floor+0xec>)
 801c0d2:	0d5b      	lsrs	r3, r3, #21
 801c0d4:	b085      	sub	sp, #20
 801c0d6:	189e      	adds	r6, r3, r2
 801c0d8:	000c      	movs	r4, r1
 801c0da:	0005      	movs	r5, r0
 801c0dc:	9003      	str	r0, [sp, #12]
 801c0de:	2e13      	cmp	r6, #19
 801c0e0:	dc34      	bgt.n	801c14c <floor+0x80>
 801c0e2:	2e00      	cmp	r6, #0
 801c0e4:	da15      	bge.n	801c112 <floor+0x46>
 801c0e6:	4a35      	ldr	r2, [pc, #212]	; (801c1bc <floor+0xf0>)
 801c0e8:	4b35      	ldr	r3, [pc, #212]	; (801c1c0 <floor+0xf4>)
 801c0ea:	f7e5 f8f5 	bl	80012d8 <__aeabi_dadd>
 801c0ee:	2200      	movs	r2, #0
 801c0f0:	2300      	movs	r3, #0
 801c0f2:	f7e4 f9a9 	bl	8000448 <__aeabi_dcmpgt>
 801c0f6:	2800      	cmp	r0, #0
 801c0f8:	d008      	beq.n	801c10c <floor+0x40>
 801c0fa:	2c00      	cmp	r4, #0
 801c0fc:	da59      	bge.n	801c1b2 <floor+0xe6>
 801c0fe:	0063      	lsls	r3, r4, #1
 801c100:	085b      	lsrs	r3, r3, #1
 801c102:	432b      	orrs	r3, r5
 801c104:	2500      	movs	r5, #0
 801c106:	42ab      	cmp	r3, r5
 801c108:	d000      	beq.n	801c10c <floor+0x40>
 801c10a:	4c2e      	ldr	r4, [pc, #184]	; (801c1c4 <floor+0xf8>)
 801c10c:	0028      	movs	r0, r5
 801c10e:	0021      	movs	r1, r4
 801c110:	e026      	b.n	801c160 <floor+0x94>
 801c112:	4f2d      	ldr	r7, [pc, #180]	; (801c1c8 <floor+0xfc>)
 801c114:	4137      	asrs	r7, r6
 801c116:	003b      	movs	r3, r7
 801c118:	400b      	ands	r3, r1
 801c11a:	4303      	orrs	r3, r0
 801c11c:	d020      	beq.n	801c160 <floor+0x94>
 801c11e:	9000      	str	r0, [sp, #0]
 801c120:	9101      	str	r1, [sp, #4]
 801c122:	4a26      	ldr	r2, [pc, #152]	; (801c1bc <floor+0xf0>)
 801c124:	4b26      	ldr	r3, [pc, #152]	; (801c1c0 <floor+0xf4>)
 801c126:	9800      	ldr	r0, [sp, #0]
 801c128:	9901      	ldr	r1, [sp, #4]
 801c12a:	f7e5 f8d5 	bl	80012d8 <__aeabi_dadd>
 801c12e:	2200      	movs	r2, #0
 801c130:	2300      	movs	r3, #0
 801c132:	f7e4 f989 	bl	8000448 <__aeabi_dcmpgt>
 801c136:	2800      	cmp	r0, #0
 801c138:	d0e8      	beq.n	801c10c <floor+0x40>
 801c13a:	2c00      	cmp	r4, #0
 801c13c:	da03      	bge.n	801c146 <floor+0x7a>
 801c13e:	2380      	movs	r3, #128	; 0x80
 801c140:	035b      	lsls	r3, r3, #13
 801c142:	4133      	asrs	r3, r6
 801c144:	18e4      	adds	r4, r4, r3
 801c146:	43bc      	bics	r4, r7
 801c148:	2500      	movs	r5, #0
 801c14a:	e7df      	b.n	801c10c <floor+0x40>
 801c14c:	2e33      	cmp	r6, #51	; 0x33
 801c14e:	dd09      	ble.n	801c164 <floor+0x98>
 801c150:	2380      	movs	r3, #128	; 0x80
 801c152:	00db      	lsls	r3, r3, #3
 801c154:	429e      	cmp	r6, r3
 801c156:	d103      	bne.n	801c160 <floor+0x94>
 801c158:	0002      	movs	r2, r0
 801c15a:	000b      	movs	r3, r1
 801c15c:	f7e5 f8bc 	bl	80012d8 <__aeabi_dadd>
 801c160:	b005      	add	sp, #20
 801c162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c164:	2701      	movs	r7, #1
 801c166:	4a19      	ldr	r2, [pc, #100]	; (801c1cc <floor+0x100>)
 801c168:	427f      	negs	r7, r7
 801c16a:	189b      	adds	r3, r3, r2
 801c16c:	40df      	lsrs	r7, r3
 801c16e:	4238      	tst	r0, r7
 801c170:	d0f6      	beq.n	801c160 <floor+0x94>
 801c172:	9000      	str	r0, [sp, #0]
 801c174:	9101      	str	r1, [sp, #4]
 801c176:	4a11      	ldr	r2, [pc, #68]	; (801c1bc <floor+0xf0>)
 801c178:	4b11      	ldr	r3, [pc, #68]	; (801c1c0 <floor+0xf4>)
 801c17a:	9800      	ldr	r0, [sp, #0]
 801c17c:	9901      	ldr	r1, [sp, #4]
 801c17e:	f7e5 f8ab 	bl	80012d8 <__aeabi_dadd>
 801c182:	2200      	movs	r2, #0
 801c184:	2300      	movs	r3, #0
 801c186:	f7e4 f95f 	bl	8000448 <__aeabi_dcmpgt>
 801c18a:	2800      	cmp	r0, #0
 801c18c:	d0be      	beq.n	801c10c <floor+0x40>
 801c18e:	2c00      	cmp	r4, #0
 801c190:	da02      	bge.n	801c198 <floor+0xcc>
 801c192:	2e14      	cmp	r6, #20
 801c194:	d102      	bne.n	801c19c <floor+0xd0>
 801c196:	3401      	adds	r4, #1
 801c198:	43bd      	bics	r5, r7
 801c19a:	e7b7      	b.n	801c10c <floor+0x40>
 801c19c:	2334      	movs	r3, #52	; 0x34
 801c19e:	1b9e      	subs	r6, r3, r6
 801c1a0:	3b33      	subs	r3, #51	; 0x33
 801c1a2:	40b3      	lsls	r3, r6
 801c1a4:	18ed      	adds	r5, r5, r3
 801c1a6:	9b03      	ldr	r3, [sp, #12]
 801c1a8:	429d      	cmp	r5, r3
 801c1aa:	419b      	sbcs	r3, r3
 801c1ac:	425b      	negs	r3, r3
 801c1ae:	18e4      	adds	r4, r4, r3
 801c1b0:	e7f2      	b.n	801c198 <floor+0xcc>
 801c1b2:	2500      	movs	r5, #0
 801c1b4:	002c      	movs	r4, r5
 801c1b6:	e7a9      	b.n	801c10c <floor+0x40>
 801c1b8:	fffffc01 	.word	0xfffffc01
 801c1bc:	8800759c 	.word	0x8800759c
 801c1c0:	7e37e43c 	.word	0x7e37e43c
 801c1c4:	bff00000 	.word	0xbff00000
 801c1c8:	000fffff 	.word	0x000fffff
 801c1cc:	fffffbed 	.word	0xfffffbed

0801c1d0 <round>:
 801c1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1d2:	004a      	lsls	r2, r1, #1
 801c1d4:	0007      	movs	r7, r0
 801c1d6:	481f      	ldr	r0, [pc, #124]	; (801c254 <round+0x84>)
 801c1d8:	0d52      	lsrs	r2, r2, #21
 801c1da:	1815      	adds	r5, r2, r0
 801c1dc:	000e      	movs	r6, r1
 801c1de:	2d13      	cmp	r5, #19
 801c1e0:	dc18      	bgt.n	801c214 <round+0x44>
 801c1e2:	2d00      	cmp	r5, #0
 801c1e4:	da09      	bge.n	801c1fa <round+0x2a>
 801c1e6:	0fcb      	lsrs	r3, r1, #31
 801c1e8:	07db      	lsls	r3, r3, #31
 801c1ea:	2200      	movs	r2, #0
 801c1ec:	1c69      	adds	r1, r5, #1
 801c1ee:	d101      	bne.n	801c1f4 <round+0x24>
 801c1f0:	4919      	ldr	r1, [pc, #100]	; (801c258 <round+0x88>)
 801c1f2:	430b      	orrs	r3, r1
 801c1f4:	0019      	movs	r1, r3
 801c1f6:	0010      	movs	r0, r2
 801c1f8:	e017      	b.n	801c22a <round+0x5a>
 801c1fa:	4a18      	ldr	r2, [pc, #96]	; (801c25c <round+0x8c>)
 801c1fc:	412a      	asrs	r2, r5
 801c1fe:	420a      	tst	r2, r1
 801c200:	d101      	bne.n	801c206 <round+0x36>
 801c202:	2f00      	cmp	r7, #0
 801c204:	d012      	beq.n	801c22c <round+0x5c>
 801c206:	2380      	movs	r3, #128	; 0x80
 801c208:	031b      	lsls	r3, r3, #12
 801c20a:	412b      	asrs	r3, r5
 801c20c:	199b      	adds	r3, r3, r6
 801c20e:	4393      	bics	r3, r2
 801c210:	2200      	movs	r2, #0
 801c212:	e7ef      	b.n	801c1f4 <round+0x24>
 801c214:	2d33      	cmp	r5, #51	; 0x33
 801c216:	dd0b      	ble.n	801c230 <round+0x60>
 801c218:	2380      	movs	r3, #128	; 0x80
 801c21a:	00db      	lsls	r3, r3, #3
 801c21c:	429d      	cmp	r5, r3
 801c21e:	d105      	bne.n	801c22c <round+0x5c>
 801c220:	003a      	movs	r2, r7
 801c222:	000b      	movs	r3, r1
 801c224:	0038      	movs	r0, r7
 801c226:	f7e5 f857 	bl	80012d8 <__aeabi_dadd>
 801c22a:	0007      	movs	r7, r0
 801c22c:	0038      	movs	r0, r7
 801c22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c230:	2601      	movs	r6, #1
 801c232:	480b      	ldr	r0, [pc, #44]	; (801c260 <round+0x90>)
 801c234:	4276      	negs	r6, r6
 801c236:	1812      	adds	r2, r2, r0
 801c238:	40d6      	lsrs	r6, r2
 801c23a:	423e      	tst	r6, r7
 801c23c:	d0f6      	beq.n	801c22c <round+0x5c>
 801c23e:	2233      	movs	r2, #51	; 0x33
 801c240:	1b55      	subs	r5, r2, r5
 801c242:	3a32      	subs	r2, #50	; 0x32
 801c244:	40aa      	lsls	r2, r5
 801c246:	19d2      	adds	r2, r2, r7
 801c248:	42ba      	cmp	r2, r7
 801c24a:	41a4      	sbcs	r4, r4
 801c24c:	4264      	negs	r4, r4
 801c24e:	190b      	adds	r3, r1, r4
 801c250:	43b2      	bics	r2, r6
 801c252:	e7cf      	b.n	801c1f4 <round+0x24>
 801c254:	fffffc01 	.word	0xfffffc01
 801c258:	3ff00000 	.word	0x3ff00000
 801c25c:	000fffff 	.word	0x000fffff
 801c260:	fffffbed 	.word	0xfffffbed

0801c264 <_init>:
 801c264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c266:	46c0      	nop			; (mov r8, r8)
 801c268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c26a:	bc08      	pop	{r3}
 801c26c:	469e      	mov	lr, r3
 801c26e:	4770      	bx	lr

0801c270 <_fini>:
 801c270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c272:	46c0      	nop			; (mov r8, r8)
 801c274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c276:	bc08      	pop	{r3}
 801c278:	469e      	mov	lr, r3
 801c27a:	4770      	bx	lr
