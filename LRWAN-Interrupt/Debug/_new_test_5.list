
_new_test_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c0b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011f4  0801c178  0801c178  0002c178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d36c  0801d36c  00030158  2**0
                  CONTENTS
  4 .ARM          00000008  0801d36c  0801d36c  0002d36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d374  0801d374  00030158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d374  0801d374  0002d374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d378  0801d378  0002d378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  0801d37c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001538  20000158  0801d4d4  00030158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001690  0801d4d4  00031690  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048a40  00000000  00000000  00030180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008413  00000000  00000000  00078bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023c0  00000000  00000000  00080fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002058  00000000  00000000  00083398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000230c9  00000000  00000000  000853f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a330  00000000  00000000  000a84b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a88f7  00000000  00000000  000d27e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017b0e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085c0  00000000  00000000  0017b15c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000158 	.word	0x20000158
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801c160 	.word	0x0801c160

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000015c 	.word	0x2000015c
 8000104:	0801c160 	.word	0x0801c160

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 fe25 	bl	8002054 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f001 fd7d 	bl	8001f14 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 fe17 	bl	8002054 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fe0d 	bl	8002054 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fd9f 	bl	8001f8c <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fd95 	bl	8001f8c <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	1c08      	adds	r0, r1, #0
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 fb3d 	bl	8000af8 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 fabf 	bl	8000a0c <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fb2f 	bl	8000af8 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fb25 	bl	8000af8 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 facd 	bl	8000a5c <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fac3 	bl	8000a5c <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_ldivmod>:
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d115      	bne.n	8000514 <__aeabi_ldivmod+0x30>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d113      	bne.n	8000514 <__aeabi_ldivmod+0x30>
 80004ec:	2900      	cmp	r1, #0
 80004ee:	db06      	blt.n	80004fe <__aeabi_ldivmod+0x1a>
 80004f0:	dc01      	bgt.n	80004f6 <__aeabi_ldivmod+0x12>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d006      	beq.n	8000504 <__aeabi_ldivmod+0x20>
 80004f6:	2000      	movs	r0, #0
 80004f8:	43c0      	mvns	r0, r0
 80004fa:	0841      	lsrs	r1, r0, #1
 80004fc:	e002      	b.n	8000504 <__aeabi_ldivmod+0x20>
 80004fe:	2180      	movs	r1, #128	; 0x80
 8000500:	0609      	lsls	r1, r1, #24
 8000502:	2000      	movs	r0, #0
 8000504:	b407      	push	{r0, r1, r2}
 8000506:	4802      	ldr	r0, [pc, #8]	; (8000510 <__aeabi_ldivmod+0x2c>)
 8000508:	a101      	add	r1, pc, #4	; (adr r1, 8000510 <__aeabi_ldivmod+0x2c>)
 800050a:	1840      	adds	r0, r0, r1
 800050c:	9002      	str	r0, [sp, #8]
 800050e:	bd03      	pop	{r0, r1, pc}
 8000510:	fffffee1 	.word	0xfffffee1
 8000514:	b403      	push	{r0, r1}
 8000516:	4668      	mov	r0, sp
 8000518:	b501      	push	{r0, lr}
 800051a:	9802      	ldr	r0, [sp, #8]
 800051c:	f000 f948 	bl	80007b0 <__gnu_ldivmod_helper>
 8000520:	9b01      	ldr	r3, [sp, #4]
 8000522:	469e      	mov	lr, r3
 8000524:	b002      	add	sp, #8
 8000526:	bc0c      	pop	{r2, r3}
 8000528:	4770      	bx	lr
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffea1 	.word	0xfffffea1
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ff82 	bl	80004d0 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fdd7 	bl	8001184 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fc0d 	bl	8000dfc <__aeabi_fsub>
 80005e2:	f000 fdcf 	bl	8001184 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff2f 	bl	800045c <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 fb47 	bl	8002c98 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fff8 	bl	8002608 <__aeabi_dsub>
 8000618:	f002 fb3e 	bl	8002c98 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fc37 	bl	8002ebc <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fc32 	bl	8002ebc <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__gnu_ldivmod_helper>:
 80007b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b2:	b083      	sub	sp, #12
 80007b4:	0016      	movs	r6, r2
 80007b6:	001f      	movs	r7, r3
 80007b8:	9000      	str	r0, [sp, #0]
 80007ba:	9101      	str	r1, [sp, #4]
 80007bc:	f002 fb8a 	bl	8002ed4 <__divdi3>
 80007c0:	0004      	movs	r4, r0
 80007c2:	000d      	movs	r5, r1
 80007c4:	0002      	movs	r2, r0
 80007c6:	000b      	movs	r3, r1
 80007c8:	0030      	movs	r0, r6
 80007ca:	0039      	movs	r1, r7
 80007cc:	f7ff fece 	bl	800056c <__aeabi_lmul>
 80007d0:	9a00      	ldr	r2, [sp, #0]
 80007d2:	9b01      	ldr	r3, [sp, #4]
 80007d4:	1a12      	subs	r2, r2, r0
 80007d6:	418b      	sbcs	r3, r1
 80007d8:	9908      	ldr	r1, [sp, #32]
 80007da:	0020      	movs	r0, r4
 80007dc:	600a      	str	r2, [r1, #0]
 80007de:	604b      	str	r3, [r1, #4]
 80007e0:	0029      	movs	r1, r5
 80007e2:	b003      	add	sp, #12
 80007e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)

080007e8 <__aeabi_fdiv>:
 80007e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ea:	4657      	mov	r7, sl
 80007ec:	464e      	mov	r6, r9
 80007ee:	4645      	mov	r5, r8
 80007f0:	46de      	mov	lr, fp
 80007f2:	0244      	lsls	r4, r0, #9
 80007f4:	b5e0      	push	{r5, r6, r7, lr}
 80007f6:	0046      	lsls	r6, r0, #1
 80007f8:	4688      	mov	r8, r1
 80007fa:	0a64      	lsrs	r4, r4, #9
 80007fc:	0e36      	lsrs	r6, r6, #24
 80007fe:	0fc7      	lsrs	r7, r0, #31
 8000800:	2e00      	cmp	r6, #0
 8000802:	d063      	beq.n	80008cc <__aeabi_fdiv+0xe4>
 8000804:	2eff      	cmp	r6, #255	; 0xff
 8000806:	d024      	beq.n	8000852 <__aeabi_fdiv+0x6a>
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	00e4      	lsls	r4, r4, #3
 800080c:	04db      	lsls	r3, r3, #19
 800080e:	431c      	orrs	r4, r3
 8000810:	2300      	movs	r3, #0
 8000812:	4699      	mov	r9, r3
 8000814:	469b      	mov	fp, r3
 8000816:	3e7f      	subs	r6, #127	; 0x7f
 8000818:	4643      	mov	r3, r8
 800081a:	4642      	mov	r2, r8
 800081c:	025d      	lsls	r5, r3, #9
 800081e:	0fd2      	lsrs	r2, r2, #31
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	0a6d      	lsrs	r5, r5, #9
 8000824:	0e1b      	lsrs	r3, r3, #24
 8000826:	4690      	mov	r8, r2
 8000828:	4692      	mov	sl, r2
 800082a:	d065      	beq.n	80008f8 <__aeabi_fdiv+0x110>
 800082c:	2bff      	cmp	r3, #255	; 0xff
 800082e:	d055      	beq.n	80008dc <__aeabi_fdiv+0xf4>
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	2100      	movs	r1, #0
 8000834:	00ed      	lsls	r5, r5, #3
 8000836:	04d2      	lsls	r2, r2, #19
 8000838:	3b7f      	subs	r3, #127	; 0x7f
 800083a:	4315      	orrs	r5, r2
 800083c:	1af6      	subs	r6, r6, r3
 800083e:	4643      	mov	r3, r8
 8000840:	464a      	mov	r2, r9
 8000842:	407b      	eors	r3, r7
 8000844:	2a0f      	cmp	r2, #15
 8000846:	d900      	bls.n	800084a <__aeabi_fdiv+0x62>
 8000848:	e08d      	b.n	8000966 <__aeabi_fdiv+0x17e>
 800084a:	486d      	ldr	r0, [pc, #436]	; (8000a00 <__aeabi_fdiv+0x218>)
 800084c:	0092      	lsls	r2, r2, #2
 800084e:	5882      	ldr	r2, [r0, r2]
 8000850:	4697      	mov	pc, r2
 8000852:	2c00      	cmp	r4, #0
 8000854:	d154      	bne.n	8000900 <__aeabi_fdiv+0x118>
 8000856:	2308      	movs	r3, #8
 8000858:	4699      	mov	r9, r3
 800085a:	3b06      	subs	r3, #6
 800085c:	26ff      	movs	r6, #255	; 0xff
 800085e:	469b      	mov	fp, r3
 8000860:	e7da      	b.n	8000818 <__aeabi_fdiv+0x30>
 8000862:	2500      	movs	r5, #0
 8000864:	4653      	mov	r3, sl
 8000866:	2902      	cmp	r1, #2
 8000868:	d01b      	beq.n	80008a2 <__aeabi_fdiv+0xba>
 800086a:	2903      	cmp	r1, #3
 800086c:	d100      	bne.n	8000870 <__aeabi_fdiv+0x88>
 800086e:	e0bf      	b.n	80009f0 <__aeabi_fdiv+0x208>
 8000870:	2901      	cmp	r1, #1
 8000872:	d028      	beq.n	80008c6 <__aeabi_fdiv+0xde>
 8000874:	0030      	movs	r0, r6
 8000876:	307f      	adds	r0, #127	; 0x7f
 8000878:	2800      	cmp	r0, #0
 800087a:	dd20      	ble.n	80008be <__aeabi_fdiv+0xd6>
 800087c:	076a      	lsls	r2, r5, #29
 800087e:	d004      	beq.n	800088a <__aeabi_fdiv+0xa2>
 8000880:	220f      	movs	r2, #15
 8000882:	402a      	ands	r2, r5
 8000884:	2a04      	cmp	r2, #4
 8000886:	d000      	beq.n	800088a <__aeabi_fdiv+0xa2>
 8000888:	3504      	adds	r5, #4
 800088a:	012a      	lsls	r2, r5, #4
 800088c:	d503      	bpl.n	8000896 <__aeabi_fdiv+0xae>
 800088e:	0030      	movs	r0, r6
 8000890:	4a5c      	ldr	r2, [pc, #368]	; (8000a04 <__aeabi_fdiv+0x21c>)
 8000892:	3080      	adds	r0, #128	; 0x80
 8000894:	4015      	ands	r5, r2
 8000896:	28fe      	cmp	r0, #254	; 0xfe
 8000898:	dc03      	bgt.n	80008a2 <__aeabi_fdiv+0xba>
 800089a:	01ac      	lsls	r4, r5, #6
 800089c:	0a64      	lsrs	r4, r4, #9
 800089e:	b2c2      	uxtb	r2, r0
 80008a0:	e001      	b.n	80008a6 <__aeabi_fdiv+0xbe>
 80008a2:	22ff      	movs	r2, #255	; 0xff
 80008a4:	2400      	movs	r4, #0
 80008a6:	0264      	lsls	r4, r4, #9
 80008a8:	05d2      	lsls	r2, r2, #23
 80008aa:	0a60      	lsrs	r0, r4, #9
 80008ac:	07db      	lsls	r3, r3, #31
 80008ae:	4310      	orrs	r0, r2
 80008b0:	4318      	orrs	r0, r3
 80008b2:	bc3c      	pop	{r2, r3, r4, r5}
 80008b4:	4690      	mov	r8, r2
 80008b6:	4699      	mov	r9, r3
 80008b8:	46a2      	mov	sl, r4
 80008ba:	46ab      	mov	fp, r5
 80008bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008be:	2201      	movs	r2, #1
 80008c0:	1a10      	subs	r0, r2, r0
 80008c2:	281b      	cmp	r0, #27
 80008c4:	dd7c      	ble.n	80009c0 <__aeabi_fdiv+0x1d8>
 80008c6:	2200      	movs	r2, #0
 80008c8:	2400      	movs	r4, #0
 80008ca:	e7ec      	b.n	80008a6 <__aeabi_fdiv+0xbe>
 80008cc:	2c00      	cmp	r4, #0
 80008ce:	d11d      	bne.n	800090c <__aeabi_fdiv+0x124>
 80008d0:	2304      	movs	r3, #4
 80008d2:	4699      	mov	r9, r3
 80008d4:	3b03      	subs	r3, #3
 80008d6:	2600      	movs	r6, #0
 80008d8:	469b      	mov	fp, r3
 80008da:	e79d      	b.n	8000818 <__aeabi_fdiv+0x30>
 80008dc:	3eff      	subs	r6, #255	; 0xff
 80008de:	2d00      	cmp	r5, #0
 80008e0:	d120      	bne.n	8000924 <__aeabi_fdiv+0x13c>
 80008e2:	2102      	movs	r1, #2
 80008e4:	4643      	mov	r3, r8
 80008e6:	464a      	mov	r2, r9
 80008e8:	407b      	eors	r3, r7
 80008ea:	430a      	orrs	r2, r1
 80008ec:	2a0f      	cmp	r2, #15
 80008ee:	d8d8      	bhi.n	80008a2 <__aeabi_fdiv+0xba>
 80008f0:	4845      	ldr	r0, [pc, #276]	; (8000a08 <__aeabi_fdiv+0x220>)
 80008f2:	0092      	lsls	r2, r2, #2
 80008f4:	5882      	ldr	r2, [r0, r2]
 80008f6:	4697      	mov	pc, r2
 80008f8:	2d00      	cmp	r5, #0
 80008fa:	d119      	bne.n	8000930 <__aeabi_fdiv+0x148>
 80008fc:	2101      	movs	r1, #1
 80008fe:	e7f1      	b.n	80008e4 <__aeabi_fdiv+0xfc>
 8000900:	230c      	movs	r3, #12
 8000902:	4699      	mov	r9, r3
 8000904:	3b09      	subs	r3, #9
 8000906:	26ff      	movs	r6, #255	; 0xff
 8000908:	469b      	mov	fp, r3
 800090a:	e785      	b.n	8000818 <__aeabi_fdiv+0x30>
 800090c:	0020      	movs	r0, r4
 800090e:	f002 fab7 	bl	8002e80 <__clzsi2>
 8000912:	2676      	movs	r6, #118	; 0x76
 8000914:	1f43      	subs	r3, r0, #5
 8000916:	409c      	lsls	r4, r3
 8000918:	2300      	movs	r3, #0
 800091a:	4276      	negs	r6, r6
 800091c:	1a36      	subs	r6, r6, r0
 800091e:	4699      	mov	r9, r3
 8000920:	469b      	mov	fp, r3
 8000922:	e779      	b.n	8000818 <__aeabi_fdiv+0x30>
 8000924:	464a      	mov	r2, r9
 8000926:	2303      	movs	r3, #3
 8000928:	431a      	orrs	r2, r3
 800092a:	4691      	mov	r9, r2
 800092c:	2103      	movs	r1, #3
 800092e:	e786      	b.n	800083e <__aeabi_fdiv+0x56>
 8000930:	0028      	movs	r0, r5
 8000932:	f002 faa5 	bl	8002e80 <__clzsi2>
 8000936:	1f43      	subs	r3, r0, #5
 8000938:	1836      	adds	r6, r6, r0
 800093a:	409d      	lsls	r5, r3
 800093c:	3676      	adds	r6, #118	; 0x76
 800093e:	2100      	movs	r1, #0
 8000940:	e77d      	b.n	800083e <__aeabi_fdiv+0x56>
 8000942:	2480      	movs	r4, #128	; 0x80
 8000944:	2300      	movs	r3, #0
 8000946:	03e4      	lsls	r4, r4, #15
 8000948:	22ff      	movs	r2, #255	; 0xff
 800094a:	e7ac      	b.n	80008a6 <__aeabi_fdiv+0xbe>
 800094c:	2500      	movs	r5, #0
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	03db      	lsls	r3, r3, #15
 8000952:	421c      	tst	r4, r3
 8000954:	d028      	beq.n	80009a8 <__aeabi_fdiv+0x1c0>
 8000956:	421d      	tst	r5, r3
 8000958:	d126      	bne.n	80009a8 <__aeabi_fdiv+0x1c0>
 800095a:	432b      	orrs	r3, r5
 800095c:	025c      	lsls	r4, r3, #9
 800095e:	0a64      	lsrs	r4, r4, #9
 8000960:	4643      	mov	r3, r8
 8000962:	22ff      	movs	r2, #255	; 0xff
 8000964:	e79f      	b.n	80008a6 <__aeabi_fdiv+0xbe>
 8000966:	0162      	lsls	r2, r4, #5
 8000968:	016c      	lsls	r4, r5, #5
 800096a:	42a2      	cmp	r2, r4
 800096c:	d224      	bcs.n	80009b8 <__aeabi_fdiv+0x1d0>
 800096e:	211b      	movs	r1, #27
 8000970:	2500      	movs	r5, #0
 8000972:	3e01      	subs	r6, #1
 8000974:	2701      	movs	r7, #1
 8000976:	0010      	movs	r0, r2
 8000978:	006d      	lsls	r5, r5, #1
 800097a:	0052      	lsls	r2, r2, #1
 800097c:	2800      	cmp	r0, #0
 800097e:	db01      	blt.n	8000984 <__aeabi_fdiv+0x19c>
 8000980:	4294      	cmp	r4, r2
 8000982:	d801      	bhi.n	8000988 <__aeabi_fdiv+0x1a0>
 8000984:	1b12      	subs	r2, r2, r4
 8000986:	433d      	orrs	r5, r7
 8000988:	3901      	subs	r1, #1
 800098a:	2900      	cmp	r1, #0
 800098c:	d1f3      	bne.n	8000976 <__aeabi_fdiv+0x18e>
 800098e:	0014      	movs	r4, r2
 8000990:	1e62      	subs	r2, r4, #1
 8000992:	4194      	sbcs	r4, r2
 8000994:	4325      	orrs	r5, r4
 8000996:	e76d      	b.n	8000874 <__aeabi_fdiv+0x8c>
 8000998:	46ba      	mov	sl, r7
 800099a:	4659      	mov	r1, fp
 800099c:	0025      	movs	r5, r4
 800099e:	4653      	mov	r3, sl
 80009a0:	2902      	cmp	r1, #2
 80009a2:	d000      	beq.n	80009a6 <__aeabi_fdiv+0x1be>
 80009a4:	e761      	b.n	800086a <__aeabi_fdiv+0x82>
 80009a6:	e77c      	b.n	80008a2 <__aeabi_fdiv+0xba>
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	03db      	lsls	r3, r3, #15
 80009ac:	431c      	orrs	r4, r3
 80009ae:	0264      	lsls	r4, r4, #9
 80009b0:	0a64      	lsrs	r4, r4, #9
 80009b2:	003b      	movs	r3, r7
 80009b4:	22ff      	movs	r2, #255	; 0xff
 80009b6:	e776      	b.n	80008a6 <__aeabi_fdiv+0xbe>
 80009b8:	1b12      	subs	r2, r2, r4
 80009ba:	211a      	movs	r1, #26
 80009bc:	2501      	movs	r5, #1
 80009be:	e7d9      	b.n	8000974 <__aeabi_fdiv+0x18c>
 80009c0:	369e      	adds	r6, #158	; 0x9e
 80009c2:	002a      	movs	r2, r5
 80009c4:	40b5      	lsls	r5, r6
 80009c6:	002c      	movs	r4, r5
 80009c8:	40c2      	lsrs	r2, r0
 80009ca:	1e65      	subs	r5, r4, #1
 80009cc:	41ac      	sbcs	r4, r5
 80009ce:	4314      	orrs	r4, r2
 80009d0:	0762      	lsls	r2, r4, #29
 80009d2:	d004      	beq.n	80009de <__aeabi_fdiv+0x1f6>
 80009d4:	220f      	movs	r2, #15
 80009d6:	4022      	ands	r2, r4
 80009d8:	2a04      	cmp	r2, #4
 80009da:	d000      	beq.n	80009de <__aeabi_fdiv+0x1f6>
 80009dc:	3404      	adds	r4, #4
 80009de:	0162      	lsls	r2, r4, #5
 80009e0:	d403      	bmi.n	80009ea <__aeabi_fdiv+0x202>
 80009e2:	01a4      	lsls	r4, r4, #6
 80009e4:	0a64      	lsrs	r4, r4, #9
 80009e6:	2200      	movs	r2, #0
 80009e8:	e75d      	b.n	80008a6 <__aeabi_fdiv+0xbe>
 80009ea:	2201      	movs	r2, #1
 80009ec:	2400      	movs	r4, #0
 80009ee:	e75a      	b.n	80008a6 <__aeabi_fdiv+0xbe>
 80009f0:	2480      	movs	r4, #128	; 0x80
 80009f2:	03e4      	lsls	r4, r4, #15
 80009f4:	432c      	orrs	r4, r5
 80009f6:	0264      	lsls	r4, r4, #9
 80009f8:	0a64      	lsrs	r4, r4, #9
 80009fa:	22ff      	movs	r2, #255	; 0xff
 80009fc:	e753      	b.n	80008a6 <__aeabi_fdiv+0xbe>
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	0801c880 	.word	0x0801c880
 8000a04:	f7ffffff 	.word	0xf7ffffff
 8000a08:	0801c8c0 	.word	0x0801c8c0

08000a0c <__eqsf2>:
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	0042      	lsls	r2, r0, #1
 8000a10:	024e      	lsls	r6, r1, #9
 8000a12:	004c      	lsls	r4, r1, #1
 8000a14:	0245      	lsls	r5, r0, #9
 8000a16:	0a6d      	lsrs	r5, r5, #9
 8000a18:	0e12      	lsrs	r2, r2, #24
 8000a1a:	0fc3      	lsrs	r3, r0, #31
 8000a1c:	0a76      	lsrs	r6, r6, #9
 8000a1e:	0e24      	lsrs	r4, r4, #24
 8000a20:	0fc9      	lsrs	r1, r1, #31
 8000a22:	2aff      	cmp	r2, #255	; 0xff
 8000a24:	d00f      	beq.n	8000a46 <__eqsf2+0x3a>
 8000a26:	2cff      	cmp	r4, #255	; 0xff
 8000a28:	d011      	beq.n	8000a4e <__eqsf2+0x42>
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	42a2      	cmp	r2, r4
 8000a2e:	d000      	beq.n	8000a32 <__eqsf2+0x26>
 8000a30:	bd70      	pop	{r4, r5, r6, pc}
 8000a32:	42b5      	cmp	r5, r6
 8000a34:	d1fc      	bne.n	8000a30 <__eqsf2+0x24>
 8000a36:	428b      	cmp	r3, r1
 8000a38:	d00d      	beq.n	8000a56 <__eqsf2+0x4a>
 8000a3a:	2a00      	cmp	r2, #0
 8000a3c:	d1f8      	bne.n	8000a30 <__eqsf2+0x24>
 8000a3e:	0028      	movs	r0, r5
 8000a40:	1e45      	subs	r5, r0, #1
 8000a42:	41a8      	sbcs	r0, r5
 8000a44:	e7f4      	b.n	8000a30 <__eqsf2+0x24>
 8000a46:	2001      	movs	r0, #1
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d1f1      	bne.n	8000a30 <__eqsf2+0x24>
 8000a4c:	e7eb      	b.n	8000a26 <__eqsf2+0x1a>
 8000a4e:	2001      	movs	r0, #1
 8000a50:	2e00      	cmp	r6, #0
 8000a52:	d1ed      	bne.n	8000a30 <__eqsf2+0x24>
 8000a54:	e7e9      	b.n	8000a2a <__eqsf2+0x1e>
 8000a56:	2000      	movs	r0, #0
 8000a58:	e7ea      	b.n	8000a30 <__eqsf2+0x24>
 8000a5a:	46c0      	nop			; (mov r8, r8)

08000a5c <__gesf2>:
 8000a5c:	b570      	push	{r4, r5, r6, lr}
 8000a5e:	004a      	lsls	r2, r1, #1
 8000a60:	024e      	lsls	r6, r1, #9
 8000a62:	0245      	lsls	r5, r0, #9
 8000a64:	0044      	lsls	r4, r0, #1
 8000a66:	0a6d      	lsrs	r5, r5, #9
 8000a68:	0e24      	lsrs	r4, r4, #24
 8000a6a:	0fc3      	lsrs	r3, r0, #31
 8000a6c:	0a76      	lsrs	r6, r6, #9
 8000a6e:	0e12      	lsrs	r2, r2, #24
 8000a70:	0fc9      	lsrs	r1, r1, #31
 8000a72:	2cff      	cmp	r4, #255	; 0xff
 8000a74:	d015      	beq.n	8000aa2 <__gesf2+0x46>
 8000a76:	2aff      	cmp	r2, #255	; 0xff
 8000a78:	d00e      	beq.n	8000a98 <__gesf2+0x3c>
 8000a7a:	2c00      	cmp	r4, #0
 8000a7c:	d115      	bne.n	8000aaa <__gesf2+0x4e>
 8000a7e:	2a00      	cmp	r2, #0
 8000a80:	d101      	bne.n	8000a86 <__gesf2+0x2a>
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d01c      	beq.n	8000ac0 <__gesf2+0x64>
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	d014      	beq.n	8000ab4 <__gesf2+0x58>
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d027      	beq.n	8000ade <__gesf2+0x82>
 8000a8e:	2002      	movs	r0, #2
 8000a90:	3b01      	subs	r3, #1
 8000a92:	4018      	ands	r0, r3
 8000a94:	3801      	subs	r0, #1
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	2e00      	cmp	r6, #0
 8000a9a:	d0ee      	beq.n	8000a7a <__gesf2+0x1e>
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	4240      	negs	r0, r0
 8000aa0:	e7f9      	b.n	8000a96 <__gesf2+0x3a>
 8000aa2:	2d00      	cmp	r5, #0
 8000aa4:	d1fa      	bne.n	8000a9c <__gesf2+0x40>
 8000aa6:	2aff      	cmp	r2, #255	; 0xff
 8000aa8:	d00e      	beq.n	8000ac8 <__gesf2+0x6c>
 8000aaa:	2a00      	cmp	r2, #0
 8000aac:	d10e      	bne.n	8000acc <__gesf2+0x70>
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d0ed      	beq.n	8000a8e <__gesf2+0x32>
 8000ab2:	e00b      	b.n	8000acc <__gesf2+0x70>
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	3901      	subs	r1, #1
 8000ab8:	4399      	bics	r1, r3
 8000aba:	0008      	movs	r0, r1
 8000abc:	3001      	adds	r0, #1
 8000abe:	e7ea      	b.n	8000a96 <__gesf2+0x3a>
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	d0e7      	beq.n	8000a96 <__gesf2+0x3a>
 8000ac6:	e7e2      	b.n	8000a8e <__gesf2+0x32>
 8000ac8:	2e00      	cmp	r6, #0
 8000aca:	d1e7      	bne.n	8000a9c <__gesf2+0x40>
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d1de      	bne.n	8000a8e <__gesf2+0x32>
 8000ad0:	4294      	cmp	r4, r2
 8000ad2:	dd05      	ble.n	8000ae0 <__gesf2+0x84>
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	1e58      	subs	r0, r3, #1
 8000ad8:	4008      	ands	r0, r1
 8000ada:	3801      	subs	r0, #1
 8000adc:	e7db      	b.n	8000a96 <__gesf2+0x3a>
 8000ade:	2400      	movs	r4, #0
 8000ae0:	42a2      	cmp	r2, r4
 8000ae2:	dc04      	bgt.n	8000aee <__gesf2+0x92>
 8000ae4:	42b5      	cmp	r5, r6
 8000ae6:	d8d2      	bhi.n	8000a8e <__gesf2+0x32>
 8000ae8:	2000      	movs	r0, #0
 8000aea:	42b5      	cmp	r5, r6
 8000aec:	d2d3      	bcs.n	8000a96 <__gesf2+0x3a>
 8000aee:	1e58      	subs	r0, r3, #1
 8000af0:	2301      	movs	r3, #1
 8000af2:	4398      	bics	r0, r3
 8000af4:	3001      	adds	r0, #1
 8000af6:	e7ce      	b.n	8000a96 <__gesf2+0x3a>

08000af8 <__lesf2>:
 8000af8:	b530      	push	{r4, r5, lr}
 8000afa:	0042      	lsls	r2, r0, #1
 8000afc:	0244      	lsls	r4, r0, #9
 8000afe:	024d      	lsls	r5, r1, #9
 8000b00:	0fc3      	lsrs	r3, r0, #31
 8000b02:	0048      	lsls	r0, r1, #1
 8000b04:	0a64      	lsrs	r4, r4, #9
 8000b06:	0e12      	lsrs	r2, r2, #24
 8000b08:	0a6d      	lsrs	r5, r5, #9
 8000b0a:	0e00      	lsrs	r0, r0, #24
 8000b0c:	0fc9      	lsrs	r1, r1, #31
 8000b0e:	2aff      	cmp	r2, #255	; 0xff
 8000b10:	d012      	beq.n	8000b38 <__lesf2+0x40>
 8000b12:	28ff      	cmp	r0, #255	; 0xff
 8000b14:	d00c      	beq.n	8000b30 <__lesf2+0x38>
 8000b16:	2a00      	cmp	r2, #0
 8000b18:	d112      	bne.n	8000b40 <__lesf2+0x48>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	d119      	bne.n	8000b52 <__lesf2+0x5a>
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d117      	bne.n	8000b52 <__lesf2+0x5a>
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d02b      	beq.n	8000b7e <__lesf2+0x86>
 8000b26:	2002      	movs	r0, #2
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	4018      	ands	r0, r3
 8000b2c:	3801      	subs	r0, #1
 8000b2e:	e026      	b.n	8000b7e <__lesf2+0x86>
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d0f0      	beq.n	8000b16 <__lesf2+0x1e>
 8000b34:	2002      	movs	r0, #2
 8000b36:	e022      	b.n	8000b7e <__lesf2+0x86>
 8000b38:	2c00      	cmp	r4, #0
 8000b3a:	d1fb      	bne.n	8000b34 <__lesf2+0x3c>
 8000b3c:	28ff      	cmp	r0, #255	; 0xff
 8000b3e:	d01f      	beq.n	8000b80 <__lesf2+0x88>
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d11f      	bne.n	8000b84 <__lesf2+0x8c>
 8000b44:	2d00      	cmp	r5, #0
 8000b46:	d11d      	bne.n	8000b84 <__lesf2+0x8c>
 8000b48:	2002      	movs	r0, #2
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	4018      	ands	r0, r3
 8000b4e:	3801      	subs	r0, #1
 8000b50:	e015      	b.n	8000b7e <__lesf2+0x86>
 8000b52:	2c00      	cmp	r4, #0
 8000b54:	d00e      	beq.n	8000b74 <__lesf2+0x7c>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d1e5      	bne.n	8000b26 <__lesf2+0x2e>
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4290      	cmp	r0, r2
 8000b5e:	dc04      	bgt.n	8000b6a <__lesf2+0x72>
 8000b60:	42ac      	cmp	r4, r5
 8000b62:	d8e0      	bhi.n	8000b26 <__lesf2+0x2e>
 8000b64:	2000      	movs	r0, #0
 8000b66:	42ac      	cmp	r4, r5
 8000b68:	d209      	bcs.n	8000b7e <__lesf2+0x86>
 8000b6a:	1e58      	subs	r0, r3, #1
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	4398      	bics	r0, r3
 8000b70:	3001      	adds	r0, #1
 8000b72:	e004      	b.n	8000b7e <__lesf2+0x86>
 8000b74:	2301      	movs	r3, #1
 8000b76:	3901      	subs	r1, #1
 8000b78:	4399      	bics	r1, r3
 8000b7a:	0008      	movs	r0, r1
 8000b7c:	3001      	adds	r0, #1
 8000b7e:	bd30      	pop	{r4, r5, pc}
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d1d7      	bne.n	8000b34 <__lesf2+0x3c>
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d1ce      	bne.n	8000b26 <__lesf2+0x2e>
 8000b88:	4282      	cmp	r2, r0
 8000b8a:	dde7      	ble.n	8000b5c <__lesf2+0x64>
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	1e58      	subs	r0, r3, #1
 8000b90:	4008      	ands	r0, r1
 8000b92:	3801      	subs	r0, #1
 8000b94:	e7f3      	b.n	8000b7e <__lesf2+0x86>
 8000b96:	46c0      	nop			; (mov r8, r8)

08000b98 <__aeabi_fmul>:
 8000b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9a:	464e      	mov	r6, r9
 8000b9c:	4657      	mov	r7, sl
 8000b9e:	4645      	mov	r5, r8
 8000ba0:	46de      	mov	lr, fp
 8000ba2:	b5e0      	push	{r5, r6, r7, lr}
 8000ba4:	0243      	lsls	r3, r0, #9
 8000ba6:	0a5b      	lsrs	r3, r3, #9
 8000ba8:	0045      	lsls	r5, r0, #1
 8000baa:	b083      	sub	sp, #12
 8000bac:	1c0f      	adds	r7, r1, #0
 8000bae:	4699      	mov	r9, r3
 8000bb0:	0e2d      	lsrs	r5, r5, #24
 8000bb2:	0fc6      	lsrs	r6, r0, #31
 8000bb4:	2d00      	cmp	r5, #0
 8000bb6:	d057      	beq.n	8000c68 <__aeabi_fmul+0xd0>
 8000bb8:	2dff      	cmp	r5, #255	; 0xff
 8000bba:	d024      	beq.n	8000c06 <__aeabi_fmul+0x6e>
 8000bbc:	2080      	movs	r0, #128	; 0x80
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	04c0      	lsls	r0, r0, #19
 8000bc2:	4318      	orrs	r0, r3
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	4681      	mov	r9, r0
 8000bc8:	469a      	mov	sl, r3
 8000bca:	469b      	mov	fp, r3
 8000bcc:	3d7f      	subs	r5, #127	; 0x7f
 8000bce:	027c      	lsls	r4, r7, #9
 8000bd0:	007a      	lsls	r2, r7, #1
 8000bd2:	0ffb      	lsrs	r3, r7, #31
 8000bd4:	0a64      	lsrs	r4, r4, #9
 8000bd6:	0e12      	lsrs	r2, r2, #24
 8000bd8:	4698      	mov	r8, r3
 8000bda:	d023      	beq.n	8000c24 <__aeabi_fmul+0x8c>
 8000bdc:	2aff      	cmp	r2, #255	; 0xff
 8000bde:	d04b      	beq.n	8000c78 <__aeabi_fmul+0xe0>
 8000be0:	00e3      	lsls	r3, r4, #3
 8000be2:	2480      	movs	r4, #128	; 0x80
 8000be4:	2000      	movs	r0, #0
 8000be6:	04e4      	lsls	r4, r4, #19
 8000be8:	3a7f      	subs	r2, #127	; 0x7f
 8000bea:	431c      	orrs	r4, r3
 8000bec:	18ad      	adds	r5, r5, r2
 8000bee:	1c6b      	adds	r3, r5, #1
 8000bf0:	4647      	mov	r7, r8
 8000bf2:	9301      	str	r3, [sp, #4]
 8000bf4:	4653      	mov	r3, sl
 8000bf6:	4077      	eors	r7, r6
 8000bf8:	003a      	movs	r2, r7
 8000bfa:	2b0f      	cmp	r3, #15
 8000bfc:	d848      	bhi.n	8000c90 <__aeabi_fmul+0xf8>
 8000bfe:	497d      	ldr	r1, [pc, #500]	; (8000df4 <__aeabi_fmul+0x25c>)
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	58cb      	ldr	r3, [r1, r3]
 8000c04:	469f      	mov	pc, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d000      	beq.n	8000c0c <__aeabi_fmul+0x74>
 8000c0a:	e085      	b.n	8000d18 <__aeabi_fmul+0x180>
 8000c0c:	3308      	adds	r3, #8
 8000c0e:	469a      	mov	sl, r3
 8000c10:	3b06      	subs	r3, #6
 8000c12:	469b      	mov	fp, r3
 8000c14:	027c      	lsls	r4, r7, #9
 8000c16:	007a      	lsls	r2, r7, #1
 8000c18:	0ffb      	lsrs	r3, r7, #31
 8000c1a:	25ff      	movs	r5, #255	; 0xff
 8000c1c:	0a64      	lsrs	r4, r4, #9
 8000c1e:	0e12      	lsrs	r2, r2, #24
 8000c20:	4698      	mov	r8, r3
 8000c22:	d1db      	bne.n	8000bdc <__aeabi_fmul+0x44>
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	d000      	beq.n	8000c2a <__aeabi_fmul+0x92>
 8000c28:	e090      	b.n	8000d4c <__aeabi_fmul+0x1b4>
 8000c2a:	4652      	mov	r2, sl
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	4692      	mov	sl, r2
 8000c32:	2001      	movs	r0, #1
 8000c34:	e7db      	b.n	8000bee <__aeabi_fmul+0x56>
 8000c36:	464c      	mov	r4, r9
 8000c38:	4658      	mov	r0, fp
 8000c3a:	0017      	movs	r7, r2
 8000c3c:	2802      	cmp	r0, #2
 8000c3e:	d024      	beq.n	8000c8a <__aeabi_fmul+0xf2>
 8000c40:	2803      	cmp	r0, #3
 8000c42:	d100      	bne.n	8000c46 <__aeabi_fmul+0xae>
 8000c44:	e0cf      	b.n	8000de6 <__aeabi_fmul+0x24e>
 8000c46:	2200      	movs	r2, #0
 8000c48:	2300      	movs	r3, #0
 8000c4a:	2801      	cmp	r0, #1
 8000c4c:	d14d      	bne.n	8000cea <__aeabi_fmul+0x152>
 8000c4e:	0258      	lsls	r0, r3, #9
 8000c50:	05d2      	lsls	r2, r2, #23
 8000c52:	0a40      	lsrs	r0, r0, #9
 8000c54:	07ff      	lsls	r7, r7, #31
 8000c56:	4310      	orrs	r0, r2
 8000c58:	4338      	orrs	r0, r7
 8000c5a:	b003      	add	sp, #12
 8000c5c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c5e:	4690      	mov	r8, r2
 8000c60:	4699      	mov	r9, r3
 8000c62:	46a2      	mov	sl, r4
 8000c64:	46ab      	mov	fp, r5
 8000c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d15b      	bne.n	8000d24 <__aeabi_fmul+0x18c>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	469a      	mov	sl, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2500      	movs	r5, #0
 8000c74:	469b      	mov	fp, r3
 8000c76:	e7aa      	b.n	8000bce <__aeabi_fmul+0x36>
 8000c78:	35ff      	adds	r5, #255	; 0xff
 8000c7a:	2c00      	cmp	r4, #0
 8000c7c:	d160      	bne.n	8000d40 <__aeabi_fmul+0x1a8>
 8000c7e:	4652      	mov	r2, sl
 8000c80:	2302      	movs	r3, #2
 8000c82:	431a      	orrs	r2, r3
 8000c84:	4692      	mov	sl, r2
 8000c86:	2002      	movs	r0, #2
 8000c88:	e7b1      	b.n	8000bee <__aeabi_fmul+0x56>
 8000c8a:	22ff      	movs	r2, #255	; 0xff
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	e7de      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000c90:	464b      	mov	r3, r9
 8000c92:	0c1b      	lsrs	r3, r3, #16
 8000c94:	469c      	mov	ip, r3
 8000c96:	464b      	mov	r3, r9
 8000c98:	0426      	lsls	r6, r4, #16
 8000c9a:	0c36      	lsrs	r6, r6, #16
 8000c9c:	0418      	lsls	r0, r3, #16
 8000c9e:	4661      	mov	r1, ip
 8000ca0:	0033      	movs	r3, r6
 8000ca2:	0c22      	lsrs	r2, r4, #16
 8000ca4:	4664      	mov	r4, ip
 8000ca6:	0c00      	lsrs	r0, r0, #16
 8000ca8:	4343      	muls	r3, r0
 8000caa:	434e      	muls	r6, r1
 8000cac:	4350      	muls	r0, r2
 8000cae:	4354      	muls	r4, r2
 8000cb0:	1980      	adds	r0, r0, r6
 8000cb2:	0c1a      	lsrs	r2, r3, #16
 8000cb4:	1812      	adds	r2, r2, r0
 8000cb6:	4296      	cmp	r6, r2
 8000cb8:	d903      	bls.n	8000cc2 <__aeabi_fmul+0x12a>
 8000cba:	2180      	movs	r1, #128	; 0x80
 8000cbc:	0249      	lsls	r1, r1, #9
 8000cbe:	468c      	mov	ip, r1
 8000cc0:	4464      	add	r4, ip
 8000cc2:	041b      	lsls	r3, r3, #16
 8000cc4:	0c1b      	lsrs	r3, r3, #16
 8000cc6:	0410      	lsls	r0, r2, #16
 8000cc8:	18c0      	adds	r0, r0, r3
 8000cca:	0183      	lsls	r3, r0, #6
 8000ccc:	1e5e      	subs	r6, r3, #1
 8000cce:	41b3      	sbcs	r3, r6
 8000cd0:	0e80      	lsrs	r0, r0, #26
 8000cd2:	4318      	orrs	r0, r3
 8000cd4:	0c13      	lsrs	r3, r2, #16
 8000cd6:	191b      	adds	r3, r3, r4
 8000cd8:	019b      	lsls	r3, r3, #6
 8000cda:	4303      	orrs	r3, r0
 8000cdc:	001c      	movs	r4, r3
 8000cde:	0123      	lsls	r3, r4, #4
 8000ce0:	d579      	bpl.n	8000dd6 <__aeabi_fmul+0x23e>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	0862      	lsrs	r2, r4, #1
 8000ce6:	401c      	ands	r4, r3
 8000ce8:	4314      	orrs	r4, r2
 8000cea:	9a01      	ldr	r2, [sp, #4]
 8000cec:	327f      	adds	r2, #127	; 0x7f
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	dd4d      	ble.n	8000d8e <__aeabi_fmul+0x1f6>
 8000cf2:	0763      	lsls	r3, r4, #29
 8000cf4:	d004      	beq.n	8000d00 <__aeabi_fmul+0x168>
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	4023      	ands	r3, r4
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_fmul+0x168>
 8000cfe:	3404      	adds	r4, #4
 8000d00:	0123      	lsls	r3, r4, #4
 8000d02:	d503      	bpl.n	8000d0c <__aeabi_fmul+0x174>
 8000d04:	4b3c      	ldr	r3, [pc, #240]	; (8000df8 <__aeabi_fmul+0x260>)
 8000d06:	9a01      	ldr	r2, [sp, #4]
 8000d08:	401c      	ands	r4, r3
 8000d0a:	3280      	adds	r2, #128	; 0x80
 8000d0c:	2afe      	cmp	r2, #254	; 0xfe
 8000d0e:	dcbc      	bgt.n	8000c8a <__aeabi_fmul+0xf2>
 8000d10:	01a3      	lsls	r3, r4, #6
 8000d12:	0a5b      	lsrs	r3, r3, #9
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	e79a      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000d18:	230c      	movs	r3, #12
 8000d1a:	469a      	mov	sl, r3
 8000d1c:	3b09      	subs	r3, #9
 8000d1e:	25ff      	movs	r5, #255	; 0xff
 8000d20:	469b      	mov	fp, r3
 8000d22:	e754      	b.n	8000bce <__aeabi_fmul+0x36>
 8000d24:	0018      	movs	r0, r3
 8000d26:	f002 f8ab 	bl	8002e80 <__clzsi2>
 8000d2a:	464a      	mov	r2, r9
 8000d2c:	1f43      	subs	r3, r0, #5
 8000d2e:	2576      	movs	r5, #118	; 0x76
 8000d30:	409a      	lsls	r2, r3
 8000d32:	2300      	movs	r3, #0
 8000d34:	426d      	negs	r5, r5
 8000d36:	4691      	mov	r9, r2
 8000d38:	1a2d      	subs	r5, r5, r0
 8000d3a:	469a      	mov	sl, r3
 8000d3c:	469b      	mov	fp, r3
 8000d3e:	e746      	b.n	8000bce <__aeabi_fmul+0x36>
 8000d40:	4652      	mov	r2, sl
 8000d42:	2303      	movs	r3, #3
 8000d44:	431a      	orrs	r2, r3
 8000d46:	4692      	mov	sl, r2
 8000d48:	2003      	movs	r0, #3
 8000d4a:	e750      	b.n	8000bee <__aeabi_fmul+0x56>
 8000d4c:	0020      	movs	r0, r4
 8000d4e:	f002 f897 	bl	8002e80 <__clzsi2>
 8000d52:	1f43      	subs	r3, r0, #5
 8000d54:	1a2d      	subs	r5, r5, r0
 8000d56:	409c      	lsls	r4, r3
 8000d58:	3d76      	subs	r5, #118	; 0x76
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	e747      	b.n	8000bee <__aeabi_fmul+0x56>
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	2700      	movs	r7, #0
 8000d62:	03db      	lsls	r3, r3, #15
 8000d64:	22ff      	movs	r2, #255	; 0xff
 8000d66:	e772      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000d68:	4642      	mov	r2, r8
 8000d6a:	e766      	b.n	8000c3a <__aeabi_fmul+0xa2>
 8000d6c:	464c      	mov	r4, r9
 8000d6e:	0032      	movs	r2, r6
 8000d70:	4658      	mov	r0, fp
 8000d72:	e762      	b.n	8000c3a <__aeabi_fmul+0xa2>
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	464a      	mov	r2, r9
 8000d78:	03db      	lsls	r3, r3, #15
 8000d7a:	421a      	tst	r2, r3
 8000d7c:	d022      	beq.n	8000dc4 <__aeabi_fmul+0x22c>
 8000d7e:	421c      	tst	r4, r3
 8000d80:	d120      	bne.n	8000dc4 <__aeabi_fmul+0x22c>
 8000d82:	4323      	orrs	r3, r4
 8000d84:	025b      	lsls	r3, r3, #9
 8000d86:	0a5b      	lsrs	r3, r3, #9
 8000d88:	4647      	mov	r7, r8
 8000d8a:	22ff      	movs	r2, #255	; 0xff
 8000d8c:	e75f      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	1a9a      	subs	r2, r3, r2
 8000d92:	2a1b      	cmp	r2, #27
 8000d94:	dc21      	bgt.n	8000dda <__aeabi_fmul+0x242>
 8000d96:	0023      	movs	r3, r4
 8000d98:	9901      	ldr	r1, [sp, #4]
 8000d9a:	40d3      	lsrs	r3, r2
 8000d9c:	319e      	adds	r1, #158	; 0x9e
 8000d9e:	408c      	lsls	r4, r1
 8000da0:	001a      	movs	r2, r3
 8000da2:	0023      	movs	r3, r4
 8000da4:	1e5c      	subs	r4, r3, #1
 8000da6:	41a3      	sbcs	r3, r4
 8000da8:	4313      	orrs	r3, r2
 8000daa:	075a      	lsls	r2, r3, #29
 8000dac:	d004      	beq.n	8000db8 <__aeabi_fmul+0x220>
 8000dae:	220f      	movs	r2, #15
 8000db0:	401a      	ands	r2, r3
 8000db2:	2a04      	cmp	r2, #4
 8000db4:	d000      	beq.n	8000db8 <__aeabi_fmul+0x220>
 8000db6:	3304      	adds	r3, #4
 8000db8:	015a      	lsls	r2, r3, #5
 8000dba:	d411      	bmi.n	8000de0 <__aeabi_fmul+0x248>
 8000dbc:	019b      	lsls	r3, r3, #6
 8000dbe:	0a5b      	lsrs	r3, r3, #9
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e744      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	464a      	mov	r2, r9
 8000dc8:	03db      	lsls	r3, r3, #15
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	025b      	lsls	r3, r3, #9
 8000dce:	0a5b      	lsrs	r3, r3, #9
 8000dd0:	0037      	movs	r7, r6
 8000dd2:	22ff      	movs	r2, #255	; 0xff
 8000dd4:	e73b      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000dd6:	9501      	str	r5, [sp, #4]
 8000dd8:	e787      	b.n	8000cea <__aeabi_fmul+0x152>
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e736      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000de0:	2201      	movs	r2, #1
 8000de2:	2300      	movs	r3, #0
 8000de4:	e733      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	03db      	lsls	r3, r3, #15
 8000dea:	4323      	orrs	r3, r4
 8000dec:	025b      	lsls	r3, r3, #9
 8000dee:	0a5b      	lsrs	r3, r3, #9
 8000df0:	22ff      	movs	r2, #255	; 0xff
 8000df2:	e72c      	b.n	8000c4e <__aeabi_fmul+0xb6>
 8000df4:	0801c900 	.word	0x0801c900
 8000df8:	f7ffffff 	.word	0xf7ffffff

08000dfc <__aeabi_fsub>:
 8000dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dfe:	4647      	mov	r7, r8
 8000e00:	46ce      	mov	lr, r9
 8000e02:	0044      	lsls	r4, r0, #1
 8000e04:	0fc2      	lsrs	r2, r0, #31
 8000e06:	b580      	push	{r7, lr}
 8000e08:	0247      	lsls	r7, r0, #9
 8000e0a:	0248      	lsls	r0, r1, #9
 8000e0c:	0a40      	lsrs	r0, r0, #9
 8000e0e:	4684      	mov	ip, r0
 8000e10:	4666      	mov	r6, ip
 8000e12:	0048      	lsls	r0, r1, #1
 8000e14:	0a7f      	lsrs	r7, r7, #9
 8000e16:	0e24      	lsrs	r4, r4, #24
 8000e18:	00f6      	lsls	r6, r6, #3
 8000e1a:	0025      	movs	r5, r4
 8000e1c:	4690      	mov	r8, r2
 8000e1e:	00fb      	lsls	r3, r7, #3
 8000e20:	0e00      	lsrs	r0, r0, #24
 8000e22:	0fc9      	lsrs	r1, r1, #31
 8000e24:	46b1      	mov	r9, r6
 8000e26:	28ff      	cmp	r0, #255	; 0xff
 8000e28:	d100      	bne.n	8000e2c <__aeabi_fsub+0x30>
 8000e2a:	e085      	b.n	8000f38 <__aeabi_fsub+0x13c>
 8000e2c:	2601      	movs	r6, #1
 8000e2e:	4071      	eors	r1, r6
 8000e30:	1a26      	subs	r6, r4, r0
 8000e32:	4291      	cmp	r1, r2
 8000e34:	d057      	beq.n	8000ee6 <__aeabi_fsub+0xea>
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	dd43      	ble.n	8000ec2 <__aeabi_fsub+0xc6>
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	d000      	beq.n	8000e40 <__aeabi_fsub+0x44>
 8000e3e:	e07f      	b.n	8000f40 <__aeabi_fsub+0x144>
 8000e40:	4649      	mov	r1, r9
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d100      	bne.n	8000e48 <__aeabi_fsub+0x4c>
 8000e46:	e0aa      	b.n	8000f9e <__aeabi_fsub+0x1a2>
 8000e48:	3e01      	subs	r6, #1
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_fsub+0x54>
 8000e4e:	e0f7      	b.n	8001040 <__aeabi_fsub+0x244>
 8000e50:	1a5b      	subs	r3, r3, r1
 8000e52:	015a      	lsls	r2, r3, #5
 8000e54:	d400      	bmi.n	8000e58 <__aeabi_fsub+0x5c>
 8000e56:	e08b      	b.n	8000f70 <__aeabi_fsub+0x174>
 8000e58:	019b      	lsls	r3, r3, #6
 8000e5a:	099c      	lsrs	r4, r3, #6
 8000e5c:	0020      	movs	r0, r4
 8000e5e:	f002 f80f 	bl	8002e80 <__clzsi2>
 8000e62:	3805      	subs	r0, #5
 8000e64:	4084      	lsls	r4, r0
 8000e66:	4285      	cmp	r5, r0
 8000e68:	dd00      	ble.n	8000e6c <__aeabi_fsub+0x70>
 8000e6a:	e0d3      	b.n	8001014 <__aeabi_fsub+0x218>
 8000e6c:	1b45      	subs	r5, r0, r5
 8000e6e:	0023      	movs	r3, r4
 8000e70:	2020      	movs	r0, #32
 8000e72:	3501      	adds	r5, #1
 8000e74:	40eb      	lsrs	r3, r5
 8000e76:	1b45      	subs	r5, r0, r5
 8000e78:	40ac      	lsls	r4, r5
 8000e7a:	1e62      	subs	r2, r4, #1
 8000e7c:	4194      	sbcs	r4, r2
 8000e7e:	4323      	orrs	r3, r4
 8000e80:	2407      	movs	r4, #7
 8000e82:	2500      	movs	r5, #0
 8000e84:	401c      	ands	r4, r3
 8000e86:	2201      	movs	r2, #1
 8000e88:	4641      	mov	r1, r8
 8000e8a:	400a      	ands	r2, r1
 8000e8c:	2c00      	cmp	r4, #0
 8000e8e:	d004      	beq.n	8000e9a <__aeabi_fsub+0x9e>
 8000e90:	210f      	movs	r1, #15
 8000e92:	4019      	ands	r1, r3
 8000e94:	2904      	cmp	r1, #4
 8000e96:	d000      	beq.n	8000e9a <__aeabi_fsub+0x9e>
 8000e98:	3304      	adds	r3, #4
 8000e9a:	0159      	lsls	r1, r3, #5
 8000e9c:	d400      	bmi.n	8000ea0 <__aeabi_fsub+0xa4>
 8000e9e:	e080      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8000ea0:	3501      	adds	r5, #1
 8000ea2:	b2ec      	uxtb	r4, r5
 8000ea4:	2dff      	cmp	r5, #255	; 0xff
 8000ea6:	d000      	beq.n	8000eaa <__aeabi_fsub+0xae>
 8000ea8:	e0a3      	b.n	8000ff2 <__aeabi_fsub+0x1f6>
 8000eaa:	24ff      	movs	r4, #255	; 0xff
 8000eac:	2300      	movs	r3, #0
 8000eae:	025b      	lsls	r3, r3, #9
 8000eb0:	05e4      	lsls	r4, r4, #23
 8000eb2:	0a58      	lsrs	r0, r3, #9
 8000eb4:	07d2      	lsls	r2, r2, #31
 8000eb6:	4320      	orrs	r0, r4
 8000eb8:	4310      	orrs	r0, r2
 8000eba:	bc0c      	pop	{r2, r3}
 8000ebc:	4690      	mov	r8, r2
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ec2:	2e00      	cmp	r6, #0
 8000ec4:	d174      	bne.n	8000fb0 <__aeabi_fsub+0x1b4>
 8000ec6:	1c60      	adds	r0, r4, #1
 8000ec8:	b2c0      	uxtb	r0, r0
 8000eca:	2801      	cmp	r0, #1
 8000ecc:	dc00      	bgt.n	8000ed0 <__aeabi_fsub+0xd4>
 8000ece:	e0a7      	b.n	8001020 <__aeabi_fsub+0x224>
 8000ed0:	464a      	mov	r2, r9
 8000ed2:	1a9c      	subs	r4, r3, r2
 8000ed4:	0162      	lsls	r2, r4, #5
 8000ed6:	d500      	bpl.n	8000eda <__aeabi_fsub+0xde>
 8000ed8:	e0b6      	b.n	8001048 <__aeabi_fsub+0x24c>
 8000eda:	2c00      	cmp	r4, #0
 8000edc:	d1be      	bne.n	8000e5c <__aeabi_fsub+0x60>
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2400      	movs	r4, #0
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e7e3      	b.n	8000eae <__aeabi_fsub+0xb2>
 8000ee6:	2e00      	cmp	r6, #0
 8000ee8:	dc00      	bgt.n	8000eec <__aeabi_fsub+0xf0>
 8000eea:	e085      	b.n	8000ff8 <__aeabi_fsub+0x1fc>
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d046      	beq.n	8000f7e <__aeabi_fsub+0x182>
 8000ef0:	2cff      	cmp	r4, #255	; 0xff
 8000ef2:	d049      	beq.n	8000f88 <__aeabi_fsub+0x18c>
 8000ef4:	2280      	movs	r2, #128	; 0x80
 8000ef6:	4648      	mov	r0, r9
 8000ef8:	04d2      	lsls	r2, r2, #19
 8000efa:	4310      	orrs	r0, r2
 8000efc:	4681      	mov	r9, r0
 8000efe:	2201      	movs	r2, #1
 8000f00:	2e1b      	cmp	r6, #27
 8000f02:	dc09      	bgt.n	8000f18 <__aeabi_fsub+0x11c>
 8000f04:	2020      	movs	r0, #32
 8000f06:	464c      	mov	r4, r9
 8000f08:	1b80      	subs	r0, r0, r6
 8000f0a:	4084      	lsls	r4, r0
 8000f0c:	464a      	mov	r2, r9
 8000f0e:	0020      	movs	r0, r4
 8000f10:	40f2      	lsrs	r2, r6
 8000f12:	1e44      	subs	r4, r0, #1
 8000f14:	41a0      	sbcs	r0, r4
 8000f16:	4302      	orrs	r2, r0
 8000f18:	189b      	adds	r3, r3, r2
 8000f1a:	015a      	lsls	r2, r3, #5
 8000f1c:	d528      	bpl.n	8000f70 <__aeabi_fsub+0x174>
 8000f1e:	3501      	adds	r5, #1
 8000f20:	2dff      	cmp	r5, #255	; 0xff
 8000f22:	d100      	bne.n	8000f26 <__aeabi_fsub+0x12a>
 8000f24:	e0a8      	b.n	8001078 <__aeabi_fsub+0x27c>
 8000f26:	2201      	movs	r2, #1
 8000f28:	2407      	movs	r4, #7
 8000f2a:	4994      	ldr	r1, [pc, #592]	; (800117c <__aeabi_fsub+0x380>)
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	085b      	lsrs	r3, r3, #1
 8000f30:	400b      	ands	r3, r1
 8000f32:	4313      	orrs	r3, r2
 8000f34:	401c      	ands	r4, r3
 8000f36:	e7a6      	b.n	8000e86 <__aeabi_fsub+0x8a>
 8000f38:	2e00      	cmp	r6, #0
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_fsub+0x142>
 8000f3c:	e778      	b.n	8000e30 <__aeabi_fsub+0x34>
 8000f3e:	e775      	b.n	8000e2c <__aeabi_fsub+0x30>
 8000f40:	2cff      	cmp	r4, #255	; 0xff
 8000f42:	d054      	beq.n	8000fee <__aeabi_fsub+0x1f2>
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	4649      	mov	r1, r9
 8000f48:	04d2      	lsls	r2, r2, #19
 8000f4a:	4311      	orrs	r1, r2
 8000f4c:	4689      	mov	r9, r1
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2e1b      	cmp	r6, #27
 8000f52:	dc09      	bgt.n	8000f68 <__aeabi_fsub+0x16c>
 8000f54:	2120      	movs	r1, #32
 8000f56:	4648      	mov	r0, r9
 8000f58:	1b89      	subs	r1, r1, r6
 8000f5a:	4088      	lsls	r0, r1
 8000f5c:	464a      	mov	r2, r9
 8000f5e:	0001      	movs	r1, r0
 8000f60:	40f2      	lsrs	r2, r6
 8000f62:	1e48      	subs	r0, r1, #1
 8000f64:	4181      	sbcs	r1, r0
 8000f66:	430a      	orrs	r2, r1
 8000f68:	1a9b      	subs	r3, r3, r2
 8000f6a:	015a      	lsls	r2, r3, #5
 8000f6c:	d500      	bpl.n	8000f70 <__aeabi_fsub+0x174>
 8000f6e:	e773      	b.n	8000e58 <__aeabi_fsub+0x5c>
 8000f70:	2201      	movs	r2, #1
 8000f72:	4641      	mov	r1, r8
 8000f74:	400a      	ands	r2, r1
 8000f76:	0759      	lsls	r1, r3, #29
 8000f78:	d000      	beq.n	8000f7c <__aeabi_fsub+0x180>
 8000f7a:	e789      	b.n	8000e90 <__aeabi_fsub+0x94>
 8000f7c:	e011      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8000f7e:	4648      	mov	r0, r9
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d158      	bne.n	8001036 <__aeabi_fsub+0x23a>
 8000f84:	2cff      	cmp	r4, #255	; 0xff
 8000f86:	d10c      	bne.n	8000fa2 <__aeabi_fsub+0x1a6>
 8000f88:	08db      	lsrs	r3, r3, #3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_fsub+0x194>
 8000f8e:	e78c      	b.n	8000eaa <__aeabi_fsub+0xae>
 8000f90:	2080      	movs	r0, #128	; 0x80
 8000f92:	03c0      	lsls	r0, r0, #15
 8000f94:	4303      	orrs	r3, r0
 8000f96:	025b      	lsls	r3, r3, #9
 8000f98:	0a5b      	lsrs	r3, r3, #9
 8000f9a:	24ff      	movs	r4, #255	; 0xff
 8000f9c:	e787      	b.n	8000eae <__aeabi_fsub+0xb2>
 8000f9e:	2cff      	cmp	r4, #255	; 0xff
 8000fa0:	d025      	beq.n	8000fee <__aeabi_fsub+0x1f2>
 8000fa2:	08db      	lsrs	r3, r3, #3
 8000fa4:	2dff      	cmp	r5, #255	; 0xff
 8000fa6:	d0f0      	beq.n	8000f8a <__aeabi_fsub+0x18e>
 8000fa8:	025b      	lsls	r3, r3, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	b2ec      	uxtb	r4, r5
 8000fae:	e77e      	b.n	8000eae <__aeabi_fsub+0xb2>
 8000fb0:	2c00      	cmp	r4, #0
 8000fb2:	d04d      	beq.n	8001050 <__aeabi_fsub+0x254>
 8000fb4:	28ff      	cmp	r0, #255	; 0xff
 8000fb6:	d018      	beq.n	8000fea <__aeabi_fsub+0x1ee>
 8000fb8:	2480      	movs	r4, #128	; 0x80
 8000fba:	04e4      	lsls	r4, r4, #19
 8000fbc:	4272      	negs	r2, r6
 8000fbe:	4323      	orrs	r3, r4
 8000fc0:	2a1b      	cmp	r2, #27
 8000fc2:	dd00      	ble.n	8000fc6 <__aeabi_fsub+0x1ca>
 8000fc4:	e0c4      	b.n	8001150 <__aeabi_fsub+0x354>
 8000fc6:	001c      	movs	r4, r3
 8000fc8:	2520      	movs	r5, #32
 8000fca:	40d4      	lsrs	r4, r2
 8000fcc:	1aaa      	subs	r2, r5, r2
 8000fce:	4093      	lsls	r3, r2
 8000fd0:	1e5a      	subs	r2, r3, #1
 8000fd2:	4193      	sbcs	r3, r2
 8000fd4:	4323      	orrs	r3, r4
 8000fd6:	464a      	mov	r2, r9
 8000fd8:	0005      	movs	r5, r0
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	4688      	mov	r8, r1
 8000fde:	e738      	b.n	8000e52 <__aeabi_fsub+0x56>
 8000fe0:	1c72      	adds	r2, r6, #1
 8000fe2:	d0f8      	beq.n	8000fd6 <__aeabi_fsub+0x1da>
 8000fe4:	43f2      	mvns	r2, r6
 8000fe6:	28ff      	cmp	r0, #255	; 0xff
 8000fe8:	d1ea      	bne.n	8000fc0 <__aeabi_fsub+0x1c4>
 8000fea:	000a      	movs	r2, r1
 8000fec:	464b      	mov	r3, r9
 8000fee:	25ff      	movs	r5, #255	; 0xff
 8000ff0:	e7d7      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8000ff2:	019b      	lsls	r3, r3, #6
 8000ff4:	0a5b      	lsrs	r3, r3, #9
 8000ff6:	e75a      	b.n	8000eae <__aeabi_fsub+0xb2>
 8000ff8:	2e00      	cmp	r6, #0
 8000ffa:	d141      	bne.n	8001080 <__aeabi_fsub+0x284>
 8000ffc:	1c65      	adds	r5, r4, #1
 8000ffe:	b2e9      	uxtb	r1, r5
 8001000:	2901      	cmp	r1, #1
 8001002:	dd45      	ble.n	8001090 <__aeabi_fsub+0x294>
 8001004:	2dff      	cmp	r5, #255	; 0xff
 8001006:	d100      	bne.n	800100a <__aeabi_fsub+0x20e>
 8001008:	e74f      	b.n	8000eaa <__aeabi_fsub+0xae>
 800100a:	2407      	movs	r4, #7
 800100c:	444b      	add	r3, r9
 800100e:	085b      	lsrs	r3, r3, #1
 8001010:	401c      	ands	r4, r3
 8001012:	e738      	b.n	8000e86 <__aeabi_fsub+0x8a>
 8001014:	2207      	movs	r2, #7
 8001016:	4b5a      	ldr	r3, [pc, #360]	; (8001180 <__aeabi_fsub+0x384>)
 8001018:	1a2d      	subs	r5, r5, r0
 800101a:	4023      	ands	r3, r4
 800101c:	4014      	ands	r4, r2
 800101e:	e732      	b.n	8000e86 <__aeabi_fsub+0x8a>
 8001020:	2c00      	cmp	r4, #0
 8001022:	d11d      	bne.n	8001060 <__aeabi_fsub+0x264>
 8001024:	2b00      	cmp	r3, #0
 8001026:	d17a      	bne.n	800111e <__aeabi_fsub+0x322>
 8001028:	464b      	mov	r3, r9
 800102a:	2b00      	cmp	r3, #0
 800102c:	d100      	bne.n	8001030 <__aeabi_fsub+0x234>
 800102e:	e091      	b.n	8001154 <__aeabi_fsub+0x358>
 8001030:	000a      	movs	r2, r1
 8001032:	2500      	movs	r5, #0
 8001034:	e7b5      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8001036:	3e01      	subs	r6, #1
 8001038:	2e00      	cmp	r6, #0
 800103a:	d119      	bne.n	8001070 <__aeabi_fsub+0x274>
 800103c:	444b      	add	r3, r9
 800103e:	e76c      	b.n	8000f1a <__aeabi_fsub+0x11e>
 8001040:	2cff      	cmp	r4, #255	; 0xff
 8001042:	d184      	bne.n	8000f4e <__aeabi_fsub+0x152>
 8001044:	25ff      	movs	r5, #255	; 0xff
 8001046:	e7ac      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8001048:	464a      	mov	r2, r9
 800104a:	4688      	mov	r8, r1
 800104c:	1ad4      	subs	r4, r2, r3
 800104e:	e705      	b.n	8000e5c <__aeabi_fsub+0x60>
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1c5      	bne.n	8000fe0 <__aeabi_fsub+0x1e4>
 8001054:	000a      	movs	r2, r1
 8001056:	28ff      	cmp	r0, #255	; 0xff
 8001058:	d0c8      	beq.n	8000fec <__aeabi_fsub+0x1f0>
 800105a:	0005      	movs	r5, r0
 800105c:	464b      	mov	r3, r9
 800105e:	e7a0      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8001060:	2b00      	cmp	r3, #0
 8001062:	d149      	bne.n	80010f8 <__aeabi_fsub+0x2fc>
 8001064:	464b      	mov	r3, r9
 8001066:	2b00      	cmp	r3, #0
 8001068:	d077      	beq.n	800115a <__aeabi_fsub+0x35e>
 800106a:	000a      	movs	r2, r1
 800106c:	25ff      	movs	r5, #255	; 0xff
 800106e:	e798      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8001070:	2cff      	cmp	r4, #255	; 0xff
 8001072:	d000      	beq.n	8001076 <__aeabi_fsub+0x27a>
 8001074:	e743      	b.n	8000efe <__aeabi_fsub+0x102>
 8001076:	e787      	b.n	8000f88 <__aeabi_fsub+0x18c>
 8001078:	000a      	movs	r2, r1
 800107a:	24ff      	movs	r4, #255	; 0xff
 800107c:	2300      	movs	r3, #0
 800107e:	e716      	b.n	8000eae <__aeabi_fsub+0xb2>
 8001080:	2c00      	cmp	r4, #0
 8001082:	d115      	bne.n	80010b0 <__aeabi_fsub+0x2b4>
 8001084:	2b00      	cmp	r3, #0
 8001086:	d157      	bne.n	8001138 <__aeabi_fsub+0x33c>
 8001088:	28ff      	cmp	r0, #255	; 0xff
 800108a:	d1e6      	bne.n	800105a <__aeabi_fsub+0x25e>
 800108c:	464b      	mov	r3, r9
 800108e:	e77b      	b.n	8000f88 <__aeabi_fsub+0x18c>
 8001090:	2c00      	cmp	r4, #0
 8001092:	d120      	bne.n	80010d6 <__aeabi_fsub+0x2da>
 8001094:	2b00      	cmp	r3, #0
 8001096:	d057      	beq.n	8001148 <__aeabi_fsub+0x34c>
 8001098:	4649      	mov	r1, r9
 800109a:	2900      	cmp	r1, #0
 800109c:	d053      	beq.n	8001146 <__aeabi_fsub+0x34a>
 800109e:	444b      	add	r3, r9
 80010a0:	015a      	lsls	r2, r3, #5
 80010a2:	d568      	bpl.n	8001176 <__aeabi_fsub+0x37a>
 80010a4:	2407      	movs	r4, #7
 80010a6:	4a36      	ldr	r2, [pc, #216]	; (8001180 <__aeabi_fsub+0x384>)
 80010a8:	401c      	ands	r4, r3
 80010aa:	2501      	movs	r5, #1
 80010ac:	4013      	ands	r3, r2
 80010ae:	e6ea      	b.n	8000e86 <__aeabi_fsub+0x8a>
 80010b0:	28ff      	cmp	r0, #255	; 0xff
 80010b2:	d0eb      	beq.n	800108c <__aeabi_fsub+0x290>
 80010b4:	2280      	movs	r2, #128	; 0x80
 80010b6:	04d2      	lsls	r2, r2, #19
 80010b8:	4276      	negs	r6, r6
 80010ba:	4313      	orrs	r3, r2
 80010bc:	2e1b      	cmp	r6, #27
 80010be:	dc53      	bgt.n	8001168 <__aeabi_fsub+0x36c>
 80010c0:	2520      	movs	r5, #32
 80010c2:	1bad      	subs	r5, r5, r6
 80010c4:	001a      	movs	r2, r3
 80010c6:	40ab      	lsls	r3, r5
 80010c8:	40f2      	lsrs	r2, r6
 80010ca:	1e5c      	subs	r4, r3, #1
 80010cc:	41a3      	sbcs	r3, r4
 80010ce:	4313      	orrs	r3, r2
 80010d0:	444b      	add	r3, r9
 80010d2:	0005      	movs	r5, r0
 80010d4:	e721      	b.n	8000f1a <__aeabi_fsub+0x11e>
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0d8      	beq.n	800108c <__aeabi_fsub+0x290>
 80010da:	4649      	mov	r1, r9
 80010dc:	2900      	cmp	r1, #0
 80010de:	d100      	bne.n	80010e2 <__aeabi_fsub+0x2e6>
 80010e0:	e752      	b.n	8000f88 <__aeabi_fsub+0x18c>
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	03c9      	lsls	r1, r1, #15
 80010e6:	420f      	tst	r7, r1
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x2f0>
 80010ea:	e74d      	b.n	8000f88 <__aeabi_fsub+0x18c>
 80010ec:	4660      	mov	r0, ip
 80010ee:	4208      	tst	r0, r1
 80010f0:	d000      	beq.n	80010f4 <__aeabi_fsub+0x2f8>
 80010f2:	e749      	b.n	8000f88 <__aeabi_fsub+0x18c>
 80010f4:	464b      	mov	r3, r9
 80010f6:	e747      	b.n	8000f88 <__aeabi_fsub+0x18c>
 80010f8:	4648      	mov	r0, r9
 80010fa:	25ff      	movs	r5, #255	; 0xff
 80010fc:	2800      	cmp	r0, #0
 80010fe:	d100      	bne.n	8001102 <__aeabi_fsub+0x306>
 8001100:	e74f      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	03d2      	lsls	r2, r2, #15
 8001106:	4217      	tst	r7, r2
 8001108:	d004      	beq.n	8001114 <__aeabi_fsub+0x318>
 800110a:	4660      	mov	r0, ip
 800110c:	4210      	tst	r0, r2
 800110e:	d101      	bne.n	8001114 <__aeabi_fsub+0x318>
 8001110:	464b      	mov	r3, r9
 8001112:	4688      	mov	r8, r1
 8001114:	2201      	movs	r2, #1
 8001116:	4641      	mov	r1, r8
 8001118:	25ff      	movs	r5, #255	; 0xff
 800111a:	400a      	ands	r2, r1
 800111c:	e741      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 800111e:	4648      	mov	r0, r9
 8001120:	2800      	cmp	r0, #0
 8001122:	d01f      	beq.n	8001164 <__aeabi_fsub+0x368>
 8001124:	1a1a      	subs	r2, r3, r0
 8001126:	0150      	lsls	r0, r2, #5
 8001128:	d520      	bpl.n	800116c <__aeabi_fsub+0x370>
 800112a:	464a      	mov	r2, r9
 800112c:	2407      	movs	r4, #7
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	401c      	ands	r4, r3
 8001132:	4688      	mov	r8, r1
 8001134:	2500      	movs	r5, #0
 8001136:	e6a6      	b.n	8000e86 <__aeabi_fsub+0x8a>
 8001138:	1c74      	adds	r4, r6, #1
 800113a:	d0c9      	beq.n	80010d0 <__aeabi_fsub+0x2d4>
 800113c:	43f6      	mvns	r6, r6
 800113e:	28ff      	cmp	r0, #255	; 0xff
 8001140:	d1bc      	bne.n	80010bc <__aeabi_fsub+0x2c0>
 8001142:	464b      	mov	r3, r9
 8001144:	e720      	b.n	8000f88 <__aeabi_fsub+0x18c>
 8001146:	4699      	mov	r9, r3
 8001148:	464b      	mov	r3, r9
 800114a:	2500      	movs	r5, #0
 800114c:	08db      	lsrs	r3, r3, #3
 800114e:	e72b      	b.n	8000fa8 <__aeabi_fsub+0x1ac>
 8001150:	2301      	movs	r3, #1
 8001152:	e740      	b.n	8000fd6 <__aeabi_fsub+0x1da>
 8001154:	2200      	movs	r2, #0
 8001156:	2300      	movs	r3, #0
 8001158:	e6a9      	b.n	8000eae <__aeabi_fsub+0xb2>
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	2200      	movs	r2, #0
 800115e:	03db      	lsls	r3, r3, #15
 8001160:	24ff      	movs	r4, #255	; 0xff
 8001162:	e6a4      	b.n	8000eae <__aeabi_fsub+0xb2>
 8001164:	2500      	movs	r5, #0
 8001166:	e71c      	b.n	8000fa2 <__aeabi_fsub+0x1a6>
 8001168:	2301      	movs	r3, #1
 800116a:	e7b1      	b.n	80010d0 <__aeabi_fsub+0x2d4>
 800116c:	2a00      	cmp	r2, #0
 800116e:	d0f1      	beq.n	8001154 <__aeabi_fsub+0x358>
 8001170:	0013      	movs	r3, r2
 8001172:	2500      	movs	r5, #0
 8001174:	e6fc      	b.n	8000f70 <__aeabi_fsub+0x174>
 8001176:	2500      	movs	r5, #0
 8001178:	e6fa      	b.n	8000f70 <__aeabi_fsub+0x174>
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	7dffffff 	.word	0x7dffffff
 8001180:	fbffffff 	.word	0xfbffffff

08001184 <__aeabi_f2iz>:
 8001184:	0241      	lsls	r1, r0, #9
 8001186:	0042      	lsls	r2, r0, #1
 8001188:	0fc3      	lsrs	r3, r0, #31
 800118a:	0a49      	lsrs	r1, r1, #9
 800118c:	0e12      	lsrs	r2, r2, #24
 800118e:	2000      	movs	r0, #0
 8001190:	2a7e      	cmp	r2, #126	; 0x7e
 8001192:	d90d      	bls.n	80011b0 <__aeabi_f2iz+0x2c>
 8001194:	2a9d      	cmp	r2, #157	; 0x9d
 8001196:	d80c      	bhi.n	80011b2 <__aeabi_f2iz+0x2e>
 8001198:	2080      	movs	r0, #128	; 0x80
 800119a:	0400      	lsls	r0, r0, #16
 800119c:	4301      	orrs	r1, r0
 800119e:	2a95      	cmp	r2, #149	; 0x95
 80011a0:	dc0a      	bgt.n	80011b8 <__aeabi_f2iz+0x34>
 80011a2:	2096      	movs	r0, #150	; 0x96
 80011a4:	1a82      	subs	r2, r0, r2
 80011a6:	40d1      	lsrs	r1, r2
 80011a8:	4248      	negs	r0, r1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_f2iz+0x2c>
 80011ae:	0008      	movs	r0, r1
 80011b0:	4770      	bx	lr
 80011b2:	4a03      	ldr	r2, [pc, #12]	; (80011c0 <__aeabi_f2iz+0x3c>)
 80011b4:	1898      	adds	r0, r3, r2
 80011b6:	e7fb      	b.n	80011b0 <__aeabi_f2iz+0x2c>
 80011b8:	3a96      	subs	r2, #150	; 0x96
 80011ba:	4091      	lsls	r1, r2
 80011bc:	e7f4      	b.n	80011a8 <__aeabi_f2iz+0x24>
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	7fffffff 	.word	0x7fffffff

080011c4 <__aeabi_i2f>:
 80011c4:	b570      	push	{r4, r5, r6, lr}
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d03d      	beq.n	8001246 <__aeabi_i2f+0x82>
 80011ca:	17c3      	asrs	r3, r0, #31
 80011cc:	18c5      	adds	r5, r0, r3
 80011ce:	405d      	eors	r5, r3
 80011d0:	0fc4      	lsrs	r4, r0, #31
 80011d2:	0028      	movs	r0, r5
 80011d4:	f001 fe54 	bl	8002e80 <__clzsi2>
 80011d8:	229e      	movs	r2, #158	; 0x9e
 80011da:	1a12      	subs	r2, r2, r0
 80011dc:	2a96      	cmp	r2, #150	; 0x96
 80011de:	dc07      	bgt.n	80011f0 <__aeabi_i2f+0x2c>
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	2808      	cmp	r0, #8
 80011e4:	dd33      	ble.n	800124e <__aeabi_i2f+0x8a>
 80011e6:	3808      	subs	r0, #8
 80011e8:	4085      	lsls	r5, r0
 80011ea:	0268      	lsls	r0, r5, #9
 80011ec:	0a40      	lsrs	r0, r0, #9
 80011ee:	e023      	b.n	8001238 <__aeabi_i2f+0x74>
 80011f0:	2a99      	cmp	r2, #153	; 0x99
 80011f2:	dd0b      	ble.n	800120c <__aeabi_i2f+0x48>
 80011f4:	2305      	movs	r3, #5
 80011f6:	0029      	movs	r1, r5
 80011f8:	1a1b      	subs	r3, r3, r0
 80011fa:	40d9      	lsrs	r1, r3
 80011fc:	0003      	movs	r3, r0
 80011fe:	331b      	adds	r3, #27
 8001200:	409d      	lsls	r5, r3
 8001202:	002b      	movs	r3, r5
 8001204:	1e5d      	subs	r5, r3, #1
 8001206:	41ab      	sbcs	r3, r5
 8001208:	4319      	orrs	r1, r3
 800120a:	000d      	movs	r5, r1
 800120c:	2805      	cmp	r0, #5
 800120e:	dd01      	ble.n	8001214 <__aeabi_i2f+0x50>
 8001210:	1f43      	subs	r3, r0, #5
 8001212:	409d      	lsls	r5, r3
 8001214:	002b      	movs	r3, r5
 8001216:	490f      	ldr	r1, [pc, #60]	; (8001254 <__aeabi_i2f+0x90>)
 8001218:	400b      	ands	r3, r1
 800121a:	076e      	lsls	r6, r5, #29
 800121c:	d009      	beq.n	8001232 <__aeabi_i2f+0x6e>
 800121e:	260f      	movs	r6, #15
 8001220:	4035      	ands	r5, r6
 8001222:	2d04      	cmp	r5, #4
 8001224:	d005      	beq.n	8001232 <__aeabi_i2f+0x6e>
 8001226:	3304      	adds	r3, #4
 8001228:	015d      	lsls	r5, r3, #5
 800122a:	d502      	bpl.n	8001232 <__aeabi_i2f+0x6e>
 800122c:	229f      	movs	r2, #159	; 0x9f
 800122e:	400b      	ands	r3, r1
 8001230:	1a12      	subs	r2, r2, r0
 8001232:	019b      	lsls	r3, r3, #6
 8001234:	0a58      	lsrs	r0, r3, #9
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	0240      	lsls	r0, r0, #9
 800123a:	05d2      	lsls	r2, r2, #23
 800123c:	0a40      	lsrs	r0, r0, #9
 800123e:	07e4      	lsls	r4, r4, #31
 8001240:	4310      	orrs	r0, r2
 8001242:	4320      	orrs	r0, r4
 8001244:	bd70      	pop	{r4, r5, r6, pc}
 8001246:	2400      	movs	r4, #0
 8001248:	2200      	movs	r2, #0
 800124a:	2000      	movs	r0, #0
 800124c:	e7f4      	b.n	8001238 <__aeabi_i2f+0x74>
 800124e:	0268      	lsls	r0, r5, #9
 8001250:	0a40      	lsrs	r0, r0, #9
 8001252:	e7f1      	b.n	8001238 <__aeabi_i2f+0x74>
 8001254:	fbffffff 	.word	0xfbffffff

08001258 <__aeabi_ui2f>:
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	1e04      	subs	r4, r0, #0
 800125c:	d034      	beq.n	80012c8 <__aeabi_ui2f+0x70>
 800125e:	f001 fe0f 	bl	8002e80 <__clzsi2>
 8001262:	229e      	movs	r2, #158	; 0x9e
 8001264:	1a12      	subs	r2, r2, r0
 8001266:	2a96      	cmp	r2, #150	; 0x96
 8001268:	dc07      	bgt.n	800127a <__aeabi_ui2f+0x22>
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	2808      	cmp	r0, #8
 800126e:	dd2e      	ble.n	80012ce <__aeabi_ui2f+0x76>
 8001270:	3808      	subs	r0, #8
 8001272:	4084      	lsls	r4, r0
 8001274:	0260      	lsls	r0, r4, #9
 8001276:	0a40      	lsrs	r0, r0, #9
 8001278:	e021      	b.n	80012be <__aeabi_ui2f+0x66>
 800127a:	2a99      	cmp	r2, #153	; 0x99
 800127c:	dd09      	ble.n	8001292 <__aeabi_ui2f+0x3a>
 800127e:	0003      	movs	r3, r0
 8001280:	0021      	movs	r1, r4
 8001282:	331b      	adds	r3, #27
 8001284:	4099      	lsls	r1, r3
 8001286:	1e4b      	subs	r3, r1, #1
 8001288:	4199      	sbcs	r1, r3
 800128a:	2305      	movs	r3, #5
 800128c:	1a1b      	subs	r3, r3, r0
 800128e:	40dc      	lsrs	r4, r3
 8001290:	430c      	orrs	r4, r1
 8001292:	2805      	cmp	r0, #5
 8001294:	dd01      	ble.n	800129a <__aeabi_ui2f+0x42>
 8001296:	1f43      	subs	r3, r0, #5
 8001298:	409c      	lsls	r4, r3
 800129a:	0023      	movs	r3, r4
 800129c:	490d      	ldr	r1, [pc, #52]	; (80012d4 <__aeabi_ui2f+0x7c>)
 800129e:	400b      	ands	r3, r1
 80012a0:	0765      	lsls	r5, r4, #29
 80012a2:	d009      	beq.n	80012b8 <__aeabi_ui2f+0x60>
 80012a4:	250f      	movs	r5, #15
 80012a6:	402c      	ands	r4, r5
 80012a8:	2c04      	cmp	r4, #4
 80012aa:	d005      	beq.n	80012b8 <__aeabi_ui2f+0x60>
 80012ac:	3304      	adds	r3, #4
 80012ae:	015c      	lsls	r4, r3, #5
 80012b0:	d502      	bpl.n	80012b8 <__aeabi_ui2f+0x60>
 80012b2:	229f      	movs	r2, #159	; 0x9f
 80012b4:	400b      	ands	r3, r1
 80012b6:	1a12      	subs	r2, r2, r0
 80012b8:	019b      	lsls	r3, r3, #6
 80012ba:	0a58      	lsrs	r0, r3, #9
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	0240      	lsls	r0, r0, #9
 80012c0:	05d2      	lsls	r2, r2, #23
 80012c2:	0a40      	lsrs	r0, r0, #9
 80012c4:	4310      	orrs	r0, r2
 80012c6:	bd70      	pop	{r4, r5, r6, pc}
 80012c8:	2200      	movs	r2, #0
 80012ca:	2000      	movs	r0, #0
 80012cc:	e7f7      	b.n	80012be <__aeabi_ui2f+0x66>
 80012ce:	0260      	lsls	r0, r4, #9
 80012d0:	0a40      	lsrs	r0, r0, #9
 80012d2:	e7f4      	b.n	80012be <__aeabi_ui2f+0x66>
 80012d4:	fbffffff 	.word	0xfbffffff

080012d8 <__aeabi_dadd>:
 80012d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012da:	464f      	mov	r7, r9
 80012dc:	4646      	mov	r6, r8
 80012de:	46d6      	mov	lr, sl
 80012e0:	000c      	movs	r4, r1
 80012e2:	0309      	lsls	r1, r1, #12
 80012e4:	b5c0      	push	{r6, r7, lr}
 80012e6:	0a49      	lsrs	r1, r1, #9
 80012e8:	0f47      	lsrs	r7, r0, #29
 80012ea:	005e      	lsls	r6, r3, #1
 80012ec:	4339      	orrs	r1, r7
 80012ee:	031f      	lsls	r7, r3, #12
 80012f0:	0fdb      	lsrs	r3, r3, #31
 80012f2:	469c      	mov	ip, r3
 80012f4:	0065      	lsls	r5, r4, #1
 80012f6:	0a7b      	lsrs	r3, r7, #9
 80012f8:	0f57      	lsrs	r7, r2, #29
 80012fa:	431f      	orrs	r7, r3
 80012fc:	0d6d      	lsrs	r5, r5, #21
 80012fe:	0fe4      	lsrs	r4, r4, #31
 8001300:	0d76      	lsrs	r6, r6, #21
 8001302:	46a1      	mov	r9, r4
 8001304:	00c0      	lsls	r0, r0, #3
 8001306:	46b8      	mov	r8, r7
 8001308:	00d2      	lsls	r2, r2, #3
 800130a:	1bab      	subs	r3, r5, r6
 800130c:	4564      	cmp	r4, ip
 800130e:	d07b      	beq.n	8001408 <__aeabi_dadd+0x130>
 8001310:	2b00      	cmp	r3, #0
 8001312:	dd5f      	ble.n	80013d4 <__aeabi_dadd+0xfc>
 8001314:	2e00      	cmp	r6, #0
 8001316:	d000      	beq.n	800131a <__aeabi_dadd+0x42>
 8001318:	e0a4      	b.n	8001464 <__aeabi_dadd+0x18c>
 800131a:	003e      	movs	r6, r7
 800131c:	4316      	orrs	r6, r2
 800131e:	d100      	bne.n	8001322 <__aeabi_dadd+0x4a>
 8001320:	e112      	b.n	8001548 <__aeabi_dadd+0x270>
 8001322:	1e5e      	subs	r6, r3, #1
 8001324:	2e00      	cmp	r6, #0
 8001326:	d000      	beq.n	800132a <__aeabi_dadd+0x52>
 8001328:	e19e      	b.n	8001668 <__aeabi_dadd+0x390>
 800132a:	1a87      	subs	r7, r0, r2
 800132c:	4643      	mov	r3, r8
 800132e:	42b8      	cmp	r0, r7
 8001330:	4180      	sbcs	r0, r0
 8001332:	2501      	movs	r5, #1
 8001334:	1ac9      	subs	r1, r1, r3
 8001336:	4240      	negs	r0, r0
 8001338:	1a09      	subs	r1, r1, r0
 800133a:	020b      	lsls	r3, r1, #8
 800133c:	d400      	bmi.n	8001340 <__aeabi_dadd+0x68>
 800133e:	e131      	b.n	80015a4 <__aeabi_dadd+0x2cc>
 8001340:	0249      	lsls	r1, r1, #9
 8001342:	0a4e      	lsrs	r6, r1, #9
 8001344:	2e00      	cmp	r6, #0
 8001346:	d100      	bne.n	800134a <__aeabi_dadd+0x72>
 8001348:	e16e      	b.n	8001628 <__aeabi_dadd+0x350>
 800134a:	0030      	movs	r0, r6
 800134c:	f001 fd98 	bl	8002e80 <__clzsi2>
 8001350:	0003      	movs	r3, r0
 8001352:	3b08      	subs	r3, #8
 8001354:	2b1f      	cmp	r3, #31
 8001356:	dd00      	ble.n	800135a <__aeabi_dadd+0x82>
 8001358:	e161      	b.n	800161e <__aeabi_dadd+0x346>
 800135a:	2220      	movs	r2, #32
 800135c:	0039      	movs	r1, r7
 800135e:	1ad2      	subs	r2, r2, r3
 8001360:	409e      	lsls	r6, r3
 8001362:	40d1      	lsrs	r1, r2
 8001364:	409f      	lsls	r7, r3
 8001366:	430e      	orrs	r6, r1
 8001368:	429d      	cmp	r5, r3
 800136a:	dd00      	ble.n	800136e <__aeabi_dadd+0x96>
 800136c:	e151      	b.n	8001612 <__aeabi_dadd+0x33a>
 800136e:	1b5d      	subs	r5, r3, r5
 8001370:	1c6b      	adds	r3, r5, #1
 8001372:	2b1f      	cmp	r3, #31
 8001374:	dd00      	ble.n	8001378 <__aeabi_dadd+0xa0>
 8001376:	e17c      	b.n	8001672 <__aeabi_dadd+0x39a>
 8001378:	2120      	movs	r1, #32
 800137a:	1ac9      	subs	r1, r1, r3
 800137c:	003d      	movs	r5, r7
 800137e:	0030      	movs	r0, r6
 8001380:	408f      	lsls	r7, r1
 8001382:	4088      	lsls	r0, r1
 8001384:	40dd      	lsrs	r5, r3
 8001386:	1e79      	subs	r1, r7, #1
 8001388:	418f      	sbcs	r7, r1
 800138a:	0031      	movs	r1, r6
 800138c:	2207      	movs	r2, #7
 800138e:	4328      	orrs	r0, r5
 8001390:	40d9      	lsrs	r1, r3
 8001392:	2500      	movs	r5, #0
 8001394:	4307      	orrs	r7, r0
 8001396:	403a      	ands	r2, r7
 8001398:	2a00      	cmp	r2, #0
 800139a:	d009      	beq.n	80013b0 <__aeabi_dadd+0xd8>
 800139c:	230f      	movs	r3, #15
 800139e:	403b      	ands	r3, r7
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d005      	beq.n	80013b0 <__aeabi_dadd+0xd8>
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	42bb      	cmp	r3, r7
 80013a8:	41bf      	sbcs	r7, r7
 80013aa:	427f      	negs	r7, r7
 80013ac:	19c9      	adds	r1, r1, r7
 80013ae:	001f      	movs	r7, r3
 80013b0:	020b      	lsls	r3, r1, #8
 80013b2:	d400      	bmi.n	80013b6 <__aeabi_dadd+0xde>
 80013b4:	e226      	b.n	8001804 <__aeabi_dadd+0x52c>
 80013b6:	1c6a      	adds	r2, r5, #1
 80013b8:	4bc6      	ldr	r3, [pc, #792]	; (80016d4 <__aeabi_dadd+0x3fc>)
 80013ba:	0555      	lsls	r5, r2, #21
 80013bc:	0d6d      	lsrs	r5, r5, #21
 80013be:	429a      	cmp	r2, r3
 80013c0:	d100      	bne.n	80013c4 <__aeabi_dadd+0xec>
 80013c2:	e106      	b.n	80015d2 <__aeabi_dadd+0x2fa>
 80013c4:	4ac4      	ldr	r2, [pc, #784]	; (80016d8 <__aeabi_dadd+0x400>)
 80013c6:	08ff      	lsrs	r7, r7, #3
 80013c8:	400a      	ands	r2, r1
 80013ca:	0753      	lsls	r3, r2, #29
 80013cc:	0252      	lsls	r2, r2, #9
 80013ce:	433b      	orrs	r3, r7
 80013d0:	0b12      	lsrs	r2, r2, #12
 80013d2:	e08e      	b.n	80014f2 <__aeabi_dadd+0x21a>
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d000      	beq.n	80013da <__aeabi_dadd+0x102>
 80013d8:	e0b8      	b.n	800154c <__aeabi_dadd+0x274>
 80013da:	1c6b      	adds	r3, r5, #1
 80013dc:	055b      	lsls	r3, r3, #21
 80013de:	0d5b      	lsrs	r3, r3, #21
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	dc00      	bgt.n	80013e6 <__aeabi_dadd+0x10e>
 80013e4:	e130      	b.n	8001648 <__aeabi_dadd+0x370>
 80013e6:	1a87      	subs	r7, r0, r2
 80013e8:	4643      	mov	r3, r8
 80013ea:	42b8      	cmp	r0, r7
 80013ec:	41b6      	sbcs	r6, r6
 80013ee:	1acb      	subs	r3, r1, r3
 80013f0:	4276      	negs	r6, r6
 80013f2:	1b9e      	subs	r6, r3, r6
 80013f4:	0233      	lsls	r3, r6, #8
 80013f6:	d500      	bpl.n	80013fa <__aeabi_dadd+0x122>
 80013f8:	e14c      	b.n	8001694 <__aeabi_dadd+0x3bc>
 80013fa:	003b      	movs	r3, r7
 80013fc:	4333      	orrs	r3, r6
 80013fe:	d1a1      	bne.n	8001344 <__aeabi_dadd+0x6c>
 8001400:	2200      	movs	r2, #0
 8001402:	2400      	movs	r4, #0
 8001404:	2500      	movs	r5, #0
 8001406:	e070      	b.n	80014ea <__aeabi_dadd+0x212>
 8001408:	2b00      	cmp	r3, #0
 800140a:	dc00      	bgt.n	800140e <__aeabi_dadd+0x136>
 800140c:	e0e5      	b.n	80015da <__aeabi_dadd+0x302>
 800140e:	2e00      	cmp	r6, #0
 8001410:	d100      	bne.n	8001414 <__aeabi_dadd+0x13c>
 8001412:	e083      	b.n	800151c <__aeabi_dadd+0x244>
 8001414:	4eaf      	ldr	r6, [pc, #700]	; (80016d4 <__aeabi_dadd+0x3fc>)
 8001416:	42b5      	cmp	r5, r6
 8001418:	d060      	beq.n	80014dc <__aeabi_dadd+0x204>
 800141a:	2680      	movs	r6, #128	; 0x80
 800141c:	0436      	lsls	r6, r6, #16
 800141e:	4337      	orrs	r7, r6
 8001420:	46b8      	mov	r8, r7
 8001422:	2b38      	cmp	r3, #56	; 0x38
 8001424:	dc00      	bgt.n	8001428 <__aeabi_dadd+0x150>
 8001426:	e13e      	b.n	80016a6 <__aeabi_dadd+0x3ce>
 8001428:	4643      	mov	r3, r8
 800142a:	4313      	orrs	r3, r2
 800142c:	001f      	movs	r7, r3
 800142e:	1e7a      	subs	r2, r7, #1
 8001430:	4197      	sbcs	r7, r2
 8001432:	183f      	adds	r7, r7, r0
 8001434:	4287      	cmp	r7, r0
 8001436:	4180      	sbcs	r0, r0
 8001438:	4240      	negs	r0, r0
 800143a:	1809      	adds	r1, r1, r0
 800143c:	020b      	lsls	r3, r1, #8
 800143e:	d400      	bmi.n	8001442 <__aeabi_dadd+0x16a>
 8001440:	e0b0      	b.n	80015a4 <__aeabi_dadd+0x2cc>
 8001442:	4ba4      	ldr	r3, [pc, #656]	; (80016d4 <__aeabi_dadd+0x3fc>)
 8001444:	3501      	adds	r5, #1
 8001446:	429d      	cmp	r5, r3
 8001448:	d100      	bne.n	800144c <__aeabi_dadd+0x174>
 800144a:	e0c3      	b.n	80015d4 <__aeabi_dadd+0x2fc>
 800144c:	4aa2      	ldr	r2, [pc, #648]	; (80016d8 <__aeabi_dadd+0x400>)
 800144e:	087b      	lsrs	r3, r7, #1
 8001450:	400a      	ands	r2, r1
 8001452:	2101      	movs	r1, #1
 8001454:	400f      	ands	r7, r1
 8001456:	431f      	orrs	r7, r3
 8001458:	0851      	lsrs	r1, r2, #1
 800145a:	07d3      	lsls	r3, r2, #31
 800145c:	2207      	movs	r2, #7
 800145e:	431f      	orrs	r7, r3
 8001460:	403a      	ands	r2, r7
 8001462:	e799      	b.n	8001398 <__aeabi_dadd+0xc0>
 8001464:	4e9b      	ldr	r6, [pc, #620]	; (80016d4 <__aeabi_dadd+0x3fc>)
 8001466:	42b5      	cmp	r5, r6
 8001468:	d038      	beq.n	80014dc <__aeabi_dadd+0x204>
 800146a:	2680      	movs	r6, #128	; 0x80
 800146c:	0436      	lsls	r6, r6, #16
 800146e:	4337      	orrs	r7, r6
 8001470:	46b8      	mov	r8, r7
 8001472:	2b38      	cmp	r3, #56	; 0x38
 8001474:	dd00      	ble.n	8001478 <__aeabi_dadd+0x1a0>
 8001476:	e0dc      	b.n	8001632 <__aeabi_dadd+0x35a>
 8001478:	2b1f      	cmp	r3, #31
 800147a:	dc00      	bgt.n	800147e <__aeabi_dadd+0x1a6>
 800147c:	e130      	b.n	80016e0 <__aeabi_dadd+0x408>
 800147e:	001e      	movs	r6, r3
 8001480:	4647      	mov	r7, r8
 8001482:	3e20      	subs	r6, #32
 8001484:	40f7      	lsrs	r7, r6
 8001486:	46bc      	mov	ip, r7
 8001488:	2b20      	cmp	r3, #32
 800148a:	d004      	beq.n	8001496 <__aeabi_dadd+0x1be>
 800148c:	2640      	movs	r6, #64	; 0x40
 800148e:	1af3      	subs	r3, r6, r3
 8001490:	4646      	mov	r6, r8
 8001492:	409e      	lsls	r6, r3
 8001494:	4332      	orrs	r2, r6
 8001496:	0017      	movs	r7, r2
 8001498:	4663      	mov	r3, ip
 800149a:	1e7a      	subs	r2, r7, #1
 800149c:	4197      	sbcs	r7, r2
 800149e:	431f      	orrs	r7, r3
 80014a0:	e0cc      	b.n	800163c <__aeabi_dadd+0x364>
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dadd+0x1d0>
 80014a6:	e204      	b.n	80018b2 <__aeabi_dadd+0x5da>
 80014a8:	4643      	mov	r3, r8
 80014aa:	4313      	orrs	r3, r2
 80014ac:	d100      	bne.n	80014b0 <__aeabi_dadd+0x1d8>
 80014ae:	e159      	b.n	8001764 <__aeabi_dadd+0x48c>
 80014b0:	074b      	lsls	r3, r1, #29
 80014b2:	08c0      	lsrs	r0, r0, #3
 80014b4:	4318      	orrs	r0, r3
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	08c9      	lsrs	r1, r1, #3
 80014ba:	031b      	lsls	r3, r3, #12
 80014bc:	4219      	tst	r1, r3
 80014be:	d008      	beq.n	80014d2 <__aeabi_dadd+0x1fa>
 80014c0:	4645      	mov	r5, r8
 80014c2:	08ed      	lsrs	r5, r5, #3
 80014c4:	421d      	tst	r5, r3
 80014c6:	d104      	bne.n	80014d2 <__aeabi_dadd+0x1fa>
 80014c8:	4643      	mov	r3, r8
 80014ca:	08d0      	lsrs	r0, r2, #3
 80014cc:	0759      	lsls	r1, r3, #29
 80014ce:	4308      	orrs	r0, r1
 80014d0:	0029      	movs	r1, r5
 80014d2:	0f42      	lsrs	r2, r0, #29
 80014d4:	00c9      	lsls	r1, r1, #3
 80014d6:	4d7f      	ldr	r5, [pc, #508]	; (80016d4 <__aeabi_dadd+0x3fc>)
 80014d8:	4311      	orrs	r1, r2
 80014da:	00c0      	lsls	r0, r0, #3
 80014dc:	074b      	lsls	r3, r1, #29
 80014de:	08ca      	lsrs	r2, r1, #3
 80014e0:	497c      	ldr	r1, [pc, #496]	; (80016d4 <__aeabi_dadd+0x3fc>)
 80014e2:	08c0      	lsrs	r0, r0, #3
 80014e4:	4303      	orrs	r3, r0
 80014e6:	428d      	cmp	r5, r1
 80014e8:	d068      	beq.n	80015bc <__aeabi_dadd+0x2e4>
 80014ea:	0312      	lsls	r2, r2, #12
 80014ec:	056d      	lsls	r5, r5, #21
 80014ee:	0b12      	lsrs	r2, r2, #12
 80014f0:	0d6d      	lsrs	r5, r5, #21
 80014f2:	2100      	movs	r1, #0
 80014f4:	0312      	lsls	r2, r2, #12
 80014f6:	0018      	movs	r0, r3
 80014f8:	0b13      	lsrs	r3, r2, #12
 80014fa:	0d0a      	lsrs	r2, r1, #20
 80014fc:	0512      	lsls	r2, r2, #20
 80014fe:	431a      	orrs	r2, r3
 8001500:	4b76      	ldr	r3, [pc, #472]	; (80016dc <__aeabi_dadd+0x404>)
 8001502:	052d      	lsls	r5, r5, #20
 8001504:	4013      	ands	r3, r2
 8001506:	432b      	orrs	r3, r5
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	07e4      	lsls	r4, r4, #31
 800150c:	085b      	lsrs	r3, r3, #1
 800150e:	4323      	orrs	r3, r4
 8001510:	0019      	movs	r1, r3
 8001512:	bc1c      	pop	{r2, r3, r4}
 8001514:	4690      	mov	r8, r2
 8001516:	4699      	mov	r9, r3
 8001518:	46a2      	mov	sl, r4
 800151a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800151c:	003e      	movs	r6, r7
 800151e:	4316      	orrs	r6, r2
 8001520:	d012      	beq.n	8001548 <__aeabi_dadd+0x270>
 8001522:	1e5e      	subs	r6, r3, #1
 8001524:	2e00      	cmp	r6, #0
 8001526:	d000      	beq.n	800152a <__aeabi_dadd+0x252>
 8001528:	e100      	b.n	800172c <__aeabi_dadd+0x454>
 800152a:	1887      	adds	r7, r0, r2
 800152c:	4287      	cmp	r7, r0
 800152e:	4180      	sbcs	r0, r0
 8001530:	4441      	add	r1, r8
 8001532:	4240      	negs	r0, r0
 8001534:	1809      	adds	r1, r1, r0
 8001536:	2501      	movs	r5, #1
 8001538:	020b      	lsls	r3, r1, #8
 800153a:	d533      	bpl.n	80015a4 <__aeabi_dadd+0x2cc>
 800153c:	2502      	movs	r5, #2
 800153e:	e785      	b.n	800144c <__aeabi_dadd+0x174>
 8001540:	4664      	mov	r4, ip
 8001542:	0033      	movs	r3, r6
 8001544:	4641      	mov	r1, r8
 8001546:	0010      	movs	r0, r2
 8001548:	001d      	movs	r5, r3
 800154a:	e7c7      	b.n	80014dc <__aeabi_dadd+0x204>
 800154c:	2d00      	cmp	r5, #0
 800154e:	d000      	beq.n	8001552 <__aeabi_dadd+0x27a>
 8001550:	e0da      	b.n	8001708 <__aeabi_dadd+0x430>
 8001552:	000c      	movs	r4, r1
 8001554:	4304      	orrs	r4, r0
 8001556:	d0f3      	beq.n	8001540 <__aeabi_dadd+0x268>
 8001558:	1c5c      	adds	r4, r3, #1
 800155a:	d100      	bne.n	800155e <__aeabi_dadd+0x286>
 800155c:	e19f      	b.n	800189e <__aeabi_dadd+0x5c6>
 800155e:	4c5d      	ldr	r4, [pc, #372]	; (80016d4 <__aeabi_dadd+0x3fc>)
 8001560:	42a6      	cmp	r6, r4
 8001562:	d100      	bne.n	8001566 <__aeabi_dadd+0x28e>
 8001564:	e12f      	b.n	80017c6 <__aeabi_dadd+0x4ee>
 8001566:	43db      	mvns	r3, r3
 8001568:	2b38      	cmp	r3, #56	; 0x38
 800156a:	dd00      	ble.n	800156e <__aeabi_dadd+0x296>
 800156c:	e166      	b.n	800183c <__aeabi_dadd+0x564>
 800156e:	2b1f      	cmp	r3, #31
 8001570:	dd00      	ble.n	8001574 <__aeabi_dadd+0x29c>
 8001572:	e183      	b.n	800187c <__aeabi_dadd+0x5a4>
 8001574:	2420      	movs	r4, #32
 8001576:	0005      	movs	r5, r0
 8001578:	1ae4      	subs	r4, r4, r3
 800157a:	000f      	movs	r7, r1
 800157c:	40dd      	lsrs	r5, r3
 800157e:	40d9      	lsrs	r1, r3
 8001580:	40a0      	lsls	r0, r4
 8001582:	4643      	mov	r3, r8
 8001584:	40a7      	lsls	r7, r4
 8001586:	1a5b      	subs	r3, r3, r1
 8001588:	1e44      	subs	r4, r0, #1
 800158a:	41a0      	sbcs	r0, r4
 800158c:	4698      	mov	r8, r3
 800158e:	432f      	orrs	r7, r5
 8001590:	4338      	orrs	r0, r7
 8001592:	1a17      	subs	r7, r2, r0
 8001594:	42ba      	cmp	r2, r7
 8001596:	4192      	sbcs	r2, r2
 8001598:	4643      	mov	r3, r8
 800159a:	4252      	negs	r2, r2
 800159c:	1a99      	subs	r1, r3, r2
 800159e:	4664      	mov	r4, ip
 80015a0:	0035      	movs	r5, r6
 80015a2:	e6ca      	b.n	800133a <__aeabi_dadd+0x62>
 80015a4:	2207      	movs	r2, #7
 80015a6:	403a      	ands	r2, r7
 80015a8:	2a00      	cmp	r2, #0
 80015aa:	d000      	beq.n	80015ae <__aeabi_dadd+0x2d6>
 80015ac:	e6f6      	b.n	800139c <__aeabi_dadd+0xc4>
 80015ae:	074b      	lsls	r3, r1, #29
 80015b0:	08ca      	lsrs	r2, r1, #3
 80015b2:	4948      	ldr	r1, [pc, #288]	; (80016d4 <__aeabi_dadd+0x3fc>)
 80015b4:	08ff      	lsrs	r7, r7, #3
 80015b6:	433b      	orrs	r3, r7
 80015b8:	428d      	cmp	r5, r1
 80015ba:	d196      	bne.n	80014ea <__aeabi_dadd+0x212>
 80015bc:	0019      	movs	r1, r3
 80015be:	4311      	orrs	r1, r2
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dadd+0x2ec>
 80015c2:	e19e      	b.n	8001902 <__aeabi_dadd+0x62a>
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0309      	lsls	r1, r1, #12
 80015c8:	430a      	orrs	r2, r1
 80015ca:	0312      	lsls	r2, r2, #12
 80015cc:	0b12      	lsrs	r2, r2, #12
 80015ce:	4d41      	ldr	r5, [pc, #260]	; (80016d4 <__aeabi_dadd+0x3fc>)
 80015d0:	e78f      	b.n	80014f2 <__aeabi_dadd+0x21a>
 80015d2:	0015      	movs	r5, r2
 80015d4:	2200      	movs	r2, #0
 80015d6:	2300      	movs	r3, #0
 80015d8:	e78b      	b.n	80014f2 <__aeabi_dadd+0x21a>
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d000      	beq.n	80015e0 <__aeabi_dadd+0x308>
 80015de:	e0c7      	b.n	8001770 <__aeabi_dadd+0x498>
 80015e0:	1c6b      	adds	r3, r5, #1
 80015e2:	055f      	lsls	r7, r3, #21
 80015e4:	0d7f      	lsrs	r7, r7, #21
 80015e6:	2f01      	cmp	r7, #1
 80015e8:	dc00      	bgt.n	80015ec <__aeabi_dadd+0x314>
 80015ea:	e0f1      	b.n	80017d0 <__aeabi_dadd+0x4f8>
 80015ec:	4d39      	ldr	r5, [pc, #228]	; (80016d4 <__aeabi_dadd+0x3fc>)
 80015ee:	42ab      	cmp	r3, r5
 80015f0:	d100      	bne.n	80015f4 <__aeabi_dadd+0x31c>
 80015f2:	e0b9      	b.n	8001768 <__aeabi_dadd+0x490>
 80015f4:	1885      	adds	r5, r0, r2
 80015f6:	000a      	movs	r2, r1
 80015f8:	4285      	cmp	r5, r0
 80015fa:	4189      	sbcs	r1, r1
 80015fc:	4442      	add	r2, r8
 80015fe:	4249      	negs	r1, r1
 8001600:	1851      	adds	r1, r2, r1
 8001602:	2207      	movs	r2, #7
 8001604:	07cf      	lsls	r7, r1, #31
 8001606:	086d      	lsrs	r5, r5, #1
 8001608:	432f      	orrs	r7, r5
 800160a:	0849      	lsrs	r1, r1, #1
 800160c:	403a      	ands	r2, r7
 800160e:	001d      	movs	r5, r3
 8001610:	e6c2      	b.n	8001398 <__aeabi_dadd+0xc0>
 8001612:	2207      	movs	r2, #7
 8001614:	4930      	ldr	r1, [pc, #192]	; (80016d8 <__aeabi_dadd+0x400>)
 8001616:	1aed      	subs	r5, r5, r3
 8001618:	4031      	ands	r1, r6
 800161a:	403a      	ands	r2, r7
 800161c:	e6bc      	b.n	8001398 <__aeabi_dadd+0xc0>
 800161e:	003e      	movs	r6, r7
 8001620:	3828      	subs	r0, #40	; 0x28
 8001622:	4086      	lsls	r6, r0
 8001624:	2700      	movs	r7, #0
 8001626:	e69f      	b.n	8001368 <__aeabi_dadd+0x90>
 8001628:	0038      	movs	r0, r7
 800162a:	f001 fc29 	bl	8002e80 <__clzsi2>
 800162e:	3020      	adds	r0, #32
 8001630:	e68e      	b.n	8001350 <__aeabi_dadd+0x78>
 8001632:	4643      	mov	r3, r8
 8001634:	4313      	orrs	r3, r2
 8001636:	001f      	movs	r7, r3
 8001638:	1e7a      	subs	r2, r7, #1
 800163a:	4197      	sbcs	r7, r2
 800163c:	1bc7      	subs	r7, r0, r7
 800163e:	42b8      	cmp	r0, r7
 8001640:	4180      	sbcs	r0, r0
 8001642:	4240      	negs	r0, r0
 8001644:	1a09      	subs	r1, r1, r0
 8001646:	e678      	b.n	800133a <__aeabi_dadd+0x62>
 8001648:	000e      	movs	r6, r1
 800164a:	003b      	movs	r3, r7
 800164c:	4306      	orrs	r6, r0
 800164e:	4313      	orrs	r3, r2
 8001650:	2d00      	cmp	r5, #0
 8001652:	d161      	bne.n	8001718 <__aeabi_dadd+0x440>
 8001654:	2e00      	cmp	r6, #0
 8001656:	d000      	beq.n	800165a <__aeabi_dadd+0x382>
 8001658:	e0f4      	b.n	8001844 <__aeabi_dadd+0x56c>
 800165a:	2b00      	cmp	r3, #0
 800165c:	d100      	bne.n	8001660 <__aeabi_dadd+0x388>
 800165e:	e11b      	b.n	8001898 <__aeabi_dadd+0x5c0>
 8001660:	4664      	mov	r4, ip
 8001662:	0039      	movs	r1, r7
 8001664:	0010      	movs	r0, r2
 8001666:	e739      	b.n	80014dc <__aeabi_dadd+0x204>
 8001668:	4f1a      	ldr	r7, [pc, #104]	; (80016d4 <__aeabi_dadd+0x3fc>)
 800166a:	42bb      	cmp	r3, r7
 800166c:	d07a      	beq.n	8001764 <__aeabi_dadd+0x48c>
 800166e:	0033      	movs	r3, r6
 8001670:	e6ff      	b.n	8001472 <__aeabi_dadd+0x19a>
 8001672:	0030      	movs	r0, r6
 8001674:	3d1f      	subs	r5, #31
 8001676:	40e8      	lsrs	r0, r5
 8001678:	2b20      	cmp	r3, #32
 800167a:	d003      	beq.n	8001684 <__aeabi_dadd+0x3ac>
 800167c:	2140      	movs	r1, #64	; 0x40
 800167e:	1acb      	subs	r3, r1, r3
 8001680:	409e      	lsls	r6, r3
 8001682:	4337      	orrs	r7, r6
 8001684:	1e7b      	subs	r3, r7, #1
 8001686:	419f      	sbcs	r7, r3
 8001688:	2207      	movs	r2, #7
 800168a:	4307      	orrs	r7, r0
 800168c:	403a      	ands	r2, r7
 800168e:	2100      	movs	r1, #0
 8001690:	2500      	movs	r5, #0
 8001692:	e789      	b.n	80015a8 <__aeabi_dadd+0x2d0>
 8001694:	1a17      	subs	r7, r2, r0
 8001696:	4643      	mov	r3, r8
 8001698:	42ba      	cmp	r2, r7
 800169a:	41b6      	sbcs	r6, r6
 800169c:	1a59      	subs	r1, r3, r1
 800169e:	4276      	negs	r6, r6
 80016a0:	1b8e      	subs	r6, r1, r6
 80016a2:	4664      	mov	r4, ip
 80016a4:	e64e      	b.n	8001344 <__aeabi_dadd+0x6c>
 80016a6:	2b1f      	cmp	r3, #31
 80016a8:	dd00      	ble.n	80016ac <__aeabi_dadd+0x3d4>
 80016aa:	e0ad      	b.n	8001808 <__aeabi_dadd+0x530>
 80016ac:	2620      	movs	r6, #32
 80016ae:	4647      	mov	r7, r8
 80016b0:	1af6      	subs	r6, r6, r3
 80016b2:	40b7      	lsls	r7, r6
 80016b4:	46b9      	mov	r9, r7
 80016b6:	0017      	movs	r7, r2
 80016b8:	46b2      	mov	sl, r6
 80016ba:	40df      	lsrs	r7, r3
 80016bc:	464e      	mov	r6, r9
 80016be:	433e      	orrs	r6, r7
 80016c0:	0037      	movs	r7, r6
 80016c2:	4656      	mov	r6, sl
 80016c4:	40b2      	lsls	r2, r6
 80016c6:	1e56      	subs	r6, r2, #1
 80016c8:	41b2      	sbcs	r2, r6
 80016ca:	4317      	orrs	r7, r2
 80016cc:	4642      	mov	r2, r8
 80016ce:	40da      	lsrs	r2, r3
 80016d0:	1889      	adds	r1, r1, r2
 80016d2:	e6ae      	b.n	8001432 <__aeabi_dadd+0x15a>
 80016d4:	000007ff 	.word	0x000007ff
 80016d8:	ff7fffff 	.word	0xff7fffff
 80016dc:	800fffff 	.word	0x800fffff
 80016e0:	2620      	movs	r6, #32
 80016e2:	4647      	mov	r7, r8
 80016e4:	1af6      	subs	r6, r6, r3
 80016e6:	40b7      	lsls	r7, r6
 80016e8:	46b9      	mov	r9, r7
 80016ea:	0017      	movs	r7, r2
 80016ec:	46b2      	mov	sl, r6
 80016ee:	40df      	lsrs	r7, r3
 80016f0:	464e      	mov	r6, r9
 80016f2:	433e      	orrs	r6, r7
 80016f4:	0037      	movs	r7, r6
 80016f6:	4656      	mov	r6, sl
 80016f8:	40b2      	lsls	r2, r6
 80016fa:	1e56      	subs	r6, r2, #1
 80016fc:	41b2      	sbcs	r2, r6
 80016fe:	4317      	orrs	r7, r2
 8001700:	4642      	mov	r2, r8
 8001702:	40da      	lsrs	r2, r3
 8001704:	1a89      	subs	r1, r1, r2
 8001706:	e799      	b.n	800163c <__aeabi_dadd+0x364>
 8001708:	4c7f      	ldr	r4, [pc, #508]	; (8001908 <__aeabi_dadd+0x630>)
 800170a:	42a6      	cmp	r6, r4
 800170c:	d05b      	beq.n	80017c6 <__aeabi_dadd+0x4ee>
 800170e:	2480      	movs	r4, #128	; 0x80
 8001710:	0424      	lsls	r4, r4, #16
 8001712:	425b      	negs	r3, r3
 8001714:	4321      	orrs	r1, r4
 8001716:	e727      	b.n	8001568 <__aeabi_dadd+0x290>
 8001718:	2e00      	cmp	r6, #0
 800171a:	d10c      	bne.n	8001736 <__aeabi_dadd+0x45e>
 800171c:	2b00      	cmp	r3, #0
 800171e:	d100      	bne.n	8001722 <__aeabi_dadd+0x44a>
 8001720:	e0cb      	b.n	80018ba <__aeabi_dadd+0x5e2>
 8001722:	4664      	mov	r4, ip
 8001724:	0039      	movs	r1, r7
 8001726:	0010      	movs	r0, r2
 8001728:	4d77      	ldr	r5, [pc, #476]	; (8001908 <__aeabi_dadd+0x630>)
 800172a:	e6d7      	b.n	80014dc <__aeabi_dadd+0x204>
 800172c:	4f76      	ldr	r7, [pc, #472]	; (8001908 <__aeabi_dadd+0x630>)
 800172e:	42bb      	cmp	r3, r7
 8001730:	d018      	beq.n	8001764 <__aeabi_dadd+0x48c>
 8001732:	0033      	movs	r3, r6
 8001734:	e675      	b.n	8001422 <__aeabi_dadd+0x14a>
 8001736:	2b00      	cmp	r3, #0
 8001738:	d014      	beq.n	8001764 <__aeabi_dadd+0x48c>
 800173a:	074b      	lsls	r3, r1, #29
 800173c:	08c0      	lsrs	r0, r0, #3
 800173e:	4318      	orrs	r0, r3
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	08c9      	lsrs	r1, r1, #3
 8001744:	031b      	lsls	r3, r3, #12
 8001746:	4219      	tst	r1, r3
 8001748:	d007      	beq.n	800175a <__aeabi_dadd+0x482>
 800174a:	08fc      	lsrs	r4, r7, #3
 800174c:	421c      	tst	r4, r3
 800174e:	d104      	bne.n	800175a <__aeabi_dadd+0x482>
 8001750:	0779      	lsls	r1, r7, #29
 8001752:	08d0      	lsrs	r0, r2, #3
 8001754:	4308      	orrs	r0, r1
 8001756:	46e1      	mov	r9, ip
 8001758:	0021      	movs	r1, r4
 800175a:	464c      	mov	r4, r9
 800175c:	0f42      	lsrs	r2, r0, #29
 800175e:	00c9      	lsls	r1, r1, #3
 8001760:	4311      	orrs	r1, r2
 8001762:	00c0      	lsls	r0, r0, #3
 8001764:	4d68      	ldr	r5, [pc, #416]	; (8001908 <__aeabi_dadd+0x630>)
 8001766:	e6b9      	b.n	80014dc <__aeabi_dadd+0x204>
 8001768:	001d      	movs	r5, r3
 800176a:	2200      	movs	r2, #0
 800176c:	2300      	movs	r3, #0
 800176e:	e6c0      	b.n	80014f2 <__aeabi_dadd+0x21a>
 8001770:	2d00      	cmp	r5, #0
 8001772:	d15b      	bne.n	800182c <__aeabi_dadd+0x554>
 8001774:	000d      	movs	r5, r1
 8001776:	4305      	orrs	r5, r0
 8001778:	d100      	bne.n	800177c <__aeabi_dadd+0x4a4>
 800177a:	e6e2      	b.n	8001542 <__aeabi_dadd+0x26a>
 800177c:	1c5d      	adds	r5, r3, #1
 800177e:	d100      	bne.n	8001782 <__aeabi_dadd+0x4aa>
 8001780:	e0b0      	b.n	80018e4 <__aeabi_dadd+0x60c>
 8001782:	4d61      	ldr	r5, [pc, #388]	; (8001908 <__aeabi_dadd+0x630>)
 8001784:	42ae      	cmp	r6, r5
 8001786:	d01f      	beq.n	80017c8 <__aeabi_dadd+0x4f0>
 8001788:	43db      	mvns	r3, r3
 800178a:	2b38      	cmp	r3, #56	; 0x38
 800178c:	dc71      	bgt.n	8001872 <__aeabi_dadd+0x59a>
 800178e:	2b1f      	cmp	r3, #31
 8001790:	dd00      	ble.n	8001794 <__aeabi_dadd+0x4bc>
 8001792:	e096      	b.n	80018c2 <__aeabi_dadd+0x5ea>
 8001794:	2520      	movs	r5, #32
 8001796:	000f      	movs	r7, r1
 8001798:	1aed      	subs	r5, r5, r3
 800179a:	40af      	lsls	r7, r5
 800179c:	46b9      	mov	r9, r7
 800179e:	0007      	movs	r7, r0
 80017a0:	46aa      	mov	sl, r5
 80017a2:	40df      	lsrs	r7, r3
 80017a4:	464d      	mov	r5, r9
 80017a6:	433d      	orrs	r5, r7
 80017a8:	002f      	movs	r7, r5
 80017aa:	4655      	mov	r5, sl
 80017ac:	40a8      	lsls	r0, r5
 80017ae:	40d9      	lsrs	r1, r3
 80017b0:	1e45      	subs	r5, r0, #1
 80017b2:	41a8      	sbcs	r0, r5
 80017b4:	4488      	add	r8, r1
 80017b6:	4307      	orrs	r7, r0
 80017b8:	18bf      	adds	r7, r7, r2
 80017ba:	4297      	cmp	r7, r2
 80017bc:	4192      	sbcs	r2, r2
 80017be:	4251      	negs	r1, r2
 80017c0:	4441      	add	r1, r8
 80017c2:	0035      	movs	r5, r6
 80017c4:	e63a      	b.n	800143c <__aeabi_dadd+0x164>
 80017c6:	4664      	mov	r4, ip
 80017c8:	0035      	movs	r5, r6
 80017ca:	4641      	mov	r1, r8
 80017cc:	0010      	movs	r0, r2
 80017ce:	e685      	b.n	80014dc <__aeabi_dadd+0x204>
 80017d0:	000b      	movs	r3, r1
 80017d2:	4303      	orrs	r3, r0
 80017d4:	2d00      	cmp	r5, #0
 80017d6:	d000      	beq.n	80017da <__aeabi_dadd+0x502>
 80017d8:	e663      	b.n	80014a2 <__aeabi_dadd+0x1ca>
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f5      	beq.n	80017ca <__aeabi_dadd+0x4f2>
 80017de:	4643      	mov	r3, r8
 80017e0:	4313      	orrs	r3, r2
 80017e2:	d100      	bne.n	80017e6 <__aeabi_dadd+0x50e>
 80017e4:	e67a      	b.n	80014dc <__aeabi_dadd+0x204>
 80017e6:	1887      	adds	r7, r0, r2
 80017e8:	4287      	cmp	r7, r0
 80017ea:	4180      	sbcs	r0, r0
 80017ec:	2207      	movs	r2, #7
 80017ee:	4441      	add	r1, r8
 80017f0:	4240      	negs	r0, r0
 80017f2:	1809      	adds	r1, r1, r0
 80017f4:	403a      	ands	r2, r7
 80017f6:	020b      	lsls	r3, r1, #8
 80017f8:	d400      	bmi.n	80017fc <__aeabi_dadd+0x524>
 80017fa:	e6d5      	b.n	80015a8 <__aeabi_dadd+0x2d0>
 80017fc:	4b43      	ldr	r3, [pc, #268]	; (800190c <__aeabi_dadd+0x634>)
 80017fe:	3501      	adds	r5, #1
 8001800:	4019      	ands	r1, r3
 8001802:	e5c9      	b.n	8001398 <__aeabi_dadd+0xc0>
 8001804:	0038      	movs	r0, r7
 8001806:	e669      	b.n	80014dc <__aeabi_dadd+0x204>
 8001808:	001e      	movs	r6, r3
 800180a:	4647      	mov	r7, r8
 800180c:	3e20      	subs	r6, #32
 800180e:	40f7      	lsrs	r7, r6
 8001810:	46bc      	mov	ip, r7
 8001812:	2b20      	cmp	r3, #32
 8001814:	d004      	beq.n	8001820 <__aeabi_dadd+0x548>
 8001816:	2640      	movs	r6, #64	; 0x40
 8001818:	1af3      	subs	r3, r6, r3
 800181a:	4646      	mov	r6, r8
 800181c:	409e      	lsls	r6, r3
 800181e:	4332      	orrs	r2, r6
 8001820:	0017      	movs	r7, r2
 8001822:	4663      	mov	r3, ip
 8001824:	1e7a      	subs	r2, r7, #1
 8001826:	4197      	sbcs	r7, r2
 8001828:	431f      	orrs	r7, r3
 800182a:	e602      	b.n	8001432 <__aeabi_dadd+0x15a>
 800182c:	4d36      	ldr	r5, [pc, #216]	; (8001908 <__aeabi_dadd+0x630>)
 800182e:	42ae      	cmp	r6, r5
 8001830:	d0ca      	beq.n	80017c8 <__aeabi_dadd+0x4f0>
 8001832:	2580      	movs	r5, #128	; 0x80
 8001834:	042d      	lsls	r5, r5, #16
 8001836:	425b      	negs	r3, r3
 8001838:	4329      	orrs	r1, r5
 800183a:	e7a6      	b.n	800178a <__aeabi_dadd+0x4b2>
 800183c:	4308      	orrs	r0, r1
 800183e:	1e41      	subs	r1, r0, #1
 8001840:	4188      	sbcs	r0, r1
 8001842:	e6a6      	b.n	8001592 <__aeabi_dadd+0x2ba>
 8001844:	2b00      	cmp	r3, #0
 8001846:	d100      	bne.n	800184a <__aeabi_dadd+0x572>
 8001848:	e648      	b.n	80014dc <__aeabi_dadd+0x204>
 800184a:	1a87      	subs	r7, r0, r2
 800184c:	4643      	mov	r3, r8
 800184e:	42b8      	cmp	r0, r7
 8001850:	41b6      	sbcs	r6, r6
 8001852:	1acb      	subs	r3, r1, r3
 8001854:	4276      	negs	r6, r6
 8001856:	1b9e      	subs	r6, r3, r6
 8001858:	0233      	lsls	r3, r6, #8
 800185a:	d54b      	bpl.n	80018f4 <__aeabi_dadd+0x61c>
 800185c:	1a17      	subs	r7, r2, r0
 800185e:	4643      	mov	r3, r8
 8001860:	42ba      	cmp	r2, r7
 8001862:	4192      	sbcs	r2, r2
 8001864:	1a59      	subs	r1, r3, r1
 8001866:	4252      	negs	r2, r2
 8001868:	1a89      	subs	r1, r1, r2
 800186a:	2207      	movs	r2, #7
 800186c:	4664      	mov	r4, ip
 800186e:	403a      	ands	r2, r7
 8001870:	e592      	b.n	8001398 <__aeabi_dadd+0xc0>
 8001872:	4301      	orrs	r1, r0
 8001874:	000f      	movs	r7, r1
 8001876:	1e79      	subs	r1, r7, #1
 8001878:	418f      	sbcs	r7, r1
 800187a:	e79d      	b.n	80017b8 <__aeabi_dadd+0x4e0>
 800187c:	001c      	movs	r4, r3
 800187e:	000f      	movs	r7, r1
 8001880:	3c20      	subs	r4, #32
 8001882:	40e7      	lsrs	r7, r4
 8001884:	2b20      	cmp	r3, #32
 8001886:	d003      	beq.n	8001890 <__aeabi_dadd+0x5b8>
 8001888:	2440      	movs	r4, #64	; 0x40
 800188a:	1ae3      	subs	r3, r4, r3
 800188c:	4099      	lsls	r1, r3
 800188e:	4308      	orrs	r0, r1
 8001890:	1e41      	subs	r1, r0, #1
 8001892:	4188      	sbcs	r0, r1
 8001894:	4338      	orrs	r0, r7
 8001896:	e67c      	b.n	8001592 <__aeabi_dadd+0x2ba>
 8001898:	2200      	movs	r2, #0
 800189a:	2400      	movs	r4, #0
 800189c:	e625      	b.n	80014ea <__aeabi_dadd+0x212>
 800189e:	1a17      	subs	r7, r2, r0
 80018a0:	4643      	mov	r3, r8
 80018a2:	42ba      	cmp	r2, r7
 80018a4:	4192      	sbcs	r2, r2
 80018a6:	1a59      	subs	r1, r3, r1
 80018a8:	4252      	negs	r2, r2
 80018aa:	1a89      	subs	r1, r1, r2
 80018ac:	4664      	mov	r4, ip
 80018ae:	0035      	movs	r5, r6
 80018b0:	e543      	b.n	800133a <__aeabi_dadd+0x62>
 80018b2:	4641      	mov	r1, r8
 80018b4:	0010      	movs	r0, r2
 80018b6:	4d14      	ldr	r5, [pc, #80]	; (8001908 <__aeabi_dadd+0x630>)
 80018b8:	e610      	b.n	80014dc <__aeabi_dadd+0x204>
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	2400      	movs	r4, #0
 80018be:	0312      	lsls	r2, r2, #12
 80018c0:	e680      	b.n	80015c4 <__aeabi_dadd+0x2ec>
 80018c2:	001d      	movs	r5, r3
 80018c4:	000f      	movs	r7, r1
 80018c6:	3d20      	subs	r5, #32
 80018c8:	40ef      	lsrs	r7, r5
 80018ca:	46bc      	mov	ip, r7
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	d003      	beq.n	80018d8 <__aeabi_dadd+0x600>
 80018d0:	2540      	movs	r5, #64	; 0x40
 80018d2:	1aeb      	subs	r3, r5, r3
 80018d4:	4099      	lsls	r1, r3
 80018d6:	4308      	orrs	r0, r1
 80018d8:	0007      	movs	r7, r0
 80018da:	4663      	mov	r3, ip
 80018dc:	1e78      	subs	r0, r7, #1
 80018de:	4187      	sbcs	r7, r0
 80018e0:	431f      	orrs	r7, r3
 80018e2:	e769      	b.n	80017b8 <__aeabi_dadd+0x4e0>
 80018e4:	1887      	adds	r7, r0, r2
 80018e6:	4297      	cmp	r7, r2
 80018e8:	419b      	sbcs	r3, r3
 80018ea:	4441      	add	r1, r8
 80018ec:	425b      	negs	r3, r3
 80018ee:	18c9      	adds	r1, r1, r3
 80018f0:	0035      	movs	r5, r6
 80018f2:	e5a3      	b.n	800143c <__aeabi_dadd+0x164>
 80018f4:	003b      	movs	r3, r7
 80018f6:	4333      	orrs	r3, r6
 80018f8:	d0ce      	beq.n	8001898 <__aeabi_dadd+0x5c0>
 80018fa:	2207      	movs	r2, #7
 80018fc:	0031      	movs	r1, r6
 80018fe:	403a      	ands	r2, r7
 8001900:	e652      	b.n	80015a8 <__aeabi_dadd+0x2d0>
 8001902:	2300      	movs	r3, #0
 8001904:	001a      	movs	r2, r3
 8001906:	e5f4      	b.n	80014f2 <__aeabi_dadd+0x21a>
 8001908:	000007ff 	.word	0x000007ff
 800190c:	ff7fffff 	.word	0xff7fffff

08001910 <__aeabi_ddiv>:
 8001910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001912:	4657      	mov	r7, sl
 8001914:	46de      	mov	lr, fp
 8001916:	464e      	mov	r6, r9
 8001918:	4645      	mov	r5, r8
 800191a:	b5e0      	push	{r5, r6, r7, lr}
 800191c:	4683      	mov	fp, r0
 800191e:	0007      	movs	r7, r0
 8001920:	030e      	lsls	r6, r1, #12
 8001922:	0048      	lsls	r0, r1, #1
 8001924:	b085      	sub	sp, #20
 8001926:	4692      	mov	sl, r2
 8001928:	001c      	movs	r4, r3
 800192a:	0b36      	lsrs	r6, r6, #12
 800192c:	0d40      	lsrs	r0, r0, #21
 800192e:	0fcd      	lsrs	r5, r1, #31
 8001930:	2800      	cmp	r0, #0
 8001932:	d100      	bne.n	8001936 <__aeabi_ddiv+0x26>
 8001934:	e09d      	b.n	8001a72 <__aeabi_ddiv+0x162>
 8001936:	4b95      	ldr	r3, [pc, #596]	; (8001b8c <__aeabi_ddiv+0x27c>)
 8001938:	4298      	cmp	r0, r3
 800193a:	d039      	beq.n	80019b0 <__aeabi_ddiv+0xa0>
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	00f6      	lsls	r6, r6, #3
 8001940:	041b      	lsls	r3, r3, #16
 8001942:	431e      	orrs	r6, r3
 8001944:	4a92      	ldr	r2, [pc, #584]	; (8001b90 <__aeabi_ddiv+0x280>)
 8001946:	0f7b      	lsrs	r3, r7, #29
 8001948:	4333      	orrs	r3, r6
 800194a:	4699      	mov	r9, r3
 800194c:	4694      	mov	ip, r2
 800194e:	0003      	movs	r3, r0
 8001950:	4463      	add	r3, ip
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2300      	movs	r3, #0
 8001956:	2600      	movs	r6, #0
 8001958:	00ff      	lsls	r7, r7, #3
 800195a:	9302      	str	r3, [sp, #8]
 800195c:	0323      	lsls	r3, r4, #12
 800195e:	0b1b      	lsrs	r3, r3, #12
 8001960:	4698      	mov	r8, r3
 8001962:	0063      	lsls	r3, r4, #1
 8001964:	0fe4      	lsrs	r4, r4, #31
 8001966:	4652      	mov	r2, sl
 8001968:	0d5b      	lsrs	r3, r3, #21
 800196a:	9401      	str	r4, [sp, #4]
 800196c:	d100      	bne.n	8001970 <__aeabi_ddiv+0x60>
 800196e:	e0b3      	b.n	8001ad8 <__aeabi_ddiv+0x1c8>
 8001970:	4986      	ldr	r1, [pc, #536]	; (8001b8c <__aeabi_ddiv+0x27c>)
 8001972:	428b      	cmp	r3, r1
 8001974:	d100      	bne.n	8001978 <__aeabi_ddiv+0x68>
 8001976:	e09e      	b.n	8001ab6 <__aeabi_ddiv+0x1a6>
 8001978:	4642      	mov	r2, r8
 800197a:	00d1      	lsls	r1, r2, #3
 800197c:	2280      	movs	r2, #128	; 0x80
 800197e:	0412      	lsls	r2, r2, #16
 8001980:	430a      	orrs	r2, r1
 8001982:	4651      	mov	r1, sl
 8001984:	0f49      	lsrs	r1, r1, #29
 8001986:	4311      	orrs	r1, r2
 8001988:	468b      	mov	fp, r1
 800198a:	4981      	ldr	r1, [pc, #516]	; (8001b90 <__aeabi_ddiv+0x280>)
 800198c:	4652      	mov	r2, sl
 800198e:	468c      	mov	ip, r1
 8001990:	9900      	ldr	r1, [sp, #0]
 8001992:	4463      	add	r3, ip
 8001994:	1acb      	subs	r3, r1, r3
 8001996:	2100      	movs	r1, #0
 8001998:	00d2      	lsls	r2, r2, #3
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	002b      	movs	r3, r5
 800199e:	4063      	eors	r3, r4
 80019a0:	469a      	mov	sl, r3
 80019a2:	2e0f      	cmp	r6, #15
 80019a4:	d900      	bls.n	80019a8 <__aeabi_ddiv+0x98>
 80019a6:	e105      	b.n	8001bb4 <__aeabi_ddiv+0x2a4>
 80019a8:	4b7a      	ldr	r3, [pc, #488]	; (8001b94 <__aeabi_ddiv+0x284>)
 80019aa:	00b6      	lsls	r6, r6, #2
 80019ac:	599b      	ldr	r3, [r3, r6]
 80019ae:	469f      	mov	pc, r3
 80019b0:	465b      	mov	r3, fp
 80019b2:	4333      	orrs	r3, r6
 80019b4:	4699      	mov	r9, r3
 80019b6:	d000      	beq.n	80019ba <__aeabi_ddiv+0xaa>
 80019b8:	e0b8      	b.n	8001b2c <__aeabi_ddiv+0x21c>
 80019ba:	2302      	movs	r3, #2
 80019bc:	2608      	movs	r6, #8
 80019be:	2700      	movs	r7, #0
 80019c0:	9000      	str	r0, [sp, #0]
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	e7ca      	b.n	800195c <__aeabi_ddiv+0x4c>
 80019c6:	46cb      	mov	fp, r9
 80019c8:	003a      	movs	r2, r7
 80019ca:	9902      	ldr	r1, [sp, #8]
 80019cc:	9501      	str	r5, [sp, #4]
 80019ce:	9b01      	ldr	r3, [sp, #4]
 80019d0:	469a      	mov	sl, r3
 80019d2:	2902      	cmp	r1, #2
 80019d4:	d027      	beq.n	8001a26 <__aeabi_ddiv+0x116>
 80019d6:	2903      	cmp	r1, #3
 80019d8:	d100      	bne.n	80019dc <__aeabi_ddiv+0xcc>
 80019da:	e280      	b.n	8001ede <__aeabi_ddiv+0x5ce>
 80019dc:	2901      	cmp	r1, #1
 80019de:	d044      	beq.n	8001a6a <__aeabi_ddiv+0x15a>
 80019e0:	496d      	ldr	r1, [pc, #436]	; (8001b98 <__aeabi_ddiv+0x288>)
 80019e2:	9b00      	ldr	r3, [sp, #0]
 80019e4:	468c      	mov	ip, r1
 80019e6:	4463      	add	r3, ip
 80019e8:	001c      	movs	r4, r3
 80019ea:	2c00      	cmp	r4, #0
 80019ec:	dd38      	ble.n	8001a60 <__aeabi_ddiv+0x150>
 80019ee:	0753      	lsls	r3, r2, #29
 80019f0:	d000      	beq.n	80019f4 <__aeabi_ddiv+0xe4>
 80019f2:	e213      	b.n	8001e1c <__aeabi_ddiv+0x50c>
 80019f4:	08d2      	lsrs	r2, r2, #3
 80019f6:	465b      	mov	r3, fp
 80019f8:	01db      	lsls	r3, r3, #7
 80019fa:	d509      	bpl.n	8001a10 <__aeabi_ddiv+0x100>
 80019fc:	4659      	mov	r1, fp
 80019fe:	4b67      	ldr	r3, [pc, #412]	; (8001b9c <__aeabi_ddiv+0x28c>)
 8001a00:	4019      	ands	r1, r3
 8001a02:	468b      	mov	fp, r1
 8001a04:	2180      	movs	r1, #128	; 0x80
 8001a06:	00c9      	lsls	r1, r1, #3
 8001a08:	468c      	mov	ip, r1
 8001a0a:	9b00      	ldr	r3, [sp, #0]
 8001a0c:	4463      	add	r3, ip
 8001a0e:	001c      	movs	r4, r3
 8001a10:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <__aeabi_ddiv+0x290>)
 8001a12:	429c      	cmp	r4, r3
 8001a14:	dc07      	bgt.n	8001a26 <__aeabi_ddiv+0x116>
 8001a16:	465b      	mov	r3, fp
 8001a18:	0564      	lsls	r4, r4, #21
 8001a1a:	075f      	lsls	r7, r3, #29
 8001a1c:	025b      	lsls	r3, r3, #9
 8001a1e:	4317      	orrs	r7, r2
 8001a20:	0b1b      	lsrs	r3, r3, #12
 8001a22:	0d62      	lsrs	r2, r4, #21
 8001a24:	e002      	b.n	8001a2c <__aeabi_ddiv+0x11c>
 8001a26:	2300      	movs	r3, #0
 8001a28:	2700      	movs	r7, #0
 8001a2a:	4a58      	ldr	r2, [pc, #352]	; (8001b8c <__aeabi_ddiv+0x27c>)
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	031b      	lsls	r3, r3, #12
 8001a30:	0b1c      	lsrs	r4, r3, #12
 8001a32:	0d0b      	lsrs	r3, r1, #20
 8001a34:	051b      	lsls	r3, r3, #20
 8001a36:	4323      	orrs	r3, r4
 8001a38:	0514      	lsls	r4, r2, #20
 8001a3a:	4a5a      	ldr	r2, [pc, #360]	; (8001ba4 <__aeabi_ddiv+0x294>)
 8001a3c:	0038      	movs	r0, r7
 8001a3e:	4013      	ands	r3, r2
 8001a40:	431c      	orrs	r4, r3
 8001a42:	4653      	mov	r3, sl
 8001a44:	0064      	lsls	r4, r4, #1
 8001a46:	07db      	lsls	r3, r3, #31
 8001a48:	0864      	lsrs	r4, r4, #1
 8001a4a:	431c      	orrs	r4, r3
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	b005      	add	sp, #20
 8001a50:	bc3c      	pop	{r2, r3, r4, r5}
 8001a52:	4690      	mov	r8, r2
 8001a54:	4699      	mov	r9, r3
 8001a56:	46a2      	mov	sl, r4
 8001a58:	46ab      	mov	fp, r5
 8001a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4252      	negs	r2, r2
 8001a60:	2301      	movs	r3, #1
 8001a62:	1b1b      	subs	r3, r3, r4
 8001a64:	2b38      	cmp	r3, #56	; 0x38
 8001a66:	dc00      	bgt.n	8001a6a <__aeabi_ddiv+0x15a>
 8001a68:	e1ad      	b.n	8001dc6 <__aeabi_ddiv+0x4b6>
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2700      	movs	r7, #0
 8001a70:	e7dc      	b.n	8001a2c <__aeabi_ddiv+0x11c>
 8001a72:	465b      	mov	r3, fp
 8001a74:	4333      	orrs	r3, r6
 8001a76:	4699      	mov	r9, r3
 8001a78:	d05e      	beq.n	8001b38 <__aeabi_ddiv+0x228>
 8001a7a:	2e00      	cmp	r6, #0
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_ddiv+0x170>
 8001a7e:	e18a      	b.n	8001d96 <__aeabi_ddiv+0x486>
 8001a80:	0030      	movs	r0, r6
 8001a82:	f001 f9fd 	bl	8002e80 <__clzsi2>
 8001a86:	0003      	movs	r3, r0
 8001a88:	3b0b      	subs	r3, #11
 8001a8a:	2b1c      	cmp	r3, #28
 8001a8c:	dd00      	ble.n	8001a90 <__aeabi_ddiv+0x180>
 8001a8e:	e17b      	b.n	8001d88 <__aeabi_ddiv+0x478>
 8001a90:	221d      	movs	r2, #29
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	465a      	mov	r2, fp
 8001a96:	0001      	movs	r1, r0
 8001a98:	40da      	lsrs	r2, r3
 8001a9a:	3908      	subs	r1, #8
 8001a9c:	408e      	lsls	r6, r1
 8001a9e:	0013      	movs	r3, r2
 8001aa0:	465f      	mov	r7, fp
 8001aa2:	4333      	orrs	r3, r6
 8001aa4:	4699      	mov	r9, r3
 8001aa6:	408f      	lsls	r7, r1
 8001aa8:	4b3f      	ldr	r3, [pc, #252]	; (8001ba8 <__aeabi_ddiv+0x298>)
 8001aaa:	2600      	movs	r6, #0
 8001aac:	1a1b      	subs	r3, r3, r0
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	e752      	b.n	800195c <__aeabi_ddiv+0x4c>
 8001ab6:	4641      	mov	r1, r8
 8001ab8:	4653      	mov	r3, sl
 8001aba:	430b      	orrs	r3, r1
 8001abc:	493b      	ldr	r1, [pc, #236]	; (8001bac <__aeabi_ddiv+0x29c>)
 8001abe:	469b      	mov	fp, r3
 8001ac0:	468c      	mov	ip, r1
 8001ac2:	9b00      	ldr	r3, [sp, #0]
 8001ac4:	4463      	add	r3, ip
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	465b      	mov	r3, fp
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d13b      	bne.n	8001b46 <__aeabi_ddiv+0x236>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	431e      	orrs	r6, r3
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	e761      	b.n	800199c <__aeabi_ddiv+0x8c>
 8001ad8:	4643      	mov	r3, r8
 8001ada:	4313      	orrs	r3, r2
 8001adc:	469b      	mov	fp, r3
 8001ade:	d037      	beq.n	8001b50 <__aeabi_ddiv+0x240>
 8001ae0:	4643      	mov	r3, r8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d100      	bne.n	8001ae8 <__aeabi_ddiv+0x1d8>
 8001ae6:	e162      	b.n	8001dae <__aeabi_ddiv+0x49e>
 8001ae8:	4640      	mov	r0, r8
 8001aea:	f001 f9c9 	bl	8002e80 <__clzsi2>
 8001aee:	0003      	movs	r3, r0
 8001af0:	3b0b      	subs	r3, #11
 8001af2:	2b1c      	cmp	r3, #28
 8001af4:	dd00      	ble.n	8001af8 <__aeabi_ddiv+0x1e8>
 8001af6:	e153      	b.n	8001da0 <__aeabi_ddiv+0x490>
 8001af8:	0002      	movs	r2, r0
 8001afa:	4641      	mov	r1, r8
 8001afc:	3a08      	subs	r2, #8
 8001afe:	4091      	lsls	r1, r2
 8001b00:	4688      	mov	r8, r1
 8001b02:	211d      	movs	r1, #29
 8001b04:	1acb      	subs	r3, r1, r3
 8001b06:	4651      	mov	r1, sl
 8001b08:	40d9      	lsrs	r1, r3
 8001b0a:	000b      	movs	r3, r1
 8001b0c:	4641      	mov	r1, r8
 8001b0e:	430b      	orrs	r3, r1
 8001b10:	469b      	mov	fp, r3
 8001b12:	4653      	mov	r3, sl
 8001b14:	4093      	lsls	r3, r2
 8001b16:	001a      	movs	r2, r3
 8001b18:	9b00      	ldr	r3, [sp, #0]
 8001b1a:	4925      	ldr	r1, [pc, #148]	; (8001bb0 <__aeabi_ddiv+0x2a0>)
 8001b1c:	469c      	mov	ip, r3
 8001b1e:	4460      	add	r0, ip
 8001b20:	0003      	movs	r3, r0
 8001b22:	468c      	mov	ip, r1
 8001b24:	4463      	add	r3, ip
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2100      	movs	r1, #0
 8001b2a:	e737      	b.n	800199c <__aeabi_ddiv+0x8c>
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	46b1      	mov	r9, r6
 8001b30:	9000      	str	r0, [sp, #0]
 8001b32:	260c      	movs	r6, #12
 8001b34:	9302      	str	r3, [sp, #8]
 8001b36:	e711      	b.n	800195c <__aeabi_ddiv+0x4c>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	2604      	movs	r6, #4
 8001b40:	2700      	movs	r7, #0
 8001b42:	9302      	str	r3, [sp, #8]
 8001b44:	e70a      	b.n	800195c <__aeabi_ddiv+0x4c>
 8001b46:	2303      	movs	r3, #3
 8001b48:	46c3      	mov	fp, r8
 8001b4a:	431e      	orrs	r6, r3
 8001b4c:	2103      	movs	r1, #3
 8001b4e:	e725      	b.n	800199c <__aeabi_ddiv+0x8c>
 8001b50:	3301      	adds	r3, #1
 8001b52:	431e      	orrs	r6, r3
 8001b54:	2200      	movs	r2, #0
 8001b56:	2101      	movs	r1, #1
 8001b58:	e720      	b.n	800199c <__aeabi_ddiv+0x8c>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	469a      	mov	sl, r3
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	2700      	movs	r7, #0
 8001b62:	031b      	lsls	r3, r3, #12
 8001b64:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <__aeabi_ddiv+0x27c>)
 8001b66:	e761      	b.n	8001a2c <__aeabi_ddiv+0x11c>
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	4649      	mov	r1, r9
 8001b6c:	031b      	lsls	r3, r3, #12
 8001b6e:	4219      	tst	r1, r3
 8001b70:	d100      	bne.n	8001b74 <__aeabi_ddiv+0x264>
 8001b72:	e0e2      	b.n	8001d3a <__aeabi_ddiv+0x42a>
 8001b74:	4659      	mov	r1, fp
 8001b76:	4219      	tst	r1, r3
 8001b78:	d000      	beq.n	8001b7c <__aeabi_ddiv+0x26c>
 8001b7a:	e0de      	b.n	8001d3a <__aeabi_ddiv+0x42a>
 8001b7c:	430b      	orrs	r3, r1
 8001b7e:	031b      	lsls	r3, r3, #12
 8001b80:	0017      	movs	r7, r2
 8001b82:	0b1b      	lsrs	r3, r3, #12
 8001b84:	46a2      	mov	sl, r4
 8001b86:	4a01      	ldr	r2, [pc, #4]	; (8001b8c <__aeabi_ddiv+0x27c>)
 8001b88:	e750      	b.n	8001a2c <__aeabi_ddiv+0x11c>
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	000007ff 	.word	0x000007ff
 8001b90:	fffffc01 	.word	0xfffffc01
 8001b94:	0801c940 	.word	0x0801c940
 8001b98:	000003ff 	.word	0x000003ff
 8001b9c:	feffffff 	.word	0xfeffffff
 8001ba0:	000007fe 	.word	0x000007fe
 8001ba4:	800fffff 	.word	0x800fffff
 8001ba8:	fffffc0d 	.word	0xfffffc0d
 8001bac:	fffff801 	.word	0xfffff801
 8001bb0:	000003f3 	.word	0x000003f3
 8001bb4:	45d9      	cmp	r9, fp
 8001bb6:	d900      	bls.n	8001bba <__aeabi_ddiv+0x2aa>
 8001bb8:	e0cb      	b.n	8001d52 <__aeabi_ddiv+0x442>
 8001bba:	d100      	bne.n	8001bbe <__aeabi_ddiv+0x2ae>
 8001bbc:	e0c6      	b.n	8001d4c <__aeabi_ddiv+0x43c>
 8001bbe:	003c      	movs	r4, r7
 8001bc0:	4648      	mov	r0, r9
 8001bc2:	2700      	movs	r7, #0
 8001bc4:	9b00      	ldr	r3, [sp, #0]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	465b      	mov	r3, fp
 8001bcc:	0e16      	lsrs	r6, r2, #24
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	431e      	orrs	r6, r3
 8001bd2:	0213      	lsls	r3, r2, #8
 8001bd4:	4698      	mov	r8, r3
 8001bd6:	0433      	lsls	r3, r6, #16
 8001bd8:	0c1b      	lsrs	r3, r3, #16
 8001bda:	4699      	mov	r9, r3
 8001bdc:	0c31      	lsrs	r1, r6, #16
 8001bde:	9101      	str	r1, [sp, #4]
 8001be0:	f7fe fb18 	bl	8000214 <__aeabi_uidivmod>
 8001be4:	464a      	mov	r2, r9
 8001be6:	4342      	muls	r2, r0
 8001be8:	040b      	lsls	r3, r1, #16
 8001bea:	0c21      	lsrs	r1, r4, #16
 8001bec:	0005      	movs	r5, r0
 8001bee:	4319      	orrs	r1, r3
 8001bf0:	428a      	cmp	r2, r1
 8001bf2:	d907      	bls.n	8001c04 <__aeabi_ddiv+0x2f4>
 8001bf4:	1989      	adds	r1, r1, r6
 8001bf6:	3d01      	subs	r5, #1
 8001bf8:	428e      	cmp	r6, r1
 8001bfa:	d803      	bhi.n	8001c04 <__aeabi_ddiv+0x2f4>
 8001bfc:	428a      	cmp	r2, r1
 8001bfe:	d901      	bls.n	8001c04 <__aeabi_ddiv+0x2f4>
 8001c00:	1e85      	subs	r5, r0, #2
 8001c02:	1989      	adds	r1, r1, r6
 8001c04:	1a88      	subs	r0, r1, r2
 8001c06:	9901      	ldr	r1, [sp, #4]
 8001c08:	f7fe fb04 	bl	8000214 <__aeabi_uidivmod>
 8001c0c:	0409      	lsls	r1, r1, #16
 8001c0e:	468c      	mov	ip, r1
 8001c10:	464a      	mov	r2, r9
 8001c12:	0421      	lsls	r1, r4, #16
 8001c14:	4664      	mov	r4, ip
 8001c16:	4342      	muls	r2, r0
 8001c18:	0c09      	lsrs	r1, r1, #16
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	4321      	orrs	r1, r4
 8001c1e:	428a      	cmp	r2, r1
 8001c20:	d904      	bls.n	8001c2c <__aeabi_ddiv+0x31c>
 8001c22:	1989      	adds	r1, r1, r6
 8001c24:	3b01      	subs	r3, #1
 8001c26:	428e      	cmp	r6, r1
 8001c28:	d800      	bhi.n	8001c2c <__aeabi_ddiv+0x31c>
 8001c2a:	e0f1      	b.n	8001e10 <__aeabi_ddiv+0x500>
 8001c2c:	042d      	lsls	r5, r5, #16
 8001c2e:	431d      	orrs	r5, r3
 8001c30:	46ab      	mov	fp, r5
 8001c32:	4643      	mov	r3, r8
 8001c34:	1a89      	subs	r1, r1, r2
 8001c36:	4642      	mov	r2, r8
 8001c38:	0c28      	lsrs	r0, r5, #16
 8001c3a:	0412      	lsls	r2, r2, #16
 8001c3c:	0c1d      	lsrs	r5, r3, #16
 8001c3e:	465b      	mov	r3, fp
 8001c40:	0c14      	lsrs	r4, r2, #16
 8001c42:	0022      	movs	r2, r4
 8001c44:	041b      	lsls	r3, r3, #16
 8001c46:	0c1b      	lsrs	r3, r3, #16
 8001c48:	435a      	muls	r2, r3
 8001c4a:	9403      	str	r4, [sp, #12]
 8001c4c:	436b      	muls	r3, r5
 8001c4e:	4344      	muls	r4, r0
 8001c50:	9502      	str	r5, [sp, #8]
 8001c52:	4368      	muls	r0, r5
 8001c54:	191b      	adds	r3, r3, r4
 8001c56:	0c15      	lsrs	r5, r2, #16
 8001c58:	18eb      	adds	r3, r5, r3
 8001c5a:	429c      	cmp	r4, r3
 8001c5c:	d903      	bls.n	8001c66 <__aeabi_ddiv+0x356>
 8001c5e:	2480      	movs	r4, #128	; 0x80
 8001c60:	0264      	lsls	r4, r4, #9
 8001c62:	46a4      	mov	ip, r4
 8001c64:	4460      	add	r0, ip
 8001c66:	0c1c      	lsrs	r4, r3, #16
 8001c68:	0415      	lsls	r5, r2, #16
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	0c2d      	lsrs	r5, r5, #16
 8001c6e:	1820      	adds	r0, r4, r0
 8001c70:	195d      	adds	r5, r3, r5
 8001c72:	4281      	cmp	r1, r0
 8001c74:	d377      	bcc.n	8001d66 <__aeabi_ddiv+0x456>
 8001c76:	d073      	beq.n	8001d60 <__aeabi_ddiv+0x450>
 8001c78:	1a0c      	subs	r4, r1, r0
 8001c7a:	4aa2      	ldr	r2, [pc, #648]	; (8001f04 <__aeabi_ddiv+0x5f4>)
 8001c7c:	1b7d      	subs	r5, r7, r5
 8001c7e:	42af      	cmp	r7, r5
 8001c80:	41bf      	sbcs	r7, r7
 8001c82:	4694      	mov	ip, r2
 8001c84:	9b00      	ldr	r3, [sp, #0]
 8001c86:	427f      	negs	r7, r7
 8001c88:	4463      	add	r3, ip
 8001c8a:	1be0      	subs	r0, r4, r7
 8001c8c:	001c      	movs	r4, r3
 8001c8e:	4286      	cmp	r6, r0
 8001c90:	d100      	bne.n	8001c94 <__aeabi_ddiv+0x384>
 8001c92:	e0db      	b.n	8001e4c <__aeabi_ddiv+0x53c>
 8001c94:	9901      	ldr	r1, [sp, #4]
 8001c96:	f7fe fabd 	bl	8000214 <__aeabi_uidivmod>
 8001c9a:	464a      	mov	r2, r9
 8001c9c:	4342      	muls	r2, r0
 8001c9e:	040b      	lsls	r3, r1, #16
 8001ca0:	0c29      	lsrs	r1, r5, #16
 8001ca2:	0007      	movs	r7, r0
 8001ca4:	4319      	orrs	r1, r3
 8001ca6:	428a      	cmp	r2, r1
 8001ca8:	d907      	bls.n	8001cba <__aeabi_ddiv+0x3aa>
 8001caa:	1989      	adds	r1, r1, r6
 8001cac:	3f01      	subs	r7, #1
 8001cae:	428e      	cmp	r6, r1
 8001cb0:	d803      	bhi.n	8001cba <__aeabi_ddiv+0x3aa>
 8001cb2:	428a      	cmp	r2, r1
 8001cb4:	d901      	bls.n	8001cba <__aeabi_ddiv+0x3aa>
 8001cb6:	1e87      	subs	r7, r0, #2
 8001cb8:	1989      	adds	r1, r1, r6
 8001cba:	1a88      	subs	r0, r1, r2
 8001cbc:	9901      	ldr	r1, [sp, #4]
 8001cbe:	f7fe faa9 	bl	8000214 <__aeabi_uidivmod>
 8001cc2:	0409      	lsls	r1, r1, #16
 8001cc4:	464a      	mov	r2, r9
 8001cc6:	4689      	mov	r9, r1
 8001cc8:	0429      	lsls	r1, r5, #16
 8001cca:	464d      	mov	r5, r9
 8001ccc:	4342      	muls	r2, r0
 8001cce:	0c09      	lsrs	r1, r1, #16
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	4329      	orrs	r1, r5
 8001cd4:	428a      	cmp	r2, r1
 8001cd6:	d907      	bls.n	8001ce8 <__aeabi_ddiv+0x3d8>
 8001cd8:	1989      	adds	r1, r1, r6
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	428e      	cmp	r6, r1
 8001cde:	d803      	bhi.n	8001ce8 <__aeabi_ddiv+0x3d8>
 8001ce0:	428a      	cmp	r2, r1
 8001ce2:	d901      	bls.n	8001ce8 <__aeabi_ddiv+0x3d8>
 8001ce4:	1e83      	subs	r3, r0, #2
 8001ce6:	1989      	adds	r1, r1, r6
 8001ce8:	043f      	lsls	r7, r7, #16
 8001cea:	1a89      	subs	r1, r1, r2
 8001cec:	003a      	movs	r2, r7
 8001cee:	9f03      	ldr	r7, [sp, #12]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	0038      	movs	r0, r7
 8001cf4:	0413      	lsls	r3, r2, #16
 8001cf6:	0c1b      	lsrs	r3, r3, #16
 8001cf8:	4358      	muls	r0, r3
 8001cfa:	4681      	mov	r9, r0
 8001cfc:	9802      	ldr	r0, [sp, #8]
 8001cfe:	0c15      	lsrs	r5, r2, #16
 8001d00:	436f      	muls	r7, r5
 8001d02:	4343      	muls	r3, r0
 8001d04:	4345      	muls	r5, r0
 8001d06:	4648      	mov	r0, r9
 8001d08:	0c00      	lsrs	r0, r0, #16
 8001d0a:	4684      	mov	ip, r0
 8001d0c:	19db      	adds	r3, r3, r7
 8001d0e:	4463      	add	r3, ip
 8001d10:	429f      	cmp	r7, r3
 8001d12:	d903      	bls.n	8001d1c <__aeabi_ddiv+0x40c>
 8001d14:	2080      	movs	r0, #128	; 0x80
 8001d16:	0240      	lsls	r0, r0, #9
 8001d18:	4684      	mov	ip, r0
 8001d1a:	4465      	add	r5, ip
 8001d1c:	4648      	mov	r0, r9
 8001d1e:	0c1f      	lsrs	r7, r3, #16
 8001d20:	0400      	lsls	r0, r0, #16
 8001d22:	041b      	lsls	r3, r3, #16
 8001d24:	0c00      	lsrs	r0, r0, #16
 8001d26:	197d      	adds	r5, r7, r5
 8001d28:	1818      	adds	r0, r3, r0
 8001d2a:	42a9      	cmp	r1, r5
 8001d2c:	d200      	bcs.n	8001d30 <__aeabi_ddiv+0x420>
 8001d2e:	e084      	b.n	8001e3a <__aeabi_ddiv+0x52a>
 8001d30:	d100      	bne.n	8001d34 <__aeabi_ddiv+0x424>
 8001d32:	e07f      	b.n	8001e34 <__aeabi_ddiv+0x524>
 8001d34:	2301      	movs	r3, #1
 8001d36:	431a      	orrs	r2, r3
 8001d38:	e657      	b.n	80019ea <__aeabi_ddiv+0xda>
 8001d3a:	2380      	movs	r3, #128	; 0x80
 8001d3c:	464a      	mov	r2, r9
 8001d3e:	031b      	lsls	r3, r3, #12
 8001d40:	4313      	orrs	r3, r2
 8001d42:	031b      	lsls	r3, r3, #12
 8001d44:	0b1b      	lsrs	r3, r3, #12
 8001d46:	46aa      	mov	sl, r5
 8001d48:	4a6f      	ldr	r2, [pc, #444]	; (8001f08 <__aeabi_ddiv+0x5f8>)
 8001d4a:	e66f      	b.n	8001a2c <__aeabi_ddiv+0x11c>
 8001d4c:	42ba      	cmp	r2, r7
 8001d4e:	d900      	bls.n	8001d52 <__aeabi_ddiv+0x442>
 8001d50:	e735      	b.n	8001bbe <__aeabi_ddiv+0x2ae>
 8001d52:	464b      	mov	r3, r9
 8001d54:	07dc      	lsls	r4, r3, #31
 8001d56:	0858      	lsrs	r0, r3, #1
 8001d58:	087b      	lsrs	r3, r7, #1
 8001d5a:	431c      	orrs	r4, r3
 8001d5c:	07ff      	lsls	r7, r7, #31
 8001d5e:	e734      	b.n	8001bca <__aeabi_ddiv+0x2ba>
 8001d60:	2400      	movs	r4, #0
 8001d62:	42af      	cmp	r7, r5
 8001d64:	d289      	bcs.n	8001c7a <__aeabi_ddiv+0x36a>
 8001d66:	4447      	add	r7, r8
 8001d68:	4547      	cmp	r7, r8
 8001d6a:	41a4      	sbcs	r4, r4
 8001d6c:	465b      	mov	r3, fp
 8001d6e:	4264      	negs	r4, r4
 8001d70:	19a4      	adds	r4, r4, r6
 8001d72:	1864      	adds	r4, r4, r1
 8001d74:	3b01      	subs	r3, #1
 8001d76:	42a6      	cmp	r6, r4
 8001d78:	d21e      	bcs.n	8001db8 <__aeabi_ddiv+0x4a8>
 8001d7a:	42a0      	cmp	r0, r4
 8001d7c:	d86d      	bhi.n	8001e5a <__aeabi_ddiv+0x54a>
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_ddiv+0x472>
 8001d80:	e0b6      	b.n	8001ef0 <__aeabi_ddiv+0x5e0>
 8001d82:	1a24      	subs	r4, r4, r0
 8001d84:	469b      	mov	fp, r3
 8001d86:	e778      	b.n	8001c7a <__aeabi_ddiv+0x36a>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	465a      	mov	r2, fp
 8001d8c:	3b28      	subs	r3, #40	; 0x28
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	2700      	movs	r7, #0
 8001d92:	4691      	mov	r9, r2
 8001d94:	e688      	b.n	8001aa8 <__aeabi_ddiv+0x198>
 8001d96:	4658      	mov	r0, fp
 8001d98:	f001 f872 	bl	8002e80 <__clzsi2>
 8001d9c:	3020      	adds	r0, #32
 8001d9e:	e672      	b.n	8001a86 <__aeabi_ddiv+0x176>
 8001da0:	0003      	movs	r3, r0
 8001da2:	4652      	mov	r2, sl
 8001da4:	3b28      	subs	r3, #40	; 0x28
 8001da6:	409a      	lsls	r2, r3
 8001da8:	4693      	mov	fp, r2
 8001daa:	2200      	movs	r2, #0
 8001dac:	e6b4      	b.n	8001b18 <__aeabi_ddiv+0x208>
 8001dae:	4650      	mov	r0, sl
 8001db0:	f001 f866 	bl	8002e80 <__clzsi2>
 8001db4:	3020      	adds	r0, #32
 8001db6:	e69a      	b.n	8001aee <__aeabi_ddiv+0x1de>
 8001db8:	42a6      	cmp	r6, r4
 8001dba:	d1e2      	bne.n	8001d82 <__aeabi_ddiv+0x472>
 8001dbc:	45b8      	cmp	r8, r7
 8001dbe:	d9dc      	bls.n	8001d7a <__aeabi_ddiv+0x46a>
 8001dc0:	1a34      	subs	r4, r6, r0
 8001dc2:	469b      	mov	fp, r3
 8001dc4:	e759      	b.n	8001c7a <__aeabi_ddiv+0x36a>
 8001dc6:	2b1f      	cmp	r3, #31
 8001dc8:	dc65      	bgt.n	8001e96 <__aeabi_ddiv+0x586>
 8001dca:	4c50      	ldr	r4, [pc, #320]	; (8001f0c <__aeabi_ddiv+0x5fc>)
 8001dcc:	9900      	ldr	r1, [sp, #0]
 8001dce:	46a4      	mov	ip, r4
 8001dd0:	465c      	mov	r4, fp
 8001dd2:	4461      	add	r1, ip
 8001dd4:	0008      	movs	r0, r1
 8001dd6:	408c      	lsls	r4, r1
 8001dd8:	0011      	movs	r1, r2
 8001dda:	4082      	lsls	r2, r0
 8001ddc:	40d9      	lsrs	r1, r3
 8001dde:	1e50      	subs	r0, r2, #1
 8001de0:	4182      	sbcs	r2, r0
 8001de2:	430c      	orrs	r4, r1
 8001de4:	4314      	orrs	r4, r2
 8001de6:	465a      	mov	r2, fp
 8001de8:	40da      	lsrs	r2, r3
 8001dea:	0013      	movs	r3, r2
 8001dec:	0762      	lsls	r2, r4, #29
 8001dee:	d009      	beq.n	8001e04 <__aeabi_ddiv+0x4f4>
 8001df0:	220f      	movs	r2, #15
 8001df2:	4022      	ands	r2, r4
 8001df4:	2a04      	cmp	r2, #4
 8001df6:	d005      	beq.n	8001e04 <__aeabi_ddiv+0x4f4>
 8001df8:	0022      	movs	r2, r4
 8001dfa:	1d14      	adds	r4, r2, #4
 8001dfc:	4294      	cmp	r4, r2
 8001dfe:	4189      	sbcs	r1, r1
 8001e00:	4249      	negs	r1, r1
 8001e02:	185b      	adds	r3, r3, r1
 8001e04:	021a      	lsls	r2, r3, #8
 8001e06:	d562      	bpl.n	8001ece <__aeabi_ddiv+0x5be>
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2700      	movs	r7, #0
 8001e0e:	e60d      	b.n	8001a2c <__aeabi_ddiv+0x11c>
 8001e10:	428a      	cmp	r2, r1
 8001e12:	d800      	bhi.n	8001e16 <__aeabi_ddiv+0x506>
 8001e14:	e70a      	b.n	8001c2c <__aeabi_ddiv+0x31c>
 8001e16:	1e83      	subs	r3, r0, #2
 8001e18:	1989      	adds	r1, r1, r6
 8001e1a:	e707      	b.n	8001c2c <__aeabi_ddiv+0x31c>
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d100      	bne.n	8001e26 <__aeabi_ddiv+0x516>
 8001e24:	e5e6      	b.n	80019f4 <__aeabi_ddiv+0xe4>
 8001e26:	1d17      	adds	r7, r2, #4
 8001e28:	4297      	cmp	r7, r2
 8001e2a:	4192      	sbcs	r2, r2
 8001e2c:	4253      	negs	r3, r2
 8001e2e:	449b      	add	fp, r3
 8001e30:	08fa      	lsrs	r2, r7, #3
 8001e32:	e5e0      	b.n	80019f6 <__aeabi_ddiv+0xe6>
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d100      	bne.n	8001e3a <__aeabi_ddiv+0x52a>
 8001e38:	e5d7      	b.n	80019ea <__aeabi_ddiv+0xda>
 8001e3a:	1871      	adds	r1, r6, r1
 8001e3c:	1e53      	subs	r3, r2, #1
 8001e3e:	42b1      	cmp	r1, r6
 8001e40:	d327      	bcc.n	8001e92 <__aeabi_ddiv+0x582>
 8001e42:	42a9      	cmp	r1, r5
 8001e44:	d315      	bcc.n	8001e72 <__aeabi_ddiv+0x562>
 8001e46:	d058      	beq.n	8001efa <__aeabi_ddiv+0x5ea>
 8001e48:	001a      	movs	r2, r3
 8001e4a:	e773      	b.n	8001d34 <__aeabi_ddiv+0x424>
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	dc00      	bgt.n	8001e52 <__aeabi_ddiv+0x542>
 8001e50:	e604      	b.n	8001a5c <__aeabi_ddiv+0x14c>
 8001e52:	2301      	movs	r3, #1
 8001e54:	2200      	movs	r2, #0
 8001e56:	449b      	add	fp, r3
 8001e58:	e5cd      	b.n	80019f6 <__aeabi_ddiv+0xe6>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	4447      	add	r7, r8
 8001e5e:	4547      	cmp	r7, r8
 8001e60:	4189      	sbcs	r1, r1
 8001e62:	425b      	negs	r3, r3
 8001e64:	469c      	mov	ip, r3
 8001e66:	4249      	negs	r1, r1
 8001e68:	1989      	adds	r1, r1, r6
 8001e6a:	190c      	adds	r4, r1, r4
 8001e6c:	44e3      	add	fp, ip
 8001e6e:	1a24      	subs	r4, r4, r0
 8001e70:	e703      	b.n	8001c7a <__aeabi_ddiv+0x36a>
 8001e72:	4643      	mov	r3, r8
 8001e74:	005f      	lsls	r7, r3, #1
 8001e76:	4547      	cmp	r7, r8
 8001e78:	419b      	sbcs	r3, r3
 8001e7a:	46b8      	mov	r8, r7
 8001e7c:	425b      	negs	r3, r3
 8001e7e:	199e      	adds	r6, r3, r6
 8001e80:	3a02      	subs	r2, #2
 8001e82:	1989      	adds	r1, r1, r6
 8001e84:	42a9      	cmp	r1, r5
 8001e86:	d000      	beq.n	8001e8a <__aeabi_ddiv+0x57a>
 8001e88:	e754      	b.n	8001d34 <__aeabi_ddiv+0x424>
 8001e8a:	4540      	cmp	r0, r8
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_ddiv+0x580>
 8001e8e:	e751      	b.n	8001d34 <__aeabi_ddiv+0x424>
 8001e90:	e5ab      	b.n	80019ea <__aeabi_ddiv+0xda>
 8001e92:	001a      	movs	r2, r3
 8001e94:	e7f6      	b.n	8001e84 <__aeabi_ddiv+0x574>
 8001e96:	211f      	movs	r1, #31
 8001e98:	465f      	mov	r7, fp
 8001e9a:	4249      	negs	r1, r1
 8001e9c:	1b0c      	subs	r4, r1, r4
 8001e9e:	40e7      	lsrs	r7, r4
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	d007      	beq.n	8001eb4 <__aeabi_ddiv+0x5a4>
 8001ea4:	491a      	ldr	r1, [pc, #104]	; (8001f10 <__aeabi_ddiv+0x600>)
 8001ea6:	9b00      	ldr	r3, [sp, #0]
 8001ea8:	468c      	mov	ip, r1
 8001eaa:	4463      	add	r3, ip
 8001eac:	0018      	movs	r0, r3
 8001eae:	465b      	mov	r3, fp
 8001eb0:	4083      	lsls	r3, r0
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	1e50      	subs	r0, r2, #1
 8001eb6:	4182      	sbcs	r2, r0
 8001eb8:	433a      	orrs	r2, r7
 8001eba:	2707      	movs	r7, #7
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	4017      	ands	r7, r2
 8001ec0:	d009      	beq.n	8001ed6 <__aeabi_ddiv+0x5c6>
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	4011      	ands	r1, r2
 8001ec8:	0014      	movs	r4, r2
 8001eca:	2904      	cmp	r1, #4
 8001ecc:	d195      	bne.n	8001dfa <__aeabi_ddiv+0x4ea>
 8001ece:	0022      	movs	r2, r4
 8001ed0:	075f      	lsls	r7, r3, #29
 8001ed2:	025b      	lsls	r3, r3, #9
 8001ed4:	0b1b      	lsrs	r3, r3, #12
 8001ed6:	08d2      	lsrs	r2, r2, #3
 8001ed8:	4317      	orrs	r7, r2
 8001eda:	2200      	movs	r2, #0
 8001edc:	e5a6      	b.n	8001a2c <__aeabi_ddiv+0x11c>
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	4659      	mov	r1, fp
 8001ee2:	031b      	lsls	r3, r3, #12
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	031b      	lsls	r3, r3, #12
 8001ee8:	0017      	movs	r7, r2
 8001eea:	0b1b      	lsrs	r3, r3, #12
 8001eec:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <__aeabi_ddiv+0x5f8>)
 8001eee:	e59d      	b.n	8001a2c <__aeabi_ddiv+0x11c>
 8001ef0:	42bd      	cmp	r5, r7
 8001ef2:	d8b2      	bhi.n	8001e5a <__aeabi_ddiv+0x54a>
 8001ef4:	469b      	mov	fp, r3
 8001ef6:	2400      	movs	r4, #0
 8001ef8:	e6bf      	b.n	8001c7a <__aeabi_ddiv+0x36a>
 8001efa:	4580      	cmp	r8, r0
 8001efc:	d3b9      	bcc.n	8001e72 <__aeabi_ddiv+0x562>
 8001efe:	001a      	movs	r2, r3
 8001f00:	e7c3      	b.n	8001e8a <__aeabi_ddiv+0x57a>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	000003ff 	.word	0x000003ff
 8001f08:	000007ff 	.word	0x000007ff
 8001f0c:	0000041e 	.word	0x0000041e
 8001f10:	0000043e 	.word	0x0000043e

08001f14 <__eqdf2>:
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	464f      	mov	r7, r9
 8001f18:	4646      	mov	r6, r8
 8001f1a:	46d6      	mov	lr, sl
 8001f1c:	4684      	mov	ip, r0
 8001f1e:	b5c0      	push	{r6, r7, lr}
 8001f20:	4680      	mov	r8, r0
 8001f22:	4e19      	ldr	r6, [pc, #100]	; (8001f88 <__eqdf2+0x74>)
 8001f24:	0318      	lsls	r0, r3, #12
 8001f26:	030f      	lsls	r7, r1, #12
 8001f28:	004d      	lsls	r5, r1, #1
 8001f2a:	0b00      	lsrs	r0, r0, #12
 8001f2c:	005c      	lsls	r4, r3, #1
 8001f2e:	4682      	mov	sl, r0
 8001f30:	0b3f      	lsrs	r7, r7, #12
 8001f32:	0d6d      	lsrs	r5, r5, #21
 8001f34:	0fc9      	lsrs	r1, r1, #31
 8001f36:	4691      	mov	r9, r2
 8001f38:	0d64      	lsrs	r4, r4, #21
 8001f3a:	0fdb      	lsrs	r3, r3, #31
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	42b5      	cmp	r5, r6
 8001f40:	d00a      	beq.n	8001f58 <__eqdf2+0x44>
 8001f42:	42b4      	cmp	r4, r6
 8001f44:	d003      	beq.n	8001f4e <__eqdf2+0x3a>
 8001f46:	42a5      	cmp	r5, r4
 8001f48:	d101      	bne.n	8001f4e <__eqdf2+0x3a>
 8001f4a:	4557      	cmp	r7, sl
 8001f4c:	d00c      	beq.n	8001f68 <__eqdf2+0x54>
 8001f4e:	bc1c      	pop	{r2, r3, r4}
 8001f50:	4690      	mov	r8, r2
 8001f52:	4699      	mov	r9, r3
 8001f54:	46a2      	mov	sl, r4
 8001f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f58:	4666      	mov	r6, ip
 8001f5a:	433e      	orrs	r6, r7
 8001f5c:	d1f7      	bne.n	8001f4e <__eqdf2+0x3a>
 8001f5e:	42ac      	cmp	r4, r5
 8001f60:	d1f5      	bne.n	8001f4e <__eqdf2+0x3a>
 8001f62:	4654      	mov	r4, sl
 8001f64:	4314      	orrs	r4, r2
 8001f66:	d1f2      	bne.n	8001f4e <__eqdf2+0x3a>
 8001f68:	2001      	movs	r0, #1
 8001f6a:	45c8      	cmp	r8, r9
 8001f6c:	d1ef      	bne.n	8001f4e <__eqdf2+0x3a>
 8001f6e:	4299      	cmp	r1, r3
 8001f70:	d007      	beq.n	8001f82 <__eqdf2+0x6e>
 8001f72:	2d00      	cmp	r5, #0
 8001f74:	d1eb      	bne.n	8001f4e <__eqdf2+0x3a>
 8001f76:	4663      	mov	r3, ip
 8001f78:	431f      	orrs	r7, r3
 8001f7a:	0038      	movs	r0, r7
 8001f7c:	1e47      	subs	r7, r0, #1
 8001f7e:	41b8      	sbcs	r0, r7
 8001f80:	e7e5      	b.n	8001f4e <__eqdf2+0x3a>
 8001f82:	2000      	movs	r0, #0
 8001f84:	e7e3      	b.n	8001f4e <__eqdf2+0x3a>
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	000007ff 	.word	0x000007ff

08001f8c <__gedf2>:
 8001f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8e:	464f      	mov	r7, r9
 8001f90:	4646      	mov	r6, r8
 8001f92:	46d6      	mov	lr, sl
 8001f94:	004d      	lsls	r5, r1, #1
 8001f96:	b5c0      	push	{r6, r7, lr}
 8001f98:	030e      	lsls	r6, r1, #12
 8001f9a:	0fc9      	lsrs	r1, r1, #31
 8001f9c:	468a      	mov	sl, r1
 8001f9e:	492c      	ldr	r1, [pc, #176]	; (8002050 <__gedf2+0xc4>)
 8001fa0:	031f      	lsls	r7, r3, #12
 8001fa2:	005c      	lsls	r4, r3, #1
 8001fa4:	4680      	mov	r8, r0
 8001fa6:	0b36      	lsrs	r6, r6, #12
 8001fa8:	0d6d      	lsrs	r5, r5, #21
 8001faa:	4691      	mov	r9, r2
 8001fac:	0b3f      	lsrs	r7, r7, #12
 8001fae:	0d64      	lsrs	r4, r4, #21
 8001fb0:	0fdb      	lsrs	r3, r3, #31
 8001fb2:	428d      	cmp	r5, r1
 8001fb4:	d01e      	beq.n	8001ff4 <__gedf2+0x68>
 8001fb6:	428c      	cmp	r4, r1
 8001fb8:	d016      	beq.n	8001fe8 <__gedf2+0x5c>
 8001fba:	2d00      	cmp	r5, #0
 8001fbc:	d11e      	bne.n	8001ffc <__gedf2+0x70>
 8001fbe:	4330      	orrs	r0, r6
 8001fc0:	4684      	mov	ip, r0
 8001fc2:	2c00      	cmp	r4, #0
 8001fc4:	d101      	bne.n	8001fca <__gedf2+0x3e>
 8001fc6:	433a      	orrs	r2, r7
 8001fc8:	d023      	beq.n	8002012 <__gedf2+0x86>
 8001fca:	4662      	mov	r2, ip
 8001fcc:	2a00      	cmp	r2, #0
 8001fce:	d01a      	beq.n	8002006 <__gedf2+0x7a>
 8001fd0:	459a      	cmp	sl, r3
 8001fd2:	d029      	beq.n	8002028 <__gedf2+0x9c>
 8001fd4:	4651      	mov	r1, sl
 8001fd6:	2002      	movs	r0, #2
 8001fd8:	3901      	subs	r1, #1
 8001fda:	4008      	ands	r0, r1
 8001fdc:	3801      	subs	r0, #1
 8001fde:	bc1c      	pop	{r2, r3, r4}
 8001fe0:	4690      	mov	r8, r2
 8001fe2:	4699      	mov	r9, r3
 8001fe4:	46a2      	mov	sl, r4
 8001fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fe8:	0039      	movs	r1, r7
 8001fea:	4311      	orrs	r1, r2
 8001fec:	d0e5      	beq.n	8001fba <__gedf2+0x2e>
 8001fee:	2002      	movs	r0, #2
 8001ff0:	4240      	negs	r0, r0
 8001ff2:	e7f4      	b.n	8001fde <__gedf2+0x52>
 8001ff4:	4330      	orrs	r0, r6
 8001ff6:	d1fa      	bne.n	8001fee <__gedf2+0x62>
 8001ff8:	42ac      	cmp	r4, r5
 8001ffa:	d00f      	beq.n	800201c <__gedf2+0x90>
 8001ffc:	2c00      	cmp	r4, #0
 8001ffe:	d10f      	bne.n	8002020 <__gedf2+0x94>
 8002000:	433a      	orrs	r2, r7
 8002002:	d0e7      	beq.n	8001fd4 <__gedf2+0x48>
 8002004:	e00c      	b.n	8002020 <__gedf2+0x94>
 8002006:	2201      	movs	r2, #1
 8002008:	3b01      	subs	r3, #1
 800200a:	4393      	bics	r3, r2
 800200c:	0018      	movs	r0, r3
 800200e:	3001      	adds	r0, #1
 8002010:	e7e5      	b.n	8001fde <__gedf2+0x52>
 8002012:	4663      	mov	r3, ip
 8002014:	2000      	movs	r0, #0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0e1      	beq.n	8001fde <__gedf2+0x52>
 800201a:	e7db      	b.n	8001fd4 <__gedf2+0x48>
 800201c:	433a      	orrs	r2, r7
 800201e:	d1e6      	bne.n	8001fee <__gedf2+0x62>
 8002020:	459a      	cmp	sl, r3
 8002022:	d1d7      	bne.n	8001fd4 <__gedf2+0x48>
 8002024:	42a5      	cmp	r5, r4
 8002026:	dcd5      	bgt.n	8001fd4 <__gedf2+0x48>
 8002028:	42a5      	cmp	r5, r4
 800202a:	db05      	blt.n	8002038 <__gedf2+0xac>
 800202c:	42be      	cmp	r6, r7
 800202e:	d8d1      	bhi.n	8001fd4 <__gedf2+0x48>
 8002030:	d008      	beq.n	8002044 <__gedf2+0xb8>
 8002032:	2000      	movs	r0, #0
 8002034:	42be      	cmp	r6, r7
 8002036:	d2d2      	bcs.n	8001fde <__gedf2+0x52>
 8002038:	4650      	mov	r0, sl
 800203a:	2301      	movs	r3, #1
 800203c:	3801      	subs	r0, #1
 800203e:	4398      	bics	r0, r3
 8002040:	3001      	adds	r0, #1
 8002042:	e7cc      	b.n	8001fde <__gedf2+0x52>
 8002044:	45c8      	cmp	r8, r9
 8002046:	d8c5      	bhi.n	8001fd4 <__gedf2+0x48>
 8002048:	2000      	movs	r0, #0
 800204a:	45c8      	cmp	r8, r9
 800204c:	d3f4      	bcc.n	8002038 <__gedf2+0xac>
 800204e:	e7c6      	b.n	8001fde <__gedf2+0x52>
 8002050:	000007ff 	.word	0x000007ff

08002054 <__ledf2>:
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002056:	464f      	mov	r7, r9
 8002058:	4646      	mov	r6, r8
 800205a:	46d6      	mov	lr, sl
 800205c:	004d      	lsls	r5, r1, #1
 800205e:	b5c0      	push	{r6, r7, lr}
 8002060:	030e      	lsls	r6, r1, #12
 8002062:	0fc9      	lsrs	r1, r1, #31
 8002064:	468a      	mov	sl, r1
 8002066:	492e      	ldr	r1, [pc, #184]	; (8002120 <__ledf2+0xcc>)
 8002068:	031f      	lsls	r7, r3, #12
 800206a:	005c      	lsls	r4, r3, #1
 800206c:	4680      	mov	r8, r0
 800206e:	0b36      	lsrs	r6, r6, #12
 8002070:	0d6d      	lsrs	r5, r5, #21
 8002072:	4691      	mov	r9, r2
 8002074:	0b3f      	lsrs	r7, r7, #12
 8002076:	0d64      	lsrs	r4, r4, #21
 8002078:	0fdb      	lsrs	r3, r3, #31
 800207a:	428d      	cmp	r5, r1
 800207c:	d018      	beq.n	80020b0 <__ledf2+0x5c>
 800207e:	428c      	cmp	r4, r1
 8002080:	d011      	beq.n	80020a6 <__ledf2+0x52>
 8002082:	2d00      	cmp	r5, #0
 8002084:	d118      	bne.n	80020b8 <__ledf2+0x64>
 8002086:	4330      	orrs	r0, r6
 8002088:	4684      	mov	ip, r0
 800208a:	2c00      	cmp	r4, #0
 800208c:	d11e      	bne.n	80020cc <__ledf2+0x78>
 800208e:	433a      	orrs	r2, r7
 8002090:	d11c      	bne.n	80020cc <__ledf2+0x78>
 8002092:	4663      	mov	r3, ip
 8002094:	2000      	movs	r0, #0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d030      	beq.n	80020fc <__ledf2+0xa8>
 800209a:	4651      	mov	r1, sl
 800209c:	2002      	movs	r0, #2
 800209e:	3901      	subs	r1, #1
 80020a0:	4008      	ands	r0, r1
 80020a2:	3801      	subs	r0, #1
 80020a4:	e02a      	b.n	80020fc <__ledf2+0xa8>
 80020a6:	0039      	movs	r1, r7
 80020a8:	4311      	orrs	r1, r2
 80020aa:	d0ea      	beq.n	8002082 <__ledf2+0x2e>
 80020ac:	2002      	movs	r0, #2
 80020ae:	e025      	b.n	80020fc <__ledf2+0xa8>
 80020b0:	4330      	orrs	r0, r6
 80020b2:	d1fb      	bne.n	80020ac <__ledf2+0x58>
 80020b4:	42ac      	cmp	r4, r5
 80020b6:	d026      	beq.n	8002106 <__ledf2+0xb2>
 80020b8:	2c00      	cmp	r4, #0
 80020ba:	d126      	bne.n	800210a <__ledf2+0xb6>
 80020bc:	433a      	orrs	r2, r7
 80020be:	d124      	bne.n	800210a <__ledf2+0xb6>
 80020c0:	4651      	mov	r1, sl
 80020c2:	2002      	movs	r0, #2
 80020c4:	3901      	subs	r1, #1
 80020c6:	4008      	ands	r0, r1
 80020c8:	3801      	subs	r0, #1
 80020ca:	e017      	b.n	80020fc <__ledf2+0xa8>
 80020cc:	4662      	mov	r2, ip
 80020ce:	2a00      	cmp	r2, #0
 80020d0:	d00f      	beq.n	80020f2 <__ledf2+0x9e>
 80020d2:	459a      	cmp	sl, r3
 80020d4:	d1e1      	bne.n	800209a <__ledf2+0x46>
 80020d6:	42a5      	cmp	r5, r4
 80020d8:	db05      	blt.n	80020e6 <__ledf2+0x92>
 80020da:	42be      	cmp	r6, r7
 80020dc:	d8dd      	bhi.n	800209a <__ledf2+0x46>
 80020de:	d019      	beq.n	8002114 <__ledf2+0xc0>
 80020e0:	2000      	movs	r0, #0
 80020e2:	42be      	cmp	r6, r7
 80020e4:	d20a      	bcs.n	80020fc <__ledf2+0xa8>
 80020e6:	4650      	mov	r0, sl
 80020e8:	2301      	movs	r3, #1
 80020ea:	3801      	subs	r0, #1
 80020ec:	4398      	bics	r0, r3
 80020ee:	3001      	adds	r0, #1
 80020f0:	e004      	b.n	80020fc <__ledf2+0xa8>
 80020f2:	2201      	movs	r2, #1
 80020f4:	3b01      	subs	r3, #1
 80020f6:	4393      	bics	r3, r2
 80020f8:	0018      	movs	r0, r3
 80020fa:	3001      	adds	r0, #1
 80020fc:	bc1c      	pop	{r2, r3, r4}
 80020fe:	4690      	mov	r8, r2
 8002100:	4699      	mov	r9, r3
 8002102:	46a2      	mov	sl, r4
 8002104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002106:	433a      	orrs	r2, r7
 8002108:	d1d0      	bne.n	80020ac <__ledf2+0x58>
 800210a:	459a      	cmp	sl, r3
 800210c:	d1c5      	bne.n	800209a <__ledf2+0x46>
 800210e:	42a5      	cmp	r5, r4
 8002110:	dcc3      	bgt.n	800209a <__ledf2+0x46>
 8002112:	e7e0      	b.n	80020d6 <__ledf2+0x82>
 8002114:	45c8      	cmp	r8, r9
 8002116:	d8c0      	bhi.n	800209a <__ledf2+0x46>
 8002118:	2000      	movs	r0, #0
 800211a:	45c8      	cmp	r8, r9
 800211c:	d3e3      	bcc.n	80020e6 <__ledf2+0x92>
 800211e:	e7ed      	b.n	80020fc <__ledf2+0xa8>
 8002120:	000007ff 	.word	0x000007ff

08002124 <__aeabi_dmul>:
 8002124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002126:	4657      	mov	r7, sl
 8002128:	46de      	mov	lr, fp
 800212a:	464e      	mov	r6, r9
 800212c:	4645      	mov	r5, r8
 800212e:	b5e0      	push	{r5, r6, r7, lr}
 8002130:	4683      	mov	fp, r0
 8002132:	0006      	movs	r6, r0
 8002134:	030f      	lsls	r7, r1, #12
 8002136:	0048      	lsls	r0, r1, #1
 8002138:	b087      	sub	sp, #28
 800213a:	4692      	mov	sl, r2
 800213c:	001d      	movs	r5, r3
 800213e:	0b3f      	lsrs	r7, r7, #12
 8002140:	0d40      	lsrs	r0, r0, #21
 8002142:	0fcc      	lsrs	r4, r1, #31
 8002144:	2800      	cmp	r0, #0
 8002146:	d100      	bne.n	800214a <__aeabi_dmul+0x26>
 8002148:	e06f      	b.n	800222a <__aeabi_dmul+0x106>
 800214a:	4bde      	ldr	r3, [pc, #888]	; (80024c4 <__aeabi_dmul+0x3a0>)
 800214c:	4298      	cmp	r0, r3
 800214e:	d038      	beq.n	80021c2 <__aeabi_dmul+0x9e>
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	00ff      	lsls	r7, r7, #3
 8002154:	041b      	lsls	r3, r3, #16
 8002156:	431f      	orrs	r7, r3
 8002158:	0f73      	lsrs	r3, r6, #29
 800215a:	433b      	orrs	r3, r7
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	4bda      	ldr	r3, [pc, #872]	; (80024c8 <__aeabi_dmul+0x3a4>)
 8002160:	2700      	movs	r7, #0
 8002162:	4699      	mov	r9, r3
 8002164:	2300      	movs	r3, #0
 8002166:	469b      	mov	fp, r3
 8002168:	00f6      	lsls	r6, r6, #3
 800216a:	4481      	add	r9, r0
 800216c:	032b      	lsls	r3, r5, #12
 800216e:	0069      	lsls	r1, r5, #1
 8002170:	0b1b      	lsrs	r3, r3, #12
 8002172:	4652      	mov	r2, sl
 8002174:	4698      	mov	r8, r3
 8002176:	0d49      	lsrs	r1, r1, #21
 8002178:	0fed      	lsrs	r5, r5, #31
 800217a:	2900      	cmp	r1, #0
 800217c:	d100      	bne.n	8002180 <__aeabi_dmul+0x5c>
 800217e:	e085      	b.n	800228c <__aeabi_dmul+0x168>
 8002180:	4bd0      	ldr	r3, [pc, #832]	; (80024c4 <__aeabi_dmul+0x3a0>)
 8002182:	4299      	cmp	r1, r3
 8002184:	d100      	bne.n	8002188 <__aeabi_dmul+0x64>
 8002186:	e073      	b.n	8002270 <__aeabi_dmul+0x14c>
 8002188:	4643      	mov	r3, r8
 800218a:	00da      	lsls	r2, r3, #3
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	041b      	lsls	r3, r3, #16
 8002190:	4313      	orrs	r3, r2
 8002192:	4652      	mov	r2, sl
 8002194:	48cc      	ldr	r0, [pc, #816]	; (80024c8 <__aeabi_dmul+0x3a4>)
 8002196:	0f52      	lsrs	r2, r2, #29
 8002198:	4684      	mov	ip, r0
 800219a:	4313      	orrs	r3, r2
 800219c:	4652      	mov	r2, sl
 800219e:	2000      	movs	r0, #0
 80021a0:	4461      	add	r1, ip
 80021a2:	00d2      	lsls	r2, r2, #3
 80021a4:	4489      	add	r9, r1
 80021a6:	0021      	movs	r1, r4
 80021a8:	4069      	eors	r1, r5
 80021aa:	9100      	str	r1, [sp, #0]
 80021ac:	468c      	mov	ip, r1
 80021ae:	2101      	movs	r1, #1
 80021b0:	4449      	add	r1, r9
 80021b2:	468a      	mov	sl, r1
 80021b4:	2f0f      	cmp	r7, #15
 80021b6:	d900      	bls.n	80021ba <__aeabi_dmul+0x96>
 80021b8:	e090      	b.n	80022dc <__aeabi_dmul+0x1b8>
 80021ba:	49c4      	ldr	r1, [pc, #784]	; (80024cc <__aeabi_dmul+0x3a8>)
 80021bc:	00bf      	lsls	r7, r7, #2
 80021be:	59cf      	ldr	r7, [r1, r7]
 80021c0:	46bf      	mov	pc, r7
 80021c2:	465b      	mov	r3, fp
 80021c4:	433b      	orrs	r3, r7
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	d000      	beq.n	80021cc <__aeabi_dmul+0xa8>
 80021ca:	e16a      	b.n	80024a2 <__aeabi_dmul+0x37e>
 80021cc:	2302      	movs	r3, #2
 80021ce:	2708      	movs	r7, #8
 80021d0:	2600      	movs	r6, #0
 80021d2:	4681      	mov	r9, r0
 80021d4:	469b      	mov	fp, r3
 80021d6:	e7c9      	b.n	800216c <__aeabi_dmul+0x48>
 80021d8:	0032      	movs	r2, r6
 80021da:	4658      	mov	r0, fp
 80021dc:	9b01      	ldr	r3, [sp, #4]
 80021de:	4661      	mov	r1, ip
 80021e0:	9100      	str	r1, [sp, #0]
 80021e2:	2802      	cmp	r0, #2
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dmul+0xc4>
 80021e6:	e075      	b.n	80022d4 <__aeabi_dmul+0x1b0>
 80021e8:	2803      	cmp	r0, #3
 80021ea:	d100      	bne.n	80021ee <__aeabi_dmul+0xca>
 80021ec:	e1fe      	b.n	80025ec <__aeabi_dmul+0x4c8>
 80021ee:	2801      	cmp	r0, #1
 80021f0:	d000      	beq.n	80021f4 <__aeabi_dmul+0xd0>
 80021f2:	e12c      	b.n	800244e <__aeabi_dmul+0x32a>
 80021f4:	2300      	movs	r3, #0
 80021f6:	2700      	movs	r7, #0
 80021f8:	2600      	movs	r6, #0
 80021fa:	2500      	movs	r5, #0
 80021fc:	033f      	lsls	r7, r7, #12
 80021fe:	0d2a      	lsrs	r2, r5, #20
 8002200:	0b3f      	lsrs	r7, r7, #12
 8002202:	48b3      	ldr	r0, [pc, #716]	; (80024d0 <__aeabi_dmul+0x3ac>)
 8002204:	0512      	lsls	r2, r2, #20
 8002206:	433a      	orrs	r2, r7
 8002208:	4002      	ands	r2, r0
 800220a:	051b      	lsls	r3, r3, #20
 800220c:	4313      	orrs	r3, r2
 800220e:	9a00      	ldr	r2, [sp, #0]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	07d1      	lsls	r1, r2, #31
 8002214:	085b      	lsrs	r3, r3, #1
 8002216:	430b      	orrs	r3, r1
 8002218:	0030      	movs	r0, r6
 800221a:	0019      	movs	r1, r3
 800221c:	b007      	add	sp, #28
 800221e:	bc3c      	pop	{r2, r3, r4, r5}
 8002220:	4690      	mov	r8, r2
 8002222:	4699      	mov	r9, r3
 8002224:	46a2      	mov	sl, r4
 8002226:	46ab      	mov	fp, r5
 8002228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800222a:	465b      	mov	r3, fp
 800222c:	433b      	orrs	r3, r7
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	d100      	bne.n	8002234 <__aeabi_dmul+0x110>
 8002232:	e12f      	b.n	8002494 <__aeabi_dmul+0x370>
 8002234:	2f00      	cmp	r7, #0
 8002236:	d100      	bne.n	800223a <__aeabi_dmul+0x116>
 8002238:	e1a5      	b.n	8002586 <__aeabi_dmul+0x462>
 800223a:	0038      	movs	r0, r7
 800223c:	f000 fe20 	bl	8002e80 <__clzsi2>
 8002240:	0003      	movs	r3, r0
 8002242:	3b0b      	subs	r3, #11
 8002244:	2b1c      	cmp	r3, #28
 8002246:	dd00      	ble.n	800224a <__aeabi_dmul+0x126>
 8002248:	e196      	b.n	8002578 <__aeabi_dmul+0x454>
 800224a:	221d      	movs	r2, #29
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	465a      	mov	r2, fp
 8002250:	0001      	movs	r1, r0
 8002252:	40da      	lsrs	r2, r3
 8002254:	465e      	mov	r6, fp
 8002256:	3908      	subs	r1, #8
 8002258:	408f      	lsls	r7, r1
 800225a:	0013      	movs	r3, r2
 800225c:	408e      	lsls	r6, r1
 800225e:	433b      	orrs	r3, r7
 8002260:	9301      	str	r3, [sp, #4]
 8002262:	4b9c      	ldr	r3, [pc, #624]	; (80024d4 <__aeabi_dmul+0x3b0>)
 8002264:	2700      	movs	r7, #0
 8002266:	1a1b      	subs	r3, r3, r0
 8002268:	4699      	mov	r9, r3
 800226a:	2300      	movs	r3, #0
 800226c:	469b      	mov	fp, r3
 800226e:	e77d      	b.n	800216c <__aeabi_dmul+0x48>
 8002270:	4641      	mov	r1, r8
 8002272:	4653      	mov	r3, sl
 8002274:	430b      	orrs	r3, r1
 8002276:	4993      	ldr	r1, [pc, #588]	; (80024c4 <__aeabi_dmul+0x3a0>)
 8002278:	468c      	mov	ip, r1
 800227a:	44e1      	add	r9, ip
 800227c:	2b00      	cmp	r3, #0
 800227e:	d000      	beq.n	8002282 <__aeabi_dmul+0x15e>
 8002280:	e11a      	b.n	80024b8 <__aeabi_dmul+0x394>
 8002282:	2202      	movs	r2, #2
 8002284:	2002      	movs	r0, #2
 8002286:	4317      	orrs	r7, r2
 8002288:	2200      	movs	r2, #0
 800228a:	e78c      	b.n	80021a6 <__aeabi_dmul+0x82>
 800228c:	4313      	orrs	r3, r2
 800228e:	d100      	bne.n	8002292 <__aeabi_dmul+0x16e>
 8002290:	e10d      	b.n	80024ae <__aeabi_dmul+0x38a>
 8002292:	4643      	mov	r3, r8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d100      	bne.n	800229a <__aeabi_dmul+0x176>
 8002298:	e181      	b.n	800259e <__aeabi_dmul+0x47a>
 800229a:	4640      	mov	r0, r8
 800229c:	f000 fdf0 	bl	8002e80 <__clzsi2>
 80022a0:	0002      	movs	r2, r0
 80022a2:	3a0b      	subs	r2, #11
 80022a4:	2a1c      	cmp	r2, #28
 80022a6:	dd00      	ble.n	80022aa <__aeabi_dmul+0x186>
 80022a8:	e172      	b.n	8002590 <__aeabi_dmul+0x46c>
 80022aa:	0001      	movs	r1, r0
 80022ac:	4643      	mov	r3, r8
 80022ae:	3908      	subs	r1, #8
 80022b0:	408b      	lsls	r3, r1
 80022b2:	4698      	mov	r8, r3
 80022b4:	231d      	movs	r3, #29
 80022b6:	1a9a      	subs	r2, r3, r2
 80022b8:	4653      	mov	r3, sl
 80022ba:	40d3      	lsrs	r3, r2
 80022bc:	001a      	movs	r2, r3
 80022be:	4643      	mov	r3, r8
 80022c0:	4313      	orrs	r3, r2
 80022c2:	4652      	mov	r2, sl
 80022c4:	408a      	lsls	r2, r1
 80022c6:	4649      	mov	r1, r9
 80022c8:	1a08      	subs	r0, r1, r0
 80022ca:	4982      	ldr	r1, [pc, #520]	; (80024d4 <__aeabi_dmul+0x3b0>)
 80022cc:	4689      	mov	r9, r1
 80022ce:	4481      	add	r9, r0
 80022d0:	2000      	movs	r0, #0
 80022d2:	e768      	b.n	80021a6 <__aeabi_dmul+0x82>
 80022d4:	4b7b      	ldr	r3, [pc, #492]	; (80024c4 <__aeabi_dmul+0x3a0>)
 80022d6:	2700      	movs	r7, #0
 80022d8:	2600      	movs	r6, #0
 80022da:	e78e      	b.n	80021fa <__aeabi_dmul+0xd6>
 80022dc:	0c14      	lsrs	r4, r2, #16
 80022de:	0412      	lsls	r2, r2, #16
 80022e0:	0c12      	lsrs	r2, r2, #16
 80022e2:	0011      	movs	r1, r2
 80022e4:	0c37      	lsrs	r7, r6, #16
 80022e6:	0436      	lsls	r6, r6, #16
 80022e8:	0c35      	lsrs	r5, r6, #16
 80022ea:	4379      	muls	r1, r7
 80022ec:	0028      	movs	r0, r5
 80022ee:	468c      	mov	ip, r1
 80022f0:	002e      	movs	r6, r5
 80022f2:	4360      	muls	r0, r4
 80022f4:	4460      	add	r0, ip
 80022f6:	4683      	mov	fp, r0
 80022f8:	4356      	muls	r6, r2
 80022fa:	0021      	movs	r1, r4
 80022fc:	0c30      	lsrs	r0, r6, #16
 80022fe:	4680      	mov	r8, r0
 8002300:	4658      	mov	r0, fp
 8002302:	4379      	muls	r1, r7
 8002304:	4440      	add	r0, r8
 8002306:	9102      	str	r1, [sp, #8]
 8002308:	4584      	cmp	ip, r0
 800230a:	d906      	bls.n	800231a <__aeabi_dmul+0x1f6>
 800230c:	4688      	mov	r8, r1
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	0249      	lsls	r1, r1, #9
 8002312:	468c      	mov	ip, r1
 8002314:	44e0      	add	r8, ip
 8002316:	4641      	mov	r1, r8
 8002318:	9102      	str	r1, [sp, #8]
 800231a:	0436      	lsls	r6, r6, #16
 800231c:	0c01      	lsrs	r1, r0, #16
 800231e:	0c36      	lsrs	r6, r6, #16
 8002320:	0400      	lsls	r0, r0, #16
 8002322:	468b      	mov	fp, r1
 8002324:	1981      	adds	r1, r0, r6
 8002326:	0c1e      	lsrs	r6, r3, #16
 8002328:	041b      	lsls	r3, r3, #16
 800232a:	0c1b      	lsrs	r3, r3, #16
 800232c:	9103      	str	r1, [sp, #12]
 800232e:	0019      	movs	r1, r3
 8002330:	4379      	muls	r1, r7
 8002332:	468c      	mov	ip, r1
 8002334:	0028      	movs	r0, r5
 8002336:	4375      	muls	r5, r6
 8002338:	4465      	add	r5, ip
 800233a:	46a8      	mov	r8, r5
 800233c:	4358      	muls	r0, r3
 800233e:	0c05      	lsrs	r5, r0, #16
 8002340:	4445      	add	r5, r8
 8002342:	4377      	muls	r7, r6
 8002344:	42a9      	cmp	r1, r5
 8002346:	d903      	bls.n	8002350 <__aeabi_dmul+0x22c>
 8002348:	2180      	movs	r1, #128	; 0x80
 800234a:	0249      	lsls	r1, r1, #9
 800234c:	468c      	mov	ip, r1
 800234e:	4467      	add	r7, ip
 8002350:	0c29      	lsrs	r1, r5, #16
 8002352:	468c      	mov	ip, r1
 8002354:	0039      	movs	r1, r7
 8002356:	0400      	lsls	r0, r0, #16
 8002358:	0c00      	lsrs	r0, r0, #16
 800235a:	042d      	lsls	r5, r5, #16
 800235c:	182d      	adds	r5, r5, r0
 800235e:	4461      	add	r1, ip
 8002360:	44ab      	add	fp, r5
 8002362:	9105      	str	r1, [sp, #20]
 8002364:	4659      	mov	r1, fp
 8002366:	9104      	str	r1, [sp, #16]
 8002368:	9901      	ldr	r1, [sp, #4]
 800236a:	040f      	lsls	r7, r1, #16
 800236c:	0c3f      	lsrs	r7, r7, #16
 800236e:	0c08      	lsrs	r0, r1, #16
 8002370:	0039      	movs	r1, r7
 8002372:	4351      	muls	r1, r2
 8002374:	4342      	muls	r2, r0
 8002376:	4690      	mov	r8, r2
 8002378:	0002      	movs	r2, r0
 800237a:	468c      	mov	ip, r1
 800237c:	0c09      	lsrs	r1, r1, #16
 800237e:	468b      	mov	fp, r1
 8002380:	4362      	muls	r2, r4
 8002382:	437c      	muls	r4, r7
 8002384:	4444      	add	r4, r8
 8002386:	445c      	add	r4, fp
 8002388:	45a0      	cmp	r8, r4
 800238a:	d903      	bls.n	8002394 <__aeabi_dmul+0x270>
 800238c:	2180      	movs	r1, #128	; 0x80
 800238e:	0249      	lsls	r1, r1, #9
 8002390:	4688      	mov	r8, r1
 8002392:	4442      	add	r2, r8
 8002394:	0c21      	lsrs	r1, r4, #16
 8002396:	4688      	mov	r8, r1
 8002398:	4661      	mov	r1, ip
 800239a:	0409      	lsls	r1, r1, #16
 800239c:	0c09      	lsrs	r1, r1, #16
 800239e:	468c      	mov	ip, r1
 80023a0:	0039      	movs	r1, r7
 80023a2:	4359      	muls	r1, r3
 80023a4:	4343      	muls	r3, r0
 80023a6:	4370      	muls	r0, r6
 80023a8:	437e      	muls	r6, r7
 80023aa:	0c0f      	lsrs	r7, r1, #16
 80023ac:	18f6      	adds	r6, r6, r3
 80023ae:	0424      	lsls	r4, r4, #16
 80023b0:	19be      	adds	r6, r7, r6
 80023b2:	4464      	add	r4, ip
 80023b4:	4442      	add	r2, r8
 80023b6:	468c      	mov	ip, r1
 80023b8:	42b3      	cmp	r3, r6
 80023ba:	d903      	bls.n	80023c4 <__aeabi_dmul+0x2a0>
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	025b      	lsls	r3, r3, #9
 80023c0:	4698      	mov	r8, r3
 80023c2:	4440      	add	r0, r8
 80023c4:	9b02      	ldr	r3, [sp, #8]
 80023c6:	4661      	mov	r1, ip
 80023c8:	4698      	mov	r8, r3
 80023ca:	9b04      	ldr	r3, [sp, #16]
 80023cc:	0437      	lsls	r7, r6, #16
 80023ce:	4443      	add	r3, r8
 80023d0:	469b      	mov	fp, r3
 80023d2:	45ab      	cmp	fp, r5
 80023d4:	41ad      	sbcs	r5, r5
 80023d6:	426b      	negs	r3, r5
 80023d8:	040d      	lsls	r5, r1, #16
 80023da:	9905      	ldr	r1, [sp, #20]
 80023dc:	0c2d      	lsrs	r5, r5, #16
 80023de:	468c      	mov	ip, r1
 80023e0:	197f      	adds	r7, r7, r5
 80023e2:	4467      	add	r7, ip
 80023e4:	18fd      	adds	r5, r7, r3
 80023e6:	46a8      	mov	r8, r5
 80023e8:	465d      	mov	r5, fp
 80023ea:	192d      	adds	r5, r5, r4
 80023ec:	42a5      	cmp	r5, r4
 80023ee:	41a4      	sbcs	r4, r4
 80023f0:	4693      	mov	fp, r2
 80023f2:	4264      	negs	r4, r4
 80023f4:	46a4      	mov	ip, r4
 80023f6:	44c3      	add	fp, r8
 80023f8:	44dc      	add	ip, fp
 80023fa:	428f      	cmp	r7, r1
 80023fc:	41bf      	sbcs	r7, r7
 80023fe:	4598      	cmp	r8, r3
 8002400:	419b      	sbcs	r3, r3
 8002402:	4593      	cmp	fp, r2
 8002404:	4192      	sbcs	r2, r2
 8002406:	45a4      	cmp	ip, r4
 8002408:	41a4      	sbcs	r4, r4
 800240a:	425b      	negs	r3, r3
 800240c:	427f      	negs	r7, r7
 800240e:	431f      	orrs	r7, r3
 8002410:	0c36      	lsrs	r6, r6, #16
 8002412:	4252      	negs	r2, r2
 8002414:	4264      	negs	r4, r4
 8002416:	19bf      	adds	r7, r7, r6
 8002418:	4322      	orrs	r2, r4
 800241a:	18bf      	adds	r7, r7, r2
 800241c:	4662      	mov	r2, ip
 800241e:	1838      	adds	r0, r7, r0
 8002420:	0243      	lsls	r3, r0, #9
 8002422:	0dd2      	lsrs	r2, r2, #23
 8002424:	9903      	ldr	r1, [sp, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	026a      	lsls	r2, r5, #9
 800242a:	430a      	orrs	r2, r1
 800242c:	1e50      	subs	r0, r2, #1
 800242e:	4182      	sbcs	r2, r0
 8002430:	4661      	mov	r1, ip
 8002432:	0ded      	lsrs	r5, r5, #23
 8002434:	432a      	orrs	r2, r5
 8002436:	024e      	lsls	r6, r1, #9
 8002438:	4332      	orrs	r2, r6
 800243a:	01d9      	lsls	r1, r3, #7
 800243c:	d400      	bmi.n	8002440 <__aeabi_dmul+0x31c>
 800243e:	e0b3      	b.n	80025a8 <__aeabi_dmul+0x484>
 8002440:	2601      	movs	r6, #1
 8002442:	0850      	lsrs	r0, r2, #1
 8002444:	4032      	ands	r2, r6
 8002446:	4302      	orrs	r2, r0
 8002448:	07de      	lsls	r6, r3, #31
 800244a:	4332      	orrs	r2, r6
 800244c:	085b      	lsrs	r3, r3, #1
 800244e:	4c22      	ldr	r4, [pc, #136]	; (80024d8 <__aeabi_dmul+0x3b4>)
 8002450:	4454      	add	r4, sl
 8002452:	2c00      	cmp	r4, #0
 8002454:	dd62      	ble.n	800251c <__aeabi_dmul+0x3f8>
 8002456:	0751      	lsls	r1, r2, #29
 8002458:	d009      	beq.n	800246e <__aeabi_dmul+0x34a>
 800245a:	200f      	movs	r0, #15
 800245c:	4010      	ands	r0, r2
 800245e:	2804      	cmp	r0, #4
 8002460:	d005      	beq.n	800246e <__aeabi_dmul+0x34a>
 8002462:	1d10      	adds	r0, r2, #4
 8002464:	4290      	cmp	r0, r2
 8002466:	4192      	sbcs	r2, r2
 8002468:	4252      	negs	r2, r2
 800246a:	189b      	adds	r3, r3, r2
 800246c:	0002      	movs	r2, r0
 800246e:	01d9      	lsls	r1, r3, #7
 8002470:	d504      	bpl.n	800247c <__aeabi_dmul+0x358>
 8002472:	2480      	movs	r4, #128	; 0x80
 8002474:	4819      	ldr	r0, [pc, #100]	; (80024dc <__aeabi_dmul+0x3b8>)
 8002476:	00e4      	lsls	r4, r4, #3
 8002478:	4003      	ands	r3, r0
 800247a:	4454      	add	r4, sl
 800247c:	4818      	ldr	r0, [pc, #96]	; (80024e0 <__aeabi_dmul+0x3bc>)
 800247e:	4284      	cmp	r4, r0
 8002480:	dd00      	ble.n	8002484 <__aeabi_dmul+0x360>
 8002482:	e727      	b.n	80022d4 <__aeabi_dmul+0x1b0>
 8002484:	075e      	lsls	r6, r3, #29
 8002486:	025b      	lsls	r3, r3, #9
 8002488:	08d2      	lsrs	r2, r2, #3
 800248a:	0b1f      	lsrs	r7, r3, #12
 800248c:	0563      	lsls	r3, r4, #21
 800248e:	4316      	orrs	r6, r2
 8002490:	0d5b      	lsrs	r3, r3, #21
 8002492:	e6b2      	b.n	80021fa <__aeabi_dmul+0xd6>
 8002494:	2300      	movs	r3, #0
 8002496:	4699      	mov	r9, r3
 8002498:	3301      	adds	r3, #1
 800249a:	2704      	movs	r7, #4
 800249c:	2600      	movs	r6, #0
 800249e:	469b      	mov	fp, r3
 80024a0:	e664      	b.n	800216c <__aeabi_dmul+0x48>
 80024a2:	2303      	movs	r3, #3
 80024a4:	9701      	str	r7, [sp, #4]
 80024a6:	4681      	mov	r9, r0
 80024a8:	270c      	movs	r7, #12
 80024aa:	469b      	mov	fp, r3
 80024ac:	e65e      	b.n	800216c <__aeabi_dmul+0x48>
 80024ae:	2201      	movs	r2, #1
 80024b0:	2001      	movs	r0, #1
 80024b2:	4317      	orrs	r7, r2
 80024b4:	2200      	movs	r2, #0
 80024b6:	e676      	b.n	80021a6 <__aeabi_dmul+0x82>
 80024b8:	2303      	movs	r3, #3
 80024ba:	2003      	movs	r0, #3
 80024bc:	431f      	orrs	r7, r3
 80024be:	4643      	mov	r3, r8
 80024c0:	e671      	b.n	80021a6 <__aeabi_dmul+0x82>
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	000007ff 	.word	0x000007ff
 80024c8:	fffffc01 	.word	0xfffffc01
 80024cc:	0801c980 	.word	0x0801c980
 80024d0:	800fffff 	.word	0x800fffff
 80024d4:	fffffc0d 	.word	0xfffffc0d
 80024d8:	000003ff 	.word	0x000003ff
 80024dc:	feffffff 	.word	0xfeffffff
 80024e0:	000007fe 	.word	0x000007fe
 80024e4:	2300      	movs	r3, #0
 80024e6:	2780      	movs	r7, #128	; 0x80
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	033f      	lsls	r7, r7, #12
 80024ec:	2600      	movs	r6, #0
 80024ee:	4b43      	ldr	r3, [pc, #268]	; (80025fc <__aeabi_dmul+0x4d8>)
 80024f0:	e683      	b.n	80021fa <__aeabi_dmul+0xd6>
 80024f2:	9b01      	ldr	r3, [sp, #4]
 80024f4:	0032      	movs	r2, r6
 80024f6:	46a4      	mov	ip, r4
 80024f8:	4658      	mov	r0, fp
 80024fa:	e670      	b.n	80021de <__aeabi_dmul+0xba>
 80024fc:	46ac      	mov	ip, r5
 80024fe:	e66e      	b.n	80021de <__aeabi_dmul+0xba>
 8002500:	2780      	movs	r7, #128	; 0x80
 8002502:	9901      	ldr	r1, [sp, #4]
 8002504:	033f      	lsls	r7, r7, #12
 8002506:	4239      	tst	r1, r7
 8002508:	d02d      	beq.n	8002566 <__aeabi_dmul+0x442>
 800250a:	423b      	tst	r3, r7
 800250c:	d12b      	bne.n	8002566 <__aeabi_dmul+0x442>
 800250e:	431f      	orrs	r7, r3
 8002510:	033f      	lsls	r7, r7, #12
 8002512:	0b3f      	lsrs	r7, r7, #12
 8002514:	9500      	str	r5, [sp, #0]
 8002516:	0016      	movs	r6, r2
 8002518:	4b38      	ldr	r3, [pc, #224]	; (80025fc <__aeabi_dmul+0x4d8>)
 800251a:	e66e      	b.n	80021fa <__aeabi_dmul+0xd6>
 800251c:	2501      	movs	r5, #1
 800251e:	1b2d      	subs	r5, r5, r4
 8002520:	2d38      	cmp	r5, #56	; 0x38
 8002522:	dd00      	ble.n	8002526 <__aeabi_dmul+0x402>
 8002524:	e666      	b.n	80021f4 <__aeabi_dmul+0xd0>
 8002526:	2d1f      	cmp	r5, #31
 8002528:	dc40      	bgt.n	80025ac <__aeabi_dmul+0x488>
 800252a:	4835      	ldr	r0, [pc, #212]	; (8002600 <__aeabi_dmul+0x4dc>)
 800252c:	001c      	movs	r4, r3
 800252e:	4450      	add	r0, sl
 8002530:	0016      	movs	r6, r2
 8002532:	4082      	lsls	r2, r0
 8002534:	4084      	lsls	r4, r0
 8002536:	40ee      	lsrs	r6, r5
 8002538:	1e50      	subs	r0, r2, #1
 800253a:	4182      	sbcs	r2, r0
 800253c:	4334      	orrs	r4, r6
 800253e:	4314      	orrs	r4, r2
 8002540:	40eb      	lsrs	r3, r5
 8002542:	0762      	lsls	r2, r4, #29
 8002544:	d009      	beq.n	800255a <__aeabi_dmul+0x436>
 8002546:	220f      	movs	r2, #15
 8002548:	4022      	ands	r2, r4
 800254a:	2a04      	cmp	r2, #4
 800254c:	d005      	beq.n	800255a <__aeabi_dmul+0x436>
 800254e:	0022      	movs	r2, r4
 8002550:	1d14      	adds	r4, r2, #4
 8002552:	4294      	cmp	r4, r2
 8002554:	4180      	sbcs	r0, r0
 8002556:	4240      	negs	r0, r0
 8002558:	181b      	adds	r3, r3, r0
 800255a:	021a      	lsls	r2, r3, #8
 800255c:	d53e      	bpl.n	80025dc <__aeabi_dmul+0x4b8>
 800255e:	2301      	movs	r3, #1
 8002560:	2700      	movs	r7, #0
 8002562:	2600      	movs	r6, #0
 8002564:	e649      	b.n	80021fa <__aeabi_dmul+0xd6>
 8002566:	2780      	movs	r7, #128	; 0x80
 8002568:	9b01      	ldr	r3, [sp, #4]
 800256a:	033f      	lsls	r7, r7, #12
 800256c:	431f      	orrs	r7, r3
 800256e:	033f      	lsls	r7, r7, #12
 8002570:	0b3f      	lsrs	r7, r7, #12
 8002572:	9400      	str	r4, [sp, #0]
 8002574:	4b21      	ldr	r3, [pc, #132]	; (80025fc <__aeabi_dmul+0x4d8>)
 8002576:	e640      	b.n	80021fa <__aeabi_dmul+0xd6>
 8002578:	0003      	movs	r3, r0
 800257a:	465a      	mov	r2, fp
 800257c:	3b28      	subs	r3, #40	; 0x28
 800257e:	409a      	lsls	r2, r3
 8002580:	2600      	movs	r6, #0
 8002582:	9201      	str	r2, [sp, #4]
 8002584:	e66d      	b.n	8002262 <__aeabi_dmul+0x13e>
 8002586:	4658      	mov	r0, fp
 8002588:	f000 fc7a 	bl	8002e80 <__clzsi2>
 800258c:	3020      	adds	r0, #32
 800258e:	e657      	b.n	8002240 <__aeabi_dmul+0x11c>
 8002590:	0003      	movs	r3, r0
 8002592:	4652      	mov	r2, sl
 8002594:	3b28      	subs	r3, #40	; 0x28
 8002596:	409a      	lsls	r2, r3
 8002598:	0013      	movs	r3, r2
 800259a:	2200      	movs	r2, #0
 800259c:	e693      	b.n	80022c6 <__aeabi_dmul+0x1a2>
 800259e:	4650      	mov	r0, sl
 80025a0:	f000 fc6e 	bl	8002e80 <__clzsi2>
 80025a4:	3020      	adds	r0, #32
 80025a6:	e67b      	b.n	80022a0 <__aeabi_dmul+0x17c>
 80025a8:	46ca      	mov	sl, r9
 80025aa:	e750      	b.n	800244e <__aeabi_dmul+0x32a>
 80025ac:	201f      	movs	r0, #31
 80025ae:	001e      	movs	r6, r3
 80025b0:	4240      	negs	r0, r0
 80025b2:	1b04      	subs	r4, r0, r4
 80025b4:	40e6      	lsrs	r6, r4
 80025b6:	2d20      	cmp	r5, #32
 80025b8:	d003      	beq.n	80025c2 <__aeabi_dmul+0x49e>
 80025ba:	4c12      	ldr	r4, [pc, #72]	; (8002604 <__aeabi_dmul+0x4e0>)
 80025bc:	4454      	add	r4, sl
 80025be:	40a3      	lsls	r3, r4
 80025c0:	431a      	orrs	r2, r3
 80025c2:	1e50      	subs	r0, r2, #1
 80025c4:	4182      	sbcs	r2, r0
 80025c6:	4332      	orrs	r2, r6
 80025c8:	2607      	movs	r6, #7
 80025ca:	2700      	movs	r7, #0
 80025cc:	4016      	ands	r6, r2
 80025ce:	d009      	beq.n	80025e4 <__aeabi_dmul+0x4c0>
 80025d0:	200f      	movs	r0, #15
 80025d2:	2300      	movs	r3, #0
 80025d4:	4010      	ands	r0, r2
 80025d6:	0014      	movs	r4, r2
 80025d8:	2804      	cmp	r0, #4
 80025da:	d1b9      	bne.n	8002550 <__aeabi_dmul+0x42c>
 80025dc:	0022      	movs	r2, r4
 80025de:	075e      	lsls	r6, r3, #29
 80025e0:	025b      	lsls	r3, r3, #9
 80025e2:	0b1f      	lsrs	r7, r3, #12
 80025e4:	08d2      	lsrs	r2, r2, #3
 80025e6:	4316      	orrs	r6, r2
 80025e8:	2300      	movs	r3, #0
 80025ea:	e606      	b.n	80021fa <__aeabi_dmul+0xd6>
 80025ec:	2780      	movs	r7, #128	; 0x80
 80025ee:	033f      	lsls	r7, r7, #12
 80025f0:	431f      	orrs	r7, r3
 80025f2:	033f      	lsls	r7, r7, #12
 80025f4:	0b3f      	lsrs	r7, r7, #12
 80025f6:	0016      	movs	r6, r2
 80025f8:	4b00      	ldr	r3, [pc, #0]	; (80025fc <__aeabi_dmul+0x4d8>)
 80025fa:	e5fe      	b.n	80021fa <__aeabi_dmul+0xd6>
 80025fc:	000007ff 	.word	0x000007ff
 8002600:	0000041e 	.word	0x0000041e
 8002604:	0000043e 	.word	0x0000043e

08002608 <__aeabi_dsub>:
 8002608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260a:	4657      	mov	r7, sl
 800260c:	464e      	mov	r6, r9
 800260e:	4645      	mov	r5, r8
 8002610:	46de      	mov	lr, fp
 8002612:	000c      	movs	r4, r1
 8002614:	0309      	lsls	r1, r1, #12
 8002616:	b5e0      	push	{r5, r6, r7, lr}
 8002618:	0a49      	lsrs	r1, r1, #9
 800261a:	0f46      	lsrs	r6, r0, #29
 800261c:	005f      	lsls	r7, r3, #1
 800261e:	4331      	orrs	r1, r6
 8002620:	031e      	lsls	r6, r3, #12
 8002622:	0fdb      	lsrs	r3, r3, #31
 8002624:	0a76      	lsrs	r6, r6, #9
 8002626:	469b      	mov	fp, r3
 8002628:	0f53      	lsrs	r3, r2, #29
 800262a:	4333      	orrs	r3, r6
 800262c:	4ec8      	ldr	r6, [pc, #800]	; (8002950 <__aeabi_dsub+0x348>)
 800262e:	0065      	lsls	r5, r4, #1
 8002630:	00c0      	lsls	r0, r0, #3
 8002632:	0fe4      	lsrs	r4, r4, #31
 8002634:	00d2      	lsls	r2, r2, #3
 8002636:	0d6d      	lsrs	r5, r5, #21
 8002638:	46a2      	mov	sl, r4
 800263a:	4681      	mov	r9, r0
 800263c:	0d7f      	lsrs	r7, r7, #21
 800263e:	469c      	mov	ip, r3
 8002640:	4690      	mov	r8, r2
 8002642:	42b7      	cmp	r7, r6
 8002644:	d100      	bne.n	8002648 <__aeabi_dsub+0x40>
 8002646:	e0b9      	b.n	80027bc <__aeabi_dsub+0x1b4>
 8002648:	465b      	mov	r3, fp
 800264a:	2601      	movs	r6, #1
 800264c:	4073      	eors	r3, r6
 800264e:	469b      	mov	fp, r3
 8002650:	1bee      	subs	r6, r5, r7
 8002652:	45a3      	cmp	fp, r4
 8002654:	d100      	bne.n	8002658 <__aeabi_dsub+0x50>
 8002656:	e083      	b.n	8002760 <__aeabi_dsub+0x158>
 8002658:	2e00      	cmp	r6, #0
 800265a:	dd63      	ble.n	8002724 <__aeabi_dsub+0x11c>
 800265c:	2f00      	cmp	r7, #0
 800265e:	d000      	beq.n	8002662 <__aeabi_dsub+0x5a>
 8002660:	e0b1      	b.n	80027c6 <__aeabi_dsub+0x1be>
 8002662:	4663      	mov	r3, ip
 8002664:	4313      	orrs	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dsub+0x62>
 8002668:	e123      	b.n	80028b2 <__aeabi_dsub+0x2aa>
 800266a:	1e73      	subs	r3, r6, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x6a>
 8002670:	e1ba      	b.n	80029e8 <__aeabi_dsub+0x3e0>
 8002672:	1a86      	subs	r6, r0, r2
 8002674:	4663      	mov	r3, ip
 8002676:	42b0      	cmp	r0, r6
 8002678:	4180      	sbcs	r0, r0
 800267a:	2501      	movs	r5, #1
 800267c:	1ac9      	subs	r1, r1, r3
 800267e:	4240      	negs	r0, r0
 8002680:	1a09      	subs	r1, r1, r0
 8002682:	020b      	lsls	r3, r1, #8
 8002684:	d400      	bmi.n	8002688 <__aeabi_dsub+0x80>
 8002686:	e147      	b.n	8002918 <__aeabi_dsub+0x310>
 8002688:	0249      	lsls	r1, r1, #9
 800268a:	0a4b      	lsrs	r3, r1, #9
 800268c:	4698      	mov	r8, r3
 800268e:	4643      	mov	r3, r8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d100      	bne.n	8002696 <__aeabi_dsub+0x8e>
 8002694:	e189      	b.n	80029aa <__aeabi_dsub+0x3a2>
 8002696:	4640      	mov	r0, r8
 8002698:	f000 fbf2 	bl	8002e80 <__clzsi2>
 800269c:	0003      	movs	r3, r0
 800269e:	3b08      	subs	r3, #8
 80026a0:	2b1f      	cmp	r3, #31
 80026a2:	dd00      	ble.n	80026a6 <__aeabi_dsub+0x9e>
 80026a4:	e17c      	b.n	80029a0 <__aeabi_dsub+0x398>
 80026a6:	2220      	movs	r2, #32
 80026a8:	0030      	movs	r0, r6
 80026aa:	1ad2      	subs	r2, r2, r3
 80026ac:	4641      	mov	r1, r8
 80026ae:	40d0      	lsrs	r0, r2
 80026b0:	4099      	lsls	r1, r3
 80026b2:	0002      	movs	r2, r0
 80026b4:	409e      	lsls	r6, r3
 80026b6:	430a      	orrs	r2, r1
 80026b8:	429d      	cmp	r5, r3
 80026ba:	dd00      	ble.n	80026be <__aeabi_dsub+0xb6>
 80026bc:	e16a      	b.n	8002994 <__aeabi_dsub+0x38c>
 80026be:	1b5d      	subs	r5, r3, r5
 80026c0:	1c6b      	adds	r3, r5, #1
 80026c2:	2b1f      	cmp	r3, #31
 80026c4:	dd00      	ble.n	80026c8 <__aeabi_dsub+0xc0>
 80026c6:	e194      	b.n	80029f2 <__aeabi_dsub+0x3ea>
 80026c8:	2120      	movs	r1, #32
 80026ca:	0010      	movs	r0, r2
 80026cc:	0035      	movs	r5, r6
 80026ce:	1ac9      	subs	r1, r1, r3
 80026d0:	408e      	lsls	r6, r1
 80026d2:	40da      	lsrs	r2, r3
 80026d4:	4088      	lsls	r0, r1
 80026d6:	40dd      	lsrs	r5, r3
 80026d8:	1e71      	subs	r1, r6, #1
 80026da:	418e      	sbcs	r6, r1
 80026dc:	0011      	movs	r1, r2
 80026de:	2207      	movs	r2, #7
 80026e0:	4328      	orrs	r0, r5
 80026e2:	2500      	movs	r5, #0
 80026e4:	4306      	orrs	r6, r0
 80026e6:	4032      	ands	r2, r6
 80026e8:	2a00      	cmp	r2, #0
 80026ea:	d009      	beq.n	8002700 <__aeabi_dsub+0xf8>
 80026ec:	230f      	movs	r3, #15
 80026ee:	4033      	ands	r3, r6
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d005      	beq.n	8002700 <__aeabi_dsub+0xf8>
 80026f4:	1d33      	adds	r3, r6, #4
 80026f6:	42b3      	cmp	r3, r6
 80026f8:	41b6      	sbcs	r6, r6
 80026fa:	4276      	negs	r6, r6
 80026fc:	1989      	adds	r1, r1, r6
 80026fe:	001e      	movs	r6, r3
 8002700:	020b      	lsls	r3, r1, #8
 8002702:	d400      	bmi.n	8002706 <__aeabi_dsub+0xfe>
 8002704:	e23d      	b.n	8002b82 <__aeabi_dsub+0x57a>
 8002706:	1c6a      	adds	r2, r5, #1
 8002708:	4b91      	ldr	r3, [pc, #580]	; (8002950 <__aeabi_dsub+0x348>)
 800270a:	0555      	lsls	r5, r2, #21
 800270c:	0d6d      	lsrs	r5, r5, #21
 800270e:	429a      	cmp	r2, r3
 8002710:	d100      	bne.n	8002714 <__aeabi_dsub+0x10c>
 8002712:	e119      	b.n	8002948 <__aeabi_dsub+0x340>
 8002714:	4a8f      	ldr	r2, [pc, #572]	; (8002954 <__aeabi_dsub+0x34c>)
 8002716:	08f6      	lsrs	r6, r6, #3
 8002718:	400a      	ands	r2, r1
 800271a:	0757      	lsls	r7, r2, #29
 800271c:	0252      	lsls	r2, r2, #9
 800271e:	4337      	orrs	r7, r6
 8002720:	0b12      	lsrs	r2, r2, #12
 8002722:	e09b      	b.n	800285c <__aeabi_dsub+0x254>
 8002724:	2e00      	cmp	r6, #0
 8002726:	d000      	beq.n	800272a <__aeabi_dsub+0x122>
 8002728:	e0c5      	b.n	80028b6 <__aeabi_dsub+0x2ae>
 800272a:	1c6e      	adds	r6, r5, #1
 800272c:	0576      	lsls	r6, r6, #21
 800272e:	0d76      	lsrs	r6, r6, #21
 8002730:	2e01      	cmp	r6, #1
 8002732:	dc00      	bgt.n	8002736 <__aeabi_dsub+0x12e>
 8002734:	e148      	b.n	80029c8 <__aeabi_dsub+0x3c0>
 8002736:	4667      	mov	r7, ip
 8002738:	1a86      	subs	r6, r0, r2
 800273a:	1bcb      	subs	r3, r1, r7
 800273c:	42b0      	cmp	r0, r6
 800273e:	41bf      	sbcs	r7, r7
 8002740:	427f      	negs	r7, r7
 8002742:	46b8      	mov	r8, r7
 8002744:	001f      	movs	r7, r3
 8002746:	4643      	mov	r3, r8
 8002748:	1aff      	subs	r7, r7, r3
 800274a:	003b      	movs	r3, r7
 800274c:	46b8      	mov	r8, r7
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	d500      	bpl.n	8002754 <__aeabi_dsub+0x14c>
 8002752:	e15f      	b.n	8002a14 <__aeabi_dsub+0x40c>
 8002754:	4337      	orrs	r7, r6
 8002756:	d19a      	bne.n	800268e <__aeabi_dsub+0x86>
 8002758:	2200      	movs	r2, #0
 800275a:	2400      	movs	r4, #0
 800275c:	2500      	movs	r5, #0
 800275e:	e079      	b.n	8002854 <__aeabi_dsub+0x24c>
 8002760:	2e00      	cmp	r6, #0
 8002762:	dc00      	bgt.n	8002766 <__aeabi_dsub+0x15e>
 8002764:	e0fa      	b.n	800295c <__aeabi_dsub+0x354>
 8002766:	2f00      	cmp	r7, #0
 8002768:	d100      	bne.n	800276c <__aeabi_dsub+0x164>
 800276a:	e08d      	b.n	8002888 <__aeabi_dsub+0x280>
 800276c:	4b78      	ldr	r3, [pc, #480]	; (8002950 <__aeabi_dsub+0x348>)
 800276e:	429d      	cmp	r5, r3
 8002770:	d067      	beq.n	8002842 <__aeabi_dsub+0x23a>
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	4667      	mov	r7, ip
 8002776:	041b      	lsls	r3, r3, #16
 8002778:	431f      	orrs	r7, r3
 800277a:	46bc      	mov	ip, r7
 800277c:	2e38      	cmp	r6, #56	; 0x38
 800277e:	dc00      	bgt.n	8002782 <__aeabi_dsub+0x17a>
 8002780:	e152      	b.n	8002a28 <__aeabi_dsub+0x420>
 8002782:	4663      	mov	r3, ip
 8002784:	4313      	orrs	r3, r2
 8002786:	1e5a      	subs	r2, r3, #1
 8002788:	4193      	sbcs	r3, r2
 800278a:	181e      	adds	r6, r3, r0
 800278c:	4286      	cmp	r6, r0
 800278e:	4180      	sbcs	r0, r0
 8002790:	4240      	negs	r0, r0
 8002792:	1809      	adds	r1, r1, r0
 8002794:	020b      	lsls	r3, r1, #8
 8002796:	d400      	bmi.n	800279a <__aeabi_dsub+0x192>
 8002798:	e0be      	b.n	8002918 <__aeabi_dsub+0x310>
 800279a:	4b6d      	ldr	r3, [pc, #436]	; (8002950 <__aeabi_dsub+0x348>)
 800279c:	3501      	adds	r5, #1
 800279e:	429d      	cmp	r5, r3
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x19c>
 80027a2:	e0d2      	b.n	800294a <__aeabi_dsub+0x342>
 80027a4:	4a6b      	ldr	r2, [pc, #428]	; (8002954 <__aeabi_dsub+0x34c>)
 80027a6:	0873      	lsrs	r3, r6, #1
 80027a8:	400a      	ands	r2, r1
 80027aa:	2101      	movs	r1, #1
 80027ac:	400e      	ands	r6, r1
 80027ae:	431e      	orrs	r6, r3
 80027b0:	0851      	lsrs	r1, r2, #1
 80027b2:	07d3      	lsls	r3, r2, #31
 80027b4:	2207      	movs	r2, #7
 80027b6:	431e      	orrs	r6, r3
 80027b8:	4032      	ands	r2, r6
 80027ba:	e795      	b.n	80026e8 <__aeabi_dsub+0xe0>
 80027bc:	001e      	movs	r6, r3
 80027be:	4316      	orrs	r6, r2
 80027c0:	d000      	beq.n	80027c4 <__aeabi_dsub+0x1bc>
 80027c2:	e745      	b.n	8002650 <__aeabi_dsub+0x48>
 80027c4:	e740      	b.n	8002648 <__aeabi_dsub+0x40>
 80027c6:	4b62      	ldr	r3, [pc, #392]	; (8002950 <__aeabi_dsub+0x348>)
 80027c8:	429d      	cmp	r5, r3
 80027ca:	d03a      	beq.n	8002842 <__aeabi_dsub+0x23a>
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	4667      	mov	r7, ip
 80027d0:	041b      	lsls	r3, r3, #16
 80027d2:	431f      	orrs	r7, r3
 80027d4:	46bc      	mov	ip, r7
 80027d6:	2e38      	cmp	r6, #56	; 0x38
 80027d8:	dd00      	ble.n	80027dc <__aeabi_dsub+0x1d4>
 80027da:	e0eb      	b.n	80029b4 <__aeabi_dsub+0x3ac>
 80027dc:	2e1f      	cmp	r6, #31
 80027de:	dc00      	bgt.n	80027e2 <__aeabi_dsub+0x1da>
 80027e0:	e13a      	b.n	8002a58 <__aeabi_dsub+0x450>
 80027e2:	0033      	movs	r3, r6
 80027e4:	4667      	mov	r7, ip
 80027e6:	3b20      	subs	r3, #32
 80027e8:	40df      	lsrs	r7, r3
 80027ea:	003b      	movs	r3, r7
 80027ec:	2e20      	cmp	r6, #32
 80027ee:	d005      	beq.n	80027fc <__aeabi_dsub+0x1f4>
 80027f0:	2740      	movs	r7, #64	; 0x40
 80027f2:	1bbf      	subs	r7, r7, r6
 80027f4:	4666      	mov	r6, ip
 80027f6:	40be      	lsls	r6, r7
 80027f8:	4332      	orrs	r2, r6
 80027fa:	4690      	mov	r8, r2
 80027fc:	4646      	mov	r6, r8
 80027fe:	1e72      	subs	r2, r6, #1
 8002800:	4196      	sbcs	r6, r2
 8002802:	4333      	orrs	r3, r6
 8002804:	e0da      	b.n	80029bc <__aeabi_dsub+0x3b4>
 8002806:	2b00      	cmp	r3, #0
 8002808:	d100      	bne.n	800280c <__aeabi_dsub+0x204>
 800280a:	e214      	b.n	8002c36 <__aeabi_dsub+0x62e>
 800280c:	4663      	mov	r3, ip
 800280e:	4313      	orrs	r3, r2
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x20c>
 8002812:	e168      	b.n	8002ae6 <__aeabi_dsub+0x4de>
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	074e      	lsls	r6, r1, #29
 8002818:	08c0      	lsrs	r0, r0, #3
 800281a:	08c9      	lsrs	r1, r1, #3
 800281c:	031b      	lsls	r3, r3, #12
 800281e:	4306      	orrs	r6, r0
 8002820:	4219      	tst	r1, r3
 8002822:	d008      	beq.n	8002836 <__aeabi_dsub+0x22e>
 8002824:	4660      	mov	r0, ip
 8002826:	08c0      	lsrs	r0, r0, #3
 8002828:	4218      	tst	r0, r3
 800282a:	d104      	bne.n	8002836 <__aeabi_dsub+0x22e>
 800282c:	4663      	mov	r3, ip
 800282e:	0001      	movs	r1, r0
 8002830:	08d2      	lsrs	r2, r2, #3
 8002832:	075e      	lsls	r6, r3, #29
 8002834:	4316      	orrs	r6, r2
 8002836:	00f3      	lsls	r3, r6, #3
 8002838:	4699      	mov	r9, r3
 800283a:	00c9      	lsls	r1, r1, #3
 800283c:	0f72      	lsrs	r2, r6, #29
 800283e:	4d44      	ldr	r5, [pc, #272]	; (8002950 <__aeabi_dsub+0x348>)
 8002840:	4311      	orrs	r1, r2
 8002842:	464b      	mov	r3, r9
 8002844:	08de      	lsrs	r6, r3, #3
 8002846:	4b42      	ldr	r3, [pc, #264]	; (8002950 <__aeabi_dsub+0x348>)
 8002848:	074f      	lsls	r7, r1, #29
 800284a:	4337      	orrs	r7, r6
 800284c:	08ca      	lsrs	r2, r1, #3
 800284e:	429d      	cmp	r5, r3
 8002850:	d100      	bne.n	8002854 <__aeabi_dsub+0x24c>
 8002852:	e06e      	b.n	8002932 <__aeabi_dsub+0x32a>
 8002854:	0312      	lsls	r2, r2, #12
 8002856:	056d      	lsls	r5, r5, #21
 8002858:	0b12      	lsrs	r2, r2, #12
 800285a:	0d6d      	lsrs	r5, r5, #21
 800285c:	2100      	movs	r1, #0
 800285e:	0312      	lsls	r2, r2, #12
 8002860:	0b13      	lsrs	r3, r2, #12
 8002862:	0d0a      	lsrs	r2, r1, #20
 8002864:	0512      	lsls	r2, r2, #20
 8002866:	431a      	orrs	r2, r3
 8002868:	4b3b      	ldr	r3, [pc, #236]	; (8002958 <__aeabi_dsub+0x350>)
 800286a:	052d      	lsls	r5, r5, #20
 800286c:	4013      	ands	r3, r2
 800286e:	432b      	orrs	r3, r5
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	07e4      	lsls	r4, r4, #31
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	4323      	orrs	r3, r4
 8002878:	0038      	movs	r0, r7
 800287a:	0019      	movs	r1, r3
 800287c:	bc3c      	pop	{r2, r3, r4, r5}
 800287e:	4690      	mov	r8, r2
 8002880:	4699      	mov	r9, r3
 8002882:	46a2      	mov	sl, r4
 8002884:	46ab      	mov	fp, r5
 8002886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002888:	4663      	mov	r3, ip
 800288a:	4313      	orrs	r3, r2
 800288c:	d011      	beq.n	80028b2 <__aeabi_dsub+0x2aa>
 800288e:	1e73      	subs	r3, r6, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d000      	beq.n	8002896 <__aeabi_dsub+0x28e>
 8002894:	e107      	b.n	8002aa6 <__aeabi_dsub+0x49e>
 8002896:	1886      	adds	r6, r0, r2
 8002898:	4286      	cmp	r6, r0
 800289a:	4180      	sbcs	r0, r0
 800289c:	4461      	add	r1, ip
 800289e:	4240      	negs	r0, r0
 80028a0:	1809      	adds	r1, r1, r0
 80028a2:	2501      	movs	r5, #1
 80028a4:	020b      	lsls	r3, r1, #8
 80028a6:	d537      	bpl.n	8002918 <__aeabi_dsub+0x310>
 80028a8:	2502      	movs	r5, #2
 80028aa:	e77b      	b.n	80027a4 <__aeabi_dsub+0x19c>
 80028ac:	003e      	movs	r6, r7
 80028ae:	4661      	mov	r1, ip
 80028b0:	4691      	mov	r9, r2
 80028b2:	0035      	movs	r5, r6
 80028b4:	e7c5      	b.n	8002842 <__aeabi_dsub+0x23a>
 80028b6:	465c      	mov	r4, fp
 80028b8:	2d00      	cmp	r5, #0
 80028ba:	d000      	beq.n	80028be <__aeabi_dsub+0x2b6>
 80028bc:	e0e1      	b.n	8002a82 <__aeabi_dsub+0x47a>
 80028be:	000b      	movs	r3, r1
 80028c0:	4303      	orrs	r3, r0
 80028c2:	d0f3      	beq.n	80028ac <__aeabi_dsub+0x2a4>
 80028c4:	1c73      	adds	r3, r6, #1
 80028c6:	d100      	bne.n	80028ca <__aeabi_dsub+0x2c2>
 80028c8:	e1ac      	b.n	8002c24 <__aeabi_dsub+0x61c>
 80028ca:	4b21      	ldr	r3, [pc, #132]	; (8002950 <__aeabi_dsub+0x348>)
 80028cc:	429f      	cmp	r7, r3
 80028ce:	d100      	bne.n	80028d2 <__aeabi_dsub+0x2ca>
 80028d0:	e13a      	b.n	8002b48 <__aeabi_dsub+0x540>
 80028d2:	43f3      	mvns	r3, r6
 80028d4:	2b38      	cmp	r3, #56	; 0x38
 80028d6:	dd00      	ble.n	80028da <__aeabi_dsub+0x2d2>
 80028d8:	e16f      	b.n	8002bba <__aeabi_dsub+0x5b2>
 80028da:	2b1f      	cmp	r3, #31
 80028dc:	dd00      	ble.n	80028e0 <__aeabi_dsub+0x2d8>
 80028de:	e18c      	b.n	8002bfa <__aeabi_dsub+0x5f2>
 80028e0:	2520      	movs	r5, #32
 80028e2:	000e      	movs	r6, r1
 80028e4:	1aed      	subs	r5, r5, r3
 80028e6:	40ae      	lsls	r6, r5
 80028e8:	46b0      	mov	r8, r6
 80028ea:	0006      	movs	r6, r0
 80028ec:	46aa      	mov	sl, r5
 80028ee:	40de      	lsrs	r6, r3
 80028f0:	4645      	mov	r5, r8
 80028f2:	4335      	orrs	r5, r6
 80028f4:	002e      	movs	r6, r5
 80028f6:	4655      	mov	r5, sl
 80028f8:	40d9      	lsrs	r1, r3
 80028fa:	40a8      	lsls	r0, r5
 80028fc:	4663      	mov	r3, ip
 80028fe:	1e45      	subs	r5, r0, #1
 8002900:	41a8      	sbcs	r0, r5
 8002902:	1a5b      	subs	r3, r3, r1
 8002904:	469c      	mov	ip, r3
 8002906:	4330      	orrs	r0, r6
 8002908:	1a16      	subs	r6, r2, r0
 800290a:	42b2      	cmp	r2, r6
 800290c:	4192      	sbcs	r2, r2
 800290e:	4663      	mov	r3, ip
 8002910:	4252      	negs	r2, r2
 8002912:	1a99      	subs	r1, r3, r2
 8002914:	003d      	movs	r5, r7
 8002916:	e6b4      	b.n	8002682 <__aeabi_dsub+0x7a>
 8002918:	2207      	movs	r2, #7
 800291a:	4032      	ands	r2, r6
 800291c:	2a00      	cmp	r2, #0
 800291e:	d000      	beq.n	8002922 <__aeabi_dsub+0x31a>
 8002920:	e6e4      	b.n	80026ec <__aeabi_dsub+0xe4>
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <__aeabi_dsub+0x348>)
 8002924:	08f6      	lsrs	r6, r6, #3
 8002926:	074f      	lsls	r7, r1, #29
 8002928:	4337      	orrs	r7, r6
 800292a:	08ca      	lsrs	r2, r1, #3
 800292c:	429d      	cmp	r5, r3
 800292e:	d000      	beq.n	8002932 <__aeabi_dsub+0x32a>
 8002930:	e790      	b.n	8002854 <__aeabi_dsub+0x24c>
 8002932:	003b      	movs	r3, r7
 8002934:	4313      	orrs	r3, r2
 8002936:	d100      	bne.n	800293a <__aeabi_dsub+0x332>
 8002938:	e1a6      	b.n	8002c88 <__aeabi_dsub+0x680>
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	031b      	lsls	r3, r3, #12
 800293e:	431a      	orrs	r2, r3
 8002940:	0312      	lsls	r2, r2, #12
 8002942:	0b12      	lsrs	r2, r2, #12
 8002944:	4d02      	ldr	r5, [pc, #8]	; (8002950 <__aeabi_dsub+0x348>)
 8002946:	e789      	b.n	800285c <__aeabi_dsub+0x254>
 8002948:	0015      	movs	r5, r2
 800294a:	2200      	movs	r2, #0
 800294c:	2700      	movs	r7, #0
 800294e:	e785      	b.n	800285c <__aeabi_dsub+0x254>
 8002950:	000007ff 	.word	0x000007ff
 8002954:	ff7fffff 	.word	0xff7fffff
 8002958:	800fffff 	.word	0x800fffff
 800295c:	2e00      	cmp	r6, #0
 800295e:	d000      	beq.n	8002962 <__aeabi_dsub+0x35a>
 8002960:	e0c7      	b.n	8002af2 <__aeabi_dsub+0x4ea>
 8002962:	1c6b      	adds	r3, r5, #1
 8002964:	055e      	lsls	r6, r3, #21
 8002966:	0d76      	lsrs	r6, r6, #21
 8002968:	2e01      	cmp	r6, #1
 800296a:	dc00      	bgt.n	800296e <__aeabi_dsub+0x366>
 800296c:	e0f0      	b.n	8002b50 <__aeabi_dsub+0x548>
 800296e:	4dc8      	ldr	r5, [pc, #800]	; (8002c90 <__aeabi_dsub+0x688>)
 8002970:	42ab      	cmp	r3, r5
 8002972:	d100      	bne.n	8002976 <__aeabi_dsub+0x36e>
 8002974:	e0b9      	b.n	8002aea <__aeabi_dsub+0x4e2>
 8002976:	1885      	adds	r5, r0, r2
 8002978:	000a      	movs	r2, r1
 800297a:	4285      	cmp	r5, r0
 800297c:	4189      	sbcs	r1, r1
 800297e:	4462      	add	r2, ip
 8002980:	4249      	negs	r1, r1
 8002982:	1851      	adds	r1, r2, r1
 8002984:	2207      	movs	r2, #7
 8002986:	07ce      	lsls	r6, r1, #31
 8002988:	086d      	lsrs	r5, r5, #1
 800298a:	432e      	orrs	r6, r5
 800298c:	0849      	lsrs	r1, r1, #1
 800298e:	4032      	ands	r2, r6
 8002990:	001d      	movs	r5, r3
 8002992:	e6a9      	b.n	80026e8 <__aeabi_dsub+0xe0>
 8002994:	49bf      	ldr	r1, [pc, #764]	; (8002c94 <__aeabi_dsub+0x68c>)
 8002996:	1aed      	subs	r5, r5, r3
 8002998:	4011      	ands	r1, r2
 800299a:	2207      	movs	r2, #7
 800299c:	4032      	ands	r2, r6
 800299e:	e6a3      	b.n	80026e8 <__aeabi_dsub+0xe0>
 80029a0:	0032      	movs	r2, r6
 80029a2:	3828      	subs	r0, #40	; 0x28
 80029a4:	4082      	lsls	r2, r0
 80029a6:	2600      	movs	r6, #0
 80029a8:	e686      	b.n	80026b8 <__aeabi_dsub+0xb0>
 80029aa:	0030      	movs	r0, r6
 80029ac:	f000 fa68 	bl	8002e80 <__clzsi2>
 80029b0:	3020      	adds	r0, #32
 80029b2:	e673      	b.n	800269c <__aeabi_dsub+0x94>
 80029b4:	4663      	mov	r3, ip
 80029b6:	4313      	orrs	r3, r2
 80029b8:	1e5a      	subs	r2, r3, #1
 80029ba:	4193      	sbcs	r3, r2
 80029bc:	1ac6      	subs	r6, r0, r3
 80029be:	42b0      	cmp	r0, r6
 80029c0:	4180      	sbcs	r0, r0
 80029c2:	4240      	negs	r0, r0
 80029c4:	1a09      	subs	r1, r1, r0
 80029c6:	e65c      	b.n	8002682 <__aeabi_dsub+0x7a>
 80029c8:	000e      	movs	r6, r1
 80029ca:	4667      	mov	r7, ip
 80029cc:	4306      	orrs	r6, r0
 80029ce:	4317      	orrs	r7, r2
 80029d0:	2d00      	cmp	r5, #0
 80029d2:	d15e      	bne.n	8002a92 <__aeabi_dsub+0x48a>
 80029d4:	2e00      	cmp	r6, #0
 80029d6:	d000      	beq.n	80029da <__aeabi_dsub+0x3d2>
 80029d8:	e0f3      	b.n	8002bc2 <__aeabi_dsub+0x5ba>
 80029da:	2f00      	cmp	r7, #0
 80029dc:	d100      	bne.n	80029e0 <__aeabi_dsub+0x3d8>
 80029de:	e11e      	b.n	8002c1e <__aeabi_dsub+0x616>
 80029e0:	465c      	mov	r4, fp
 80029e2:	4661      	mov	r1, ip
 80029e4:	4691      	mov	r9, r2
 80029e6:	e72c      	b.n	8002842 <__aeabi_dsub+0x23a>
 80029e8:	4fa9      	ldr	r7, [pc, #676]	; (8002c90 <__aeabi_dsub+0x688>)
 80029ea:	42be      	cmp	r6, r7
 80029ec:	d07b      	beq.n	8002ae6 <__aeabi_dsub+0x4de>
 80029ee:	001e      	movs	r6, r3
 80029f0:	e6f1      	b.n	80027d6 <__aeabi_dsub+0x1ce>
 80029f2:	0010      	movs	r0, r2
 80029f4:	3d1f      	subs	r5, #31
 80029f6:	40e8      	lsrs	r0, r5
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	d003      	beq.n	8002a04 <__aeabi_dsub+0x3fc>
 80029fc:	2140      	movs	r1, #64	; 0x40
 80029fe:	1acb      	subs	r3, r1, r3
 8002a00:	409a      	lsls	r2, r3
 8002a02:	4316      	orrs	r6, r2
 8002a04:	1e73      	subs	r3, r6, #1
 8002a06:	419e      	sbcs	r6, r3
 8002a08:	2207      	movs	r2, #7
 8002a0a:	4306      	orrs	r6, r0
 8002a0c:	4032      	ands	r2, r6
 8002a0e:	2100      	movs	r1, #0
 8002a10:	2500      	movs	r5, #0
 8002a12:	e783      	b.n	800291c <__aeabi_dsub+0x314>
 8002a14:	1a16      	subs	r6, r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	42b2      	cmp	r2, r6
 8002a1a:	4180      	sbcs	r0, r0
 8002a1c:	1a59      	subs	r1, r3, r1
 8002a1e:	4240      	negs	r0, r0
 8002a20:	1a0b      	subs	r3, r1, r0
 8002a22:	4698      	mov	r8, r3
 8002a24:	465c      	mov	r4, fp
 8002a26:	e632      	b.n	800268e <__aeabi_dsub+0x86>
 8002a28:	2e1f      	cmp	r6, #31
 8002a2a:	dd00      	ble.n	8002a2e <__aeabi_dsub+0x426>
 8002a2c:	e0ab      	b.n	8002b86 <__aeabi_dsub+0x57e>
 8002a2e:	2720      	movs	r7, #32
 8002a30:	1bbb      	subs	r3, r7, r6
 8002a32:	469a      	mov	sl, r3
 8002a34:	4663      	mov	r3, ip
 8002a36:	4657      	mov	r7, sl
 8002a38:	40bb      	lsls	r3, r7
 8002a3a:	4699      	mov	r9, r3
 8002a3c:	0013      	movs	r3, r2
 8002a3e:	464f      	mov	r7, r9
 8002a40:	40f3      	lsrs	r3, r6
 8002a42:	431f      	orrs	r7, r3
 8002a44:	003b      	movs	r3, r7
 8002a46:	4657      	mov	r7, sl
 8002a48:	40ba      	lsls	r2, r7
 8002a4a:	1e57      	subs	r7, r2, #1
 8002a4c:	41ba      	sbcs	r2, r7
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	4662      	mov	r2, ip
 8002a52:	40f2      	lsrs	r2, r6
 8002a54:	1889      	adds	r1, r1, r2
 8002a56:	e698      	b.n	800278a <__aeabi_dsub+0x182>
 8002a58:	2720      	movs	r7, #32
 8002a5a:	1bbb      	subs	r3, r7, r6
 8002a5c:	469a      	mov	sl, r3
 8002a5e:	4663      	mov	r3, ip
 8002a60:	4657      	mov	r7, sl
 8002a62:	40bb      	lsls	r3, r7
 8002a64:	4699      	mov	r9, r3
 8002a66:	0013      	movs	r3, r2
 8002a68:	464f      	mov	r7, r9
 8002a6a:	40f3      	lsrs	r3, r6
 8002a6c:	431f      	orrs	r7, r3
 8002a6e:	003b      	movs	r3, r7
 8002a70:	4657      	mov	r7, sl
 8002a72:	40ba      	lsls	r2, r7
 8002a74:	1e57      	subs	r7, r2, #1
 8002a76:	41ba      	sbcs	r2, r7
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	4662      	mov	r2, ip
 8002a7c:	40f2      	lsrs	r2, r6
 8002a7e:	1a89      	subs	r1, r1, r2
 8002a80:	e79c      	b.n	80029bc <__aeabi_dsub+0x3b4>
 8002a82:	4b83      	ldr	r3, [pc, #524]	; (8002c90 <__aeabi_dsub+0x688>)
 8002a84:	429f      	cmp	r7, r3
 8002a86:	d05f      	beq.n	8002b48 <__aeabi_dsub+0x540>
 8002a88:	2580      	movs	r5, #128	; 0x80
 8002a8a:	042d      	lsls	r5, r5, #16
 8002a8c:	4273      	negs	r3, r6
 8002a8e:	4329      	orrs	r1, r5
 8002a90:	e720      	b.n	80028d4 <__aeabi_dsub+0x2cc>
 8002a92:	2e00      	cmp	r6, #0
 8002a94:	d10c      	bne.n	8002ab0 <__aeabi_dsub+0x4a8>
 8002a96:	2f00      	cmp	r7, #0
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x494>
 8002a9a:	e0d0      	b.n	8002c3e <__aeabi_dsub+0x636>
 8002a9c:	465c      	mov	r4, fp
 8002a9e:	4661      	mov	r1, ip
 8002aa0:	4691      	mov	r9, r2
 8002aa2:	4d7b      	ldr	r5, [pc, #492]	; (8002c90 <__aeabi_dsub+0x688>)
 8002aa4:	e6cd      	b.n	8002842 <__aeabi_dsub+0x23a>
 8002aa6:	4f7a      	ldr	r7, [pc, #488]	; (8002c90 <__aeabi_dsub+0x688>)
 8002aa8:	42be      	cmp	r6, r7
 8002aaa:	d01c      	beq.n	8002ae6 <__aeabi_dsub+0x4de>
 8002aac:	001e      	movs	r6, r3
 8002aae:	e665      	b.n	800277c <__aeabi_dsub+0x174>
 8002ab0:	2f00      	cmp	r7, #0
 8002ab2:	d018      	beq.n	8002ae6 <__aeabi_dsub+0x4de>
 8002ab4:	08c0      	lsrs	r0, r0, #3
 8002ab6:	074e      	lsls	r6, r1, #29
 8002ab8:	4306      	orrs	r6, r0
 8002aba:	2080      	movs	r0, #128	; 0x80
 8002abc:	08c9      	lsrs	r1, r1, #3
 8002abe:	0300      	lsls	r0, r0, #12
 8002ac0:	4201      	tst	r1, r0
 8002ac2:	d008      	beq.n	8002ad6 <__aeabi_dsub+0x4ce>
 8002ac4:	4663      	mov	r3, ip
 8002ac6:	08dc      	lsrs	r4, r3, #3
 8002ac8:	4204      	tst	r4, r0
 8002aca:	d104      	bne.n	8002ad6 <__aeabi_dsub+0x4ce>
 8002acc:	0021      	movs	r1, r4
 8002ace:	46da      	mov	sl, fp
 8002ad0:	08d2      	lsrs	r2, r2, #3
 8002ad2:	075e      	lsls	r6, r3, #29
 8002ad4:	4316      	orrs	r6, r2
 8002ad6:	00f3      	lsls	r3, r6, #3
 8002ad8:	4699      	mov	r9, r3
 8002ada:	2401      	movs	r4, #1
 8002adc:	4653      	mov	r3, sl
 8002ade:	00c9      	lsls	r1, r1, #3
 8002ae0:	0f72      	lsrs	r2, r6, #29
 8002ae2:	4311      	orrs	r1, r2
 8002ae4:	401c      	ands	r4, r3
 8002ae6:	4d6a      	ldr	r5, [pc, #424]	; (8002c90 <__aeabi_dsub+0x688>)
 8002ae8:	e6ab      	b.n	8002842 <__aeabi_dsub+0x23a>
 8002aea:	001d      	movs	r5, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	2700      	movs	r7, #0
 8002af0:	e6b4      	b.n	800285c <__aeabi_dsub+0x254>
 8002af2:	2d00      	cmp	r5, #0
 8002af4:	d159      	bne.n	8002baa <__aeabi_dsub+0x5a2>
 8002af6:	000b      	movs	r3, r1
 8002af8:	4303      	orrs	r3, r0
 8002afa:	d100      	bne.n	8002afe <__aeabi_dsub+0x4f6>
 8002afc:	e6d6      	b.n	80028ac <__aeabi_dsub+0x2a4>
 8002afe:	1c73      	adds	r3, r6, #1
 8002b00:	d100      	bne.n	8002b04 <__aeabi_dsub+0x4fc>
 8002b02:	e0b2      	b.n	8002c6a <__aeabi_dsub+0x662>
 8002b04:	4b62      	ldr	r3, [pc, #392]	; (8002c90 <__aeabi_dsub+0x688>)
 8002b06:	429f      	cmp	r7, r3
 8002b08:	d01e      	beq.n	8002b48 <__aeabi_dsub+0x540>
 8002b0a:	43f3      	mvns	r3, r6
 8002b0c:	2b38      	cmp	r3, #56	; 0x38
 8002b0e:	dc6f      	bgt.n	8002bf0 <__aeabi_dsub+0x5e8>
 8002b10:	2b1f      	cmp	r3, #31
 8002b12:	dd00      	ble.n	8002b16 <__aeabi_dsub+0x50e>
 8002b14:	e097      	b.n	8002c46 <__aeabi_dsub+0x63e>
 8002b16:	2520      	movs	r5, #32
 8002b18:	000e      	movs	r6, r1
 8002b1a:	1aed      	subs	r5, r5, r3
 8002b1c:	40ae      	lsls	r6, r5
 8002b1e:	46b0      	mov	r8, r6
 8002b20:	0006      	movs	r6, r0
 8002b22:	46aa      	mov	sl, r5
 8002b24:	40de      	lsrs	r6, r3
 8002b26:	4645      	mov	r5, r8
 8002b28:	4335      	orrs	r5, r6
 8002b2a:	002e      	movs	r6, r5
 8002b2c:	4655      	mov	r5, sl
 8002b2e:	40a8      	lsls	r0, r5
 8002b30:	40d9      	lsrs	r1, r3
 8002b32:	1e45      	subs	r5, r0, #1
 8002b34:	41a8      	sbcs	r0, r5
 8002b36:	448c      	add	ip, r1
 8002b38:	4306      	orrs	r6, r0
 8002b3a:	18b6      	adds	r6, r6, r2
 8002b3c:	4296      	cmp	r6, r2
 8002b3e:	4192      	sbcs	r2, r2
 8002b40:	4251      	negs	r1, r2
 8002b42:	4461      	add	r1, ip
 8002b44:	003d      	movs	r5, r7
 8002b46:	e625      	b.n	8002794 <__aeabi_dsub+0x18c>
 8002b48:	003d      	movs	r5, r7
 8002b4a:	4661      	mov	r1, ip
 8002b4c:	4691      	mov	r9, r2
 8002b4e:	e678      	b.n	8002842 <__aeabi_dsub+0x23a>
 8002b50:	000b      	movs	r3, r1
 8002b52:	4303      	orrs	r3, r0
 8002b54:	2d00      	cmp	r5, #0
 8002b56:	d000      	beq.n	8002b5a <__aeabi_dsub+0x552>
 8002b58:	e655      	b.n	8002806 <__aeabi_dsub+0x1fe>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0f5      	beq.n	8002b4a <__aeabi_dsub+0x542>
 8002b5e:	4663      	mov	r3, ip
 8002b60:	4313      	orrs	r3, r2
 8002b62:	d100      	bne.n	8002b66 <__aeabi_dsub+0x55e>
 8002b64:	e66d      	b.n	8002842 <__aeabi_dsub+0x23a>
 8002b66:	1886      	adds	r6, r0, r2
 8002b68:	4286      	cmp	r6, r0
 8002b6a:	4180      	sbcs	r0, r0
 8002b6c:	4461      	add	r1, ip
 8002b6e:	4240      	negs	r0, r0
 8002b70:	1809      	adds	r1, r1, r0
 8002b72:	2200      	movs	r2, #0
 8002b74:	020b      	lsls	r3, r1, #8
 8002b76:	d400      	bmi.n	8002b7a <__aeabi_dsub+0x572>
 8002b78:	e6d0      	b.n	800291c <__aeabi_dsub+0x314>
 8002b7a:	4b46      	ldr	r3, [pc, #280]	; (8002c94 <__aeabi_dsub+0x68c>)
 8002b7c:	3501      	adds	r5, #1
 8002b7e:	4019      	ands	r1, r3
 8002b80:	e5b2      	b.n	80026e8 <__aeabi_dsub+0xe0>
 8002b82:	46b1      	mov	r9, r6
 8002b84:	e65d      	b.n	8002842 <__aeabi_dsub+0x23a>
 8002b86:	0033      	movs	r3, r6
 8002b88:	4667      	mov	r7, ip
 8002b8a:	3b20      	subs	r3, #32
 8002b8c:	40df      	lsrs	r7, r3
 8002b8e:	003b      	movs	r3, r7
 8002b90:	2e20      	cmp	r6, #32
 8002b92:	d005      	beq.n	8002ba0 <__aeabi_dsub+0x598>
 8002b94:	2740      	movs	r7, #64	; 0x40
 8002b96:	1bbf      	subs	r7, r7, r6
 8002b98:	4666      	mov	r6, ip
 8002b9a:	40be      	lsls	r6, r7
 8002b9c:	4332      	orrs	r2, r6
 8002b9e:	4690      	mov	r8, r2
 8002ba0:	4646      	mov	r6, r8
 8002ba2:	1e72      	subs	r2, r6, #1
 8002ba4:	4196      	sbcs	r6, r2
 8002ba6:	4333      	orrs	r3, r6
 8002ba8:	e5ef      	b.n	800278a <__aeabi_dsub+0x182>
 8002baa:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <__aeabi_dsub+0x688>)
 8002bac:	429f      	cmp	r7, r3
 8002bae:	d0cb      	beq.n	8002b48 <__aeabi_dsub+0x540>
 8002bb0:	2580      	movs	r5, #128	; 0x80
 8002bb2:	042d      	lsls	r5, r5, #16
 8002bb4:	4273      	negs	r3, r6
 8002bb6:	4329      	orrs	r1, r5
 8002bb8:	e7a8      	b.n	8002b0c <__aeabi_dsub+0x504>
 8002bba:	4308      	orrs	r0, r1
 8002bbc:	1e41      	subs	r1, r0, #1
 8002bbe:	4188      	sbcs	r0, r1
 8002bc0:	e6a2      	b.n	8002908 <__aeabi_dsub+0x300>
 8002bc2:	2f00      	cmp	r7, #0
 8002bc4:	d100      	bne.n	8002bc8 <__aeabi_dsub+0x5c0>
 8002bc6:	e63c      	b.n	8002842 <__aeabi_dsub+0x23a>
 8002bc8:	4663      	mov	r3, ip
 8002bca:	1a86      	subs	r6, r0, r2
 8002bcc:	1acf      	subs	r7, r1, r3
 8002bce:	42b0      	cmp	r0, r6
 8002bd0:	419b      	sbcs	r3, r3
 8002bd2:	425b      	negs	r3, r3
 8002bd4:	1afb      	subs	r3, r7, r3
 8002bd6:	4698      	mov	r8, r3
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	d54e      	bpl.n	8002c7a <__aeabi_dsub+0x672>
 8002bdc:	1a16      	subs	r6, r2, r0
 8002bde:	4663      	mov	r3, ip
 8002be0:	42b2      	cmp	r2, r6
 8002be2:	4192      	sbcs	r2, r2
 8002be4:	1a59      	subs	r1, r3, r1
 8002be6:	4252      	negs	r2, r2
 8002be8:	1a89      	subs	r1, r1, r2
 8002bea:	465c      	mov	r4, fp
 8002bec:	2200      	movs	r2, #0
 8002bee:	e57b      	b.n	80026e8 <__aeabi_dsub+0xe0>
 8002bf0:	4301      	orrs	r1, r0
 8002bf2:	000e      	movs	r6, r1
 8002bf4:	1e71      	subs	r1, r6, #1
 8002bf6:	418e      	sbcs	r6, r1
 8002bf8:	e79f      	b.n	8002b3a <__aeabi_dsub+0x532>
 8002bfa:	001d      	movs	r5, r3
 8002bfc:	000e      	movs	r6, r1
 8002bfe:	3d20      	subs	r5, #32
 8002c00:	40ee      	lsrs	r6, r5
 8002c02:	46b0      	mov	r8, r6
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d004      	beq.n	8002c12 <__aeabi_dsub+0x60a>
 8002c08:	2540      	movs	r5, #64	; 0x40
 8002c0a:	1aeb      	subs	r3, r5, r3
 8002c0c:	4099      	lsls	r1, r3
 8002c0e:	4308      	orrs	r0, r1
 8002c10:	4681      	mov	r9, r0
 8002c12:	4648      	mov	r0, r9
 8002c14:	4643      	mov	r3, r8
 8002c16:	1e41      	subs	r1, r0, #1
 8002c18:	4188      	sbcs	r0, r1
 8002c1a:	4318      	orrs	r0, r3
 8002c1c:	e674      	b.n	8002908 <__aeabi_dsub+0x300>
 8002c1e:	2200      	movs	r2, #0
 8002c20:	2400      	movs	r4, #0
 8002c22:	e617      	b.n	8002854 <__aeabi_dsub+0x24c>
 8002c24:	1a16      	subs	r6, r2, r0
 8002c26:	4663      	mov	r3, ip
 8002c28:	42b2      	cmp	r2, r6
 8002c2a:	4192      	sbcs	r2, r2
 8002c2c:	1a59      	subs	r1, r3, r1
 8002c2e:	4252      	negs	r2, r2
 8002c30:	1a89      	subs	r1, r1, r2
 8002c32:	003d      	movs	r5, r7
 8002c34:	e525      	b.n	8002682 <__aeabi_dsub+0x7a>
 8002c36:	4661      	mov	r1, ip
 8002c38:	4691      	mov	r9, r2
 8002c3a:	4d15      	ldr	r5, [pc, #84]	; (8002c90 <__aeabi_dsub+0x688>)
 8002c3c:	e601      	b.n	8002842 <__aeabi_dsub+0x23a>
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	2400      	movs	r4, #0
 8002c42:	0312      	lsls	r2, r2, #12
 8002c44:	e679      	b.n	800293a <__aeabi_dsub+0x332>
 8002c46:	001d      	movs	r5, r3
 8002c48:	000e      	movs	r6, r1
 8002c4a:	3d20      	subs	r5, #32
 8002c4c:	40ee      	lsrs	r6, r5
 8002c4e:	46b0      	mov	r8, r6
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d004      	beq.n	8002c5e <__aeabi_dsub+0x656>
 8002c54:	2540      	movs	r5, #64	; 0x40
 8002c56:	1aeb      	subs	r3, r5, r3
 8002c58:	4099      	lsls	r1, r3
 8002c5a:	4308      	orrs	r0, r1
 8002c5c:	4681      	mov	r9, r0
 8002c5e:	464e      	mov	r6, r9
 8002c60:	4643      	mov	r3, r8
 8002c62:	1e71      	subs	r1, r6, #1
 8002c64:	418e      	sbcs	r6, r1
 8002c66:	431e      	orrs	r6, r3
 8002c68:	e767      	b.n	8002b3a <__aeabi_dsub+0x532>
 8002c6a:	1886      	adds	r6, r0, r2
 8002c6c:	4296      	cmp	r6, r2
 8002c6e:	419b      	sbcs	r3, r3
 8002c70:	4461      	add	r1, ip
 8002c72:	425b      	negs	r3, r3
 8002c74:	18c9      	adds	r1, r1, r3
 8002c76:	003d      	movs	r5, r7
 8002c78:	e58c      	b.n	8002794 <__aeabi_dsub+0x18c>
 8002c7a:	4647      	mov	r7, r8
 8002c7c:	4337      	orrs	r7, r6
 8002c7e:	d0ce      	beq.n	8002c1e <__aeabi_dsub+0x616>
 8002c80:	2207      	movs	r2, #7
 8002c82:	4641      	mov	r1, r8
 8002c84:	4032      	ands	r2, r6
 8002c86:	e649      	b.n	800291c <__aeabi_dsub+0x314>
 8002c88:	2700      	movs	r7, #0
 8002c8a:	003a      	movs	r2, r7
 8002c8c:	e5e6      	b.n	800285c <__aeabi_dsub+0x254>
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	000007ff 	.word	0x000007ff
 8002c94:	ff7fffff 	.word	0xff7fffff

08002c98 <__aeabi_d2iz>:
 8002c98:	b530      	push	{r4, r5, lr}
 8002c9a:	4d14      	ldr	r5, [pc, #80]	; (8002cec <__aeabi_d2iz+0x54>)
 8002c9c:	030a      	lsls	r2, r1, #12
 8002c9e:	004b      	lsls	r3, r1, #1
 8002ca0:	0b12      	lsrs	r2, r2, #12
 8002ca2:	0d5b      	lsrs	r3, r3, #21
 8002ca4:	0fc9      	lsrs	r1, r1, #31
 8002ca6:	2400      	movs	r4, #0
 8002ca8:	42ab      	cmp	r3, r5
 8002caa:	dd11      	ble.n	8002cd0 <__aeabi_d2iz+0x38>
 8002cac:	4c10      	ldr	r4, [pc, #64]	; (8002cf0 <__aeabi_d2iz+0x58>)
 8002cae:	42a3      	cmp	r3, r4
 8002cb0:	dc10      	bgt.n	8002cd4 <__aeabi_d2iz+0x3c>
 8002cb2:	2480      	movs	r4, #128	; 0x80
 8002cb4:	0364      	lsls	r4, r4, #13
 8002cb6:	4322      	orrs	r2, r4
 8002cb8:	4c0e      	ldr	r4, [pc, #56]	; (8002cf4 <__aeabi_d2iz+0x5c>)
 8002cba:	1ae4      	subs	r4, r4, r3
 8002cbc:	2c1f      	cmp	r4, #31
 8002cbe:	dd0c      	ble.n	8002cda <__aeabi_d2iz+0x42>
 8002cc0:	480d      	ldr	r0, [pc, #52]	; (8002cf8 <__aeabi_d2iz+0x60>)
 8002cc2:	1ac3      	subs	r3, r0, r3
 8002cc4:	40da      	lsrs	r2, r3
 8002cc6:	0013      	movs	r3, r2
 8002cc8:	425c      	negs	r4, r3
 8002cca:	2900      	cmp	r1, #0
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_d2iz+0x38>
 8002cce:	001c      	movs	r4, r3
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	bd30      	pop	{r4, r5, pc}
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <__aeabi_d2iz+0x64>)
 8002cd6:	18cc      	adds	r4, r1, r3
 8002cd8:	e7fa      	b.n	8002cd0 <__aeabi_d2iz+0x38>
 8002cda:	4d09      	ldr	r5, [pc, #36]	; (8002d00 <__aeabi_d2iz+0x68>)
 8002cdc:	40e0      	lsrs	r0, r4
 8002cde:	46ac      	mov	ip, r5
 8002ce0:	4463      	add	r3, ip
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	0013      	movs	r3, r2
 8002ce6:	4303      	orrs	r3, r0
 8002ce8:	e7ee      	b.n	8002cc8 <__aeabi_d2iz+0x30>
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	000003fe 	.word	0x000003fe
 8002cf0:	0000041d 	.word	0x0000041d
 8002cf4:	00000433 	.word	0x00000433
 8002cf8:	00000413 	.word	0x00000413
 8002cfc:	7fffffff 	.word	0x7fffffff
 8002d00:	fffffbed 	.word	0xfffffbed

08002d04 <__aeabi_i2d>:
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d02d      	beq.n	8002d66 <__aeabi_i2d+0x62>
 8002d0a:	17c3      	asrs	r3, r0, #31
 8002d0c:	18c5      	adds	r5, r0, r3
 8002d0e:	405d      	eors	r5, r3
 8002d10:	0fc4      	lsrs	r4, r0, #31
 8002d12:	0028      	movs	r0, r5
 8002d14:	f000 f8b4 	bl	8002e80 <__clzsi2>
 8002d18:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <__aeabi_i2d+0x6c>)
 8002d1a:	1a1b      	subs	r3, r3, r0
 8002d1c:	055b      	lsls	r3, r3, #21
 8002d1e:	0d5b      	lsrs	r3, r3, #21
 8002d20:	280a      	cmp	r0, #10
 8002d22:	dd15      	ble.n	8002d50 <__aeabi_i2d+0x4c>
 8002d24:	380b      	subs	r0, #11
 8002d26:	4085      	lsls	r5, r0
 8002d28:	2200      	movs	r2, #0
 8002d2a:	032d      	lsls	r5, r5, #12
 8002d2c:	0b2d      	lsrs	r5, r5, #12
 8002d2e:	2100      	movs	r1, #0
 8002d30:	0010      	movs	r0, r2
 8002d32:	032d      	lsls	r5, r5, #12
 8002d34:	0d0a      	lsrs	r2, r1, #20
 8002d36:	0b2d      	lsrs	r5, r5, #12
 8002d38:	0512      	lsls	r2, r2, #20
 8002d3a:	432a      	orrs	r2, r5
 8002d3c:	4d0d      	ldr	r5, [pc, #52]	; (8002d74 <__aeabi_i2d+0x70>)
 8002d3e:	051b      	lsls	r3, r3, #20
 8002d40:	402a      	ands	r2, r5
 8002d42:	4313      	orrs	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	07e4      	lsls	r4, r4, #31
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	4323      	orrs	r3, r4
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	bd70      	pop	{r4, r5, r6, pc}
 8002d50:	0002      	movs	r2, r0
 8002d52:	0029      	movs	r1, r5
 8002d54:	3215      	adds	r2, #21
 8002d56:	4091      	lsls	r1, r2
 8002d58:	000a      	movs	r2, r1
 8002d5a:	210b      	movs	r1, #11
 8002d5c:	1a08      	subs	r0, r1, r0
 8002d5e:	40c5      	lsrs	r5, r0
 8002d60:	032d      	lsls	r5, r5, #12
 8002d62:	0b2d      	lsrs	r5, r5, #12
 8002d64:	e7e3      	b.n	8002d2e <__aeabi_i2d+0x2a>
 8002d66:	2400      	movs	r4, #0
 8002d68:	2300      	movs	r3, #0
 8002d6a:	2500      	movs	r5, #0
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	e7de      	b.n	8002d2e <__aeabi_i2d+0x2a>
 8002d70:	0000041e 	.word	0x0000041e
 8002d74:	800fffff 	.word	0x800fffff

08002d78 <__aeabi_ui2d>:
 8002d78:	b510      	push	{r4, lr}
 8002d7a:	1e04      	subs	r4, r0, #0
 8002d7c:	d025      	beq.n	8002dca <__aeabi_ui2d+0x52>
 8002d7e:	f000 f87f 	bl	8002e80 <__clzsi2>
 8002d82:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <__aeabi_ui2d+0x5c>)
 8002d84:	1a1b      	subs	r3, r3, r0
 8002d86:	055b      	lsls	r3, r3, #21
 8002d88:	0d5b      	lsrs	r3, r3, #21
 8002d8a:	280a      	cmp	r0, #10
 8002d8c:	dd12      	ble.n	8002db4 <__aeabi_ui2d+0x3c>
 8002d8e:	380b      	subs	r0, #11
 8002d90:	4084      	lsls	r4, r0
 8002d92:	2200      	movs	r2, #0
 8002d94:	0324      	lsls	r4, r4, #12
 8002d96:	0b24      	lsrs	r4, r4, #12
 8002d98:	2100      	movs	r1, #0
 8002d9a:	0010      	movs	r0, r2
 8002d9c:	0324      	lsls	r4, r4, #12
 8002d9e:	0d0a      	lsrs	r2, r1, #20
 8002da0:	0b24      	lsrs	r4, r4, #12
 8002da2:	0512      	lsls	r2, r2, #20
 8002da4:	4322      	orrs	r2, r4
 8002da6:	4c0c      	ldr	r4, [pc, #48]	; (8002dd8 <__aeabi_ui2d+0x60>)
 8002da8:	051b      	lsls	r3, r3, #20
 8002daa:	4022      	ands	r2, r4
 8002dac:	4313      	orrs	r3, r2
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	0859      	lsrs	r1, r3, #1
 8002db2:	bd10      	pop	{r4, pc}
 8002db4:	0002      	movs	r2, r0
 8002db6:	0021      	movs	r1, r4
 8002db8:	3215      	adds	r2, #21
 8002dba:	4091      	lsls	r1, r2
 8002dbc:	000a      	movs	r2, r1
 8002dbe:	210b      	movs	r1, #11
 8002dc0:	1a08      	subs	r0, r1, r0
 8002dc2:	40c4      	lsrs	r4, r0
 8002dc4:	0324      	lsls	r4, r4, #12
 8002dc6:	0b24      	lsrs	r4, r4, #12
 8002dc8:	e7e6      	b.n	8002d98 <__aeabi_ui2d+0x20>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2400      	movs	r4, #0
 8002dce:	2200      	movs	r2, #0
 8002dd0:	e7e2      	b.n	8002d98 <__aeabi_ui2d+0x20>
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	0000041e 	.word	0x0000041e
 8002dd8:	800fffff 	.word	0x800fffff

08002ddc <__aeabi_f2d>:
 8002ddc:	0041      	lsls	r1, r0, #1
 8002dde:	0e09      	lsrs	r1, r1, #24
 8002de0:	1c4b      	adds	r3, r1, #1
 8002de2:	b570      	push	{r4, r5, r6, lr}
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	0246      	lsls	r6, r0, #9
 8002de8:	0a75      	lsrs	r5, r6, #9
 8002dea:	0fc4      	lsrs	r4, r0, #31
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	dd14      	ble.n	8002e1a <__aeabi_f2d+0x3e>
 8002df0:	23e0      	movs	r3, #224	; 0xe0
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	076d      	lsls	r5, r5, #29
 8002df6:	0b36      	lsrs	r6, r6, #12
 8002df8:	18cb      	adds	r3, r1, r3
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	0d0a      	lsrs	r2, r1, #20
 8002dfe:	0028      	movs	r0, r5
 8002e00:	0512      	lsls	r2, r2, #20
 8002e02:	4d1c      	ldr	r5, [pc, #112]	; (8002e74 <__aeabi_f2d+0x98>)
 8002e04:	4332      	orrs	r2, r6
 8002e06:	055b      	lsls	r3, r3, #21
 8002e08:	402a      	ands	r2, r5
 8002e0a:	085b      	lsrs	r3, r3, #1
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	07e4      	lsls	r4, r4, #31
 8002e12:	085b      	lsrs	r3, r3, #1
 8002e14:	4323      	orrs	r3, r4
 8002e16:	0019      	movs	r1, r3
 8002e18:	bd70      	pop	{r4, r5, r6, pc}
 8002e1a:	2900      	cmp	r1, #0
 8002e1c:	d114      	bne.n	8002e48 <__aeabi_f2d+0x6c>
 8002e1e:	2d00      	cmp	r5, #0
 8002e20:	d01e      	beq.n	8002e60 <__aeabi_f2d+0x84>
 8002e22:	0028      	movs	r0, r5
 8002e24:	f000 f82c 	bl	8002e80 <__clzsi2>
 8002e28:	280a      	cmp	r0, #10
 8002e2a:	dc1c      	bgt.n	8002e66 <__aeabi_f2d+0x8a>
 8002e2c:	230b      	movs	r3, #11
 8002e2e:	002a      	movs	r2, r5
 8002e30:	1a1b      	subs	r3, r3, r0
 8002e32:	40da      	lsrs	r2, r3
 8002e34:	0003      	movs	r3, r0
 8002e36:	3315      	adds	r3, #21
 8002e38:	409d      	lsls	r5, r3
 8002e3a:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <__aeabi_f2d+0x9c>)
 8002e3c:	0312      	lsls	r2, r2, #12
 8002e3e:	1a1b      	subs	r3, r3, r0
 8002e40:	055b      	lsls	r3, r3, #21
 8002e42:	0b16      	lsrs	r6, r2, #12
 8002e44:	0d5b      	lsrs	r3, r3, #21
 8002e46:	e7d8      	b.n	8002dfa <__aeabi_f2d+0x1e>
 8002e48:	2d00      	cmp	r5, #0
 8002e4a:	d006      	beq.n	8002e5a <__aeabi_f2d+0x7e>
 8002e4c:	0b32      	lsrs	r2, r6, #12
 8002e4e:	2680      	movs	r6, #128	; 0x80
 8002e50:	0336      	lsls	r6, r6, #12
 8002e52:	076d      	lsls	r5, r5, #29
 8002e54:	4316      	orrs	r6, r2
 8002e56:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <__aeabi_f2d+0xa0>)
 8002e58:	e7cf      	b.n	8002dfa <__aeabi_f2d+0x1e>
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <__aeabi_f2d+0xa0>)
 8002e5c:	2600      	movs	r6, #0
 8002e5e:	e7cc      	b.n	8002dfa <__aeabi_f2d+0x1e>
 8002e60:	2300      	movs	r3, #0
 8002e62:	2600      	movs	r6, #0
 8002e64:	e7c9      	b.n	8002dfa <__aeabi_f2d+0x1e>
 8002e66:	0003      	movs	r3, r0
 8002e68:	002a      	movs	r2, r5
 8002e6a:	3b0b      	subs	r3, #11
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	2500      	movs	r5, #0
 8002e70:	e7e3      	b.n	8002e3a <__aeabi_f2d+0x5e>
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	800fffff 	.word	0x800fffff
 8002e78:	00000389 	.word	0x00000389
 8002e7c:	000007ff 	.word	0x000007ff

08002e80 <__clzsi2>:
 8002e80:	211c      	movs	r1, #28
 8002e82:	2301      	movs	r3, #1
 8002e84:	041b      	lsls	r3, r3, #16
 8002e86:	4298      	cmp	r0, r3
 8002e88:	d301      	bcc.n	8002e8e <__clzsi2+0xe>
 8002e8a:	0c00      	lsrs	r0, r0, #16
 8002e8c:	3910      	subs	r1, #16
 8002e8e:	0a1b      	lsrs	r3, r3, #8
 8002e90:	4298      	cmp	r0, r3
 8002e92:	d301      	bcc.n	8002e98 <__clzsi2+0x18>
 8002e94:	0a00      	lsrs	r0, r0, #8
 8002e96:	3908      	subs	r1, #8
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	4298      	cmp	r0, r3
 8002e9c:	d301      	bcc.n	8002ea2 <__clzsi2+0x22>
 8002e9e:	0900      	lsrs	r0, r0, #4
 8002ea0:	3904      	subs	r1, #4
 8002ea2:	a202      	add	r2, pc, #8	; (adr r2, 8002eac <__clzsi2+0x2c>)
 8002ea4:	5c10      	ldrb	r0, [r2, r0]
 8002ea6:	1840      	adds	r0, r0, r1
 8002ea8:	4770      	bx	lr
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	02020304 	.word	0x02020304
 8002eb0:	01010101 	.word	0x01010101
	...

08002ebc <__clzdi2>:
 8002ebc:	b510      	push	{r4, lr}
 8002ebe:	2900      	cmp	r1, #0
 8002ec0:	d103      	bne.n	8002eca <__clzdi2+0xe>
 8002ec2:	f7ff ffdd 	bl	8002e80 <__clzsi2>
 8002ec6:	3020      	adds	r0, #32
 8002ec8:	e002      	b.n	8002ed0 <__clzdi2+0x14>
 8002eca:	1c08      	adds	r0, r1, #0
 8002ecc:	f7ff ffd8 	bl	8002e80 <__clzsi2>
 8002ed0:	bd10      	pop	{r4, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)

08002ed4 <__divdi3>:
 8002ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ed6:	464e      	mov	r6, r9
 8002ed8:	4657      	mov	r7, sl
 8002eda:	46de      	mov	lr, fp
 8002edc:	4645      	mov	r5, r8
 8002ede:	b5e0      	push	{r5, r6, r7, lr}
 8002ee0:	000f      	movs	r7, r1
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	0006      	movs	r6, r0
 8002ee8:	4689      	mov	r9, r1
 8002eea:	2f00      	cmp	r7, #0
 8002eec:	da06      	bge.n	8002efc <__divdi3+0x28>
 8002eee:	0039      	movs	r1, r7
 8002ef0:	2700      	movs	r7, #0
 8002ef2:	4246      	negs	r6, r0
 8002ef4:	418f      	sbcs	r7, r1
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	4249      	negs	r1, r1
 8002efa:	4689      	mov	r9, r1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	da07      	bge.n	8002f10 <__divdi3+0x3c>
 8002f00:	4649      	mov	r1, r9
 8002f02:	43c9      	mvns	r1, r1
 8002f04:	0010      	movs	r0, r2
 8002f06:	4689      	mov	r9, r1
 8002f08:	0019      	movs	r1, r3
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	4242      	negs	r2, r0
 8002f0e:	418b      	sbcs	r3, r1
 8002f10:	0034      	movs	r4, r6
 8002f12:	003d      	movs	r5, r7
 8002f14:	4692      	mov	sl, r2
 8002f16:	4698      	mov	r8, r3
 8002f18:	42bb      	cmp	r3, r7
 8002f1a:	d869      	bhi.n	8002ff0 <__divdi3+0x11c>
 8002f1c:	d066      	beq.n	8002fec <__divdi3+0x118>
 8002f1e:	4641      	mov	r1, r8
 8002f20:	4650      	mov	r0, sl
 8002f22:	f7ff ffcb 	bl	8002ebc <__clzdi2>
 8002f26:	4683      	mov	fp, r0
 8002f28:	0039      	movs	r1, r7
 8002f2a:	0030      	movs	r0, r6
 8002f2c:	f7ff ffc6 	bl	8002ebc <__clzdi2>
 8002f30:	465b      	mov	r3, fp
 8002f32:	1a1b      	subs	r3, r3, r0
 8002f34:	469c      	mov	ip, r3
 8002f36:	3b20      	subs	r3, #32
 8002f38:	469b      	mov	fp, r3
 8002f3a:	d500      	bpl.n	8002f3e <__divdi3+0x6a>
 8002f3c:	e075      	b.n	800302a <__divdi3+0x156>
 8002f3e:	4651      	mov	r1, sl
 8002f40:	4658      	mov	r0, fp
 8002f42:	4081      	lsls	r1, r0
 8002f44:	000b      	movs	r3, r1
 8002f46:	4651      	mov	r1, sl
 8002f48:	4660      	mov	r0, ip
 8002f4a:	4081      	lsls	r1, r0
 8002f4c:	000a      	movs	r2, r1
 8002f4e:	42bb      	cmp	r3, r7
 8002f50:	d861      	bhi.n	8003016 <__divdi3+0x142>
 8002f52:	d05e      	beq.n	8003012 <__divdi3+0x13e>
 8002f54:	0034      	movs	r4, r6
 8002f56:	003d      	movs	r5, r7
 8002f58:	4659      	mov	r1, fp
 8002f5a:	1aa4      	subs	r4, r4, r2
 8002f5c:	419d      	sbcs	r5, r3
 8002f5e:	2900      	cmp	r1, #0
 8002f60:	da00      	bge.n	8002f64 <__divdi3+0x90>
 8002f62:	e07a      	b.n	800305a <__divdi3+0x186>
 8002f64:	2100      	movs	r1, #0
 8002f66:	2000      	movs	r0, #0
 8002f68:	2601      	movs	r6, #1
 8002f6a:	9000      	str	r0, [sp, #0]
 8002f6c:	9101      	str	r1, [sp, #4]
 8002f6e:	4659      	mov	r1, fp
 8002f70:	408e      	lsls	r6, r1
 8002f72:	9601      	str	r6, [sp, #4]
 8002f74:	4661      	mov	r1, ip
 8002f76:	2601      	movs	r6, #1
 8002f78:	408e      	lsls	r6, r1
 8002f7a:	4661      	mov	r1, ip
 8002f7c:	9600      	str	r6, [sp, #0]
 8002f7e:	2900      	cmp	r1, #0
 8002f80:	d050      	beq.n	8003024 <__divdi3+0x150>
 8002f82:	07d9      	lsls	r1, r3, #31
 8002f84:	0856      	lsrs	r6, r2, #1
 8002f86:	085f      	lsrs	r7, r3, #1
 8002f88:	430e      	orrs	r6, r1
 8002f8a:	4663      	mov	r3, ip
 8002f8c:	e00e      	b.n	8002fac <__divdi3+0xd8>
 8002f8e:	42af      	cmp	r7, r5
 8002f90:	d101      	bne.n	8002f96 <__divdi3+0xc2>
 8002f92:	42a6      	cmp	r6, r4
 8002f94:	d80c      	bhi.n	8002fb0 <__divdi3+0xdc>
 8002f96:	1ba4      	subs	r4, r4, r6
 8002f98:	41bd      	sbcs	r5, r7
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	1924      	adds	r4, r4, r4
 8002f9e:	416d      	adcs	r5, r5
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	1864      	adds	r4, r4, r1
 8002fa6:	4155      	adcs	r5, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d006      	beq.n	8002fba <__divdi3+0xe6>
 8002fac:	42af      	cmp	r7, r5
 8002fae:	d9ee      	bls.n	8002f8e <__divdi3+0xba>
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	1924      	adds	r4, r4, r4
 8002fb4:	416d      	adcs	r5, r5
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f8      	bne.n	8002fac <__divdi3+0xd8>
 8002fba:	9800      	ldr	r0, [sp, #0]
 8002fbc:	9901      	ldr	r1, [sp, #4]
 8002fbe:	465b      	mov	r3, fp
 8002fc0:	1900      	adds	r0, r0, r4
 8002fc2:	4169      	adcs	r1, r5
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	db3d      	blt.n	8003044 <__divdi3+0x170>
 8002fc8:	002e      	movs	r6, r5
 8002fca:	40de      	lsrs	r6, r3
 8002fcc:	4663      	mov	r3, ip
 8002fce:	002c      	movs	r4, r5
 8002fd0:	40dc      	lsrs	r4, r3
 8002fd2:	465b      	mov	r3, fp
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	db4b      	blt.n	8003070 <__divdi3+0x19c>
 8002fd8:	0034      	movs	r4, r6
 8002fda:	465d      	mov	r5, fp
 8002fdc:	40ac      	lsls	r4, r5
 8002fde:	0023      	movs	r3, r4
 8002fe0:	4664      	mov	r4, ip
 8002fe2:	40a6      	lsls	r6, r4
 8002fe4:	0032      	movs	r2, r6
 8002fe6:	1a80      	subs	r0, r0, r2
 8002fe8:	4199      	sbcs	r1, r3
 8002fea:	e003      	b.n	8002ff4 <__divdi3+0x120>
 8002fec:	42b2      	cmp	r2, r6
 8002fee:	d996      	bls.n	8002f1e <__divdi3+0x4a>
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	464b      	mov	r3, r9
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <__divdi3+0x130>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	000c      	movs	r4, r1
 8002ffe:	2100      	movs	r1, #0
 8003000:	4258      	negs	r0, r3
 8003002:	41a1      	sbcs	r1, r4
 8003004:	b003      	add	sp, #12
 8003006:	bc3c      	pop	{r2, r3, r4, r5}
 8003008:	4690      	mov	r8, r2
 800300a:	4699      	mov	r9, r3
 800300c:	46a2      	mov	sl, r4
 800300e:	46ab      	mov	fp, r5
 8003010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003012:	42b1      	cmp	r1, r6
 8003014:	d99e      	bls.n	8002f54 <__divdi3+0x80>
 8003016:	2100      	movs	r1, #0
 8003018:	2000      	movs	r0, #0
 800301a:	9000      	str	r0, [sp, #0]
 800301c:	9101      	str	r1, [sp, #4]
 800301e:	4661      	mov	r1, ip
 8003020:	2900      	cmp	r1, #0
 8003022:	d1ae      	bne.n	8002f82 <__divdi3+0xae>
 8003024:	9800      	ldr	r0, [sp, #0]
 8003026:	9901      	ldr	r1, [sp, #4]
 8003028:	e7e4      	b.n	8002ff4 <__divdi3+0x120>
 800302a:	2320      	movs	r3, #32
 800302c:	4662      	mov	r2, ip
 800302e:	4651      	mov	r1, sl
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	40d9      	lsrs	r1, r3
 8003034:	4640      	mov	r0, r8
 8003036:	9100      	str	r1, [sp, #0]
 8003038:	4661      	mov	r1, ip
 800303a:	4088      	lsls	r0, r1
 800303c:	0003      	movs	r3, r0
 800303e:	9900      	ldr	r1, [sp, #0]
 8003040:	430b      	orrs	r3, r1
 8003042:	e780      	b.n	8002f46 <__divdi3+0x72>
 8003044:	4662      	mov	r2, ip
 8003046:	2320      	movs	r3, #32
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	002a      	movs	r2, r5
 800304c:	409a      	lsls	r2, r3
 800304e:	0026      	movs	r6, r4
 8003050:	0013      	movs	r3, r2
 8003052:	4662      	mov	r2, ip
 8003054:	40d6      	lsrs	r6, r2
 8003056:	431e      	orrs	r6, r3
 8003058:	e7b8      	b.n	8002fcc <__divdi3+0xf8>
 800305a:	4661      	mov	r1, ip
 800305c:	2620      	movs	r6, #32
 800305e:	2701      	movs	r7, #1
 8003060:	1a76      	subs	r6, r6, r1
 8003062:	2000      	movs	r0, #0
 8003064:	2100      	movs	r1, #0
 8003066:	40f7      	lsrs	r7, r6
 8003068:	9000      	str	r0, [sp, #0]
 800306a:	9101      	str	r1, [sp, #4]
 800306c:	9701      	str	r7, [sp, #4]
 800306e:	e781      	b.n	8002f74 <__divdi3+0xa0>
 8003070:	4667      	mov	r7, ip
 8003072:	2320      	movs	r3, #32
 8003074:	4662      	mov	r2, ip
 8003076:	0035      	movs	r5, r6
 8003078:	40bc      	lsls	r4, r7
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	40dd      	lsrs	r5, r3
 800307e:	0023      	movs	r3, r4
 8003080:	432b      	orrs	r3, r5
 8003082:	e7ad      	b.n	8002fe0 <__divdi3+0x10c>

08003084 <BMEinit>:
BMP280_HandleTypedef bmp280;
I2C_HandleTypeDef hi2c1;
float pres, temp, hum;

void BMEinit()
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 2 */
	  bmp280_init_default_params(&bmp280.params);
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <BMEinit+0x2c>)
 800308a:	0018      	movs	r0, r3
 800308c:	f000 f838 	bl	8003100 <bmp280_init_default_params>
	  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8003090:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <BMEinit+0x30>)
 8003092:	2276      	movs	r2, #118	; 0x76
 8003094:	849a      	strh	r2, [r3, #36]	; 0x24
	  bmp280.i2c = &hi2c1;
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <BMEinit+0x30>)
 8003098:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <BMEinit+0x34>)
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
     /*bme INIt*/
	  bmp280_init(&bmp280, &bmp280.params);
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <BMEinit+0x2c>)
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <BMEinit+0x30>)
 80030a0:	0011      	movs	r1, r2
 80030a2:	0018      	movs	r0, r3
 80030a4:	f000 f9c2 	bl	800342c <bmp280_init>

}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	200014a0 	.word	0x200014a0
 80030b4:	20001474 	.word	0x20001474
 80030b8:	20001424 	.word	0x20001424

080030bc <BMERead>:
void BMERead(sensorBme280_t *sensor_data)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	 /* USER CODE BEGIN 3 */
		 	  	bmp280_read_float(&bmp280, &temp, &pres, &hum);
 80030c4:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <BMERead+0x34>)
 80030c6:	4a0b      	ldr	r2, [pc, #44]	; (80030f4 <BMERead+0x38>)
 80030c8:	490b      	ldr	r1, [pc, #44]	; (80030f8 <BMERead+0x3c>)
 80030ca:	480c      	ldr	r0, [pc, #48]	; (80030fc <BMERead+0x40>)
 80030cc:	f000 fd20 	bl	8003b10 <bmp280_read_float>
		 	  	sensor_data->pressureBME=pres;
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <BMERead+0x38>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	601a      	str	r2, [r3, #0]
		 	  	sensor_data->temperatureBME=temp;
 80030d8:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <BMERead+0x3c>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	605a      	str	r2, [r3, #4]
		 	  	sensor_data->humidityBME=hum;
 80030e0:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <BMERead+0x34>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	609a      	str	r2, [r3, #8]

	  /* USER CODE END 3 */
}
 80030e8:	46c0      	nop			; (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b002      	add	sp, #8
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	2000141c 	.word	0x2000141c
 80030f4:	20001420 	.word	0x20001420
 80030f8:	20001470 	.word	0x20001470
 80030fc:	20001474 	.word	0x20001474

08003100 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2203      	movs	r2, #3
 800310c:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2203      	movs	r2, #3
 8003118:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2203      	movs	r2, #3
 800311e:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2203      	movs	r2, #3
 8003124:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2203      	movs	r2, #3
 800312a:	715a      	strb	r2, [r3, #5]
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b002      	add	sp, #8
 8003132:	bd80      	pop	{r7, pc}

08003134 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b08b      	sub	sp, #44	; 0x2c
 8003138:	af04      	add	r7, sp, #16
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	240b      	movs	r4, #11
 8003140:	193b      	adds	r3, r7, r4
 8003142:	1c0a      	adds	r2, r1, #0
 8003144:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800314a:	2116      	movs	r1, #22
 800314c:	187a      	adds	r2, r7, r1
 800314e:	18db      	adds	r3, r3, r3
 8003150:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003156:	193b      	adds	r3, r7, r4
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	b29a      	uxth	r2, r3
 800315c:	187b      	adds	r3, r7, r1
 800315e:	8819      	ldrh	r1, [r3, #0]
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <read_register16+0x6c>)
 8003162:	9302      	str	r3, [sp, #8]
 8003164:	2302      	movs	r3, #2
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	2314      	movs	r3, #20
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2301      	movs	r3, #1
 8003170:	f007 f906 	bl	800a380 <HAL_I2C_Mem_Read>
 8003174:	1e03      	subs	r3, r0, #0
 8003176:	d10e      	bne.n	8003196 <read_register16+0x62>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8003178:	2114      	movs	r1, #20
 800317a:	187b      	adds	r3, r7, r1
 800317c:	785b      	ldrb	r3, [r3, #1]
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	b21a      	sxth	r2, r3
 8003182:	187b      	adds	r3, r7, r1
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	b21b      	sxth	r3, r3
 8003188:	4313      	orrs	r3, r2
 800318a:	b21b      	sxth	r3, r3
 800318c:	b29a      	uxth	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	801a      	strh	r2, [r3, #0]
		return true;
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <read_register16+0x64>
	} else
		return false;
 8003196:	2300      	movs	r3, #0

}
 8003198:	0018      	movs	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	b007      	add	sp, #28
 800319e:	bd90      	pop	{r4, r7, pc}
 80031a0:	00001388 	.word	0x00001388

080031a4 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80031a4:	b5b0      	push	{r4, r5, r7, lr}
 80031a6:	b08a      	sub	sp, #40	; 0x28
 80031a8:	af04      	add	r7, sp, #16
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	0008      	movs	r0, r1
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	0019      	movs	r1, r3
 80031b2:	240b      	movs	r4, #11
 80031b4:	193b      	adds	r3, r7, r4
 80031b6:	1c02      	adds	r2, r0, #0
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	250a      	movs	r5, #10
 80031bc:	197b      	adds	r3, r7, r5
 80031be:	1c0a      	adds	r2, r1, #0
 80031c0:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80031c6:	2116      	movs	r1, #22
 80031c8:	187a      	adds	r2, r7, r1
 80031ca:	18db      	adds	r3, r3, r3
 80031cc:	8013      	strh	r3, [r2, #0]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80031d2:	193b      	adds	r3, r7, r4
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	b29c      	uxth	r4, r3
 80031d8:	197b      	adds	r3, r7, r5
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	187a      	adds	r2, r7, r1
 80031e0:	8811      	ldrh	r1, [r2, #0]
 80031e2:	4a09      	ldr	r2, [pc, #36]	; (8003208 <read_data+0x64>)
 80031e4:	9202      	str	r2, [sp, #8]
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2301      	movs	r3, #1
 80031ee:	0022      	movs	r2, r4
 80031f0:	f007 f8c6 	bl	800a380 <HAL_I2C_Mem_Read>
 80031f4:	1e03      	subs	r3, r0, #0
 80031f6:	d101      	bne.n	80031fc <read_data+0x58>
		return 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e000      	b.n	80031fe <read_data+0x5a>
	else
		return 1;
 80031fc:	2301      	movs	r3, #1

}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	b006      	add	sp, #24
 8003204:	bdb0      	pop	{r4, r5, r7, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	00001388 	.word	0x00001388

0800320c <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2188      	movs	r1, #136	; 0x88
 800321a:	0018      	movs	r0, r3
 800321c:	f7ff ff8a 	bl	8003134 <read_register16>
 8003220:	1e03      	subs	r3, r0, #0
 8003222:	d100      	bne.n	8003226 <read_calibration_data+0x1a>
 8003224:	e06d      	b.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	1c9a      	adds	r2, r3, #2
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	218a      	movs	r1, #138	; 0x8a
 800322e:	0018      	movs	r0, r3
 8003230:	f7ff ff80 	bl	8003134 <read_register16>
 8003234:	1e03      	subs	r3, r0, #0
 8003236:	d100      	bne.n	800323a <read_calibration_data+0x2e>
 8003238:	e063      	b.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	1d1a      	adds	r2, r3, #4
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	218c      	movs	r1, #140	; 0x8c
 8003242:	0018      	movs	r0, r3
 8003244:	f7ff ff76 	bl	8003134 <read_register16>
 8003248:	1e03      	subs	r3, r0, #0
 800324a:	d05a      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	1d9a      	adds	r2, r3, #6
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	218e      	movs	r1, #142	; 0x8e
 8003254:	0018      	movs	r0, r3
 8003256:	f7ff ff6d 	bl	8003134 <read_register16>
 800325a:	1e03      	subs	r3, r0, #0
 800325c:	d051      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3308      	adds	r3, #8
 8003262:	001a      	movs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2190      	movs	r1, #144	; 0x90
 8003268:	0018      	movs	r0, r3
 800326a:	f7ff ff63 	bl	8003134 <read_register16>
 800326e:	1e03      	subs	r3, r0, #0
 8003270:	d047      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	330a      	adds	r3, #10
 8003276:	001a      	movs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2192      	movs	r1, #146	; 0x92
 800327c:	0018      	movs	r0, r3
 800327e:	f7ff ff59 	bl	8003134 <read_register16>
 8003282:	1e03      	subs	r3, r0, #0
 8003284:	d03d      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	330c      	adds	r3, #12
 800328a:	001a      	movs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2194      	movs	r1, #148	; 0x94
 8003290:	0018      	movs	r0, r3
 8003292:	f7ff ff4f 	bl	8003134 <read_register16>
 8003296:	1e03      	subs	r3, r0, #0
 8003298:	d033      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	330e      	adds	r3, #14
 800329e:	001a      	movs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2196      	movs	r1, #150	; 0x96
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7ff ff45 	bl	8003134 <read_register16>
 80032aa:	1e03      	subs	r3, r0, #0
 80032ac:	d029      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3310      	adds	r3, #16
 80032b2:	001a      	movs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2198      	movs	r1, #152	; 0x98
 80032b8:	0018      	movs	r0, r3
 80032ba:	f7ff ff3b 	bl	8003134 <read_register16>
 80032be:	1e03      	subs	r3, r0, #0
 80032c0:	d01f      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3312      	adds	r3, #18
 80032c6:	001a      	movs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	219a      	movs	r1, #154	; 0x9a
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7ff ff31 	bl	8003134 <read_register16>
 80032d2:	1e03      	subs	r3, r0, #0
 80032d4:	d015      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3314      	adds	r3, #20
 80032da:	001a      	movs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	219c      	movs	r1, #156	; 0x9c
 80032e0:	0018      	movs	r0, r3
 80032e2:	f7ff ff27 	bl	8003134 <read_register16>
 80032e6:	1e03      	subs	r3, r0, #0
 80032e8:	d00b      	beq.n	8003302 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3316      	adds	r3, #22
 80032ee:	001a      	movs	r2, r3
			&& read_register16(dev, 0x9e,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	219e      	movs	r1, #158	; 0x9e
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7ff ff1d 	bl	8003134 <read_register16>
 80032fa:	1e03      	subs	r3, r0, #0
 80032fc:	d001      	beq.n	8003302 <read_calibration_data+0xf6>

		return true;
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <read_calibration_data+0xf8>
	}

	return false;
 8003302:	2300      	movs	r3, #0
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	b002      	add	sp, #8
 800330a:	bd80      	pop	{r7, pc}

0800330c <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3318      	adds	r3, #24
 8003318:	001a      	movs	r2, r3
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	2301      	movs	r3, #1
 800331e:	21a1      	movs	r1, #161	; 0xa1
 8003320:	f7ff ff40 	bl	80031a4 <read_data>
 8003324:	1e03      	subs	r3, r0, #0
 8003326:	d14d      	bne.n	80033c4 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	331a      	adds	r3, #26
 800332c:	001a      	movs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	21e1      	movs	r1, #225	; 0xe1
 8003332:	0018      	movs	r0, r3
 8003334:	f7ff fefe 	bl	8003134 <read_register16>
 8003338:	1e03      	subs	r3, r0, #0
 800333a:	d043      	beq.n	80033c4 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	331c      	adds	r3, #28
 8003340:	001a      	movs	r2, r3
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	2301      	movs	r3, #1
 8003346:	21e3      	movs	r1, #227	; 0xe3
 8003348:	f7ff ff2c 	bl	80031a4 <read_data>
 800334c:	1e03      	subs	r3, r0, #0
 800334e:	d139      	bne.n	80033c4 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe4, &h4)
 8003350:	230e      	movs	r3, #14
 8003352:	18fa      	adds	r2, r7, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	21e4      	movs	r1, #228	; 0xe4
 8003358:	0018      	movs	r0, r3
 800335a:	f7ff feeb 	bl	8003134 <read_register16>
 800335e:	1e03      	subs	r3, r0, #0
 8003360:	d030      	beq.n	80033c4 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe5, &h5)
 8003362:	230c      	movs	r3, #12
 8003364:	18fa      	adds	r2, r7, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	21e5      	movs	r1, #229	; 0xe5
 800336a:	0018      	movs	r0, r3
 800336c:	f7ff fee2 	bl	8003134 <read_register16>
 8003370:	1e03      	subs	r3, r0, #0
 8003372:	d027      	beq.n	80033c4 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3322      	adds	r3, #34	; 0x22
 8003378:	001a      	movs	r2, r3
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	2301      	movs	r3, #1
 800337e:	21e7      	movs	r1, #231	; 0xe7
 8003380:	f7ff ff10 	bl	80031a4 <read_data>
 8003384:	1e03      	subs	r3, r0, #0
 8003386:	d11d      	bne.n	80033c4 <read_hum_calibration_data+0xb8>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8003388:	210e      	movs	r1, #14
 800338a:	187b      	adds	r3, r7, r1
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	b21a      	sxth	r2, r3
 8003392:	23ff      	movs	r3, #255	; 0xff
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	4013      	ands	r3, r2
 8003398:	b21a      	sxth	r2, r3
 800339a:	187b      	adds	r3, r7, r1
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	121b      	asrs	r3, r3, #8
 80033a0:	b21b      	sxth	r3, r3
 80033a2:	210f      	movs	r1, #15
 80033a4:	400b      	ands	r3, r1
 80033a6:	b21b      	sxth	r3, r3
 80033a8:	4313      	orrs	r3, r2
 80033aa:	b21a      	sxth	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80033b0:	230c      	movs	r3, #12
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	091b      	lsrs	r3, r3, #4
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	b21a      	sxth	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	841a      	strh	r2, [r3, #32]

		return true;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <read_hum_calibration_data+0xba>
	}

	return false;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	0018      	movs	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b004      	add	sp, #16
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af04      	add	r7, sp, #16
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	0008      	movs	r0, r1
 80033da:	0011      	movs	r1, r2
 80033dc:	1cfb      	adds	r3, r7, #3
 80033de:	1c02      	adds	r2, r0, #0
 80033e0:	701a      	strb	r2, [r3, #0]
 80033e2:	1cbb      	adds	r3, r7, #2
 80033e4:	1c0a      	adds	r2, r1, #0
 80033e6:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80033ec:	210e      	movs	r1, #14
 80033ee:	187a      	adds	r2, r7, r1
 80033f0:	18db      	adds	r3, r3, r3
 80033f2:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80033f8:	1cfb      	adds	r3, r7, #3
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	187b      	adds	r3, r7, r1
 8003400:	8819      	ldrh	r1, [r3, #0]
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <write_register8+0x58>)
 8003404:	9302      	str	r3, [sp, #8]
 8003406:	2301      	movs	r3, #1
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	1cbb      	adds	r3, r7, #2
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	2301      	movs	r3, #1
 8003410:	f006 fe88 	bl	800a124 <HAL_I2C_Mem_Write>
 8003414:	1e03      	subs	r3, r0, #0
 8003416:	d101      	bne.n	800341c <write_register8+0x4c>
		return false;
 8003418:	2300      	movs	r3, #0
 800341a:	e000      	b.n	800341e <write_register8+0x4e>
	else
		return true;
 800341c:	2301      	movs	r3, #1
}
 800341e:	0018      	movs	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	b004      	add	sp, #16
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	00002710 	.word	0x00002710

0800342c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800343a:	2b76      	cmp	r3, #118	; 0x76
 800343c:	d005      	beq.n	800344a <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003442:	2b77      	cmp	r3, #119	; 0x77
 8003444:	d001      	beq.n	800344a <bmp280_init+0x1e>

		return false;
 8003446:	2300      	movs	r3, #0
 8003448:	e0a4      	b.n	8003594 <bmp280_init+0x168>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3332      	adds	r3, #50	; 0x32
 800344e:	001a      	movs	r2, r3
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	2301      	movs	r3, #1
 8003454:	21d0      	movs	r1, #208	; 0xd0
 8003456:	f7ff fea5 	bl	80031a4 <read_data>
 800345a:	1e03      	subs	r3, r0, #0
 800345c:	d001      	beq.n	8003462 <bmp280_init+0x36>
		return false;
 800345e:	2300      	movs	r3, #0
 8003460:	e098      	b.n	8003594 <bmp280_init+0x168>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2232      	movs	r2, #50	; 0x32
 8003466:	5c9b      	ldrb	r3, [r3, r2]
 8003468:	2b58      	cmp	r3, #88	; 0x58
 800346a:	d006      	beq.n	800347a <bmp280_init+0x4e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2232      	movs	r2, #50	; 0x32
 8003470:	5c9b      	ldrb	r3, [r3, r2]
 8003472:	2b60      	cmp	r3, #96	; 0x60
 8003474:	d001      	beq.n	800347a <bmp280_init+0x4e>

		return false;
 8003476:	2300      	movs	r3, #0
 8003478:	e08c      	b.n	8003594 <bmp280_init+0x168>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	22b6      	movs	r2, #182	; 0xb6
 800347e:	21e0      	movs	r1, #224	; 0xe0
 8003480:	0018      	movs	r0, r3
 8003482:	f7ff ffa5 	bl	80033d0 <write_register8>
 8003486:	1e03      	subs	r3, r0, #0
 8003488:	d001      	beq.n	800348e <bmp280_init+0x62>
		return false;
 800348a:	2300      	movs	r3, #0
 800348c:	e082      	b.n	8003594 <bmp280_init+0x168>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 800348e:	230c      	movs	r3, #12
 8003490:	18fa      	adds	r2, r7, r3
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	2301      	movs	r3, #1
 8003496:	21f3      	movs	r1, #243	; 0xf3
 8003498:	f7ff fe84 	bl	80031a4 <read_data>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d1f6      	bne.n	800348e <bmp280_init+0x62>
				&& (status & 1) == 0)
 80034a0:	230c      	movs	r3, #12
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	001a      	movs	r2, r3
 80034a8:	2301      	movs	r3, #1
 80034aa:	4013      	ands	r3, r2
 80034ac:	d1ef      	bne.n	800348e <bmp280_init+0x62>
			break;
	}

	if (!read_calibration_data(dev)) {
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7ff feab 	bl	800320c <read_calibration_data>
 80034b6:	0003      	movs	r3, r0
 80034b8:	001a      	movs	r2, r3
 80034ba:	2301      	movs	r3, #1
 80034bc:	4053      	eors	r3, r2
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d100      	bne.n	80034c6 <bmp280_init+0x9a>
 80034c4:	e001      	b.n	80034ca <bmp280_init+0x9e>
		return false;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e064      	b.n	8003594 <bmp280_init+0x168>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2232      	movs	r2, #50	; 0x32
 80034ce:	5c9b      	ldrb	r3, [r3, r2]
 80034d0:	2b60      	cmp	r3, #96	; 0x60
 80034d2:	d10c      	bne.n	80034ee <bmp280_init+0xc2>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	0018      	movs	r0, r3
 80034d8:	f7ff ff18 	bl	800330c <read_hum_calibration_data>
 80034dc:	0003      	movs	r3, r0
 80034de:	001a      	movs	r2, r3
 80034e0:	2301      	movs	r3, #1
 80034e2:	4053      	eors	r3, r2
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <bmp280_init+0xc2>
		return false;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e052      	b.n	8003594 <bmp280_init+0x168>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	795b      	ldrb	r3, [r3, #5]
 80034f2:	015b      	lsls	r3, r3, #5
 80034f4:	b25a      	sxtb	r2, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	785b      	ldrb	r3, [r3, #1]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	b25b      	sxtb	r3, r3
 80034fe:	4313      	orrs	r3, r2
 8003500:	b25a      	sxtb	r2, r3
 8003502:	210f      	movs	r1, #15
 8003504:	187b      	adds	r3, r7, r1
 8003506:	701a      	strb	r2, [r3, #0]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8003508:	187b      	adds	r3, r7, r1
 800350a:	781a      	ldrb	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	21f5      	movs	r1, #245	; 0xf5
 8003510:	0018      	movs	r0, r3
 8003512:	f7ff ff5d 	bl	80033d0 <write_register8>
 8003516:	1e03      	subs	r3, r0, #0
 8003518:	d001      	beq.n	800351e <bmp280_init+0xf2>
		return false;
 800351a:	2300      	movs	r3, #0
 800351c:	e03a      	b.n	8003594 <bmp280_init+0x168>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d102      	bne.n	800352c <bmp280_init+0x100>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	78db      	ldrb	r3, [r3, #3]
 8003530:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8003532:	b25a      	sxtb	r2, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	789b      	ldrb	r3, [r3, #2]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	b25b      	sxtb	r3, r3
 800353c:	4313      	orrs	r3, r2
 800353e:	b25a      	sxtb	r2, r3
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	b25b      	sxtb	r3, r3
 8003546:	4313      	orrs	r3, r2
 8003548:	b25a      	sxtb	r2, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800354a:	230e      	movs	r3, #14
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	701a      	strb	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2232      	movs	r2, #50	; 0x32
 8003554:	5c9b      	ldrb	r3, [r3, r2]
 8003556:	2b60      	cmp	r3, #96	; 0x60
 8003558:	d10f      	bne.n	800357a <bmp280_init+0x14e>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800355a:	210d      	movs	r1, #13
 800355c:	187b      	adds	r3, r7, r1
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	7912      	ldrb	r2, [r2, #4]
 8003562:	701a      	strb	r2, [r3, #0]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8003564:	187b      	adds	r3, r7, r1
 8003566:	781a      	ldrb	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	21f2      	movs	r1, #242	; 0xf2
 800356c:	0018      	movs	r0, r3
 800356e:	f7ff ff2f 	bl	80033d0 <write_register8>
 8003572:	1e03      	subs	r3, r0, #0
 8003574:	d001      	beq.n	800357a <bmp280_init+0x14e>
			return false;
 8003576:	2300      	movs	r3, #0
 8003578:	e00c      	b.n	8003594 <bmp280_init+0x168>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800357a:	230e      	movs	r3, #14
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	21f4      	movs	r1, #244	; 0xf4
 8003584:	0018      	movs	r0, r3
 8003586:	f7ff ff23 	bl	80033d0 <write_register8>
 800358a:	1e03      	subs	r3, r0, #0
 800358c:	d001      	beq.n	8003592 <bmp280_init+0x166>
		return false;
 800358e:	2300      	movs	r3, #0
 8003590:	e000      	b.n	8003594 <bmp280_init+0x168>
	}

	return true;
 8003592:	2301      	movs	r3, #1
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b004      	add	sp, #16
 800359a:	bd80      	pop	{r7, pc}

0800359c <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	10da      	asrs	r2, r3, #3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	2102      	movs	r1, #2
 80035b8:	5e52      	ldrsh	r2, [r2, r1]
 80035ba:	4353      	muls	r3, r2
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80035bc:	12db      	asrs	r3, r3, #11
 80035be:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	111b      	asrs	r3, r3, #4
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	8812      	ldrh	r2, [r2, #0]
 80035c8:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	1112      	asrs	r2, r2, #4
 80035ce:	68f9      	ldr	r1, [r7, #12]
 80035d0:	8809      	ldrh	r1, [r1, #0]
 80035d2:	1a52      	subs	r2, r2, r1
 80035d4:	4353      	muls	r3, r2
 80035d6:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	2104      	movs	r1, #4
 80035dc:	5e52      	ldrsh	r2, [r2, r1]
 80035de:	4353      	muls	r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80035e0:	139b      	asrs	r3, r3, #14
 80035e2:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	18d2      	adds	r2, r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	0013      	movs	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	189b      	adds	r3, r3, r2
 80035f8:	3380      	adds	r3, #128	; 0x80
 80035fa:	121b      	asrs	r3, r3, #8
}
 80035fc:	0018      	movs	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	b006      	add	sp, #24
 8003602:	bd80      	pop	{r7, pc}

08003604 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8003604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003606:	b0af      	sub	sp, #188	; 0xbc
 8003608:	af00      	add	r7, sp, #0
 800360a:	239c      	movs	r3, #156	; 0x9c
 800360c:	18fc      	adds	r4, r7, r3
 800360e:	6020      	str	r0, [r4, #0]
 8003610:	2098      	movs	r0, #152	; 0x98
 8003612:	1838      	adds	r0, r7, r0
 8003614:	6001      	str	r1, [r0, #0]
 8003616:	2194      	movs	r1, #148	; 0x94
 8003618:	1878      	adds	r0, r7, r1
 800361a:	6002      	str	r2, [r0, #0]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800361c:	187a      	adds	r2, r7, r1
 800361e:	6813      	ldr	r3, [r2, #0]
 8003620:	65bb      	str	r3, [r7, #88]	; 0x58
 8003622:	17db      	asrs	r3, r3, #31
 8003624:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003626:	4bd0      	ldr	r3, [pc, #832]	; (8003968 <compensate_pressure+0x364>)
 8003628:	2401      	movs	r4, #1
 800362a:	4264      	negs	r4, r4
 800362c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800362e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003630:	18c9      	adds	r1, r1, r3
 8003632:	4162      	adcs	r2, r4
 8003634:	000b      	movs	r3, r1
 8003636:	0014      	movs	r4, r2
 8003638:	21b0      	movs	r1, #176	; 0xb0
 800363a:	187a      	adds	r2, r7, r1
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	6054      	str	r4, [r2, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8003640:	187a      	adds	r2, r7, r1
 8003642:	6853      	ldr	r3, [r2, #4]
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	1878      	adds	r0, r7, r1
 8003648:	6841      	ldr	r1, [r0, #4]
 800364a:	6800      	ldr	r0, [r0, #0]
 800364c:	f7fc ff8e 	bl	800056c <__aeabi_lmul>
 8003650:	0003      	movs	r3, r0
 8003652:	000c      	movs	r4, r1
 8003654:	0018      	movs	r0, r3
 8003656:	0021      	movs	r1, r4
 8003658:	239c      	movs	r3, #156	; 0x9c
 800365a:	18fa      	adds	r2, r7, r3
 800365c:	6813      	ldr	r3, [r2, #0]
 800365e:	2210      	movs	r2, #16
 8003660:	5e9b      	ldrsh	r3, [r3, r2]
 8003662:	653b      	str	r3, [r7, #80]	; 0x50
 8003664:	17db      	asrs	r3, r3, #31
 8003666:	657b      	str	r3, [r7, #84]	; 0x54
 8003668:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800366a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800366c:	f7fc ff7e 	bl	800056c <__aeabi_lmul>
 8003670:	0003      	movs	r3, r0
 8003672:	000c      	movs	r4, r1
 8003674:	20a8      	movs	r0, #168	; 0xa8
 8003676:	183a      	adds	r2, r7, r0
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	6054      	str	r4, [r2, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800367c:	239c      	movs	r3, #156	; 0x9c
 800367e:	18fa      	adds	r2, r7, r3
 8003680:	6813      	ldr	r3, [r2, #0]
 8003682:	220e      	movs	r2, #14
 8003684:	5e9b      	ldrsh	r3, [r3, r2]
 8003686:	64bb      	str	r3, [r7, #72]	; 0x48
 8003688:	17db      	asrs	r3, r3, #31
 800368a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800368c:	21b0      	movs	r1, #176	; 0xb0
 800368e:	187a      	adds	r2, r7, r1
 8003690:	6853      	ldr	r3, [r2, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003696:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003698:	f7fc ff68 	bl	800056c <__aeabi_lmul>
 800369c:	0003      	movs	r3, r0
 800369e:	000c      	movs	r4, r1
 80036a0:	0bda      	lsrs	r2, r3, #15
 80036a2:	0466      	lsls	r6, r4, #17
 80036a4:	4316      	orrs	r6, r2
 80036a6:	045d      	lsls	r5, r3, #17
 80036a8:	20a8      	movs	r0, #168	; 0xa8
 80036aa:	183a      	adds	r2, r7, r0
 80036ac:	6813      	ldr	r3, [r2, #0]
 80036ae:	6854      	ldr	r4, [r2, #4]
 80036b0:	195b      	adds	r3, r3, r5
 80036b2:	4174      	adcs	r4, r6
 80036b4:	183a      	adds	r2, r7, r0
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	6054      	str	r4, [r2, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80036ba:	269c      	movs	r6, #156	; 0x9c
 80036bc:	19bb      	adds	r3, r7, r6
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	220c      	movs	r2, #12
 80036c2:	5e9b      	ldrsh	r3, [r3, r2]
 80036c4:	643b      	str	r3, [r7, #64]	; 0x40
 80036c6:	17db      	asrs	r3, r3, #31
 80036c8:	647b      	str	r3, [r7, #68]	; 0x44
 80036ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d0:	2300      	movs	r3, #0
 80036d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80036d4:	183b      	adds	r3, r7, r0
 80036d6:	685c      	ldr	r4, [r3, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036de:	185b      	adds	r3, r3, r1
 80036e0:	4154      	adcs	r4, r2
 80036e2:	183a      	adds	r2, r7, r0
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	6054      	str	r4, [r2, #4]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80036e8:	25b0      	movs	r5, #176	; 0xb0
 80036ea:	197b      	adds	r3, r7, r5
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	1979      	adds	r1, r7, r5
 80036f2:	6808      	ldr	r0, [r1, #0]
 80036f4:	6849      	ldr	r1, [r1, #4]
 80036f6:	f7fc ff39 	bl	800056c <__aeabi_lmul>
 80036fa:	0003      	movs	r3, r0
 80036fc:	000c      	movs	r4, r1
 80036fe:	0018      	movs	r0, r3
 8003700:	0021      	movs	r1, r4
 8003702:	19bb      	adds	r3, r7, r6
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	220a      	movs	r2, #10
 8003708:	5e9b      	ldrsh	r3, [r3, r2]
 800370a:	633b      	str	r3, [r7, #48]	; 0x30
 800370c:	17db      	asrs	r3, r3, #31
 800370e:	637b      	str	r3, [r7, #52]	; 0x34
 8003710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003714:	f7fc ff2a 	bl	800056c <__aeabi_lmul>
 8003718:	0003      	movs	r3, r0
 800371a:	000c      	movs	r4, r1
 800371c:	0622      	lsls	r2, r4, #24
 800371e:	4694      	mov	ip, r2
 8003720:	0a19      	lsrs	r1, r3, #8
 8003722:	2088      	movs	r0, #136	; 0x88
 8003724:	183a      	adds	r2, r7, r0
 8003726:	6011      	str	r1, [r2, #0]
 8003728:	1839      	adds	r1, r7, r0
 800372a:	6809      	ldr	r1, [r1, #0]
 800372c:	4662      	mov	r2, ip
 800372e:	4311      	orrs	r1, r2
 8003730:	183a      	adds	r2, r7, r0
 8003732:	6011      	str	r1, [r2, #0]
 8003734:	1223      	asrs	r3, r4, #8
 8003736:	228c      	movs	r2, #140	; 0x8c
 8003738:	18ba      	adds	r2, r7, r2
 800373a:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800373c:	19bb      	adds	r3, r7, r6
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2208      	movs	r2, #8
 8003742:	5e9b      	ldrsh	r3, [r3, r2]
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28
 8003746:	17db      	asrs	r3, r3, #31
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374a:	197b      	adds	r3, r7, r5
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003752:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003754:	f7fc ff0a 	bl	800056c <__aeabi_lmul>
 8003758:	0003      	movs	r3, r0
 800375a:	000c      	movs	r4, r1
 800375c:	0d1a      	lsrs	r2, r3, #20
 800375e:	4694      	mov	ip, r2
 8003760:	0321      	lsls	r1, r4, #12
 8003762:	2084      	movs	r0, #132	; 0x84
 8003764:	183a      	adds	r2, r7, r0
 8003766:	6011      	str	r1, [r2, #0]
 8003768:	0001      	movs	r1, r0
 800376a:	0008      	movs	r0, r1
 800376c:	1879      	adds	r1, r7, r1
 800376e:	6809      	ldr	r1, [r1, #0]
 8003770:	4662      	mov	r2, ip
 8003772:	4311      	orrs	r1, r2
 8003774:	0002      	movs	r2, r0
 8003776:	18ba      	adds	r2, r7, r2
 8003778:	6011      	str	r1, [r2, #0]
 800377a:	031b      	lsls	r3, r3, #12
 800377c:	2280      	movs	r2, #128	; 0x80
 800377e:	18b9      	adds	r1, r7, r2
 8003780:	600b      	str	r3, [r1, #0]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8003782:	2088      	movs	r0, #136	; 0x88
 8003784:	183b      	adds	r3, r7, r0
 8003786:	685c      	ldr	r4, [r3, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	18ba      	adds	r2, r7, r2
 800378c:	6811      	ldr	r1, [r2, #0]
 800378e:	6852      	ldr	r2, [r2, #4]
 8003790:	185b      	adds	r3, r3, r1
 8003792:	4154      	adcs	r4, r2
 8003794:	197a      	adds	r2, r7, r5
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	6054      	str	r4, [r2, #4]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800379a:	197b      	adds	r3, r7, r5
 800379c:	6819      	ldr	r1, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	2300      	movs	r3, #0
 80037a2:	2480      	movs	r4, #128	; 0x80
 80037a4:	0224      	lsls	r4, r4, #8
 80037a6:	18c9      	adds	r1, r1, r3
 80037a8:	4162      	adcs	r2, r4
 80037aa:	0008      	movs	r0, r1
 80037ac:	0011      	movs	r1, r2
 80037ae:	19bb      	adds	r3, r7, r6
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	88db      	ldrh	r3, [r3, #6]
 80037b4:	623b      	str	r3, [r7, #32]
 80037b6:	2300      	movs	r3, #0
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ba:	6a3a      	ldr	r2, [r7, #32]
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	f7fc fed5 	bl	800056c <__aeabi_lmul>
 80037c2:	0003      	movs	r3, r0
 80037c4:	000c      	movs	r4, r1
 80037c6:	1062      	asrs	r2, r4, #1
 80037c8:	1979      	adds	r1, r7, r5
 80037ca:	600a      	str	r2, [r1, #0]
 80037cc:	17e3      	asrs	r3, r4, #31
 80037ce:	21b4      	movs	r1, #180	; 0xb4
 80037d0:	187a      	adds	r2, r7, r1
 80037d2:	6013      	str	r3, [r2, #0]

	if (var1 == 0) {
 80037d4:	197b      	adds	r3, r7, r5
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	187b      	adds	r3, r7, r1
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	431a      	orrs	r2, r3
 80037de:	d101      	bne.n	80037e4 <compensate_pressure+0x1e0>
		return 0;  // avoid exception caused by division by zero
 80037e0:	2300      	movs	r3, #0
 80037e2:	e0bd      	b.n	8003960 <compensate_pressure+0x35c>
	}

	p = 1048576 - adc_press;
 80037e4:	2398      	movs	r3, #152	; 0x98
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	2380      	movs	r3, #128	; 0x80
 80037ec:	035b      	lsls	r3, r3, #13
 80037ee:	1a9b      	subs	r3, r3, r2
 80037f0:	25a0      	movs	r5, #160	; 0xa0
 80037f2:	197a      	adds	r2, r7, r5
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	17db      	asrs	r3, r3, #31
 80037f8:	26a4      	movs	r6, #164	; 0xa4
 80037fa:	19ba      	adds	r2, r7, r6
 80037fc:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 80037fe:	197b      	adds	r3, r7, r5
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	105b      	asrs	r3, r3, #1
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	197b      	adds	r3, r7, r5
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	07db      	lsls	r3, r3, #31
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	20a8      	movs	r0, #168	; 0xa8
 8003810:	183b      	adds	r3, r7, r0
 8003812:	685c      	ldr	r4, [r3, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69b8      	ldr	r0, [r7, #24]
 8003818:	69f9      	ldr	r1, [r7, #28]
 800381a:	1ac0      	subs	r0, r0, r3
 800381c:	41a1      	sbcs	r1, r4
 800381e:	4a53      	ldr	r2, [pc, #332]	; (800396c <compensate_pressure+0x368>)
 8003820:	2300      	movs	r3, #0
 8003822:	f7fc fea3 	bl	800056c <__aeabi_lmul>
 8003826:	0003      	movs	r3, r0
 8003828:	000c      	movs	r4, r1
 800382a:	0018      	movs	r0, r3
 800382c:	0021      	movs	r1, r4
 800382e:	23b0      	movs	r3, #176	; 0xb0
 8003830:	18fa      	adds	r2, r7, r3
 8003832:	6853      	ldr	r3, [r2, #4]
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	f7fc fe55 	bl	80004e4 <__aeabi_ldivmod>
 800383a:	0003      	movs	r3, r0
 800383c:	000c      	movs	r4, r1
 800383e:	197a      	adds	r2, r7, r5
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	6054      	str	r4, [r2, #4]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8003844:	239c      	movs	r3, #156	; 0x9c
 8003846:	18fa      	adds	r2, r7, r3
 8003848:	6813      	ldr	r3, [r2, #0]
 800384a:	2216      	movs	r2, #22
 800384c:	5e9b      	ldrsh	r3, [r3, r2]
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	17db      	asrs	r3, r3, #31
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	19ba      	adds	r2, r7, r6
 8003856:	6813      	ldr	r3, [r2, #0]
 8003858:	04da      	lsls	r2, r3, #19
 800385a:	197c      	adds	r4, r7, r5
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	0b5b      	lsrs	r3, r3, #13
 8003860:	67bb      	str	r3, [r7, #120]	; 0x78
 8003862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003864:	4313      	orrs	r3, r2
 8003866:	67bb      	str	r3, [r7, #120]	; 0x78
 8003868:	19ba      	adds	r2, r7, r6
 800386a:	6813      	ldr	r3, [r2, #0]
 800386c:	135b      	asrs	r3, r3, #13
 800386e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003870:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003872:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003874:	6938      	ldr	r0, [r7, #16]
 8003876:	6979      	ldr	r1, [r7, #20]
 8003878:	f7fc fe78 	bl	800056c <__aeabi_lmul>
 800387c:	0003      	movs	r3, r0
 800387e:	000c      	movs	r4, r1
 8003880:	0018      	movs	r0, r3
 8003882:	0021      	movs	r1, r4
 8003884:	19ba      	adds	r2, r7, r6
 8003886:	6813      	ldr	r3, [r2, #0]
 8003888:	04da      	lsls	r2, r3, #19
 800388a:	197c      	adds	r4, r7, r5
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	0b5b      	lsrs	r3, r3, #13
 8003890:	673b      	str	r3, [r7, #112]	; 0x70
 8003892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003894:	4313      	orrs	r3, r2
 8003896:	673b      	str	r3, [r7, #112]	; 0x70
 8003898:	19ba      	adds	r2, r7, r6
 800389a:	6813      	ldr	r3, [r2, #0]
 800389c:	135b      	asrs	r3, r3, #13
 800389e:	677b      	str	r3, [r7, #116]	; 0x74
 80038a0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80038a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a4:	f7fc fe62 	bl	800056c <__aeabi_lmul>
 80038a8:	0003      	movs	r3, r0
 80038aa:	000c      	movs	r4, r1
 80038ac:	01e2      	lsls	r2, r4, #7
 80038ae:	0e59      	lsrs	r1, r3, #25
 80038b0:	430a      	orrs	r2, r1
 80038b2:	21b0      	movs	r1, #176	; 0xb0
 80038b4:	1879      	adds	r1, r7, r1
 80038b6:	600a      	str	r2, [r1, #0]
 80038b8:	1663      	asrs	r3, r4, #25
 80038ba:	22b4      	movs	r2, #180	; 0xb4
 80038bc:	18ba      	adds	r2, r7, r2
 80038be:	6013      	str	r3, [r2, #0]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80038c0:	269c      	movs	r6, #156	; 0x9c
 80038c2:	19ba      	adds	r2, r7, r6
 80038c4:	6813      	ldr	r3, [r2, #0]
 80038c6:	2214      	movs	r2, #20
 80038c8:	5e9b      	ldrsh	r3, [r3, r2]
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	17db      	asrs	r3, r3, #31
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	197a      	adds	r2, r7, r5
 80038d2:	6853      	ldr	r3, [r2, #4]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	68b8      	ldr	r0, [r7, #8]
 80038d8:	68f9      	ldr	r1, [r7, #12]
 80038da:	f7fc fe47 	bl	800056c <__aeabi_lmul>
 80038de:	0003      	movs	r3, r0
 80038e0:	000c      	movs	r4, r1
 80038e2:	0362      	lsls	r2, r4, #13
 80038e4:	0cd9      	lsrs	r1, r3, #19
 80038e6:	430a      	orrs	r2, r1
 80038e8:	20a8      	movs	r0, #168	; 0xa8
 80038ea:	1839      	adds	r1, r7, r0
 80038ec:	600a      	str	r2, [r1, #0]
 80038ee:	14e3      	asrs	r3, r4, #19
 80038f0:	22ac      	movs	r2, #172	; 0xac
 80038f2:	18ba      	adds	r2, r7, r2
 80038f4:	6013      	str	r3, [r2, #0]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80038f6:	197a      	adds	r2, r7, r5
 80038f8:	6811      	ldr	r1, [r2, #0]
 80038fa:	6852      	ldr	r2, [r2, #4]
 80038fc:	23b0      	movs	r3, #176	; 0xb0
 80038fe:	18fb      	adds	r3, r7, r3
 8003900:	685c      	ldr	r4, [r3, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	18c9      	adds	r1, r1, r3
 8003906:	4162      	adcs	r2, r4
 8003908:	183b      	adds	r3, r7, r0
 800390a:	685c      	ldr	r4, [r3, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	185b      	adds	r3, r3, r1
 8003910:	4154      	adcs	r4, r2
 8003912:	0622      	lsls	r2, r4, #24
 8003914:	0a19      	lsrs	r1, r3, #8
 8003916:	66b9      	str	r1, [r7, #104]	; 0x68
 8003918:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800391a:	4311      	orrs	r1, r2
 800391c:	66b9      	str	r1, [r7, #104]	; 0x68
 800391e:	1223      	asrs	r3, r4, #8
 8003920:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003922:	19bb      	adds	r3, r7, r6
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2212      	movs	r2, #18
 8003928:	5e9b      	ldrsh	r3, [r3, r2]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	17db      	asrs	r3, r3, #31
 800392e:	607b      	str	r3, [r7, #4]
 8003930:	6839      	ldr	r1, [r7, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	000b      	movs	r3, r1
 8003936:	0f1b      	lsrs	r3, r3, #28
 8003938:	0010      	movs	r0, r2
 800393a:	0100      	lsls	r0, r0, #4
 800393c:	6678      	str	r0, [r7, #100]	; 0x64
 800393e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003940:	4318      	orrs	r0, r3
 8003942:	6678      	str	r0, [r7, #100]	; 0x64
 8003944:	000b      	movs	r3, r1
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	663b      	str	r3, [r7, #96]	; 0x60
 800394a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800394c:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800394e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003950:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003952:	185b      	adds	r3, r3, r1
 8003954:	4154      	adcs	r4, r2
 8003956:	197a      	adds	r2, r7, r5
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	6054      	str	r4, [r2, #4]
	return p;
 800395c:	197b      	adds	r3, r7, r5
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	0018      	movs	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	b02f      	add	sp, #188	; 0xbc
 8003966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003968:	fffe0c00 	.word	0xfffe0c00
 800396c:	00000c35 	.word	0x00000c35

08003970 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a2c      	ldr	r2, [pc, #176]	; (8003a30 <compensate_humidity+0xc0>)
 8003980:	4694      	mov	ip, r2
 8003982:	4463      	add	r3, ip
 8003984:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	039a      	lsls	r2, r3, #14
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	211e      	movs	r1, #30
 800398e:	5e5b      	ldrsh	r3, [r3, r1]
 8003990:	051b      	lsls	r3, r3, #20
 8003992:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2120      	movs	r1, #32
 8003998:	5e5b      	ldrsh	r3, [r3, r1]
 800399a:	0019      	movs	r1, r3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	434b      	muls	r3, r1
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2280      	movs	r2, #128	; 0x80
 80039a4:	01d2      	lsls	r2, r2, #7
 80039a6:	4694      	mov	ip, r2
 80039a8:	4463      	add	r3, ip
 80039aa:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	2122      	movs	r1, #34	; 0x22
 80039b0:	5652      	ldrsb	r2, [r2, r1]
 80039b2:	0011      	movs	r1, r2
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	434a      	muls	r2, r1
 80039b8:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	7f09      	ldrb	r1, [r1, #28]
 80039be:	0008      	movs	r0, r1
 80039c0:	6979      	ldr	r1, [r7, #20]
 80039c2:	4341      	muls	r1, r0
 80039c4:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80039c6:	2080      	movs	r0, #128	; 0x80
 80039c8:	0200      	lsls	r0, r0, #8
 80039ca:	4684      	mov	ip, r0
 80039cc:	4461      	add	r1, ip
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80039ce:	434a      	muls	r2, r1
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80039d0:	1292      	asrs	r2, r2, #10
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	0389      	lsls	r1, r1, #14
 80039d6:	468c      	mov	ip, r1
 80039d8:	4462      	add	r2, ip
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80039da:	68f9      	ldr	r1, [r7, #12]
 80039dc:	201a      	movs	r0, #26
 80039de:	5e09      	ldrsh	r1, [r1, r0]
 80039e0:	434a      	muls	r2, r1
 80039e2:	2180      	movs	r1, #128	; 0x80
 80039e4:	0189      	lsls	r1, r1, #6
 80039e6:	468c      	mov	ip, r1
 80039e8:	4462      	add	r2, ip
 80039ea:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80039ec:	4353      	muls	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	13db      	asrs	r3, r3, #15
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	13d2      	asrs	r2, r2, #15
 80039f8:	4353      	muls	r3, r2
 80039fa:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	7e12      	ldrb	r2, [r2, #24]
 8003a00:	4353      	muls	r3, r2
 8003a02:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	da00      	bge.n	8003a12 <compensate_humidity+0xa2>
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	22c8      	movs	r2, #200	; 0xc8
 8003a18:	0552      	lsls	r2, r2, #21
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	dd01      	ble.n	8003a22 <compensate_humidity+0xb2>
 8003a1e:	23c8      	movs	r3, #200	; 0xc8
 8003a20:	055b      	lsls	r3, r3, #21
 8003a22:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	131b      	asrs	r3, r3, #12
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b006      	add	sp, #24
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	fffed400 	.word	0xfffed400

08003a34 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08c      	sub	sp, #48	; 0x30
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2232      	movs	r2, #50	; 0x32
 8003a46:	5c9b      	ldrb	r3, [r3, r2]
 8003a48:	2b60      	cmp	r3, #96	; 0x60
 8003a4a:	d007      	beq.n	8003a5c <bmp280_read_fixed+0x28>
		if (humidity)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <bmp280_read_fixed+0x32>
 8003a62:	2308      	movs	r3, #8
 8003a64:	e000      	b.n	8003a68 <bmp280_read_fixed+0x34>
 8003a66:	2306      	movs	r3, #6
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2218      	movs	r2, #24
 8003a70:	18ba      	adds	r2, r7, r2
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	21f7      	movs	r1, #247	; 0xf7
 8003a76:	f7ff fb95 	bl	80031a4 <read_data>
 8003a7a:	1e03      	subs	r3, r0, #0
 8003a7c:	d001      	beq.n	8003a82 <bmp280_read_fixed+0x4e>
		return false;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e042      	b.n	8003b08 <bmp280_read_fixed+0xd4>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8003a82:	2118      	movs	r1, #24
 8003a84:	187b      	adds	r3, r7, r1
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	031a      	lsls	r2, r3, #12
 8003a8a:	187b      	adds	r3, r7, r1
 8003a8c:	785b      	ldrb	r3, [r3, #1]
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	4313      	orrs	r3, r2
 8003a92:	187a      	adds	r2, r7, r1
 8003a94:	7892      	ldrb	r2, [r2, #2]
 8003a96:	0912      	lsrs	r2, r2, #4
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8003a9e:	187b      	adds	r3, r7, r1
 8003aa0:	78db      	ldrb	r3, [r3, #3]
 8003aa2:	031a      	lsls	r2, r3, #12
 8003aa4:	187b      	adds	r3, r7, r1
 8003aa6:	791b      	ldrb	r3, [r3, #4]
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	187a      	adds	r2, r7, r1
 8003aae:	7952      	ldrb	r2, [r2, #5]
 8003ab0:	0912      	lsrs	r2, r2, #4
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8003ab8:	2314      	movs	r3, #20
 8003aba:	18fa      	adds	r2, r7, r3
 8003abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f7ff fd6b 	bl	800359c <compensate_temperature>
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f7ff fd96 	bl	8003604 <compensate_pressure>
 8003ad8:	0002      	movs	r2, r0
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d010      	beq.n	8003b06 <bmp280_read_fixed+0xd2>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8003ae4:	2218      	movs	r2, #24
 8003ae6:	18bb      	adds	r3, r7, r2
 8003ae8:	799b      	ldrb	r3, [r3, #6]
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	18ba      	adds	r2, r7, r2
 8003aee:	79d2      	ldrb	r2, [r2, #7]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	6a39      	ldr	r1, [r7, #32]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	0018      	movs	r0, r3
 8003afc:	f7ff ff38 	bl	8003970 <compensate_humidity>
 8003b00:	0002      	movs	r2, r0
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	601a      	str	r2, [r3, #0]
	}

	return true;
 8003b06:	2301      	movs	r3, #1
}
 8003b08:	0018      	movs	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	b00c      	add	sp, #48	; 0x30
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <bmp280_read_float+0x1a>
 8003b24:	2314      	movs	r3, #20
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	e000      	b.n	8003b2c <bmp280_read_float+0x1c>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2218      	movs	r2, #24
 8003b2e:	18ba      	adds	r2, r7, r2
 8003b30:	211c      	movs	r1, #28
 8003b32:	1879      	adds	r1, r7, r1
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff ff7d 	bl	8003a34 <bmp280_read_fixed>
 8003b3a:	1e03      	subs	r3, r0, #0
 8003b3c:	d02d      	beq.n	8003b9a <bmp280_read_float+0x8a>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7fd fb3f 	bl	80011c4 <__aeabi_i2f>
 8003b46:	1c03      	adds	r3, r0, #0
 8003b48:	4916      	ldr	r1, [pc, #88]	; (8003ba4 <bmp280_read_float+0x94>)
 8003b4a:	1c18      	adds	r0, r3, #0
 8003b4c:	f7fc fe4c 	bl	80007e8 <__aeabi_fdiv>
 8003b50:	1c03      	adds	r3, r0, #0
 8003b52:	1c1a      	adds	r2, r3, #0
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f7fd fb7c 	bl	8001258 <__aeabi_ui2f>
 8003b60:	1c03      	adds	r3, r0, #0
 8003b62:	2187      	movs	r1, #135	; 0x87
 8003b64:	05c9      	lsls	r1, r1, #23
 8003b66:	1c18      	adds	r0, r3, #0
 8003b68:	f7fc fe3e 	bl	80007e8 <__aeabi_fdiv>
 8003b6c:	1c03      	adds	r3, r0, #0
 8003b6e:	1c1a      	adds	r2, r3, #0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	601a      	str	r2, [r3, #0]
		if (humidity)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <bmp280_read_float+0x86>
			*humidity = (float) fixed_humidity / 1024;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f7fd fb6b 	bl	8001258 <__aeabi_ui2f>
 8003b82:	1c03      	adds	r3, r0, #0
 8003b84:	2189      	movs	r1, #137	; 0x89
 8003b86:	05c9      	lsls	r1, r1, #23
 8003b88:	1c18      	adds	r0, r3, #0
 8003b8a:	f7fc fe2d 	bl	80007e8 <__aeabi_fdiv>
 8003b8e:	1c03      	adds	r3, r0, #0
 8003b90:	1c1a      	adds	r2, r3, #0
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	601a      	str	r2, [r3, #0]
		return true;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <bmp280_read_float+0x8c>
	}

	return false;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b008      	add	sp, #32
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	42c80000 	.word	0x42c80000

08003ba8 <DBG_Init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions ------------------------------------------------------- */

void DBG_Init(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
#ifdef DEBUG
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8003bae:	1d3b      	adds	r3, r7, #4
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	2314      	movs	r3, #20
 8003bb4:	001a      	movs	r2, r3
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	f017 fd5c 	bl	801b674 <memset>

  /* Enable the GPIO_B Clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bbc:	4b25      	ldr	r3, [pc, #148]	; (8003c54 <DBG_Init+0xac>)
 8003bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc0:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <DBG_Init+0xac>)
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bc8:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <DBG_Init+0xac>)
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	2202      	movs	r2, #2
 8003bce:	4013      	ands	r3, r2
 8003bd0:	603b      	str	r3, [r7, #0]
 8003bd2:	683b      	ldr	r3, [r7, #0]

  /* Configure the GPIO pin */
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8003bd4:	1d3b      	adds	r3, r7, #4
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	605a      	str	r2, [r3, #4]
  gpioinitstruct.Pull   = GPIO_PULLUP;
 8003bda:	1d3b      	adds	r3, r7, #4
 8003bdc:	2201      	movs	r2, #1
 8003bde:	609a      	str	r2, [r3, #8]
  gpioinitstruct.Speed  = GPIO_SPEED_HIGH;
 8003be0:	1d3b      	adds	r3, r7, #4
 8003be2:	2203      	movs	r2, #3
 8003be4:	60da      	str	r2, [r3, #12]

  gpioinitstruct.Pin    = (GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8003be6:	1d3b      	adds	r3, r7, #4
 8003be8:	22f0      	movs	r2, #240	; 0xf0
 8003bea:	0212      	lsls	r2, r2, #8
 8003bec:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8003bee:	1d3b      	adds	r3, r7, #4
 8003bf0:	4a19      	ldr	r2, [pc, #100]	; (8003c58 <DBG_Init+0xb0>)
 8003bf2:	0019      	movs	r1, r3
 8003bf4:	0010      	movs	r0, r2
 8003bf6:	f006 f847 	bl	8009c88 <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	015b      	lsls	r3, r3, #5
 8003bfe:	4816      	ldr	r0, [pc, #88]	; (8003c58 <DBG_Init+0xb0>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	0019      	movs	r1, r3
 8003c04:	f006 f9be 	bl	8009f84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003c08:	2380      	movs	r3, #128	; 0x80
 8003c0a:	019b      	lsls	r3, r3, #6
 8003c0c:	4812      	ldr	r0, [pc, #72]	; (8003c58 <DBG_Init+0xb0>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	0019      	movs	r1, r3
 8003c12:	f006 f9b7 	bl	8009f84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	01db      	lsls	r3, r3, #7
 8003c1a:	480f      	ldr	r0, [pc, #60]	; (8003c58 <DBG_Init+0xb0>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	0019      	movs	r1, r3
 8003c20:	f006 f9b0 	bl	8009f84 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	480b      	ldr	r0, [pc, #44]	; (8003c58 <DBG_Init+0xb0>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	f006 f9a9 	bl	8009f84 <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 8003c32:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <DBG_Init+0xac>)
 8003c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c36:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <DBG_Init+0xac>)
 8003c38:	2180      	movs	r1, #128	; 0x80
 8003c3a:	03c9      	lsls	r1, r1, #15
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 8003c40:	f004 fff6 	bl	8008c30 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8003c44:	f005 f802 	bl	8008c4c <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8003c48:	f005 f80e 	bl	8008c68 <HAL_DBGMCU_EnableDBGStandbyMode>
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
  __HAL_RCC_DBGMCU_CLK_DISABLE();
#endif
}
 8003c4c:	46c0      	nop			; (mov r8, r8)
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b006      	add	sp, #24
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40021000 	.word	0x40021000
 8003c58:	50000400 	.word	0x50000400

08003c5c <Error_Handler>:

void Error_Handler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  PRINTF("Error_Handler\n\r");
 8003c60:	4b02      	ldr	r3, [pc, #8]	; (8003c6c <Error_Handler+0x10>)
 8003c62:	0018      	movs	r0, r3
 8003c64:	f017 fb7a 	bl	801b35c <TraceSend>
  while (1)
 8003c68:	e7fe      	b.n	8003c68 <Error_Handler+0xc>
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	0801c178 	.word	0x0801c178

08003c70 <HW_GPIO_Init>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] initStruct  GPIO_InitTypeDef intit structure
 * @retval none
 */
void HW_GPIO_Init(GPIO_TypeDef *port, uint16_t GPIO_Pin, GPIO_InitTypeDef *initStruct)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	; 0x28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	230a      	movs	r3, #10
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	1c0a      	adds	r2, r1, #0
 8003c80:	801a      	strh	r2, [r3, #0]

  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4a30      	ldr	r2, [pc, #192]	; (8003d48 <HW_GPIO_Init+0xd8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d01b      	beq.n	8003cc2 <HW_GPIO_Init+0x52>
 8003c8a:	4a2f      	ldr	r2, [pc, #188]	; (8003d48 <HW_GPIO_Init+0xd8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d804      	bhi.n	8003c9a <HW_GPIO_Init+0x2a>
 8003c90:	22a0      	movs	r2, #160	; 0xa0
 8003c92:	05d2      	lsls	r2, r2, #23
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d007      	beq.n	8003ca8 <HW_GPIO_Init+0x38>
 8003c98:	e03a      	b.n	8003d10 <HW_GPIO_Init+0xa0>
 8003c9a:	4a2c      	ldr	r2, [pc, #176]	; (8003d4c <HW_GPIO_Init+0xdc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d01d      	beq.n	8003cdc <HW_GPIO_Init+0x6c>
 8003ca0:	4a2b      	ldr	r2, [pc, #172]	; (8003d50 <HW_GPIO_Init+0xe0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d027      	beq.n	8003cf6 <HW_GPIO_Init+0x86>
 8003ca6:	e033      	b.n	8003d10 <HW_GPIO_Init+0xa0>
 8003ca8:	4b2a      	ldr	r3, [pc, #168]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cac:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cae:	2101      	movs	r1, #1
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cb4:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	2201      	movs	r2, #1
 8003cba:	4013      	ands	r3, r2
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	e032      	b.n	8003d28 <HW_GPIO_Init+0xb8>
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc6:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cc8:	2102      	movs	r1, #2
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cce:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	623b      	str	r3, [r7, #32]
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	e025      	b.n	8003d28 <HW_GPIO_Init+0xb8>
 8003cdc:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce0:	4b1c      	ldr	r3, [pc, #112]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003ce2:	2104      	movs	r1, #4
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	2204      	movs	r2, #4
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	e018      	b.n	8003d28 <HW_GPIO_Init+0xb8>
 8003cf6:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfa:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003cfc:	2108      	movs	r1, #8
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	2208      	movs	r2, #8
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	e00b      	b.n	8003d28 <HW_GPIO_Init+0xb8>
 8003d10:	4b10      	ldr	r3, [pc, #64]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003d16:	2180      	movs	r1, #128	; 0x80
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d1c:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <HW_GPIO_Init+0xe4>)
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	2280      	movs	r2, #128	; 0x80
 8003d22:	4013      	ands	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	697b      	ldr	r3, [r7, #20]

  initStruct->Pin = GPIO_Pin ;
 8003d28:	230a      	movs	r3, #10
 8003d2a:	18fb      	adds	r3, r7, r3
 8003d2c:	881a      	ldrh	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	601a      	str	r2, [r3, #0]

  HAL_GPIO_Init(port, initStruct);
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	0011      	movs	r1, r2
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f005 ffa5 	bl	8009c88 <HAL_GPIO_Init>
}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b00a      	add	sp, #40	; 0x28
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	50000400 	.word	0x50000400
 8003d4c:	50000800 	.word	0x50000800
 8003d50:	50000c00 	.word	0x50000c00
 8003d54:	40021000 	.word	0x40021000

08003d58 <HW_GPIO_SetIrq>:
 * @param [IN] prio       NVIC priority (0 is highest)
 * @param [IN] irqHandler  points to the  function to execute
 * @retval none
 */
void HW_GPIO_SetIrq(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t prio,  GpioIrqHandler *irqHandler)
{
 8003d58:	b5b0      	push	{r4, r5, r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	200a      	movs	r0, #10
 8003d66:	183b      	adds	r3, r7, r0
 8003d68:	1c0a      	adds	r2, r1, #0
 8003d6a:	801a      	strh	r2, [r3, #0]
  IRQn_Type IRQnb;

  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 8003d6c:	183b      	adds	r3, r7, r0
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	0018      	movs	r0, r3
 8003d72:	f000 f865 	bl	8003e40 <HW_GPIO_GetBitPos>
 8003d76:	0003      	movs	r3, r0
 8003d78:	617b      	str	r3, [r7, #20]

  if (irqHandler != NULL)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01d      	beq.n	8003dbc <HW_GPIO_SetIrq+0x64>
  {
    GpioIrq[ BitPos ] = irqHandler;
 8003d80:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <HW_GPIO_SetIrq+0x78>)
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	0092      	lsls	r2, r2, #2
 8003d86:	6839      	ldr	r1, [r7, #0]
 8003d88:	50d1      	str	r1, [r2, r3]

    IRQnb = MSP_GetIRQn(GPIO_Pin);
 8003d8a:	2513      	movs	r5, #19
 8003d8c:	197c      	adds	r4, r7, r5
 8003d8e:	230a      	movs	r3, #10
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	0018      	movs	r0, r3
 8003d96:	f001 f9e6 	bl	8005166 <MSP_GetIRQn>
 8003d9a:	0003      	movs	r3, r0
 8003d9c:	7023      	strb	r3, [r4, #0]

    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	197b      	adds	r3, r7, r5
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	b25b      	sxtb	r3, r3
 8003da6:	2200      	movs	r2, #0
 8003da8:	0018      	movs	r0, r3
 8003daa:	f005 fd45 	bl	8009838 <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ(IRQnb);
 8003dae:	197b      	adds	r3, r7, r5
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	b25b      	sxtb	r3, r3
 8003db4:	0018      	movs	r0, r3
 8003db6:	f005 fd54 	bl	8009862 <HAL_NVIC_EnableIRQ>
  }
  else
  {
    GpioIrq[ BitPos ] = NULL;
  }
}
 8003dba:	e004      	b.n	8003dc6 <HW_GPIO_SetIrq+0x6e>
    GpioIrq[ BitPos ] = NULL;
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <HW_GPIO_SetIrq+0x78>)
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	0092      	lsls	r2, r2, #2
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	50d1      	str	r1, [r2, r3]
}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b006      	add	sp, #24
 8003dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	20000174 	.word	0x20000174

08003dd4 <HW_GPIO_IrqHandler>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval none
 */
void HW_GPIO_IrqHandler(uint16_t GPIO_Pin)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	0002      	movs	r2, r0
 8003ddc:	1dbb      	adds	r3, r7, #6
 8003dde:	801a      	strh	r2, [r3, #0]
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin);
 8003de0:	1dbb      	adds	r3, r7, #6
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	0018      	movs	r0, r3
 8003de6:	f000 f82b 	bl	8003e40 <HW_GPIO_GetBitPos>
 8003dea:	0003      	movs	r3, r0
 8003dec:	60fb      	str	r3, [r7, #12]

  if (GpioIrq[ BitPos ]  != NULL)
 8003dee:	4b08      	ldr	r3, [pc, #32]	; (8003e10 <HW_GPIO_IrqHandler+0x3c>)
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	0092      	lsls	r2, r2, #2
 8003df4:	58d3      	ldr	r3, [r2, r3]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HW_GPIO_IrqHandler+0x32>
  {
    GpioIrq[ BitPos ](NULL);
 8003dfa:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HW_GPIO_IrqHandler+0x3c>)
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	0092      	lsls	r2, r2, #2
 8003e00:	58d3      	ldr	r3, [r2, r3]
 8003e02:	2000      	movs	r0, #0
 8003e04:	4798      	blx	r3
  }
}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b004      	add	sp, #16
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	20000174 	.word	0x20000174

08003e14 <HW_GPIO_Write>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] value New GPIO output value
 * @retval none
 */
void HW_GPIO_Write(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,  uint32_t value)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	200a      	movs	r0, #10
 8003e20:	183b      	adds	r3, r7, r0
 8003e22:	1c0a      	adds	r2, r1, #0
 8003e24:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (GPIO_PinState) value);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	183b      	adds	r3, r7, r0
 8003e2c:	8819      	ldrh	r1, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	0018      	movs	r0, r3
 8003e32:	f006 f8a7 	bl	8009f84 <HAL_GPIO_WritePin>
}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b004      	add	sp, #16
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HW_GPIO_GetBitPos>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval the position of the bit
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	0002      	movs	r2, r0
 8003e48:	1dbb      	adds	r3, r7, #6
 8003e4a:	801a      	strh	r2, [r3, #0]
  uint8_t PinPos = 0;
 8003e4c:	230f      	movs	r3, #15
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	2200      	movs	r2, #0
 8003e52:	701a      	strb	r2, [r3, #0]

  if ((GPIO_Pin & 0xFF00) != 0)
 8003e54:	1dbb      	adds	r3, r7, #6
 8003e56:	881a      	ldrh	r2, [r3, #0]
 8003e58:	23ff      	movs	r3, #255	; 0xff
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d006      	beq.n	8003e6e <HW_GPIO_GetBitPos+0x2e>
  {
    PinPos |= 0x8;
 8003e60:	220f      	movs	r2, #15
 8003e62:	18bb      	adds	r3, r7, r2
 8003e64:	18ba      	adds	r2, r7, r2
 8003e66:	7812      	ldrb	r2, [r2, #0]
 8003e68:	2108      	movs	r1, #8
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	701a      	strb	r2, [r3, #0]
  }
  if ((GPIO_Pin & 0xF0F0) != 0)
 8003e6e:	1dbb      	adds	r3, r7, #6
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	4a14      	ldr	r2, [pc, #80]	; (8003ec4 <HW_GPIO_GetBitPos+0x84>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	d006      	beq.n	8003e86 <HW_GPIO_GetBitPos+0x46>
  {
    PinPos |= 0x4;
 8003e78:	220f      	movs	r2, #15
 8003e7a:	18bb      	adds	r3, r7, r2
 8003e7c:	18ba      	adds	r2, r7, r2
 8003e7e:	7812      	ldrb	r2, [r2, #0]
 8003e80:	2104      	movs	r1, #4
 8003e82:	430a      	orrs	r2, r1
 8003e84:	701a      	strb	r2, [r3, #0]
  }
  if ((GPIO_Pin & 0xCCCC) != 0)
 8003e86:	1dbb      	adds	r3, r7, #6
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	4a0f      	ldr	r2, [pc, #60]	; (8003ec8 <HW_GPIO_GetBitPos+0x88>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d006      	beq.n	8003e9e <HW_GPIO_GetBitPos+0x5e>
  {
    PinPos |= 0x2;
 8003e90:	220f      	movs	r2, #15
 8003e92:	18bb      	adds	r3, r7, r2
 8003e94:	18ba      	adds	r2, r7, r2
 8003e96:	7812      	ldrb	r2, [r2, #0]
 8003e98:	2102      	movs	r1, #2
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	701a      	strb	r2, [r3, #0]
  }
  if ((GPIO_Pin & 0xAAAA) != 0)
 8003e9e:	1dbb      	adds	r3, r7, #6
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <HW_GPIO_GetBitPos+0x8c>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d006      	beq.n	8003eb6 <HW_GPIO_GetBitPos+0x76>
  {
    PinPos |= 0x1;
 8003ea8:	220f      	movs	r2, #15
 8003eaa:	18bb      	adds	r3, r7, r2
 8003eac:	18ba      	adds	r2, r7, r2
 8003eae:	7812      	ldrb	r2, [r2, #0]
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	701a      	strb	r2, [r3, #0]
  }

  return PinPos;
 8003eb6:	230f      	movs	r3, #15
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	781b      	ldrb	r3, [r3, #0]
}
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	b004      	add	sp, #16
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	0000f0f0 	.word	0x0000f0f0
 8003ec8:	0000cccc 	.word	0x0000cccc
 8003ecc:	0000aaaa 	.word	0x0000aaaa

08003ed0 <LL_RTC_TIME_GetSubSecond>:
  * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003edc:	041b      	lsls	r3, r3, #16
 8003ede:	0c1b      	lsrs	r3, r3, #16
}
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b002      	add	sp, #8
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HW_RTC_Init>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
void HW_RTC_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  if (HW_RTC_Initalized == false)
 8003eec:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <HW_RTC_Init+0x2c>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	4053      	eors	r3, r2
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <HW_RTC_Init+0x24>
  {
    HW_RTC_SetConfig();
 8003efa:	f000 f80d 	bl	8003f18 <HW_RTC_SetConfig>
    HW_RTC_SetAlarmConfig();
 8003efe:	f000 f991 	bl	8004224 <HW_RTC_SetAlarmConfig>
    HW_RTC_SetTimerContext();
 8003f02:	f000 f96d 	bl	80041e0 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 8003f06:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <HW_RTC_Init+0x2c>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	701a      	strb	r2, [r3, #0]
  }
}
 8003f0c:	46c0      	nop			; (mov r8, r8)
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	200001b4 	.word	0x200001b4

08003f18 <HW_RTC_SetConfig>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
static void HW_RTC_SetConfig(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  RtcHandle.Instance = RTC;
 8003f1e:	4b27      	ldr	r3, [pc, #156]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f20:	4a27      	ldr	r2, [pc, #156]	; (8003fc0 <HW_RTC_SetConfig+0xa8>)
 8003f22:	601a      	str	r2, [r3, #0]

  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 8003f24:	4b25      	ldr	r3, [pc, #148]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	605a      	str	r2, [r3, #4]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 8003f2a:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f2c:	221f      	movs	r2, #31
 8003f2e:	609a      	str	r2, [r3, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 8003f30:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f32:	4a24      	ldr	r2, [pc, #144]	; (8003fc4 <HW_RTC_SetConfig+0xac>)
 8003f34:	60da      	str	r2, [r3, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 8003f36:	4b21      	ldr	r3, [pc, #132]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	611a      	str	r2, [r3, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003f3c:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	619a      	str	r2, [r3, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003f42:	4b1e      	ldr	r3, [pc, #120]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	61da      	str	r2, [r3, #28]

  HAL_RTC_Init(&RtcHandle);
 8003f48:	4b1c      	ldr	r3, [pc, #112]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f007 fdbc 	bl	800bac8 <HAL_RTC_Init>

  /*Monday 1st January 2016*/
  RTC_DateStruct.Year = 0;
 8003f50:	003b      	movs	r3, r7
 8003f52:	2200      	movs	r2, #0
 8003f54:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 8003f56:	003b      	movs	r3, r7
 8003f58:	2201      	movs	r2, #1
 8003f5a:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct.Date = 1;
 8003f5c:	003b      	movs	r3, r7
 8003f5e:	2201      	movs	r2, #1
 8003f60:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 8003f62:	003b      	movs	r3, r7
 8003f64:	2201      	movs	r2, #1
 8003f66:	701a      	strb	r2, [r3, #0]
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 8003f68:	0039      	movs	r1, r7
 8003f6a:	4b14      	ldr	r3, [pc, #80]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f007 ff68 	bl	800be44 <HAL_RTC_SetDate>

  /*at 0:0:0*/
  RTC_TimeStruct.Hours = 0;
 8003f74:	1d3b      	adds	r3, r7, #4
 8003f76:	2200      	movs	r2, #0
 8003f78:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct.Minutes = 0;
 8003f7a:	1d3b      	adds	r3, r7, #4
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	705a      	strb	r2, [r3, #1]

  RTC_TimeStruct.Seconds = 0;
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	2200      	movs	r2, #0
 8003f84:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct.TimeFormat = 0;
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	2200      	movs	r2, #0
 8003f8a:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct.SubSeconds = 0;
 8003f8c:	1d3b      	adds	r3, r7, #4
 8003f8e:	2200      	movs	r2, #0
 8003f90:	605a      	str	r2, [r3, #4]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 8003f92:	1d3b      	adds	r3, r7, #4
 8003f94:	2200      	movs	r2, #0
 8003f96:	611a      	str	r2, [r3, #16]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 8003f98:	1d3b      	adds	r3, r7, #4
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	60da      	str	r2, [r3, #12]

  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 8003f9e:	1d39      	adds	r1, r7, #4
 8003fa0:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f007 fe2d 	bl	800bc04 <HAL_RTC_SetTime>

  /*Enable Direct Read of the calendar registers (not through Shadow) */
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 8003faa:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <HW_RTC_SetConfig+0xa4>)
 8003fac:	0018      	movs	r0, r3
 8003fae:	f008 faf2 	bl	800c596 <HAL_RTCEx_EnableBypassShadow>
}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	b006      	add	sp, #24
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	200001b8 	.word	0x200001b8
 8003fc0:	40002800 	.word	0x40002800
 8003fc4:	000003ff 	.word	0x000003ff

08003fc8 <HW_RTC_GetMinimumTimeout>:
 * @brief returns the wake up time in ticks
 * @param none
 * @retval wake up time in ticks
 */
uint32_t HW_RTC_GetMinimumTimeout(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  return (MIN_ALARM_DELAY);
 8003fcc:	2303      	movs	r3, #3
}
 8003fce:	0018      	movs	r0, r3
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HW_RTC_ms2Tick>:
 * @brief converts time in ms to time in ticks
 * @param [IN] time in milliseconds
 * @retval returns time in timer ticks
 */
uint32_t HW_RTC_ms2Tick(TimerTime_t timeMilliSec)
{
 8003fd4:	b5b0      	push	{r4, r5, r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /*return( ( timeMicroSec / RTC_ALARM_TIME_BASE ) ); */
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	000a      	movs	r2, r1
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	000b      	movs	r3, r1
 8003fe4:	0e51      	lsrs	r1, r2, #25
 8003fe6:	01dd      	lsls	r5, r3, #7
 8003fe8:	430d      	orrs	r5, r1
 8003fea:	01d4      	lsls	r4, r2, #7
 8003fec:	227d      	movs	r2, #125	; 0x7d
 8003fee:	2300      	movs	r3, #0
 8003ff0:	0020      	movs	r0, r4
 8003ff2:	0029      	movs	r1, r5
 8003ff4:	f7fc fa9a 	bl	800052c <__aeabi_uldivmod>
 8003ff8:	0003      	movs	r3, r0
 8003ffa:	000c      	movs	r4, r1
}
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b002      	add	sp, #8
 8004002:	bdb0      	pop	{r4, r5, r7, pc}

08004004 <HW_RTC_Tick2ms>:
 * @brief converts time in ticks to time in ms
 * @param [IN] time in timer ticks
 * @retval returns time in milliseconds
 */
TimerTime_t HW_RTC_Tick2ms(uint32_t tick)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /*return( ( timeMicroSec * RTC_ALARM_TIME_BASE ) ); */
  uint32_t seconds = tick >> N_PREDIV_S;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	0a9b      	lsrs	r3, r3, #10
 8004010:	60fb      	str	r3, [r7, #12]
  tick = tick & PREDIV_S;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	059b      	lsls	r3, r3, #22
 8004016:	0d9b      	lsrs	r3, r3, #22
 8004018:	607b      	str	r3, [r7, #4]
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	0013      	movs	r3, r2
 800401e:	015b      	lsls	r3, r3, #5
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	189b      	adds	r3, r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	0019      	movs	r1, r3
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	0013      	movs	r3, r2
 800402e:	015b      	lsls	r3, r3, #5
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	189b      	adds	r3, r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	0a9b      	lsrs	r3, r3, #10
 800403a:	18cb      	adds	r3, r1, r3
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b004      	add	sp, #16
 8004042:	bd80      	pop	{r7, pc}

08004044 <HW_RTC_SetAlarm>:
 * @brief Set the alarm
 * @note The alarm is set at now (read in this funtion) + timeout
 * @param timeout Duration of the Timer ticks
 */
void HW_RTC_SetAlarm(uint32_t timeout)
{
 8004044:	b590      	push	{r4, r7, lr}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 800404c:	4b14      	ldr	r3, [pc, #80]	; (80040a0 <HW_RTC_SetAlarm+0x5c>)
 800404e:	2200      	movs	r2, #0
 8004050:	5e9b      	ldrsh	r3, [r3, r2]
 8004052:	3303      	adds	r3, #3
 8004054:	001c      	movs	r4, r3
 8004056:	f000 f825 	bl	80040a4 <HW_RTC_GetTimerElapsedTime>
 800405a:	0002      	movs	r2, r0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	429c      	cmp	r4, r3
 8004062:	d204      	bcs.n	800406e <HW_RTC_SetAlarm+0x2a>
  {
    LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 8004064:	2100      	movs	r1, #0
 8004066:	2004      	movs	r0, #4
 8004068:	f016 fb1a 	bl	801a6a0 <LPM_SetStopMode>
 800406c:	e003      	b.n	8004076 <HW_RTC_SetAlarm+0x32>
  }
  else
  {
    LPM_SetStopMode(LPM_RTC_Id, LPM_Disable);
 800406e:	2101      	movs	r1, #1
 8004070:	2004      	movs	r0, #4
 8004072:	f016 fb15 	bl	801a6a0 <LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if (LPM_GetMode() == LPM_StopMode)
 8004076:	f016 fb65 	bl	801a744 <LPM_GetMode>
 800407a:	0003      	movs	r3, r0
 800407c:	2b01      	cmp	r3, #1
 800407e:	d106      	bne.n	800408e <HW_RTC_SetAlarm+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 8004080:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <HW_RTC_SetAlarm+0x5c>)
 8004082:	2200      	movs	r2, #0
 8004084:	5e9b      	ldrsh	r3, [r3, r2]
 8004086:	001a      	movs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	607b      	str	r3, [r7, #4]
  }

  HW_RTC_StartWakeUpAlarm(timeout);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	0018      	movs	r0, r3
 8004092:	f000 f8d5 	bl	8004240 <HW_RTC_StartWakeUpAlarm>
}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	46bd      	mov	sp, r7
 800409a:	b003      	add	sp, #12
 800409c:	bd90      	pop	{r4, r7, pc}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	200001b6 	.word	0x200001b6

080040a4 <HW_RTC_GetTimerElapsedTime>:
 * @brief Get the RTC timer elapsed time since the last Alarm was set
 * @param none
 * @retval RTC Elapsed time in ticks
 */
uint32_t HW_RTC_GetTimerElapsedTime(void)
{
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b089      	sub	sp, #36	; 0x24
 80040a8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80040aa:	2308      	movs	r3, #8
 80040ac:	18fa      	adds	r2, r7, r3
 80040ae:	1d3b      	adds	r3, r7, #4
 80040b0:	0011      	movs	r1, r2
 80040b2:	0018      	movs	r0, r3
 80040b4:	f000 fa30 	bl	8004518 <HW_RTC_GetCalendarValue>
 80040b8:	0003      	movs	r3, r0
 80040ba:	000c      	movs	r4, r1
 80040bc:	61fb      	str	r3, [r7, #28]

  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <HW_RTC_GetTimerElapsedTime+0x2c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	1ad3      	subs	r3, r2, r3
}
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b009      	add	sp, #36	; 0x24
 80040cc:	bd90      	pop	{r4, r7, pc}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	20000204 	.word	0x20000204

080040d4 <HW_RTC_GetTimerValue>:
 * @brief Get the RTC timer value
 * @param none
 * @retval RTC Timer value in ticks
 */
uint32_t HW_RTC_GetTimerValue(void)
{
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b089      	sub	sp, #36	; 0x24
 80040d8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80040da:	2308      	movs	r3, #8
 80040dc:	18fa      	adds	r2, r7, r3
 80040de:	1d3b      	adds	r3, r7, #4
 80040e0:	0011      	movs	r1, r2
 80040e2:	0018      	movs	r0, r3
 80040e4:	f000 fa18 	bl	8004518 <HW_RTC_GetCalendarValue>
 80040e8:	0003      	movs	r3, r0
 80040ea:	000c      	movs	r4, r1
 80040ec:	61fb      	str	r3, [r7, #28]

  return (CalendarValue);
 80040ee:	69fb      	ldr	r3, [r7, #28]
}
 80040f0:	0018      	movs	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b009      	add	sp, #36	; 0x24
 80040f6:	bd90      	pop	{r4, r7, pc}

080040f8 <HW_RTC_StopAlarm>:
 * @brief Stop the Alarm
 * @param none
 * @retval none
 */
void HW_RTC_StopAlarm(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 80040fc:	2380      	movs	r3, #128	; 0x80
 80040fe:	005a      	lsls	r2, r3, #1
 8004100:	4b0a      	ldr	r3, [pc, #40]	; (800412c <HW_RTC_StopAlarm+0x34>)
 8004102:	0011      	movs	r1, r2
 8004104:	0018      	movs	r0, r3
 8004106:	f008 f8e5 	bl	800c2d4 <HAL_RTC_DeactivateAlarm>
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 800410a:	4b08      	ldr	r3, [pc, #32]	; (800412c <HW_RTC_StopAlarm+0x34>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	22ff      	movs	r2, #255	; 0xff
 8004112:	401a      	ands	r2, r3
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <HW_RTC_StopAlarm+0x34>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4905      	ldr	r1, [pc, #20]	; (8004130 <HW_RTC_StopAlarm+0x38>)
 800411a:	430a      	orrs	r2, r1
 800411c:	60da      	str	r2, [r3, #12]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HW_RTC_StopAlarm+0x3c>)
 8004120:	2280      	movs	r2, #128	; 0x80
 8004122:	0292      	lsls	r2, r2, #10
 8004124:	615a      	str	r2, [r3, #20]
}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	200001b8 	.word	0x200001b8
 8004130:	fffffe7f 	.word	0xfffffe7f
 8004134:	40010400 	.word	0x40010400

08004138 <HW_RTC_IrqHandler>:
 * @brief RTC IRQ Handler on the RTC Alarm
 * @param none
 * @retval none
 */
void HW_RTC_IrqHandler(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
  RTC_HandleTypeDef *hrtc = &RtcHandle;
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <HW_RTC_IrqHandler+0x5c>)
 8004140:	607b      	str	r3, [r7, #4]
  /* enable low power at irq*/
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 8004142:	2100      	movs	r1, #0
 8004144:	2004      	movs	r0, #4
 8004146:	f016 faab 	bl	801a6a0 <LPM_SetStopMode>

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HW_RTC_IrqHandler+0x60>)
 800414c:	2280      	movs	r2, #128	; 0x80
 800414e:	0292      	lsls	r2, r2, #10
 8004150:	615a      	str	r2, [r3, #20]

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	015b      	lsls	r3, r3, #5
 800415c:	4013      	ands	r3, r2
 800415e:	d014      	beq.n	800418a <HW_RTC_IrqHandler+0x52>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	2380      	movs	r3, #128	; 0x80
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	4013      	ands	r3, r2
 800416c:	d00d      	beq.n	800418a <HW_RTC_IrqHandler+0x52>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	22ff      	movs	r2, #255	; 0xff
 8004176:	401a      	ands	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4907      	ldr	r1, [pc, #28]	; (800419c <HW_RTC_IrqHandler+0x64>)
 800417e:	430a      	orrs	r2, r1
 8004180:	60da      	str	r2, [r3, #12]
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	0018      	movs	r0, r3
 8004186:	f000 ffd5 	bl	8005134 <HAL_RTC_AlarmAEventCallback>
    }
  }
}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	46bd      	mov	sp, r7
 800418e:	b002      	add	sp, #8
 8004190:	bd80      	pop	{r7, pc}
 8004192:	46c0      	nop			; (mov r8, r8)
 8004194:	200001b8 	.word	0x200001b8
 8004198:	40010400 	.word	0x40010400
 800419c:	fffffe7f 	.word	0xfffffe7f

080041a0 <HW_RTC_DelayMs>:
 * @brief a delay of delay ms by polling RTC
 * @param delay in ms
 * @retval none
 */
void HW_RTC_DelayMs(uint32_t delay)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  TimerTime_t delayValue = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
  TimerTime_t timeout = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60bb      	str	r3, [r7, #8]

  delayValue = HW_RTC_ms2Tick(delay);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	0018      	movs	r0, r3
 80041b4:	f7ff ff0e 	bl	8003fd4 <HW_RTC_ms2Tick>
 80041b8:	0003      	movs	r3, r0
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = HW_RTC_GetTimerValue();
 80041bc:	f7ff ff8a 	bl	80040d4 <HW_RTC_GetTimerValue>
 80041c0:	0003      	movs	r3, r0
 80041c2:	60bb      	str	r3, [r7, #8]
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 80041c4:	e000      	b.n	80041c8 <HW_RTC_DelayMs+0x28>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	f7ff ff84 	bl	80040d4 <HW_RTC_GetTimerValue>
 80041cc:	0002      	movs	r2, r0
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d8f6      	bhi.n	80041c6 <HW_RTC_DelayMs+0x26>
  {
    __NOP();
  }
}
 80041d8:	46c0      	nop			; (mov r8, r8)
 80041da:	46bd      	mov	sp, r7
 80041dc:	b004      	add	sp, #16
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HW_RTC_SetTimerContext>:
 * @brief set Time Reference set also the RTC_DateStruct and RTC_TimeStruct
 * @param none
 * @retval Timer Value
 */
uint32_t HW_RTC_SetTimerContext(void)
{
 80041e0:	b5b0      	push	{r4, r5, r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  RtcTimerContext.Rtc_Time = (uint32_t) HW_RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 80041e4:	4a07      	ldr	r2, [pc, #28]	; (8004204 <HW_RTC_SetTimerContext+0x24>)
 80041e6:	4b08      	ldr	r3, [pc, #32]	; (8004208 <HW_RTC_SetTimerContext+0x28>)
 80041e8:	0011      	movs	r1, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f000 f994 	bl	8004518 <HW_RTC_GetCalendarValue>
 80041f0:	0003      	movs	r3, r0
 80041f2:	000c      	movs	r4, r1
 80041f4:	001a      	movs	r2, r3
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <HW_RTC_SetTimerContext+0x2c>)
 80041f8:	601a      	str	r2, [r3, #0]
  return (uint32_t) RtcTimerContext.Rtc_Time;
 80041fa:	4b04      	ldr	r3, [pc, #16]	; (800420c <HW_RTC_SetTimerContext+0x2c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
}
 80041fe:	0018      	movs	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	bdb0      	pop	{r4, r5, r7, pc}
 8004204:	20000208 	.word	0x20000208
 8004208:	2000021c 	.word	0x2000021c
 800420c:	20000204 	.word	0x20000204

08004210 <HW_RTC_GetTimerContext>:
 * @brief Get the RTC timer Reference
 * @param none
 * @retval Timer Value in  Ticks
 */
uint32_t HW_RTC_GetTimerContext(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  return RtcTimerContext.Rtc_Time;
 8004214:	4b02      	ldr	r3, [pc, #8]	; (8004220 <HW_RTC_GetTimerContext+0x10>)
 8004216:	681b      	ldr	r3, [r3, #0]
}
 8004218:	0018      	movs	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	20000204 	.word	0x20000204

08004224 <HW_RTC_SetAlarmConfig>:
 * @brief configure alarm at init
 * @param none
 * @retval none
 */
static void HW_RTC_SetAlarmConfig(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8004228:	2380      	movs	r3, #128	; 0x80
 800422a:	005a      	lsls	r2, r3, #1
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <HW_RTC_SetAlarmConfig+0x18>)
 800422e:	0011      	movs	r1, r2
 8004230:	0018      	movs	r0, r3
 8004232:	f008 f84f 	bl	800c2d4 <HAL_RTC_DeactivateAlarm>
}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	200001b8 	.word	0x200001b8

08004240 <HW_RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void HW_RTC_StartWakeUpAlarm(uint32_t timeoutValue)
{
 8004240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004242:	b08d      	sub	sp, #52	; 0x34
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8004248:	242e      	movs	r4, #46	; 0x2e
 800424a:	193b      	adds	r3, r7, r4
 800424c:	2200      	movs	r2, #0
 800424e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8004250:	232c      	movs	r3, #44	; 0x2c
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	2200      	movs	r2, #0
 8004256:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 8004258:	232a      	movs	r3, #42	; 0x2a
 800425a:	18fb      	adds	r3, r7, r3
 800425c:	2200      	movs	r2, #0
 800425e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8004260:	2328      	movs	r3, #40	; 0x28
 8004262:	18fb      	adds	r3, r7, r3
 8004264:	2200      	movs	r2, #0
 8004266:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 8004268:	2526      	movs	r5, #38	; 0x26
 800426a:	197b      	adds	r3, r7, r5
 800426c:	2200      	movs	r2, #0
 800426e:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8004270:	2610      	movs	r6, #16
 8004272:	19ba      	adds	r2, r7, r6
 8004274:	4b9d      	ldr	r3, [pc, #628]	; (80044ec <HW_RTC_StartWakeUpAlarm+0x2ac>)
 8004276:	3304      	adds	r3, #4
 8004278:	cb23      	ldmia	r3!, {r0, r1, r5}
 800427a:	c223      	stmia	r2!, {r0, r1, r5}
 800427c:	cb03      	ldmia	r3!, {r0, r1}
 800427e:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8004280:	230c      	movs	r3, #12
 8004282:	001d      	movs	r5, r3
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	4a99      	ldr	r2, [pc, #612]	; (80044ec <HW_RTC_StartWakeUpAlarm+0x2ac>)
 8004288:	6992      	ldr	r2, [r2, #24]
 800428a:	601a      	str	r2, [r3, #0]

  HW_RTC_StopAlarm();
 800428c:	f7ff ff34 	bl	80040f8 <HW_RTC_StopAlarm>

  /*reverse counter */
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 8004290:	19bb      	adds	r3, r7, r6
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	b29a      	uxth	r2, r3
 8004296:	193b      	adds	r3, r7, r4
 8004298:	4995      	ldr	r1, [pc, #596]	; (80044f0 <HW_RTC_StartWakeUpAlarm+0x2b0>)
 800429a:	1a8a      	subs	r2, r1, r2
 800429c:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	059b      	lsls	r3, r3, #22
 80042a4:	0d9b      	lsrs	r3, r3, #22
 80042a6:	b299      	uxth	r1, r3
 80042a8:	193b      	adds	r3, r7, r4
 80042aa:	193a      	adds	r2, r7, r4
 80042ac:	8812      	ldrh	r2, [r2, #0]
 80042ae:	188a      	adds	r2, r1, r2
 80042b0:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	0a9b      	lsrs	r3, r3, #10
 80042b6:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 80042b8:	002b      	movs	r3, r5
 80042ba:	18fb      	adds	r3, r7, r3
 80042bc:	789a      	ldrb	r2, [r3, #2]
 80042be:	2526      	movs	r5, #38	; 0x26
 80042c0:	197b      	adds	r3, r7, r5
 80042c2:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 80042c4:	e00a      	b.n	80042dc <HW_RTC_StartWakeUpAlarm+0x9c>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a8a      	ldr	r2, [pc, #552]	; (80044f4 <HW_RTC_StartWakeUpAlarm+0x2b4>)
 80042ca:	4694      	mov	ip, r2
 80042cc:	4463      	add	r3, ip
 80042ce:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 80042d0:	2126      	movs	r1, #38	; 0x26
 80042d2:	187b      	adds	r3, r7, r1
 80042d4:	881a      	ldrh	r2, [r3, #0]
 80042d6:	187b      	adds	r3, r7, r1
 80042d8:	3201      	adds	r2, #1
 80042da:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a86      	ldr	r2, [pc, #536]	; (80044f8 <HW_RTC_StartWakeUpAlarm+0x2b8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d8f0      	bhi.n	80042c6 <HW_RTC_StartWakeUpAlarm+0x86>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 80042e4:	2310      	movs	r3, #16
 80042e6:	18fb      	adds	r3, r7, r3
 80042e8:	781a      	ldrb	r2, [r3, #0]
 80042ea:	2328      	movs	r3, #40	; 0x28
 80042ec:	18fb      	adds	r3, r7, r3
 80042ee:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80042f0:	e00a      	b.n	8004308 <HW_RTC_StartWakeUpAlarm+0xc8>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a81      	ldr	r2, [pc, #516]	; (80044fc <HW_RTC_StartWakeUpAlarm+0x2bc>)
 80042f6:	4694      	mov	ip, r2
 80042f8:	4463      	add	r3, ip
 80042fa:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 80042fc:	2128      	movs	r1, #40	; 0x28
 80042fe:	187b      	adds	r3, r7, r1
 8004300:	881a      	ldrh	r2, [r3, #0]
 8004302:	187b      	adds	r3, r7, r1
 8004304:	3201      	adds	r2, #1
 8004306:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a7d      	ldr	r2, [pc, #500]	; (8004500 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d8f0      	bhi.n	80042f2 <HW_RTC_StartWakeUpAlarm+0xb2>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8004310:	2310      	movs	r3, #16
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	785a      	ldrb	r2, [r3, #1]
 8004316:	232a      	movs	r3, #42	; 0x2a
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 800431c:	e008      	b.n	8004330 <HW_RTC_StartWakeUpAlarm+0xf0>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3b3c      	subs	r3, #60	; 0x3c
 8004322:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8004324:	212a      	movs	r1, #42	; 0x2a
 8004326:	187b      	adds	r3, r7, r1
 8004328:	881a      	ldrh	r2, [r3, #0]
 800432a:	187b      	adds	r3, r7, r1
 800432c:	3201      	adds	r2, #1
 800432e:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b3b      	cmp	r3, #59	; 0x3b
 8004334:	d8f3      	bhi.n	800431e <HW_RTC_StartWakeUpAlarm+0xde>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8004336:	2310      	movs	r3, #16
 8004338:	18fb      	adds	r3, r7, r3
 800433a:	789b      	ldrb	r3, [r3, #2]
 800433c:	b299      	uxth	r1, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	b29a      	uxth	r2, r3
 8004342:	232c      	movs	r3, #44	; 0x2c
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	188a      	adds	r2, r1, r2
 8004348:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (PREDIV_S + 1))
 800434a:	e00d      	b.n	8004368 <HW_RTC_StartWakeUpAlarm+0x128>
  {
    rtcAlarmSubSeconds -= (PREDIV_S + 1);
 800434c:	222e      	movs	r2, #46	; 0x2e
 800434e:	18bb      	adds	r3, r7, r2
 8004350:	18ba      	adds	r2, r7, r2
 8004352:	8812      	ldrh	r2, [r2, #0]
 8004354:	496b      	ldr	r1, [pc, #428]	; (8004504 <HW_RTC_StartWakeUpAlarm+0x2c4>)
 8004356:	468c      	mov	ip, r1
 8004358:	4462      	add	r2, ip
 800435a:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 800435c:	212c      	movs	r1, #44	; 0x2c
 800435e:	187b      	adds	r3, r7, r1
 8004360:	881a      	ldrh	r2, [r3, #0]
 8004362:	187b      	adds	r3, r7, r1
 8004364:	3201      	adds	r2, #1
 8004366:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (PREDIV_S + 1))
 8004368:	232e      	movs	r3, #46	; 0x2e
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	4a60      	ldr	r2, [pc, #384]	; (80044f0 <HW_RTC_StartWakeUpAlarm+0x2b0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d8eb      	bhi.n	800434c <HW_RTC_StartWakeUpAlarm+0x10c>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8004374:	e00b      	b.n	800438e <HW_RTC_StartWakeUpAlarm+0x14e>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8004376:	222c      	movs	r2, #44	; 0x2c
 8004378:	18bb      	adds	r3, r7, r2
 800437a:	18ba      	adds	r2, r7, r2
 800437c:	8812      	ldrh	r2, [r2, #0]
 800437e:	3a3c      	subs	r2, #60	; 0x3c
 8004380:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 8004382:	212a      	movs	r1, #42	; 0x2a
 8004384:	187b      	adds	r3, r7, r1
 8004386:	881a      	ldrh	r2, [r3, #0]
 8004388:	187b      	adds	r3, r7, r1
 800438a:	3201      	adds	r2, #1
 800438c:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 800438e:	232c      	movs	r3, #44	; 0x2c
 8004390:	18fb      	adds	r3, r7, r3
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	2b3b      	cmp	r3, #59	; 0x3b
 8004396:	d8ee      	bhi.n	8004376 <HW_RTC_StartWakeUpAlarm+0x136>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8004398:	e00b      	b.n	80043b2 <HW_RTC_StartWakeUpAlarm+0x172>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800439a:	222a      	movs	r2, #42	; 0x2a
 800439c:	18bb      	adds	r3, r7, r2
 800439e:	18ba      	adds	r2, r7, r2
 80043a0:	8812      	ldrh	r2, [r2, #0]
 80043a2:	3a3c      	subs	r2, #60	; 0x3c
 80043a4:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 80043a6:	2128      	movs	r1, #40	; 0x28
 80043a8:	187b      	adds	r3, r7, r1
 80043aa:	881a      	ldrh	r2, [r3, #0]
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	3201      	adds	r2, #1
 80043b0:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80043b2:	232a      	movs	r3, #42	; 0x2a
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	2b3b      	cmp	r3, #59	; 0x3b
 80043ba:	d8ee      	bhi.n	800439a <HW_RTC_StartWakeUpAlarm+0x15a>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80043bc:	e00b      	b.n	80043d6 <HW_RTC_StartWakeUpAlarm+0x196>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 80043be:	2228      	movs	r2, #40	; 0x28
 80043c0:	18bb      	adds	r3, r7, r2
 80043c2:	18ba      	adds	r2, r7, r2
 80043c4:	8812      	ldrh	r2, [r2, #0]
 80043c6:	3a18      	subs	r2, #24
 80043c8:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 80043ca:	2126      	movs	r1, #38	; 0x26
 80043cc:	187b      	adds	r3, r7, r1
 80043ce:	881a      	ldrh	r2, [r3, #0]
 80043d0:	187b      	adds	r3, r7, r1
 80043d2:	3201      	adds	r2, #1
 80043d4:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80043d6:	2328      	movs	r3, #40	; 0x28
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	2b17      	cmp	r3, #23
 80043de:	d8ee      	bhi.n	80043be <HW_RTC_StartWakeUpAlarm+0x17e>
  }

  if (RTC_DateStruct.Year % 4 == 0)
 80043e0:	230c      	movs	r3, #12
 80043e2:	18fb      	adds	r3, r7, r3
 80043e4:	78db      	ldrb	r3, [r3, #3]
 80043e6:	2203      	movs	r2, #3
 80043e8:	4013      	ands	r3, r2
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d11c      	bne.n	800442a <HW_RTC_StartWakeUpAlarm+0x1ea>
  {
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 80043f0:	230c      	movs	r3, #12
 80043f2:	18fb      	adds	r3, r7, r3
 80043f4:	785b      	ldrb	r3, [r3, #1]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	4a43      	ldr	r2, [pc, #268]	; (8004508 <HW_RTC_StartWakeUpAlarm+0x2c8>)
 80043fa:	5cd3      	ldrb	r3, [r2, r3]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2226      	movs	r2, #38	; 0x26
 8004400:	18ba      	adds	r2, r7, r2
 8004402:	8812      	ldrh	r2, [r2, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d92c      	bls.n	8004462 <HW_RTC_StartWakeUpAlarm+0x222>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8004408:	2426      	movs	r4, #38	; 0x26
 800440a:	193b      	adds	r3, r7, r4
 800440c:	8818      	ldrh	r0, [r3, #0]
 800440e:	230c      	movs	r3, #12
 8004410:	18fb      	adds	r3, r7, r3
 8004412:	785b      	ldrb	r3, [r3, #1]
 8004414:	3b01      	subs	r3, #1
 8004416:	4a3c      	ldr	r2, [pc, #240]	; (8004508 <HW_RTC_StartWakeUpAlarm+0x2c8>)
 8004418:	5cd3      	ldrb	r3, [r2, r3]
 800441a:	0019      	movs	r1, r3
 800441c:	f7fb ffe4 	bl	80003e8 <__aeabi_idivmod>
 8004420:	000b      	movs	r3, r1
 8004422:	001a      	movs	r2, r3
 8004424:	193b      	adds	r3, r7, r4
 8004426:	801a      	strh	r2, [r3, #0]
 8004428:	e01b      	b.n	8004462 <HW_RTC_StartWakeUpAlarm+0x222>
    }
  }
  else
  {
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800442a:	230c      	movs	r3, #12
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	785b      	ldrb	r3, [r3, #1]
 8004430:	3b01      	subs	r3, #1
 8004432:	4a36      	ldr	r2, [pc, #216]	; (800450c <HW_RTC_StartWakeUpAlarm+0x2cc>)
 8004434:	5cd3      	ldrb	r3, [r2, r3]
 8004436:	b29b      	uxth	r3, r3
 8004438:	2226      	movs	r2, #38	; 0x26
 800443a:	18ba      	adds	r2, r7, r2
 800443c:	8812      	ldrh	r2, [r2, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d90f      	bls.n	8004462 <HW_RTC_StartWakeUpAlarm+0x222>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8004442:	2426      	movs	r4, #38	; 0x26
 8004444:	193b      	adds	r3, r7, r4
 8004446:	8818      	ldrh	r0, [r3, #0]
 8004448:	230c      	movs	r3, #12
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	785b      	ldrb	r3, [r3, #1]
 800444e:	3b01      	subs	r3, #1
 8004450:	4a2e      	ldr	r2, [pc, #184]	; (800450c <HW_RTC_StartWakeUpAlarm+0x2cc>)
 8004452:	5cd3      	ldrb	r3, [r2, r3]
 8004454:	0019      	movs	r1, r3
 8004456:	f7fb ffc7 	bl	80003e8 <__aeabi_idivmod>
 800445a:	000b      	movs	r3, r1
 800445c:	001a      	movs	r2, r3
 800445e:	193b      	adds	r3, r7, r4
 8004460:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 8004462:	232e      	movs	r3, #46	; 0x2e
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	4a21      	ldr	r2, [pc, #132]	; (80044f0 <HW_RTC_StartWakeUpAlarm+0x2b0>)
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	001a      	movs	r2, r3
 800446e:	4b28      	ldr	r3, [pc, #160]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 8004470:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 8004472:	4b27      	ldr	r3, [pc, #156]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 8004474:	22a0      	movs	r2, #160	; 0xa0
 8004476:	0512      	lsls	r2, r2, #20
 8004478:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 800447a:	232c      	movs	r3, #44	; 0x2c
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	b2da      	uxtb	r2, r3
 8004482:	4b23      	ldr	r3, [pc, #140]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 8004484:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8004486:	232a      	movs	r3, #42	; 0x2a
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b2da      	uxtb	r2, r3
 800448e:	4b20      	ldr	r3, [pc, #128]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 8004490:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8004492:	2328      	movs	r3, #40	; 0x28
 8004494:	18fb      	adds	r3, r7, r3
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 800449c:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 800449e:	2326      	movs	r3, #38	; 0x26
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b2d9      	uxtb	r1, r3
 80044a6:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80044a8:	2220      	movs	r2, #32
 80044aa:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80044ac:	2310      	movs	r3, #16
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	78da      	ldrb	r2, [r3, #3]
 80044b2:	4b17      	ldr	r3, [pc, #92]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80044b4:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80044b6:	4b16      	ldr	r3, [pc, #88]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80044bc:	4b14      	ldr	r3, [pc, #80]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80044be:	2200      	movs	r2, #0
 80044c0:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80044c2:	4b13      	ldr	r3, [pc, #76]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80044c4:	2280      	movs	r2, #128	; 0x80
 80044c6:	0052      	lsls	r2, r2, #1
 80044c8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80044ca:	4b11      	ldr	r3, [pc, #68]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80044d0:	4b0f      	ldr	r3, [pc, #60]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80044d6:	490e      	ldr	r1, [pc, #56]	; (8004510 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80044d8:	4b0e      	ldr	r3, [pc, #56]	; (8004514 <HW_RTC_StartWakeUpAlarm+0x2d4>)
 80044da:	2200      	movs	r2, #0
 80044dc:	0018      	movs	r0, r3
 80044de:	f007 fdad 	bl	800c03c <HAL_RTC_SetAlarm_IT>
}
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b00d      	add	sp, #52	; 0x34
 80044e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	20000204 	.word	0x20000204
 80044f0:	000003ff 	.word	0x000003ff
 80044f4:	fffeae80 	.word	0xfffeae80
 80044f8:	0001517f 	.word	0x0001517f
 80044fc:	fffff1f0 	.word	0xfffff1f0
 8004500:	00000e0f 	.word	0x00000e0f
 8004504:	fffffc00 	.word	0xfffffc00
 8004508:	0801c9cc 	.word	0x0801c9cc
 800450c:	0801c9c0 	.word	0x0801c9c0
 8004510:	200001dc 	.word	0x200001dc
 8004514:	200001b8 	.word	0x200001b8

08004518 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8004518:	b5b0      	push	{r4, r5, r7, lr}
 800451a:	b08c      	sub	sp, #48	; 0x30
 800451c:	af00      	add	r7, sp, #0
 800451e:	6178      	str	r0, [r7, #20]
 8004520:	6139      	str	r1, [r7, #16]
  uint64_t calendarValue = 0;
 8004522:	2200      	movs	r2, #0
 8004524:	2300      	movs	r3, #0
 8004526:	62ba      	str	r2, [r7, #40]	; 0x28
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800452a:	6939      	ldr	r1, [r7, #16]
 800452c:	4b4b      	ldr	r3, [pc, #300]	; (800465c <HW_RTC_GetCalendarValue+0x144>)
 800452e:	2200      	movs	r2, #0
 8004530:	0018      	movs	r0, r3
 8004532:	f007 fc2b 	bl	800bd8c <HAL_RTC_GetTime>

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
 8004536:	4b4a      	ldr	r3, [pc, #296]	; (8004660 <HW_RTC_GetCalendarValue+0x148>)
 8004538:	0018      	movs	r0, r3
 800453a:	f7ff fcc9 	bl	8003ed0 <LL_RTC_TIME_GetSubSecond>
 800453e:	0003      	movs	r3, r0
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 8004542:	6979      	ldr	r1, [r7, #20]
 8004544:	4b45      	ldr	r3, [pc, #276]	; (800465c <HW_RTC_GetCalendarValue+0x144>)
 8004546:	2200      	movs	r2, #0
 8004548:	0018      	movs	r0, r3
 800454a:	f007 fd29 	bl	800bfa0 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 800454e:	6939      	ldr	r1, [r7, #16]
 8004550:	4b42      	ldr	r3, [pc, #264]	; (800465c <HW_RTC_GetCalendarValue+0x144>)
 8004552:	2200      	movs	r2, #0
 8004554:	0018      	movs	r0, r3
 8004556:	f007 fc19 	bl	800bd8c <HAL_RTC_GetTime>

  }
  while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 800455a:	4b41      	ldr	r3, [pc, #260]	; (8004660 <HW_RTC_GetCalendarValue+0x148>)
 800455c:	0018      	movs	r0, r3
 800455e:	f7ff fcb7 	bl	8003ed0 <LL_RTC_TIME_GetSubSecond>
 8004562:	0002      	movs	r2, r0
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	4293      	cmp	r3, r2
 8004568:	d1e5      	bne.n	8004536 <HW_RTC_GetCalendarValue+0x1e>

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	78db      	ldrb	r3, [r3, #3]
 800456e:	001a      	movs	r2, r3
 8004570:	4b3c      	ldr	r3, [pc, #240]	; (8004664 <HW_RTC_GetCalendarValue+0x14c>)
 8004572:	4353      	muls	r3, r2
 8004574:	3303      	adds	r3, #3
 8004576:	089b      	lsrs	r3, r3, #2
 8004578:	623b      	str	r3, [r7, #32]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	78db      	ldrb	r3, [r3, #3]
 800457e:	2203      	movs	r2, #3
 8004580:	4013      	ands	r3, r2
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HW_RTC_GetCalendarValue+0x74>
 8004588:	4b37      	ldr	r3, [pc, #220]	; (8004668 <HW_RTC_GetCalendarValue+0x150>)
 800458a:	e000      	b.n	800458e <HW_RTC_GetCalendarValue+0x76>
 800458c:	4b37      	ldr	r3, [pc, #220]	; (800466c <HW_RTC_GetCalendarValue+0x154>)
 800458e:	61fb      	str	r3, [r7, #28]

  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	785b      	ldrb	r3, [r3, #1]
 8004594:	1e5a      	subs	r2, r3, #1
 8004596:	0013      	movs	r3, r2
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	189b      	adds	r3, r3, r2
 80045a0:	3301      	adds	r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	da00      	bge.n	80045a8 <HW_RTC_GetCalendarValue+0x90>
 80045a6:	3301      	adds	r3, #1
 80045a8:	105b      	asrs	r3, r3, #1
 80045aa:	0019      	movs	r1, r3
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	785b      	ldrb	r3, [r3, #1]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	40da      	lsrs	r2, r3
 80045b8:	0013      	movs	r3, r2
 80045ba:	2203      	movs	r2, #3
 80045bc:	4013      	ands	r3, r2
 80045be:	1acb      	subs	r3, r1, r3
 80045c0:	6a3a      	ldr	r2, [r7, #32]
 80045c2:	18d3      	adds	r3, r2, r3
 80045c4:	623b      	str	r3, [r7, #32]

  seconds += (RTC_DateStruct->Date - 1);
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	789b      	ldrb	r3, [r3, #2]
 80045ca:	001a      	movs	r2, r3
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	18d3      	adds	r3, r2, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	623b      	str	r3, [r7, #32]

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;
 80045d4:	6a3a      	ldr	r2, [r7, #32]
 80045d6:	0013      	movs	r3, r2
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	189b      	adds	r3, r3, r2
 80045dc:	011a      	lsls	r2, r3, #4
 80045de:	1ad2      	subs	r2, r2, r3
 80045e0:	0113      	lsls	r3, r2, #4
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	01db      	lsls	r3, r3, #7
 80045e6:	623b      	str	r3, [r7, #32]

  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	789b      	ldrb	r3, [r3, #2]
 80045ec:	0019      	movs	r1, r3
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	001a      	movs	r2, r3
 80045f4:	0013      	movs	r3, r2
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	011a      	lsls	r2, r3, #4
 80045fc:	1ad2      	subs	r2, r2, r3
 80045fe:	0113      	lsls	r3, r2, #4
 8004600:	001a      	movs	r2, r3
 8004602:	0010      	movs	r0, r2
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	785b      	ldrb	r3, [r3, #1]
 8004608:	001a      	movs	r2, r3
 800460a:	0013      	movs	r3, r2
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	18c3      	adds	r3, r0, r3
 8004614:	18cb      	adds	r3, r1, r3
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 8004616:	6a3a      	ldr	r2, [r7, #32]
 8004618:	18d3      	adds	r3, r2, r3
 800461a:	623b      	str	r3, [r7, #32]



  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	0011      	movs	r1, r2
 800462a:	0d8d      	lsrs	r5, r1, #22
 800462c:	0013      	movs	r3, r2
 800462e:	029c      	lsls	r4, r3, #10
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	4a0e      	ldr	r2, [pc, #56]	; (8004670 <HW_RTC_GetCalendarValue+0x158>)
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	1912      	adds	r2, r2, r4
 8004644:	416b      	adcs	r3, r5
 8004646:	001c      	movs	r4, r3
 8004648:	0013      	movs	r3, r2
 800464a:	62bb      	str	r3, [r7, #40]	; 0x28
 800464c:	62fc      	str	r4, [r7, #44]	; 0x2c

  return (calendarValue);
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004650:	6afc      	ldr	r4, [r7, #44]	; 0x2c
}
 8004652:	0018      	movs	r0, r3
 8004654:	0021      	movs	r1, r4
 8004656:	46bd      	mov	sp, r7
 8004658:	b00c      	add	sp, #48	; 0x30
 800465a:	bdb0      	pop	{r4, r5, r7, pc}
 800465c:	200001b8 	.word	0x200001b8
 8004660:	40002800 	.word	0x40002800
 8004664:	000005b5 	.word	0x000005b5
 8004668:	00445550 	.word	0x00445550
 800466c:	0099aaa0 	.word	0x0099aaa0
 8004670:	000003ff 	.word	0x000003ff

08004674 <HW_RTC_GetCalendarTime>:
 * \param [IN]   pointer to ms
 *
 * \return uint32_t seconds
 */
uint32_t HW_RTC_GetCalendarTime(uint16_t *mSeconds)
{
 8004674:	b5b0      	push	{r4, r5, r7, lr}
 8004676:	b08c      	sub	sp, #48	; 0x30
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800467c:	230c      	movs	r3, #12
 800467e:	18fa      	adds	r2, r7, r3
 8004680:	2308      	movs	r3, #8
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	0011      	movs	r1, r2
 8004686:	0018      	movs	r0, r3
 8004688:	f7ff ff46 	bl	8004518 <HW_RTC_GetCalendarValue>
 800468c:	0002      	movs	r2, r0
 800468e:	000b      	movs	r3, r1
 8004690:	62ba      	str	r2, [r7, #40]	; 0x28
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	059b      	lsls	r3, r3, #22
 8004698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800469a:	0a94      	lsrs	r4, r2, #10
 800469c:	431c      	orrs	r4, r3
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	0a9d      	lsrs	r5, r3, #10
 80046a2:	0023      	movs	r3, r4
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24

  ticks = (uint32_t) calendarValue & PREDIV_S;
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	059b      	lsls	r3, r3, #22
 80046aa:	0d9b      	lsrs	r3, r3, #22
 80046ac:	623b      	str	r3, [r7, #32]

  *mSeconds = HW_RTC_Tick2ms(ticks);
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7ff fca7 	bl	8004004 <HW_RTC_Tick2ms>
 80046b6:	0003      	movs	r3, r0
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	801a      	strh	r2, [r3, #0]

  return seconds;
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046c0:	0018      	movs	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b00c      	add	sp, #48	; 0x30
 80046c6:	bdb0      	pop	{r4, r5, r7, pc}

080046c8 <HW_RTC_BKUPWrite>:

void HW_RTC_BKUPWrite(uint32_t Data0, uint32_t Data1)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <HW_RTC_BKUPWrite+0x2c>)
 80046d6:	2100      	movs	r1, #0
 80046d8:	0018      	movs	r0, r3
 80046da:	f007 ff32 	bl	800c542 <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <HW_RTC_BKUPWrite+0x2c>)
 80046e2:	2101      	movs	r1, #1
 80046e4:	0018      	movs	r0, r3
 80046e6:	f007 ff2c 	bl	800c542 <HAL_RTCEx_BKUPWrite>
}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b002      	add	sp, #8
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	200001b8 	.word	0x200001b8

080046f8 <HW_RTC_BKUPRead>:

void HW_RTC_BKUPRead(uint32_t *Data0, uint32_t *Data1)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 8004702:	4b0a      	ldr	r3, [pc, #40]	; (800472c <HW_RTC_BKUPRead+0x34>)
 8004704:	2100      	movs	r1, #0
 8004706:	0018      	movs	r0, r3
 8004708:	f007 ff31 	bl	800c56e <HAL_RTCEx_BKUPRead>
 800470c:	0002      	movs	r2, r0
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	601a      	str	r2, [r3, #0]
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <HW_RTC_BKUPRead+0x34>)
 8004714:	2101      	movs	r1, #1
 8004716:	0018      	movs	r0, r3
 8004718:	f007 ff29 	bl	800c56e <HAL_RTCEx_BKUPRead>
 800471c:	0002      	movs	r2, r0
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	601a      	str	r2, [r3, #0]
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	46bd      	mov	sp, r7
 8004726:	b002      	add	sp, #8
 8004728:	bd80      	pop	{r7, pc}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	200001b8 	.word	0x200001b8

08004730 <HW_SPI_Init>:
 * @brief Initializes the SPI object and MCU peripheral
 *
 * @param [IN] none
 */
void HW_SPI_Init(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0

  /*##-1- Configure the SPI peripheral */
  /* Set the SPI parameters */

  hspi.Instance = SPI1;
 8004734:	4b1d      	ldr	r3, [pc, #116]	; (80047ac <HW_SPI_Init+0x7c>)
 8004736:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <HW_SPI_Init+0x80>)
 8004738:	601a      	str	r2, [r3, #0]

  hspi.Init.BaudRatePrescaler = SpiFrequency(10000000);
 800473a:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <HW_SPI_Init+0x84>)
 800473c:	0018      	movs	r0, r3
 800473e:	f000 f89b 	bl	8004878 <SpiFrequency>
 8004742:	0002      	movs	r2, r0
 8004744:	4b19      	ldr	r3, [pc, #100]	; (80047ac <HW_SPI_Init+0x7c>)
 8004746:	61da      	str	r2, [r3, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 8004748:	4b18      	ldr	r3, [pc, #96]	; (80047ac <HW_SPI_Init+0x7c>)
 800474a:	2200      	movs	r2, #0
 800474c:	609a      	str	r2, [r3, #8]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 800474e:	4b17      	ldr	r3, [pc, #92]	; (80047ac <HW_SPI_Init+0x7c>)
 8004750:	2282      	movs	r2, #130	; 0x82
 8004752:	0052      	lsls	r2, r2, #1
 8004754:	605a      	str	r2, [r3, #4]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8004756:	4b15      	ldr	r3, [pc, #84]	; (80047ac <HW_SPI_Init+0x7c>)
 8004758:	2200      	movs	r2, #0
 800475a:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800475c:	4b13      	ldr	r3, [pc, #76]	; (80047ac <HW_SPI_Init+0x7c>)
 800475e:	2200      	movs	r2, #0
 8004760:	615a      	str	r2, [r3, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 8004762:	4b12      	ldr	r3, [pc, #72]	; (80047ac <HW_SPI_Init+0x7c>)
 8004764:	2200      	movs	r2, #0
 8004766:	60da      	str	r2, [r3, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004768:	4b10      	ldr	r3, [pc, #64]	; (80047ac <HW_SPI_Init+0x7c>)
 800476a:	2200      	movs	r2, #0
 800476c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800476e:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <HW_SPI_Init+0x7c>)
 8004770:	2200      	movs	r2, #0
 8004772:	621a      	str	r2, [r3, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 8004774:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <HW_SPI_Init+0x7c>)
 8004776:	2280      	movs	r2, #128	; 0x80
 8004778:	0092      	lsls	r2, r2, #2
 800477a:	619a      	str	r2, [r3, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <HW_SPI_Init+0x7c>)
 800477e:	2200      	movs	r2, #0
 8004780:	625a      	str	r2, [r3, #36]	; 0x24


  SPI_CLK_ENABLE();
 8004782:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <HW_SPI_Init+0x88>)
 8004784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004786:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <HW_SPI_Init+0x88>)
 8004788:	2180      	movs	r1, #128	; 0x80
 800478a:	0149      	lsls	r1, r1, #5
 800478c:	430a      	orrs	r2, r1
 800478e:	635a      	str	r2, [r3, #52]	; 0x34


  if (HAL_SPI_Init(&hspi) != HAL_OK)
 8004790:	4b06      	ldr	r3, [pc, #24]	; (80047ac <HW_SPI_Init+0x7c>)
 8004792:	0018      	movs	r0, r3
 8004794:	f007 ff34 	bl	800c600 <HAL_SPI_Init>
 8004798:	1e03      	subs	r3, r0, #0
 800479a:	d001      	beq.n	80047a0 <HW_SPI_Init+0x70>
  {
    /* Initialization Error */
    Error_Handler();
 800479c:	f7ff fa5e 	bl	8003c5c <Error_Handler>
  }

  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoInit();
 80047a0:	f000 f80c 	bl	80047bc <HW_SPI_IoInit>
}
 80047a4:	46c0      	nop			; (mov r8, r8)
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	20000220 	.word	0x20000220
 80047b0:	40013000 	.word	0x40013000
 80047b4:	00989680 	.word	0x00989680
 80047b8:	40021000 	.word	0x40021000

080047bc <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit();
}

void HW_SPI_IoInit(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	0018      	movs	r0, r3
 80047c6:	2314      	movs	r3, #20
 80047c8:	001a      	movs	r2, r3
 80047ca:	2100      	movs	r1, #0
 80047cc:	f016 ff52 	bl	801b674 <memset>


  initStruct.Mode = GPIO_MODE_AF_PP;
 80047d0:	1d3b      	adds	r3, r7, #4
 80047d2:	2202      	movs	r2, #2
 80047d4:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL  ;
 80047d6:	1d3b      	adds	r3, r7, #4
 80047d8:	2200      	movs	r2, #0
 80047da:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80047dc:	1d3b      	adds	r3, r7, #4
 80047de:	2203      	movs	r2, #3
 80047e0:	60da      	str	r2, [r3, #12]
  initStruct.Alternate = SPI1_AF ;
 80047e2:	1d3b      	adds	r3, r7, #4
 80047e4:	2200      	movs	r2, #0
 80047e6:	611a      	str	r2, [r3, #16]

  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 80047e8:	1d3b      	adds	r3, r7, #4
 80047ea:	4816      	ldr	r0, [pc, #88]	; (8004844 <HW_SPI_IoInit+0x88>)
 80047ec:	001a      	movs	r2, r3
 80047ee:	2108      	movs	r1, #8
 80047f0:	f7ff fa3e 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 80047f4:	1d3a      	adds	r2, r7, #4
 80047f6:	23a0      	movs	r3, #160	; 0xa0
 80047f8:	05db      	lsls	r3, r3, #23
 80047fa:	2140      	movs	r1, #64	; 0x40
 80047fc:	0018      	movs	r0, r3
 80047fe:	f7ff fa37 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 8004802:	1d3a      	adds	r2, r7, #4
 8004804:	23a0      	movs	r3, #160	; 0xa0
 8004806:	05db      	lsls	r3, r3, #23
 8004808:	2180      	movs	r1, #128	; 0x80
 800480a:	0018      	movs	r0, r3
 800480c:	f7ff fa30 	bl	8003c70 <HW_GPIO_Init>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004810:	1d3b      	adds	r3, r7, #4
 8004812:	2201      	movs	r2, #1
 8004814:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8004816:	1d3b      	adds	r3, r7, #4
 8004818:	2200      	movs	r2, #0
 800481a:	609a      	str	r2, [r3, #8]

  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 800481c:	1d3a      	adds	r2, r7, #4
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	0219      	lsls	r1, r3, #8
 8004822:	23a0      	movs	r3, #160	; 0xa0
 8004824:	05db      	lsls	r3, r3, #23
 8004826:	0018      	movs	r0, r3
 8004828:	f7ff fa22 	bl	8003c70 <HW_GPIO_Init>

  HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	0219      	lsls	r1, r3, #8
 8004830:	23a0      	movs	r3, #160	; 0xa0
 8004832:	05db      	lsls	r3, r3, #23
 8004834:	2201      	movs	r2, #1
 8004836:	0018      	movs	r0, r3
 8004838:	f7ff faec 	bl	8003e14 <HW_GPIO_Write>
}
 800483c:	46c0      	nop			; (mov r8, r8)
 800483e:	46bd      	mov	sp, r7
 8004840:	b006      	add	sp, #24
 8004842:	bd80      	pop	{r7, pc}
 8004844:	50000400 	.word	0x50000400

08004848 <HW_SPI_InOut>:
 *
 * @param [IN] outData Byte to be sent
 * @retval inData      Received byte.
 */
uint16_t HW_SPI_InOut(uint16_t txData)
{
 8004848:	b590      	push	{r4, r7, lr}
 800484a:	b087      	sub	sp, #28
 800484c:	af02      	add	r7, sp, #8
 800484e:	0002      	movs	r2, r0
 8004850:	1dbb      	adds	r3, r7, #6
 8004852:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 8004854:	240e      	movs	r4, #14
 8004856:	193a      	adds	r2, r7, r4
 8004858:	1db9      	adds	r1, r7, #6
 800485a:	4806      	ldr	r0, [pc, #24]	; (8004874 <HW_SPI_InOut+0x2c>)
 800485c:	2301      	movs	r3, #1
 800485e:	425b      	negs	r3, r3
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	2301      	movs	r3, #1
 8004864:	f007 ff3e 	bl	800c6e4 <HAL_SPI_TransmitReceive>

  return rxData;
 8004868:	193b      	adds	r3, r7, r4
 800486a:	881b      	ldrh	r3, [r3, #0]
}
 800486c:	0018      	movs	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	b005      	add	sp, #20
 8004872:	bd90      	pop	{r4, r7, pc}
 8004874:	20000220 	.word	0x20000220

08004878 <SpiFrequency>:

/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency(uint32_t hz)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t divisor = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
  uint32_t SysClkTmp = SystemCoreClock;
 8004884:	4b17      	ldr	r3, [pc, #92]	; (80048e4 <SpiFrequency+0x6c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	613b      	str	r3, [r7, #16]
  uint32_t baudRate;

  while (SysClkTmp > hz)
 800488a:	e008      	b.n	800489e <SpiFrequency+0x26>
  {
    divisor++;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	3301      	adds	r3, #1
 8004890:	617b      	str	r3, [r7, #20]
    SysClkTmp = (SysClkTmp >> 1);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	613b      	str	r3, [r7, #16]

    if (divisor >= 7)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2b06      	cmp	r3, #6
 800489c:	d804      	bhi.n	80048a8 <SpiFrequency+0x30>
  while (SysClkTmp > hz)
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d8f2      	bhi.n	800488c <SpiFrequency+0x14>
 80048a6:	e000      	b.n	80048aa <SpiFrequency+0x32>
    {
      break;
 80048a8:	46c0      	nop			; (mov r8, r8)
    }
  }

  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2204      	movs	r2, #4
 80048ae:	4013      	ands	r3, r2
 80048b0:	d101      	bne.n	80048b6 <SpiFrequency+0x3e>
 80048b2:	2200      	movs	r2, #0
 80048b4:	e000      	b.n	80048b8 <SpiFrequency+0x40>
 80048b6:	2220      	movs	r2, #32
             (((divisor & 0x2) == 0) ? 0x0 : SPI_CR1_BR_1) |
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2102      	movs	r1, #2
 80048bc:	400b      	ands	r3, r1
 80048be:	d101      	bne.n	80048c4 <SpiFrequency+0x4c>
 80048c0:	2300      	movs	r3, #0
 80048c2:	e000      	b.n	80048c6 <SpiFrequency+0x4e>
 80048c4:	2310      	movs	r3, #16
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 80048c6:	431a      	orrs	r2, r3
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2101      	movs	r1, #1
 80048cc:	400b      	ands	r3, r1
 80048ce:	d101      	bne.n	80048d4 <SpiFrequency+0x5c>
 80048d0:	2300      	movs	r3, #0
 80048d2:	e000      	b.n	80048d6 <SpiFrequency+0x5e>
 80048d4:	2308      	movs	r3, #8
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  return baudRate;
 80048da:	68fb      	ldr	r3, [r7, #12]
}
 80048dc:	0018      	movs	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	b006      	add	sp, #24
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000030 	.word	0x20000030

080048e8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;

/* i2c init function */

void MX_I2C1_Init(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c1.Instance = I2C1;
 80048ec:	4b1b      	ldr	r3, [pc, #108]	; (800495c <MX_I2C1_Init+0x74>)
 80048ee:	4a1c      	ldr	r2, [pc, #112]	; (8004960 <MX_I2C1_Init+0x78>)
 80048f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80048f2:	4b1a      	ldr	r3, [pc, #104]	; (800495c <MX_I2C1_Init+0x74>)
 80048f4:	4a1b      	ldr	r2, [pc, #108]	; (8004964 <MX_I2C1_Init+0x7c>)
 80048f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80048f8:	4b18      	ldr	r3, [pc, #96]	; (800495c <MX_I2C1_Init+0x74>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80048fe:	4b17      	ldr	r3, [pc, #92]	; (800495c <MX_I2C1_Init+0x74>)
 8004900:	2201      	movs	r2, #1
 8004902:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004904:	4b15      	ldr	r3, [pc, #84]	; (800495c <MX_I2C1_Init+0x74>)
 8004906:	2200      	movs	r2, #0
 8004908:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800490a:	4b14      	ldr	r3, [pc, #80]	; (800495c <MX_I2C1_Init+0x74>)
 800490c:	2200      	movs	r2, #0
 800490e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004910:	4b12      	ldr	r3, [pc, #72]	; (800495c <MX_I2C1_Init+0x74>)
 8004912:	2200      	movs	r2, #0
 8004914:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004916:	4b11      	ldr	r3, [pc, #68]	; (800495c <MX_I2C1_Init+0x74>)
 8004918:	2200      	movs	r2, #0
 800491a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800491c:	4b0f      	ldr	r3, [pc, #60]	; (800495c <MX_I2C1_Init+0x74>)
 800491e:	2200      	movs	r2, #0
 8004920:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004922:	4b0e      	ldr	r3, [pc, #56]	; (800495c <MX_I2C1_Init+0x74>)
 8004924:	0018      	movs	r0, r3
 8004926:	f005 fb67 	bl	8009ff8 <HAL_I2C_Init>
 800492a:	1e03      	subs	r3, r0, #0
 800492c:	d001      	beq.n	8004932 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800492e:	f7ff f995 	bl	8003c5c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004932:	4b0a      	ldr	r3, [pc, #40]	; (800495c <MX_I2C1_Init+0x74>)
 8004934:	2100      	movs	r1, #0
 8004936:	0018      	movs	r0, r3
 8004938:	f006 f894 	bl	800aa64 <HAL_I2CEx_ConfigAnalogFilter>
 800493c:	1e03      	subs	r3, r0, #0
 800493e:	d001      	beq.n	8004944 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004940:	f7ff f98c 	bl	8003c5c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <MX_I2C1_Init+0x74>)
 8004946:	2100      	movs	r1, #0
 8004948:	0018      	movs	r0, r3
 800494a:	f006 f8d7 	bl	800aafc <HAL_I2CEx_ConfigDigitalFilter>
 800494e:	1e03      	subs	r3, r0, #0
 8004950:	d001      	beq.n	8004956 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004952:	f7ff f983 	bl	8003c5c <Error_Handler>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */


}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	20001424 	.word	0x20001424
 8004960:	40005400 	.word	0x40005400
 8004964:	00707cbb 	.word	0x00707cbb

08004968 <HAL_I2C_MspInit>:
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004970:	230c      	movs	r3, #12
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	0018      	movs	r0, r3
 8004976:	2314      	movs	r3, #20
 8004978:	001a      	movs	r2, r3
 800497a:	2100      	movs	r1, #0
 800497c:	f016 fe7a 	bl	801b674 <memset>
  if(hi2c->Instance==I2C1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <HAL_I2C_MspInit+0x80>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d129      	bne.n	80049de <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800498a:	4b18      	ldr	r3, [pc, #96]	; (80049ec <HAL_I2C_MspInit+0x84>)
 800498c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498e:	4b17      	ldr	r3, [pc, #92]	; (80049ec <HAL_I2C_MspInit+0x84>)
 8004990:	2102      	movs	r1, #2
 8004992:	430a      	orrs	r2, r1
 8004994:	62da      	str	r2, [r3, #44]	; 0x2c
 8004996:	4b15      	ldr	r3, [pc, #84]	; (80049ec <HAL_I2C_MspInit+0x84>)
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	2202      	movs	r2, #2
 800499c:	4013      	ands	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80049a2:	210c      	movs	r1, #12
 80049a4:	187b      	adds	r3, r7, r1
 80049a6:	22c0      	movs	r2, #192	; 0xc0
 80049a8:	0092      	lsls	r2, r2, #2
 80049aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049ac:	187b      	adds	r3, r7, r1
 80049ae:	2212      	movs	r2, #18
 80049b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049b2:	187b      	adds	r3, r7, r1
 80049b4:	2201      	movs	r2, #1
 80049b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049b8:	187b      	adds	r3, r7, r1
 80049ba:	2203      	movs	r2, #3
 80049bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80049be:	187b      	adds	r3, r7, r1
 80049c0:	2204      	movs	r2, #4
 80049c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049c4:	187b      	adds	r3, r7, r1
 80049c6:	4a0a      	ldr	r2, [pc, #40]	; (80049f0 <HAL_I2C_MspInit+0x88>)
 80049c8:	0019      	movs	r1, r3
 80049ca:	0010      	movs	r0, r2
 80049cc:	f005 f95c 	bl	8009c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_I2C_MspInit+0x84>)
 80049d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <HAL_I2C_MspInit+0x84>)
 80049d6:	2180      	movs	r1, #128	; 0x80
 80049d8:	0389      	lsls	r1, r1, #14
 80049da:	430a      	orrs	r2, r1
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b008      	add	sp, #32
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	40005400 	.word	0x40005400
 80049ec:	40021000 	.word	0x40021000
 80049f0:	50000400 	.word	0x50000400

080049f4 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af02      	add	r7, sp, #8
 // char id[5];
  /* STM32 HAL library initialization*/
  HAL_Init();
 80049fa:	f004 f8e3 	bl	8008bc4 <HAL_Init>

  /* Configure the system clock*/
  SystemClock_Config();
 80049fe:	f000 fccb 	bl	8005398 <SystemClock_Config>

  /* Configure the debug mode*/
  DBG_Init();
 8004a02:	f7ff f8d1 	bl	8003ba8 <DBG_Init>

  /* Configure the hardware*/
  HW_Init();
 8004a06:	f000 fbc9 	bl	800519c <HW_Init>

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  /*Disbale Stand-by mode*/
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	2001      	movs	r0, #1
 8004a0e:	f015 fe15 	bl	801a63c <LPM_SetOffMode>

  PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__APP_VERSION >> 24), (uint8_t)(__APP_VERSION >> 16), (uint8_t)(__APP_VERSION >> 8), (uint8_t)__APP_VERSION);
 8004a12:	481d      	ldr	r0, [pc, #116]	; (8004a88 <main+0x94>)
 8004a14:	2300      	movs	r3, #0
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	2203      	movs	r2, #3
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	f016 fc9d 	bl	801b35c <TraceSend>
  PRINTF("MAC_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__LORA_MAC_VERSION >> 24), (uint8_t)(__LORA_MAC_VERSION >> 16), (uint8_t)(__LORA_MAC_VERSION >> 8), (uint8_t)__LORA_MAC_VERSION);
 8004a22:	481a      	ldr	r0, [pc, #104]	; (8004a8c <main+0x98>)
 8004a24:	2300      	movs	r3, #0
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	2302      	movs	r3, #2
 8004a2a:	2204      	movs	r2, #4
 8004a2c:	2104      	movs	r1, #4
 8004a2e:	f016 fc95 	bl	801b35c <TraceSend>

  /* Configure the Lora Stack*/
  LORA_Init(&LoRaMainCallbacks, &LoRaParamInit);
 8004a32:	4a17      	ldr	r2, [pc, #92]	; (8004a90 <main+0x9c>)
 8004a34:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <main+0xa0>)
 8004a36:	0011      	movs	r1, r2
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f015 faa1 	bl	8019f80 <LORA_Init>

  LORA_Join();
 8004a3e:	f015 fc47 	bl	801a2d0 <LORA_Join>

  LoraStartTx(TX_ON_TIMER) ;
 8004a42:	2000      	movs	r0, #0
 8004a44:	f000 fa28 	bl	8004e98 <LoraStartTx>

  while (1)
  {

    if (AppProcessRequest == LORA_SET)
 8004a48:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <main+0xa4>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d105      	bne.n	8004a5c <main+0x68>
    {
      /*reset notification flag*/
      AppProcessRequest = LORA_RESET;
 8004a50:	4b11      	ldr	r3, [pc, #68]	; (8004a98 <main+0xa4>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	701a      	strb	r2, [r3, #0]
      /*Send*/
      Send(NULL);
 8004a56:	2000      	movs	r0, #0
 8004a58:	f000 f834 	bl	8004ac4 <Send>
    }
    if (LoraMacProcessRequest == LORA_SET)
 8004a5c:	4b0f      	ldr	r3, [pc, #60]	; (8004a9c <main+0xa8>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d104      	bne.n	8004a6e <main+0x7a>
    {
      /*reset notification flag*/
      LoraMacProcessRequest = LORA_RESET;
 8004a64:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <main+0xa8>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
      LoRaMacProcess();
 8004a6a:	f00b ffb1 	bl	80109d0 <LoRaMacProcess>
  __ASM volatile ("cpsid i" : : : "memory");
 8004a6e:	b672      	cpsid	i
    /*If a flag is set at this point, mcu must not enter low power and must loop*/
    DISABLE_IRQ();

    /* if an interrupt has occurred after DISABLE_IRQ, it is kept pending
     * and cortex will not enter low power anyway  */
    if ((LoraMacProcessRequest != LORA_SET) && (AppProcessRequest != LORA_SET))
 8004a70:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <main+0xa8>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d005      	beq.n	8004a84 <main+0x90>
 8004a78:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <main+0xa4>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d001      	beq.n	8004a84 <main+0x90>
    {
#ifndef LOW_POWER_DISABLE
      LPM_EnterLowPower();
 8004a80:	f015 fe40 	bl	801a704 <LPM_EnterLowPower>
  __ASM volatile ("cpsie i" : : : "memory");
 8004a84:	b662      	cpsie	i
    if (AppProcessRequest == LORA_SET)
 8004a86:	e7df      	b.n	8004a48 <main+0x54>
 8004a88:	0801c188 	.word	0x0801c188
 8004a8c:	0801c1ac 	.word	0x0801c1ac
 8004a90:	2000002c 	.word	0x2000002c
 8004a94:	20000008 	.word	0x20000008
 8004a98:	200002b9 	.word	0x200002b9
 8004a9c:	200002b8 	.word	0x200002b8

08004aa0 <LoraMacProcessNotify>:
  }
}


void LoraMacProcessNotify(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  LoraMacProcessRequest = LORA_SET;
 8004aa4:	4b02      	ldr	r3, [pc, #8]	; (8004ab0 <LoraMacProcessNotify+0x10>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	701a      	strb	r2, [r3, #0]
}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	200002b8 	.word	0x200002b8

08004ab4 <LORA_HasJoined>:


static void LORA_HasJoined(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
#if( OVER_THE_AIR_ACTIVATION != 0 )
  PRINTF("JOINED\n\r");
#endif
  LORA_RequestClass(LORAWAN_DEFAULT_CLASS);
 8004ab8:	2000      	movs	r0, #0
 8004aba:	f015 fd17 	bl	801a4ec <LORA_RequestClass>
}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <Send>:

static void Send(void *context)
{
 8004ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ac6:	b08d      	sub	sp, #52	; 0x34
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  uint16_t pressure = 0;
 8004acc:	232e      	movs	r3, #46	; 0x2e
 8004ace:	18fb      	adds	r3, r7, r3
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	801a      	strh	r2, [r3, #0]
  int16_t temperature = 0;
 8004ad4:	232c      	movs	r3, #44	; 0x2c
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	2200      	movs	r2, #0
 8004ada:	801a      	strh	r2, [r3, #0]
  uint16_t humidity = 0;
 8004adc:	232a      	movs	r3, #42	; 0x2a
 8004ade:	18fb      	adds	r3, r7, r3
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	801a      	strh	r2, [r3, #0]
  uint8_t batteryLevel;
  sensorBme280_t sensor_data;

  if (LORA_JoinStatus() != LORA_SET)
 8004ae4:	f015 fc7e 	bl	801a3e4 <LORA_JoinStatus>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d002      	beq.n	8004af4 <Send+0x30>
  {
    /*Not joined, try again later*/
    LORA_Join();
 8004aee:	f015 fbef 	bl	801a2d0 <LORA_Join>
 8004af2:	e127      	b.n	8004d44 <Send+0x280>
    return;
  }

  TVL1(PRINTF("SEND REQUEST\n\r");)
#ifndef CAYENNE_LPP
  int32_t latitude, longitude = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t altitudeGps = 0;
 8004af8:	2422      	movs	r4, #34	; 0x22
 8004afa:	193b      	adds	r3, r7, r4
 8004afc:	2200      	movs	r2, #0
 8004afe:	801a      	strh	r2, [r3, #0]
#endif

#ifdef USE_B_L072Z_LRWAN1
  TimerInit(&TxLedTimer, OnTimerLedEvent);
 8004b00:	4a92      	ldr	r2, [pc, #584]	; (8004d4c <Send+0x288>)
 8004b02:	4b93      	ldr	r3, [pc, #588]	; (8004d50 <Send+0x28c>)
 8004b04:	0011      	movs	r1, r2
 8004b06:	0018      	movs	r0, r3
 8004b08:	f016 f9c1 	bl	801ae8e <TimerInit>

  TimerSetValue(&TxLedTimer, 200);
 8004b0c:	4b90      	ldr	r3, [pc, #576]	; (8004d50 <Send+0x28c>)
 8004b0e:	21c8      	movs	r1, #200	; 0xc8
 8004b10:	0018      	movs	r0, r3
 8004b12:	f016 fb2d 	bl	801b170 <TimerSetValue>

  LED_On(LED_RED1) ;
 8004b16:	2001      	movs	r0, #1
 8004b18:	f001 fa4e 	bl	8005fb8 <BSP_LED_On>

  TimerStart(&TxLedTimer);
 8004b1c:	4b8c      	ldr	r3, [pc, #560]	; (8004d50 <Send+0x28c>)
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f016 f9d4 	bl	801aecc <TimerStart>
#endif

//  BSP_sensor_Read(&sensor_data);
 // AnalogRead();
  BMERead(&sensor_data);
 8004b24:	2508      	movs	r5, #8
 8004b26:	197b      	adds	r3, r7, r5
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f7fe fac7 	bl	80030bc <BMERead>
  AppData.Buff[i++] = cchannel++;
  AppData.Buff[i++] = LPP_DATATYPE_DIGITAL_OUTPUT;
  AppData.Buff[i++] = AppLedStateOn;
#endif  /* REGION_XX915 */
#else  /* not CAYENNE_LPP */
  data.Port=LPP_APP_PORT;
 8004b2e:	4b89      	ldr	r3, [pc, #548]	; (8004d54 <Send+0x290>)
 8004b30:	2263      	movs	r2, #99	; 0x63
 8004b32:	601a      	str	r2, [r3, #0]
  temperature = (int16_t)(sensor_data.temperatureBME*10);         /* in �C */
 8004b34:	197b      	adds	r3, r7, r5
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	4987      	ldr	r1, [pc, #540]	; (8004d58 <Send+0x294>)
 8004b3a:	1c18      	adds	r0, r3, #0
 8004b3c:	f7fc f82c 	bl	8000b98 <__aeabi_fmul>
 8004b40:	1c03      	adds	r3, r0, #0
 8004b42:	262c      	movs	r6, #44	; 0x2c
 8004b44:	19bc      	adds	r4, r7, r6
 8004b46:	1c18      	adds	r0, r3, #0
 8004b48:	f7fc fb1c 	bl	8001184 <__aeabi_f2iz>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	8023      	strh	r3, [r4, #0]
  pressure    = (uint16_t)(sensor_data.pressureBME/10);      /* in hPa / 10 */
 8004b50:	197b      	adds	r3, r7, r5
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4980      	ldr	r1, [pc, #512]	; (8004d58 <Send+0x294>)
 8004b56:	1c18      	adds	r0, r3, #0
 8004b58:	f7fb fe46 	bl	80007e8 <__aeabi_fdiv>
 8004b5c:	1c03      	adds	r3, r0, #0
 8004b5e:	222e      	movs	r2, #46	; 0x2e
 8004b60:	18bc      	adds	r4, r7, r2
 8004b62:	1c18      	adds	r0, r3, #0
 8004b64:	f7fb fd2c 	bl	80005c0 <__aeabi_f2uiz>
 8004b68:	0003      	movs	r3, r0
 8004b6a:	8023      	strh	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidityBME*10);            /* in %*10     */
 8004b6c:	197b      	adds	r3, r7, r5
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4979      	ldr	r1, [pc, #484]	; (8004d58 <Send+0x294>)
 8004b72:	1c18      	adds	r0, r3, #0
 8004b74:	f7fc f810 	bl	8000b98 <__aeabi_fmul>
 8004b78:	1c03      	adds	r3, r0, #0
 8004b7a:	242a      	movs	r4, #42	; 0x2a
 8004b7c:	193c      	adds	r4, r7, r4
 8004b7e:	1c18      	adds	r0, r3, #0
 8004b80:	f7fb fd1e 	bl	80005c0 <__aeabi_f2uiz>
 8004b84:	0003      	movs	r3, r0
 8004b86:	8023      	strh	r3, [r4, #0]
 // data.temp=temperature;
 // data.pres=pressure;
 // data.hum=humidity;
  PRINTF("temperature = %d \r\n", temperature);
 8004b88:	0035      	movs	r5, r6
 8004b8a:	197b      	adds	r3, r7, r5
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	5e9a      	ldrsh	r2, [r3, r2]
 8004b90:	4b72      	ldr	r3, [pc, #456]	; (8004d5c <Send+0x298>)
 8004b92:	0011      	movs	r1, r2
 8004b94:	0018      	movs	r0, r3
 8004b96:	f016 fbe1 	bl	801b35c <TraceSend>
  PRINTF("humidity = %d\n\r", humidity);
 8004b9a:	242a      	movs	r4, #42	; 0x2a
 8004b9c:	193b      	adds	r3, r7, r4
 8004b9e:	881a      	ldrh	r2, [r3, #0]
 8004ba0:	4b6f      	ldr	r3, [pc, #444]	; (8004d60 <Send+0x29c>)
 8004ba2:	0011      	movs	r1, r2
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f016 fbd9 	bl	801b35c <TraceSend>
  PRINTF("pressure = %d\n\r", pressure);
 8004baa:	222e      	movs	r2, #46	; 0x2e
 8004bac:	0016      	movs	r6, r2
 8004bae:	18bb      	adds	r3, r7, r2
 8004bb0:	881a      	ldrh	r2, [r3, #0]
 8004bb2:	4b6c      	ldr	r3, [pc, #432]	; (8004d64 <Send+0x2a0>)
 8004bb4:	0011      	movs	r1, r2
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f016 fbd0 	bl	801b35c <TraceSend>
  //latitude = sensor_data.latitude;
  //longitude = sensor_data.longitude;
  uint32_t i = 0;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61fb      	str	r3, [r7, #28]
 // data.BuffSize=sizeof(datas);

  batteryLevel = LORA_GetBatteryLevel();                      /* 1 (very low) to 254 (fully charged) */
 8004bc0:	231b      	movs	r3, #27
 8004bc2:	18fc      	adds	r4, r7, r3
 8004bc4:	f000 f9e8 	bl	8004f98 <LORA_GetBatteryLevel>
 8004bc8:	0003      	movs	r3, r0
 8004bca:	7023      	strb	r3, [r4, #0]
  PRINTF("battery level = %d\n\r", batteryLevel);
 8004bcc:	231b      	movs	r3, #27
 8004bce:	18fb      	adds	r3, r7, r3
 8004bd0:	781a      	ldrb	r2, [r3, #0]
 8004bd2:	4b65      	ldr	r3, [pc, #404]	; (8004d68 <Send+0x2a4>)
 8004bd4:	0011      	movs	r1, r2
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f016 fbc0 	bl	801b35c <TraceSend>
  AppData.Port = LORAWAN_APP_PORT;
 8004bdc:	4b63      	ldr	r3, [pc, #396]	; (8004d6c <Send+0x2a8>)
 8004bde:	2202      	movs	r2, #2
 8004be0:	715a      	strb	r2, [r3, #5]
  AppData.Buff[i++] = batteryLevel;
  AppData.Buff[i++] = 0;
  AppData.Buff[i++] = 0;
  AppData.Buff[i++] = 0;
#else  /* not REGION_XX915 */
  AppData.Buff[i++] = AppLedStateOn;
 8004be2:	4b62      	ldr	r3, [pc, #392]	; (8004d6c <Send+0x2a8>)
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	1c59      	adds	r1, r3, #1
 8004bea:	61f9      	str	r1, [r7, #28]
 8004bec:	18d3      	adds	r3, r2, r3
 8004bee:	4a60      	ldr	r2, [pc, #384]	; (8004d70 <Send+0x2ac>)
 8004bf0:	7812      	ldrb	r2, [r2, #0]
 8004bf2:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (pressure >> 8) & 0xFF;
 8004bf4:	19bb      	adds	r3, r7, r6
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	0a1b      	lsrs	r3, r3, #8
 8004bfa:	b298      	uxth	r0, r3
 8004bfc:	4b5b      	ldr	r3, [pc, #364]	; (8004d6c <Send+0x2a8>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	1c59      	adds	r1, r3, #1
 8004c04:	61f9      	str	r1, [r7, #28]
 8004c06:	18d3      	adds	r3, r2, r3
 8004c08:	b2c2      	uxtb	r2, r0
 8004c0a:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = pressure & 0xFF;
 8004c0c:	4b57      	ldr	r3, [pc, #348]	; (8004d6c <Send+0x2a8>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	1c59      	adds	r1, r3, #1
 8004c14:	61f9      	str	r1, [r7, #28]
 8004c16:	18d3      	adds	r3, r2, r3
 8004c18:	19ba      	adds	r2, r7, r6
 8004c1a:	8812      	ldrh	r2, [r2, #0]
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (temperature >> 8) & 0xFF;
 8004c20:	197b      	adds	r3, r7, r5
 8004c22:	2100      	movs	r1, #0
 8004c24:	5e5b      	ldrsh	r3, [r3, r1]
 8004c26:	121b      	asrs	r3, r3, #8
 8004c28:	b218      	sxth	r0, r3
 8004c2a:	4b50      	ldr	r3, [pc, #320]	; (8004d6c <Send+0x2a8>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	1c59      	adds	r1, r3, #1
 8004c32:	61f9      	str	r1, [r7, #28]
 8004c34:	18d3      	adds	r3, r2, r3
 8004c36:	b2c2      	uxtb	r2, r0
 8004c38:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = temperature & 0xFF;
 8004c3a:	4b4c      	ldr	r3, [pc, #304]	; (8004d6c <Send+0x2a8>)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	1c59      	adds	r1, r3, #1
 8004c42:	61f9      	str	r1, [r7, #28]
 8004c44:	18d3      	adds	r3, r2, r3
 8004c46:	197a      	adds	r2, r7, r5
 8004c48:	8812      	ldrh	r2, [r2, #0]
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (humidity >> 8) & 0xFF;
 8004c4e:	242a      	movs	r4, #42	; 0x2a
 8004c50:	193b      	adds	r3, r7, r4
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	0a1b      	lsrs	r3, r3, #8
 8004c56:	b298      	uxth	r0, r3
 8004c58:	4b44      	ldr	r3, [pc, #272]	; (8004d6c <Send+0x2a8>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	1c59      	adds	r1, r3, #1
 8004c60:	61f9      	str	r1, [r7, #28]
 8004c62:	18d3      	adds	r3, r2, r3
 8004c64:	b2c2      	uxtb	r2, r0
 8004c66:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = humidity & 0xFF;
 8004c68:	4b40      	ldr	r3, [pc, #256]	; (8004d6c <Send+0x2a8>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	1c59      	adds	r1, r3, #1
 8004c70:	61f9      	str	r1, [r7, #28]
 8004c72:	18d3      	adds	r3, r2, r3
 8004c74:	193a      	adds	r2, r7, r4
 8004c76:	8812      	ldrh	r2, [r2, #0]
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = batteryLevel;
 8004c7c:	4b3b      	ldr	r3, [pc, #236]	; (8004d6c <Send+0x2a8>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	1c59      	adds	r1, r3, #1
 8004c84:	61f9      	str	r1, [r7, #28]
 8004c86:	18d3      	adds	r3, r2, r3
 8004c88:	221b      	movs	r2, #27
 8004c8a:	18ba      	adds	r2, r7, r2
 8004c8c:	7812      	ldrb	r2, [r2, #0]
 8004c8e:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (latitude >> 16) & 0xFF;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	1418      	asrs	r0, r3, #16
 8004c94:	4b35      	ldr	r3, [pc, #212]	; (8004d6c <Send+0x2a8>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	1c59      	adds	r1, r3, #1
 8004c9c:	61f9      	str	r1, [r7, #28]
 8004c9e:	18d3      	adds	r3, r2, r3
 8004ca0:	b2c2      	uxtb	r2, r0
 8004ca2:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (latitude >> 8) & 0xFF;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1218      	asrs	r0, r3, #8
 8004ca8:	4b30      	ldr	r3, [pc, #192]	; (8004d6c <Send+0x2a8>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	1c59      	adds	r1, r3, #1
 8004cb0:	61f9      	str	r1, [r7, #28]
 8004cb2:	18d3      	adds	r3, r2, r3
 8004cb4:	b2c2      	uxtb	r2, r0
 8004cb6:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = latitude & 0xFF;
 8004cb8:	4b2c      	ldr	r3, [pc, #176]	; (8004d6c <Send+0x2a8>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	1c59      	adds	r1, r3, #1
 8004cc0:	61f9      	str	r1, [r7, #28]
 8004cc2:	18d3      	adds	r3, r2, r3
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (longitude >> 16) & 0xFF;
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	1418      	asrs	r0, r3, #16
 8004cce:	4b27      	ldr	r3, [pc, #156]	; (8004d6c <Send+0x2a8>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	1c59      	adds	r1, r3, #1
 8004cd6:	61f9      	str	r1, [r7, #28]
 8004cd8:	18d3      	adds	r3, r2, r3
 8004cda:	b2c2      	uxtb	r2, r0
 8004cdc:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (longitude >> 8) & 0xFF;
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	1218      	asrs	r0, r3, #8
 8004ce2:	4b22      	ldr	r3, [pc, #136]	; (8004d6c <Send+0x2a8>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	1c59      	adds	r1, r3, #1
 8004cea:	61f9      	str	r1, [r7, #28]
 8004cec:	18d3      	adds	r3, r2, r3
 8004cee:	b2c2      	uxtb	r2, r0
 8004cf0:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = longitude & 0xFF;
 8004cf2:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <Send+0x2a8>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	1c59      	adds	r1, r3, #1
 8004cfa:	61f9      	str	r1, [r7, #28]
 8004cfc:	18d3      	adds	r3, r2, r3
 8004cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d00:	b2d2      	uxtb	r2, r2
 8004d02:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (altitudeGps >> 8) & 0xFF;
 8004d04:	2422      	movs	r4, #34	; 0x22
 8004d06:	193b      	adds	r3, r7, r4
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	0a1b      	lsrs	r3, r3, #8
 8004d0c:	b298      	uxth	r0, r3
 8004d0e:	4b17      	ldr	r3, [pc, #92]	; (8004d6c <Send+0x2a8>)
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	1c59      	adds	r1, r3, #1
 8004d16:	61f9      	str	r1, [r7, #28]
 8004d18:	18d3      	adds	r3, r2, r3
 8004d1a:	b2c2      	uxtb	r2, r0
 8004d1c:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = altitudeGps & 0xFF;
 8004d1e:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <Send+0x2a8>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	1c59      	adds	r1, r3, #1
 8004d26:	61f9      	str	r1, [r7, #28]
 8004d28:	18d3      	adds	r3, r2, r3
 8004d2a:	193a      	adds	r2, r7, r4
 8004d2c:	8812      	ldrh	r2, [r2, #0]
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]
#endif  /* REGION_XX915 */
#endif  /* CAYENNE_LPP */
  AppData.BuffSize = i;
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	4b0d      	ldr	r3, [pc, #52]	; (8004d6c <Send+0x2a8>)
 8004d38:	711a      	strb	r2, [r3, #4]
  LORA_send(&AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 8004d3a:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <Send+0x2a8>)
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f015 fb66 	bl	801a410 <LORA_send>

  /* USER CODE END 3 */
}
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b00d      	add	sp, #52	; 0x34
 8004d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	08005015 	.word	0x08005015
 8004d50:	200002d4 	.word	0x200002d4
 8004d54:	20001580 	.word	0x20001580
 8004d58:	41200000 	.word	0x41200000
 8004d5c:	0801c1d0 	.word	0x0801c1d0
 8004d60:	0801c1e4 	.word	0x0801c1e4
 8004d64:	0801c1f4 	.word	0x0801c1f4
 8004d68:	0801c204 	.word	0x0801c204
 8004d6c:	20000000 	.word	0x20000000
 8004d70:	200002ba 	.word	0x200002ba

08004d74 <LORA_RxData>:


static void LORA_RxData(lora_AppData_t *AppData)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 4 */
  PRINTF("PACKET RECEIVED ON PORT %d\n\r", AppData->Port);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	795b      	ldrb	r3, [r3, #5]
 8004d80:	001a      	movs	r2, r3
 8004d82:	4b37      	ldr	r3, [pc, #220]	; (8004e60 <LORA_RxData+0xec>)
 8004d84:	0011      	movs	r1, r2
 8004d86:	0018      	movs	r0, r3
 8004d88:	f016 fae8 	bl	801b35c <TraceSend>

  switch (AppData->Port)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	795b      	ldrb	r3, [r3, #5]
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d004      	beq.n	8004d9e <LORA_RxData+0x2a>
 8004d94:	2b63      	cmp	r3, #99	; 0x63
 8004d96:	d03e      	beq.n	8004e16 <LORA_RxData+0xa2>
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d01c      	beq.n	8004dd6 <LORA_RxData+0x62>
        LED_On(LED_BLUE) ;
      }
      break;
    }
    default:
      break;
 8004d9c:	e05b      	b.n	8004e56 <LORA_RxData+0xe2>
      if (AppData->BuffSize == 1)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	791b      	ldrb	r3, [r3, #4]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d115      	bne.n	8004dd2 <LORA_RxData+0x5e>
        switch (AppData->Buff[0])
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d008      	beq.n	8004dc2 <LORA_RxData+0x4e>
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d00a      	beq.n	8004dca <LORA_RxData+0x56>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d000      	beq.n	8004dba <LORA_RxData+0x46>
            break;
 8004db8:	e00c      	b.n	8004dd4 <LORA_RxData+0x60>
            LORA_RequestClass(CLASS_A);
 8004dba:	2000      	movs	r0, #0
 8004dbc:	f015 fb96 	bl	801a4ec <LORA_RequestClass>
            break;
 8004dc0:	e008      	b.n	8004dd4 <LORA_RxData+0x60>
            LORA_RequestClass(CLASS_B);
 8004dc2:	2001      	movs	r0, #1
 8004dc4:	f015 fb92 	bl	801a4ec <LORA_RequestClass>
            break;
 8004dc8:	e004      	b.n	8004dd4 <LORA_RxData+0x60>
            LORA_RequestClass(CLASS_C);
 8004dca:	2002      	movs	r0, #2
 8004dcc:	f015 fb8e 	bl	801a4ec <LORA_RequestClass>
            break;
 8004dd0:	e000      	b.n	8004dd4 <LORA_RxData+0x60>
      }
 8004dd2:	46c0      	nop			; (mov r8, r8)
      break;
 8004dd4:	e03f      	b.n	8004e56 <LORA_RxData+0xe2>
      if (AppData->BuffSize == 1)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	791b      	ldrb	r3, [r3, #4]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d13a      	bne.n	8004e54 <LORA_RxData+0xe0>
        AppLedStateOn = AppData->Buff[0] & 0x01;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2201      	movs	r2, #1
 8004de6:	4013      	ands	r3, r2
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	4b1e      	ldr	r3, [pc, #120]	; (8004e64 <LORA_RxData+0xf0>)
 8004dec:	701a      	strb	r2, [r3, #0]
        if (AppLedStateOn == RESET)
 8004dee:	4b1d      	ldr	r3, [pc, #116]	; (8004e64 <LORA_RxData+0xf0>)
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d107      	bne.n	8004e06 <LORA_RxData+0x92>
          PRINTF("LED OFF\n\r");
 8004df6:	4b1c      	ldr	r3, [pc, #112]	; (8004e68 <LORA_RxData+0xf4>)
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f016 faaf 	bl	801b35c <TraceSend>
          LED_Off(LED_BLUE) ;
 8004dfe:	2002      	movs	r0, #2
 8004e00:	f001 f8f6 	bl	8005ff0 <BSP_LED_Off>
      break;
 8004e04:	e026      	b.n	8004e54 <LORA_RxData+0xe0>
          PRINTF("LED ON\n\r");
 8004e06:	4b19      	ldr	r3, [pc, #100]	; (8004e6c <LORA_RxData+0xf8>)
 8004e08:	0018      	movs	r0, r3
 8004e0a:	f016 faa7 	bl	801b35c <TraceSend>
          LED_On(LED_BLUE) ;
 8004e0e:	2002      	movs	r0, #2
 8004e10:	f001 f8d2 	bl	8005fb8 <BSP_LED_On>
      break;
 8004e14:	e01e      	b.n	8004e54 <LORA_RxData+0xe0>
      AppLedStateOn = (AppData->Buff[2] == 100) ?  0x01 : 0x00;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3302      	adds	r3, #2
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	3b64      	subs	r3, #100	; 0x64
 8004e20:	425a      	negs	r2, r3
 8004e22:	4153      	adcs	r3, r2
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	001a      	movs	r2, r3
 8004e28:	4b0e      	ldr	r3, [pc, #56]	; (8004e64 <LORA_RxData+0xf0>)
 8004e2a:	701a      	strb	r2, [r3, #0]
      if (AppLedStateOn == RESET)
 8004e2c:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <LORA_RxData+0xf0>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d107      	bne.n	8004e44 <LORA_RxData+0xd0>
        PRINTF("LED OFF\n\r");
 8004e34:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <LORA_RxData+0xf4>)
 8004e36:	0018      	movs	r0, r3
 8004e38:	f016 fa90 	bl	801b35c <TraceSend>
        LED_Off(LED_BLUE) ;
 8004e3c:	2002      	movs	r0, #2
 8004e3e:	f001 f8d7 	bl	8005ff0 <BSP_LED_Off>
      break;
 8004e42:	e008      	b.n	8004e56 <LORA_RxData+0xe2>
        PRINTF("LED ON\n\r");
 8004e44:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <LORA_RxData+0xf8>)
 8004e46:	0018      	movs	r0, r3
 8004e48:	f016 fa88 	bl	801b35c <TraceSend>
        LED_On(LED_BLUE) ;
 8004e4c:	2002      	movs	r0, #2
 8004e4e:	f001 f8b3 	bl	8005fb8 <BSP_LED_On>
      break;
 8004e52:	e000      	b.n	8004e56 <LORA_RxData+0xe2>
      break;
 8004e54:	46c0      	nop			; (mov r8, r8)
  }
  /* USER CODE END 4 */
}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	b002      	add	sp, #8
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	0801c21c 	.word	0x0801c21c
 8004e64:	200002ba 	.word	0x200002ba
 8004e68:	0801c23c 	.word	0x0801c23c
 8004e6c:	0801c248 	.word	0x0801c248

08004e70 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /*Wait for next tx slot*/
  TimerStart(&TxTimer);
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <OnTxTimerEvent+0x20>)
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f016 f826 	bl	801aecc <TimerStart>

  AppProcessRequest = LORA_SET;
 8004e80:	4b04      	ldr	r3, [pc, #16]	; (8004e94 <OnTxTimerEvent+0x24>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	701a      	strb	r2, [r3, #0]
}
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	b002      	add	sp, #8
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	200002bc 	.word	0x200002bc
 8004e94:	200002b9 	.word	0x200002b9

08004e98 <LoraStartTx>:

static void LoraStartTx(TxEventType_t EventType)
{
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b089      	sub	sp, #36	; 0x24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	0002      	movs	r2, r0
 8004ea0:	1dfb      	adds	r3, r7, #7
 8004ea2:	701a      	strb	r2, [r3, #0]
  if (EventType == TX_ON_TIMER)
 8004ea4:	1dfb      	adds	r3, r7, #7
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10f      	bne.n	8004ecc <LoraStartTx+0x34>
  {
    /* send everytime timer elapses */
    TimerInit(&TxTimer, OnTxTimerEvent);
 8004eac:	4a18      	ldr	r2, [pc, #96]	; (8004f10 <LoraStartTx+0x78>)
 8004eae:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <LoraStartTx+0x7c>)
 8004eb0:	0011      	movs	r1, r2
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f015 ffeb 	bl	801ae8e <TimerInit>
    TimerSetValue(&TxTimer,  APP_TX_DUTYCYCLE);
 8004eb8:	4a17      	ldr	r2, [pc, #92]	; (8004f18 <LoraStartTx+0x80>)
 8004eba:	4b16      	ldr	r3, [pc, #88]	; (8004f14 <LoraStartTx+0x7c>)
 8004ebc:	0011      	movs	r1, r2
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f016 f956 	bl	801b170 <TimerSetValue>
    OnTxTimerEvent(NULL);
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	f7ff ffd3 	bl	8004e70 <OnTxTimerEvent>
    initStruct.Speed = GPIO_SPEED_HIGH;

    HW_GPIO_Init(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, &initStruct);
    HW_GPIO_SetIrq(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, 0, Send);
  }
}
 8004eca:	e01c      	b.n	8004f06 <LoraStartTx+0x6e>
    GPIO_InitTypeDef initStruct = {0};
 8004ecc:	240c      	movs	r4, #12
 8004ece:	193b      	adds	r3, r7, r4
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	2314      	movs	r3, #20
 8004ed4:	001a      	movs	r2, r3
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	f016 fbcc 	bl	801b674 <memset>
    initStruct.Mode = GPIO_MODE_IT_RISING;
 8004edc:	193b      	adds	r3, r7, r4
 8004ede:	4a0f      	ldr	r2, [pc, #60]	; (8004f1c <LoraStartTx+0x84>)
 8004ee0:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_PULLUP;
 8004ee2:	193b      	adds	r3, r7, r4
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8004ee8:	193b      	adds	r3, r7, r4
 8004eea:	2203      	movs	r2, #3
 8004eec:	60da      	str	r2, [r3, #12]
    HW_GPIO_Init(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, &initStruct);
 8004eee:	193b      	adds	r3, r7, r4
 8004ef0:	480b      	ldr	r0, [pc, #44]	; (8004f20 <LoraStartTx+0x88>)
 8004ef2:	001a      	movs	r2, r3
 8004ef4:	2104      	movs	r1, #4
 8004ef6:	f7fe febb 	bl	8003c70 <HW_GPIO_Init>
    HW_GPIO_SetIrq(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, 0, Send);
 8004efa:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <LoraStartTx+0x8c>)
 8004efc:	4808      	ldr	r0, [pc, #32]	; (8004f20 <LoraStartTx+0x88>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	2104      	movs	r1, #4
 8004f02:	f7fe ff29 	bl	8003d58 <HW_GPIO_SetIrq>
}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b009      	add	sp, #36	; 0x24
 8004f0c:	bd90      	pop	{r4, r7, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	08004e71 	.word	0x08004e71
 8004f14:	200002bc 	.word	0x200002bc
 8004f18:	00002710 	.word	0x00002710
 8004f1c:	10110000 	.word	0x10110000
 8004f20:	50000400 	.word	0x50000400
 8004f24:	08004ac5 	.word	0x08004ac5

08004f28 <LORA_ConfirmClass>:

static void LORA_ConfirmClass(DeviceClass_t Class)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	0002      	movs	r2, r0
 8004f30:	1dfb      	adds	r3, r7, #7
 8004f32:	701a      	strb	r2, [r3, #0]
  PRINTF("switch to class %c done\n\r", "ABC"[Class]);
 8004f34:	1dfb      	adds	r3, r7, #7
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	4a0b      	ldr	r2, [pc, #44]	; (8004f68 <LORA_ConfirmClass+0x40>)
 8004f3a:	5cd3      	ldrb	r3, [r2, r3]
 8004f3c:	001a      	movs	r2, r3
 8004f3e:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <LORA_ConfirmClass+0x44>)
 8004f40:	0011      	movs	r1, r2
 8004f42:	0018      	movs	r0, r3
 8004f44:	f016 fa0a 	bl	801b35c <TraceSend>

  /*Optionnal*/
  /*informs the server that switch has occurred ASAP*/
  AppData.BuffSize = 0;
 8004f48:	4b09      	ldr	r3, [pc, #36]	; (8004f70 <LORA_ConfirmClass+0x48>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	711a      	strb	r2, [r3, #4]
  AppData.Port = LORAWAN_APP_PORT;
 8004f4e:	4b08      	ldr	r3, [pc, #32]	; (8004f70 <LORA_ConfirmClass+0x48>)
 8004f50:	2202      	movs	r2, #2
 8004f52:	715a      	strb	r2, [r3, #5]

  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 8004f54:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <LORA_ConfirmClass+0x48>)
 8004f56:	2100      	movs	r1, #0
 8004f58:	0018      	movs	r0, r3
 8004f5a:	f015 fa59 	bl	801a410 <LORA_send>
}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	46bd      	mov	sp, r7
 8004f62:	b002      	add	sp, #8
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	0801c270 	.word	0x0801c270
 8004f6c:	0801c254 	.word	0x0801c254
 8004f70:	20000000 	.word	0x20000000

08004f74 <LORA_TxNeeded>:

static void LORA_TxNeeded(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  AppData.BuffSize = 0;
 8004f78:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <LORA_TxNeeded+0x20>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	711a      	strb	r2, [r3, #4]
  AppData.Port = LORAWAN_APP_PORT;
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <LORA_TxNeeded+0x20>)
 8004f80:	2202      	movs	r2, #2
 8004f82:	715a      	strb	r2, [r3, #5]

  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 8004f84:	4b03      	ldr	r3, [pc, #12]	; (8004f94 <LORA_TxNeeded+0x20>)
 8004f86:	2100      	movs	r1, #0
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f015 fa41 	bl	801a410 <LORA_send>
}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20000000 	.word	0x20000000

08004f98 <LORA_GetBatteryLevel>:
  * @brief This function return the battery level
  * @param none
  * @retval the battery level  1 (very low) to 254 (fully charged)
  */
uint8_t LORA_GetBatteryLevel(void)
{
 8004f98:	b590      	push	{r4, r7, lr}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
  uint16_t batteryLevelmV;
  uint8_t batteryLevel = 0;
 8004f9e:	1dfb      	adds	r3, r7, #7
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]

  batteryLevelmV = HW_GetBatteryLevel();
 8004fa4:	1d3c      	adds	r4, r7, #4
 8004fa6:	f000 fb41 	bl	800562c <HW_GetBatteryLevel>
 8004faa:	0003      	movs	r3, r0
 8004fac:	8023      	strh	r3, [r4, #0]


  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8004fae:	1d3b      	adds	r3, r7, #4
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	4a15      	ldr	r2, [pc, #84]	; (8005008 <LORA_GetBatteryLevel+0x70>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d903      	bls.n	8004fc0 <LORA_GetBatteryLevel+0x28>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8004fb8:	1dfb      	adds	r3, r7, #7
 8004fba:	22fe      	movs	r2, #254	; 0xfe
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	e01c      	b.n	8004ffa <LORA_GetBatteryLevel+0x62>
  }
  else if (batteryLevelmV < VDD_MIN)
 8004fc0:	1d3b      	adds	r3, r7, #4
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	4a11      	ldr	r2, [pc, #68]	; (800500c <LORA_GetBatteryLevel+0x74>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d803      	bhi.n	8004fd2 <LORA_GetBatteryLevel+0x3a>
  {
    batteryLevel = 0;
 8004fca:	1dfb      	adds	r3, r7, #7
 8004fcc:	2200      	movs	r2, #0
 8004fce:	701a      	strb	r2, [r3, #0]
 8004fd0:	e013      	b.n	8004ffa <LORA_GetBatteryLevel+0x62>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8004fd2:	1d3b      	adds	r3, r7, #4
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	4a0e      	ldr	r2, [pc, #56]	; (8005010 <LORA_GetBatteryLevel+0x78>)
 8004fd8:	4694      	mov	ip, r2
 8004fda:	4463      	add	r3, ip
 8004fdc:	001a      	movs	r2, r3
 8004fde:	0013      	movs	r3, r2
 8004fe0:	01db      	lsls	r3, r3, #7
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	001a      	movs	r2, r3
 8004fe8:	2396      	movs	r3, #150	; 0x96
 8004fea:	00d9      	lsls	r1, r3, #3
 8004fec:	0010      	movs	r0, r2
 8004fee:	f7fb f88b 	bl	8000108 <__udivsi3>
 8004ff2:	0003      	movs	r3, r0
 8004ff4:	001a      	movs	r2, r3
 8004ff6:	1dfb      	adds	r3, r7, #7
 8004ff8:	701a      	strb	r2, [r3, #0]
  }

  return batteryLevel;
 8004ffa:	1dfb      	adds	r3, r7, #7
 8004ffc:	781b      	ldrb	r3, [r3, #0]
}
 8004ffe:	0018      	movs	r0, r3
 8005000:	46bd      	mov	sp, r7
 8005002:	b003      	add	sp, #12
 8005004:	bd90      	pop	{r4, r7, pc}
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	00000bb8 	.word	0x00000bb8
 800500c:	00000707 	.word	0x00000707
 8005010:	fffff8f8 	.word	0xfffff8f8

08005014 <OnTimerLedEvent>:
	          PRINTF(msg);
}

#ifdef USE_B_L072Z_LRWAN1
static void OnTimerLedEvent(void *context)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  LED_Off(LED_RED1) ;
 800501c:	2001      	movs	r0, #1
 800501e:	f000 ffe7 	bl	8005ff0 <BSP_LED_Off>
}
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	46bd      	mov	sp, r7
 8005026:	b002      	add	sp, #8
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b082      	sub	sp, #8
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  /* Return function status */
  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	0018      	movs	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	b002      	add	sp, #8
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	0018      	movs	r0, r3
 8005048:	f7ff f8aa 	bl	80041a0 <HW_RTC_DelayMs>
}
 800504c:	46c0      	nop			; (mov r8, r8)
 800504e:	46bd      	mov	sp, r7
 8005050:	b002      	add	sp, #8
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8005058:	4b0e      	ldr	r3, [pc, #56]	; (8005094 <HAL_MspInit+0x40>)
 800505a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800505c:	4b0d      	ldr	r3, [pc, #52]	; (8005094 <HAL_MspInit+0x40>)
 800505e:	2180      	movs	r1, #128	; 0x80
 8005060:	0549      	lsls	r1, r1, #21
 8005062:	430a      	orrs	r2, r1
 8005064:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8005066:	f005 fd95 	bl	800ab94 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 800506a:	f005 fe13 	bl	800ac94 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800506e:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <HAL_MspInit+0x44>)
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4b09      	ldr	r3, [pc, #36]	; (8005098 <HAL_MspInit+0x44>)
 8005074:	2108      	movs	r1, #8
 8005076:	430a      	orrs	r2, r1
 8005078:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 800507a:	4b07      	ldr	r3, [pc, #28]	; (8005098 <HAL_MspInit+0x44>)
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b06      	ldr	r3, [pc, #24]	; (8005098 <HAL_MspInit+0x44>)
 8005080:	2108      	movs	r1, #8
 8005082:	438a      	bics	r2, r1
 8005084:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8005086:	f005 fdf7 	bl	800ac78 <HAL_PWREx_EnableFastWakeUp>
#else
  HAL_PWREx_DisableFastWakeUp();
#endif

  HW_GpioInit();
 800508a:	f000 f8fd 	bl	8005288 <HW_GpioInit>
}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40021000 	.word	0x40021000
 8005098:	40022000 	.word	0x40022000

0800509c <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including
  *        the backup registers) and RCC_CSR register are set to their reset values.
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 800509c:	b590      	push	{r4, r7, lr}
 800509e:	b09b      	sub	sp, #108	; 0x6c
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050a4:	2430      	movs	r4, #48	; 0x30
 80050a6:	193b      	adds	r3, r7, r4
 80050a8:	0018      	movs	r0, r3
 80050aa:	2338      	movs	r3, #56	; 0x38
 80050ac:	001a      	movs	r2, r3
 80050ae:	2100      	movs	r1, #0
 80050b0:	f016 fae0 	bl	801b674 <memset>
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 80050b4:	230c      	movs	r3, #12
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	0018      	movs	r0, r3
 80050ba:	2324      	movs	r3, #36	; 0x24
 80050bc:	001a      	movs	r2, r3
 80050be:	2100      	movs	r1, #0
 80050c0:	f016 fad8 	bl	801b674 <memset>

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 80050c4:	193b      	adds	r3, r7, r4
 80050c6:	2204      	movs	r2, #4
 80050c8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80050ca:	193b      	adds	r3, r7, r4
 80050cc:	2200      	movs	r2, #0
 80050ce:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80050d0:	193b      	adds	r3, r7, r4
 80050d2:	2280      	movs	r2, #128	; 0x80
 80050d4:	0052      	lsls	r2, r2, #1
 80050d6:	609a      	str	r2, [r3, #8]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80050d8:	193b      	adds	r3, r7, r4
 80050da:	0018      	movs	r0, r3
 80050dc:	f005 fde8 	bl	800acb0 <HAL_RCC_OscConfig>
 80050e0:	1e03      	subs	r3, r0, #0
 80050e2:	d001      	beq.n	80050e8 <HAL_RTC_MspInit+0x4c>
  {
    Error_Handler();
 80050e4:	f7fe fdba 	bl	8003c5c <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80050e8:	210c      	movs	r1, #12
 80050ea:	187b      	adds	r3, r7, r1
 80050ec:	2220      	movs	r2, #32
 80050ee:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80050f0:	187b      	adds	r3, r7, r1
 80050f2:	2280      	movs	r2, #128	; 0x80
 80050f4:	0252      	lsls	r2, r2, #9
 80050f6:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050f8:	187b      	adds	r3, r7, r1
 80050fa:	0018      	movs	r0, r3
 80050fc:	f006 fb8c 	bl	800b818 <HAL_RCCEx_PeriphCLKConfig>
 8005100:	1e03      	subs	r3, r0, #0
 8005102:	d001      	beq.n	8005108 <HAL_RTC_MspInit+0x6c>
  {
    Error_Handler();
 8005104:	f7fe fdaa 	bl	8003c5c <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 8005108:	4b09      	ldr	r3, [pc, #36]	; (8005130 <HAL_RTC_MspInit+0x94>)
 800510a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800510c:	4b08      	ldr	r3, [pc, #32]	; (8005130 <HAL_RTC_MspInit+0x94>)
 800510e:	2180      	movs	r1, #128	; 0x80
 8005110:	02c9      	lsls	r1, r1, #11
 8005112:	430a      	orrs	r2, r1
 8005114:	651a      	str	r2, [r3, #80]	; 0x50

  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 8005116:	2200      	movs	r2, #0
 8005118:	2100      	movs	r1, #0
 800511a:	2002      	movs	r0, #2
 800511c:	f004 fb8c 	bl	8009838 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8005120:	2002      	movs	r0, #2
 8005122:	f004 fb9e 	bl	8009862 <HAL_NVIC_EnableIRQ>
}
 8005126:	46c0      	nop			; (mov r8, r8)
 8005128:	46bd      	mov	sp, r7
 800512a:	b01b      	add	sp, #108	; 0x6c
 800512c:	bd90      	pop	{r4, r7, pc}
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	40021000 	.word	0x40021000

08005134 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  TimerIrqHandler();
 800513c:	f015 ff1a 	bl	801af74 <TimerIrqHandler>
}
 8005140:	46c0      	nop			; (mov r8, r8)
 8005142:	46bd      	mov	sp, r7
 8005144:	b002      	add	sp, #8
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	0002      	movs	r2, r0
 8005150:	1dbb      	adds	r3, r7, #6
 8005152:	801a      	strh	r2, [r3, #0]
  HW_GPIO_IrqHandler(GPIO_Pin);
 8005154:	1dbb      	adds	r3, r7, #6
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	0018      	movs	r0, r3
 800515a:	f7fe fe3b 	bl	8003dd4 <HW_GPIO_IrqHandler>
}
 800515e:	46c0      	nop			; (mov r8, r8)
 8005160:	46bd      	mov	sp, r7
 8005162:	b002      	add	sp, #8
 8005164:	bd80      	pop	{r7, pc}

08005166 <MSP_GetIRQn>:
  * @brief  Gets IRQ number as a function of the GPIO_Pin.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn(uint16_t GPIO_Pin)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	0002      	movs	r2, r0
 800516e:	1dbb      	adds	r3, r7, #6
 8005170:	801a      	strh	r2, [r3, #0]
  switch (GPIO_Pin)
 8005172:	1dbb      	adds	r3, r7, #6
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	2b04      	cmp	r3, #4
 8005178:	d009      	beq.n	800518e <MSP_GetIRQn+0x28>
 800517a:	dc03      	bgt.n	8005184 <MSP_GetIRQn+0x1e>
 800517c:	3b01      	subs	r3, #1
 800517e:	2b01      	cmp	r3, #1
 8005180:	d807      	bhi.n	8005192 <MSP_GetIRQn+0x2c>
 8005182:	e002      	b.n	800518a <MSP_GetIRQn+0x24>
 8005184:	2b08      	cmp	r3, #8
 8005186:	d002      	beq.n	800518e <MSP_GetIRQn+0x28>
 8005188:	e003      	b.n	8005192 <MSP_GetIRQn+0x2c>
  {
    case GPIO_PIN_0:
    case GPIO_PIN_1:
      return EXTI0_1_IRQn;
 800518a:	2305      	movs	r3, #5
 800518c:	e002      	b.n	8005194 <MSP_GetIRQn+0x2e>
    case GPIO_PIN_2:
    case GPIO_PIN_3:
      return EXTI2_3_IRQn;
 800518e:	2306      	movs	r3, #6
 8005190:	e000      	b.n	8005194 <MSP_GetIRQn+0x2e>
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
    default:
      return EXTI4_15_IRQn;
 8005192:	2307      	movs	r3, #7
  }
}
 8005194:	0018      	movs	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	b002      	add	sp, #8
 800519a:	bd80      	pop	{r7, pc}

0800519c <HW_Init>:
  * @brief This function initializes the hardware
  * @param None
  * @retval None
  */
void HW_Init(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  if (McuInitialized == false)
 80051a0:	4b13      	ldr	r3, [pc, #76]	; (80051f0 <HW_Init+0x54>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2201      	movs	r2, #1
 80051a6:	4053      	eors	r3, r2
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01d      	beq.n	80051ea <HW_Init+0x4e>
#if defined( USE_BOOTLOADER )
    /* Set the Vector Table base location at 0x3000 */
    NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
#endif

    HW_AdcInit();
 80051ae:	f000 fa6b 	bl	8005688 <HW_AdcInit>

    Radio.IoInit();
 80051b2:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <HW_Init+0x58>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4798      	blx	r3

    //12c init
    MX_I2C1_Init();
 80051b8:	f7ff fb96 	bl	80048e8 <MX_I2C1_Init>

    HW_SPI_Init();
 80051bc:	f7ff fab8 	bl	8004730 <HW_SPI_Init>


    HW_RTC_Init();
 80051c0:	f7fe fe92 	bl	8003ee8 <HW_RTC_Init>

    TraceInit();
 80051c4:	f016 f8b4 	bl	801b330 <TraceInit>

   // BSP_sensor_Init();
 //******** bme sensor init*********//
    BMEinit();
 80051c8:	f7fd ff5c 	bl	8003084 <BMEinit>
    BSP_LED_Init(LED1);
 80051cc:	2000      	movs	r0, #0
 80051ce:	f000 fe85 	bl	8005edc <BSP_LED_Init>
    BSP_LED_Init(LED2);
 80051d2:	2001      	movs	r0, #1
 80051d4:	f000 fe82 	bl	8005edc <BSP_LED_Init>
    BSP_LED_Init(LED3);
 80051d8:	2002      	movs	r0, #2
 80051da:	f000 fe7f 	bl	8005edc <BSP_LED_Init>
    BSP_LED_Init(LED4);
 80051de:	2003      	movs	r0, #3
 80051e0:	f000 fe7c 	bl	8005edc <BSP_LED_Init>

    McuInitialized = true;
 80051e4:	4b02      	ldr	r3, [pc, #8]	; (80051f0 <HW_Init+0x54>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	701a      	strb	r2, [r3, #0]
  }
}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20000349 	.word	0x20000349
 80051f4:	0801ca04 	.word	0x0801ca04

080051f8 <HW_IoInit>:
  * @brief This function Initializes the hardware Ios
  * @param None
  * @retval None
  */
static void HW_IoInit(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  HW_SPI_IoInit();
 80051fc:	f7ff fade 	bl	80047bc <HW_SPI_IoInit>

  Radio.IoInit();
 8005200:	4b03      	ldr	r3, [pc, #12]	; (8005210 <HW_IoInit+0x18>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4798      	blx	r3

  vcom_IoInit();
 8005206:	f000 fdbd 	bl	8005d84 <vcom_IoInit>
}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	0801ca04 	.word	0x0801ca04

08005214 <HW_IoDeInit>:
  * @brief This function Deinitializes the hardware Ios
  * @param None
  * @retval None
  */
static void HW_IoDeInit(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
  /*  HW_SPI_IoDeInit( );*/
  GPIO_InitTypeDef initStruct = {0};
 800521a:	1d3b      	adds	r3, r7, #4
 800521c:	0018      	movs	r0, r3
 800521e:	2314      	movs	r3, #20
 8005220:	001a      	movs	r2, r3
 8005222:	2100      	movs	r1, #0
 8005224:	f016 fa26 	bl	801b674 <memset>

  initStruct.Mode = GPIO_MODE_ANALOG;
 8005228:	1d3b      	adds	r3, r7, #4
 800522a:	2203      	movs	r2, #3
 800522c:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 800522e:	1d3b      	adds	r3, r7, #4
 8005230:	2200      	movs	r2, #0
 8005232:	609a      	str	r2, [r3, #8]
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 8005234:	1d3a      	adds	r2, r7, #4
 8005236:	23a0      	movs	r3, #160	; 0xa0
 8005238:	05db      	lsls	r3, r3, #23
 800523a:	2180      	movs	r1, #128	; 0x80
 800523c:	0018      	movs	r0, r3
 800523e:	f7fe fd17 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 8005242:	1d3a      	adds	r2, r7, #4
 8005244:	23a0      	movs	r3, #160	; 0xa0
 8005246:	05db      	lsls	r3, r3, #23
 8005248:	2140      	movs	r1, #64	; 0x40
 800524a:	0018      	movs	r0, r3
 800524c:	f7fe fd10 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 8005250:	1d3b      	adds	r3, r7, #4
 8005252:	480b      	ldr	r0, [pc, #44]	; (8005280 <HW_IoDeInit+0x6c>)
 8005254:	001a      	movs	r2, r3
 8005256:	2108      	movs	r1, #8
 8005258:	f7fe fd0a 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 800525c:	1d3a      	adds	r2, r7, #4
 800525e:	2380      	movs	r3, #128	; 0x80
 8005260:	0219      	lsls	r1, r3, #8
 8005262:	23a0      	movs	r3, #160	; 0xa0
 8005264:	05db      	lsls	r3, r3, #23
 8005266:	0018      	movs	r0, r3
 8005268:	f7fe fd02 	bl	8003c70 <HW_GPIO_Init>


  Radio.IoDeInit();
 800526c:	4b05      	ldr	r3, [pc, #20]	; (8005284 <HW_IoDeInit+0x70>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	4798      	blx	r3

  vcom_IoDeInit();
 8005272:	f000 fdd3 	bl	8005e1c <vcom_IoDeInit>
}
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	46bd      	mov	sp, r7
 800527a:	b006      	add	sp, #24
 800527c:	bd80      	pop	{r7, pc}
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	50000400 	.word	0x50000400
 8005284:	0801ca04 	.word	0x0801ca04

08005288 <HW_GpioInit>:


void HW_GpioInit(void)
{
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b08b      	sub	sp, #44	; 0x2c
 800528c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800528e:	2414      	movs	r4, #20
 8005290:	193b      	adds	r3, r7, r4
 8005292:	0018      	movs	r0, r3
 8005294:	2314      	movs	r3, #20
 8005296:	001a      	movs	r2, r3
 8005298:	2100      	movs	r1, #0
 800529a:	f016 f9eb 	bl	801b674 <memset>

  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800529e:	4b38      	ldr	r3, [pc, #224]	; (8005380 <HW_GpioInit+0xf8>)
 80052a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a2:	4b37      	ldr	r3, [pc, #220]	; (8005380 <HW_GpioInit+0xf8>)
 80052a4:	2101      	movs	r1, #1
 80052a6:	430a      	orrs	r2, r1
 80052a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80052aa:	4b35      	ldr	r3, [pc, #212]	; (8005380 <HW_GpioInit+0xf8>)
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	2201      	movs	r2, #1
 80052b0:	4013      	ands	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
 80052b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80052b6:	4b32      	ldr	r3, [pc, #200]	; (8005380 <HW_GpioInit+0xf8>)
 80052b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ba:	4b31      	ldr	r3, [pc, #196]	; (8005380 <HW_GpioInit+0xf8>)
 80052bc:	2102      	movs	r1, #2
 80052be:	430a      	orrs	r2, r1
 80052c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80052c2:	4b2f      	ldr	r3, [pc, #188]	; (8005380 <HW_GpioInit+0xf8>)
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	2202      	movs	r2, #2
 80052c8:	4013      	ands	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80052ce:	4b2c      	ldr	r3, [pc, #176]	; (8005380 <HW_GpioInit+0xf8>)
 80052d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d2:	4b2b      	ldr	r3, [pc, #172]	; (8005380 <HW_GpioInit+0xf8>)
 80052d4:	2104      	movs	r1, #4
 80052d6:	430a      	orrs	r2, r1
 80052d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80052da:	4b29      	ldr	r3, [pc, #164]	; (8005380 <HW_GpioInit+0xf8>)
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	2204      	movs	r2, #4
 80052e0:	4013      	ands	r3, r2
 80052e2:	60bb      	str	r3, [r7, #8]
 80052e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80052e6:	4b26      	ldr	r3, [pc, #152]	; (8005380 <HW_GpioInit+0xf8>)
 80052e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ea:	4b25      	ldr	r3, [pc, #148]	; (8005380 <HW_GpioInit+0xf8>)
 80052ec:	2180      	movs	r1, #128	; 0x80
 80052ee:	430a      	orrs	r2, r1
 80052f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80052f2:	4b23      	ldr	r3, [pc, #140]	; (8005380 <HW_GpioInit+0xf8>)
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	2280      	movs	r2, #128	; 0x80
 80052f8:	4013      	ands	r3, r2
 80052fa:	607b      	str	r3, [r7, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052fe:	193b      	adds	r3, r7, r4
 8005300:	2203      	movs	r2, #3
 8005302:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005304:	193b      	adds	r3, r7, r4
 8005306:	2200      	movs	r2, #0
 8005308:	609a      	str	r2, [r3, #8]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 800530a:	193b      	adds	r3, r7, r4
 800530c:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <HW_GpioInit+0xfc>)
 800530e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005310:	193a      	adds	r2, r7, r4
 8005312:	23a0      	movs	r3, #160	; 0xa0
 8005314:	05db      	lsls	r3, r3, #23
 8005316:	0011      	movs	r1, r2
 8005318:	0018      	movs	r0, r3
 800531a:	f004 fcb5 	bl	8009c88 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800531e:	193b      	adds	r3, r7, r4
 8005320:	4a19      	ldr	r2, [pc, #100]	; (8005388 <HW_GpioInit+0x100>)
 8005322:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005324:	193b      	adds	r3, r7, r4
 8005326:	4a19      	ldr	r2, [pc, #100]	; (800538c <HW_GpioInit+0x104>)
 8005328:	0019      	movs	r1, r3
 800532a:	0010      	movs	r0, r2
 800532c:	f004 fcac 	bl	8009c88 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005330:	193b      	adds	r3, r7, r4
 8005332:	4a17      	ldr	r2, [pc, #92]	; (8005390 <HW_GpioInit+0x108>)
 8005334:	0019      	movs	r1, r3
 8005336:	0010      	movs	r0, r2
 8005338:	f004 fca6 	bl	8009c88 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800533c:	193b      	adds	r3, r7, r4
 800533e:	4a15      	ldr	r2, [pc, #84]	; (8005394 <HW_GpioInit+0x10c>)
 8005340:	0019      	movs	r1, r3
 8005342:	0010      	movs	r0, r2
 8005344:	f004 fca0 	bl	8009c88 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8005348:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <HW_GpioInit+0xf8>)
 800534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534c:	4b0c      	ldr	r3, [pc, #48]	; (8005380 <HW_GpioInit+0xf8>)
 800534e:	2101      	movs	r1, #1
 8005350:	438a      	bics	r2, r1
 8005352:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8005354:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <HW_GpioInit+0xf8>)
 8005356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005358:	4b09      	ldr	r3, [pc, #36]	; (8005380 <HW_GpioInit+0xf8>)
 800535a:	2102      	movs	r1, #2
 800535c:	438a      	bics	r2, r1
 800535e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8005360:	4b07      	ldr	r3, [pc, #28]	; (8005380 <HW_GpioInit+0xf8>)
 8005362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005364:	4b06      	ldr	r3, [pc, #24]	; (8005380 <HW_GpioInit+0xf8>)
 8005366:	2104      	movs	r1, #4
 8005368:	438a      	bics	r2, r1
 800536a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 800536c:	4b04      	ldr	r3, [pc, #16]	; (8005380 <HW_GpioInit+0xf8>)
 800536e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005370:	4b03      	ldr	r3, [pc, #12]	; (8005380 <HW_GpioInit+0xf8>)
 8005372:	2180      	movs	r1, #128	; 0x80
 8005374:	438a      	bics	r2, r1
 8005376:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005378:	46c0      	nop			; (mov r8, r8)
 800537a:	46bd      	mov	sp, r7
 800537c:	b00b      	add	sp, #44	; 0x2c
 800537e:	bd90      	pop	{r4, r7, pc}
 8005380:	40021000 	.word	0x40021000
 8005384:	00009fff 	.word	0x00009fff
 8005388:	0000ffff 	.word	0x0000ffff
 800538c:	50000400 	.word	0x50000400
 8005390:	50000800 	.word	0x50000800
 8005394:	50001c00 	.word	0x50001c00

08005398 <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config(void)
{
 8005398:	b590      	push	{r4, r7, lr}
 800539a:	b09d      	sub	sp, #116	; 0x74
 800539c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800539e:	235c      	movs	r3, #92	; 0x5c
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	0018      	movs	r0, r3
 80053a4:	2314      	movs	r3, #20
 80053a6:	001a      	movs	r2, r3
 80053a8:	2100      	movs	r1, #0
 80053aa:	f016 f963 	bl	801b674 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80053ae:	2424      	movs	r4, #36	; 0x24
 80053b0:	193b      	adds	r3, r7, r4
 80053b2:	0018      	movs	r0, r3
 80053b4:	2338      	movs	r3, #56	; 0x38
 80053b6:	001a      	movs	r2, r3
 80053b8:	2100      	movs	r1, #0
 80053ba:	f016 f95b 	bl	801b674 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053be:	003b      	movs	r3, r7
 80053c0:	0018      	movs	r0, r3
 80053c2:	2324      	movs	r3, #36	; 0x24
 80053c4:	001a      	movs	r2, r3
 80053c6:	2100      	movs	r1, #0
 80053c8:	f016 f954 	bl	801b674 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 80053cc:	0021      	movs	r1, r4
 80053ce:	187b      	adds	r3, r7, r1
 80053d0:	2202      	movs	r2, #2
 80053d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 80053d4:	187b      	adds	r3, r7, r1
 80053d6:	2200      	movs	r2, #0
 80053d8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 80053da:	187b      	adds	r3, r7, r1
 80053dc:	2201      	movs	r2, #1
 80053de:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80053e0:	187b      	adds	r3, r7, r1
 80053e2:	2210      	movs	r2, #16
 80053e4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 80053e6:	187b      	adds	r3, r7, r1
 80053e8:	2202      	movs	r2, #2
 80053ea:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 80053ec:	187b      	adds	r3, r7, r1
 80053ee:	2200      	movs	r2, #0
 80053f0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 80053f2:	187b      	adds	r3, r7, r1
 80053f4:	2280      	movs	r2, #128	; 0x80
 80053f6:	0312      	lsls	r2, r2, #12
 80053f8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 80053fa:	187b      	adds	r3, r7, r1
 80053fc:	2280      	movs	r2, #128	; 0x80
 80053fe:	0412      	lsls	r2, r2, #16
 8005400:	635a      	str	r2, [r3, #52]	; 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005402:	187b      	adds	r3, r7, r1
 8005404:	0018      	movs	r0, r3
 8005406:	f005 fc53 	bl	800acb0 <HAL_RCC_OscConfig>
 800540a:	1e03      	subs	r3, r0, #0
 800540c:	d001      	beq.n	8005412 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800540e:	f7fe fc25 	bl	8003c5c <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005412:	4b21      	ldr	r3, [pc, #132]	; (8005498 <SystemClock_Config+0x100>)
 8005414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005416:	4b20      	ldr	r3, [pc, #128]	; (8005498 <SystemClock_Config+0x100>)
 8005418:	2180      	movs	r1, #128	; 0x80
 800541a:	0549      	lsls	r1, r1, #21
 800541c:	430a      	orrs	r2, r1
 800541e:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005420:	4b1e      	ldr	r3, [pc, #120]	; (800549c <SystemClock_Config+0x104>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1e      	ldr	r2, [pc, #120]	; (80054a0 <SystemClock_Config+0x108>)
 8005426:	401a      	ands	r2, r3
 8005428:	4b1c      	ldr	r3, [pc, #112]	; (800549c <SystemClock_Config+0x104>)
 800542a:	2180      	movs	r1, #128	; 0x80
 800542c:	0109      	lsls	r1, r1, #4
 800542e:	430a      	orrs	r2, r1
 8005430:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	4b19      	ldr	r3, [pc, #100]	; (800549c <SystemClock_Config+0x104>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2210      	movs	r2, #16
 800543a:	4013      	ands	r3, r2
 800543c:	2b10      	cmp	r3, #16
 800543e:	d0f9      	beq.n	8005434 <SystemClock_Config+0x9c>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8005440:	215c      	movs	r1, #92	; 0x5c
 8005442:	187b      	adds	r3, r7, r1
 8005444:	220f      	movs	r2, #15
 8005446:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005448:	187b      	adds	r3, r7, r1
 800544a:	2203      	movs	r2, #3
 800544c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800544e:	187b      	adds	r3, r7, r1
 8005450:	2200      	movs	r2, #0
 8005452:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005454:	187b      	adds	r3, r7, r1
 8005456:	2200      	movs	r2, #0
 8005458:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800545a:	187b      	adds	r3, r7, r1
 800545c:	2200      	movs	r2, #0
 800545e:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005460:	187b      	adds	r3, r7, r1
 8005462:	2101      	movs	r1, #1
 8005464:	0018      	movs	r0, r3
 8005466:	f005 fff3 	bl	800b450 <HAL_RCC_ClockConfig>
 800546a:	1e03      	subs	r3, r0, #0
 800546c:	d001      	beq.n	8005472 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800546e:	f7fe fbf5 	bl	8003c5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005472:	003b      	movs	r3, r7
 8005474:	2208      	movs	r2, #8
 8005476:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005478:	003b      	movs	r3, r7
 800547a:	2200      	movs	r2, #0
 800547c:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800547e:	003b      	movs	r3, r7
 8005480:	0018      	movs	r0, r3
 8005482:	f006 f9c9 	bl	800b818 <HAL_RCCEx_PeriphCLKConfig>
 8005486:	1e03      	subs	r3, r0, #0
 8005488:	d001      	beq.n	800548e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800548a:	f7fe fbe7 	bl	8003c5c <Error_Handler>
  }
}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	46bd      	mov	sp, r7
 8005492:	b01d      	add	sp, #116	; 0x74
 8005494:	bd90      	pop	{r4, r7, pc}
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	40021000 	.word	0x40021000
 800549c:	40007000 	.word	0x40007000
 80054a0:	ffffe7ff 	.word	0xffffe7ff

080054a4 <HW_GetRandomSeed>:
  * @note based on the device unique ID
  * @param None
  * @retval see
  */
uint32_t HW_GetRandomSeed(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  return ((*(uint32_t *)ID1) ^ (*(uint32_t *)ID2) ^ (*(uint32_t *)ID3));
 80054a8:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <HW_GetRandomSeed+0x1c>)
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <HW_GetRandomSeed+0x20>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	405a      	eors	r2, r3
 80054b2:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <HW_GetRandomSeed+0x24>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4053      	eors	r3, r2
}
 80054b8:	0018      	movs	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	1ff80050 	.word	0x1ff80050
 80054c4:	1ff80054 	.word	0x1ff80054
 80054c8:	1ff80064 	.word	0x1ff80064

080054cc <HW_GetUniqueId>:
  * @brief This function return a unique ID
  * @param unique ID
  * @retval none
  */
void HW_GetUniqueId(uint8_t *id)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 80054d4:	4b23      	ldr	r3, [pc, #140]	; (8005564 <HW_GetUniqueId+0x98>)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4b23      	ldr	r3, [pc, #140]	; (8005568 <HW_GetUniqueId+0x9c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	18d3      	adds	r3, r2, r3
 80054de:	0e1a      	lsrs	r2, r3, #24
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3307      	adds	r3, #7
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]
  id[6] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 16;
 80054e8:	4b1e      	ldr	r3, [pc, #120]	; (8005564 <HW_GetUniqueId+0x98>)
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	4b1e      	ldr	r3, [pc, #120]	; (8005568 <HW_GetUniqueId+0x9c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	18d3      	adds	r3, r2, r3
 80054f2:	0c1a      	lsrs	r2, r3, #16
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3306      	adds	r3, #6
 80054f8:	b2d2      	uxtb	r2, r2
 80054fa:	701a      	strb	r2, [r3, #0]
  id[5] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 8;
 80054fc:	4b19      	ldr	r3, [pc, #100]	; (8005564 <HW_GetUniqueId+0x98>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	4b19      	ldr	r3, [pc, #100]	; (8005568 <HW_GetUniqueId+0x9c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	18d3      	adds	r3, r2, r3
 8005506:	0a1a      	lsrs	r2, r3, #8
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3305      	adds	r3, #5
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]
  id[4] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3));
 8005510:	4b14      	ldr	r3, [pc, #80]	; (8005564 <HW_GetUniqueId+0x98>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	b2d9      	uxtb	r1, r3
 8005516:	4b14      	ldr	r3, [pc, #80]	; (8005568 <HW_GetUniqueId+0x9c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	b2da      	uxtb	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3304      	adds	r3, #4
 8005520:	188a      	adds	r2, r1, r2
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]
  id[3] = ((*(uint32_t *)ID2)) >> 24;
 8005526:	4b11      	ldr	r3, [pc, #68]	; (800556c <HW_GetUniqueId+0xa0>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	0e1a      	lsrs	r2, r3, #24
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3303      	adds	r3, #3
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	701a      	strb	r2, [r3, #0]
  id[2] = ((*(uint32_t *)ID2)) >> 16;
 8005534:	4b0d      	ldr	r3, [pc, #52]	; (800556c <HW_GetUniqueId+0xa0>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	0c1a      	lsrs	r2, r3, #16
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3302      	adds	r3, #2
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]
  id[1] = ((*(uint32_t *)ID2)) >> 8;
 8005542:	4b0a      	ldr	r3, [pc, #40]	; (800556c <HW_GetUniqueId+0xa0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	0a1a      	lsrs	r2, r3, #8
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3301      	adds	r3, #1
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	701a      	strb	r2, [r3, #0]
  id[0] = ((*(uint32_t *)ID2));
 8005550:	4b06      	ldr	r3, [pc, #24]	; (800556c <HW_GetUniqueId+0xa0>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	b2da      	uxtb	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	701a      	strb	r2, [r3, #0]
}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	46bd      	mov	sp, r7
 800555e:	b002      	add	sp, #8
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	1ff80050 	.word	0x1ff80050
 8005568:	1ff80064 	.word	0x1ff80064
 800556c:	1ff80054 	.word	0x1ff80054

08005570 <HW_GetTemperatureLevel>:

uint16_t HW_GetTemperatureLevel(void)
{
 8005570:	b590      	push	{r4, r7, lr}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
  uint16_t measuredLevel = 0;
 8005576:	1cbb      	adds	r3, r7, #2
 8005578:	2200      	movs	r2, #0
 800557a:	801a      	strh	r2, [r3, #0]
  uint32_t batteryLevelmV;
  uint16_t temperatureDegreeC;

  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 800557c:	1cbc      	adds	r4, r7, #2
 800557e:	4b25      	ldr	r3, [pc, #148]	; (8005614 <HW_GetTemperatureLevel+0xa4>)
 8005580:	0018      	movs	r0, r3
 8005582:	f000 f8e5 	bl	8005750 <HW_AdcReadChannel>
 8005586:	0003      	movs	r3, r0
 8005588:	8023      	strh	r3, [r4, #0]

  if (measuredLevel == 0)
 800558a:	1cbb      	adds	r3, r7, #2
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d102      	bne.n	8005598 <HW_GetTemperatureLevel+0x28>
  {
    batteryLevelmV = 0;
 8005592:	2300      	movs	r3, #0
 8005594:	607b      	str	r3, [r7, #4]
 8005596:	e00c      	b.n	80055b2 <HW_GetTemperatureLevel+0x42>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 8005598:	4b1f      	ldr	r3, [pc, #124]	; (8005618 <HW_GetTemperatureLevel+0xa8>)
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	001a      	movs	r2, r3
 800559e:	4b1f      	ldr	r3, [pc, #124]	; (800561c <HW_GetTemperatureLevel+0xac>)
 80055a0:	435a      	muls	r2, r3
 80055a2:	1cbb      	adds	r3, r7, #2
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	0019      	movs	r1, r3
 80055a8:	0010      	movs	r0, r2
 80055aa:	f7fa fdad 	bl	8000108 <__udivsi3>
 80055ae:	0003      	movs	r3, r0
 80055b0:	607b      	str	r3, [r7, #4]
  }
#if 0
  PRINTF("VDDA= %d\n\r", batteryLevelmV);
#endif

  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_TEMPSENSOR);
 80055b2:	1cbc      	adds	r4, r7, #2
 80055b4:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <HW_GetTemperatureLevel+0xb0>)
 80055b6:	0018      	movs	r0, r3
 80055b8:	f000 f8ca 	bl	8005750 <HW_AdcReadChannel>
 80055bc:	0003      	movs	r3, r0
 80055be:	8023      	strh	r3, [r4, #0]

  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 80055c0:	1cbb      	adds	r3, r7, #2
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	4353      	muls	r3, r2
 80055c8:	4914      	ldr	r1, [pc, #80]	; (800561c <HW_GetTemperatureLevel+0xac>)
 80055ca:	0018      	movs	r0, r3
 80055cc:	f7fa fd9c 	bl	8000108 <__udivsi3>
 80055d0:	0003      	movs	r3, r0
 80055d2:	001a      	movs	r2, r3
 80055d4:	4b13      	ldr	r3, [pc, #76]	; (8005624 <HW_GetTemperatureLevel+0xb4>)
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	1ad2      	subs	r2, r2, r3
 80055da:	0013      	movs	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	189b      	adds	r3, r3, r2
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	021a      	lsls	r2, r3, #8
 80055e4:	4b10      	ldr	r3, [pc, #64]	; (8005628 <HW_GetTemperatureLevel+0xb8>)
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	0019      	movs	r1, r3
 80055ea:	4b0e      	ldr	r3, [pc, #56]	; (8005624 <HW_GetTemperatureLevel+0xb4>)
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	1acb      	subs	r3, r1, r3
 80055f0:	0019      	movs	r1, r3
 80055f2:	0010      	movs	r0, r2
 80055f4:	f7fa fe12 	bl	800021c <__divsi3>
 80055f8:	0003      	movs	r3, r0
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	003b      	movs	r3, r7
 80055fe:	21f0      	movs	r1, #240	; 0xf0
 8005600:	0149      	lsls	r1, r1, #5
 8005602:	468c      	mov	ip, r1
 8005604:	4462      	add	r2, ip
 8005606:	801a      	strh	r2, [r3, #0]
    uint16_t temperatureDegreeC_Frac = ((temperatureDegreeC - (temperatureDegreeC_Int << 8)) * 100) >> 8;
    PRINTF("temp= %d, %d,%d\n\r", temperatureDegreeC, temperatureDegreeC_Int, temperatureDegreeC_Frac);
  }
#endif

  return (uint16_t) temperatureDegreeC;
 8005608:	003b      	movs	r3, r7
 800560a:	881b      	ldrh	r3, [r3, #0]
}
 800560c:	0018      	movs	r0, r3
 800560e:	46bd      	mov	sp, r7
 8005610:	b003      	add	sp, #12
 8005612:	bd90      	pop	{r4, r7, pc}
 8005614:	44020000 	.word	0x44020000
 8005618:	1ff80078 	.word	0x1ff80078
 800561c:	00000bb8 	.word	0x00000bb8
 8005620:	48040000 	.word	0x48040000
 8005624:	1ff8007a 	.word	0x1ff8007a
 8005628:	1ff8007e 	.word	0x1ff8007e

0800562c <HW_GetBatteryLevel>:
  * @brief This function return the battery level
  * @param none
  * @retval the battery level in mV
  */
uint16_t HW_GetBatteryLevel(void)
{
 800562c:	b590      	push	{r4, r7, lr}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
  uint16_t measuredLevel = 0;
 8005632:	1cbb      	adds	r3, r7, #2
 8005634:	2200      	movs	r2, #0
 8005636:	801a      	strh	r2, [r3, #0]
  uint32_t batteryLevelmV;

  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 8005638:	1cbc      	adds	r4, r7, #2
 800563a:	4b10      	ldr	r3, [pc, #64]	; (800567c <HW_GetBatteryLevel+0x50>)
 800563c:	0018      	movs	r0, r3
 800563e:	f000 f887 	bl	8005750 <HW_AdcReadChannel>
 8005642:	0003      	movs	r3, r0
 8005644:	8023      	strh	r3, [r4, #0]

  if (measuredLevel == 0)
 8005646:	1cbb      	adds	r3, r7, #2
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d102      	bne.n	8005654 <HW_GetBatteryLevel+0x28>
  {
    batteryLevelmV = 0;
 800564e:	2300      	movs	r3, #0
 8005650:	607b      	str	r3, [r7, #4]
 8005652:	e00c      	b.n	800566e <HW_GetBatteryLevel+0x42>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 8005654:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <HW_GetBatteryLevel+0x54>)
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	001a      	movs	r2, r3
 800565a:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <HW_GetBatteryLevel+0x58>)
 800565c:	435a      	muls	r2, r3
 800565e:	1cbb      	adds	r3, r7, #2
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	0019      	movs	r1, r3
 8005664:	0010      	movs	r0, r2
 8005666:	f7fa fd4f 	bl	8000108 <__udivsi3>
 800566a:	0003      	movs	r3, r0
 800566c:	607b      	str	r3, [r7, #4]
  }

  return batteryLevelmV;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	b29b      	uxth	r3, r3
}
 8005672:	0018      	movs	r0, r3
 8005674:	46bd      	mov	sp, r7
 8005676:	b003      	add	sp, #12
 8005678:	bd90      	pop	{r4, r7, pc}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	44020000 	.word	0x44020000
 8005680:	1ff80078 	.word	0x1ff80078
 8005684:	00000bb8 	.word	0x00000bb8

08005688 <HW_AdcInit>:
  * @brief This function initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcInit(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  if (AdcInitialized == false)
 800568c:	4b24      	ldr	r3, [pc, #144]	; (8005720 <HW_AdcInit+0x98>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2201      	movs	r2, #1
 8005692:	4053      	eors	r3, r2
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d03e      	beq.n	8005718 <HW_AdcInit+0x90>
  {
    AdcInitialized = true;
 800569a:	4b21      	ldr	r3, [pc, #132]	; (8005720 <HW_AdcInit+0x98>)
 800569c:	2201      	movs	r2, #1
 800569e:	701a      	strb	r2, [r3, #0]


    hadc.Instance  = ADC1;
 80056a0:	4b20      	ldr	r3, [pc, #128]	; (8005724 <HW_AdcInit+0x9c>)
 80056a2:	4a21      	ldr	r2, [pc, #132]	; (8005728 <HW_AdcInit+0xa0>)
 80056a4:	601a      	str	r2, [r3, #0]

    hadc.Init.OversamplingMode      = DISABLE;
 80056a6:	4b1f      	ldr	r3, [pc, #124]	; (8005724 <HW_AdcInit+0x9c>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	63da      	str	r2, [r3, #60]	; 0x3c

    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 80056ac:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <HW_AdcInit+0x9c>)
 80056ae:	2280      	movs	r2, #128	; 0x80
 80056b0:	0612      	lsls	r2, r2, #24
 80056b2:	605a      	str	r2, [r3, #4]
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 80056b4:	4b1b      	ldr	r3, [pc, #108]	; (8005724 <HW_AdcInit+0x9c>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	61da      	str	r2, [r3, #28]
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 80056ba:	4b1a      	ldr	r3, [pc, #104]	; (8005724 <HW_AdcInit+0x9c>)
 80056bc:	2201      	movs	r2, #1
 80056be:	635a      	str	r2, [r3, #52]	; 0x34
    hadc.Init.LowPowerAutoWait      = DISABLE;
 80056c0:	4b18      	ldr	r3, [pc, #96]	; (8005724 <HW_AdcInit+0x9c>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	619a      	str	r2, [r3, #24]

    hadc.Init.Resolution            = ADC_RESOLUTION_10B;
 80056c6:	4b17      	ldr	r3, [pc, #92]	; (8005724 <HW_AdcInit+0x9c>)
 80056c8:	2208      	movs	r2, #8
 80056ca:	609a      	str	r2, [r3, #8]
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 80056cc:	4b15      	ldr	r3, [pc, #84]	; (8005724 <HW_AdcInit+0x9c>)
 80056ce:	2207      	movs	r2, #7
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 80056d2:	4b14      	ldr	r3, [pc, #80]	; (8005724 <HW_AdcInit+0x9c>)
 80056d4:	2201      	movs	r2, #1
 80056d6:	611a      	str	r2, [r3, #16]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 80056d8:	4b12      	ldr	r3, [pc, #72]	; (8005724 <HW_AdcInit+0x9c>)
 80056da:	2200      	movs	r2, #0
 80056dc:	60da      	str	r2, [r3, #12]
    hadc.Init.ContinuousConvMode    = DISABLE;
 80056de:	4b11      	ldr	r3, [pc, #68]	; (8005724 <HW_AdcInit+0x9c>)
 80056e0:	2220      	movs	r2, #32
 80056e2:	2100      	movs	r1, #0
 80056e4:	5499      	strb	r1, [r3, r2]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 80056e6:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <HW_AdcInit+0x9c>)
 80056e8:	2221      	movs	r2, #33	; 0x21
 80056ea:	2100      	movs	r1, #0
 80056ec:	5499      	strb	r1, [r3, r2]
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80056ee:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <HW_AdcInit+0x9c>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	629a      	str	r2, [r3, #40]	; 0x28
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <HW_AdcInit+0x9c>)
 80056f6:	2204      	movs	r2, #4
 80056f8:	615a      	str	r2, [r3, #20]
    hadc.Init.DMAContinuousRequests = DISABLE;
 80056fa:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <HW_AdcInit+0x9c>)
 80056fc:	222c      	movs	r2, #44	; 0x2c
 80056fe:	2100      	movs	r1, #0
 8005700:	5499      	strb	r1, [r3, r2]

    ADCCLK_ENABLE();
 8005702:	4b0a      	ldr	r3, [pc, #40]	; (800572c <HW_AdcInit+0xa4>)
 8005704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005706:	4b09      	ldr	r3, [pc, #36]	; (800572c <HW_AdcInit+0xa4>)
 8005708:	2180      	movs	r1, #128	; 0x80
 800570a:	0089      	lsls	r1, r1, #2
 800570c:	430a      	orrs	r2, r1
 800570e:	635a      	str	r2, [r3, #52]	; 0x34


    HAL_ADC_Init(&hadc);
 8005710:	4b04      	ldr	r3, [pc, #16]	; (8005724 <HW_AdcInit+0x9c>)
 8005712:	0018      	movs	r0, r3
 8005714:	f003 fab6 	bl	8008c84 <HAL_ADC_Init>

  }
}
 8005718:	46c0      	nop			; (mov r8, r8)
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	20000348 	.word	0x20000348
 8005724:	200002ec 	.word	0x200002ec
 8005728:	40012400 	.word	0x40012400
 800572c:	40021000 	.word	0x40021000

08005730 <HW_AdcDeInit>:
  * @brief This function De-initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcDeInit(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  AdcInitialized = false;
 8005734:	4b04      	ldr	r3, [pc, #16]	; (8005748 <HW_AdcDeInit+0x18>)
 8005736:	2200      	movs	r2, #0
 8005738:	701a      	strb	r2, [r3, #0]
  HAL_ADC_DeInit(&hadc);
 800573a:	4b04      	ldr	r3, [pc, #16]	; (800574c <HW_AdcDeInit+0x1c>)
 800573c:	0018      	movs	r0, r3
 800573e:	f003 fc15 	bl	8008f6c <HAL_ADC_DeInit>
}
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	20000348 	.word	0x20000348
 800574c:	200002ec 	.word	0x200002ec

08005750 <HW_AdcReadChannel>:
  * @brief This function De-initializes the ADC
  * @param Channel
  * @retval Value
  */
uint16_t HW_AdcReadChannel(uint32_t Channel)
{
 8005750:	b590      	push	{r4, r7, lr}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef adcConf = {0};
 8005758:	230c      	movs	r3, #12
 800575a:	18fb      	adds	r3, r7, r3
 800575c:	0018      	movs	r0, r3
 800575e:	2308      	movs	r3, #8
 8005760:	001a      	movs	r2, r3
 8005762:	2100      	movs	r1, #0
 8005764:	f015 ff86 	bl	801b674 <memset>

  uint16_t adcData = 0;
 8005768:	2316      	movs	r3, #22
 800576a:	18fb      	adds	r3, r7, r3
 800576c:	2200      	movs	r2, #0
 800576e:	801a      	strh	r2, [r3, #0]

  HW_AdcInit();
 8005770:	f7ff ff8a 	bl	8005688 <HW_AdcInit>

  if (AdcInitialized == true)
 8005774:	4b2f      	ldr	r3, [pc, #188]	; (8005834 <HW_AdcReadChannel+0xe4>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d053      	beq.n	8005824 <HW_AdcReadChannel+0xd4>
  {
    /* wait the the Vrefint used by adc is set */
    while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 800577c:	46c0      	nop			; (mov r8, r8)
 800577e:	4b2e      	ldr	r3, [pc, #184]	; (8005838 <HW_AdcReadChannel+0xe8>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2208      	movs	r2, #8
 8005784:	4013      	ands	r3, r2
 8005786:	2b08      	cmp	r3, #8
 8005788:	d1f9      	bne.n	800577e <HW_AdcReadChannel+0x2e>

    ADCCLK_ENABLE();
 800578a:	4b2c      	ldr	r3, [pc, #176]	; (800583c <HW_AdcReadChannel+0xec>)
 800578c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800578e:	4b2b      	ldr	r3, [pc, #172]	; (800583c <HW_AdcReadChannel+0xec>)
 8005790:	2180      	movs	r1, #128	; 0x80
 8005792:	0089      	lsls	r1, r1, #2
 8005794:	430a      	orrs	r2, r1
 8005796:	635a      	str	r2, [r3, #52]	; 0x34

    /*calibrate ADC if any calibraiton hardware*/
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8005798:	4b29      	ldr	r3, [pc, #164]	; (8005840 <HW_AdcReadChannel+0xf0>)
 800579a:	2100      	movs	r1, #0
 800579c:	0018      	movs	r0, r3
 800579e:	f003 ff31 	bl	8009604 <HAL_ADCEx_Calibration_Start>

    /* Deselects all channels*/
    adcConf.Channel = ADC_CHANNEL_MASK;
 80057a2:	210c      	movs	r1, #12
 80057a4:	187b      	adds	r3, r7, r1
 80057a6:	4a27      	ldr	r2, [pc, #156]	; (8005844 <HW_AdcReadChannel+0xf4>)
 80057a8:	601a      	str	r2, [r3, #0]
    adcConf.Rank = ADC_RANK_NONE;
 80057aa:	187b      	adds	r3, r7, r1
 80057ac:	4a26      	ldr	r2, [pc, #152]	; (8005848 <HW_AdcReadChannel+0xf8>)
 80057ae:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 80057b0:	000c      	movs	r4, r1
 80057b2:	187a      	adds	r2, r7, r1
 80057b4:	4b22      	ldr	r3, [pc, #136]	; (8005840 <HW_AdcReadChannel+0xf0>)
 80057b6:	0011      	movs	r1, r2
 80057b8:	0018      	movs	r0, r3
 80057ba:	f003 fd79 	bl	80092b0 <HAL_ADC_ConfigChannel>

    /* configure adc channel */
    adcConf.Channel = Channel;
 80057be:	0021      	movs	r1, r4
 80057c0:	187b      	adds	r3, r7, r1
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	601a      	str	r2, [r3, #0]
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 80057c6:	187b      	adds	r3, r7, r1
 80057c8:	2280      	movs	r2, #128	; 0x80
 80057ca:	0152      	lsls	r2, r2, #5
 80057cc:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 80057ce:	187a      	adds	r2, r7, r1
 80057d0:	4b1b      	ldr	r3, [pc, #108]	; (8005840 <HW_AdcReadChannel+0xf0>)
 80057d2:	0011      	movs	r1, r2
 80057d4:	0018      	movs	r0, r3
 80057d6:	f003 fd6b 	bl	80092b0 <HAL_ADC_ConfigChannel>

    /* Start the conversion process */
    HAL_ADC_Start(&hadc);
 80057da:	4b19      	ldr	r3, [pc, #100]	; (8005840 <HW_AdcReadChannel+0xf0>)
 80057dc:	0018      	movs	r0, r3
 80057de:	f003 fc71 	bl	80090c4 <HAL_ADC_Start>

    /* Wait for the end of conversion */
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80057e2:	2301      	movs	r3, #1
 80057e4:	425a      	negs	r2, r3
 80057e6:	4b16      	ldr	r3, [pc, #88]	; (8005840 <HW_AdcReadChannel+0xf0>)
 80057e8:	0011      	movs	r1, r2
 80057ea:	0018      	movs	r0, r3
 80057ec:	f003 fcbe 	bl	800916c <HAL_ADC_PollForConversion>

    /* Get the converted value of regular channel */
    adcData = HAL_ADC_GetValue(&hadc);
 80057f0:	4b13      	ldr	r3, [pc, #76]	; (8005840 <HW_AdcReadChannel+0xf0>)
 80057f2:	0018      	movs	r0, r3
 80057f4:	f003 fd50 	bl	8009298 <HAL_ADC_GetValue>
 80057f8:	0002      	movs	r2, r0
 80057fa:	2316      	movs	r3, #22
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	801a      	strh	r2, [r3, #0]

    __HAL_ADC_DISABLE(&hadc) ;
 8005800:	4b0f      	ldr	r3, [pc, #60]	; (8005840 <HW_AdcReadChannel+0xf0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689a      	ldr	r2, [r3, #8]
 8005806:	4b0e      	ldr	r3, [pc, #56]	; (8005840 <HW_AdcReadChannel+0xf0>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2102      	movs	r1, #2
 800580c:	430a      	orrs	r2, r1
 800580e:	609a      	str	r2, [r3, #8]
 8005810:	4b0b      	ldr	r3, [pc, #44]	; (8005840 <HW_AdcReadChannel+0xf0>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2203      	movs	r2, #3
 8005816:	601a      	str	r2, [r3, #0]

    ADCCLK_DISABLE();
 8005818:	4b08      	ldr	r3, [pc, #32]	; (800583c <HW_AdcReadChannel+0xec>)
 800581a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800581c:	4b07      	ldr	r3, [pc, #28]	; (800583c <HW_AdcReadChannel+0xec>)
 800581e:	490b      	ldr	r1, [pc, #44]	; (800584c <HW_AdcReadChannel+0xfc>)
 8005820:	400a      	ands	r2, r1
 8005822:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return adcData;
 8005824:	2316      	movs	r3, #22
 8005826:	18fb      	adds	r3, r7, r3
 8005828:	881b      	ldrh	r3, [r3, #0]
}
 800582a:	0018      	movs	r0, r3
 800582c:	46bd      	mov	sp, r7
 800582e:	b007      	add	sp, #28
 8005830:	bd90      	pop	{r4, r7, pc}
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	20000348 	.word	0x20000348
 8005838:	40007000 	.word	0x40007000
 800583c:	40021000 	.word	0x40021000
 8005840:	200002ec 	.word	0x200002ec
 8005844:	0007ffff 	.word	0x0007ffff
 8005848:	00001001 	.word	0x00001001
 800584c:	fffffdff 	.word	0xfffffdff

08005850 <LPM_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterStopMode(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005856:	f3ef 8310 	mrs	r3, PRIMASK
 800585a:	607b      	str	r3, [r7, #4]
  return(result);
 800585c:	687b      	ldr	r3, [r7, #4]
  BACKUP_PRIMASK();
 800585e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8005860:	b672      	cpsid	i

  DISABLE_IRQ();

  HW_IoDeInit();
 8005862:	f7ff fcd7 	bl	8005214 <HW_IoDeInit>

  HW_AdcDeInit();
 8005866:	f7ff ff63 	bl	8005730 <HW_AdcDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 800586a:	4b09      	ldr	r3, [pc, #36]	; (8005890 <LPM_EnterStopMode+0x40>)
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	4b08      	ldr	r3, [pc, #32]	; (8005890 <LPM_EnterStopMode+0x40>)
 8005870:	2104      	movs	r1, #4
 8005872:	430a      	orrs	r2, r1
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f383 8810 	msr	PRIMASK, r3

  RESTORE_PRIMASK();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8005880:	2101      	movs	r1, #1
 8005882:	2001      	movs	r0, #1
 8005884:	f005 f9c4 	bl	800ac10 <HAL_PWR_EnterSTOPMode>
}
 8005888:	46c0      	nop			; (mov r8, r8)
 800588a:	46bd      	mov	sp, r7
 800588c:	b004      	add	sp, #16
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40007000 	.word	0x40007000

08005894 <LPM_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void LPM_ExitStopMode(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800589a:	f3ef 8310 	mrs	r3, PRIMASK
 800589e:	60bb      	str	r3, [r7, #8]
  return(result);
 80058a0:	68bb      	ldr	r3, [r7, #8]
  /* Disable IRQ while the MCU is not running on HSI */

  BACKUP_PRIMASK();
 80058a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80058a4:	b672      	cpsid	i

  DISABLE_IRQ();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 80058a6:	4b19      	ldr	r3, [pc, #100]	; (800590c <LPM_ExitStopMode+0x78>)
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4b18      	ldr	r3, [pc, #96]	; (800590c <LPM_ExitStopMode+0x78>)
 80058ac:	2101      	movs	r1, #1
 80058ae:	430a      	orrs	r2, r1
 80058b0:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	4b15      	ldr	r3, [pc, #84]	; (800590c <LPM_ExitStopMode+0x78>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2204      	movs	r2, #4
 80058ba:	4013      	ands	r3, r2
 80058bc:	d0fa      	beq.n	80058b4 <LPM_ExitStopMode+0x20>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 80058be:	4b13      	ldr	r3, [pc, #76]	; (800590c <LPM_ExitStopMode+0x78>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b12      	ldr	r3, [pc, #72]	; (800590c <LPM_ExitStopMode+0x78>)
 80058c4:	2180      	movs	r1, #128	; 0x80
 80058c6:	0449      	lsls	r1, r1, #17
 80058c8:	430a      	orrs	r2, r1
 80058ca:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 80058cc:	46c0      	nop			; (mov r8, r8)
 80058ce:	4b0f      	ldr	r3, [pc, #60]	; (800590c <LPM_ExitStopMode+0x78>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	2380      	movs	r3, #128	; 0x80
 80058d4:	049b      	lsls	r3, r3, #18
 80058d6:	4013      	ands	r3, r2
 80058d8:	d0f9      	beq.n	80058ce <LPM_ExitStopMode+0x3a>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80058da:	4b0c      	ldr	r3, [pc, #48]	; (800590c <LPM_ExitStopMode+0x78>)
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	4b0b      	ldr	r3, [pc, #44]	; (800590c <LPM_ExitStopMode+0x78>)
 80058e0:	2103      	movs	r1, #3
 80058e2:	430a      	orrs	r2, r1
 80058e4:	60da      	str	r2, [r3, #12]

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80058e6:	46c0      	nop			; (mov r8, r8)
 80058e8:	4b08      	ldr	r3, [pc, #32]	; (800590c <LPM_ExitStopMode+0x78>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	220c      	movs	r2, #12
 80058ee:	4013      	ands	r3, r2
 80058f0:	2b0c      	cmp	r3, #12
 80058f2:	d1f9      	bne.n	80058e8 <LPM_ExitStopMode+0x54>

  /*initilizes the peripherals*/
  HW_IoInit();
 80058f4:	f7ff fc80 	bl	80051f8 <HW_IoInit>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f383 8810 	msr	PRIMASK, r3

  RESTORE_PRIMASK();
}
 8005902:	46c0      	nop			; (mov r8, r8)
 8005904:	46bd      	mov	sp, r7
 8005906:	b004      	add	sp, #16
 8005908:	bd80      	pop	{r7, pc}
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	40021000 	.word	0x40021000

08005910 <LPM_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void LPM_EnterSleepMode(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8005914:	2101      	movs	r1, #1
 8005916:	2000      	movs	r0, #0
 8005918:	f005 f94a 	bl	800abb0 <HAL_PWR_EnterSLEEPMode>
}
 800591c:	46c0      	nop			; (mov r8, r8)
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <NMI_Handler>:
  * @param  None
  * @retval None
  */

void NMI_Handler(void)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	af00      	add	r7, sp, #0
}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HardFault_Handler>:
  * @retval None
  */


void HardFault_Handler(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	af00      	add	r7, sp, #0
  __ASM volatile ("nop");
 8005930:	46c0      	nop			; (mov r8, r8)
  while (1)
  {
    __NOP();
 8005932:	e7fd      	b.n	8005930 <HardFault_Handler+0x4>

08005934 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
}
 8005938:	46c0      	nop			; (mov r8, r8)
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	af00      	add	r7, sp, #0
}
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800594c:	f003 f95a 	bl	8008c04 <HAL_IncTick>
}
 8005950:	46c0      	nop			; (mov r8, r8)
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <USART2_IRQHandler>:
  */
/*void PPP_IRQHandler(void)
{
}*/
void USARTx_IRQHandler(void)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	af00      	add	r7, sp, #0
  vcom_IRQHandler();
 800595a:	f000 f929 	bl	8005bb0 <vcom_IRQHandler>
}
 800595e:	46c0      	nop			; (mov r8, r8)
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <DMA1_Channel4_5_6_7_IRQHandler>:

void USARTx_DMA_TX_IRQHandler(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  vcom_DMA_TX_IRQHandler();
 8005968:	f000 f916 	bl	8005b98 <vcom_DMA_TX_IRQHandler>
}
 800596c:	46c0      	nop			; (mov r8, r8)
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	af00      	add	r7, sp, #0
  HW_RTC_IrqHandler();
 8005976:	f7fe fbdf 	bl	8004138 <HW_RTC_IrqHandler>
}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005984:	2001      	movs	r0, #1
 8005986:	f004 fb1b 	bl	8009fc0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800598a:	2002      	movs	r0, #2
 800598c:	f004 fb18 	bl	8009fc0 <HAL_GPIO_EXTI_IRQHandler>
}
 8005990:	46c0      	nop			; (mov r8, r8)
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800599a:	2004      	movs	r0, #4
 800599c:	f004 fb10 	bl	8009fc0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80059a0:	2008      	movs	r0, #8
 80059a2:	f004 fb0d 	bl	8009fc0 <HAL_GPIO_EXTI_IRQHandler>
}
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80059b0:	2010      	movs	r0, #16
 80059b2:	f004 fb05 	bl	8009fc0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80059b6:	2020      	movs	r0, #32
 80059b8:	f004 fb02 	bl	8009fc0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80059bc:	2040      	movs	r0, #64	; 0x40
 80059be:	f004 faff 	bl	8009fc0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80059c2:	2080      	movs	r0, #128	; 0x80
 80059c4:	f004 fafc 	bl	8009fc0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80059c8:	2380      	movs	r3, #128	; 0x80
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	0018      	movs	r0, r3
 80059ce:	f004 faf7 	bl	8009fc0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80059d2:	2380      	movs	r3, #128	; 0x80
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	0018      	movs	r0, r3
 80059d8:	f004 faf2 	bl	8009fc0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80059dc:	2380      	movs	r3, #128	; 0x80
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	0018      	movs	r0, r3
 80059e2:	f004 faed 	bl	8009fc0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80059e6:	2380      	movs	r3, #128	; 0x80
 80059e8:	011b      	lsls	r3, r3, #4
 80059ea:	0018      	movs	r0, r3
 80059ec:	f004 fae8 	bl	8009fc0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80059f0:	2380      	movs	r3, #128	; 0x80
 80059f2:	015b      	lsls	r3, r3, #5
 80059f4:	0018      	movs	r0, r3
 80059f6:	f004 fae3 	bl	8009fc0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80059fa:	2380      	movs	r3, #128	; 0x80
 80059fc:	019b      	lsls	r3, r3, #6
 80059fe:	0018      	movs	r0, r3
 8005a00:	f004 fade 	bl	8009fc0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005a04:	2380      	movs	r3, #128	; 0x80
 8005a06:	01db      	lsls	r3, r3, #7
 8005a08:	0018      	movs	r0, r3
 8005a0a:	f004 fad9 	bl	8009fc0 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005a0e:	2380      	movs	r3, #128	; 0x80
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	0018      	movs	r0, r3
 8005a14:	f004 fad4 	bl	8009fc0 <HAL_GPIO_EXTI_IRQHandler>
}
 8005a18:	46c0      	nop			; (mov r8, r8)
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005a28:	4b11      	ldr	r3, [pc, #68]	; (8005a70 <_sbrk+0x50>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d102      	bne.n	8005a36 <_sbrk+0x16>
		heap_end = &end;
 8005a30:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <_sbrk+0x50>)
 8005a32:	4a10      	ldr	r2, [pc, #64]	; (8005a74 <_sbrk+0x54>)
 8005a34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005a36:	4b0e      	ldr	r3, [pc, #56]	; (8005a70 <_sbrk+0x50>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005a3c:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <_sbrk+0x50>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	18d3      	adds	r3, r2, r3
 8005a44:	466a      	mov	r2, sp
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d907      	bls.n	8005a5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005a4a:	f015 fde9 	bl	801b620 <__errno>
 8005a4e:	0003      	movs	r3, r0
 8005a50:	220c      	movs	r2, #12
 8005a52:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005a54:	2301      	movs	r3, #1
 8005a56:	425b      	negs	r3, r3
 8005a58:	e006      	b.n	8005a68 <_sbrk+0x48>
	}

	heap_end += incr;
 8005a5a:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <_sbrk+0x50>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	18d2      	adds	r2, r2, r3
 8005a62:	4b03      	ldr	r3, [pc, #12]	; (8005a70 <_sbrk+0x50>)
 8005a64:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8005a66:	68fb      	ldr	r3, [r7, #12]
}
 8005a68:	0018      	movs	r0, r3
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	b004      	add	sp, #16
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	2000034c 	.word	0x2000034c
 8005a74:	20001690 	.word	0x20001690

08005a78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8005a7c:	4b17      	ldr	r3, [pc, #92]	; (8005adc <SystemInit+0x64>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	4b16      	ldr	r3, [pc, #88]	; (8005adc <SystemInit+0x64>)
 8005a82:	2180      	movs	r1, #128	; 0x80
 8005a84:	0049      	lsls	r1, r1, #1
 8005a86:	430a      	orrs	r2, r1
 8005a88:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8005a8a:	4b14      	ldr	r3, [pc, #80]	; (8005adc <SystemInit+0x64>)
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	4b13      	ldr	r3, [pc, #76]	; (8005adc <SystemInit+0x64>)
 8005a90:	4913      	ldr	r1, [pc, #76]	; (8005ae0 <SystemInit+0x68>)
 8005a92:	400a      	ands	r2, r1
 8005a94:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8005a96:	4b11      	ldr	r3, [pc, #68]	; (8005adc <SystemInit+0x64>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	4b10      	ldr	r3, [pc, #64]	; (8005adc <SystemInit+0x64>)
 8005a9c:	4911      	ldr	r1, [pc, #68]	; (8005ae4 <SystemInit+0x6c>)
 8005a9e:	400a      	ands	r2, r1
 8005aa0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8005aa2:	4b0e      	ldr	r3, [pc, #56]	; (8005adc <SystemInit+0x64>)
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <SystemInit+0x64>)
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	438a      	bics	r2, r1
 8005aac:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8005aae:	4b0b      	ldr	r3, [pc, #44]	; (8005adc <SystemInit+0x64>)
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <SystemInit+0x64>)
 8005ab4:	490c      	ldr	r1, [pc, #48]	; (8005ae8 <SystemInit+0x70>)
 8005ab6:	400a      	ands	r2, r1
 8005ab8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8005aba:	4b08      	ldr	r3, [pc, #32]	; (8005adc <SystemInit+0x64>)
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	4b07      	ldr	r3, [pc, #28]	; (8005adc <SystemInit+0x64>)
 8005ac0:	490a      	ldr	r1, [pc, #40]	; (8005aec <SystemInit+0x74>)
 8005ac2:	400a      	ands	r2, r1
 8005ac4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005ac6:	4b05      	ldr	r3, [pc, #20]	; (8005adc <SystemInit+0x64>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005acc:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <SystemInit+0x78>)
 8005ace:	2280      	movs	r2, #128	; 0x80
 8005ad0:	0512      	lsls	r2, r2, #20
 8005ad2:	609a      	str	r2, [r3, #8]
#endif
}
 8005ad4:	46c0      	nop			; (mov r8, r8)
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	88ff400c 	.word	0x88ff400c
 8005ae4:	fef6fff6 	.word	0xfef6fff6
 8005ae8:	fffbffff 	.word	0xfffbffff
 8005aec:	ff02ffff 	.word	0xff02ffff
 8005af0:	e000ed00 	.word	0xe000ed00

08005af4 <vcom_Init>:

static void (*TxCpltCallback)(void);
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(void (*TxCb)(void))
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]

  /*Record Tx complete for DMA*/
  TxCpltCallback = TxCb;
 8005afc:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <vcom_Init+0x54>)
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	601a      	str	r2, [r3, #0]
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 8005b02:	4b12      	ldr	r3, [pc, #72]	; (8005b4c <vcom_Init+0x58>)
 8005b04:	4a12      	ldr	r2, [pc, #72]	; (8005b50 <vcom_Init+0x5c>)
 8005b06:	601a      	str	r2, [r3, #0]

  UartHandle.Init.BaudRate   = 115200;
 8005b08:	4b10      	ldr	r3, [pc, #64]	; (8005b4c <vcom_Init+0x58>)
 8005b0a:	22e1      	movs	r2, #225	; 0xe1
 8005b0c:	0252      	lsls	r2, r2, #9
 8005b0e:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8005b10:	4b0e      	ldr	r3, [pc, #56]	; (8005b4c <vcom_Init+0x58>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8005b16:	4b0d      	ldr	r3, [pc, #52]	; (8005b4c <vcom_Init+0x58>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8005b1c:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <vcom_Init+0x58>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8005b22:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <vcom_Init+0x58>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX;
 8005b28:	4b08      	ldr	r3, [pc, #32]	; (8005b4c <vcom_Init+0x58>)
 8005b2a:	2208      	movs	r2, #8
 8005b2c:	615a      	str	r2, [r3, #20]

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8005b2e:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <vcom_Init+0x58>)
 8005b30:	0018      	movs	r0, r3
 8005b32:	f007 f841 	bl	800cbb8 <HAL_UART_Init>
 8005b36:	1e03      	subs	r3, r0, #0
 8005b38:	d001      	beq.n	8005b3e <vcom_Init+0x4a>
  {
    /* Initialization Error */
    Error_Handler();
 8005b3a:	f7fe f88f 	bl	8003c5c <Error_Handler>
  }
}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	46bd      	mov	sp, r7
 8005b42:	b002      	add	sp, #8
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	46c0      	nop			; (mov r8, r8)
 8005b48:	200003d0 	.word	0x200003d0
 8005b4c:	20000350 	.word	0x20000350
 8005b50:	40004400 	.word	0x40004400

08005b54 <vcom_Trace>:

void vcom_Trace(uint8_t *p_data, uint16_t size)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	000a      	movs	r2, r1
 8005b5e:	1cbb      	adds	r3, r7, #2
 8005b60:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8005b62:	1cbb      	adds	r3, r7, #2
 8005b64:	881a      	ldrh	r2, [r3, #0]
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	4b03      	ldr	r3, [pc, #12]	; (8005b78 <vcom_Trace+0x24>)
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	f007 f878 	bl	800cc60 <HAL_UART_Transmit_DMA>
}
 8005b70:	46c0      	nop			; (mov r8, r8)
 8005b72:	46bd      	mov	sp, r7
 8005b74:	b002      	add	sp, #8
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20000350 	.word	0x20000350

08005b7c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* buffer transmission complete*/
  TxCpltCallback();
 8005b84:	4b03      	ldr	r3, [pc, #12]	; (8005b94 <HAL_UART_TxCpltCallback+0x18>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4798      	blx	r3
}
 8005b8a:	46c0      	nop			; (mov r8, r8)
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	b002      	add	sp, #8
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	200003d0 	.word	0x200003d0

08005b98 <vcom_DMA_TX_IRQHandler>:

void vcom_DMA_TX_IRQHandler(void)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 8005b9c:	4b03      	ldr	r3, [pc, #12]	; (8005bac <vcom_DMA_TX_IRQHandler+0x14>)
 8005b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f003 ff95 	bl	8009ad0 <HAL_DMA_IRQHandler>
}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	20000350 	.word	0x20000350

08005bb0 <vcom_IRQHandler>:

void vcom_IRQHandler(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UartHandle);
 8005bb4:	4b03      	ldr	r3, [pc, #12]	; (8005bc4 <vcom_IRQHandler+0x14>)
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f007 f8e2 	bl	800cd80 <HAL_UART_IRQHandler>
}
 8005bbc:	46c0      	nop			; (mov r8, r8)
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	20000350 	.word	0x20000350

08005bc8 <HAL_UART_MspInit>:
{
  HAL_UART_DeInit(&UartHandle);
}

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08c      	sub	sp, #48	; 0x30
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd0:	231c      	movs	r3, #28
 8005bd2:	18fb      	adds	r3, r7, r3
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	2314      	movs	r3, #20
 8005bd8:	001a      	movs	r2, r3
 8005bda:	2100      	movs	r1, #0
 8005bdc:	f015 fd4a 	bl	801b674 <memset>
  if (huart->Instance == USARTx)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a60      	ldr	r2, [pc, #384]	; (8005d68 <HAL_UART_MspInit+0x1a0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d161      	bne.n	8005cae <HAL_UART_MspInit+0xe6>
    static DMA_HandleTypeDef hdma_tx;


    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8005bea:	4b60      	ldr	r3, [pc, #384]	; (8005d6c <HAL_UART_MspInit+0x1a4>)
 8005bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bee:	4b5f      	ldr	r3, [pc, #380]	; (8005d6c <HAL_UART_MspInit+0x1a4>)
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8005bf6:	4b5d      	ldr	r3, [pc, #372]	; (8005d6c <HAL_UART_MspInit+0x1a4>)
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
 8005c00:	69bb      	ldr	r3, [r7, #24]
    USARTx_RX_GPIO_CLK_ENABLE();
 8005c02:	4b5a      	ldr	r3, [pc, #360]	; (8005d6c <HAL_UART_MspInit+0x1a4>)
 8005c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c06:	4b59      	ldr	r3, [pc, #356]	; (8005d6c <HAL_UART_MspInit+0x1a4>)
 8005c08:	2101      	movs	r1, #1
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c0e:	4b57      	ldr	r3, [pc, #348]	; (8005d6c <HAL_UART_MspInit+0x1a4>)
 8005c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c12:	2201      	movs	r2, #1
 8005c14:	4013      	ands	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	697b      	ldr	r3, [r7, #20]

    /* Enable USARTx clock */
    USARTx_CLK_ENABLE();
 8005c1a:	4b54      	ldr	r3, [pc, #336]	; (8005d6c <HAL_UART_MspInit+0x1a4>)
 8005c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c1e:	4b53      	ldr	r3, [pc, #332]	; (8005d6c <HAL_UART_MspInit+0x1a4>)
 8005c20:	2180      	movs	r1, #128	; 0x80
 8005c22:	0289      	lsls	r1, r1, #10
 8005c24:	430a      	orrs	r2, r1
 8005c26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 8005c28:	4b50      	ldr	r3, [pc, #320]	; (8005d6c <HAL_UART_MspInit+0x1a4>)
 8005c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c2c:	4b4f      	ldr	r3, [pc, #316]	; (8005d6c <HAL_UART_MspInit+0x1a4>)
 8005c2e:	2101      	movs	r1, #1
 8005c30:	430a      	orrs	r2, r1
 8005c32:	631a      	str	r2, [r3, #48]	; 0x30
 8005c34:	4b4d      	ldr	r3, [pc, #308]	; (8005d6c <HAL_UART_MspInit+0x1a4>)
 8005c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c38:	2201      	movs	r2, #1
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	693b      	ldr	r3, [r7, #16]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* UART  pin configuration  */
    vcom_IoInit();
 8005c40:	f000 f8a0 	bl	8005d84 <vcom_IoInit>

    /*##-3- Configure the DMA ##################################################*/
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8005c44:	4b4a      	ldr	r3, [pc, #296]	; (8005d70 <HAL_UART_MspInit+0x1a8>)
 8005c46:	4a4b      	ldr	r2, [pc, #300]	; (8005d74 <HAL_UART_MspInit+0x1ac>)
 8005c48:	601a      	str	r2, [r3, #0]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005c4a:	4b49      	ldr	r3, [pc, #292]	; (8005d70 <HAL_UART_MspInit+0x1a8>)
 8005c4c:	2210      	movs	r2, #16
 8005c4e:	609a      	str	r2, [r3, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005c50:	4b47      	ldr	r3, [pc, #284]	; (8005d70 <HAL_UART_MspInit+0x1a8>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	60da      	str	r2, [r3, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8005c56:	4b46      	ldr	r3, [pc, #280]	; (8005d70 <HAL_UART_MspInit+0x1a8>)
 8005c58:	2280      	movs	r2, #128	; 0x80
 8005c5a:	611a      	str	r2, [r3, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005c5c:	4b44      	ldr	r3, [pc, #272]	; (8005d70 <HAL_UART_MspInit+0x1a8>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	615a      	str	r2, [r3, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8005c62:	4b43      	ldr	r3, [pc, #268]	; (8005d70 <HAL_UART_MspInit+0x1a8>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	619a      	str	r2, [r3, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8005c68:	4b41      	ldr	r3, [pc, #260]	; (8005d70 <HAL_UART_MspInit+0x1a8>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	61da      	str	r2, [r3, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8005c6e:	4b40      	ldr	r3, [pc, #256]	; (8005d70 <HAL_UART_MspInit+0x1a8>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	621a      	str	r2, [r3, #32]
#ifndef STM32L152xE
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8005c74:	4b3e      	ldr	r3, [pc, #248]	; (8005d70 <HAL_UART_MspInit+0x1a8>)
 8005c76:	2204      	movs	r2, #4
 8005c78:	605a      	str	r2, [r3, #4]
#endif
    HAL_DMA_Init(&hdma_tx);
 8005c7a:	4b3d      	ldr	r3, [pc, #244]	; (8005d70 <HAL_UART_MspInit+0x1a8>)
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f003 fe01 	bl	8009884 <HAL_DMA_Init>

    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a3a      	ldr	r2, [pc, #232]	; (8005d70 <HAL_UART_MspInit+0x1a8>)
 8005c86:	669a      	str	r2, [r3, #104]	; 0x68
 8005c88:	4b39      	ldr	r3, [pc, #228]	; (8005d70 <HAL_UART_MspInit+0x1a8>)
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	629a      	str	r2, [r3, #40]	; 0x28

    /*##-4- Configure the NVIC for DMA #########################################*/
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8005c8e:	2201      	movs	r2, #1
 8005c90:	2100      	movs	r1, #0
 8005c92:	200b      	movs	r0, #11
 8005c94:	f003 fdd0 	bl	8009838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8005c98:	200b      	movs	r0, #11
 8005c9a:	f003 fde2 	bl	8009862 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	201c      	movs	r0, #28
 8005ca4:	f003 fdc8 	bl	8009838 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8005ca8:	201c      	movs	r0, #28
 8005caa:	f003 fdda 	bl	8009862 <HAL_NVIC_EnableIRQ>
  }
  if(huart->Instance==USART1)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a31      	ldr	r2, [pc, #196]	; (8005d78 <HAL_UART_MspInit+0x1b0>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d153      	bne.n	8005d60 <HAL_UART_MspInit+0x198>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
	/* USART1 clock enable */
	__HAL_RCC_USART1_CLK_ENABLE();
 8005cb8:	4b2c      	ldr	r3, [pc, #176]	; (8005d6c <HAL_UART_MspInit+0x1a4>)
 8005cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cbc:	4b2b      	ldr	r3, [pc, #172]	; (8005d6c <HAL_UART_MspInit+0x1a4>)
 8005cbe:	2180      	movs	r1, #128	; 0x80
 8005cc0:	01c9      	lsls	r1, r1, #7
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005cc6:	4b29      	ldr	r3, [pc, #164]	; (8005d6c <HAL_UART_MspInit+0x1a4>)
 8005cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cca:	4b28      	ldr	r3, [pc, #160]	; (8005d6c <HAL_UART_MspInit+0x1a4>)
 8005ccc:	2101      	movs	r1, #1
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cd2:	4b26      	ldr	r3, [pc, #152]	; (8005d6c <HAL_UART_MspInit+0x1a4>)
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	4013      	ands	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
	/**USART1 GPIO Configuration
	PA10     ------> USART1_RX
	PA9     ------> USART1_TX
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8005cde:	211c      	movs	r1, #28
 8005ce0:	187b      	adds	r3, r7, r1
 8005ce2:	22c0      	movs	r2, #192	; 0xc0
 8005ce4:	00d2      	lsls	r2, r2, #3
 8005ce6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce8:	187b      	adds	r3, r7, r1
 8005cea:	2202      	movs	r2, #2
 8005cec:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cee:	187b      	adds	r3, r7, r1
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cf4:	187b      	adds	r3, r7, r1
 8005cf6:	2203      	movs	r2, #3
 8005cf8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8005cfa:	187b      	adds	r3, r7, r1
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d00:	187a      	adds	r2, r7, r1
 8005d02:	23a0      	movs	r3, #160	; 0xa0
 8005d04:	05db      	lsls	r3, r3, #23
 8005d06:	0011      	movs	r1, r2
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f003 ffbd 	bl	8009c88 <HAL_GPIO_Init>

	/* USART1 DMA Init */
	/* USART1_RX Init */
	hdma_usart1_rx.Instance = DMA1_Channel3;
 8005d0e:	4b1b      	ldr	r3, [pc, #108]	; (8005d7c <HAL_UART_MspInit+0x1b4>)
 8005d10:	4a1b      	ldr	r2, [pc, #108]	; (8005d80 <HAL_UART_MspInit+0x1b8>)
 8005d12:	601a      	str	r2, [r3, #0]
	hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8005d14:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <HAL_UART_MspInit+0x1b4>)
 8005d16:	2203      	movs	r2, #3
 8005d18:	605a      	str	r2, [r3, #4]
	hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d1a:	4b18      	ldr	r3, [pc, #96]	; (8005d7c <HAL_UART_MspInit+0x1b4>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	609a      	str	r2, [r3, #8]
	hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d20:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <HAL_UART_MspInit+0x1b4>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	60da      	str	r2, [r3, #12]
	hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d26:	4b15      	ldr	r3, [pc, #84]	; (8005d7c <HAL_UART_MspInit+0x1b4>)
 8005d28:	2280      	movs	r2, #128	; 0x80
 8005d2a:	611a      	str	r2, [r3, #16]
	hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d2c:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <HAL_UART_MspInit+0x1b4>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	615a      	str	r2, [r3, #20]
	hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d32:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <HAL_UART_MspInit+0x1b4>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	619a      	str	r2, [r3, #24]
	hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005d38:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <HAL_UART_MspInit+0x1b4>)
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	61da      	str	r2, [r3, #28]
	hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005d3e:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <HAL_UART_MspInit+0x1b4>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	621a      	str	r2, [r3, #32]
	if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005d44:	4b0d      	ldr	r3, [pc, #52]	; (8005d7c <HAL_UART_MspInit+0x1b4>)
 8005d46:	0018      	movs	r0, r3
 8005d48:	f003 fd9c 	bl	8009884 <HAL_DMA_Init>
 8005d4c:	1e03      	subs	r3, r0, #0
 8005d4e:	d001      	beq.n	8005d54 <HAL_UART_MspInit+0x18c>
	{
	  Error_Handler();
 8005d50:	f7fd ff84 	bl	8003c5c <Error_Handler>
	}

	__HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a09      	ldr	r2, [pc, #36]	; (8005d7c <HAL_UART_MspInit+0x1b4>)
 8005d58:	66da      	str	r2, [r3, #108]	; 0x6c
 8005d5a:	4b08      	ldr	r3, [pc, #32]	; (8005d7c <HAL_UART_MspInit+0x1b4>)
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005d60:	46c0      	nop			; (mov r8, r8)
 8005d62:	46bd      	mov	sp, r7
 8005d64:	b00c      	add	sp, #48	; 0x30
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40004400 	.word	0x40004400
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	200003d4 	.word	0x200003d4
 8005d74:	40020080 	.word	0x40020080
 8005d78:	40013800 	.word	0x40013800
 8005d7c:	200014a8 	.word	0x200014a8
 8005d80:	40020030 	.word	0x40020030

08005d84 <vcom_IoInit>:
  /*##-4- Disable the NVIC for DMA ###########################################*/
  HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
}

void vcom_IoInit(void)
{
 8005d84:	b590      	push	{r4, r7, lr}
 8005d86:	b089      	sub	sp, #36	; 0x24
 8005d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8005d8a:	240c      	movs	r4, #12
 8005d8c:	193b      	adds	r3, r7, r4
 8005d8e:	0018      	movs	r0, r3
 8005d90:	2314      	movs	r3, #20
 8005d92:	001a      	movs	r2, r3
 8005d94:	2100      	movs	r1, #0
 8005d96:	f015 fc6d 	bl	801b674 <memset>
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8005d9a:	4b1f      	ldr	r3, [pc, #124]	; (8005e18 <vcom_IoInit+0x94>)
 8005d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9e:	4b1e      	ldr	r3, [pc, #120]	; (8005e18 <vcom_IoInit+0x94>)
 8005da0:	2101      	movs	r1, #1
 8005da2:	430a      	orrs	r2, r1
 8005da4:	62da      	str	r2, [r3, #44]	; 0x2c
 8005da6:	4b1c      	ldr	r3, [pc, #112]	; (8005e18 <vcom_IoInit+0x94>)
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	2201      	movs	r2, #1
 8005dac:	4013      	ands	r3, r2
 8005dae:	60bb      	str	r3, [r7, #8]
 8005db0:	68bb      	ldr	r3, [r7, #8]
  USARTx_RX_GPIO_CLK_ENABLE();
 8005db2:	4b19      	ldr	r3, [pc, #100]	; (8005e18 <vcom_IoInit+0x94>)
 8005db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db6:	4b18      	ldr	r3, [pc, #96]	; (8005e18 <vcom_IoInit+0x94>)
 8005db8:	2101      	movs	r1, #1
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8005dbe:	4b16      	ldr	r3, [pc, #88]	; (8005e18 <vcom_IoInit+0x94>)
 8005dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	607b      	str	r3, [r7, #4]
 8005dc8:	687b      	ldr	r3, [r7, #4]
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8005dca:	193b      	adds	r3, r7, r4
 8005dcc:	2204      	movs	r2, #4
 8005dce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005dd0:	193b      	adds	r3, r7, r4
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8005dd6:	193b      	adds	r3, r7, r4
 8005dd8:	2200      	movs	r2, #0
 8005dda:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8005ddc:	193b      	adds	r3, r7, r4
 8005dde:	2203      	movs	r2, #3
 8005de0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8005de2:	193b      	adds	r3, r7, r4
 8005de4:	2204      	movs	r2, #4
 8005de6:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8005de8:	193a      	adds	r2, r7, r4
 8005dea:	23a0      	movs	r3, #160	; 0xa0
 8005dec:	05db      	lsls	r3, r3, #23
 8005dee:	0011      	movs	r1, r2
 8005df0:	0018      	movs	r0, r3
 8005df2:	f003 ff49 	bl	8009c88 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8005df6:	193b      	adds	r3, r7, r4
 8005df8:	2208      	movs	r2, #8
 8005dfa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8005dfc:	193b      	adds	r3, r7, r4
 8005dfe:	2204      	movs	r2, #4
 8005e00:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8005e02:	193a      	adds	r2, r7, r4
 8005e04:	23a0      	movs	r3, #160	; 0xa0
 8005e06:	05db      	lsls	r3, r3, #23
 8005e08:	0011      	movs	r1, r2
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f003 ff3c 	bl	8009c88 <HAL_GPIO_Init>
}
 8005e10:	46c0      	nop			; (mov r8, r8)
 8005e12:	46bd      	mov	sp, r7
 8005e14:	b009      	add	sp, #36	; 0x24
 8005e16:	bd90      	pop	{r4, r7, pc}
 8005e18:	40021000 	.word	0x40021000

08005e1c <vcom_IoDeInit>:

void vcom_IoDeInit(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0};
 8005e22:	1d3b      	adds	r3, r7, #4
 8005e24:	0018      	movs	r0, r3
 8005e26:	2314      	movs	r3, #20
 8005e28:	001a      	movs	r2, r3
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	f015 fc22 	bl	801b674 <memset>

  USARTx_TX_GPIO_CLK_ENABLE();
 8005e30:	4b14      	ldr	r3, [pc, #80]	; (8005e84 <vcom_IoDeInit+0x68>)
 8005e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e34:	4b13      	ldr	r3, [pc, #76]	; (8005e84 <vcom_IoDeInit+0x68>)
 8005e36:	2101      	movs	r1, #1
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e3c:	4b11      	ldr	r3, [pc, #68]	; (8005e84 <vcom_IoDeInit+0x68>)
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	2201      	movs	r2, #1
 8005e42:	4013      	ands	r3, r2
 8005e44:	603b      	str	r3, [r7, #0]
 8005e46:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8005e48:	1d3b      	adds	r3, r7, #4
 8005e4a:	2203      	movs	r2, #3
 8005e4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8005e4e:	1d3b      	adds	r3, r7, #4
 8005e50:	2200      	movs	r2, #0
 8005e52:	609a      	str	r2, [r3, #8]

  GPIO_InitStructure.Pin =  USARTx_TX_PIN ;
 8005e54:	1d3b      	adds	r3, r7, #4
 8005e56:	2204      	movs	r2, #4
 8005e58:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStructure);
 8005e5a:	1d3a      	adds	r2, r7, #4
 8005e5c:	23a0      	movs	r3, #160	; 0xa0
 8005e5e:	05db      	lsls	r3, r3, #23
 8005e60:	0011      	movs	r1, r2
 8005e62:	0018      	movs	r0, r3
 8005e64:	f003 ff10 	bl	8009c88 <HAL_GPIO_Init>

  GPIO_InitStructure.Pin =  USARTx_RX_PIN ;
 8005e68:	1d3b      	adds	r3, r7, #4
 8005e6a:	2208      	movs	r2, #8
 8005e6c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStructure);
 8005e6e:	1d3a      	adds	r2, r7, #4
 8005e70:	23a0      	movs	r3, #160	; 0xa0
 8005e72:	05db      	lsls	r3, r3, #23
 8005e74:	0011      	movs	r1, r2
 8005e76:	0018      	movs	r0, r3
 8005e78:	f003 ff06 	bl	8009c88 <HAL_GPIO_Init>
}
 8005e7c:	46c0      	nop			; (mov r8, r8)
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	b006      	add	sp, #24
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	40021000 	.word	0x40021000

08005e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005e88:	480d      	ldr	r0, [pc, #52]	; (8005ec0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8005e8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8005e8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005e8e:	e003      	b.n	8005e98 <LoopCopyDataInit>

08005e90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005e90:	4b0c      	ldr	r3, [pc, #48]	; (8005ec4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8005e92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005e94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005e96:	3104      	adds	r1, #4

08005e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8005e98:	480b      	ldr	r0, [pc, #44]	; (8005ec8 <LoopForever+0xa>)
  ldr  r3, =_edata
 8005e9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <LoopForever+0xe>)
  adds  r2, r0, r1
 8005e9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005e9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005ea0:	d3f6      	bcc.n	8005e90 <CopyDataInit>
  ldr  r2, =_sbss
 8005ea2:	4a0b      	ldr	r2, [pc, #44]	; (8005ed0 <LoopForever+0x12>)
  b  LoopFillZerobss
 8005ea4:	e002      	b.n	8005eac <LoopFillZerobss>

08005ea6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8005ea6:	2300      	movs	r3, #0
  str  r3, [r2]
 8005ea8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005eaa:	3204      	adds	r2, #4

08005eac <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <LoopForever+0x16>)
  cmp  r2, r3
 8005eae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005eb0:	d3f9      	bcc.n	8005ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005eb2:	f7ff fde1 	bl	8005a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005eb6:	f015 fbb9 	bl	801b62c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005eba:	f7fe fd9b 	bl	80049f4 <main>

08005ebe <LoopForever>:

LoopForever:
    b LoopForever
 8005ebe:	e7fe      	b.n	8005ebe <LoopForever>
   ldr   r0, =_estack
 8005ec0:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8005ec4:	0801d37c 	.word	0x0801d37c
  ldr  r0, =_sdata
 8005ec8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005ecc:	20000158 	.word	0x20000158
  ldr  r2, =_sbss
 8005ed0:	20000158 	.word	0x20000158
  ldr  r3, = _ebss
 8005ed4:	20001690 	.word	0x20001690

08005ed8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ed8:	e7fe      	b.n	8005ed8 <ADC1_COMP_IRQHandler>
	...

08005edc <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08c      	sub	sp, #48	; 0x30
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	0002      	movs	r2, r0
 8005ee4:	1dfb      	adds	r3, r7, #7
 8005ee6:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE( Led );
 8005ee8:	1dfb      	adds	r3, r7, #7
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d015      	beq.n	8005f1c <BSP_LED_Init+0x40>
 8005ef0:	dc02      	bgt.n	8005ef8 <BSP_LED_Init+0x1c>
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d005      	beq.n	8005f02 <BSP_LED_Init+0x26>
 8005ef6:	e037      	b.n	8005f68 <BSP_LED_Init+0x8c>
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d01c      	beq.n	8005f36 <BSP_LED_Init+0x5a>
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d027      	beq.n	8005f50 <BSP_LED_Init+0x74>
 8005f00:	e032      	b.n	8005f68 <BSP_LED_Init+0x8c>
 8005f02:	4b2a      	ldr	r3, [pc, #168]	; (8005fac <BSP_LED_Init+0xd0>)
 8005f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f06:	4b29      	ldr	r3, [pc, #164]	; (8005fac <BSP_LED_Init+0xd0>)
 8005f08:	2102      	movs	r1, #2
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f0e:	4b27      	ldr	r3, [pc, #156]	; (8005fac <BSP_LED_Init+0xd0>)
 8005f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f12:	2202      	movs	r2, #2
 8005f14:	4013      	ands	r3, r2
 8005f16:	61bb      	str	r3, [r7, #24]
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	e025      	b.n	8005f68 <BSP_LED_Init+0x8c>
 8005f1c:	4b23      	ldr	r3, [pc, #140]	; (8005fac <BSP_LED_Init+0xd0>)
 8005f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f20:	4b22      	ldr	r3, [pc, #136]	; (8005fac <BSP_LED_Init+0xd0>)
 8005f22:	2101      	movs	r1, #1
 8005f24:	430a      	orrs	r2, r1
 8005f26:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f28:	4b20      	ldr	r3, [pc, #128]	; (8005fac <BSP_LED_Init+0xd0>)
 8005f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	4013      	ands	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	e018      	b.n	8005f68 <BSP_LED_Init+0x8c>
 8005f36:	4b1d      	ldr	r3, [pc, #116]	; (8005fac <BSP_LED_Init+0xd0>)
 8005f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3a:	4b1c      	ldr	r3, [pc, #112]	; (8005fac <BSP_LED_Init+0xd0>)
 8005f3c:	2102      	movs	r1, #2
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f42:	4b1a      	ldr	r3, [pc, #104]	; (8005fac <BSP_LED_Init+0xd0>)
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f46:	2202      	movs	r2, #2
 8005f48:	4013      	ands	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	e00b      	b.n	8005f68 <BSP_LED_Init+0x8c>
 8005f50:	4b16      	ldr	r3, [pc, #88]	; (8005fac <BSP_LED_Init+0xd0>)
 8005f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f54:	4b15      	ldr	r3, [pc, #84]	; (8005fac <BSP_LED_Init+0xd0>)
 8005f56:	2102      	movs	r1, #2
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f5c:	4b13      	ldr	r3, [pc, #76]	; (8005fac <BSP_LED_Init+0xd0>)
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	2202      	movs	r2, #2
 8005f62:	4013      	ands	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	46c0      	nop			; (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8005f6a:	1dfb      	adds	r3, r7, #7
 8005f6c:	781a      	ldrb	r2, [r3, #0]
 8005f6e:	4b10      	ldr	r3, [pc, #64]	; (8005fb0 <BSP_LED_Init+0xd4>)
 8005f70:	0052      	lsls	r2, r2, #1
 8005f72:	5ad3      	ldrh	r3, [r2, r3]
 8005f74:	001a      	movs	r2, r3
 8005f76:	211c      	movs	r1, #28
 8005f78:	187b      	adds	r3, r7, r1
 8005f7a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f7c:	187b      	adds	r3, r7, r1
 8005f7e:	2201      	movs	r2, #1
 8005f80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f82:	187b      	adds	r3, r7, r1
 8005f84:	2200      	movs	r2, #0
 8005f86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f88:	187b      	adds	r3, r7, r1
 8005f8a:	2203      	movs	r2, #3
 8005f8c:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005f8e:	1dfb      	adds	r3, r7, #7
 8005f90:	781a      	ldrb	r2, [r3, #0]
 8005f92:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <BSP_LED_Init+0xd8>)
 8005f94:	0092      	lsls	r2, r2, #2
 8005f96:	58d3      	ldr	r3, [r2, r3]
 8005f98:	187a      	adds	r2, r7, r1
 8005f9a:	0011      	movs	r1, r2
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f003 fe73 	bl	8009c88 <HAL_GPIO_Init>
}
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	b00c      	add	sp, #48	; 0x30
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	46c0      	nop			; (mov r8, r8)
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	0801c9fc 	.word	0x0801c9fc
 8005fb4:	20000034 	.word	0x20000034

08005fb8 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	0002      	movs	r2, r0
 8005fc0:	1dfb      	adds	r3, r7, #7
 8005fc2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8005fc4:	1dfb      	adds	r3, r7, #7
 8005fc6:	781a      	ldrb	r2, [r3, #0]
 8005fc8:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <BSP_LED_On+0x30>)
 8005fca:	0092      	lsls	r2, r2, #2
 8005fcc:	58d0      	ldr	r0, [r2, r3]
 8005fce:	1dfb      	adds	r3, r7, #7
 8005fd0:	781a      	ldrb	r2, [r3, #0]
 8005fd2:	4b06      	ldr	r3, [pc, #24]	; (8005fec <BSP_LED_On+0x34>)
 8005fd4:	0052      	lsls	r2, r2, #1
 8005fd6:	5ad3      	ldrh	r3, [r2, r3]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	0019      	movs	r1, r3
 8005fdc:	f003 ffd2 	bl	8009f84 <HAL_GPIO_WritePin>
}
 8005fe0:	46c0      	nop			; (mov r8, r8)
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	b002      	add	sp, #8
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	20000034 	.word	0x20000034
 8005fec:	0801c9fc 	.word	0x0801c9fc

08005ff0 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	0002      	movs	r2, r0
 8005ff8:	1dfb      	adds	r3, r7, #7
 8005ffa:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8005ffc:	1dfb      	adds	r3, r7, #7
 8005ffe:	781a      	ldrb	r2, [r3, #0]
 8006000:	4b07      	ldr	r3, [pc, #28]	; (8006020 <BSP_LED_Off+0x30>)
 8006002:	0092      	lsls	r2, r2, #2
 8006004:	58d0      	ldr	r0, [r2, r3]
 8006006:	1dfb      	adds	r3, r7, #7
 8006008:	781a      	ldrb	r2, [r3, #0]
 800600a:	4b06      	ldr	r3, [pc, #24]	; (8006024 <BSP_LED_Off+0x34>)
 800600c:	0052      	lsls	r2, r2, #1
 800600e:	5ad3      	ldrh	r3, [r2, r3]
 8006010:	2200      	movs	r2, #0
 8006012:	0019      	movs	r1, r3
 8006014:	f003 ffb6 	bl	8009f84 <HAL_GPIO_WritePin>
}
 8006018:	46c0      	nop			; (mov r8, r8)
 800601a:	46bd      	mov	sp, r7
 800601c:	b002      	add	sp, #8
 800601e:	bd80      	pop	{r7, pc}
 8006020:	20000034 	.word	0x20000034
 8006024:	0801c9fc 	.word	0x0801c9fc

08006028 <SX1276GetWakeTime>:
    SX1276SetPublicNetwork,
    SX1276GetWakeupTime
};

uint32_t SX1276GetWakeTime( void )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  return  BOARD_WAKEUP_TIME;
 800602c:	2305      	movs	r3, #5
}
 800602e:	0018      	movs	r0, r3
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	0002      	movs	r2, r0
 800603c:	1dfb      	adds	r3, r7, #7
 800603e:	701a      	strb	r2, [r3, #0]

  if (state == SET )
 8006040:	1dfb      	adds	r3, r7, #7
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d10b      	bne.n	8006060 <SX1276SetXO+0x2c>
  {
    TCXO_ON(); 
 8006048:	2380      	movs	r3, #128	; 0x80
 800604a:	0159      	lsls	r1, r3, #5
 800604c:	23a0      	movs	r3, #160	; 0xa0
 800604e:	05db      	lsls	r3, r3, #23
 8006050:	2201      	movs	r2, #1
 8006052:	0018      	movs	r0, r3
 8006054:	f7fd fede 	bl	8003e14 <HW_GPIO_Write>
    
    DelayMs( BOARD_WAKEUP_TIME ); //start up time of TCXO
 8006058:	2005      	movs	r0, #5
 800605a:	f7fe ffef 	bl	800503c <HAL_Delay>
  }
  else
  {
    TCXO_OFF(); 
  }
}
 800605e:	e007      	b.n	8006070 <SX1276SetXO+0x3c>
    TCXO_OFF(); 
 8006060:	2380      	movs	r3, #128	; 0x80
 8006062:	0159      	lsls	r1, r3, #5
 8006064:	23a0      	movs	r3, #160	; 0xa0
 8006066:	05db      	lsls	r3, r3, #23
 8006068:	2200      	movs	r2, #0
 800606a:	0018      	movs	r0, r3
 800606c:	f7fd fed2 	bl	8003e14 <HW_GPIO_Write>
}
 8006070:	46c0      	nop			; (mov r8, r8)
 8006072:	46bd      	mov	sp, r7
 8006074:	b002      	add	sp, #8
 8006076:	bd80      	pop	{r7, pc}

08006078 <SX1276IoInit>:
void SX1276IoInit( void )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800607e:	1d3b      	adds	r3, r7, #4
 8006080:	0018      	movs	r0, r3
 8006082:	2314      	movs	r3, #20
 8006084:	001a      	movs	r2, r3
 8006086:	2100      	movs	r1, #0
 8006088:	f015 faf4 	bl	801b674 <memset>
  
  SX1276BoardInit( &BoardCallbacks );
 800608c:	4b1b      	ldr	r3, [pc, #108]	; (80060fc <SX1276IoInit+0x84>)
 800608e:	0018      	movs	r0, r3
 8006090:	f000 fa6e 	bl	8006570 <SX1276BoardInit>
  
  initStruct.Mode =GPIO_MODE_IT_RISING;
 8006094:	1d3b      	adds	r3, r7, #4
 8006096:	4a1a      	ldr	r2, [pc, #104]	; (8006100 <SX1276IoInit+0x88>)
 8006098:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 800609a:	1d3b      	adds	r3, r7, #4
 800609c:	2202      	movs	r2, #2
 800609e:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80060a0:	1d3b      	adds	r3, r7, #4
 80060a2:	2203      	movs	r2, #3
 80060a4:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 80060a6:	1d3b      	adds	r3, r7, #4
 80060a8:	4816      	ldr	r0, [pc, #88]	; (8006104 <SX1276IoInit+0x8c>)
 80060aa:	001a      	movs	r2, r3
 80060ac:	2110      	movs	r1, #16
 80060ae:	f7fd fddf 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 80060b2:	1d3b      	adds	r3, r7, #4
 80060b4:	4813      	ldr	r0, [pc, #76]	; (8006104 <SX1276IoInit+0x8c>)
 80060b6:	001a      	movs	r2, r3
 80060b8:	2102      	movs	r1, #2
 80060ba:	f7fd fdd9 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80060be:	1d3b      	adds	r3, r7, #4
 80060c0:	4810      	ldr	r0, [pc, #64]	; (8006104 <SX1276IoInit+0x8c>)
 80060c2:	001a      	movs	r2, r3
 80060c4:	2101      	movs	r1, #1
 80060c6:	f7fd fdd3 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 80060ca:	1d3a      	adds	r2, r7, #4
 80060cc:	2380      	movs	r3, #128	; 0x80
 80060ce:	019b      	lsls	r3, r3, #6
 80060d0:	480d      	ldr	r0, [pc, #52]	; (8006108 <SX1276IoInit+0x90>)
 80060d2:	0019      	movs	r1, r3
 80060d4:	f7fd fdcc 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_4_PORT, RADIO_DIO_4_PIN, &initStruct );
#endif
#ifdef RADIO_DIO_5
  HW_GPIO_Init( RADIO_DIO_5_PORT, RADIO_DIO_5_PIN, &initStruct );
#endif
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80060d8:	1d3b      	adds	r3, r7, #4
 80060da:	2201      	movs	r2, #1
 80060dc:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;  
 80060de:	1d3b      	adds	r3, r7, #4
 80060e0:	2200      	movs	r2, #0
 80060e2:	609a      	str	r2, [r3, #8]
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 80060e4:	1d3a      	adds	r2, r7, #4
 80060e6:	2380      	movs	r3, #128	; 0x80
 80060e8:	0159      	lsls	r1, r3, #5
 80060ea:	23a0      	movs	r3, #160	; 0xa0
 80060ec:	05db      	lsls	r3, r3, #23
 80060ee:	0018      	movs	r0, r3
 80060f0:	f7fd fdbe 	bl	8003c70 <HW_GPIO_Init>
}
 80060f4:	46c0      	nop			; (mov r8, r8)
 80060f6:	46bd      	mov	sp, r7
 80060f8:	b006      	add	sp, #24
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20000044 	.word	0x20000044
 8006100:	10110000 	.word	0x10110000
 8006104:	50000400 	.word	0x50000400
 8006108:	50000800 	.word	0x50000800

0800610c <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4811      	ldr	r0, [pc, #68]	; (8006160 <SX1276IoIrqInit+0x54>)
 800611a:	2200      	movs	r2, #0
 800611c:	2110      	movs	r1, #16
 800611e:	f7fd fe1b 	bl	8003d58 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	3304      	adds	r3, #4
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	480d      	ldr	r0, [pc, #52]	; (8006160 <SX1276IoIrqInit+0x54>)
 800612a:	2200      	movs	r2, #0
 800612c:	2102      	movs	r1, #2
 800612e:	f7fd fe13 	bl	8003d58 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3308      	adds	r3, #8
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4809      	ldr	r0, [pc, #36]	; (8006160 <SX1276IoIrqInit+0x54>)
 800613a:	2200      	movs	r2, #0
 800613c:	2101      	movs	r1, #1
 800613e:	f7fd fe0b 	bl	8003d58 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	330c      	adds	r3, #12
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	2380      	movs	r3, #128	; 0x80
 800614a:	0199      	lsls	r1, r3, #6
 800614c:	4805      	ldr	r0, [pc, #20]	; (8006164 <SX1276IoIrqInit+0x58>)
 800614e:	0013      	movs	r3, r2
 8006150:	2200      	movs	r2, #0
 8006152:	f7fd fe01 	bl	8003d58 <HW_GPIO_SetIrq>
}
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	46bd      	mov	sp, r7
 800615a:	b002      	add	sp, #8
 800615c:	bd80      	pop	{r7, pc}
 800615e:	46c0      	nop			; (mov r8, r8)
 8006160:	50000400 	.word	0x50000400
 8006164:	50000800 	.word	0x50000800

08006168 <SX1276IoDeInit>:

void SX1276IoDeInit( void )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800616e:	1d3b      	adds	r3, r7, #4
 8006170:	0018      	movs	r0, r3
 8006172:	2314      	movs	r3, #20
 8006174:	001a      	movs	r2, r3
 8006176:	2100      	movs	r1, #0
 8006178:	f015 fa7c 	bl	801b674 <memset>

  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 800617c:	1d3b      	adds	r3, r7, #4
 800617e:	4a11      	ldr	r2, [pc, #68]	; (80061c4 <SX1276IoDeInit+0x5c>)
 8006180:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 8006182:	1d3b      	adds	r3, r7, #4
 8006184:	2202      	movs	r2, #2
 8006186:	609a      	str	r2, [r3, #8]
  
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8006188:	1d3b      	adds	r3, r7, #4
 800618a:	480f      	ldr	r0, [pc, #60]	; (80061c8 <SX1276IoDeInit+0x60>)
 800618c:	001a      	movs	r2, r3
 800618e:	2110      	movs	r1, #16
 8006190:	f7fd fd6e 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8006194:	1d3b      	adds	r3, r7, #4
 8006196:	480c      	ldr	r0, [pc, #48]	; (80061c8 <SX1276IoDeInit+0x60>)
 8006198:	001a      	movs	r2, r3
 800619a:	2102      	movs	r1, #2
 800619c:	f7fd fd68 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 80061a0:	1d3b      	adds	r3, r7, #4
 80061a2:	4809      	ldr	r0, [pc, #36]	; (80061c8 <SX1276IoDeInit+0x60>)
 80061a4:	001a      	movs	r2, r3
 80061a6:	2101      	movs	r1, #1
 80061a8:	f7fd fd62 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 80061ac:	1d3a      	adds	r2, r7, #4
 80061ae:	2380      	movs	r3, #128	; 0x80
 80061b0:	019b      	lsls	r3, r3, #6
 80061b2:	4806      	ldr	r0, [pc, #24]	; (80061cc <SX1276IoDeInit+0x64>)
 80061b4:	0019      	movs	r1, r3
 80061b6:	f7fd fd5b 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_4_PORT, RADIO_DIO_4_PIN, &initStruct );
#endif
#ifdef RADIO_DIO_5
  HW_GPIO_Init( RADIO_DIO_5_PORT, RADIO_DIO_5_PIN, &initStruct );
#endif
}
 80061ba:	46c0      	nop			; (mov r8, r8)
 80061bc:	46bd      	mov	sp, r7
 80061be:	b006      	add	sp, #24
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	46c0      	nop			; (mov r8, r8)
 80061c4:	10110000 	.word	0x10110000
 80061c8:	50000400 	.word	0x50000400
 80061cc:	50000800 	.word	0x50000800

080061d0 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 80061d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	0002      	movs	r2, r0
 80061d8:	1dfb      	adds	r3, r7, #7
 80061da:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 80061dc:	250f      	movs	r5, #15
 80061de:	197b      	adds	r3, r7, r5
 80061e0:	2200      	movs	r2, #0
 80061e2:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 80061e4:	260e      	movs	r6, #14
 80061e6:	19bb      	adds	r3, r7, r6
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 80061ec:	197c      	adds	r4, r7, r5
 80061ee:	2009      	movs	r0, #9
 80061f0:	f001 fee8 	bl	8007fc4 <SX1276Read>
 80061f4:	0003      	movs	r3, r0
 80061f6:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 80061f8:	19bc      	adds	r4, r7, r6
 80061fa:	204d      	movs	r0, #77	; 0x4d
 80061fc:	f001 fee2 	bl	8007fc4 <SX1276Read>
 8006200:	0003      	movs	r3, r0
 8006202:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 8006204:	197b      	adds	r3, r7, r5
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	b25b      	sxtb	r3, r3
 800620a:	227f      	movs	r2, #127	; 0x7f
 800620c:	4013      	ands	r3, r2
 800620e:	b25c      	sxtb	r4, r3
 8006210:	1dfb      	adds	r3, r7, #7
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	b25b      	sxtb	r3, r3
 8006216:	0018      	movs	r0, r3
 8006218:	f000 f8bb 	bl	8006392 <SX1276GetPaSelect>
 800621c:	0003      	movs	r3, r0
 800621e:	b25b      	sxtb	r3, r3
 8006220:	4323      	orrs	r3, r4
 8006222:	b25a      	sxtb	r2, r3
 8006224:	197b      	adds	r3, r7, r5
 8006226:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8006228:	197b      	adds	r3, r7, r5
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	b25b      	sxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	da67      	bge.n	8006302 <SX1276SetRfTxPower+0x132>
    {
        if( power > 17 )
 8006232:	1dfb      	adds	r3, r7, #7
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	b25b      	sxtb	r3, r3
 8006238:	2b11      	cmp	r3, #17
 800623a:	dd07      	ble.n	800624c <SX1276SetRfTxPower+0x7c>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800623c:	220e      	movs	r2, #14
 800623e:	18bb      	adds	r3, r7, r2
 8006240:	18ba      	adds	r2, r7, r2
 8006242:	7812      	ldrb	r2, [r2, #0]
 8006244:	2107      	movs	r1, #7
 8006246:	430a      	orrs	r2, r1
 8006248:	701a      	strb	r2, [r3, #0]
 800624a:	e00b      	b.n	8006264 <SX1276SetRfTxPower+0x94>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800624c:	210e      	movs	r1, #14
 800624e:	187b      	adds	r3, r7, r1
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	b25b      	sxtb	r3, r3
 8006254:	2207      	movs	r2, #7
 8006256:	4393      	bics	r3, r2
 8006258:	b25b      	sxtb	r3, r3
 800625a:	2204      	movs	r2, #4
 800625c:	4313      	orrs	r3, r2
 800625e:	b25a      	sxtb	r2, r3
 8006260:	187b      	adds	r3, r7, r1
 8006262:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8006264:	230e      	movs	r3, #14
 8006266:	18fb      	adds	r3, r7, r3
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	2207      	movs	r2, #7
 800626c:	4013      	ands	r3, r2
 800626e:	2b07      	cmp	r3, #7
 8006270:	d123      	bne.n	80062ba <SX1276SetRfTxPower+0xea>
        {
            if( power < 5 )
 8006272:	1dfb      	adds	r3, r7, #7
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	b25b      	sxtb	r3, r3
 8006278:	2b04      	cmp	r3, #4
 800627a:	dc02      	bgt.n	8006282 <SX1276SetRfTxPower+0xb2>
            {
                power = 5;
 800627c:	1dfb      	adds	r3, r7, #7
 800627e:	2205      	movs	r2, #5
 8006280:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 8006282:	1dfb      	adds	r3, r7, #7
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	b25b      	sxtb	r3, r3
 8006288:	2b14      	cmp	r3, #20
 800628a:	dd02      	ble.n	8006292 <SX1276SetRfTxPower+0xc2>
            {
                power = 20;
 800628c:	1dfb      	adds	r3, r7, #7
 800628e:	2214      	movs	r2, #20
 8006290:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8006292:	200f      	movs	r0, #15
 8006294:	183b      	adds	r3, r7, r0
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	b25b      	sxtb	r3, r3
 800629a:	220f      	movs	r2, #15
 800629c:	4393      	bics	r3, r2
 800629e:	b25a      	sxtb	r2, r3
 80062a0:	1dfb      	adds	r3, r7, #7
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	3b05      	subs	r3, #5
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	b25b      	sxtb	r3, r3
 80062aa:	210f      	movs	r1, #15
 80062ac:	400b      	ands	r3, r1
 80062ae:	b25b      	sxtb	r3, r3
 80062b0:	4313      	orrs	r3, r2
 80062b2:	b25a      	sxtb	r2, r3
 80062b4:	183b      	adds	r3, r7, r0
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	e059      	b.n	800636e <SX1276SetRfTxPower+0x19e>
        }
        else
        {
            if( power < 2 )
 80062ba:	1dfb      	adds	r3, r7, #7
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	b25b      	sxtb	r3, r3
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	dc02      	bgt.n	80062ca <SX1276SetRfTxPower+0xfa>
            {
                power = 2;
 80062c4:	1dfb      	adds	r3, r7, #7
 80062c6:	2202      	movs	r2, #2
 80062c8:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 80062ca:	1dfb      	adds	r3, r7, #7
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	b25b      	sxtb	r3, r3
 80062d0:	2b11      	cmp	r3, #17
 80062d2:	dd02      	ble.n	80062da <SX1276SetRfTxPower+0x10a>
            {
                power = 17;
 80062d4:	1dfb      	adds	r3, r7, #7
 80062d6:	2211      	movs	r2, #17
 80062d8:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 80062da:	200f      	movs	r0, #15
 80062dc:	183b      	adds	r3, r7, r0
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	b25b      	sxtb	r3, r3
 80062e2:	220f      	movs	r2, #15
 80062e4:	4393      	bics	r3, r2
 80062e6:	b25a      	sxtb	r2, r3
 80062e8:	1dfb      	adds	r3, r7, #7
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	3b02      	subs	r3, #2
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	b25b      	sxtb	r3, r3
 80062f2:	210f      	movs	r1, #15
 80062f4:	400b      	ands	r3, r1
 80062f6:	b25b      	sxtb	r3, r3
 80062f8:	4313      	orrs	r3, r2
 80062fa:	b25a      	sxtb	r2, r3
 80062fc:	183b      	adds	r3, r7, r0
 80062fe:	701a      	strb	r2, [r3, #0]
 8006300:	e035      	b.n	800636e <SX1276SetRfTxPower+0x19e>
        }
    }
    else
    {
        if( power > 0 )
 8006302:	1dfb      	adds	r3, r7, #7
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	b25b      	sxtb	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	dd18      	ble.n	800633e <SX1276SetRfTxPower+0x16e>
        {
            if( power > 15 )
 800630c:	1dfb      	adds	r3, r7, #7
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	b25b      	sxtb	r3, r3
 8006312:	2b0f      	cmp	r3, #15
 8006314:	dd02      	ble.n	800631c <SX1276SetRfTxPower+0x14c>
            {
                power = 15;
 8006316:	1dfb      	adds	r3, r7, #7
 8006318:	220f      	movs	r2, #15
 800631a:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800631c:	210f      	movs	r1, #15
 800631e:	187b      	adds	r3, r7, r1
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	b25b      	sxtb	r3, r3
 8006324:	227f      	movs	r2, #127	; 0x7f
 8006326:	4393      	bics	r3, r2
 8006328:	b25b      	sxtb	r3, r3
 800632a:	2270      	movs	r2, #112	; 0x70
 800632c:	4313      	orrs	r3, r2
 800632e:	b25a      	sxtb	r2, r3
 8006330:	1dfb      	adds	r3, r7, #7
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	4313      	orrs	r3, r2
 8006336:	b25a      	sxtb	r2, r3
 8006338:	187b      	adds	r3, r7, r1
 800633a:	701a      	strb	r2, [r3, #0]
 800633c:	e017      	b.n	800636e <SX1276SetRfTxPower+0x19e>
        }
        else
        {
            if( power < -4 )
 800633e:	1dfb      	adds	r3, r7, #7
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	b25b      	sxtb	r3, r3
 8006344:	3304      	adds	r3, #4
 8006346:	da02      	bge.n	800634e <SX1276SetRfTxPower+0x17e>
            {
                power = -4;
 8006348:	1dfb      	adds	r3, r7, #7
 800634a:	22fc      	movs	r2, #252	; 0xfc
 800634c:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800634e:	210f      	movs	r1, #15
 8006350:	187b      	adds	r3, r7, r1
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	b25b      	sxtb	r3, r3
 8006356:	227f      	movs	r2, #127	; 0x7f
 8006358:	4393      	bics	r3, r2
 800635a:	b25a      	sxtb	r2, r3
 800635c:	1dfb      	adds	r3, r7, #7
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	3304      	adds	r3, #4
 8006362:	b2db      	uxtb	r3, r3
 8006364:	b25b      	sxtb	r3, r3
 8006366:	4313      	orrs	r3, r2
 8006368:	b25a      	sxtb	r2, r3
 800636a:	187b      	adds	r3, r7, r1
 800636c:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 800636e:	230f      	movs	r3, #15
 8006370:	18fb      	adds	r3, r7, r3
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	0019      	movs	r1, r3
 8006376:	2009      	movs	r0, #9
 8006378:	f001 fe10 	bl	8007f9c <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 800637c:	230e      	movs	r3, #14
 800637e:	18fb      	adds	r3, r7, r3
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	0019      	movs	r1, r3
 8006384:	204d      	movs	r0, #77	; 0x4d
 8006386:	f001 fe09 	bl	8007f9c <SX1276Write>
}
 800638a:	46c0      	nop			; (mov r8, r8)
 800638c:	46bd      	mov	sp, r7
 800638e:	b005      	add	sp, #20
 8006390:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006392 <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( int8_t power )
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	0002      	movs	r2, r0
 800639a:	1dfb      	adds	r3, r7, #7
 800639c:	701a      	strb	r2, [r3, #0]
    if (power >14)
 800639e:	1dfb      	adds	r3, r7, #7
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	b25b      	sxtb	r3, r3
 80063a4:	2b0e      	cmp	r3, #14
 80063a6:	dd01      	ble.n	80063ac <SX1276GetPaSelect+0x1a>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 80063a8:	2380      	movs	r3, #128	; 0x80
 80063aa:	e000      	b.n	80063ae <SX1276GetPaSelect+0x1c>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 80063ac:	2300      	movs	r3, #0
    }
}
 80063ae:	0018      	movs	r0, r3
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b002      	add	sp, #8
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b082      	sub	sp, #8
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	0002      	movs	r2, r0
 80063be:	1dfb      	adds	r3, r7, #7
 80063c0:	701a      	strb	r2, [r3, #0]
    if( status == false )
 80063c2:	1dfb      	adds	r3, r7, #7
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2201      	movs	r2, #1
 80063c8:	4053      	eors	r3, r2
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <SX1276SetAntSwLowPower+0x20>
    {
      SX1276AntSwInit( );
 80063d0:	f000 f808 	bl	80063e4 <SX1276AntSwInit>
    }
    else 
    {
      SX1276AntSwDeInit( );
    }
}
 80063d4:	e001      	b.n	80063da <SX1276SetAntSwLowPower+0x24>
      SX1276AntSwDeInit( );
 80063d6:	f000 f845 	bl	8006464 <SX1276AntSwDeInit>
}
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	46bd      	mov	sp, r7
 80063de:	b002      	add	sp, #8
 80063e0:	bd80      	pop	{r7, pc}
	...

080063e4 <SX1276AntSwInit>:

static void SX1276AntSwInit( void )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 80063ea:	1d3b      	adds	r3, r7, #4
 80063ec:	0018      	movs	r0, r3
 80063ee:	2314      	movs	r3, #20
 80063f0:	001a      	movs	r2, r3
 80063f2:	2100      	movs	r1, #0
 80063f4:	f015 f93e 	bl	801b674 <memset>

  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80063f8:	1d3b      	adds	r3, r7, #4
 80063fa:	2201      	movs	r2, #1
 80063fc:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL; 
 80063fe:	1d3b      	adds	r3, r7, #4
 8006400:	2200      	movs	r2, #0
 8006402:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8006404:	1d3b      	adds	r3, r7, #4
 8006406:	2203      	movs	r2, #3
 8006408:	60da      	str	r2, [r3, #12]
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 800640a:	1d3a      	adds	r2, r7, #4
 800640c:	23a0      	movs	r3, #160	; 0xa0
 800640e:	05db      	lsls	r3, r3, #23
 8006410:	2102      	movs	r1, #2
 8006412:	0018      	movs	r0, r3
 8006414:	f7fd fc2c 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8006418:	23a0      	movs	r3, #160	; 0xa0
 800641a:	05db      	lsls	r3, r3, #23
 800641c:	2200      	movs	r2, #0
 800641e:	2102      	movs	r1, #2
 8006420:	0018      	movs	r0, r3
 8006422:	f7fd fcf7 	bl	8003e14 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8006426:	1d3b      	adds	r3, r7, #4
 8006428:	480d      	ldr	r0, [pc, #52]	; (8006460 <SX1276AntSwInit+0x7c>)
 800642a:	001a      	movs	r2, r3
 800642c:	2102      	movs	r1, #2
 800642e:	f7fd fc1f 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 8006432:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <SX1276AntSwInit+0x7c>)
 8006434:	2200      	movs	r2, #0
 8006436:	2102      	movs	r1, #2
 8006438:	0018      	movs	r0, r3
 800643a:	f7fd fceb 	bl	8003e14 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 800643e:	1d3b      	adds	r3, r7, #4
 8006440:	4807      	ldr	r0, [pc, #28]	; (8006460 <SX1276AntSwInit+0x7c>)
 8006442:	001a      	movs	r2, r3
 8006444:	2104      	movs	r1, #4
 8006446:	f7fd fc13 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 800644a:	4b05      	ldr	r3, [pc, #20]	; (8006460 <SX1276AntSwInit+0x7c>)
 800644c:	2200      	movs	r2, #0
 800644e:	2104      	movs	r1, #4
 8006450:	0018      	movs	r0, r3
 8006452:	f7fd fcdf 	bl	8003e14 <HW_GPIO_Write>
}
 8006456:	46c0      	nop			; (mov r8, r8)
 8006458:	46bd      	mov	sp, r7
 800645a:	b006      	add	sp, #24
 800645c:	bd80      	pop	{r7, pc}
 800645e:	46c0      	nop			; (mov r8, r8)
 8006460:	50000800 	.word	0x50000800

08006464 <SX1276AntSwDeInit>:

static void SX1276AntSwDeInit( void )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800646a:	1d3b      	adds	r3, r7, #4
 800646c:	0018      	movs	r0, r3
 800646e:	2314      	movs	r3, #20
 8006470:	001a      	movs	r2, r3
 8006472:	2100      	movs	r1, #0
 8006474:	f015 f8fe 	bl	801b674 <memset>

  initStruct.Mode = GPIO_MODE_ANALOG ;
 8006478:	1d3b      	adds	r3, r7, #4
 800647a:	2203      	movs	r2, #3
 800647c:	605a      	str	r2, [r3, #4]
  
  initStruct.Pull = GPIO_NOPULL;
 800647e:	1d3b      	adds	r3, r7, #4
 8006480:	2200      	movs	r2, #0
 8006482:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8006484:	1d3b      	adds	r3, r7, #4
 8006486:	2203      	movs	r2, #3
 8006488:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 800648a:	1d3a      	adds	r2, r7, #4
 800648c:	23a0      	movs	r3, #160	; 0xa0
 800648e:	05db      	lsls	r3, r3, #23
 8006490:	2102      	movs	r1, #2
 8006492:	0018      	movs	r0, r3
 8006494:	f7fd fbec 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8006498:	23a0      	movs	r3, #160	; 0xa0
 800649a:	05db      	lsls	r3, r3, #23
 800649c:	2200      	movs	r2, #0
 800649e:	2102      	movs	r1, #2
 80064a0:	0018      	movs	r0, r3
 80064a2:	f7fd fcb7 	bl	8003e14 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 80064a6:	1d3b      	adds	r3, r7, #4
 80064a8:	480d      	ldr	r0, [pc, #52]	; (80064e0 <SX1276AntSwDeInit+0x7c>)
 80064aa:	001a      	movs	r2, r3
 80064ac:	2102      	movs	r1, #2
 80064ae:	f7fd fbdf 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 80064b2:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <SX1276AntSwDeInit+0x7c>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	2102      	movs	r1, #2
 80064b8:	0018      	movs	r0, r3
 80064ba:	f7fd fcab 	bl	8003e14 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 80064be:	1d3b      	adds	r3, r7, #4
 80064c0:	4807      	ldr	r0, [pc, #28]	; (80064e0 <SX1276AntSwDeInit+0x7c>)
 80064c2:	001a      	movs	r2, r3
 80064c4:	2104      	movs	r1, #4
 80064c6:	f7fd fbd3 	bl	8003c70 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 80064ca:	4b05      	ldr	r3, [pc, #20]	; (80064e0 <SX1276AntSwDeInit+0x7c>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	2104      	movs	r1, #4
 80064d0:	0018      	movs	r0, r3
 80064d2:	f7fd fc9f 	bl	8003e14 <HW_GPIO_Write>
}
 80064d6:	46c0      	nop			; (mov r8, r8)
 80064d8:	46bd      	mov	sp, r7
 80064da:	b006      	add	sp, #24
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	46c0      	nop			; (mov r8, r8)
 80064e0:	50000800 	.word	0x50000800

080064e4 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 80064e4:	b590      	push	{r4, r7, lr}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	0002      	movs	r2, r0
 80064ec:	1dfb      	adds	r3, r7, #7
 80064ee:	701a      	strb	r2, [r3, #0]
 uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 80064f0:	230f      	movs	r3, #15
 80064f2:	18fc      	adds	r4, r7, r3
 80064f4:	2009      	movs	r0, #9
 80064f6:	f001 fd65 	bl	8007fc4 <SX1276Read>
 80064fa:	0003      	movs	r3, r0
 80064fc:	7023      	strb	r3, [r4, #0]
    switch( opMode )
 80064fe:	1dfb      	adds	r3, r7, #7
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	2b03      	cmp	r3, #3
 8006504:	d116      	bne.n	8006534 <SX1276SetAntSw+0x50>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8006506:	230f      	movs	r3, #15
 8006508:	18fb      	adds	r3, r7, r3
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	b25b      	sxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	da06      	bge.n	8006520 <SX1276SetAntSw+0x3c>
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 1 );
 8006512:	4b10      	ldr	r3, [pc, #64]	; (8006554 <SX1276SetAntSw+0x70>)
 8006514:	2201      	movs	r2, #1
 8006516:	2102      	movs	r1, #2
 8006518:	0018      	movs	r0, r3
 800651a:	f7fd fc7b 	bl	8003e14 <HW_GPIO_Write>
 800651e:	e005      	b.n	800652c <SX1276SetAntSw+0x48>
      }
      else
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
 8006520:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <SX1276SetAntSw+0x70>)
 8006522:	2201      	movs	r2, #1
 8006524:	2104      	movs	r1, #4
 8006526:	0018      	movs	r0, r3
 8006528:	f7fd fc74 	bl	8003e14 <HW_GPIO_Write>
      }
      SX1276.RxTx = 1;
 800652c:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <SX1276SetAntSw+0x74>)
 800652e:	2201      	movs	r2, #1
 8006530:	701a      	strb	r2, [r3, #0]
        break;
 8006532:	e00a      	b.n	800654a <SX1276SetAntSw+0x66>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
     SX1276.RxTx = 0;
 8006534:	4b08      	ldr	r3, [pc, #32]	; (8006558 <SX1276SetAntSw+0x74>)
 8006536:	2200      	movs	r2, #0
 8006538:	701a      	strb	r2, [r3, #0]
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 800653a:	23a0      	movs	r3, #160	; 0xa0
 800653c:	05db      	lsls	r3, r3, #23
 800653e:	2201      	movs	r2, #1
 8006540:	2102      	movs	r1, #2
 8006542:	0018      	movs	r0, r3
 8006544:	f7fd fc66 	bl	8003e14 <HW_GPIO_Write>
     break;
 8006548:	46c0      	nop			; (mov r8, r8)
    }
}
 800654a:	46c0      	nop			; (mov r8, r8)
 800654c:	46bd      	mov	sp, r7
 800654e:	b005      	add	sp, #20
 8006550:	bd90      	pop	{r4, r7, pc}
 8006552:	46c0      	nop			; (mov r8, r8)
 8006554:	50000800 	.word	0x50000800
 8006558:	200015bc 	.word	0x200015bc

0800655c <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 8006564:	2301      	movs	r3, #1
}
 8006566:	0018      	movs	r0, r3
 8006568:	46bd      	mov	sp, r7
 800656a:	b002      	add	sp, #8
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <SX1276BoardInit>:

/*
 * Radio driver functions implementation
 */
void SX1276BoardInit( LoRaBoardCallback_t *callbacks )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
    LoRaBoardCallbacks =callbacks;
 8006578:	4b03      	ldr	r3, [pc, #12]	; (8006588 <SX1276BoardInit+0x18>)
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	601a      	str	r2, [r3, #0]
}
 800657e:	46c0      	nop			; (mov r8, r8)
 8006580:	46bd      	mov	sp, r7
 8006582:	b002      	add	sp, #8
 8006584:	bd80      	pop	{r7, pc}
 8006586:	46c0      	nop			; (mov r8, r8)
 8006588:	20000520 	.word	0x20000520

0800658c <SX1276Init>:

uint32_t SX1276Init( RadioEvents_t *events )
{
 800658c:	b590      	push	{r4, r7, lr}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 8006594:	4b33      	ldr	r3, [pc, #204]	; (8006664 <SX1276Init+0xd8>)
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800659a:	4a33      	ldr	r2, [pc, #204]	; (8006668 <SX1276Init+0xdc>)
 800659c:	4b33      	ldr	r3, [pc, #204]	; (800666c <SX1276Init+0xe0>)
 800659e:	0011      	movs	r1, r2
 80065a0:	0018      	movs	r0, r3
 80065a2:	f014 fc74 	bl	801ae8e <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80065a6:	4a30      	ldr	r2, [pc, #192]	; (8006668 <SX1276Init+0xdc>)
 80065a8:	4b31      	ldr	r3, [pc, #196]	; (8006670 <SX1276Init+0xe4>)
 80065aa:	0011      	movs	r1, r2
 80065ac:	0018      	movs	r0, r3
 80065ae:	f014 fc6e 	bl	801ae8e <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80065b2:	4a2d      	ldr	r2, [pc, #180]	; (8006668 <SX1276Init+0xdc>)
 80065b4:	4b2f      	ldr	r3, [pc, #188]	; (8006674 <SX1276Init+0xe8>)
 80065b6:	0011      	movs	r1, r2
 80065b8:	0018      	movs	r0, r3
 80065ba:	f014 fc68 	bl	801ae8e <TimerInit>

    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 80065be:	4b2e      	ldr	r3, [pc, #184]	; (8006678 <SX1276Init+0xec>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2001      	movs	r0, #1
 80065c6:	4798      	blx	r3

    SX1276Reset( );
 80065c8:	f001 fc0a 	bl	8007de0 <SX1276Reset>

    RxChainCalibration( );
 80065cc:	f000 f93c 	bl	8006848 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80065d0:	2000      	movs	r0, #0
 80065d2:	f001 fc39 	bl	8007e48 <SX1276SetOpMode>

    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 80065d6:	4b28      	ldr	r3, [pc, #160]	; (8006678 <SX1276Init+0xec>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	4a27      	ldr	r2, [pc, #156]	; (800667c <SX1276Init+0xf0>)
 80065de:	0010      	movs	r0, r2
 80065e0:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80065e2:	230f      	movs	r3, #15
 80065e4:	18fb      	adds	r3, r7, r3
 80065e6:	2200      	movs	r2, #0
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	e025      	b.n	8006638 <SX1276Init+0xac>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 80065ec:	240f      	movs	r4, #15
 80065ee:	193b      	adds	r3, r7, r4
 80065f0:	781a      	ldrb	r2, [r3, #0]
 80065f2:	4923      	ldr	r1, [pc, #140]	; (8006680 <SX1276Init+0xf4>)
 80065f4:	0013      	movs	r3, r2
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	189b      	adds	r3, r3, r2
 80065fa:	5c5b      	ldrb	r3, [r3, r1]
 80065fc:	0018      	movs	r0, r3
 80065fe:	f001 fc73 	bl	8007ee8 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8006602:	193b      	adds	r3, r7, r4
 8006604:	781a      	ldrb	r2, [r3, #0]
 8006606:	491e      	ldr	r1, [pc, #120]	; (8006680 <SX1276Init+0xf4>)
 8006608:	0013      	movs	r3, r2
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	189b      	adds	r3, r3, r2
 800660e:	18cb      	adds	r3, r1, r3
 8006610:	3301      	adds	r3, #1
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	b298      	uxth	r0, r3
 8006616:	193b      	adds	r3, r7, r4
 8006618:	781a      	ldrb	r2, [r3, #0]
 800661a:	4919      	ldr	r1, [pc, #100]	; (8006680 <SX1276Init+0xf4>)
 800661c:	0013      	movs	r3, r2
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	189b      	adds	r3, r3, r2
 8006622:	18cb      	adds	r3, r1, r3
 8006624:	3302      	adds	r3, #2
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	0019      	movs	r1, r3
 800662a:	f001 fcb7 	bl	8007f9c <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800662e:	193b      	adds	r3, r7, r4
 8006630:	781a      	ldrb	r2, [r3, #0]
 8006632:	193b      	adds	r3, r7, r4
 8006634:	3201      	adds	r2, #1
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	230f      	movs	r3, #15
 800663a:	18fb      	adds	r3, r7, r3
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b0f      	cmp	r3, #15
 8006640:	d9d4      	bls.n	80065ec <SX1276Init+0x60>
    }

    SX1276SetModem( MODEM_FSK );
 8006642:	2000      	movs	r0, #0
 8006644:	f001 fc50 	bl	8007ee8 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8006648:	4b0e      	ldr	r3, [pc, #56]	; (8006684 <SX1276Init+0xf8>)
 800664a:	2200      	movs	r2, #0
 800664c:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 800664e:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <SX1276Init+0xec>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	4798      	blx	r3
 8006656:	0003      	movs	r3, r0
 8006658:	3302      	adds	r3, #2
}
 800665a:	0018      	movs	r0, r3
 800665c:	46bd      	mov	sp, r7
 800665e:	b005      	add	sp, #20
 8006660:	bd90      	pop	{r4, r7, pc}
 8006662:	46c0      	nop			; (mov r8, r8)
 8006664:	2000041c 	.word	0x2000041c
 8006668:	08008205 	.word	0x08008205
 800666c:	2000158c 	.word	0x2000158c
 8006670:	20001624 	.word	0x20001624
 8006674:	200015a4 	.word	0x200015a4
 8006678:	20000520 	.word	0x20000520
 800667c:	2000005c 	.word	0x2000005c
 8006680:	0801ca78 	.word	0x0801ca78
 8006684:	200015bc 	.word	0x200015bc

08006688 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 800668c:	4b02      	ldr	r3, [pc, #8]	; (8006698 <SX1276GetStatus+0x10>)
 800668e:	791b      	ldrb	r3, [r3, #4]
}
 8006690:	0018      	movs	r0, r3
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	46c0      	nop			; (mov r8, r8)
 8006698:	200015bc 	.word	0x200015bc

0800669c <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 800669c:	b590      	push	{r4, r7, lr}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 80066a4:	4b1d      	ldr	r3, [pc, #116]	; (800671c <SX1276SetChannel+0x80>)
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	491c      	ldr	r1, [pc, #112]	; (8006720 <SX1276SetChannel+0x84>)
 80066ae:	0018      	movs	r0, r3
 80066b0:	f7f9 fd2a 	bl	8000108 <__udivsi3>
 80066b4:	0003      	movs	r3, r0
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	6979      	ldr	r1, [r7, #20]
 80066ba:	000b      	movs	r3, r1
 80066bc:	015b      	lsls	r3, r3, #5
 80066be:	1a5b      	subs	r3, r3, r1
 80066c0:	019a      	lsls	r2, r3, #6
 80066c2:	1ad2      	subs	r2, r2, r3
 80066c4:	00d2      	lsls	r2, r2, #3
 80066c6:	1853      	adds	r3, r2, r1
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	613b      	str	r3, [r7, #16]
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	021c      	lsls	r4, r3, #8
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	021b      	lsls	r3, r3, #8
 80066d6:	4a13      	ldr	r2, [pc, #76]	; (8006724 <SX1276SetChannel+0x88>)
 80066d8:	4694      	mov	ip, r2
 80066da:	4463      	add	r3, ip
 80066dc:	4910      	ldr	r1, [pc, #64]	; (8006720 <SX1276SetChannel+0x84>)
 80066de:	0018      	movs	r0, r3
 80066e0:	f7f9 fd12 	bl	8000108 <__udivsi3>
 80066e4:	0003      	movs	r3, r0
 80066e6:	18e3      	adds	r3, r4, r3
 80066e8:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	0c1b      	lsrs	r3, r3, #16
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	0019      	movs	r1, r3
 80066f2:	2006      	movs	r0, #6
 80066f4:	f001 fc52 	bl	8007f9c <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	0a1b      	lsrs	r3, r3, #8
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	0019      	movs	r1, r3
 8006700:	2007      	movs	r0, #7
 8006702:	f001 fc4b 	bl	8007f9c <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	0019      	movs	r1, r3
 800670c:	2008      	movs	r0, #8
 800670e:	f001 fc45 	bl	8007f9c <SX1276Write>
}
 8006712:	46c0      	nop			; (mov r8, r8)
 8006714:	46bd      	mov	sp, r7
 8006716:	b007      	add	sp, #28
 8006718:	bd90      	pop	{r4, r7, pc}
 800671a:	46c0      	nop			; (mov r8, r8)
 800671c:	200015bc 	.word	0x200015bc
 8006720:	00003d09 	.word	0x00003d09
 8006724:	00001e84 	.word	0x00001e84

08006728 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8006728:	b5b0      	push	{r4, r5, r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	0011      	movs	r1, r2
 8006732:	607b      	str	r3, [r7, #4]
 8006734:	230f      	movs	r3, #15
 8006736:	18fb      	adds	r3, r7, r3
 8006738:	1c02      	adds	r2, r0, #0
 800673a:	701a      	strb	r2, [r3, #0]
 800673c:	230c      	movs	r3, #12
 800673e:	18fb      	adds	r3, r7, r3
 8006740:	1c0a      	adds	r2, r1, #0
 8006742:	801a      	strh	r2, [r3, #0]
    bool status = true;
 8006744:	2317      	movs	r3, #23
 8006746:	18fb      	adds	r3, r7, r3
 8006748:	2201      	movs	r2, #1
 800674a:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 800674c:	2314      	movs	r3, #20
 800674e:	18fb      	adds	r3, r7, r3
 8006750:	2200      	movs	r2, #0
 8006752:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 8006754:	2300      	movs	r3, #0
 8006756:	613b      	str	r3, [r7, #16]

    if( SX1276GetStatus( ) != RF_IDLE )
 8006758:	f7ff ff96 	bl	8006688 <SX1276GetStatus>
 800675c:	1e03      	subs	r3, r0, #0
 800675e:	d001      	beq.n	8006764 <SX1276IsChannelFree+0x3c>
    {
        return false;
 8006760:	2300      	movs	r3, #0
 8006762:	e039      	b.n	80067d8 <SX1276IsChannelFree+0xb0>
    }

    SX1276SetModem( modem );
 8006764:	230f      	movs	r3, #15
 8006766:	18fb      	adds	r3, r7, r3
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	0018      	movs	r0, r3
 800676c:	f001 fbbc 	bl	8007ee8 <SX1276SetModem>

    SX1276SetChannel( freq );
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	0018      	movs	r0, r3
 8006774:	f7ff ff92 	bl	800669c <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8006778:	2005      	movs	r0, #5
 800677a:	f001 fb65 	bl	8007e48 <SX1276SetOpMode>

    DelayMs( 1 );
 800677e:	2001      	movs	r0, #1
 8006780:	f7fe fc5c 	bl	800503c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8006784:	f014 fd19 	bl	801b1ba <TimerGetCurrentTime>
 8006788:	0003      	movs	r3, r0
 800678a:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800678c:	e017      	b.n	80067be <SX1276IsChannelFree+0x96>
    {
        rssi = SX1276ReadRssi( modem );
 800678e:	2514      	movs	r5, #20
 8006790:	197c      	adds	r4, r7, r5
 8006792:	230f      	movs	r3, #15
 8006794:	18fb      	adds	r3, r7, r3
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	0018      	movs	r0, r3
 800679a:	f001 fad5 	bl	8007d48 <SX1276ReadRssi>
 800679e:	0003      	movs	r3, r0
 80067a0:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 80067a2:	197a      	adds	r2, r7, r5
 80067a4:	230c      	movs	r3, #12
 80067a6:	18fb      	adds	r3, r7, r3
 80067a8:	2100      	movs	r1, #0
 80067aa:	5e52      	ldrsh	r2, [r2, r1]
 80067ac:	2100      	movs	r1, #0
 80067ae:	5e5b      	ldrsh	r3, [r3, r1]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	dd04      	ble.n	80067be <SX1276IsChannelFree+0x96>
        {
            status = false;
 80067b4:	2317      	movs	r3, #23
 80067b6:	18fb      	adds	r3, r7, r3
 80067b8:	2200      	movs	r2, #0
 80067ba:	701a      	strb	r2, [r3, #0]
            break;
 80067bc:	e007      	b.n	80067ce <SX1276IsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	0018      	movs	r0, r3
 80067c2:	f014 fd0a 	bl	801b1da <TimerGetElapsedTime>
 80067c6:	0002      	movs	r2, r0
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d8df      	bhi.n	800678e <SX1276IsChannelFree+0x66>
        }
    }
    SX1276SetSleep( );
 80067ce:	f000 ffdd 	bl	800778c <SX1276SetSleep>
    return status;
 80067d2:	2317      	movs	r3, #23
 80067d4:	18fb      	adds	r3, r7, r3
 80067d6:	781b      	ldrb	r3, [r3, #0]
}
 80067d8:	0018      	movs	r0, r3
 80067da:	46bd      	mov	sp, r7
 80067dc:	b006      	add	sp, #24
 80067de:	bdb0      	pop	{r4, r5, r7, pc}

080067e0 <SX1276Random>:

uint32_t SX1276Random( void )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 80067ea:	2001      	movs	r0, #1
 80067ec:	f001 fb7c 	bl	8007ee8 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80067f0:	21ff      	movs	r1, #255	; 0xff
 80067f2:	2011      	movs	r0, #17
 80067f4:	f001 fbd2 	bl	8007f9c <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80067f8:	2005      	movs	r0, #5
 80067fa:	f001 fb25 	bl	8007e48 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 80067fe:	1dfb      	adds	r3, r7, #7
 8006800:	2200      	movs	r2, #0
 8006802:	701a      	strb	r2, [r3, #0]
 8006804:	e015      	b.n	8006832 <SX1276Random+0x52>
    {
        DelayMs( 1 );
 8006806:	2001      	movs	r0, #1
 8006808:	f7fe fc18 	bl	800503c <HAL_Delay>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800680c:	202c      	movs	r0, #44	; 0x2c
 800680e:	f001 fbd9 	bl	8007fc4 <SX1276Read>
 8006812:	0003      	movs	r3, r0
 8006814:	001a      	movs	r2, r3
 8006816:	2301      	movs	r3, #1
 8006818:	401a      	ands	r2, r3
 800681a:	1dfb      	adds	r3, r7, #7
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	409a      	lsls	r2, r3
 8006820:	0013      	movs	r3, r2
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	4313      	orrs	r3, r2
 8006826:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8006828:	1dfb      	adds	r3, r7, #7
 800682a:	781a      	ldrb	r2, [r3, #0]
 800682c:	1dfb      	adds	r3, r7, #7
 800682e:	3201      	adds	r2, #1
 8006830:	701a      	strb	r2, [r3, #0]
 8006832:	1dfb      	adds	r3, r7, #7
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b1f      	cmp	r3, #31
 8006838:	d9e5      	bls.n	8006806 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 800683a:	f000 ffa7 	bl	800778c <SX1276SetSleep>

    return rnd;
 800683e:	683b      	ldr	r3, [r7, #0]
}
 8006840:	0018      	movs	r0, r3
 8006842:	46bd      	mov	sp, r7
 8006844:	b002      	add	sp, #8
 8006846:	bd80      	pop	{r7, pc}

08006848 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
void RxChainCalibration( void )
{
 8006848:	b590      	push	{r4, r7, lr}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800684e:	2317      	movs	r3, #23
 8006850:	18fc      	adds	r4, r7, r3
 8006852:	2009      	movs	r0, #9
 8006854:	f001 fbb6 	bl	8007fc4 <SX1276Read>
 8006858:	0003      	movs	r3, r0
 800685a:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800685c:	2006      	movs	r0, #6
 800685e:	f001 fbb1 	bl	8007fc4 <SX1276Read>
 8006862:	0003      	movs	r3, r0
 8006864:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8006866:	2007      	movs	r0, #7
 8006868:	f001 fbac 	bl	8007fc4 <SX1276Read>
 800686c:	0003      	movs	r3, r0
 800686e:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8006870:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8006872:	2008      	movs	r0, #8
 8006874:	f001 fba6 	bl	8007fc4 <SX1276Read>
 8006878:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800687a:	4323      	orrs	r3, r4
 800687c:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	0a1b      	lsrs	r3, r3, #8
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	021b      	lsls	r3, r3, #8
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	000b      	movs	r3, r1
 8006892:	015b      	lsls	r3, r3, #5
 8006894:	1a5b      	subs	r3, r3, r1
 8006896:	019a      	lsls	r2, r3, #6
 8006898:	1ad2      	subs	r2, r2, r3
 800689a:	00d2      	lsls	r2, r2, #3
 800689c:	1850      	adds	r0, r2, r1
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	000b      	movs	r3, r1
 80068a2:	015b      	lsls	r3, r3, #5
 80068a4:	1a5b      	subs	r3, r3, r1
 80068a6:	019a      	lsls	r2, r3, #6
 80068a8:	1ad2      	subs	r2, r2, r3
 80068aa:	00d2      	lsls	r2, r2, #3
 80068ac:	1853      	adds	r3, r2, r1
 80068ae:	3380      	adds	r3, #128	; 0x80
 80068b0:	0a1b      	lsrs	r3, r3, #8
 80068b2:	18c3      	adds	r3, r0, r3
 80068b4:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 80068b6:	2100      	movs	r1, #0
 80068b8:	2009      	movs	r0, #9
 80068ba:	f001 fb6f 	bl	8007f9c <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80068be:	203b      	movs	r0, #59	; 0x3b
 80068c0:	f001 fb80 	bl	8007fc4 <SX1276Read>
 80068c4:	0003      	movs	r3, r0
 80068c6:	001a      	movs	r2, r3
 80068c8:	2340      	movs	r3, #64	; 0x40
 80068ca:	4313      	orrs	r3, r2
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	0019      	movs	r1, r3
 80068d0:	203b      	movs	r0, #59	; 0x3b
 80068d2:	f001 fb63 	bl	8007f9c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80068d6:	46c0      	nop			; (mov r8, r8)
 80068d8:	203b      	movs	r0, #59	; 0x3b
 80068da:	f001 fb73 	bl	8007fc4 <SX1276Read>
 80068de:	0003      	movs	r3, r0
 80068e0:	001a      	movs	r2, r3
 80068e2:	2320      	movs	r3, #32
 80068e4:	4013      	ands	r3, r2
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	d0f6      	beq.n	80068d8 <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 80068ea:	4b14      	ldr	r3, [pc, #80]	; (800693c <RxChainCalibration+0xf4>)
 80068ec:	0018      	movs	r0, r3
 80068ee:	f7ff fed5 	bl	800669c <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80068f2:	203b      	movs	r0, #59	; 0x3b
 80068f4:	f001 fb66 	bl	8007fc4 <SX1276Read>
 80068f8:	0003      	movs	r3, r0
 80068fa:	001a      	movs	r2, r3
 80068fc:	2340      	movs	r3, #64	; 0x40
 80068fe:	4313      	orrs	r3, r2
 8006900:	b2db      	uxtb	r3, r3
 8006902:	0019      	movs	r1, r3
 8006904:	203b      	movs	r0, #59	; 0x3b
 8006906:	f001 fb49 	bl	8007f9c <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800690a:	46c0      	nop			; (mov r8, r8)
 800690c:	203b      	movs	r0, #59	; 0x3b
 800690e:	f001 fb59 	bl	8007fc4 <SX1276Read>
 8006912:	0003      	movs	r3, r0
 8006914:	001a      	movs	r2, r3
 8006916:	2320      	movs	r3, #32
 8006918:	4013      	ands	r3, r2
 800691a:	2b20      	cmp	r3, #32
 800691c:	d0f6      	beq.n	800690c <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800691e:	2317      	movs	r3, #23
 8006920:	18fb      	adds	r3, r7, r3
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	0019      	movs	r1, r3
 8006926:	2009      	movs	r0, #9
 8006928:	f001 fb38 	bl	8007f9c <SX1276Write>
    SX1276SetChannel( initialFreq );
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	0018      	movs	r0, r3
 8006930:	f7ff feb4 	bl	800669c <SX1276SetChannel>
}
 8006934:	46c0      	nop			; (mov r8, r8)
 8006936:	46bd      	mov	sp, r7
 8006938:	b007      	add	sp, #28
 800693a:	bd90      	pop	{r4, r7, pc}
 800693c:	33bca100 	.word	0x33bca100

08006940 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8006948:	230f      	movs	r3, #15
 800694a:	18fb      	adds	r3, r7, r3
 800694c:	2200      	movs	r2, #0
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	e021      	b.n	8006996 <GetFskBandwidthRegValue+0x56>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8006952:	230f      	movs	r3, #15
 8006954:	18fb      	adds	r3, r7, r3
 8006956:	781a      	ldrb	r2, [r3, #0]
 8006958:	4b14      	ldr	r3, [pc, #80]	; (80069ac <GetFskBandwidthRegValue+0x6c>)
 800695a:	00d2      	lsls	r2, r2, #3
 800695c:	58d3      	ldr	r3, [r2, r3]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	429a      	cmp	r2, r3
 8006962:	d312      	bcc.n	800698a <GetFskBandwidthRegValue+0x4a>
 8006964:	230f      	movs	r3, #15
 8006966:	18fb      	adds	r3, r7, r3
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <GetFskBandwidthRegValue+0x6c>)
 800696e:	00d2      	lsls	r2, r2, #3
 8006970:	58d3      	ldr	r3, [r2, r3]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	429a      	cmp	r2, r3
 8006976:	d208      	bcs.n	800698a <GetFskBandwidthRegValue+0x4a>
        {
            return FskBandwidths[i].RegValue;
 8006978:	230f      	movs	r3, #15
 800697a:	18fb      	adds	r3, r7, r3
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	4a0b      	ldr	r2, [pc, #44]	; (80069ac <GetFskBandwidthRegValue+0x6c>)
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	18d3      	adds	r3, r2, r3
 8006984:	3304      	adds	r3, #4
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	e00b      	b.n	80069a2 <GetFskBandwidthRegValue+0x62>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800698a:	210f      	movs	r1, #15
 800698c:	187b      	adds	r3, r7, r1
 800698e:	781a      	ldrb	r2, [r3, #0]
 8006990:	187b      	adds	r3, r7, r1
 8006992:	3201      	adds	r2, #1
 8006994:	701a      	strb	r2, [r3, #0]
 8006996:	230f      	movs	r3, #15
 8006998:	18fb      	adds	r3, r7, r3
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	2b14      	cmp	r3, #20
 800699e:	d9d8      	bls.n	8006952 <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 80069a0:	e7fe      	b.n	80069a0 <GetFskBandwidthRegValue+0x60>
}
 80069a2:	0018      	movs	r0, r3
 80069a4:	46bd      	mov	sp, r7
 80069a6:	b004      	add	sp, #16
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	46c0      	nop			; (mov r8, r8)
 80069ac:	0801caa8 	.word	0x0801caa8

080069b0 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 80069b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069b2:	46c6      	mov	lr, r8
 80069b4:	b500      	push	{lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	607a      	str	r2, [r7, #4]
 80069be:	0019      	movs	r1, r3
 80069c0:	240f      	movs	r4, #15
 80069c2:	193b      	adds	r3, r7, r4
 80069c4:	1c02      	adds	r2, r0, #0
 80069c6:	701a      	strb	r2, [r3, #0]
 80069c8:	230e      	movs	r3, #14
 80069ca:	18fb      	adds	r3, r7, r3
 80069cc:	1c0a      	adds	r2, r1, #0
 80069ce:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 80069d0:	193b      	adds	r3, r7, r4
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	0018      	movs	r0, r3
 80069d6:	f001 fa87 	bl	8007ee8 <SX1276SetModem>

    switch( modem )
 80069da:	193b      	adds	r3, r7, r4
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <SX1276SetRxConfig+0x3a>
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d100      	bne.n	80069e8 <SX1276SetRxConfig+0x38>
 80069e6:	e100      	b.n	8006bea <SX1276SetRxConfig+0x23a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80069e8:	e274      	b.n	8006ed4 <SX1276SetRxConfig+0x524>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80069ea:	4bc0      	ldr	r3, [pc, #768]	; (8006cec <SX1276SetRxConfig+0x33c>)
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 80069f0:	4bbe      	ldr	r3, [pc, #760]	; (8006cec <SX1276SetRxConfig+0x33c>)
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80069f6:	4bbd      	ldr	r3, [pc, #756]	; (8006cec <SX1276SetRxConfig+0x33c>)
 80069f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069fa:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80069fc:	4bbb      	ldr	r3, [pc, #748]	; (8006cec <SX1276SetRxConfig+0x33c>)
 80069fe:	222c      	movs	r2, #44	; 0x2c
 8006a00:	2108      	movs	r1, #8
 8006a02:	468c      	mov	ip, r1
 8006a04:	44bc      	add	ip, r7
 8006a06:	4462      	add	r2, ip
 8006a08:	2122      	movs	r1, #34	; 0x22
 8006a0a:	7812      	ldrb	r2, [r2, #0]
 8006a0c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8006a0e:	4bb7      	ldr	r3, [pc, #732]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006a10:	2130      	movs	r1, #48	; 0x30
 8006a12:	2008      	movs	r0, #8
 8006a14:	183a      	adds	r2, r7, r0
 8006a16:	1852      	adds	r2, r2, r1
 8006a18:	2123      	movs	r1, #35	; 0x23
 8006a1a:	7812      	ldrb	r2, [r2, #0]
 8006a1c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8006a1e:	4bb3      	ldr	r3, [pc, #716]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006a20:	2134      	movs	r1, #52	; 0x34
 8006a22:	183a      	adds	r2, r7, r0
 8006a24:	1852      	adds	r2, r2, r1
 8006a26:	2124      	movs	r1, #36	; 0x24
 8006a28:	7812      	ldrb	r2, [r2, #0]
 8006a2a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8006a2c:	4baf      	ldr	r3, [pc, #700]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006a2e:	2220      	movs	r2, #32
 8006a30:	2120      	movs	r1, #32
 8006a32:	468c      	mov	ip, r1
 8006a34:	2108      	movs	r1, #8
 8006a36:	4688      	mov	r8, r1
 8006a38:	44b8      	add	r8, r7
 8006a3a:	44c4      	add	ip, r8
 8006a3c:	4462      	add	r2, ip
 8006a3e:	2125      	movs	r1, #37	; 0x25
 8006a40:	7812      	ldrb	r2, [r2, #0]
 8006a42:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8006a44:	4ba9      	ldr	r3, [pc, #676]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006a46:	2224      	movs	r2, #36	; 0x24
 8006a48:	2120      	movs	r1, #32
 8006a4a:	468c      	mov	ip, r1
 8006a4c:	2108      	movs	r1, #8
 8006a4e:	4688      	mov	r8, r1
 8006a50:	44b8      	add	r8, r7
 8006a52:	44c4      	add	ip, r8
 8006a54:	4462      	add	r2, ip
 8006a56:	2126      	movs	r1, #38	; 0x26
 8006a58:	7812      	ldrb	r2, [r2, #0]
 8006a5a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8006a5c:	4ba3      	ldr	r3, [pc, #652]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006a5e:	2624      	movs	r6, #36	; 0x24
 8006a60:	183a      	adds	r2, r7, r0
 8006a62:	1992      	adds	r2, r2, r6
 8006a64:	8812      	ldrh	r2, [r2, #0]
 8006a66:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8006a68:	2328      	movs	r3, #40	; 0x28
 8006a6a:	2208      	movs	r2, #8
 8006a6c:	4694      	mov	ip, r2
 8006a6e:	44bc      	add	ip, r7
 8006a70:	4463      	add	r3, ip
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	0018      	movs	r0, r3
 8006a76:	f7fc f945 	bl	8002d04 <__aeabi_i2d>
 8006a7a:	0004      	movs	r4, r0
 8006a7c:	000d      	movs	r5, r1
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7fc f97a 	bl	8002d78 <__aeabi_ui2d>
 8006a84:	0002      	movs	r2, r0
 8006a86:	000b      	movs	r3, r1
 8006a88:	2000      	movs	r0, #0
 8006a8a:	4999      	ldr	r1, [pc, #612]	; (8006cf0 <SX1276SetRxConfig+0x340>)
 8006a8c:	f7fa ff40 	bl	8001910 <__aeabi_ddiv>
 8006a90:	0002      	movs	r2, r0
 8006a92:	000b      	movs	r3, r1
 8006a94:	0010      	movs	r0, r2
 8006a96:	0019      	movs	r1, r3
 8006a98:	2200      	movs	r2, #0
 8006a9a:	4b96      	ldr	r3, [pc, #600]	; (8006cf4 <SX1276SetRxConfig+0x344>)
 8006a9c:	f7fb fb42 	bl	8002124 <__aeabi_dmul>
 8006aa0:	0002      	movs	r2, r0
 8006aa2:	000b      	movs	r3, r1
 8006aa4:	0020      	movs	r0, r4
 8006aa6:	0029      	movs	r1, r5
 8006aa8:	f7fb fb3c 	bl	8002124 <__aeabi_dmul>
 8006aac:	0003      	movs	r3, r0
 8006aae:	000c      	movs	r4, r1
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	0021      	movs	r1, r4
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	4b90      	ldr	r3, [pc, #576]	; (8006cf8 <SX1276SetRxConfig+0x348>)
 8006ab8:	f7fb fb34 	bl	8002124 <__aeabi_dmul>
 8006abc:	0003      	movs	r3, r0
 8006abe:	000c      	movs	r4, r1
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	0021      	movs	r1, r4
 8006ac4:	f7f9 fd94 	bl	80005f0 <__aeabi_d2uiz>
 8006ac8:	0002      	movs	r2, r0
 8006aca:	4b88      	ldr	r3, [pc, #544]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006acc:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7fc f952 	bl	8002d78 <__aeabi_ui2d>
 8006ad4:	0003      	movs	r3, r0
 8006ad6:	000c      	movs	r4, r1
 8006ad8:	001a      	movs	r2, r3
 8006ada:	0023      	movs	r3, r4
 8006adc:	2000      	movs	r0, #0
 8006ade:	4987      	ldr	r1, [pc, #540]	; (8006cfc <SX1276SetRxConfig+0x34c>)
 8006ae0:	f7fa ff16 	bl	8001910 <__aeabi_ddiv>
 8006ae4:	0003      	movs	r3, r0
 8006ae6:	000c      	movs	r4, r1
 8006ae8:	0018      	movs	r0, r3
 8006aea:	0021      	movs	r1, r4
 8006aec:	f7f9 fd80 	bl	80005f0 <__aeabi_d2uiz>
 8006af0:	0003      	movs	r3, r0
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	0a1b      	lsrs	r3, r3, #8
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	0019      	movs	r1, r3
 8006afe:	2002      	movs	r0, #2
 8006b00:	f001 fa4c 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	0019      	movs	r1, r3
 8006b0a:	2003      	movs	r0, #3
 8006b0c:	f001 fa46 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	0018      	movs	r0, r3
 8006b14:	f7ff ff14 	bl	8006940 <GetFskBandwidthRegValue>
 8006b18:	0003      	movs	r3, r0
 8006b1a:	0019      	movs	r1, r3
 8006b1c:	2012      	movs	r0, #18
 8006b1e:	f001 fa3d 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	0018      	movs	r0, r3
 8006b26:	f7ff ff0b 	bl	8006940 <GetFskBandwidthRegValue>
 8006b2a:	0003      	movs	r3, r0
 8006b2c:	0019      	movs	r1, r3
 8006b2e:	2013      	movs	r0, #19
 8006b30:	f001 fa34 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8006b34:	2008      	movs	r0, #8
 8006b36:	0004      	movs	r4, r0
 8006b38:	183b      	adds	r3, r7, r0
 8006b3a:	199b      	adds	r3, r3, r6
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	0a1b      	lsrs	r3, r3, #8
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	0019      	movs	r1, r3
 8006b46:	2025      	movs	r0, #37	; 0x25
 8006b48:	f001 fa28 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8006b4c:	193b      	adds	r3, r7, r4
 8006b4e:	199b      	adds	r3, r3, r6
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	0019      	movs	r1, r3
 8006b56:	2026      	movs	r0, #38	; 0x26
 8006b58:	f001 fa20 	bl	8007f9c <SX1276Write>
            if( fixLen == 1 )
 8006b5c:	222c      	movs	r2, #44	; 0x2c
 8006b5e:	193b      	adds	r3, r7, r4
 8006b60:	189b      	adds	r3, r3, r2
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00a      	beq.n	8006b7e <SX1276SetRxConfig+0x1ce>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8006b68:	2330      	movs	r3, #48	; 0x30
 8006b6a:	2208      	movs	r2, #8
 8006b6c:	4694      	mov	ip, r2
 8006b6e:	44bc      	add	ip, r7
 8006b70:	4463      	add	r3, ip
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	0019      	movs	r1, r3
 8006b76:	2032      	movs	r0, #50	; 0x32
 8006b78:	f001 fa10 	bl	8007f9c <SX1276Write>
 8006b7c:	e003      	b.n	8006b86 <SX1276SetRxConfig+0x1d6>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8006b7e:	21ff      	movs	r1, #255	; 0xff
 8006b80:	2032      	movs	r0, #50	; 0x32
 8006b82:	f001 fa0b 	bl	8007f9c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8006b86:	2030      	movs	r0, #48	; 0x30
 8006b88:	f001 fa1c 	bl	8007fc4 <SX1276Read>
 8006b8c:	0003      	movs	r3, r0
 8006b8e:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8006b90:	226f      	movs	r2, #111	; 0x6f
 8006b92:	4013      	ands	r3, r2
 8006b94:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8006b96:	232c      	movs	r3, #44	; 0x2c
 8006b98:	2108      	movs	r1, #8
 8006b9a:	468c      	mov	ip, r1
 8006b9c:	44bc      	add	ip, r7
 8006b9e:	4463      	add	r3, ip
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <SX1276SetRxConfig+0x1fa>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e001      	b.n	8006bae <SX1276SetRxConfig+0x1fe>
 8006baa:	2380      	movs	r3, #128	; 0x80
 8006bac:	425b      	negs	r3, r3
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8006bb2:	2334      	movs	r3, #52	; 0x34
 8006bb4:	2108      	movs	r1, #8
 8006bb6:	468c      	mov	ip, r1
 8006bb8:	44bc      	add	ip, r7
 8006bba:	4463      	add	r3, ip
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006bc0:	b25b      	sxtb	r3, r3
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	0019      	movs	r1, r3
 8006bca:	2030      	movs	r0, #48	; 0x30
 8006bcc:	f001 f9e6 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8006bd0:	2031      	movs	r0, #49	; 0x31
 8006bd2:	f001 f9f7 	bl	8007fc4 <SX1276Read>
 8006bd6:	0003      	movs	r3, r0
 8006bd8:	001a      	movs	r2, r3
 8006bda:	2340      	movs	r3, #64	; 0x40
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	0019      	movs	r1, r3
 8006be2:	2031      	movs	r0, #49	; 0x31
 8006be4:	f001 f9da 	bl	8007f9c <SX1276Write>
        break;
 8006be8:	e174      	b.n	8006ed4 <SX1276SetRxConfig+0x524>
            if( bandwidth > 2 )
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d900      	bls.n	8006bf2 <SX1276SetRxConfig+0x242>
                while( 1 );
 8006bf0:	e7fe      	b.n	8006bf0 <SX1276SetRxConfig+0x240>
            bandwidth += 7;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	3307      	adds	r3, #7
 8006bf6:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8006bf8:	4b3c      	ldr	r3, [pc, #240]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8006bfe:	4b3b      	ldr	r3, [pc, #236]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8006c04:	4b39      	ldr	r3, [pc, #228]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006c06:	220e      	movs	r2, #14
 8006c08:	18ba      	adds	r2, r7, r2
 8006c0a:	214d      	movs	r1, #77	; 0x4d
 8006c0c:	7812      	ldrb	r2, [r2, #0]
 8006c0e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8006c10:	4b36      	ldr	r3, [pc, #216]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006c12:	2224      	movs	r2, #36	; 0x24
 8006c14:	2108      	movs	r1, #8
 8006c16:	468c      	mov	ip, r1
 8006c18:	44bc      	add	ip, r7
 8006c1a:	4462      	add	r2, ip
 8006c1c:	214e      	movs	r1, #78	; 0x4e
 8006c1e:	8812      	ldrh	r2, [r2, #0]
 8006c20:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8006c22:	4b32      	ldr	r3, [pc, #200]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006c24:	222c      	movs	r2, #44	; 0x2c
 8006c26:	2108      	movs	r1, #8
 8006c28:	468c      	mov	ip, r1
 8006c2a:	44bc      	add	ip, r7
 8006c2c:	4462      	add	r2, ip
 8006c2e:	2150      	movs	r1, #80	; 0x50
 8006c30:	7812      	ldrb	r2, [r2, #0]
 8006c32:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8006c34:	4b2d      	ldr	r3, [pc, #180]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006c36:	2230      	movs	r2, #48	; 0x30
 8006c38:	2108      	movs	r1, #8
 8006c3a:	468c      	mov	ip, r1
 8006c3c:	44bc      	add	ip, r7
 8006c3e:	4462      	add	r2, ip
 8006c40:	2151      	movs	r1, #81	; 0x51
 8006c42:	7812      	ldrb	r2, [r2, #0]
 8006c44:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8006c46:	4b29      	ldr	r3, [pc, #164]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006c48:	2234      	movs	r2, #52	; 0x34
 8006c4a:	2108      	movs	r1, #8
 8006c4c:	468c      	mov	ip, r1
 8006c4e:	44bc      	add	ip, r7
 8006c50:	4462      	add	r2, ip
 8006c52:	2152      	movs	r1, #82	; 0x52
 8006c54:	7812      	ldrb	r2, [r2, #0]
 8006c56:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8006c58:	4b24      	ldr	r3, [pc, #144]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006c5a:	2238      	movs	r2, #56	; 0x38
 8006c5c:	2108      	movs	r1, #8
 8006c5e:	468c      	mov	ip, r1
 8006c60:	44bc      	add	ip, r7
 8006c62:	4462      	add	r2, ip
 8006c64:	2153      	movs	r1, #83	; 0x53
 8006c66:	7812      	ldrb	r2, [r2, #0]
 8006c68:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8006c6a:	4b20      	ldr	r3, [pc, #128]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006c6c:	223c      	movs	r2, #60	; 0x3c
 8006c6e:	2108      	movs	r1, #8
 8006c70:	468c      	mov	ip, r1
 8006c72:	44bc      	add	ip, r7
 8006c74:	4462      	add	r2, ip
 8006c76:	2154      	movs	r1, #84	; 0x54
 8006c78:	7812      	ldrb	r2, [r2, #0]
 8006c7a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8006c7c:	4b1b      	ldr	r3, [pc, #108]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006c7e:	2220      	movs	r2, #32
 8006c80:	2120      	movs	r1, #32
 8006c82:	468c      	mov	ip, r1
 8006c84:	2108      	movs	r1, #8
 8006c86:	4688      	mov	r8, r1
 8006c88:	44b8      	add	r8, r7
 8006c8a:	44c4      	add	ip, r8
 8006c8c:	4462      	add	r2, ip
 8006c8e:	2155      	movs	r1, #85	; 0x55
 8006c90:	7812      	ldrb	r2, [r2, #0]
 8006c92:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8006c94:	4b15      	ldr	r3, [pc, #84]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006c96:	2224      	movs	r2, #36	; 0x24
 8006c98:	2120      	movs	r1, #32
 8006c9a:	468c      	mov	ip, r1
 8006c9c:	2108      	movs	r1, #8
 8006c9e:	4688      	mov	r8, r1
 8006ca0:	44b8      	add	r8, r7
 8006ca2:	44c4      	add	ip, r8
 8006ca4:	4462      	add	r2, ip
 8006ca6:	2156      	movs	r1, #86	; 0x56
 8006ca8:	7812      	ldrb	r2, [r2, #0]
 8006caa:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b0c      	cmp	r3, #12
 8006cb0:	d902      	bls.n	8006cb8 <SX1276SetRxConfig+0x308>
                datarate = 12;
 8006cb2:	230c      	movs	r3, #12
 8006cb4:	607b      	str	r3, [r7, #4]
 8006cb6:	e004      	b.n	8006cc2 <SX1276SetRxConfig+0x312>
            else if( datarate < 6 )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b05      	cmp	r3, #5
 8006cbc:	d801      	bhi.n	8006cc2 <SX1276SetRxConfig+0x312>
                datarate = 6;
 8006cbe:	2306      	movs	r3, #6
 8006cc0:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	2b07      	cmp	r3, #7
 8006cc6:	d105      	bne.n	8006cd4 <SX1276SetRxConfig+0x324>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b0b      	cmp	r3, #11
 8006ccc:	d008      	beq.n	8006ce0 <SX1276SetRxConfig+0x330>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b0c      	cmp	r3, #12
 8006cd2:	d005      	beq.n	8006ce0 <SX1276SetRxConfig+0x330>
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b08      	cmp	r3, #8
 8006cd8:	d112      	bne.n	8006d00 <SX1276SetRxConfig+0x350>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b0c      	cmp	r3, #12
 8006cde:	d10f      	bne.n	8006d00 <SX1276SetRxConfig+0x350>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8006ce0:	4b02      	ldr	r3, [pc, #8]	; (8006cec <SX1276SetRxConfig+0x33c>)
 8006ce2:	224c      	movs	r2, #76	; 0x4c
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	5499      	strb	r1, [r3, r2]
 8006ce8:	e00e      	b.n	8006d08 <SX1276SetRxConfig+0x358>
 8006cea:	46c0      	nop			; (mov r8, r8)
 8006cec:	200015bc 	.word	0x200015bc
 8006cf0:	3ff00000 	.word	0x3ff00000
 8006cf4:	40200000 	.word	0x40200000
 8006cf8:	408f4000 	.word	0x408f4000
 8006cfc:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8006d00:	4b77      	ldr	r3, [pc, #476]	; (8006ee0 <SX1276SetRxConfig+0x530>)
 8006d02:	224c      	movs	r2, #76	; 0x4c
 8006d04:	2100      	movs	r1, #0
 8006d06:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8006d08:	201d      	movs	r0, #29
 8006d0a:	f001 f95b 	bl	8007fc4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	011b      	lsls	r3, r3, #4
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	230e      	movs	r3, #14
 8006d18:	18fb      	adds	r3, r7, r3
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	18db      	adds	r3, r3, r3
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	4313      	orrs	r3, r2
 8006d22:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006d24:	242c      	movs	r4, #44	; 0x2c
 8006d26:	2608      	movs	r6, #8
 8006d28:	19bb      	adds	r3, r7, r6
 8006d2a:	191b      	adds	r3, r3, r4
 8006d2c:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8006d32:	0019      	movs	r1, r3
 8006d34:	201d      	movs	r0, #29
 8006d36:	f001 f931 	bl	8007f9c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8006d3a:	201e      	movs	r0, #30
 8006d3c:	f001 f942 	bl	8007fc4 <SX1276Read>
 8006d40:	0003      	movs	r3, r0
 8006d42:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8006d44:	2308      	movs	r3, #8
 8006d46:	4013      	ands	r3, r2
 8006d48:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8006d52:	4313      	orrs	r3, r2
 8006d54:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8006d56:	2334      	movs	r3, #52	; 0x34
 8006d58:	2108      	movs	r1, #8
 8006d5a:	468c      	mov	ip, r1
 8006d5c:	44bc      	add	ip, r7
 8006d5e:	4463      	add	r3, ip
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	4313      	orrs	r3, r2
 8006d68:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8006d6a:	2528      	movs	r5, #40	; 0x28
 8006d6c:	19bb      	adds	r3, r7, r6
 8006d6e:	195b      	adds	r3, r3, r5
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	0a1b      	lsrs	r3, r3, #8
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2103      	movs	r1, #3
 8006d7a:	400b      	ands	r3, r1
 8006d7c:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	0019      	movs	r1, r3
 8006d84:	201e      	movs	r0, #30
 8006d86:	f001 f909 	bl	8007f9c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8006d8a:	2026      	movs	r0, #38	; 0x26
 8006d8c:	f001 f91a 	bl	8007fc4 <SX1276Read>
 8006d90:	0003      	movs	r3, r0
 8006d92:	b25b      	sxtb	r3, r3
 8006d94:	2208      	movs	r2, #8
 8006d96:	4393      	bics	r3, r2
 8006d98:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8006d9a:	4b51      	ldr	r3, [pc, #324]	; (8006ee0 <SX1276SetRxConfig+0x530>)
 8006d9c:	214c      	movs	r1, #76	; 0x4c
 8006d9e:	5c5b      	ldrb	r3, [r3, r1]
 8006da0:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8006da2:	b25b      	sxtb	r3, r3
 8006da4:	4313      	orrs	r3, r2
 8006da6:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	0019      	movs	r1, r3
 8006dac:	2026      	movs	r0, #38	; 0x26
 8006dae:	f001 f8f5 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8006db2:	19bb      	adds	r3, r7, r6
 8006db4:	195b      	adds	r3, r3, r5
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	0019      	movs	r1, r3
 8006dbc:	201f      	movs	r0, #31
 8006dbe:	f001 f8ed 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8006dc2:	2524      	movs	r5, #36	; 0x24
 8006dc4:	19bb      	adds	r3, r7, r6
 8006dc6:	195b      	adds	r3, r3, r5
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	0a1b      	lsrs	r3, r3, #8
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	0019      	movs	r1, r3
 8006dd2:	2020      	movs	r0, #32
 8006dd4:	f001 f8e2 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8006dd8:	19bb      	adds	r3, r7, r6
 8006dda:	195b      	adds	r3, r3, r5
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	0019      	movs	r1, r3
 8006de2:	2021      	movs	r0, #33	; 0x21
 8006de4:	f001 f8da 	bl	8007f9c <SX1276Write>
            if( fixLen == 1 )
 8006de8:	19bb      	adds	r3, r7, r6
 8006dea:	191b      	adds	r3, r3, r4
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d009      	beq.n	8006e06 <SX1276SetRxConfig+0x456>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8006df2:	2330      	movs	r3, #48	; 0x30
 8006df4:	2208      	movs	r2, #8
 8006df6:	4694      	mov	ip, r2
 8006df8:	44bc      	add	ip, r7
 8006dfa:	4463      	add	r3, ip
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	0019      	movs	r1, r3
 8006e00:	2022      	movs	r0, #34	; 0x22
 8006e02:	f001 f8cb 	bl	8007f9c <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006e06:	4b36      	ldr	r3, [pc, #216]	; (8006ee0 <SX1276SetRxConfig+0x530>)
 8006e08:	2253      	movs	r2, #83	; 0x53
 8006e0a:	5c9b      	ldrb	r3, [r3, r2]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d013      	beq.n	8006e38 <SX1276SetRxConfig+0x488>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8006e10:	2044      	movs	r0, #68	; 0x44
 8006e12:	f001 f8d7 	bl	8007fc4 <SX1276Read>
 8006e16:	0003      	movs	r3, r0
 8006e18:	001a      	movs	r2, r3
 8006e1a:	2380      	movs	r3, #128	; 0x80
 8006e1c:	425b      	negs	r3, r3
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	0019      	movs	r1, r3
 8006e24:	2044      	movs	r0, #68	; 0x44
 8006e26:	f001 f8b9 	bl	8007f9c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8006e2a:	4b2d      	ldr	r3, [pc, #180]	; (8006ee0 <SX1276SetRxConfig+0x530>)
 8006e2c:	2254      	movs	r2, #84	; 0x54
 8006e2e:	5c9b      	ldrb	r3, [r3, r2]
 8006e30:	0019      	movs	r1, r3
 8006e32:	2024      	movs	r0, #36	; 0x24
 8006e34:	f001 f8b2 	bl	8007f9c <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2b09      	cmp	r3, #9
 8006e3c:	d10d      	bne.n	8006e5a <SX1276SetRxConfig+0x4aa>
 8006e3e:	4b28      	ldr	r3, [pc, #160]	; (8006ee0 <SX1276SetRxConfig+0x530>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	4a28      	ldr	r2, [pc, #160]	; (8006ee4 <SX1276SetRxConfig+0x534>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d908      	bls.n	8006e5a <SX1276SetRxConfig+0x4aa>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8006e48:	2102      	movs	r1, #2
 8006e4a:	2036      	movs	r0, #54	; 0x36
 8006e4c:	f001 f8a6 	bl	8007f9c <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8006e50:	2164      	movs	r1, #100	; 0x64
 8006e52:	203a      	movs	r0, #58	; 0x3a
 8006e54:	f001 f8a2 	bl	8007f9c <SX1276Write>
 8006e58:	e00f      	b.n	8006e7a <SX1276SetRxConfig+0x4ca>
            else if( bandwidth == 9 )
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2b09      	cmp	r3, #9
 8006e5e:	d108      	bne.n	8006e72 <SX1276SetRxConfig+0x4c2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8006e60:	2102      	movs	r1, #2
 8006e62:	2036      	movs	r0, #54	; 0x36
 8006e64:	f001 f89a 	bl	8007f9c <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8006e68:	217f      	movs	r1, #127	; 0x7f
 8006e6a:	203a      	movs	r0, #58	; 0x3a
 8006e6c:	f001 f896 	bl	8007f9c <SX1276Write>
 8006e70:	e003      	b.n	8006e7a <SX1276SetRxConfig+0x4ca>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8006e72:	2103      	movs	r1, #3
 8006e74:	2036      	movs	r0, #54	; 0x36
 8006e76:	f001 f891 	bl	8007f9c <SX1276Write>
            if( datarate == 6 )
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b06      	cmp	r3, #6
 8006e7e:	d114      	bne.n	8006eaa <SX1276SetRxConfig+0x4fa>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006e80:	2031      	movs	r0, #49	; 0x31
 8006e82:	f001 f89f 	bl	8007fc4 <SX1276Read>
 8006e86:	0003      	movs	r3, r0
 8006e88:	b25b      	sxtb	r3, r3
 8006e8a:	2207      	movs	r2, #7
 8006e8c:	4393      	bics	r3, r2
 8006e8e:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006e90:	2205      	movs	r2, #5
 8006e92:	4313      	orrs	r3, r2
 8006e94:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	0019      	movs	r1, r3
 8006e9a:	2031      	movs	r0, #49	; 0x31
 8006e9c:	f001 f87e 	bl	8007f9c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006ea0:	210c      	movs	r1, #12
 8006ea2:	2037      	movs	r0, #55	; 0x37
 8006ea4:	f001 f87a 	bl	8007f9c <SX1276Write>
        break;
 8006ea8:	e013      	b.n	8006ed2 <SX1276SetRxConfig+0x522>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006eaa:	2031      	movs	r0, #49	; 0x31
 8006eac:	f001 f88a 	bl	8007fc4 <SX1276Read>
 8006eb0:	0003      	movs	r3, r0
 8006eb2:	b25b      	sxtb	r3, r3
 8006eb4:	2207      	movs	r2, #7
 8006eb6:	4393      	bics	r3, r2
 8006eb8:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006eba:	2203      	movs	r2, #3
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	0019      	movs	r1, r3
 8006ec4:	2031      	movs	r0, #49	; 0x31
 8006ec6:	f001 f869 	bl	8007f9c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006eca:	210a      	movs	r1, #10
 8006ecc:	2037      	movs	r0, #55	; 0x37
 8006ece:	f001 f865 	bl	8007f9c <SX1276Write>
        break;
 8006ed2:	46c0      	nop			; (mov r8, r8)
}
 8006ed4:	46c0      	nop			; (mov r8, r8)
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	b004      	add	sp, #16
 8006eda:	bc04      	pop	{r2}
 8006edc:	4690      	mov	r8, r2
 8006ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ee0:	200015bc 	.word	0x200015bc
 8006ee4:	1f4add40 	.word	0x1f4add40

08006ee8 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8006ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60ba      	str	r2, [r7, #8]
 8006ef0:	607b      	str	r3, [r7, #4]
 8006ef2:	240f      	movs	r4, #15
 8006ef4:	193b      	adds	r3, r7, r4
 8006ef6:	1c02      	adds	r2, r0, #0
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	250e      	movs	r5, #14
 8006efc:	197b      	adds	r3, r7, r5
 8006efe:	1c0a      	adds	r2, r1, #0
 8006f00:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8006f02:	193b      	adds	r3, r7, r4
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	0018      	movs	r0, r3
 8006f08:	f000 ffee 	bl	8007ee8 <SX1276SetModem>

    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8006f0c:	4be5      	ldr	r3, [pc, #916]	; (80072a4 <SX1276SetTxConfig+0x3bc>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	197a      	adds	r2, r7, r5
 8006f14:	7812      	ldrb	r2, [r2, #0]
 8006f16:	b252      	sxtb	r2, r2
 8006f18:	0010      	movs	r0, r2
 8006f1a:	4798      	blx	r3

    switch( modem )
 8006f1c:	193b      	adds	r3, r7, r4
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <SX1276SetTxConfig+0x44>
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d100      	bne.n	8006f2a <SX1276SetTxConfig+0x42>
 8006f28:	e0b1      	b.n	800708e <SX1276SetTxConfig+0x1a6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8006f2a:	e1d8      	b.n	80072de <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.Fsk.Power = power;
 8006f2c:	4bde      	ldr	r3, [pc, #888]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 8006f2e:	220e      	movs	r2, #14
 8006f30:	18ba      	adds	r2, r7, r2
 8006f32:	7812      	ldrb	r2, [r2, #0]
 8006f34:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8006f36:	4bdc      	ldr	r3, [pc, #880]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8006f3c:	4bda      	ldr	r3, [pc, #872]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8006f42:	4bd9      	ldr	r3, [pc, #868]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 8006f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f46:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8006f48:	4bd7      	ldr	r3, [pc, #860]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 8006f4a:	2528      	movs	r5, #40	; 0x28
 8006f4c:	2408      	movs	r4, #8
 8006f4e:	193a      	adds	r2, r7, r4
 8006f50:	1952      	adds	r2, r2, r5
 8006f52:	8812      	ldrh	r2, [r2, #0]
 8006f54:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8006f56:	4bd4      	ldr	r3, [pc, #848]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 8006f58:	262c      	movs	r6, #44	; 0x2c
 8006f5a:	193a      	adds	r2, r7, r4
 8006f5c:	1992      	adds	r2, r2, r6
 8006f5e:	2122      	movs	r1, #34	; 0x22
 8006f60:	7812      	ldrb	r2, [r2, #0]
 8006f62:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8006f64:	4bd0      	ldr	r3, [pc, #832]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 8006f66:	2230      	movs	r2, #48	; 0x30
 8006f68:	2108      	movs	r1, #8
 8006f6a:	468c      	mov	ip, r1
 8006f6c:	44bc      	add	ip, r7
 8006f6e:	4462      	add	r2, ip
 8006f70:	2124      	movs	r1, #36	; 0x24
 8006f72:	7812      	ldrb	r2, [r2, #0]
 8006f74:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8006f76:	4bcc      	ldr	r3, [pc, #816]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 8006f78:	223c      	movs	r2, #60	; 0x3c
 8006f7a:	2108      	movs	r1, #8
 8006f7c:	468c      	mov	ip, r1
 8006f7e:	44bc      	add	ip, r7
 8006f80:	4462      	add	r2, ip
 8006f82:	2125      	movs	r1, #37	; 0x25
 8006f84:	7812      	ldrb	r2, [r2, #0]
 8006f86:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8006f88:	4bc7      	ldr	r3, [pc, #796]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 8006f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f8c:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8006f8e:	68b8      	ldr	r0, [r7, #8]
 8006f90:	f7fb fef2 	bl	8002d78 <__aeabi_ui2d>
 8006f94:	2200      	movs	r2, #0
 8006f96:	4bc5      	ldr	r3, [pc, #788]	; (80072ac <SX1276SetTxConfig+0x3c4>)
 8006f98:	f7fa fcba 	bl	8001910 <__aeabi_ddiv>
 8006f9c:	0003      	movs	r3, r0
 8006f9e:	000c      	movs	r4, r1
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	0021      	movs	r1, r4
 8006fa4:	f7f9 fb24 	bl	80005f0 <__aeabi_d2uiz>
 8006fa8:	0003      	movs	r3, r0
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	0a1b      	lsrs	r3, r3, #8
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	0019      	movs	r1, r3
 8006fb6:	2004      	movs	r0, #4
 8006fb8:	f000 fff0 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	0019      	movs	r1, r3
 8006fc2:	2005      	movs	r0, #5
 8006fc4:	f000 ffea 	bl	8007f9c <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8006fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fca:	f7fb fed5 	bl	8002d78 <__aeabi_ui2d>
 8006fce:	0003      	movs	r3, r0
 8006fd0:	000c      	movs	r4, r1
 8006fd2:	001a      	movs	r2, r3
 8006fd4:	0023      	movs	r3, r4
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	49b5      	ldr	r1, [pc, #724]	; (80072b0 <SX1276SetTxConfig+0x3c8>)
 8006fda:	f7fa fc99 	bl	8001910 <__aeabi_ddiv>
 8006fde:	0003      	movs	r3, r0
 8006fe0:	000c      	movs	r4, r1
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	0021      	movs	r1, r4
 8006fe6:	f7f9 fb03 	bl	80005f0 <__aeabi_d2uiz>
 8006fea:	0003      	movs	r3, r0
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff2:	0a1b      	lsrs	r3, r3, #8
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	0019      	movs	r1, r3
 8006ff8:	2002      	movs	r0, #2
 8006ffa:	f000 ffcf 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007000:	b2db      	uxtb	r3, r3
 8007002:	0019      	movs	r1, r3
 8007004:	2003      	movs	r0, #3
 8007006:	f000 ffc9 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800700a:	2408      	movs	r4, #8
 800700c:	193b      	adds	r3, r7, r4
 800700e:	195b      	adds	r3, r3, r5
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	0a1b      	lsrs	r3, r3, #8
 8007014:	b29b      	uxth	r3, r3
 8007016:	b2db      	uxtb	r3, r3
 8007018:	0019      	movs	r1, r3
 800701a:	2025      	movs	r0, #37	; 0x25
 800701c:	f000 ffbe 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8007020:	193b      	adds	r3, r7, r4
 8007022:	195b      	adds	r3, r3, r5
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	0019      	movs	r1, r3
 800702a:	2026      	movs	r0, #38	; 0x26
 800702c:	f000 ffb6 	bl	8007f9c <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8007030:	2030      	movs	r0, #48	; 0x30
 8007032:	f000 ffc7 	bl	8007fc4 <SX1276Read>
 8007036:	0003      	movs	r3, r0
 8007038:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800703a:	226f      	movs	r2, #111	; 0x6f
 800703c:	4013      	ands	r3, r2
 800703e:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8007040:	193b      	adds	r3, r7, r4
 8007042:	199b      	adds	r3, r3, r6
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d001      	beq.n	800704e <SX1276SetTxConfig+0x166>
 800704a:	2300      	movs	r3, #0
 800704c:	e001      	b.n	8007052 <SX1276SetTxConfig+0x16a>
 800704e:	2380      	movs	r3, #128	; 0x80
 8007050:	425b      	negs	r3, r3
 8007052:	4313      	orrs	r3, r2
 8007054:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8007056:	2330      	movs	r3, #48	; 0x30
 8007058:	2108      	movs	r1, #8
 800705a:	468c      	mov	ip, r1
 800705c:	44bc      	add	ip, r7
 800705e:	4463      	add	r3, ip
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8007064:	b25b      	sxtb	r3, r3
 8007066:	4313      	orrs	r3, r2
 8007068:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 800706a:	b2db      	uxtb	r3, r3
 800706c:	0019      	movs	r1, r3
 800706e:	2030      	movs	r0, #48	; 0x30
 8007070:	f000 ff94 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8007074:	2031      	movs	r0, #49	; 0x31
 8007076:	f000 ffa5 	bl	8007fc4 <SX1276Read>
 800707a:	0003      	movs	r3, r0
 800707c:	001a      	movs	r2, r3
 800707e:	2340      	movs	r3, #64	; 0x40
 8007080:	4313      	orrs	r3, r2
 8007082:	b2db      	uxtb	r3, r3
 8007084:	0019      	movs	r1, r3
 8007086:	2031      	movs	r0, #49	; 0x31
 8007088:	f000 ff88 	bl	8007f9c <SX1276Write>
        break;
 800708c:	e127      	b.n	80072de <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.LoRa.Power = power;
 800708e:	4b86      	ldr	r3, [pc, #536]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 8007090:	220e      	movs	r2, #14
 8007092:	18ba      	adds	r2, r7, r2
 8007094:	2140      	movs	r1, #64	; 0x40
 8007096:	7812      	ldrb	r2, [r2, #0]
 8007098:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b02      	cmp	r3, #2
 800709e:	d900      	bls.n	80070a2 <SX1276SetTxConfig+0x1ba>
                while( 1 );
 80070a0:	e7fe      	b.n	80070a0 <SX1276SetTxConfig+0x1b8>
            bandwidth += 7;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	3307      	adds	r3, #7
 80070a6:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80070a8:	4b7f      	ldr	r3, [pc, #508]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 80070ae:	4b7e      	ldr	r3, [pc, #504]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 80070b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070b2:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 80070b4:	4b7c      	ldr	r3, [pc, #496]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 80070b6:	2224      	movs	r2, #36	; 0x24
 80070b8:	2108      	movs	r1, #8
 80070ba:	468c      	mov	ip, r1
 80070bc:	44bc      	add	ip, r7
 80070be:	4462      	add	r2, ip
 80070c0:	214d      	movs	r1, #77	; 0x4d
 80070c2:	7812      	ldrb	r2, [r2, #0]
 80070c4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80070c6:	4b78      	ldr	r3, [pc, #480]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 80070c8:	2228      	movs	r2, #40	; 0x28
 80070ca:	2108      	movs	r1, #8
 80070cc:	468c      	mov	ip, r1
 80070ce:	44bc      	add	ip, r7
 80070d0:	4462      	add	r2, ip
 80070d2:	214e      	movs	r1, #78	; 0x4e
 80070d4:	8812      	ldrh	r2, [r2, #0]
 80070d6:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80070d8:	4b73      	ldr	r3, [pc, #460]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 80070da:	222c      	movs	r2, #44	; 0x2c
 80070dc:	2108      	movs	r1, #8
 80070de:	468c      	mov	ip, r1
 80070e0:	44bc      	add	ip, r7
 80070e2:	4462      	add	r2, ip
 80070e4:	2150      	movs	r1, #80	; 0x50
 80070e6:	7812      	ldrb	r2, [r2, #0]
 80070e8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80070ea:	4b6f      	ldr	r3, [pc, #444]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 80070ec:	2234      	movs	r2, #52	; 0x34
 80070ee:	2108      	movs	r1, #8
 80070f0:	468c      	mov	ip, r1
 80070f2:	44bc      	add	ip, r7
 80070f4:	4462      	add	r2, ip
 80070f6:	2153      	movs	r1, #83	; 0x53
 80070f8:	7812      	ldrb	r2, [r2, #0]
 80070fa:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80070fc:	4b6a      	ldr	r3, [pc, #424]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 80070fe:	2238      	movs	r2, #56	; 0x38
 8007100:	2108      	movs	r1, #8
 8007102:	468c      	mov	ip, r1
 8007104:	44bc      	add	ip, r7
 8007106:	4462      	add	r2, ip
 8007108:	2154      	movs	r1, #84	; 0x54
 800710a:	7812      	ldrb	r2, [r2, #0]
 800710c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800710e:	4b66      	ldr	r3, [pc, #408]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 8007110:	2230      	movs	r2, #48	; 0x30
 8007112:	2108      	movs	r1, #8
 8007114:	468c      	mov	ip, r1
 8007116:	44bc      	add	ip, r7
 8007118:	4462      	add	r2, ip
 800711a:	2152      	movs	r1, #82	; 0x52
 800711c:	7812      	ldrb	r2, [r2, #0]
 800711e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8007120:	4b61      	ldr	r3, [pc, #388]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 8007122:	223c      	movs	r2, #60	; 0x3c
 8007124:	2108      	movs	r1, #8
 8007126:	468c      	mov	ip, r1
 8007128:	44bc      	add	ip, r7
 800712a:	4462      	add	r2, ip
 800712c:	2155      	movs	r1, #85	; 0x55
 800712e:	7812      	ldrb	r2, [r2, #0]
 8007130:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8007132:	4b5d      	ldr	r3, [pc, #372]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 8007134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007136:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 8007138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713a:	2b0c      	cmp	r3, #12
 800713c:	d902      	bls.n	8007144 <SX1276SetTxConfig+0x25c>
                datarate = 12;
 800713e:	230c      	movs	r3, #12
 8007140:	62bb      	str	r3, [r7, #40]	; 0x28
 8007142:	e004      	b.n	800714e <SX1276SetTxConfig+0x266>
            else if( datarate < 6 )
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	2b05      	cmp	r3, #5
 8007148:	d801      	bhi.n	800714e <SX1276SetTxConfig+0x266>
                datarate = 6;
 800714a:	2306      	movs	r3, #6
 800714c:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b07      	cmp	r3, #7
 8007152:	d105      	bne.n	8007160 <SX1276SetTxConfig+0x278>
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	2b0b      	cmp	r3, #11
 8007158:	d008      	beq.n	800716c <SX1276SetTxConfig+0x284>
 800715a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715c:	2b0c      	cmp	r3, #12
 800715e:	d005      	beq.n	800716c <SX1276SetTxConfig+0x284>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b08      	cmp	r3, #8
 8007164:	d107      	bne.n	8007176 <SX1276SetTxConfig+0x28e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8007166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007168:	2b0c      	cmp	r3, #12
 800716a:	d104      	bne.n	8007176 <SX1276SetTxConfig+0x28e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 800716c:	4b4e      	ldr	r3, [pc, #312]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 800716e:	224c      	movs	r2, #76	; 0x4c
 8007170:	2101      	movs	r1, #1
 8007172:	5499      	strb	r1, [r3, r2]
 8007174:	e003      	b.n	800717e <SX1276SetTxConfig+0x296>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8007176:	4b4c      	ldr	r3, [pc, #304]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 8007178:	224c      	movs	r2, #76	; 0x4c
 800717a:	2100      	movs	r1, #0
 800717c:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800717e:	4b4a      	ldr	r3, [pc, #296]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 8007180:	2253      	movs	r2, #83	; 0x53
 8007182:	5c9b      	ldrb	r3, [r3, r2]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d013      	beq.n	80071b0 <SX1276SetTxConfig+0x2c8>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8007188:	2044      	movs	r0, #68	; 0x44
 800718a:	f000 ff1b 	bl	8007fc4 <SX1276Read>
 800718e:	0003      	movs	r3, r0
 8007190:	001a      	movs	r2, r3
 8007192:	2380      	movs	r3, #128	; 0x80
 8007194:	425b      	negs	r3, r3
 8007196:	4313      	orrs	r3, r2
 8007198:	b2db      	uxtb	r3, r3
 800719a:	0019      	movs	r1, r3
 800719c:	2044      	movs	r0, #68	; 0x44
 800719e:	f000 fefd 	bl	8007f9c <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80071a2:	4b41      	ldr	r3, [pc, #260]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 80071a4:	2254      	movs	r2, #84	; 0x54
 80071a6:	5c9b      	ldrb	r3, [r3, r2]
 80071a8:	0019      	movs	r1, r3
 80071aa:	2024      	movs	r0, #36	; 0x24
 80071ac:	f000 fef6 	bl	8007f9c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80071b0:	201d      	movs	r0, #29
 80071b2:	f000 ff07 	bl	8007fc4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	2324      	movs	r3, #36	; 0x24
 80071c0:	2108      	movs	r1, #8
 80071c2:	468c      	mov	ip, r1
 80071c4:	44bc      	add	ip, r7
 80071c6:	4463      	add	r3, ip
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	18db      	adds	r3, r3, r3
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	4313      	orrs	r3, r2
 80071d0:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80071d2:	232c      	movs	r3, #44	; 0x2c
 80071d4:	2108      	movs	r1, #8
 80071d6:	468c      	mov	ip, r1
 80071d8:	44bc      	add	ip, r7
 80071da:	4463      	add	r3, ip
 80071dc:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80071de:	4313      	orrs	r3, r2
 80071e0:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80071e2:	0019      	movs	r1, r3
 80071e4:	201d      	movs	r0, #29
 80071e6:	f000 fed9 	bl	8007f9c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80071ea:	201e      	movs	r0, #30
 80071ec:	f000 feea 	bl	8007fc4 <SX1276Read>
 80071f0:	0003      	movs	r3, r0
 80071f2:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 80071f4:	230b      	movs	r3, #11
 80071f6:	4013      	ands	r3, r2
 80071f8:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80071fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	011b      	lsls	r3, r3, #4
 8007200:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8007202:	4313      	orrs	r3, r2
 8007204:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8007206:	2330      	movs	r3, #48	; 0x30
 8007208:	2108      	movs	r1, #8
 800720a:	468c      	mov	ip, r1
 800720c:	44bc      	add	ip, r7
 800720e:	4463      	add	r3, ip
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8007216:	4313      	orrs	r3, r2
 8007218:	b2db      	uxtb	r3, r3
 800721a:	0019      	movs	r1, r3
 800721c:	201e      	movs	r0, #30
 800721e:	f000 febd 	bl	8007f9c <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8007222:	2026      	movs	r0, #38	; 0x26
 8007224:	f000 fece 	bl	8007fc4 <SX1276Read>
 8007228:	0003      	movs	r3, r0
 800722a:	b25b      	sxtb	r3, r3
 800722c:	2208      	movs	r2, #8
 800722e:	4393      	bics	r3, r2
 8007230:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8007232:	4b1d      	ldr	r3, [pc, #116]	; (80072a8 <SX1276SetTxConfig+0x3c0>)
 8007234:	214c      	movs	r1, #76	; 0x4c
 8007236:	5c5b      	ldrb	r3, [r3, r1]
 8007238:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800723a:	b25b      	sxtb	r3, r3
 800723c:	4313      	orrs	r3, r2
 800723e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8007240:	b2db      	uxtb	r3, r3
 8007242:	0019      	movs	r1, r3
 8007244:	2026      	movs	r0, #38	; 0x26
 8007246:	f000 fea9 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800724a:	2428      	movs	r4, #40	; 0x28
 800724c:	2508      	movs	r5, #8
 800724e:	197b      	adds	r3, r7, r5
 8007250:	191b      	adds	r3, r3, r4
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	0a1b      	lsrs	r3, r3, #8
 8007256:	b29b      	uxth	r3, r3
 8007258:	b2db      	uxtb	r3, r3
 800725a:	0019      	movs	r1, r3
 800725c:	2020      	movs	r0, #32
 800725e:	f000 fe9d 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8007262:	197b      	adds	r3, r7, r5
 8007264:	191b      	adds	r3, r3, r4
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	0019      	movs	r1, r3
 800726c:	2021      	movs	r0, #33	; 0x21
 800726e:	f000 fe95 	bl	8007f9c <SX1276Write>
            if( datarate == 6 )
 8007272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007274:	2b06      	cmp	r3, #6
 8007276:	d11d      	bne.n	80072b4 <SX1276SetTxConfig+0x3cc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8007278:	2031      	movs	r0, #49	; 0x31
 800727a:	f000 fea3 	bl	8007fc4 <SX1276Read>
 800727e:	0003      	movs	r3, r0
 8007280:	b25b      	sxtb	r3, r3
 8007282:	2207      	movs	r2, #7
 8007284:	4393      	bics	r3, r2
 8007286:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8007288:	2205      	movs	r2, #5
 800728a:	4313      	orrs	r3, r2
 800728c:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800728e:	b2db      	uxtb	r3, r3
 8007290:	0019      	movs	r1, r3
 8007292:	2031      	movs	r0, #49	; 0x31
 8007294:	f000 fe82 	bl	8007f9c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8007298:	210c      	movs	r1, #12
 800729a:	2037      	movs	r0, #55	; 0x37
 800729c:	f000 fe7e 	bl	8007f9c <SX1276Write>
        break;
 80072a0:	e01c      	b.n	80072dc <SX1276SetTxConfig+0x3f4>
 80072a2:	46c0      	nop			; (mov r8, r8)
 80072a4:	20000520 	.word	0x20000520
 80072a8:	200015bc 	.word	0x200015bc
 80072ac:	404e8480 	.word	0x404e8480
 80072b0:	417e8480 	.word	0x417e8480
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80072b4:	2031      	movs	r0, #49	; 0x31
 80072b6:	f000 fe85 	bl	8007fc4 <SX1276Read>
 80072ba:	0003      	movs	r3, r0
 80072bc:	b25b      	sxtb	r3, r3
 80072be:	2207      	movs	r2, #7
 80072c0:	4393      	bics	r3, r2
 80072c2:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80072c4:	2203      	movs	r2, #3
 80072c6:	4313      	orrs	r3, r2
 80072c8:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	0019      	movs	r1, r3
 80072ce:	2031      	movs	r0, #49	; 0x31
 80072d0:	f000 fe64 	bl	8007f9c <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80072d4:	210a      	movs	r1, #10
 80072d6:	2037      	movs	r0, #55	; 0x37
 80072d8:	f000 fe60 	bl	8007f9c <SX1276Write>
        break;
 80072dc:	46c0      	nop			; (mov r8, r8)
}
 80072de:	46c0      	nop			; (mov r8, r8)
 80072e0:	46bd      	mov	sp, r7
 80072e2:	b005      	add	sp, #20
 80072e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072e6:	46c0      	nop			; (mov r8, r8)

080072e8 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 80072e8:	b5b0      	push	{r4, r5, r7, lr}
 80072ea:	b094      	sub	sp, #80	; 0x50
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	0002      	movs	r2, r0
 80072f0:	1dfb      	adds	r3, r7, #7
 80072f2:	701a      	strb	r2, [r3, #0]
 80072f4:	1dbb      	adds	r3, r7, #6
 80072f6:	1c0a      	adds	r2, r1, #0
 80072f8:	701a      	strb	r2, [r3, #0]
    uint32_t airTime = 0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 80072fe:	1dfb      	adds	r3, r7, #7
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <SX1276GetTimeOnAir+0x26>
 8007306:	2b01      	cmp	r3, #1
 8007308:	d100      	bne.n	800730c <SX1276GetTimeOnAir+0x24>
 800730a:	e086      	b.n	800741a <SX1276GetTimeOnAir+0x132>
 800730c:	e164      	b.n	80075d8 <SX1276GetTimeOnAir+0x2f0>
    {
    case MODEM_FSK:
        {
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 800730e:	4bb5      	ldr	r3, [pc, #724]	; (80075e4 <SX1276GetTimeOnAir+0x2fc>)
 8007310:	8c1b      	ldrh	r3, [r3, #32]
 8007312:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8007314:	2027      	movs	r0, #39	; 0x27
 8007316:	f000 fe55 	bl	8007fc4 <SX1276Read>
 800731a:	0003      	movs	r3, r0
 800731c:	001a      	movs	r2, r3
 800731e:	23f8      	movs	r3, #248	; 0xf8
 8007320:	439a      	bics	r2, r3
 8007322:	0013      	movs	r3, r2
 8007324:	3301      	adds	r3, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8007326:	18e3      	adds	r3, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8007328:	0018      	movs	r0, r3
 800732a:	f7fb fceb 	bl	8002d04 <__aeabi_i2d>
 800732e:	0004      	movs	r4, r0
 8007330:	000d      	movs	r5, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8007332:	4bac      	ldr	r3, [pc, #688]	; (80075e4 <SX1276GetTimeOnAir+0x2fc>)
 8007334:	2222      	movs	r2, #34	; 0x22
 8007336:	5c9b      	ldrb	r3, [r3, r2]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <SX1276GetTimeOnAir+0x5a>
 800733c:	2000      	movs	r0, #0
 800733e:	2100      	movs	r1, #0
 8007340:	e001      	b.n	8007346 <SX1276GetTimeOnAir+0x5e>
 8007342:	2000      	movs	r0, #0
 8007344:	49a8      	ldr	r1, [pc, #672]	; (80075e8 <SX1276GetTimeOnAir+0x300>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8007346:	0022      	movs	r2, r4
 8007348:	002b      	movs	r3, r5
 800734a:	f7f9 ffc5 	bl	80012d8 <__aeabi_dadd>
 800734e:	0003      	movs	r3, r0
 8007350:	000c      	movs	r4, r1
 8007352:	0025      	movs	r5, r4
 8007354:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8007356:	2030      	movs	r0, #48	; 0x30
 8007358:	f000 fe34 	bl	8007fc4 <SX1276Read>
 800735c:	0003      	movs	r3, r0
 800735e:	001a      	movs	r2, r3
 8007360:	23f9      	movs	r3, #249	; 0xf9
 8007362:	439a      	bics	r2, r3
 8007364:	1e13      	subs	r3, r2, #0
 8007366:	d002      	beq.n	800736e <SX1276GetTimeOnAir+0x86>
 8007368:	2000      	movs	r0, #0
 800736a:	499f      	ldr	r1, [pc, #636]	; (80075e8 <SX1276GetTimeOnAir+0x300>)
 800736c:	e001      	b.n	8007372 <SX1276GetTimeOnAir+0x8a>
 800736e:	2000      	movs	r0, #0
 8007370:	2100      	movs	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8007372:	0022      	movs	r2, r4
 8007374:	002b      	movs	r3, r5
 8007376:	f7f9 ffaf 	bl	80012d8 <__aeabi_dadd>
 800737a:	0003      	movs	r3, r0
 800737c:	000c      	movs	r4, r1
 800737e:	0025      	movs	r5, r4
 8007380:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8007382:	1dbb      	adds	r3, r7, #6
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	0018      	movs	r0, r3
 8007388:	f7fb fcbc 	bl	8002d04 <__aeabi_i2d>
 800738c:	0002      	movs	r2, r0
 800738e:	000b      	movs	r3, r1
 8007390:	0020      	movs	r0, r4
 8007392:	0029      	movs	r1, r5
 8007394:	f7f9 ffa0 	bl	80012d8 <__aeabi_dadd>
 8007398:	0003      	movs	r3, r0
 800739a:	000c      	movs	r4, r1
 800739c:	0025      	movs	r5, r4
 800739e:	001c      	movs	r4, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80073a0:	4b90      	ldr	r3, [pc, #576]	; (80075e4 <SX1276GetTimeOnAir+0x2fc>)
 80073a2:	2224      	movs	r2, #36	; 0x24
 80073a4:	5c9b      	ldrb	r3, [r3, r2]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <SX1276GetTimeOnAir+0xca>
 80073aa:	2000      	movs	r0, #0
 80073ac:	2180      	movs	r1, #128	; 0x80
 80073ae:	05c9      	lsls	r1, r1, #23
 80073b0:	e001      	b.n	80073b6 <SX1276GetTimeOnAir+0xce>
 80073b2:	2000      	movs	r0, #0
 80073b4:	2100      	movs	r1, #0
                                     pktLen +
 80073b6:	0022      	movs	r2, r4
 80073b8:	002b      	movs	r3, r5
 80073ba:	f7f9 ff8d 	bl	80012d8 <__aeabi_dadd>
 80073be:	0003      	movs	r3, r0
 80073c0:	000c      	movs	r4, r1
 80073c2:	0018      	movs	r0, r3
 80073c4:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80073c6:	2200      	movs	r2, #0
 80073c8:	4b88      	ldr	r3, [pc, #544]	; (80075ec <SX1276GetTimeOnAir+0x304>)
 80073ca:	f7fa feab 	bl	8002124 <__aeabi_dmul>
 80073ce:	0003      	movs	r3, r0
 80073d0:	000c      	movs	r4, r1
 80073d2:	0025      	movs	r5, r4
 80073d4:	001c      	movs	r4, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
 80073d6:	4b83      	ldr	r3, [pc, #524]	; (80075e4 <SX1276GetTimeOnAir+0x2fc>)
 80073d8:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80073da:	0018      	movs	r0, r3
 80073dc:	f7fb fccc 	bl	8002d78 <__aeabi_ui2d>
 80073e0:	0002      	movs	r2, r0
 80073e2:	000b      	movs	r3, r1
 80073e4:	0020      	movs	r0, r4
 80073e6:	0029      	movs	r1, r5
 80073e8:	f7fa fa92 	bl	8001910 <__aeabi_ddiv>
 80073ec:	0003      	movs	r3, r0
 80073ee:	000c      	movs	r4, r1
 80073f0:	0018      	movs	r0, r3
 80073f2:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80073f4:	2200      	movs	r2, #0
 80073f6:	4b7e      	ldr	r3, [pc, #504]	; (80075f0 <SX1276GetTimeOnAir+0x308>)
 80073f8:	f7fa fe94 	bl	8002124 <__aeabi_dmul>
 80073fc:	0003      	movs	r3, r0
 80073fe:	000c      	movs	r4, r1
 8007400:	0018      	movs	r0, r3
 8007402:	0021      	movs	r1, r4
 8007404:	f014 fe62 	bl	801c0cc <round>
 8007408:	0003      	movs	r3, r0
 800740a:	000c      	movs	r4, r1
 800740c:	0018      	movs	r0, r3
 800740e:	0021      	movs	r1, r4
 8007410:	f7f9 f8ee 	bl	80005f0 <__aeabi_d2uiz>
 8007414:	0003      	movs	r3, r0
 8007416:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 8007418:	e0de      	b.n	80075d8 <SX1276GetTimeOnAir+0x2f0>
    case MODEM_LORA:
        {
            double bw = 0.0;
 800741a:	2300      	movs	r3, #0
 800741c:	2400      	movs	r4, #0
 800741e:	643b      	str	r3, [r7, #64]	; 0x40
 8007420:	647c      	str	r4, [r7, #68]	; 0x44
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 8007422:	4b70      	ldr	r3, [pc, #448]	; (80075e4 <SX1276GetTimeOnAir+0x2fc>)
 8007424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007426:	2b08      	cmp	r3, #8
 8007428:	d008      	beq.n	800743c <SX1276GetTimeOnAir+0x154>
 800742a:	2b09      	cmp	r3, #9
 800742c:	d00b      	beq.n	8007446 <SX1276GetTimeOnAir+0x15e>
 800742e:	2b07      	cmp	r3, #7
 8007430:	d10e      	bne.n	8007450 <SX1276GetTimeOnAir+0x168>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 62500;
            //    break;
            case 7: // 125 kHz
                bw = 125000;
 8007432:	2300      	movs	r3, #0
 8007434:	4c6f      	ldr	r4, [pc, #444]	; (80075f4 <SX1276GetTimeOnAir+0x30c>)
 8007436:	643b      	str	r3, [r7, #64]	; 0x40
 8007438:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 800743a:	e009      	b.n	8007450 <SX1276GetTimeOnAir+0x168>
            case 8: // 250 kHz
                bw = 250000;
 800743c:	2300      	movs	r3, #0
 800743e:	4c6e      	ldr	r4, [pc, #440]	; (80075f8 <SX1276GetTimeOnAir+0x310>)
 8007440:	643b      	str	r3, [r7, #64]	; 0x40
 8007442:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8007444:	e004      	b.n	8007450 <SX1276GetTimeOnAir+0x168>
            case 9: // 500 kHz
                bw = 500000;
 8007446:	2300      	movs	r3, #0
 8007448:	4c6c      	ldr	r4, [pc, #432]	; (80075fc <SX1276GetTimeOnAir+0x314>)
 800744a:	643b      	str	r3, [r7, #64]	; 0x40
 800744c:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 800744e:	46c0      	nop			; (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 8007450:	4b64      	ldr	r3, [pc, #400]	; (80075e4 <SX1276GetTimeOnAir+0x2fc>)
 8007452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007454:	2201      	movs	r2, #1
 8007456:	409a      	lsls	r2, r3
 8007458:	0013      	movs	r3, r2
 800745a:	0018      	movs	r0, r3
 800745c:	f7fb fc52 	bl	8002d04 <__aeabi_i2d>
 8007460:	0003      	movs	r3, r0
 8007462:	000c      	movs	r4, r1
 8007464:	001a      	movs	r2, r3
 8007466:	0023      	movs	r3, r4
 8007468:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800746a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800746c:	f7fa fa50 	bl	8001910 <__aeabi_ddiv>
 8007470:	0003      	movs	r3, r0
 8007472:	000c      	movs	r4, r1
 8007474:	63bb      	str	r3, [r7, #56]	; 0x38
 8007476:	63fc      	str	r4, [r7, #60]	; 0x3c
            double ts = 1 / rs;
 8007478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800747a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800747c:	2000      	movs	r0, #0
 800747e:	495a      	ldr	r1, [pc, #360]	; (80075e8 <SX1276GetTimeOnAir+0x300>)
 8007480:	f7fa fa46 	bl	8001910 <__aeabi_ddiv>
 8007484:	0003      	movs	r3, r0
 8007486:	000c      	movs	r4, r1
 8007488:	633b      	str	r3, [r7, #48]	; 0x30
 800748a:	637c      	str	r4, [r7, #52]	; 0x34
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 800748c:	4b55      	ldr	r3, [pc, #340]	; (80075e4 <SX1276GetTimeOnAir+0x2fc>)
 800748e:	224e      	movs	r2, #78	; 0x4e
 8007490:	5a9b      	ldrh	r3, [r3, r2]
 8007492:	0018      	movs	r0, r3
 8007494:	f7fb fc36 	bl	8002d04 <__aeabi_i2d>
 8007498:	2200      	movs	r2, #0
 800749a:	4b59      	ldr	r3, [pc, #356]	; (8007600 <SX1276GetTimeOnAir+0x318>)
 800749c:	f7f9 ff1c 	bl	80012d8 <__aeabi_dadd>
 80074a0:	0003      	movs	r3, r0
 80074a2:	000c      	movs	r4, r1
 80074a4:	001a      	movs	r2, r3
 80074a6:	0023      	movs	r3, r4
 80074a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80074ac:	f7fa fe3a 	bl	8002124 <__aeabi_dmul>
 80074b0:	0003      	movs	r3, r0
 80074b2:	000c      	movs	r4, r1
 80074b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80074b6:	62fc      	str	r4, [r7, #44]	; 0x2c
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80074b8:	1dbb      	adds	r3, r7, #6
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	00db      	lsls	r3, r3, #3
 80074be:	001a      	movs	r2, r3
 80074c0:	4b48      	ldr	r3, [pc, #288]	; (80075e4 <SX1276GetTimeOnAir+0x2fc>)
 80074c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80074c8:	4a46      	ldr	r2, [pc, #280]	; (80075e4 <SX1276GetTimeOnAir+0x2fc>)
 80074ca:	2152      	movs	r1, #82	; 0x52
 80074cc:	5c52      	ldrb	r2, [r2, r1]
 80074ce:	0112      	lsls	r2, r2, #4
 80074d0:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80074d2:	4b44      	ldr	r3, [pc, #272]	; (80075e4 <SX1276GetTimeOnAir+0x2fc>)
 80074d4:	2150      	movs	r1, #80	; 0x50
 80074d6:	5c5b      	ldrb	r3, [r3, r1]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <SX1276GetTimeOnAir+0x1f8>
 80074dc:	2314      	movs	r3, #20
 80074de:	e000      	b.n	80074e2 <SX1276GetTimeOnAir+0x1fa>
 80074e0:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80074e6:	0018      	movs	r0, r3
 80074e8:	f7fb fc46 	bl	8002d78 <__aeabi_ui2d>
 80074ec:	0004      	movs	r4, r0
 80074ee:	000d      	movs	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 80074f0:	4b3c      	ldr	r3, [pc, #240]	; (80075e4 <SX1276GetTimeOnAir+0x2fc>)
 80074f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80074f4:	4b3b      	ldr	r3, [pc, #236]	; (80075e4 <SX1276GetTimeOnAir+0x2fc>)
 80074f6:	214c      	movs	r1, #76	; 0x4c
 80074f8:	5c5b      	ldrb	r3, [r3, r1]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <SX1276GetTimeOnAir+0x21a>
 80074fe:	2302      	movs	r3, #2
 8007500:	e000      	b.n	8007504 <SX1276GetTimeOnAir+0x21c>
 8007502:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	0018      	movs	r0, r3
 800750a:	f7fb fc35 	bl	8002d78 <__aeabi_ui2d>
 800750e:	0002      	movs	r2, r0
 8007510:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8007512:	0020      	movs	r0, r4
 8007514:	0029      	movs	r1, r5
 8007516:	f7fa f9fb 	bl	8001910 <__aeabi_ddiv>
 800751a:	0003      	movs	r3, r0
 800751c:	000c      	movs	r4, r1
 800751e:	0018      	movs	r0, r3
 8007520:	0021      	movs	r1, r4
 8007522:	f014 fccf 	bl	801bec4 <ceil>
 8007526:	0004      	movs	r4, r0
 8007528:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 800752a:	4b2e      	ldr	r3, [pc, #184]	; (80075e4 <SX1276GetTimeOnAir+0x2fc>)
 800752c:	224d      	movs	r2, #77	; 0x4d
 800752e:	5c9b      	ldrb	r3, [r3, r2]
 8007530:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8007532:	0018      	movs	r0, r3
 8007534:	f7fb fbe6 	bl	8002d04 <__aeabi_i2d>
 8007538:	0002      	movs	r2, r0
 800753a:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 800753c:	0020      	movs	r0, r4
 800753e:	0029      	movs	r1, r5
 8007540:	f7fa fdf0 	bl	8002124 <__aeabi_dmul>
 8007544:	0003      	movs	r3, r0
 8007546:	000c      	movs	r4, r1
 8007548:	623b      	str	r3, [r7, #32]
 800754a:	627c      	str	r4, [r7, #36]	; 0x24
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 800754c:	2200      	movs	r2, #0
 800754e:	2300      	movs	r3, #0
 8007550:	6a38      	ldr	r0, [r7, #32]
 8007552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007554:	f7f8 ff78 	bl	8000448 <__aeabi_dcmpgt>
 8007558:	1e03      	subs	r3, r0, #0
 800755a:	d008      	beq.n	800756e <SX1276GetTimeOnAir+0x286>
 800755c:	2200      	movs	r2, #0
 800755e:	4b23      	ldr	r3, [pc, #140]	; (80075ec <SX1276GetTimeOnAir+0x304>)
 8007560:	6a38      	ldr	r0, [r7, #32]
 8007562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007564:	f7f9 feb8 	bl	80012d8 <__aeabi_dadd>
 8007568:	0003      	movs	r3, r0
 800756a:	000c      	movs	r4, r1
 800756c:	e001      	b.n	8007572 <SX1276GetTimeOnAir+0x28a>
 800756e:	2300      	movs	r3, #0
 8007570:	4c1e      	ldr	r4, [pc, #120]	; (80075ec <SX1276GetTimeOnAir+0x304>)
 8007572:	61bb      	str	r3, [r7, #24]
 8007574:	61fc      	str	r4, [r7, #28]
            double tPayload = nPayload * ts;
 8007576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757a:	69b8      	ldr	r0, [r7, #24]
 800757c:	69f9      	ldr	r1, [r7, #28]
 800757e:	f7fa fdd1 	bl	8002124 <__aeabi_dmul>
 8007582:	0003      	movs	r3, r0
 8007584:	000c      	movs	r4, r1
 8007586:	613b      	str	r3, [r7, #16]
 8007588:	617c      	str	r4, [r7, #20]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007590:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007592:	f7f9 fea1 	bl	80012d8 <__aeabi_dadd>
 8007596:	0003      	movs	r3, r0
 8007598:	000c      	movs	r4, r1
 800759a:	60bb      	str	r3, [r7, #8]
 800759c:	60fc      	str	r4, [r7, #12]
            // return ms secs
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 800759e:	2200      	movs	r2, #0
 80075a0:	4b13      	ldr	r3, [pc, #76]	; (80075f0 <SX1276GetTimeOnAir+0x308>)
 80075a2:	68b8      	ldr	r0, [r7, #8]
 80075a4:	68f9      	ldr	r1, [r7, #12]
 80075a6:	f7fa fdbd 	bl	8002124 <__aeabi_dmul>
 80075aa:	0003      	movs	r3, r0
 80075ac:	000c      	movs	r4, r1
 80075ae:	0018      	movs	r0, r3
 80075b0:	0021      	movs	r1, r4
 80075b2:	4a14      	ldr	r2, [pc, #80]	; (8007604 <SX1276GetTimeOnAir+0x31c>)
 80075b4:	4b14      	ldr	r3, [pc, #80]	; (8007608 <SX1276GetTimeOnAir+0x320>)
 80075b6:	f7f9 fe8f 	bl	80012d8 <__aeabi_dadd>
 80075ba:	0003      	movs	r3, r0
 80075bc:	000c      	movs	r4, r1
 80075be:	0018      	movs	r0, r3
 80075c0:	0021      	movs	r1, r4
 80075c2:	f014 fd01 	bl	801bfc8 <floor>
 80075c6:	0003      	movs	r3, r0
 80075c8:	000c      	movs	r4, r1
 80075ca:	0018      	movs	r0, r3
 80075cc:	0021      	movs	r1, r4
 80075ce:	f7f9 f80f 	bl	80005f0 <__aeabi_d2uiz>
 80075d2:	0003      	movs	r3, r0
 80075d4:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 80075d6:	46c0      	nop			; (mov r8, r8)
    }
    return airTime;
 80075d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80075da:	0018      	movs	r0, r3
 80075dc:	46bd      	mov	sp, r7
 80075de:	b014      	add	sp, #80	; 0x50
 80075e0:	bdb0      	pop	{r4, r5, r7, pc}
 80075e2:	46c0      	nop			; (mov r8, r8)
 80075e4:	200015bc 	.word	0x200015bc
 80075e8:	3ff00000 	.word	0x3ff00000
 80075ec:	40200000 	.word	0x40200000
 80075f0:	408f4000 	.word	0x408f4000
 80075f4:	40fe8480 	.word	0x40fe8480
 80075f8:	410e8480 	.word	0x410e8480
 80075fc:	411e8480 	.word	0x411e8480
 8007600:	40110000 	.word	0x40110000
 8007604:	d916872b 	.word	0xd916872b
 8007608:	3feff7ce 	.word	0x3feff7ce

0800760c <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	000a      	movs	r2, r1
 8007616:	1cfb      	adds	r3, r7, #3
 8007618:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 800761e:	4b59      	ldr	r3, [pc, #356]	; (8007784 <SX1276Send+0x178>)
 8007620:	795b      	ldrb	r3, [r3, #5]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <SX1276Send+0x20>
 8007626:	2b01      	cmp	r3, #1
 8007628:	d04c      	beq.n	80076c4 <SX1276Send+0xb8>
 800762a:	e0a2      	b.n	8007772 <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800762c:	4b55      	ldr	r3, [pc, #340]	; (8007784 <SX1276Send+0x178>)
 800762e:	2200      	movs	r2, #0
 8007630:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8007632:	1cfb      	adds	r3, r7, #3
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	b29a      	uxth	r2, r3
 8007638:	4b52      	ldr	r3, [pc, #328]	; (8007784 <SX1276Send+0x178>)
 800763a:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 800763c:	4b51      	ldr	r3, [pc, #324]	; (8007784 <SX1276Send+0x178>)
 800763e:	2222      	movs	r2, #34	; 0x22
 8007640:	5c9b      	ldrb	r3, [r3, r2]
 8007642:	2201      	movs	r2, #1
 8007644:	4053      	eors	r3, r2
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d005      	beq.n	8007658 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 800764c:	1cfb      	adds	r3, r7, #3
 800764e:	2101      	movs	r1, #1
 8007650:	0018      	movs	r0, r3
 8007652:	f000 fd51 	bl	80080f8 <SX1276WriteFifo>
 8007656:	e005      	b.n	8007664 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8007658:	1cfb      	adds	r3, r7, #3
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	0019      	movs	r1, r3
 800765e:	2032      	movs	r0, #50	; 0x32
 8007660:	f000 fc9c 	bl	8007f9c <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8007664:	1cfb      	adds	r3, r7, #3
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d009      	beq.n	8007680 <SX1276Send+0x74>
 800766c:	1cfb      	adds	r3, r7, #3
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	2b40      	cmp	r3, #64	; 0x40
 8007672:	d805      	bhi.n	8007680 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8007674:	1cfb      	adds	r3, r7, #3
 8007676:	7819      	ldrb	r1, [r3, #0]
 8007678:	4b42      	ldr	r3, [pc, #264]	; (8007784 <SX1276Send+0x178>)
 800767a:	223f      	movs	r2, #63	; 0x3f
 800767c:	5499      	strb	r1, [r3, r2]
 800767e:	e00b      	b.n	8007698 <SX1276Send+0x8c>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 8007680:	1cfb      	adds	r3, r7, #3
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	b29a      	uxth	r2, r3
 8007686:	6879      	ldr	r1, [r7, #4]
 8007688:	4b3f      	ldr	r3, [pc, #252]	; (8007788 <SX1276Send+0x17c>)
 800768a:	0018      	movs	r0, r3
 800768c:	f013 ff6e 	bl	801b56c <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8007690:	4b3c      	ldr	r3, [pc, #240]	; (8007784 <SX1276Send+0x178>)
 8007692:	223f      	movs	r2, #63	; 0x3f
 8007694:	2120      	movs	r1, #32
 8007696:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8007698:	4b3a      	ldr	r3, [pc, #232]	; (8007784 <SX1276Send+0x178>)
 800769a:	223f      	movs	r2, #63	; 0x3f
 800769c:	5c9a      	ldrb	r2, [r3, r2]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	0011      	movs	r1, r2
 80076a2:	0018      	movs	r0, r3
 80076a4:	f000 fd28 	bl	80080f8 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80076a8:	4b36      	ldr	r3, [pc, #216]	; (8007784 <SX1276Send+0x178>)
 80076aa:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80076ac:	4b35      	ldr	r3, [pc, #212]	; (8007784 <SX1276Send+0x178>)
 80076ae:	213f      	movs	r1, #63	; 0x3f
 80076b0:	5c5b      	ldrb	r3, [r3, r1]
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	18d3      	adds	r3, r2, r3
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	4b32      	ldr	r3, [pc, #200]	; (8007784 <SX1276Send+0x178>)
 80076ba:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80076bc:	4b31      	ldr	r3, [pc, #196]	; (8007784 <SX1276Send+0x178>)
 80076be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80076c2:	e056      	b.n	8007772 <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80076c4:	4b2f      	ldr	r3, [pc, #188]	; (8007784 <SX1276Send+0x178>)
 80076c6:	2255      	movs	r2, #85	; 0x55
 80076c8:	5c9b      	ldrb	r3, [r3, r2]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d011      	beq.n	80076f2 <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80076ce:	2033      	movs	r0, #51	; 0x33
 80076d0:	f000 fc78 	bl	8007fc4 <SX1276Read>
 80076d4:	0003      	movs	r3, r0
 80076d6:	001a      	movs	r2, r3
 80076d8:	2341      	movs	r3, #65	; 0x41
 80076da:	439a      	bics	r2, r3
 80076dc:	0013      	movs	r3, r2
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	0019      	movs	r1, r3
 80076e2:	2033      	movs	r0, #51	; 0x33
 80076e4:	f000 fc5a 	bl	8007f9c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80076e8:	2119      	movs	r1, #25
 80076ea:	203b      	movs	r0, #59	; 0x3b
 80076ec:	f000 fc56 	bl	8007f9c <SX1276Write>
 80076f0:	e013      	b.n	800771a <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80076f2:	2033      	movs	r0, #51	; 0x33
 80076f4:	f000 fc66 	bl	8007fc4 <SX1276Read>
 80076f8:	0003      	movs	r3, r0
 80076fa:	b25b      	sxtb	r3, r3
 80076fc:	2241      	movs	r2, #65	; 0x41
 80076fe:	4393      	bics	r3, r2
 8007700:	b25b      	sxtb	r3, r3
 8007702:	2201      	movs	r2, #1
 8007704:	4313      	orrs	r3, r2
 8007706:	b25b      	sxtb	r3, r3
 8007708:	b2db      	uxtb	r3, r3
 800770a:	0019      	movs	r1, r3
 800770c:	2033      	movs	r0, #51	; 0x33
 800770e:	f000 fc45 	bl	8007f9c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8007712:	211d      	movs	r1, #29
 8007714:	203b      	movs	r0, #59	; 0x3b
 8007716:	f000 fc41 	bl	8007f9c <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 800771a:	1cfb      	adds	r3, r7, #3
 800771c:	7819      	ldrb	r1, [r3, #0]
 800771e:	4b19      	ldr	r3, [pc, #100]	; (8007784 <SX1276Send+0x178>)
 8007720:	2264      	movs	r2, #100	; 0x64
 8007722:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8007724:	1cfb      	adds	r3, r7, #3
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	0019      	movs	r1, r3
 800772a:	2022      	movs	r0, #34	; 0x22
 800772c:	f000 fc36 	bl	8007f9c <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8007730:	2100      	movs	r1, #0
 8007732:	200e      	movs	r0, #14
 8007734:	f000 fc32 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8007738:	2100      	movs	r1, #0
 800773a:	200d      	movs	r0, #13
 800773c:	f000 fc2e 	bl	8007f9c <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8007740:	2001      	movs	r0, #1
 8007742:	f000 fc3f 	bl	8007fc4 <SX1276Read>
 8007746:	0003      	movs	r3, r0
 8007748:	001a      	movs	r2, r3
 800774a:	23f8      	movs	r3, #248	; 0xf8
 800774c:	439a      	bics	r2, r3
 800774e:	1e13      	subs	r3, r2, #0
 8007750:	d104      	bne.n	800775c <SX1276Send+0x150>
            {
                SX1276SetStby( );
 8007752:	f000 f841 	bl	80077d8 <SX1276SetStby>
                DelayMs( 1 );
 8007756:	2001      	movs	r0, #1
 8007758:	f7fd fc70 	bl	800503c <HAL_Delay>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 800775c:	1cfb      	adds	r3, r7, #3
 800775e:	781a      	ldrb	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	0011      	movs	r1, r2
 8007764:	0018      	movs	r0, r3
 8007766:	f000 fcc7 	bl	80080f8 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800776a:	4b06      	ldr	r3, [pc, #24]	; (8007784 <SX1276Send+0x178>)
 800776c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800776e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8007770:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	0018      	movs	r0, r3
 8007776:	f000 f9dd 	bl	8007b34 <SX1276SetTx>
}
 800777a:	46c0      	nop			; (mov r8, r8)
 800777c:	46bd      	mov	sp, r7
 800777e:	b004      	add	sp, #16
 8007780:	bd80      	pop	{r7, pc}
 8007782:	46c0      	nop			; (mov r8, r8)
 8007784:	200015bc 	.word	0x200015bc
 8007788:	20000420 	.word	0x20000420

0800778c <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8007790:	4b0c      	ldr	r3, [pc, #48]	; (80077c4 <SX1276SetSleep+0x38>)
 8007792:	0018      	movs	r0, r3
 8007794:	f013 fc72 	bl	801b07c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8007798:	4b0b      	ldr	r3, [pc, #44]	; (80077c8 <SX1276SetSleep+0x3c>)
 800779a:	0018      	movs	r0, r3
 800779c:	f013 fc6e 	bl	801b07c <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80077a0:	4b0a      	ldr	r3, [pc, #40]	; (80077cc <SX1276SetSleep+0x40>)
 80077a2:	0018      	movs	r0, r3
 80077a4:	f013 fc6a 	bl	801b07c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80077a8:	2000      	movs	r0, #0
 80077aa:	f000 fb4d 	bl	8007e48 <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    LoRaBoardCallbacks->SX1276BoardSetXO( RESET );
 80077ae:	4b08      	ldr	r3, [pc, #32]	; (80077d0 <SX1276SetSleep+0x44>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2000      	movs	r0, #0
 80077b6:	4798      	blx	r3

    SX1276.Settings.State = RF_IDLE;
 80077b8:	4b06      	ldr	r3, [pc, #24]	; (80077d4 <SX1276SetSleep+0x48>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	711a      	strb	r2, [r3, #4]
}
 80077be:	46c0      	nop			; (mov r8, r8)
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	20001624 	.word	0x20001624
 80077c8:	2000158c 	.word	0x2000158c
 80077cc:	200015a4 	.word	0x200015a4
 80077d0:	20000520 	.word	0x20000520
 80077d4:	200015bc 	.word	0x200015bc

080077d8 <SX1276SetStby>:

void SX1276SetStby( void )
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80077dc:	4b0a      	ldr	r3, [pc, #40]	; (8007808 <SX1276SetStby+0x30>)
 80077de:	0018      	movs	r0, r3
 80077e0:	f013 fc4c 	bl	801b07c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80077e4:	4b09      	ldr	r3, [pc, #36]	; (800780c <SX1276SetStby+0x34>)
 80077e6:	0018      	movs	r0, r3
 80077e8:	f013 fc48 	bl	801b07c <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80077ec:	4b08      	ldr	r3, [pc, #32]	; (8007810 <SX1276SetStby+0x38>)
 80077ee:	0018      	movs	r0, r3
 80077f0:	f013 fc44 	bl	801b07c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80077f4:	2001      	movs	r0, #1
 80077f6:	f000 fb27 	bl	8007e48 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80077fa:	4b06      	ldr	r3, [pc, #24]	; (8007814 <SX1276SetStby+0x3c>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	711a      	strb	r2, [r3, #4]
}
 8007800:	46c0      	nop			; (mov r8, r8)
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	46c0      	nop			; (mov r8, r8)
 8007808:	20001624 	.word	0x20001624
 800780c:	2000158c 	.word	0x2000158c
 8007810:	200015a4 	.word	0x200015a4
 8007814:	200015bc 	.word	0x200015bc

08007818 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8007820:	230f      	movs	r3, #15
 8007822:	18fb      	adds	r3, r7, r3
 8007824:	2200      	movs	r2, #0
 8007826:	701a      	strb	r2, [r3, #0]
    TimerStop( &TxTimeoutTimer );
 8007828:	4bb6      	ldr	r3, [pc, #728]	; (8007b04 <SX1276SetRx+0x2ec>)
 800782a:	0018      	movs	r0, r3
 800782c:	f013 fc26 	bl	801b07c <TimerStop>

    switch( SX1276.Settings.Modem )
 8007830:	4bb5      	ldr	r3, [pc, #724]	; (8007b08 <SX1276SetRx+0x2f0>)
 8007832:	795b      	ldrb	r3, [r3, #5]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <SX1276SetRx+0x26>
 8007838:	2b01      	cmp	r3, #1
 800783a:	d041      	beq.n	80078c0 <SX1276SetRx+0xa8>
 800783c:	e128      	b.n	8007a90 <SX1276SetRx+0x278>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800783e:	230f      	movs	r3, #15
 8007840:	18fb      	adds	r3, r7, r3
 8007842:	4ab1      	ldr	r2, [pc, #708]	; (8007b08 <SX1276SetRx+0x2f0>)
 8007844:	2126      	movs	r1, #38	; 0x26
 8007846:	5c52      	ldrb	r2, [r2, r1]
 8007848:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800784a:	2040      	movs	r0, #64	; 0x40
 800784c:	f000 fbba 	bl	8007fc4 <SX1276Read>
 8007850:	0003      	movs	r3, r0
 8007852:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8007854:	2203      	movs	r2, #3
 8007856:	4013      	ands	r3, r2
 8007858:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 800785a:	220c      	movs	r2, #12
 800785c:	4313      	orrs	r3, r2
 800785e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8007860:	b2db      	uxtb	r3, r3
 8007862:	0019      	movs	r1, r3
 8007864:	2040      	movs	r0, #64	; 0x40
 8007866:	f000 fb99 	bl	8007f9c <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800786a:	2041      	movs	r0, #65	; 0x41
 800786c:	f000 fbaa 	bl	8007fc4 <SX1276Read>
 8007870:	0003      	movs	r3, r0
 8007872:	001a      	movs	r2, r3
 8007874:	233f      	movs	r3, #63	; 0x3f
 8007876:	425b      	negs	r3, r3
 8007878:	4313      	orrs	r3, r2
 800787a:	b2db      	uxtb	r3, r3
 800787c:	0019      	movs	r1, r3
 800787e:	2041      	movs	r0, #65	; 0x41
 8007880:	f000 fb8c 	bl	8007f9c <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8007884:	2035      	movs	r0, #53	; 0x35
 8007886:	f000 fb9d 	bl	8007fc4 <SX1276Read>
 800788a:	0003      	movs	r3, r0
 800788c:	001a      	movs	r2, r3
 800788e:	233f      	movs	r3, #63	; 0x3f
 8007890:	4013      	ands	r3, r2
 8007892:	b2d9      	uxtb	r1, r3
 8007894:	4b9c      	ldr	r3, [pc, #624]	; (8007b08 <SX1276SetRx+0x2f0>)
 8007896:	223e      	movs	r2, #62	; 0x3e
 8007898:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800789a:	211e      	movs	r1, #30
 800789c:	200d      	movs	r0, #13
 800789e:	f000 fb7d 	bl	8007f9c <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80078a2:	4b99      	ldr	r3, [pc, #612]	; (8007b08 <SX1276SetRx+0x2f0>)
 80078a4:	2230      	movs	r2, #48	; 0x30
 80078a6:	2100      	movs	r1, #0
 80078a8:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80078aa:	4b97      	ldr	r3, [pc, #604]	; (8007b08 <SX1276SetRx+0x2f0>)
 80078ac:	2231      	movs	r2, #49	; 0x31
 80078ae:	2100      	movs	r1, #0
 80078b0:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80078b2:	4b95      	ldr	r3, [pc, #596]	; (8007b08 <SX1276SetRx+0x2f0>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80078b8:	4b93      	ldr	r3, [pc, #588]	; (8007b08 <SX1276SetRx+0x2f0>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 80078be:	e0e7      	b.n	8007a90 <SX1276SetRx+0x278>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80078c0:	4b91      	ldr	r3, [pc, #580]	; (8007b08 <SX1276SetRx+0x2f0>)
 80078c2:	2255      	movs	r2, #85	; 0x55
 80078c4:	5c9b      	ldrb	r3, [r3, r2]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d010      	beq.n	80078ec <SX1276SetRx+0xd4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80078ca:	2033      	movs	r0, #51	; 0x33
 80078cc:	f000 fb7a 	bl	8007fc4 <SX1276Read>
 80078d0:	0003      	movs	r3, r0
 80078d2:	001a      	movs	r2, r3
 80078d4:	2341      	movs	r3, #65	; 0x41
 80078d6:	4313      	orrs	r3, r2
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	0019      	movs	r1, r3
 80078dc:	2033      	movs	r0, #51	; 0x33
 80078de:	f000 fb5d 	bl	8007f9c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80078e2:	2119      	movs	r1, #25
 80078e4:	203b      	movs	r0, #59	; 0x3b
 80078e6:	f000 fb59 	bl	8007f9c <SX1276Write>
 80078ea:	e013      	b.n	8007914 <SX1276SetRx+0xfc>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80078ec:	2033      	movs	r0, #51	; 0x33
 80078ee:	f000 fb69 	bl	8007fc4 <SX1276Read>
 80078f2:	0003      	movs	r3, r0
 80078f4:	b25b      	sxtb	r3, r3
 80078f6:	2241      	movs	r2, #65	; 0x41
 80078f8:	4393      	bics	r3, r2
 80078fa:	b25b      	sxtb	r3, r3
 80078fc:	2201      	movs	r2, #1
 80078fe:	4313      	orrs	r3, r2
 8007900:	b25b      	sxtb	r3, r3
 8007902:	b2db      	uxtb	r3, r3
 8007904:	0019      	movs	r1, r3
 8007906:	2033      	movs	r0, #51	; 0x33
 8007908:	f000 fb48 	bl	8007f9c <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800790c:	211d      	movs	r1, #29
 800790e:	203b      	movs	r0, #59	; 0x3b
 8007910:	f000 fb44 	bl	8007f9c <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8007914:	4b7c      	ldr	r3, [pc, #496]	; (8007b08 <SX1276SetRx+0x2f0>)
 8007916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007918:	2b08      	cmp	r3, #8
 800791a:	d900      	bls.n	800791e <SX1276SetRx+0x106>
 800791c:	e076      	b.n	8007a0c <SX1276SetRx+0x1f4>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800791e:	2031      	movs	r0, #49	; 0x31
 8007920:	f000 fb50 	bl	8007fc4 <SX1276Read>
 8007924:	0003      	movs	r3, r0
 8007926:	001a      	movs	r2, r3
 8007928:	237f      	movs	r3, #127	; 0x7f
 800792a:	4013      	ands	r3, r2
 800792c:	b2db      	uxtb	r3, r3
 800792e:	0019      	movs	r1, r3
 8007930:	2031      	movs	r0, #49	; 0x31
 8007932:	f000 fb33 	bl	8007f9c <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8007936:	2100      	movs	r1, #0
 8007938:	2030      	movs	r0, #48	; 0x30
 800793a:	f000 fb2f 	bl	8007f9c <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800793e:	4b72      	ldr	r3, [pc, #456]	; (8007b08 <SX1276SetRx+0x2f0>)
 8007940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007942:	2b08      	cmp	r3, #8
 8007944:	d86f      	bhi.n	8007a26 <SX1276SetRx+0x20e>
 8007946:	009a      	lsls	r2, r3, #2
 8007948:	4b70      	ldr	r3, [pc, #448]	; (8007b0c <SX1276SetRx+0x2f4>)
 800794a:	18d3      	adds	r3, r2, r3
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8007950:	2148      	movs	r1, #72	; 0x48
 8007952:	202f      	movs	r0, #47	; 0x2f
 8007954:	f000 fb22 	bl	8007f9c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8007958:	4b6b      	ldr	r3, [pc, #428]	; (8007b08 <SX1276SetRx+0x2f0>)
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	4a6c      	ldr	r2, [pc, #432]	; (8007b10 <SX1276SetRx+0x2f8>)
 800795e:	4694      	mov	ip, r2
 8007960:	4463      	add	r3, ip
 8007962:	0018      	movs	r0, r3
 8007964:	f7fe fe9a 	bl	800669c <SX1276SetChannel>
                    break;
 8007968:	e05d      	b.n	8007a26 <SX1276SetRx+0x20e>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800796a:	2144      	movs	r1, #68	; 0x44
 800796c:	202f      	movs	r0, #47	; 0x2f
 800796e:	f000 fb15 	bl	8007f9c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8007972:	4b65      	ldr	r3, [pc, #404]	; (8007b08 <SX1276SetRx+0x2f0>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	4a67      	ldr	r2, [pc, #412]	; (8007b14 <SX1276SetRx+0x2fc>)
 8007978:	4694      	mov	ip, r2
 800797a:	4463      	add	r3, ip
 800797c:	0018      	movs	r0, r3
 800797e:	f7fe fe8d 	bl	800669c <SX1276SetChannel>
                    break;
 8007982:	e050      	b.n	8007a26 <SX1276SetRx+0x20e>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8007984:	2144      	movs	r1, #68	; 0x44
 8007986:	202f      	movs	r0, #47	; 0x2f
 8007988:	f000 fb08 	bl	8007f9c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 800798c:	4b5e      	ldr	r3, [pc, #376]	; (8007b08 <SX1276SetRx+0x2f0>)
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	4a61      	ldr	r2, [pc, #388]	; (8007b18 <SX1276SetRx+0x300>)
 8007992:	4694      	mov	ip, r2
 8007994:	4463      	add	r3, ip
 8007996:	0018      	movs	r0, r3
 8007998:	f7fe fe80 	bl	800669c <SX1276SetChannel>
                    break;
 800799c:	e043      	b.n	8007a26 <SX1276SetRx+0x20e>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800799e:	2144      	movs	r1, #68	; 0x44
 80079a0:	202f      	movs	r0, #47	; 0x2f
 80079a2:	f000 fafb 	bl	8007f9c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 80079a6:	4b58      	ldr	r3, [pc, #352]	; (8007b08 <SX1276SetRx+0x2f0>)
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	4a5c      	ldr	r2, [pc, #368]	; (8007b1c <SX1276SetRx+0x304>)
 80079ac:	4694      	mov	ip, r2
 80079ae:	4463      	add	r3, ip
 80079b0:	0018      	movs	r0, r3
 80079b2:	f7fe fe73 	bl	800669c <SX1276SetChannel>
                    break;
 80079b6:	e036      	b.n	8007a26 <SX1276SetRx+0x20e>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80079b8:	2144      	movs	r1, #68	; 0x44
 80079ba:	202f      	movs	r0, #47	; 0x2f
 80079bc:	f000 faee 	bl	8007f9c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 80079c0:	4b51      	ldr	r3, [pc, #324]	; (8007b08 <SX1276SetRx+0x2f0>)
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	4a56      	ldr	r2, [pc, #344]	; (8007b20 <SX1276SetRx+0x308>)
 80079c6:	4694      	mov	ip, r2
 80079c8:	4463      	add	r3, ip
 80079ca:	0018      	movs	r0, r3
 80079cc:	f7fe fe66 	bl	800669c <SX1276SetChannel>
                    break;
 80079d0:	e029      	b.n	8007a26 <SX1276SetRx+0x20e>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80079d2:	2144      	movs	r1, #68	; 0x44
 80079d4:	202f      	movs	r0, #47	; 0x2f
 80079d6:	f000 fae1 	bl	8007f9c <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80079da:	4b4b      	ldr	r3, [pc, #300]	; (8007b08 <SX1276SetRx+0x2f0>)
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	4a51      	ldr	r2, [pc, #324]	; (8007b24 <SX1276SetRx+0x30c>)
 80079e0:	4694      	mov	ip, r2
 80079e2:	4463      	add	r3, ip
 80079e4:	0018      	movs	r0, r3
 80079e6:	f7fe fe59 	bl	800669c <SX1276SetChannel>
                    break;
 80079ea:	e01c      	b.n	8007a26 <SX1276SetRx+0x20e>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80079ec:	2140      	movs	r1, #64	; 0x40
 80079ee:	202f      	movs	r0, #47	; 0x2f
 80079f0:	f000 fad4 	bl	8007f9c <SX1276Write>
                    break;
 80079f4:	e017      	b.n	8007a26 <SX1276SetRx+0x20e>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80079f6:	2140      	movs	r1, #64	; 0x40
 80079f8:	202f      	movs	r0, #47	; 0x2f
 80079fa:	f000 facf 	bl	8007f9c <SX1276Write>
                    break;
 80079fe:	e012      	b.n	8007a26 <SX1276SetRx+0x20e>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8007a00:	2140      	movs	r1, #64	; 0x40
 8007a02:	202f      	movs	r0, #47	; 0x2f
 8007a04:	f000 faca 	bl	8007f9c <SX1276Write>
                    break;
 8007a08:	46c0      	nop			; (mov r8, r8)
 8007a0a:	e00c      	b.n	8007a26 <SX1276SetRx+0x20e>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8007a0c:	2031      	movs	r0, #49	; 0x31
 8007a0e:	f000 fad9 	bl	8007fc4 <SX1276Read>
 8007a12:	0003      	movs	r3, r0
 8007a14:	001a      	movs	r2, r3
 8007a16:	2380      	movs	r3, #128	; 0x80
 8007a18:	425b      	negs	r3, r3
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	0019      	movs	r1, r3
 8007a20:	2031      	movs	r0, #49	; 0x31
 8007a22:	f000 fabb 	bl	8007f9c <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8007a26:	230f      	movs	r3, #15
 8007a28:	18fb      	adds	r3, r7, r3
 8007a2a:	4a37      	ldr	r2, [pc, #220]	; (8007b08 <SX1276SetRx+0x2f0>)
 8007a2c:	2156      	movs	r1, #86	; 0x56
 8007a2e:	5c52      	ldrb	r2, [r2, r1]
 8007a30:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007a32:	4b35      	ldr	r3, [pc, #212]	; (8007b08 <SX1276SetRx+0x2f0>)
 8007a34:	2253      	movs	r2, #83	; 0x53
 8007a36:	5c9b      	ldrb	r3, [r3, r2]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d010      	beq.n	8007a5e <SX1276SetRx+0x246>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8007a3c:	211d      	movs	r1, #29
 8007a3e:	2011      	movs	r0, #17
 8007a40:	f000 faac 	bl	8007f9c <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8007a44:	2040      	movs	r0, #64	; 0x40
 8007a46:	f000 fabd 	bl	8007fc4 <SX1276Read>
 8007a4a:	0003      	movs	r3, r0
 8007a4c:	001a      	movs	r2, r3
 8007a4e:	2333      	movs	r3, #51	; 0x33
 8007a50:	4013      	ands	r3, r2
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	0019      	movs	r1, r3
 8007a56:	2040      	movs	r0, #64	; 0x40
 8007a58:	f000 faa0 	bl	8007f9c <SX1276Write>
 8007a5c:	e00f      	b.n	8007a7e <SX1276SetRx+0x266>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8007a5e:	211f      	movs	r1, #31
 8007a60:	2011      	movs	r0, #17
 8007a62:	f000 fa9b 	bl	8007f9c <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8007a66:	2040      	movs	r0, #64	; 0x40
 8007a68:	f000 faac 	bl	8007fc4 <SX1276Read>
 8007a6c:	0003      	movs	r3, r0
 8007a6e:	001a      	movs	r2, r3
 8007a70:	233f      	movs	r3, #63	; 0x3f
 8007a72:	4013      	ands	r3, r2
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	0019      	movs	r1, r3
 8007a78:	2040      	movs	r0, #64	; 0x40
 8007a7a:	f000 fa8f 	bl	8007f9c <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8007a7e:	2100      	movs	r1, #0
 8007a80:	200f      	movs	r0, #15
 8007a82:	f000 fa8b 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8007a86:	2100      	movs	r1, #0
 8007a88:	200d      	movs	r0, #13
 8007a8a:	f000 fa87 	bl	8007f9c <SX1276Write>
        }
        break;
 8007a8e:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8007a90:	2380      	movs	r3, #128	; 0x80
 8007a92:	005a      	lsls	r2, r3, #1
 8007a94:	4b24      	ldr	r3, [pc, #144]	; (8007b28 <SX1276SetRx+0x310>)
 8007a96:	2100      	movs	r1, #0
 8007a98:	0018      	movs	r0, r3
 8007a9a:	f013 fdeb 	bl	801b674 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 8007a9e:	4b1a      	ldr	r3, [pc, #104]	; (8007b08 <SX1276SetRx+0x2f0>)
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d009      	beq.n	8007abe <SX1276SetRx+0x2a6>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	4b1f      	ldr	r3, [pc, #124]	; (8007b2c <SX1276SetRx+0x314>)
 8007aae:	0011      	movs	r1, r2
 8007ab0:	0018      	movs	r0, r3
 8007ab2:	f013 fb5d 	bl	801b170 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8007ab6:	4b1d      	ldr	r3, [pc, #116]	; (8007b2c <SX1276SetRx+0x314>)
 8007ab8:	0018      	movs	r0, r3
 8007aba:	f013 fa07 	bl	801aecc <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8007abe:	4b12      	ldr	r3, [pc, #72]	; (8007b08 <SX1276SetRx+0x2f0>)
 8007ac0:	795b      	ldrb	r3, [r3, #5]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10e      	bne.n	8007ae4 <SX1276SetRx+0x2cc>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8007ac6:	2005      	movs	r0, #5
 8007ac8:	f000 f9be 	bl	8007e48 <SX1276SetOpMode>

        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8007acc:	4b0e      	ldr	r3, [pc, #56]	; (8007b08 <SX1276SetRx+0x2f0>)
 8007ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad0:	4b17      	ldr	r3, [pc, #92]	; (8007b30 <SX1276SetRx+0x318>)
 8007ad2:	0011      	movs	r1, r2
 8007ad4:	0018      	movs	r0, r3
 8007ad6:	f013 fb4b 	bl	801b170 <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 8007ada:	4b15      	ldr	r3, [pc, #84]	; (8007b30 <SX1276SetRx+0x318>)
 8007adc:	0018      	movs	r0, r3
 8007ade:	f013 f9f5 	bl	801aecc <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8007ae2:	e00b      	b.n	8007afc <SX1276SetRx+0x2e4>
        if( rxContinuous == true )
 8007ae4:	230f      	movs	r3, #15
 8007ae6:	18fb      	adds	r3, r7, r3
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <SX1276SetRx+0x2de>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8007aee:	2005      	movs	r0, #5
 8007af0:	f000 f9aa 	bl	8007e48 <SX1276SetOpMode>
}
 8007af4:	e002      	b.n	8007afc <SX1276SetRx+0x2e4>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8007af6:	2006      	movs	r0, #6
 8007af8:	f000 f9a6 	bl	8007e48 <SX1276SetOpMode>
}
 8007afc:	46c0      	nop			; (mov r8, r8)
 8007afe:	46bd      	mov	sp, r7
 8007b00:	b004      	add	sp, #16
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	2000158c 	.word	0x2000158c
 8007b08:	200015bc 	.word	0x200015bc
 8007b0c:	0801cb58 	.word	0x0801cb58
 8007b10:	00001e82 	.word	0x00001e82
 8007b14:	000028b4 	.word	0x000028b4
 8007b18:	00003d04 	.word	0x00003d04
 8007b1c:	0000515e 	.word	0x0000515e
 8007b20:	00007a12 	.word	0x00007a12
 8007b24:	0000a2c6 	.word	0x0000a2c6
 8007b28:	20000420 	.word	0x20000420
 8007b2c:	20001624 	.word	0x20001624
 8007b30:	200015a4 	.word	0x200015a4

08007b34 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 8007b3c:	4b3a      	ldr	r3, [pc, #232]	; (8007c28 <SX1276SetTx+0xf4>)
 8007b3e:	0018      	movs	r0, r3
 8007b40:	f013 fa9c 	bl	801b07c <TimerStop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	4b39      	ldr	r3, [pc, #228]	; (8007c2c <SX1276SetTx+0xf8>)
 8007b48:	0011      	movs	r1, r2
 8007b4a:	0018      	movs	r0, r3
 8007b4c:	f013 fb10 	bl	801b170 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 8007b50:	4b37      	ldr	r3, [pc, #220]	; (8007c30 <SX1276SetTx+0xfc>)
 8007b52:	795b      	ldrb	r3, [r3, #5]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <SX1276SetTx+0x2a>
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d028      	beq.n	8007bae <SX1276SetTx+0x7a>
 8007b5c:	e056      	b.n	8007c0c <SX1276SetTx+0xd8>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8007b5e:	2040      	movs	r0, #64	; 0x40
 8007b60:	f000 fa30 	bl	8007fc4 <SX1276Read>
 8007b64:	0003      	movs	r3, r0
 8007b66:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8007b68:	2203      	movs	r2, #3
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8007b6e:	2210      	movs	r2, #16
 8007b70:	4313      	orrs	r3, r2
 8007b72:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	0019      	movs	r1, r3
 8007b78:	2040      	movs	r0, #64	; 0x40
 8007b7a:	f000 fa0f 	bl	8007f9c <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8007b7e:	2041      	movs	r0, #65	; 0x41
 8007b80:	f000 fa20 	bl	8007fc4 <SX1276Read>
 8007b84:	0003      	movs	r3, r0
 8007b86:	001a      	movs	r2, r3
 8007b88:	233e      	movs	r3, #62	; 0x3e
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	0019      	movs	r1, r3
 8007b90:	2041      	movs	r0, #65	; 0x41
 8007b92:	f000 fa03 	bl	8007f9c <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8007b96:	2035      	movs	r0, #53	; 0x35
 8007b98:	f000 fa14 	bl	8007fc4 <SX1276Read>
 8007b9c:	0003      	movs	r3, r0
 8007b9e:	001a      	movs	r2, r3
 8007ba0:	233f      	movs	r3, #63	; 0x3f
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	b2d9      	uxtb	r1, r3
 8007ba6:	4b22      	ldr	r3, [pc, #136]	; (8007c30 <SX1276SetTx+0xfc>)
 8007ba8:	223e      	movs	r2, #62	; 0x3e
 8007baa:	5499      	strb	r1, [r3, r2]
        }
        break;
 8007bac:	e02e      	b.n	8007c0c <SX1276SetTx+0xd8>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007bae:	4b20      	ldr	r3, [pc, #128]	; (8007c30 <SX1276SetTx+0xfc>)
 8007bb0:	2253      	movs	r2, #83	; 0x53
 8007bb2:	5c9b      	ldrb	r3, [r3, r2]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d014      	beq.n	8007be2 <SX1276SetTx+0xae>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8007bb8:	21f5      	movs	r1, #245	; 0xf5
 8007bba:	2011      	movs	r0, #17
 8007bbc:	f000 f9ee 	bl	8007f9c <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8007bc0:	2040      	movs	r0, #64	; 0x40
 8007bc2:	f000 f9ff 	bl	8007fc4 <SX1276Read>
 8007bc6:	0003      	movs	r3, r0
 8007bc8:	b25b      	sxtb	r3, r3
 8007bca:	2233      	movs	r2, #51	; 0x33
 8007bcc:	4013      	ands	r3, r2
 8007bce:	b25b      	sxtb	r3, r3
 8007bd0:	2240      	movs	r2, #64	; 0x40
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	b25b      	sxtb	r3, r3
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	0019      	movs	r1, r3
 8007bda:	2040      	movs	r0, #64	; 0x40
 8007bdc:	f000 f9de 	bl	8007f9c <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8007be0:	e013      	b.n	8007c0a <SX1276SetTx+0xd6>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8007be2:	21f7      	movs	r1, #247	; 0xf7
 8007be4:	2011      	movs	r0, #17
 8007be6:	f000 f9d9 	bl	8007f9c <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8007bea:	2040      	movs	r0, #64	; 0x40
 8007bec:	f000 f9ea 	bl	8007fc4 <SX1276Read>
 8007bf0:	0003      	movs	r3, r0
 8007bf2:	b25b      	sxtb	r3, r3
 8007bf4:	223f      	movs	r2, #63	; 0x3f
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	b25b      	sxtb	r3, r3
 8007bfa:	2240      	movs	r2, #64	; 0x40
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	b25b      	sxtb	r3, r3
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	0019      	movs	r1, r3
 8007c04:	2040      	movs	r0, #64	; 0x40
 8007c06:	f000 f9c9 	bl	8007f9c <SX1276Write>
        break;
 8007c0a:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 8007c0c:	4b08      	ldr	r3, [pc, #32]	; (8007c30 <SX1276SetTx+0xfc>)
 8007c0e:	2202      	movs	r2, #2
 8007c10:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8007c12:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <SX1276SetTx+0xf8>)
 8007c14:	0018      	movs	r0, r3
 8007c16:	f013 f959 	bl	801aecc <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8007c1a:	2003      	movs	r0, #3
 8007c1c:	f000 f914 	bl	8007e48 <SX1276SetOpMode>
}
 8007c20:	46c0      	nop			; (mov r8, r8)
 8007c22:	46bd      	mov	sp, r7
 8007c24:	b002      	add	sp, #8
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	20001624 	.word	0x20001624
 8007c2c:	2000158c 	.word	0x2000158c
 8007c30:	200015bc 	.word	0x200015bc

08007c34 <SX1276StartCad>:

void SX1276StartCad( void )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8007c38:	4b11      	ldr	r3, [pc, #68]	; (8007c80 <SX1276StartCad+0x4c>)
 8007c3a:	795b      	ldrb	r3, [r3, #5]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01a      	beq.n	8007c76 <SX1276StartCad+0x42>
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d000      	beq.n	8007c46 <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 8007c44:	e018      	b.n	8007c78 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8007c46:	21fa      	movs	r1, #250	; 0xfa
 8007c48:	2011      	movs	r0, #17
 8007c4a:	f000 f9a7 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8007c4e:	2040      	movs	r0, #64	; 0x40
 8007c50:	f000 f9b8 	bl	8007fc4 <SX1276Read>
 8007c54:	0003      	movs	r3, r0
 8007c56:	001a      	movs	r2, r3
 8007c58:	2303      	movs	r3, #3
 8007c5a:	439a      	bics	r2, r3
 8007c5c:	0013      	movs	r3, r2
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	0019      	movs	r1, r3
 8007c62:	2040      	movs	r0, #64	; 0x40
 8007c64:	f000 f99a 	bl	8007f9c <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8007c68:	4b05      	ldr	r3, [pc, #20]	; (8007c80 <SX1276StartCad+0x4c>)
 8007c6a:	2203      	movs	r2, #3
 8007c6c:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8007c6e:	2007      	movs	r0, #7
 8007c70:	f000 f8ea 	bl	8007e48 <SX1276SetOpMode>
        break;
 8007c74:	e000      	b.n	8007c78 <SX1276StartCad+0x44>
        break;
 8007c76:	46c0      	nop			; (mov r8, r8)
    }
}
 8007c78:	46c0      	nop			; (mov r8, r8)
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	46c0      	nop			; (mov r8, r8)
 8007c80:	200015bc 	.word	0x200015bc

08007c84 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b08e      	sub	sp, #56	; 0x38
 8007c88:	af0a      	add	r7, sp, #40	; 0x28
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	0008      	movs	r0, r1
 8007c8e:	0011      	movs	r1, r2
 8007c90:	1cfb      	adds	r3, r7, #3
 8007c92:	1c02      	adds	r2, r0, #0
 8007c94:	701a      	strb	r2, [r3, #0]
 8007c96:	003b      	movs	r3, r7
 8007c98:	1c0a      	adds	r2, r1, #0
 8007c9a:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8007c9c:	003b      	movs	r3, r7
 8007c9e:	881a      	ldrh	r2, [r3, #0]
 8007ca0:	0013      	movs	r3, r2
 8007ca2:	015b      	lsls	r3, r3, #5
 8007ca4:	1a9b      	subs	r3, r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	189b      	adds	r3, r3, r2
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	f7fe fcf3 	bl	800669c <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8007cb6:	1cfb      	adds	r3, r7, #3
 8007cb8:	2100      	movs	r1, #0
 8007cba:	5659      	ldrsb	r1, [r3, r1]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	9308      	str	r3, [sp, #32]
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	9307      	str	r3, [sp, #28]
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	9306      	str	r3, [sp, #24]
 8007cc8:	2300      	movs	r3, #0
 8007cca:	9305      	str	r3, [sp, #20]
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9304      	str	r3, [sp, #16]
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	9303      	str	r3, [sp, #12]
 8007cd4:	2305      	movs	r3, #5
 8007cd6:	9302      	str	r3, [sp, #8]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	9301      	str	r3, [sp, #4]
 8007cdc:	2396      	movs	r3, #150	; 0x96
 8007cde:	015b      	lsls	r3, r3, #5
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	f7ff f8fe 	bl	8006ee8 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8007cec:	2031      	movs	r0, #49	; 0x31
 8007cee:	f000 f969 	bl	8007fc4 <SX1276Read>
 8007cf2:	0003      	movs	r3, r0
 8007cf4:	001a      	movs	r2, r3
 8007cf6:	2340      	movs	r3, #64	; 0x40
 8007cf8:	439a      	bics	r2, r3
 8007cfa:	0013      	movs	r3, r2
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	0019      	movs	r1, r3
 8007d00:	2031      	movs	r0, #49	; 0x31
 8007d02:	f000 f94b 	bl	8007f9c <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8007d06:	21f0      	movs	r1, #240	; 0xf0
 8007d08:	2040      	movs	r0, #64	; 0x40
 8007d0a:	f000 f947 	bl	8007f9c <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8007d0e:	21a0      	movs	r1, #160	; 0xa0
 8007d10:	2041      	movs	r0, #65	; 0x41
 8007d12:	f000 f943 	bl	8007f9c <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <SX1276SetTxContinuousWave+0xbc>)
 8007d1a:	0011      	movs	r1, r2
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	f013 fa27 	bl	801b170 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 8007d22:	4b08      	ldr	r3, [pc, #32]	; (8007d44 <SX1276SetTxContinuousWave+0xc0>)
 8007d24:	2202      	movs	r2, #2
 8007d26:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8007d28:	4b05      	ldr	r3, [pc, #20]	; (8007d40 <SX1276SetTxContinuousWave+0xbc>)
 8007d2a:	0018      	movs	r0, r3
 8007d2c:	f013 f8ce 	bl	801aecc <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8007d30:	2003      	movs	r0, #3
 8007d32:	f000 f889 	bl	8007e48 <SX1276SetOpMode>
}
 8007d36:	46c0      	nop			; (mov r8, r8)
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	b004      	add	sp, #16
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	46c0      	nop			; (mov r8, r8)
 8007d40:	2000158c 	.word	0x2000158c
 8007d44:	200015bc 	.word	0x200015bc

08007d48 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	0002      	movs	r2, r0
 8007d50:	1dfb      	adds	r3, r7, #7
 8007d52:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8007d54:	230e      	movs	r3, #14
 8007d56:	18fb      	adds	r3, r7, r3
 8007d58:	2200      	movs	r2, #0
 8007d5a:	801a      	strh	r2, [r3, #0]

    switch( modem )
 8007d5c:	1dfb      	adds	r3, r7, #7
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <SX1276ReadRssi+0x22>
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d00d      	beq.n	8007d84 <SX1276ReadRssi+0x3c>
 8007d68:	e027      	b.n	8007dba <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8007d6a:	2011      	movs	r0, #17
 8007d6c:	f000 f92a 	bl	8007fc4 <SX1276Read>
 8007d70:	0003      	movs	r3, r0
 8007d72:	085b      	lsrs	r3, r3, #1
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	425b      	negs	r3, r3
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	230e      	movs	r3, #14
 8007d7e:	18fb      	adds	r3, r7, r3
 8007d80:	801a      	strh	r2, [r3, #0]
        break;
 8007d82:	e020      	b.n	8007dc6 <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8007d84:	4b14      	ldr	r3, [pc, #80]	; (8007dd8 <SX1276ReadRssi+0x90>)
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	4a14      	ldr	r2, [pc, #80]	; (8007ddc <SX1276ReadRssi+0x94>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d90a      	bls.n	8007da4 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8007d8e:	201b      	movs	r0, #27
 8007d90:	f000 f918 	bl	8007fc4 <SX1276Read>
 8007d94:	0003      	movs	r3, r0
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	3b9d      	subs	r3, #157	; 0x9d
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	230e      	movs	r3, #14
 8007d9e:	18fb      	adds	r3, r7, r3
 8007da0:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 8007da2:	e010      	b.n	8007dc6 <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8007da4:	201b      	movs	r0, #27
 8007da6:	f000 f90d 	bl	8007fc4 <SX1276Read>
 8007daa:	0003      	movs	r3, r0
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	3ba4      	subs	r3, #164	; 0xa4
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	230e      	movs	r3, #14
 8007db4:	18fb      	adds	r3, r7, r3
 8007db6:	801a      	strh	r2, [r3, #0]
        break;
 8007db8:	e005      	b.n	8007dc6 <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 8007dba:	230e      	movs	r3, #14
 8007dbc:	18fb      	adds	r3, r7, r3
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	4252      	negs	r2, r2
 8007dc2:	801a      	strh	r2, [r3, #0]
        break;
 8007dc4:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 8007dc6:	230e      	movs	r3, #14
 8007dc8:	18fb      	adds	r3, r7, r3
 8007dca:	2200      	movs	r2, #0
 8007dcc:	5e9b      	ldrsh	r3, [r3, r2]
}
 8007dce:	0018      	movs	r0, r3
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	b004      	add	sp, #16
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	46c0      	nop			; (mov r8, r8)
 8007dd8:	200015bc 	.word	0x200015bc
 8007ddc:	1f4add40 	.word	0x1f4add40

08007de0 <SX1276Reset>:

void SX1276Reset( void )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct = { 0 };
 8007de6:	1d3b      	adds	r3, r7, #4
 8007de8:	0018      	movs	r0, r3
 8007dea:	2314      	movs	r3, #20
 8007dec:	001a      	movs	r2, r3
 8007dee:	2100      	movs	r1, #0
 8007df0:	f013 fc40 	bl	801b674 <memset>

    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8007df4:	1d3b      	adds	r3, r7, #4
 8007df6:	2201      	movs	r2, #1
 8007df8:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_NOPULL;
 8007dfa:	1d3b      	adds	r3, r7, #4
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8007e00:	1d3b      	adds	r3, r7, #4
 8007e02:	2203      	movs	r2, #3
 8007e04:	60da      	str	r2, [r3, #12]

    // Set RESET pin to 0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8007e06:	1d3b      	adds	r3, r7, #4
 8007e08:	480e      	ldr	r0, [pc, #56]	; (8007e44 <SX1276Reset+0x64>)
 8007e0a:	001a      	movs	r2, r3
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	f7fb ff2f 	bl	8003c70 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 8007e12:	4b0c      	ldr	r3, [pc, #48]	; (8007e44 <SX1276Reset+0x64>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	2101      	movs	r1, #1
 8007e18:	0018      	movs	r0, r3
 8007e1a:	f7fb fffb 	bl	8003e14 <HW_GPIO_Write>

    // Wait 1 ms
    DelayMs( 1 );
 8007e1e:	2001      	movs	r0, #1
 8007e20:	f7fd f90c 	bl	800503c <HAL_Delay>

    // Configure RESET as input
    initStruct.Mode = GPIO_NOPULL;
 8007e24:	1d3b      	adds	r3, r7, #4
 8007e26:	2200      	movs	r2, #0
 8007e28:	605a      	str	r2, [r3, #4]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8007e2a:	1d3b      	adds	r3, r7, #4
 8007e2c:	4805      	ldr	r0, [pc, #20]	; (8007e44 <SX1276Reset+0x64>)
 8007e2e:	001a      	movs	r2, r3
 8007e30:	2101      	movs	r1, #1
 8007e32:	f7fb ff1d 	bl	8003c70 <HW_GPIO_Init>

    // Wait 6 ms
    DelayMs( 6 );
 8007e36:	2006      	movs	r0, #6
 8007e38:	f7fd f900 	bl	800503c <HAL_Delay>
}
 8007e3c:	46c0      	nop			; (mov r8, r8)
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	b006      	add	sp, #24
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	50000800 	.word	0x50000800

08007e48 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	0002      	movs	r2, r0
 8007e50:	1dfb      	adds	r3, r7, #7
 8007e52:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 8007e54:	1dfb      	adds	r3, r7, #7
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d11c      	bne.n	8007e96 <SX1276SetOpMode+0x4e>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8007e5c:	2001      	movs	r0, #1
 8007e5e:	f000 f8b1 	bl	8007fc4 <SX1276Read>
 8007e62:	0003      	movs	r3, r0
 8007e64:	b25b      	sxtb	r3, r3
 8007e66:	2207      	movs	r2, #7
 8007e68:	4393      	bics	r3, r2
 8007e6a:	b25a      	sxtb	r2, r3
 8007e6c:	1dfb      	adds	r3, r7, #7
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	b25b      	sxtb	r3, r3
 8007e72:	4313      	orrs	r3, r2
 8007e74:	b25b      	sxtb	r3, r3
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	0019      	movs	r1, r3
 8007e7a:	2001      	movs	r0, #1
 8007e7c:	f000 f88e 	bl	8007f9c <SX1276Write>
      
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 8007e80:	4b18      	ldr	r3, [pc, #96]	; (8007ee4 <SX1276SetOpMode+0x9c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	2001      	movs	r0, #1
 8007e88:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8007e8a:	4b16      	ldr	r3, [pc, #88]	; (8007ee4 <SX1276SetOpMode+0x9c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2000      	movs	r0, #0
 8007e92:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 8007e94:	e022      	b.n	8007edc <SX1276SetOpMode+0x94>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 8007e96:	4b13      	ldr	r3, [pc, #76]	; (8007ee4 <SX1276SetOpMode+0x9c>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2001      	movs	r0, #1
 8007e9e:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 8007ea0:	4b10      	ldr	r3, [pc, #64]	; (8007ee4 <SX1276SetOpMode+0x9c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 8007eaa:	4b0e      	ldr	r3, [pc, #56]	; (8007ee4 <SX1276SetOpMode+0x9c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	1dfa      	adds	r2, r7, #7
 8007eb2:	7812      	ldrb	r2, [r2, #0]
 8007eb4:	0010      	movs	r0, r2
 8007eb6:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8007eb8:	2001      	movs	r0, #1
 8007eba:	f000 f883 	bl	8007fc4 <SX1276Read>
 8007ebe:	0003      	movs	r3, r0
 8007ec0:	b25b      	sxtb	r3, r3
 8007ec2:	2207      	movs	r2, #7
 8007ec4:	4393      	bics	r3, r2
 8007ec6:	b25a      	sxtb	r2, r3
 8007ec8:	1dfb      	adds	r3, r7, #7
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	b25b      	sxtb	r3, r3
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	b25b      	sxtb	r3, r3
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	0019      	movs	r1, r3
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	f000 f860 	bl	8007f9c <SX1276Write>
}
 8007edc:	46c0      	nop			; (mov r8, r8)
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	b002      	add	sp, #8
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	20000520 	.word	0x20000520

08007ee8 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	0002      	movs	r2, r0
 8007ef0:	1dfb      	adds	r3, r7, #7
 8007ef2:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8007ef4:	2001      	movs	r0, #1
 8007ef6:	f000 f865 	bl	8007fc4 <SX1276Read>
 8007efa:	0003      	movs	r3, r0
 8007efc:	b25b      	sxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	da03      	bge.n	8007f0a <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 8007f02:	4b25      	ldr	r3, [pc, #148]	; (8007f98 <SX1276SetModem+0xb0>)
 8007f04:	2201      	movs	r2, #1
 8007f06:	715a      	strb	r2, [r3, #5]
 8007f08:	e002      	b.n	8007f10 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 8007f0a:	4b23      	ldr	r3, [pc, #140]	; (8007f98 <SX1276SetModem+0xb0>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 8007f10:	4b21      	ldr	r3, [pc, #132]	; (8007f98 <SX1276SetModem+0xb0>)
 8007f12:	795b      	ldrb	r3, [r3, #5]
 8007f14:	1dfa      	adds	r2, r7, #7
 8007f16:	7812      	ldrb	r2, [r2, #0]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d039      	beq.n	8007f90 <SX1276SetModem+0xa8>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8007f1c:	4b1e      	ldr	r3, [pc, #120]	; (8007f98 <SX1276SetModem+0xb0>)
 8007f1e:	1dfa      	adds	r2, r7, #7
 8007f20:	7812      	ldrb	r2, [r2, #0]
 8007f22:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 8007f24:	4b1c      	ldr	r3, [pc, #112]	; (8007f98 <SX1276SetModem+0xb0>)
 8007f26:	795b      	ldrb	r3, [r3, #5]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d017      	beq.n	8007f5c <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	f7ff ff8b 	bl	8007e48 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8007f32:	2001      	movs	r0, #1
 8007f34:	f000 f846 	bl	8007fc4 <SX1276Read>
 8007f38:	0003      	movs	r3, r0
 8007f3a:	001a      	movs	r2, r3
 8007f3c:	237f      	movs	r3, #127	; 0x7f
 8007f3e:	4013      	ands	r3, r2
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	0019      	movs	r1, r3
 8007f44:	2001      	movs	r0, #1
 8007f46:	f000 f829 	bl	8007f9c <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	2040      	movs	r0, #64	; 0x40
 8007f4e:	f000 f825 	bl	8007f9c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8007f52:	2130      	movs	r1, #48	; 0x30
 8007f54:	2041      	movs	r0, #65	; 0x41
 8007f56:	f000 f821 	bl	8007f9c <SX1276Write>
        break;
 8007f5a:	e01a      	b.n	8007f92 <SX1276SetModem+0xaa>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	f7ff ff73 	bl	8007e48 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8007f62:	2001      	movs	r0, #1
 8007f64:	f000 f82e 	bl	8007fc4 <SX1276Read>
 8007f68:	0003      	movs	r3, r0
 8007f6a:	001a      	movs	r2, r3
 8007f6c:	2380      	movs	r3, #128	; 0x80
 8007f6e:	425b      	negs	r3, r3
 8007f70:	4313      	orrs	r3, r2
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	0019      	movs	r1, r3
 8007f76:	2001      	movs	r0, #1
 8007f78:	f000 f810 	bl	8007f9c <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	2040      	movs	r0, #64	; 0x40
 8007f80:	f000 f80c 	bl	8007f9c <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8007f84:	2100      	movs	r1, #0
 8007f86:	2041      	movs	r0, #65	; 0x41
 8007f88:	f000 f808 	bl	8007f9c <SX1276Write>
        break;
 8007f8c:	46c0      	nop			; (mov r8, r8)
 8007f8e:	e000      	b.n	8007f92 <SX1276SetModem+0xaa>
        return;
 8007f90:	46c0      	nop			; (mov r8, r8)
    }
}
 8007f92:	46bd      	mov	sp, r7
 8007f94:	b002      	add	sp, #8
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	200015bc 	.word	0x200015bc

08007f9c <SX1276Write>:

void SX1276Write( uint16_t addr, uint8_t data )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	0002      	movs	r2, r0
 8007fa4:	1dbb      	adds	r3, r7, #6
 8007fa6:	801a      	strh	r2, [r3, #0]
 8007fa8:	1d7b      	adds	r3, r7, #5
 8007faa:	1c0a      	adds	r2, r1, #0
 8007fac:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 8007fae:	1d79      	adds	r1, r7, #5
 8007fb0:	1dbb      	adds	r3, r7, #6
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	0018      	movs	r0, r3
 8007fb8:	f000 f818 	bl	8007fec <SX1276WriteBuffer>
}
 8007fbc:	46c0      	nop			; (mov r8, r8)
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	b002      	add	sp, #8
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <SX1276Read>:

uint8_t SX1276Read( uint16_t addr )
{
 8007fc4:	b590      	push	{r4, r7, lr}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	0002      	movs	r2, r0
 8007fcc:	1dbb      	adds	r3, r7, #6
 8007fce:	801a      	strh	r2, [r3, #0]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8007fd0:	240f      	movs	r4, #15
 8007fd2:	1939      	adds	r1, r7, r4
 8007fd4:	1dbb      	adds	r3, r7, #6
 8007fd6:	881b      	ldrh	r3, [r3, #0]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	0018      	movs	r0, r3
 8007fdc:	f000 f848 	bl	8008070 <SX1276ReadBuffer>
    return data;
 8007fe0:	193b      	adds	r3, r7, r4
 8007fe2:	781b      	ldrb	r3, [r3, #0]
}
 8007fe4:	0018      	movs	r0, r3
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	b005      	add	sp, #20
 8007fea:	bd90      	pop	{r4, r7, pc}

08007fec <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007fec:	b590      	push	{r4, r7, lr}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6039      	str	r1, [r7, #0]
 8007ff4:	0011      	movs	r1, r2
 8007ff6:	1dbb      	adds	r3, r7, #6
 8007ff8:	1c02      	adds	r2, r0, #0
 8007ffa:	801a      	strh	r2, [r3, #0]
 8007ffc:	1d7b      	adds	r3, r7, #5
 8007ffe:	1c0a      	adds	r2, r1, #0
 8008000:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8008002:	2380      	movs	r3, #128	; 0x80
 8008004:	0219      	lsls	r1, r3, #8
 8008006:	23a0      	movs	r3, #160	; 0xa0
 8008008:	05db      	lsls	r3, r3, #23
 800800a:	2200      	movs	r2, #0
 800800c:	0018      	movs	r0, r3
 800800e:	f7fb ff01 	bl	8003e14 <HW_GPIO_Write>

    HW_SPI_InOut( addr | 0x80 );
 8008012:	1dbb      	adds	r3, r7, #6
 8008014:	881b      	ldrh	r3, [r3, #0]
 8008016:	2280      	movs	r2, #128	; 0x80
 8008018:	4313      	orrs	r3, r2
 800801a:	b29b      	uxth	r3, r3
 800801c:	0018      	movs	r0, r3
 800801e:	f7fc fc13 	bl	8004848 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8008022:	230f      	movs	r3, #15
 8008024:	18fb      	adds	r3, r7, r3
 8008026:	2200      	movs	r2, #0
 8008028:	701a      	strb	r2, [r3, #0]
 800802a:	e00e      	b.n	800804a <SX1276WriteBuffer+0x5e>
    {
        HW_SPI_InOut( buffer[i] );
 800802c:	240f      	movs	r4, #15
 800802e:	193b      	adds	r3, r7, r4
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	18d3      	adds	r3, r2, r3
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	b29b      	uxth	r3, r3
 800803a:	0018      	movs	r0, r3
 800803c:	f7fc fc04 	bl	8004848 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8008040:	193b      	adds	r3, r7, r4
 8008042:	781a      	ldrb	r2, [r3, #0]
 8008044:	193b      	adds	r3, r7, r4
 8008046:	3201      	adds	r2, #1
 8008048:	701a      	strb	r2, [r3, #0]
 800804a:	230f      	movs	r3, #15
 800804c:	18fa      	adds	r2, r7, r3
 800804e:	1d7b      	adds	r3, r7, #5
 8008050:	7812      	ldrb	r2, [r2, #0]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	429a      	cmp	r2, r3
 8008056:	d3e9      	bcc.n	800802c <SX1276WriteBuffer+0x40>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8008058:	2380      	movs	r3, #128	; 0x80
 800805a:	0219      	lsls	r1, r3, #8
 800805c:	23a0      	movs	r3, #160	; 0xa0
 800805e:	05db      	lsls	r3, r3, #23
 8008060:	2201      	movs	r2, #1
 8008062:	0018      	movs	r0, r3
 8008064:	f7fb fed6 	bl	8003e14 <HW_GPIO_Write>
}
 8008068:	46c0      	nop			; (mov r8, r8)
 800806a:	46bd      	mov	sp, r7
 800806c:	b005      	add	sp, #20
 800806e:	bd90      	pop	{r4, r7, pc}

08008070 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6039      	str	r1, [r7, #0]
 8008078:	0011      	movs	r1, r2
 800807a:	1dbb      	adds	r3, r7, #6
 800807c:	1c02      	adds	r2, r0, #0
 800807e:	801a      	strh	r2, [r3, #0]
 8008080:	1d7b      	adds	r3, r7, #5
 8008082:	1c0a      	adds	r2, r1, #0
 8008084:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8008086:	2380      	movs	r3, #128	; 0x80
 8008088:	0219      	lsls	r1, r3, #8
 800808a:	23a0      	movs	r3, #160	; 0xa0
 800808c:	05db      	lsls	r3, r3, #23
 800808e:	2200      	movs	r2, #0
 8008090:	0018      	movs	r0, r3
 8008092:	f7fb febf 	bl	8003e14 <HW_GPIO_Write>

    HW_SPI_InOut( addr & 0x7F );
 8008096:	1dbb      	adds	r3, r7, #6
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	227f      	movs	r2, #127	; 0x7f
 800809c:	4013      	ands	r3, r2
 800809e:	b29b      	uxth	r3, r3
 80080a0:	0018      	movs	r0, r3
 80080a2:	f7fc fbd1 	bl	8004848 <HW_SPI_InOut>

    for( i = 0; i < size; i++ )
 80080a6:	230f      	movs	r3, #15
 80080a8:	18fb      	adds	r3, r7, r3
 80080aa:	2200      	movs	r2, #0
 80080ac:	701a      	strb	r2, [r3, #0]
 80080ae:	e010      	b.n	80080d2 <SX1276ReadBuffer+0x62>
    {
        buffer[i] = HW_SPI_InOut( 0 );
 80080b0:	2000      	movs	r0, #0
 80080b2:	f7fc fbc9 	bl	8004848 <HW_SPI_InOut>
 80080b6:	0003      	movs	r3, r0
 80080b8:	0019      	movs	r1, r3
 80080ba:	200f      	movs	r0, #15
 80080bc:	183b      	adds	r3, r7, r0
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	683a      	ldr	r2, [r7, #0]
 80080c2:	18d3      	adds	r3, r2, r3
 80080c4:	b2ca      	uxtb	r2, r1
 80080c6:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80080c8:	183b      	adds	r3, r7, r0
 80080ca:	781a      	ldrb	r2, [r3, #0]
 80080cc:	183b      	adds	r3, r7, r0
 80080ce:	3201      	adds	r2, #1
 80080d0:	701a      	strb	r2, [r3, #0]
 80080d2:	230f      	movs	r3, #15
 80080d4:	18fa      	adds	r2, r7, r3
 80080d6:	1d7b      	adds	r3, r7, #5
 80080d8:	7812      	ldrb	r2, [r2, #0]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d3e7      	bcc.n	80080b0 <SX1276ReadBuffer+0x40>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80080e0:	2380      	movs	r3, #128	; 0x80
 80080e2:	0219      	lsls	r1, r3, #8
 80080e4:	23a0      	movs	r3, #160	; 0xa0
 80080e6:	05db      	lsls	r3, r3, #23
 80080e8:	2201      	movs	r2, #1
 80080ea:	0018      	movs	r0, r3
 80080ec:	f7fb fe92 	bl	8003e14 <HW_GPIO_Write>
}
 80080f0:	46c0      	nop			; (mov r8, r8)
 80080f2:	46bd      	mov	sp, r7
 80080f4:	b004      	add	sp, #16
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	000a      	movs	r2, r1
 8008102:	1cfb      	adds	r3, r7, #3
 8008104:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 8008106:	1cfb      	adds	r3, r7, #3
 8008108:	781a      	ldrb	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	0019      	movs	r1, r3
 800810e:	2000      	movs	r0, #0
 8008110:	f7ff ff6c 	bl	8007fec <SX1276WriteBuffer>
}
 8008114:	46c0      	nop			; (mov r8, r8)
 8008116:	46bd      	mov	sp, r7
 8008118:	b002      	add	sp, #8
 800811a:	bd80      	pop	{r7, pc}

0800811c <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	000a      	movs	r2, r1
 8008126:	1cfb      	adds	r3, r7, #3
 8008128:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 800812a:	1cfb      	adds	r3, r7, #3
 800812c:	781a      	ldrb	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	0019      	movs	r1, r3
 8008132:	2000      	movs	r0, #0
 8008134:	f7ff ff9c 	bl	8008070 <SX1276ReadBuffer>
}
 8008138:	46c0      	nop			; (mov r8, r8)
 800813a:	46bd      	mov	sp, r7
 800813c:	b002      	add	sp, #8
 800813e:	bd80      	pop	{r7, pc}

08008140 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	0002      	movs	r2, r0
 8008148:	1dfb      	adds	r3, r7, #7
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	1dbb      	adds	r3, r7, #6
 800814e:	1c0a      	adds	r2, r1, #0
 8008150:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8008152:	1dfb      	adds	r3, r7, #7
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	0018      	movs	r0, r3
 8008158:	f7ff fec6 	bl	8007ee8 <SX1276SetModem>

    switch( modem )
 800815c:	1dfb      	adds	r3, r7, #7
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d002      	beq.n	800816a <SX1276SetMaxPayloadLength+0x2a>
 8008164:	2b01      	cmp	r3, #1
 8008166:	d00f      	beq.n	8008188 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8008168:	e016      	b.n	8008198 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 800816a:	4b0d      	ldr	r3, [pc, #52]	; (80081a0 <SX1276SetMaxPayloadLength+0x60>)
 800816c:	2222      	movs	r2, #34	; 0x22
 800816e:	5c9b      	ldrb	r3, [r3, r2]
 8008170:	2201      	movs	r2, #1
 8008172:	4053      	eors	r3, r2
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00d      	beq.n	8008196 <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800817a:	1dbb      	adds	r3, r7, #6
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	0019      	movs	r1, r3
 8008180:	2032      	movs	r0, #50	; 0x32
 8008182:	f7ff ff0b 	bl	8007f9c <SX1276Write>
        break;
 8008186:	e006      	b.n	8008196 <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8008188:	1dbb      	adds	r3, r7, #6
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	0019      	movs	r1, r3
 800818e:	2023      	movs	r0, #35	; 0x23
 8008190:	f7ff ff04 	bl	8007f9c <SX1276Write>
        break;
 8008194:	e000      	b.n	8008198 <SX1276SetMaxPayloadLength+0x58>
        break;
 8008196:	46c0      	nop			; (mov r8, r8)
}
 8008198:	46c0      	nop			; (mov r8, r8)
 800819a:	46bd      	mov	sp, r7
 800819c:	b002      	add	sp, #8
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	200015bc 	.word	0x200015bc

080081a4 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	0002      	movs	r2, r0
 80081ac:	1dfb      	adds	r3, r7, #7
 80081ae:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
 80081b0:	2001      	movs	r0, #1
 80081b2:	f7ff fe99 	bl	8007ee8 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 80081b6:	4b0b      	ldr	r3, [pc, #44]	; (80081e4 <SX1276SetPublicNetwork+0x40>)
 80081b8:	1dfa      	adds	r2, r7, #7
 80081ba:	215c      	movs	r1, #92	; 0x5c
 80081bc:	7812      	ldrb	r2, [r2, #0]
 80081be:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 80081c0:	1dfb      	adds	r3, r7, #7
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d004      	beq.n	80081d2 <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80081c8:	2134      	movs	r1, #52	; 0x34
 80081ca:	2039      	movs	r0, #57	; 0x39
 80081cc:	f7ff fee6 	bl	8007f9c <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 80081d0:	e003      	b.n	80081da <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80081d2:	2112      	movs	r1, #18
 80081d4:	2039      	movs	r0, #57	; 0x39
 80081d6:	f7ff fee1 	bl	8007f9c <SX1276Write>
}
 80081da:	46c0      	nop			; (mov r8, r8)
 80081dc:	46bd      	mov	sp, r7
 80081de:	b002      	add	sp, #8
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	46c0      	nop			; (mov r8, r8)
 80081e4:	200015bc 	.word	0x200015bc

080081e8 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 80081ec:	4b04      	ldr	r3, [pc, #16]	; (8008200 <SX1276GetWakeupTime+0x18>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	4798      	blx	r3
 80081f4:	0003      	movs	r3, r0
 80081f6:	3302      	adds	r3, #2
}
 80081f8:	0018      	movs	r0, r3
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	46c0      	nop			; (mov r8, r8)
 8008200:	20000520 	.word	0x20000520

08008204 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void* context )
{
 8008204:	b590      	push	{r4, r7, lr}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 800820c:	4b51      	ldr	r3, [pc, #324]	; (8008354 <SX1276OnTimeoutIrq+0x150>)
 800820e:	791b      	ldrb	r3, [r3, #4]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d002      	beq.n	800821a <SX1276OnTimeoutIrq+0x16>
 8008214:	2b02      	cmp	r3, #2
 8008216:	d045      	beq.n	80082a4 <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8008218:	e098      	b.n	800834c <SX1276OnTimeoutIrq+0x148>
        if( SX1276.Settings.Modem == MODEM_FSK )
 800821a:	4b4e      	ldr	r3, [pc, #312]	; (8008354 <SX1276OnTimeoutIrq+0x150>)
 800821c:	795b      	ldrb	r3, [r3, #5]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d132      	bne.n	8008288 <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8008222:	4b4c      	ldr	r3, [pc, #304]	; (8008354 <SX1276OnTimeoutIrq+0x150>)
 8008224:	2230      	movs	r2, #48	; 0x30
 8008226:	2100      	movs	r1, #0
 8008228:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800822a:	4b4a      	ldr	r3, [pc, #296]	; (8008354 <SX1276OnTimeoutIrq+0x150>)
 800822c:	2231      	movs	r2, #49	; 0x31
 800822e:	2100      	movs	r1, #0
 8008230:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008232:	4b48      	ldr	r3, [pc, #288]	; (8008354 <SX1276OnTimeoutIrq+0x150>)
 8008234:	2200      	movs	r2, #0
 8008236:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8008238:	4b46      	ldr	r3, [pc, #280]	; (8008354 <SX1276OnTimeoutIrq+0x150>)
 800823a:	2200      	movs	r2, #0
 800823c:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800823e:	210b      	movs	r1, #11
 8008240:	203e      	movs	r0, #62	; 0x3e
 8008242:	f7ff feab 	bl	8007f9c <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8008246:	2110      	movs	r1, #16
 8008248:	203f      	movs	r0, #63	; 0x3f
 800824a:	f7ff fea7 	bl	8007f9c <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800824e:	4b41      	ldr	r3, [pc, #260]	; (8008354 <SX1276OnTimeoutIrq+0x150>)
 8008250:	2226      	movs	r2, #38	; 0x26
 8008252:	5c9b      	ldrb	r3, [r3, r2]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d010      	beq.n	800827a <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8008258:	200d      	movs	r0, #13
 800825a:	f7ff feb3 	bl	8007fc4 <SX1276Read>
 800825e:	0003      	movs	r3, r0
 8008260:	001a      	movs	r2, r3
 8008262:	2340      	movs	r3, #64	; 0x40
 8008264:	4313      	orrs	r3, r2
 8008266:	b2db      	uxtb	r3, r3
 8008268:	0019      	movs	r1, r3
 800826a:	200d      	movs	r0, #13
 800826c:	f7ff fe96 	bl	8007f9c <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 8008270:	4b39      	ldr	r3, [pc, #228]	; (8008358 <SX1276OnTimeoutIrq+0x154>)
 8008272:	0018      	movs	r0, r3
 8008274:	f012 fe2a 	bl	801aecc <TimerStart>
 8008278:	e006      	b.n	8008288 <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 800827a:	4b36      	ldr	r3, [pc, #216]	; (8008354 <SX1276OnTimeoutIrq+0x150>)
 800827c:	2200      	movs	r2, #0
 800827e:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 8008280:	4b35      	ldr	r3, [pc, #212]	; (8008358 <SX1276OnTimeoutIrq+0x154>)
 8008282:	0018      	movs	r0, r3
 8008284:	f012 fefa 	bl	801b07c <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008288:	4b34      	ldr	r3, [pc, #208]	; (800835c <SX1276OnTimeoutIrq+0x158>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d05a      	beq.n	8008346 <SX1276OnTimeoutIrq+0x142>
 8008290:	4b32      	ldr	r3, [pc, #200]	; (800835c <SX1276OnTimeoutIrq+0x158>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d055      	beq.n	8008346 <SX1276OnTimeoutIrq+0x142>
            RadioEvents->RxTimeout( );
 800829a:	4b30      	ldr	r3, [pc, #192]	; (800835c <SX1276OnTimeoutIrq+0x158>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	4798      	blx	r3
        break;
 80082a2:	e050      	b.n	8008346 <SX1276OnTimeoutIrq+0x142>
        SX1276Reset( );
 80082a4:	f7ff fd9c 	bl	8007de0 <SX1276Reset>
        RxChainCalibration( );
 80082a8:	f7fe face 	bl	8006848 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80082ac:	2000      	movs	r0, #0
 80082ae:	f7ff fdcb 	bl	8007e48 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80082b2:	230f      	movs	r3, #15
 80082b4:	18fb      	adds	r3, r7, r3
 80082b6:	2200      	movs	r2, #0
 80082b8:	701a      	strb	r2, [r3, #0]
 80082ba:	e025      	b.n	8008308 <SX1276OnTimeoutIrq+0x104>
            SX1276SetModem( RadioRegsInit[i].Modem );
 80082bc:	240f      	movs	r4, #15
 80082be:	193b      	adds	r3, r7, r4
 80082c0:	781a      	ldrb	r2, [r3, #0]
 80082c2:	4927      	ldr	r1, [pc, #156]	; (8008360 <SX1276OnTimeoutIrq+0x15c>)
 80082c4:	0013      	movs	r3, r2
 80082c6:	005b      	lsls	r3, r3, #1
 80082c8:	189b      	adds	r3, r3, r2
 80082ca:	5c5b      	ldrb	r3, [r3, r1]
 80082cc:	0018      	movs	r0, r3
 80082ce:	f7ff fe0b 	bl	8007ee8 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80082d2:	193b      	adds	r3, r7, r4
 80082d4:	781a      	ldrb	r2, [r3, #0]
 80082d6:	4922      	ldr	r1, [pc, #136]	; (8008360 <SX1276OnTimeoutIrq+0x15c>)
 80082d8:	0013      	movs	r3, r2
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	189b      	adds	r3, r3, r2
 80082de:	18cb      	adds	r3, r1, r3
 80082e0:	3301      	adds	r3, #1
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	b298      	uxth	r0, r3
 80082e6:	193b      	adds	r3, r7, r4
 80082e8:	781a      	ldrb	r2, [r3, #0]
 80082ea:	491d      	ldr	r1, [pc, #116]	; (8008360 <SX1276OnTimeoutIrq+0x15c>)
 80082ec:	0013      	movs	r3, r2
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	189b      	adds	r3, r3, r2
 80082f2:	18cb      	adds	r3, r1, r3
 80082f4:	3302      	adds	r3, #2
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	0019      	movs	r1, r3
 80082fa:	f7ff fe4f 	bl	8007f9c <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80082fe:	193b      	adds	r3, r7, r4
 8008300:	781a      	ldrb	r2, [r3, #0]
 8008302:	193b      	adds	r3, r7, r4
 8008304:	3201      	adds	r2, #1
 8008306:	701a      	strb	r2, [r3, #0]
 8008308:	230f      	movs	r3, #15
 800830a:	18fb      	adds	r3, r7, r3
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	2b0f      	cmp	r3, #15
 8008310:	d9d4      	bls.n	80082bc <SX1276OnTimeoutIrq+0xb8>
        SX1276SetModem( MODEM_FSK );
 8008312:	2000      	movs	r0, #0
 8008314:	f7ff fde8 	bl	8007ee8 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8008318:	4b0e      	ldr	r3, [pc, #56]	; (8008354 <SX1276OnTimeoutIrq+0x150>)
 800831a:	225c      	movs	r2, #92	; 0x5c
 800831c:	5c9b      	ldrb	r3, [r3, r2]
 800831e:	0018      	movs	r0, r3
 8008320:	f7ff ff40 	bl	80081a4 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8008324:	4b0b      	ldr	r3, [pc, #44]	; (8008354 <SX1276OnTimeoutIrq+0x150>)
 8008326:	2200      	movs	r2, #0
 8008328:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800832a:	4b0c      	ldr	r3, [pc, #48]	; (800835c <SX1276OnTimeoutIrq+0x158>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00b      	beq.n	800834a <SX1276OnTimeoutIrq+0x146>
 8008332:	4b0a      	ldr	r3, [pc, #40]	; (800835c <SX1276OnTimeoutIrq+0x158>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d006      	beq.n	800834a <SX1276OnTimeoutIrq+0x146>
            RadioEvents->TxTimeout( );
 800833c:	4b07      	ldr	r3, [pc, #28]	; (800835c <SX1276OnTimeoutIrq+0x158>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	4798      	blx	r3
        break;
 8008344:	e001      	b.n	800834a <SX1276OnTimeoutIrq+0x146>
        break;
 8008346:	46c0      	nop			; (mov r8, r8)
 8008348:	e000      	b.n	800834c <SX1276OnTimeoutIrq+0x148>
        break;
 800834a:	46c0      	nop			; (mov r8, r8)
    }
}
 800834c:	46c0      	nop			; (mov r8, r8)
 800834e:	46bd      	mov	sp, r7
 8008350:	b005      	add	sp, #20
 8008352:	bd90      	pop	{r4, r7, pc}
 8008354:	200015bc 	.word	0x200015bc
 8008358:	200015a4 	.word	0x200015a4
 800835c:	2000041c 	.word	0x2000041c
 8008360:	0801ca78 	.word	0x0801ca78

08008364 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void* context )
{
 8008364:	b5b0      	push	{r4, r5, r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
    volatile uint8_t irqFlags = 0;
 800836c:	230d      	movs	r3, #13
 800836e:	18fb      	adds	r3, r7, r3
 8008370:	2200      	movs	r2, #0
 8008372:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 8008374:	4bca      	ldr	r3, [pc, #808]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 8008376:	791b      	ldrb	r3, [r3, #4]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d003      	beq.n	8008384 <SX1276OnDio0Irq+0x20>
 800837c:	2b02      	cmp	r3, #2
 800837e:	d100      	bne.n	8008382 <SX1276OnDio0Irq+0x1e>
 8008380:	e1f2      	b.n	8008768 <SX1276OnDio0Irq+0x404>
                }
                break;
            }
            break;
        default:
            break;
 8008382:	e20f      	b.n	80087a4 <SX1276OnDio0Irq+0x440>
            switch( SX1276.Settings.Modem )
 8008384:	4bc6      	ldr	r3, [pc, #792]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 8008386:	795b      	ldrb	r3, [r3, #5]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <SX1276OnDio0Irq+0x30>
 800838c:	2b01      	cmp	r3, #1
 800838e:	d100      	bne.n	8008392 <SX1276OnDio0Irq+0x2e>
 8008390:	e0eb      	b.n	800856a <SX1276OnDio0Irq+0x206>
                break;
 8008392:	e1e8      	b.n	8008766 <SX1276OnDio0Irq+0x402>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8008394:	4bc2      	ldr	r3, [pc, #776]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 8008396:	2224      	movs	r2, #36	; 0x24
 8008398:	5c9b      	ldrb	r3, [r3, r2]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d057      	beq.n	800844e <SX1276OnDio0Irq+0xea>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800839e:	203f      	movs	r0, #63	; 0x3f
 80083a0:	f7ff fe10 	bl	8007fc4 <SX1276Read>
 80083a4:	0003      	movs	r3, r0
 80083a6:	001a      	movs	r2, r3
 80083a8:	210d      	movs	r1, #13
 80083aa:	187b      	adds	r3, r7, r1
 80083ac:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80083ae:	187b      	adds	r3, r7, r1
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	001a      	movs	r2, r3
 80083b6:	2302      	movs	r3, #2
 80083b8:	4013      	ands	r3, r2
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d047      	beq.n	800844e <SX1276OnDio0Irq+0xea>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80083be:	210b      	movs	r1, #11
 80083c0:	203e      	movs	r0, #62	; 0x3e
 80083c2:	f7ff fdeb 	bl	8007f9c <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80083c6:	2110      	movs	r1, #16
 80083c8:	203f      	movs	r0, #63	; 0x3f
 80083ca:	f7ff fde7 	bl	8007f9c <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80083ce:	4bb5      	ldr	r3, [pc, #724]	; (80086a4 <SX1276OnDio0Irq+0x340>)
 80083d0:	0018      	movs	r0, r3
 80083d2:	f012 fe53 	bl	801b07c <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80083d6:	4bb2      	ldr	r3, [pc, #712]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 80083d8:	2226      	movs	r2, #38	; 0x26
 80083da:	5c9b      	ldrb	r3, [r3, r2]
 80083dc:	2201      	movs	r2, #1
 80083de:	4053      	eors	r3, r2
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d007      	beq.n	80083f6 <SX1276OnDio0Irq+0x92>
                            TimerStop( &RxTimeoutSyncWord );
 80083e6:	4bb0      	ldr	r3, [pc, #704]	; (80086a8 <SX1276OnDio0Irq+0x344>)
 80083e8:	0018      	movs	r0, r3
 80083ea:	f012 fe47 	bl	801b07c <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 80083ee:	4bac      	ldr	r3, [pc, #688]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	711a      	strb	r2, [r3, #4]
 80083f4:	e00f      	b.n	8008416 <SX1276OnDio0Irq+0xb2>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80083f6:	200d      	movs	r0, #13
 80083f8:	f7ff fde4 	bl	8007fc4 <SX1276Read>
 80083fc:	0003      	movs	r3, r0
 80083fe:	001a      	movs	r2, r3
 8008400:	2340      	movs	r3, #64	; 0x40
 8008402:	4313      	orrs	r3, r2
 8008404:	b2db      	uxtb	r3, r3
 8008406:	0019      	movs	r1, r3
 8008408:	200d      	movs	r0, #13
 800840a:	f7ff fdc7 	bl	8007f9c <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 800840e:	4ba6      	ldr	r3, [pc, #664]	; (80086a8 <SX1276OnDio0Irq+0x344>)
 8008410:	0018      	movs	r0, r3
 8008412:	f012 fd5b 	bl	801aecc <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8008416:	4ba5      	ldr	r3, [pc, #660]	; (80086ac <SX1276OnDio0Irq+0x348>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d008      	beq.n	8008430 <SX1276OnDio0Irq+0xcc>
 800841e:	4ba3      	ldr	r3, [pc, #652]	; (80086ac <SX1276OnDio0Irq+0x348>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <SX1276OnDio0Irq+0xcc>
                            RadioEvents->RxError( );
 8008428:	4ba0      	ldr	r3, [pc, #640]	; (80086ac <SX1276OnDio0Irq+0x348>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8008430:	4b9b      	ldr	r3, [pc, #620]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 8008432:	2230      	movs	r2, #48	; 0x30
 8008434:	2100      	movs	r1, #0
 8008436:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8008438:	4b99      	ldr	r3, [pc, #612]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 800843a:	2231      	movs	r2, #49	; 0x31
 800843c:	2100      	movs	r1, #0
 800843e:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8008440:	4b97      	ldr	r3, [pc, #604]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 8008442:	2200      	movs	r2, #0
 8008444:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8008446:	4b96      	ldr	r3, [pc, #600]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 8008448:	2200      	movs	r2, #0
 800844a:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 800844c:	e18b      	b.n	8008766 <SX1276OnDio0Irq+0x402>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800844e:	4b94      	ldr	r3, [pc, #592]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 8008450:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8008452:	2b00      	cmp	r3, #0
 8008454:	d12d      	bne.n	80084b2 <SX1276OnDio0Irq+0x14e>
 8008456:	4b92      	ldr	r3, [pc, #584]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 8008458:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800845a:	2b00      	cmp	r3, #0
 800845c:	d129      	bne.n	80084b2 <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800845e:	4b90      	ldr	r3, [pc, #576]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 8008460:	2222      	movs	r2, #34	; 0x22
 8008462:	5c9b      	ldrb	r3, [r3, r2]
 8008464:	2201      	movs	r2, #1
 8008466:	4053      	eors	r3, r2
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d005      	beq.n	800847a <SX1276OnDio0Irq+0x116>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800846e:	4b90      	ldr	r3, [pc, #576]	; (80086b0 <SX1276OnDio0Irq+0x34c>)
 8008470:	2101      	movs	r1, #1
 8008472:	0018      	movs	r0, r3
 8008474:	f7ff fe52 	bl	800811c <SX1276ReadFifo>
 8008478:	e006      	b.n	8008488 <SX1276OnDio0Irq+0x124>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800847a:	2032      	movs	r0, #50	; 0x32
 800847c:	f7ff fda2 	bl	8007fc4 <SX1276Read>
 8008480:	0003      	movs	r3, r0
 8008482:	b29a      	uxth	r2, r3
 8008484:	4b86      	ldr	r3, [pc, #536]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 8008486:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008488:	4b85      	ldr	r3, [pc, #532]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 800848a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800848c:	001a      	movs	r2, r3
 800848e:	4b89      	ldr	r3, [pc, #548]	; (80086b4 <SX1276OnDio0Irq+0x350>)
 8008490:	18d0      	adds	r0, r2, r3
 8008492:	4b83      	ldr	r3, [pc, #524]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 8008494:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8008496:	b2da      	uxtb	r2, r3
 8008498:	4b81      	ldr	r3, [pc, #516]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 800849a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800849c:	b2db      	uxtb	r3, r3
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	0019      	movs	r1, r3
 80084a4:	f7ff fe3a 	bl	800811c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80084a8:	4b7d      	ldr	r3, [pc, #500]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 80084aa:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80084ac:	4b7c      	ldr	r3, [pc, #496]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 80084ae:	879a      	strh	r2, [r3, #60]	; 0x3c
 80084b0:	e013      	b.n	80084da <SX1276OnDio0Irq+0x176>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80084b2:	4b7b      	ldr	r3, [pc, #492]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 80084b4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80084b6:	001a      	movs	r2, r3
 80084b8:	4b7e      	ldr	r3, [pc, #504]	; (80086b4 <SX1276OnDio0Irq+0x350>)
 80084ba:	18d0      	adds	r0, r2, r3
 80084bc:	4b78      	ldr	r3, [pc, #480]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 80084be:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	4b77      	ldr	r3, [pc, #476]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 80084c4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	0019      	movs	r1, r3
 80084ce:	f7ff fe25 	bl	800811c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80084d2:	4b73      	ldr	r3, [pc, #460]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 80084d4:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80084d6:	4b72      	ldr	r3, [pc, #456]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 80084d8:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 80084da:	4b72      	ldr	r3, [pc, #456]	; (80086a4 <SX1276OnDio0Irq+0x340>)
 80084dc:	0018      	movs	r0, r3
 80084de:	f012 fdcd 	bl	801b07c <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80084e2:	4b6f      	ldr	r3, [pc, #444]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 80084e4:	2226      	movs	r2, #38	; 0x26
 80084e6:	5c9b      	ldrb	r3, [r3, r2]
 80084e8:	2201      	movs	r2, #1
 80084ea:	4053      	eors	r3, r2
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d007      	beq.n	8008502 <SX1276OnDio0Irq+0x19e>
                    SX1276.Settings.State = RF_IDLE;
 80084f2:	4b6b      	ldr	r3, [pc, #428]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 80084f8:	4b6b      	ldr	r3, [pc, #428]	; (80086a8 <SX1276OnDio0Irq+0x344>)
 80084fa:	0018      	movs	r0, r3
 80084fc:	f012 fdbe 	bl	801b07c <TimerStop>
 8008500:	e00f      	b.n	8008522 <SX1276OnDio0Irq+0x1be>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8008502:	200d      	movs	r0, #13
 8008504:	f7ff fd5e 	bl	8007fc4 <SX1276Read>
 8008508:	0003      	movs	r3, r0
 800850a:	001a      	movs	r2, r3
 800850c:	2340      	movs	r3, #64	; 0x40
 800850e:	4313      	orrs	r3, r2
 8008510:	b2db      	uxtb	r3, r3
 8008512:	0019      	movs	r1, r3
 8008514:	200d      	movs	r0, #13
 8008516:	f7ff fd41 	bl	8007f9c <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 800851a:	4b63      	ldr	r3, [pc, #396]	; (80086a8 <SX1276OnDio0Irq+0x344>)
 800851c:	0018      	movs	r0, r3
 800851e:	f012 fcd5 	bl	801aecc <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8008522:	4b62      	ldr	r3, [pc, #392]	; (80086ac <SX1276OnDio0Irq+0x348>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d010      	beq.n	800854c <SX1276OnDio0Irq+0x1e8>
 800852a:	4b60      	ldr	r3, [pc, #384]	; (80086ac <SX1276OnDio0Irq+0x348>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8008534:	4b5d      	ldr	r3, [pc, #372]	; (80086ac <SX1276OnDio0Irq+0x348>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	689c      	ldr	r4, [r3, #8]
 800853a:	4b59      	ldr	r3, [pc, #356]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 800853c:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 800853e:	4b58      	ldr	r3, [pc, #352]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 8008540:	2232      	movs	r2, #50	; 0x32
 8008542:	569b      	ldrsb	r3, [r3, r2]
 8008544:	b21a      	sxth	r2, r3
 8008546:	485b      	ldr	r0, [pc, #364]	; (80086b4 <SX1276OnDio0Irq+0x350>)
 8008548:	2300      	movs	r3, #0
 800854a:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800854c:	4b54      	ldr	r3, [pc, #336]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 800854e:	2230      	movs	r2, #48	; 0x30
 8008550:	2100      	movs	r1, #0
 8008552:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8008554:	4b52      	ldr	r3, [pc, #328]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 8008556:	2231      	movs	r2, #49	; 0x31
 8008558:	2100      	movs	r1, #0
 800855a:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800855c:	4b50      	ldr	r3, [pc, #320]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 800855e:	2200      	movs	r2, #0
 8008560:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 8008562:	4b4f      	ldr	r3, [pc, #316]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 8008564:	2200      	movs	r2, #0
 8008566:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 8008568:	e0fd      	b.n	8008766 <SX1276OnDio0Irq+0x402>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800856a:	2140      	movs	r1, #64	; 0x40
 800856c:	2012      	movs	r0, #18
 800856e:	f7ff fd15 	bl	8007f9c <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8008572:	2012      	movs	r0, #18
 8008574:	f7ff fd26 	bl	8007fc4 <SX1276Read>
 8008578:	0003      	movs	r3, r0
 800857a:	001a      	movs	r2, r3
 800857c:	210d      	movs	r1, #13
 800857e:	187b      	adds	r3, r7, r1
 8008580:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8008582:	187b      	adds	r3, r7, r1
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	b2db      	uxtb	r3, r3
 8008588:	001a      	movs	r2, r3
 800858a:	2320      	movs	r3, #32
 800858c:	4013      	ands	r3, r2
 800858e:	2b20      	cmp	r3, #32
 8008590:	d122      	bne.n	80085d8 <SX1276OnDio0Irq+0x274>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8008592:	2120      	movs	r1, #32
 8008594:	2012      	movs	r0, #18
 8008596:	f7ff fd01 	bl	8007f9c <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800859a:	4b41      	ldr	r3, [pc, #260]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 800859c:	2256      	movs	r2, #86	; 0x56
 800859e:	5c9b      	ldrb	r3, [r3, r2]
 80085a0:	2201      	movs	r2, #1
 80085a2:	4053      	eors	r3, r2
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d002      	beq.n	80085b0 <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 80085aa:	4b3d      	ldr	r3, [pc, #244]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 80085b0:	4b3c      	ldr	r3, [pc, #240]	; (80086a4 <SX1276OnDio0Irq+0x340>)
 80085b2:	0018      	movs	r0, r3
 80085b4:	f012 fd62 	bl	801b07c <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80085b8:	4b3c      	ldr	r3, [pc, #240]	; (80086ac <SX1276OnDio0Irq+0x348>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d100      	bne.n	80085c2 <SX1276OnDio0Irq+0x25e>
 80085c0:	e0ce      	b.n	8008760 <SX1276OnDio0Irq+0x3fc>
 80085c2:	4b3a      	ldr	r3, [pc, #232]	; (80086ac <SX1276OnDio0Irq+0x348>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d100      	bne.n	80085ce <SX1276OnDio0Irq+0x26a>
 80085cc:	e0c8      	b.n	8008760 <SX1276OnDio0Irq+0x3fc>
                            RadioEvents->RxError( );
 80085ce:	4b37      	ldr	r3, [pc, #220]	; (80086ac <SX1276OnDio0Irq+0x348>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	4798      	blx	r3
                        break;
 80085d6:	e0c3      	b.n	8008760 <SX1276OnDio0Irq+0x3fc>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80085d8:	2019      	movs	r0, #25
 80085da:	f7ff fcf3 	bl	8007fc4 <SX1276Read>
 80085de:	0003      	movs	r3, r0
 80085e0:	b25b      	sxtb	r3, r3
 80085e2:	3302      	adds	r3, #2
 80085e4:	109b      	asrs	r3, r3, #2
 80085e6:	b259      	sxtb	r1, r3
 80085e8:	4b2d      	ldr	r3, [pc, #180]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 80085ea:	2260      	movs	r2, #96	; 0x60
 80085ec:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 80085ee:	201a      	movs	r0, #26
 80085f0:	f7ff fce8 	bl	8007fc4 <SX1276Read>
 80085f4:	0003      	movs	r3, r0
 80085f6:	001a      	movs	r2, r3
 80085f8:	230e      	movs	r3, #14
 80085fa:	18fb      	adds	r3, r7, r3
 80085fc:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80085fe:	4b28      	ldr	r3, [pc, #160]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 8008600:	2260      	movs	r2, #96	; 0x60
 8008602:	569b      	ldrsb	r3, [r3, r2]
 8008604:	2b00      	cmp	r3, #0
 8008606:	da34      	bge.n	8008672 <SX1276OnDio0Irq+0x30e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8008608:	4b25      	ldr	r3, [pc, #148]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	4a2a      	ldr	r2, [pc, #168]	; (80086b8 <SX1276OnDio0Irq+0x354>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d917      	bls.n	8008642 <SX1276OnDio0Irq+0x2de>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8008612:	210e      	movs	r1, #14
 8008614:	187b      	adds	r3, r7, r1
 8008616:	2200      	movs	r2, #0
 8008618:	5e9b      	ldrsh	r3, [r3, r2]
 800861a:	111b      	asrs	r3, r3, #4
 800861c:	b21b      	sxth	r3, r3
 800861e:	b29a      	uxth	r2, r3
 8008620:	187b      	adds	r3, r7, r1
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	18d3      	adds	r3, r2, r3
 8008626:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8008628:	4b1d      	ldr	r3, [pc, #116]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 800862a:	2160      	movs	r1, #96	; 0x60
 800862c:	565b      	ldrsb	r3, [r3, r1]
 800862e:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8008630:	18d3      	adds	r3, r2, r3
 8008632:	b29b      	uxth	r3, r3
 8008634:	3b9d      	subs	r3, #157	; 0x9d
 8008636:	b29b      	uxth	r3, r3
 8008638:	b219      	sxth	r1, r3
 800863a:	4b19      	ldr	r3, [pc, #100]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 800863c:	2262      	movs	r2, #98	; 0x62
 800863e:	5299      	strh	r1, [r3, r2]
 8008640:	e04d      	b.n	80086de <SX1276OnDio0Irq+0x37a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8008642:	210e      	movs	r1, #14
 8008644:	187b      	adds	r3, r7, r1
 8008646:	2200      	movs	r2, #0
 8008648:	5e9b      	ldrsh	r3, [r3, r2]
 800864a:	111b      	asrs	r3, r3, #4
 800864c:	b21b      	sxth	r3, r3
 800864e:	b29a      	uxth	r2, r3
 8008650:	187b      	adds	r3, r7, r1
 8008652:	881b      	ldrh	r3, [r3, #0]
 8008654:	18d3      	adds	r3, r2, r3
 8008656:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8008658:	4b11      	ldr	r3, [pc, #68]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 800865a:	2160      	movs	r1, #96	; 0x60
 800865c:	565b      	ldrsb	r3, [r3, r1]
 800865e:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8008660:	18d3      	adds	r3, r2, r3
 8008662:	b29b      	uxth	r3, r3
 8008664:	3ba4      	subs	r3, #164	; 0xa4
 8008666:	b29b      	uxth	r3, r3
 8008668:	b219      	sxth	r1, r3
 800866a:	4b0d      	ldr	r3, [pc, #52]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 800866c:	2262      	movs	r2, #98	; 0x62
 800866e:	5299      	strh	r1, [r3, r2]
 8008670:	e035      	b.n	80086de <SX1276OnDio0Irq+0x37a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8008672:	4b0b      	ldr	r3, [pc, #44]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	4a10      	ldr	r2, [pc, #64]	; (80086b8 <SX1276OnDio0Irq+0x354>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d91f      	bls.n	80086bc <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800867c:	210e      	movs	r1, #14
 800867e:	187b      	adds	r3, r7, r1
 8008680:	2200      	movs	r2, #0
 8008682:	5e9b      	ldrsh	r3, [r3, r2]
 8008684:	111b      	asrs	r3, r3, #4
 8008686:	b21b      	sxth	r3, r3
 8008688:	b29a      	uxth	r2, r3
 800868a:	187b      	adds	r3, r7, r1
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	18d3      	adds	r3, r2, r3
 8008690:	b29b      	uxth	r3, r3
 8008692:	3b9d      	subs	r3, #157	; 0x9d
 8008694:	b29b      	uxth	r3, r3
 8008696:	b219      	sxth	r1, r3
 8008698:	4b01      	ldr	r3, [pc, #4]	; (80086a0 <SX1276OnDio0Irq+0x33c>)
 800869a:	2262      	movs	r2, #98	; 0x62
 800869c:	5299      	strh	r1, [r3, r2]
 800869e:	e01e      	b.n	80086de <SX1276OnDio0Irq+0x37a>
 80086a0:	200015bc 	.word	0x200015bc
 80086a4:	20001624 	.word	0x20001624
 80086a8:	200015a4 	.word	0x200015a4
 80086ac:	2000041c 	.word	0x2000041c
 80086b0:	200015f6 	.word	0x200015f6
 80086b4:	20000420 	.word	0x20000420
 80086b8:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80086bc:	210e      	movs	r1, #14
 80086be:	187b      	adds	r3, r7, r1
 80086c0:	2200      	movs	r2, #0
 80086c2:	5e9b      	ldrsh	r3, [r3, r2]
 80086c4:	111b      	asrs	r3, r3, #4
 80086c6:	b21b      	sxth	r3, r3
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	187b      	adds	r3, r7, r1
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	18d3      	adds	r3, r2, r3
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	3ba4      	subs	r3, #164	; 0xa4
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	b219      	sxth	r1, r3
 80086d8:	4b34      	ldr	r3, [pc, #208]	; (80087ac <SX1276OnDio0Irq+0x448>)
 80086da:	2262      	movs	r2, #98	; 0x62
 80086dc:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80086de:	2013      	movs	r0, #19
 80086e0:	f7ff fc70 	bl	8007fc4 <SX1276Read>
 80086e4:	0003      	movs	r3, r0
 80086e6:	0019      	movs	r1, r3
 80086e8:	4b30      	ldr	r3, [pc, #192]	; (80087ac <SX1276OnDio0Irq+0x448>)
 80086ea:	2264      	movs	r2, #100	; 0x64
 80086ec:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 80086ee:	2010      	movs	r0, #16
 80086f0:	f7ff fc68 	bl	8007fc4 <SX1276Read>
 80086f4:	0003      	movs	r3, r0
 80086f6:	0019      	movs	r1, r3
 80086f8:	200d      	movs	r0, #13
 80086fa:	f7ff fc4f 	bl	8007f9c <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80086fe:	4b2b      	ldr	r3, [pc, #172]	; (80087ac <SX1276OnDio0Irq+0x448>)
 8008700:	2264      	movs	r2, #100	; 0x64
 8008702:	5c9a      	ldrb	r2, [r3, r2]
 8008704:	4b2a      	ldr	r3, [pc, #168]	; (80087b0 <SX1276OnDio0Irq+0x44c>)
 8008706:	0011      	movs	r1, r2
 8008708:	0018      	movs	r0, r3
 800870a:	f7ff fd07 	bl	800811c <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 800870e:	4b27      	ldr	r3, [pc, #156]	; (80087ac <SX1276OnDio0Irq+0x448>)
 8008710:	2256      	movs	r2, #86	; 0x56
 8008712:	5c9b      	ldrb	r3, [r3, r2]
 8008714:	2201      	movs	r2, #1
 8008716:	4053      	eors	r3, r2
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d002      	beq.n	8008724 <SX1276OnDio0Irq+0x3c0>
                        SX1276.Settings.State = RF_IDLE;
 800871e:	4b23      	ldr	r3, [pc, #140]	; (80087ac <SX1276OnDio0Irq+0x448>)
 8008720:	2200      	movs	r2, #0
 8008722:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 8008724:	4b23      	ldr	r3, [pc, #140]	; (80087b4 <SX1276OnDio0Irq+0x450>)
 8008726:	0018      	movs	r0, r3
 8008728:	f012 fca8 	bl	801b07c <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800872c:	4b22      	ldr	r3, [pc, #136]	; (80087b8 <SX1276OnDio0Irq+0x454>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d017      	beq.n	8008764 <SX1276OnDio0Irq+0x400>
 8008734:	4b20      	ldr	r3, [pc, #128]	; (80087b8 <SX1276OnDio0Irq+0x454>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d012      	beq.n	8008764 <SX1276OnDio0Irq+0x400>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800873e:	4b1e      	ldr	r3, [pc, #120]	; (80087b8 <SX1276OnDio0Irq+0x454>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689c      	ldr	r4, [r3, #8]
 8008744:	4b19      	ldr	r3, [pc, #100]	; (80087ac <SX1276OnDio0Irq+0x448>)
 8008746:	2264      	movs	r2, #100	; 0x64
 8008748:	5c9b      	ldrb	r3, [r3, r2]
 800874a:	b299      	uxth	r1, r3
 800874c:	4b17      	ldr	r3, [pc, #92]	; (80087ac <SX1276OnDio0Irq+0x448>)
 800874e:	2262      	movs	r2, #98	; 0x62
 8008750:	5e9d      	ldrsh	r5, [r3, r2]
 8008752:	4b16      	ldr	r3, [pc, #88]	; (80087ac <SX1276OnDio0Irq+0x448>)
 8008754:	2260      	movs	r2, #96	; 0x60
 8008756:	569b      	ldrsb	r3, [r3, r2]
 8008758:	4815      	ldr	r0, [pc, #84]	; (80087b0 <SX1276OnDio0Irq+0x44c>)
 800875a:	002a      	movs	r2, r5
 800875c:	47a0      	blx	r4
                break;
 800875e:	e001      	b.n	8008764 <SX1276OnDio0Irq+0x400>
                        break;
 8008760:	46c0      	nop			; (mov r8, r8)
 8008762:	e01f      	b.n	80087a4 <SX1276OnDio0Irq+0x440>
                break;
 8008764:	46c0      	nop			; (mov r8, r8)
            break;
 8008766:	e01d      	b.n	80087a4 <SX1276OnDio0Irq+0x440>
            TimerStop( &TxTimeoutTimer );
 8008768:	4b14      	ldr	r3, [pc, #80]	; (80087bc <SX1276OnDio0Irq+0x458>)
 800876a:	0018      	movs	r0, r3
 800876c:	f012 fc86 	bl	801b07c <TimerStop>
            switch( SX1276.Settings.Modem )
 8008770:	4b0e      	ldr	r3, [pc, #56]	; (80087ac <SX1276OnDio0Irq+0x448>)
 8008772:	795b      	ldrb	r3, [r3, #5]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d103      	bne.n	8008780 <SX1276OnDio0Irq+0x41c>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8008778:	2108      	movs	r1, #8
 800877a:	2012      	movs	r0, #18
 800877c:	f7ff fc0e 	bl	8007f9c <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8008780:	4b0a      	ldr	r3, [pc, #40]	; (80087ac <SX1276OnDio0Irq+0x448>)
 8008782:	2200      	movs	r2, #0
 8008784:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8008786:	4b0c      	ldr	r3, [pc, #48]	; (80087b8 <SX1276OnDio0Irq+0x454>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d008      	beq.n	80087a0 <SX1276OnDio0Irq+0x43c>
 800878e:	4b0a      	ldr	r3, [pc, #40]	; (80087b8 <SX1276OnDio0Irq+0x454>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <SX1276OnDio0Irq+0x43c>
                    RadioEvents->TxDone( );
 8008798:	4b07      	ldr	r3, [pc, #28]	; (80087b8 <SX1276OnDio0Irq+0x454>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4798      	blx	r3
                break;
 80087a0:	46c0      	nop			; (mov r8, r8)
            break;
 80087a2:	46c0      	nop			; (mov r8, r8)
    }
}
 80087a4:	46c0      	nop			; (mov r8, r8)
 80087a6:	46bd      	mov	sp, r7
 80087a8:	b004      	add	sp, #16
 80087aa:	bdb0      	pop	{r4, r5, r7, pc}
 80087ac:	200015bc 	.word	0x200015bc
 80087b0:	20000420 	.word	0x20000420
 80087b4:	20001624 	.word	0x20001624
 80087b8:	2000041c 	.word	0x2000041c
 80087bc:	2000158c 	.word	0x2000158c

080087c0 <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void* context )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 80087c8:	4b63      	ldr	r3, [pc, #396]	; (8008958 <SX1276OnDio1Irq+0x198>)
 80087ca:	791b      	ldrb	r3, [r3, #4]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d003      	beq.n	80087d8 <SX1276OnDio1Irq+0x18>
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d100      	bne.n	80087d6 <SX1276OnDio1Irq+0x16>
 80087d4:	e07c      	b.n	80088d0 <SX1276OnDio1Irq+0x110>
            default:
                break;
            }
            break;
        default:
            break;
 80087d6:	e0ba      	b.n	800894e <SX1276OnDio1Irq+0x18e>
            switch( SX1276.Settings.Modem )
 80087d8:	4b5f      	ldr	r3, [pc, #380]	; (8008958 <SX1276OnDio1Irq+0x198>)
 80087da:	795b      	ldrb	r3, [r3, #5]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <SX1276OnDio1Irq+0x26>
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d05b      	beq.n	800889c <SX1276OnDio1Irq+0xdc>
                break;
 80087e4:	e073      	b.n	80088ce <SX1276OnDio1Irq+0x10e>
                TimerStop( &RxTimeoutSyncWord );
 80087e6:	4b5d      	ldr	r3, [pc, #372]	; (800895c <SX1276OnDio1Irq+0x19c>)
 80087e8:	0018      	movs	r0, r3
 80087ea:	f012 fc47 	bl	801b07c <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80087ee:	4b5a      	ldr	r3, [pc, #360]	; (8008958 <SX1276OnDio1Irq+0x198>)
 80087f0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d118      	bne.n	8008828 <SX1276OnDio1Irq+0x68>
 80087f6:	4b58      	ldr	r3, [pc, #352]	; (8008958 <SX1276OnDio1Irq+0x198>)
 80087f8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d114      	bne.n	8008828 <SX1276OnDio1Irq+0x68>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80087fe:	4b56      	ldr	r3, [pc, #344]	; (8008958 <SX1276OnDio1Irq+0x198>)
 8008800:	2222      	movs	r2, #34	; 0x22
 8008802:	5c9b      	ldrb	r3, [r3, r2]
 8008804:	2201      	movs	r2, #1
 8008806:	4053      	eors	r3, r2
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d005      	beq.n	800881a <SX1276OnDio1Irq+0x5a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800880e:	4b54      	ldr	r3, [pc, #336]	; (8008960 <SX1276OnDio1Irq+0x1a0>)
 8008810:	2101      	movs	r1, #1
 8008812:	0018      	movs	r0, r3
 8008814:	f7ff fc82 	bl	800811c <SX1276ReadFifo>
 8008818:	e006      	b.n	8008828 <SX1276OnDio1Irq+0x68>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800881a:	2032      	movs	r0, #50	; 0x32
 800881c:	f7ff fbd2 	bl	8007fc4 <SX1276Read>
 8008820:	0003      	movs	r3, r0
 8008822:	b29a      	uxth	r2, r3
 8008824:	4b4c      	ldr	r3, [pc, #304]	; (8008958 <SX1276OnDio1Irq+0x198>)
 8008826:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8008828:	4b4b      	ldr	r3, [pc, #300]	; (8008958 <SX1276OnDio1Irq+0x198>)
 800882a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800882c:	001a      	movs	r2, r3
 800882e:	4b4a      	ldr	r3, [pc, #296]	; (8008958 <SX1276OnDio1Irq+0x198>)
 8008830:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	4a48      	ldr	r2, [pc, #288]	; (8008958 <SX1276OnDio1Irq+0x198>)
 8008836:	213e      	movs	r1, #62	; 0x3e
 8008838:	5c52      	ldrb	r2, [r2, r1]
 800883a:	4293      	cmp	r3, r2
 800883c:	db19      	blt.n	8008872 <SX1276OnDio1Irq+0xb2>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800883e:	4b46      	ldr	r3, [pc, #280]	; (8008958 <SX1276OnDio1Irq+0x198>)
 8008840:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008842:	001a      	movs	r2, r3
 8008844:	4b47      	ldr	r3, [pc, #284]	; (8008964 <SX1276OnDio1Irq+0x1a4>)
 8008846:	18d0      	adds	r0, r2, r3
 8008848:	4b43      	ldr	r3, [pc, #268]	; (8008958 <SX1276OnDio1Irq+0x198>)
 800884a:	223e      	movs	r2, #62	; 0x3e
 800884c:	5c9b      	ldrb	r3, [r3, r2]
 800884e:	3b01      	subs	r3, #1
 8008850:	b2db      	uxtb	r3, r3
 8008852:	0019      	movs	r1, r3
 8008854:	f7ff fc62 	bl	800811c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8008858:	4b3f      	ldr	r3, [pc, #252]	; (8008958 <SX1276OnDio1Irq+0x198>)
 800885a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800885c:	4b3e      	ldr	r3, [pc, #248]	; (8008958 <SX1276OnDio1Irq+0x198>)
 800885e:	213e      	movs	r1, #62	; 0x3e
 8008860:	5c5b      	ldrb	r3, [r3, r1]
 8008862:	b29b      	uxth	r3, r3
 8008864:	18d3      	adds	r3, r2, r3
 8008866:	b29b      	uxth	r3, r3
 8008868:	3b01      	subs	r3, #1
 800886a:	b29a      	uxth	r2, r3
 800886c:	4b3a      	ldr	r3, [pc, #232]	; (8008958 <SX1276OnDio1Irq+0x198>)
 800886e:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8008870:	e02d      	b.n	80088ce <SX1276OnDio1Irq+0x10e>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008872:	4b39      	ldr	r3, [pc, #228]	; (8008958 <SX1276OnDio1Irq+0x198>)
 8008874:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008876:	001a      	movs	r2, r3
 8008878:	4b3a      	ldr	r3, [pc, #232]	; (8008964 <SX1276OnDio1Irq+0x1a4>)
 800887a:	18d0      	adds	r0, r2, r3
 800887c:	4b36      	ldr	r3, [pc, #216]	; (8008958 <SX1276OnDio1Irq+0x198>)
 800887e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8008880:	b2da      	uxtb	r2, r3
 8008882:	4b35      	ldr	r3, [pc, #212]	; (8008958 <SX1276OnDio1Irq+0x198>)
 8008884:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008886:	b2db      	uxtb	r3, r3
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	b2db      	uxtb	r3, r3
 800888c:	0019      	movs	r1, r3
 800888e:	f7ff fc45 	bl	800811c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008892:	4b31      	ldr	r3, [pc, #196]	; (8008958 <SX1276OnDio1Irq+0x198>)
 8008894:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8008896:	4b30      	ldr	r3, [pc, #192]	; (8008958 <SX1276OnDio1Irq+0x198>)
 8008898:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 800889a:	e018      	b.n	80088ce <SX1276OnDio1Irq+0x10e>
                TimerStop( &RxTimeoutTimer );
 800889c:	4b32      	ldr	r3, [pc, #200]	; (8008968 <SX1276OnDio1Irq+0x1a8>)
 800889e:	0018      	movs	r0, r3
 80088a0:	f012 fbec 	bl	801b07c <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80088a4:	2180      	movs	r1, #128	; 0x80
 80088a6:	2012      	movs	r0, #18
 80088a8:	f7ff fb78 	bl	8007f9c <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80088ac:	4b2a      	ldr	r3, [pc, #168]	; (8008958 <SX1276OnDio1Irq+0x198>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80088b2:	4b2e      	ldr	r3, [pc, #184]	; (800896c <SX1276OnDio1Irq+0x1ac>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d008      	beq.n	80088cc <SX1276OnDio1Irq+0x10c>
 80088ba:	4b2c      	ldr	r3, [pc, #176]	; (800896c <SX1276OnDio1Irq+0x1ac>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d003      	beq.n	80088cc <SX1276OnDio1Irq+0x10c>
                    RadioEvents->RxTimeout( );
 80088c4:	4b29      	ldr	r3, [pc, #164]	; (800896c <SX1276OnDio1Irq+0x1ac>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	4798      	blx	r3
                break;
 80088cc:	46c0      	nop			; (mov r8, r8)
            break;
 80088ce:	e03e      	b.n	800894e <SX1276OnDio1Irq+0x18e>
            switch( SX1276.Settings.Modem )
 80088d0:	4b21      	ldr	r3, [pc, #132]	; (8008958 <SX1276OnDio1Irq+0x198>)
 80088d2:	795b      	ldrb	r3, [r3, #5]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <SX1276OnDio1Irq+0x11e>
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d036      	beq.n	800894a <SX1276OnDio1Irq+0x18a>
                break;
 80088dc:	e036      	b.n	800894c <SX1276OnDio1Irq+0x18c>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80088de:	4b1e      	ldr	r3, [pc, #120]	; (8008958 <SX1276OnDio1Irq+0x198>)
 80088e0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80088e2:	001a      	movs	r2, r3
 80088e4:	4b1c      	ldr	r3, [pc, #112]	; (8008958 <SX1276OnDio1Irq+0x198>)
 80088e6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	4a1b      	ldr	r2, [pc, #108]	; (8008958 <SX1276OnDio1Irq+0x198>)
 80088ec:	213f      	movs	r1, #63	; 0x3f
 80088ee:	5c52      	ldrb	r2, [r2, r1]
 80088f0:	4293      	cmp	r3, r2
 80088f2:	dd15      	ble.n	8008920 <SX1276OnDio1Irq+0x160>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80088f4:	4b18      	ldr	r3, [pc, #96]	; (8008958 <SX1276OnDio1Irq+0x198>)
 80088f6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80088f8:	001a      	movs	r2, r3
 80088fa:	4b1a      	ldr	r3, [pc, #104]	; (8008964 <SX1276OnDio1Irq+0x1a4>)
 80088fc:	18d0      	adds	r0, r2, r3
 80088fe:	4b16      	ldr	r3, [pc, #88]	; (8008958 <SX1276OnDio1Irq+0x198>)
 8008900:	223f      	movs	r2, #63	; 0x3f
 8008902:	5c9b      	ldrb	r3, [r3, r2]
 8008904:	0019      	movs	r1, r3
 8008906:	f7ff fbf7 	bl	80080f8 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800890a:	4b13      	ldr	r3, [pc, #76]	; (8008958 <SX1276OnDio1Irq+0x198>)
 800890c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800890e:	4b12      	ldr	r3, [pc, #72]	; (8008958 <SX1276OnDio1Irq+0x198>)
 8008910:	213f      	movs	r1, #63	; 0x3f
 8008912:	5c5b      	ldrb	r3, [r3, r1]
 8008914:	b29b      	uxth	r3, r3
 8008916:	18d3      	adds	r3, r2, r3
 8008918:	b29a      	uxth	r2, r3
 800891a:	4b0f      	ldr	r3, [pc, #60]	; (8008958 <SX1276OnDio1Irq+0x198>)
 800891c:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 800891e:	e015      	b.n	800894c <SX1276OnDio1Irq+0x18c>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8008920:	4b0d      	ldr	r3, [pc, #52]	; (8008958 <SX1276OnDio1Irq+0x198>)
 8008922:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008924:	001a      	movs	r2, r3
 8008926:	4b0f      	ldr	r3, [pc, #60]	; (8008964 <SX1276OnDio1Irq+0x1a4>)
 8008928:	18d0      	adds	r0, r2, r3
 800892a:	4b0b      	ldr	r3, [pc, #44]	; (8008958 <SX1276OnDio1Irq+0x198>)
 800892c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800892e:	b2da      	uxtb	r2, r3
 8008930:	4b09      	ldr	r3, [pc, #36]	; (8008958 <SX1276OnDio1Irq+0x198>)
 8008932:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008934:	b2db      	uxtb	r3, r3
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	b2db      	uxtb	r3, r3
 800893a:	0019      	movs	r1, r3
 800893c:	f7ff fbdc 	bl	80080f8 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8008940:	4b05      	ldr	r3, [pc, #20]	; (8008958 <SX1276OnDio1Irq+0x198>)
 8008942:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8008944:	4b04      	ldr	r3, [pc, #16]	; (8008958 <SX1276OnDio1Irq+0x198>)
 8008946:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8008948:	e000      	b.n	800894c <SX1276OnDio1Irq+0x18c>
                break;
 800894a:	46c0      	nop			; (mov r8, r8)
            break;
 800894c:	46c0      	nop			; (mov r8, r8)
    }
}
 800894e:	46c0      	nop			; (mov r8, r8)
 8008950:	46bd      	mov	sp, r7
 8008952:	b002      	add	sp, #8
 8008954:	bd80      	pop	{r7, pc}
 8008956:	46c0      	nop			; (mov r8, r8)
 8008958:	200015bc 	.word	0x200015bc
 800895c:	200015a4 	.word	0x200015a4
 8008960:	200015f6 	.word	0x200015f6
 8008964:	20000420 	.word	0x20000420
 8008968:	20001624 	.word	0x20001624
 800896c:	2000041c 	.word	0x2000041c

08008970 <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void* context )
{
 8008970:	b590      	push	{r4, r7, lr}
 8008972:	b087      	sub	sp, #28
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
    uint32_t afcChannel = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	617b      	str	r3, [r7, #20]

    switch( SX1276.Settings.State )
 800897c:	4b5c      	ldr	r3, [pc, #368]	; (8008af0 <SX1276OnDio2Irq+0x180>)
 800897e:	791b      	ldrb	r3, [r3, #4]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d003      	beq.n	800898c <SX1276OnDio2Irq+0x1c>
 8008984:	2b02      	cmp	r3, #2
 8008986:	d100      	bne.n	800898a <SX1276OnDio2Irq+0x1a>
 8008988:	e083      	b.n	8008a92 <SX1276OnDio2Irq+0x122>
            default:
                break;
            }
            break;
        default:
            break;
 800898a:	e0ad      	b.n	8008ae8 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 800898c:	4b58      	ldr	r3, [pc, #352]	; (8008af0 <SX1276OnDio2Irq+0x180>)
 800898e:	795b      	ldrb	r3, [r3, #5]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d002      	beq.n	800899a <SX1276OnDio2Irq+0x2a>
 8008994:	2b01      	cmp	r3, #1
 8008996:	d058      	beq.n	8008a4a <SX1276OnDio2Irq+0xda>
                break;
 8008998:	e07a      	b.n	8008a90 <SX1276OnDio2Irq+0x120>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800899a:	4b55      	ldr	r3, [pc, #340]	; (8008af0 <SX1276OnDio2Irq+0x180>)
 800899c:	2230      	movs	r2, #48	; 0x30
 800899e:	2101      	movs	r1, #1
 80089a0:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 80089a2:	4b53      	ldr	r3, [pc, #332]	; (8008af0 <SX1276OnDio2Irq+0x180>)
 80089a4:	2230      	movs	r2, #48	; 0x30
 80089a6:	5c9b      	ldrb	r3, [r3, r2]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d16e      	bne.n	8008a8a <SX1276OnDio2Irq+0x11a>
 80089ac:	4b50      	ldr	r3, [pc, #320]	; (8008af0 <SX1276OnDio2Irq+0x180>)
 80089ae:	2231      	movs	r2, #49	; 0x31
 80089b0:	5c9b      	ldrb	r3, [r3, r2]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d169      	bne.n	8008a8a <SX1276OnDio2Irq+0x11a>
                    TimerStop( &RxTimeoutSyncWord );
 80089b6:	4b4f      	ldr	r3, [pc, #316]	; (8008af4 <SX1276OnDio2Irq+0x184>)
 80089b8:	0018      	movs	r0, r3
 80089ba:	f012 fb5f 	bl	801b07c <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 80089be:	4b4c      	ldr	r3, [pc, #304]	; (8008af0 <SX1276OnDio2Irq+0x180>)
 80089c0:	2231      	movs	r2, #49	; 0x31
 80089c2:	2101      	movs	r1, #1
 80089c4:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80089c6:	2011      	movs	r0, #17
 80089c8:	f7ff fafc 	bl	8007fc4 <SX1276Read>
 80089cc:	0003      	movs	r3, r0
 80089ce:	085b      	lsrs	r3, r3, #1
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	425b      	negs	r3, r3
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	b259      	sxtb	r1, r3
 80089d8:	4b45      	ldr	r3, [pc, #276]	; (8008af0 <SX1276OnDio2Irq+0x180>)
 80089da:	2232      	movs	r2, #50	; 0x32
 80089dc:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80089de:	201b      	movs	r0, #27
 80089e0:	f7ff faf0 	bl	8007fc4 <SX1276Read>
 80089e4:	0003      	movs	r3, r0
 80089e6:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 80089e8:	201c      	movs	r0, #28
 80089ea:	f7ff faeb 	bl	8007fc4 <SX1276Read>
 80089ee:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80089f0:	4323      	orrs	r3, r4
 80089f2:	617b      	str	r3, [r7, #20]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	0a1b      	lsrs	r3, r3, #8
 80089f8:	613b      	str	r3, [r7, #16]
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	021b      	lsls	r3, r3, #8
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	6939      	ldr	r1, [r7, #16]
 8008a06:	000b      	movs	r3, r1
 8008a08:	015b      	lsls	r3, r3, #5
 8008a0a:	1a5b      	subs	r3, r3, r1
 8008a0c:	019a      	lsls	r2, r3, #6
 8008a0e:	1ad2      	subs	r2, r2, r3
 8008a10:	00d2      	lsls	r2, r2, #3
 8008a12:	1850      	adds	r0, r2, r1
 8008a14:	68f9      	ldr	r1, [r7, #12]
 8008a16:	000b      	movs	r3, r1
 8008a18:	015b      	lsls	r3, r3, #5
 8008a1a:	1a5b      	subs	r3, r3, r1
 8008a1c:	019a      	lsls	r2, r3, #6
 8008a1e:	1ad2      	subs	r2, r2, r3
 8008a20:	00d2      	lsls	r2, r2, #3
 8008a22:	1853      	adds	r3, r2, r1
 8008a24:	3380      	adds	r3, #128	; 0x80
 8008a26:	0a1b      	lsrs	r3, r3, #8
 8008a28:	18c3      	adds	r3, r0, r3
 8008a2a:	001a      	movs	r2, r3
 8008a2c:	4b30      	ldr	r3, [pc, #192]	; (8008af0 <SX1276OnDio2Irq+0x180>)
 8008a2e:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8008a30:	200c      	movs	r0, #12
 8008a32:	f7ff fac7 	bl	8007fc4 <SX1276Read>
 8008a36:	0003      	movs	r3, r0
 8008a38:	095b      	lsrs	r3, r3, #5
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2207      	movs	r2, #7
 8008a3e:	4013      	ands	r3, r2
 8008a40:	b2d9      	uxtb	r1, r3
 8008a42:	4b2b      	ldr	r3, [pc, #172]	; (8008af0 <SX1276OnDio2Irq+0x180>)
 8008a44:	2238      	movs	r2, #56	; 0x38
 8008a46:	5499      	strb	r1, [r3, r2]
                break;
 8008a48:	e01f      	b.n	8008a8a <SX1276OnDio2Irq+0x11a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008a4a:	4b29      	ldr	r3, [pc, #164]	; (8008af0 <SX1276OnDio2Irq+0x180>)
 8008a4c:	2253      	movs	r2, #83	; 0x53
 8008a4e:	5c9b      	ldrb	r3, [r3, r2]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d01c      	beq.n	8008a8e <SX1276OnDio2Irq+0x11e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8008a54:	2102      	movs	r1, #2
 8008a56:	2012      	movs	r0, #18
 8008a58:	f7ff faa0 	bl	8007f9c <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8008a5c:	4b26      	ldr	r3, [pc, #152]	; (8008af8 <SX1276OnDio2Irq+0x188>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d014      	beq.n	8008a8e <SX1276OnDio2Irq+0x11e>
 8008a64:	4b24      	ldr	r3, [pc, #144]	; (8008af8 <SX1276OnDio2Irq+0x188>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00f      	beq.n	8008a8e <SX1276OnDio2Irq+0x11e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8008a6e:	4b22      	ldr	r3, [pc, #136]	; (8008af8 <SX1276OnDio2Irq+0x188>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	695c      	ldr	r4, [r3, #20]
 8008a74:	201c      	movs	r0, #28
 8008a76:	f7ff faa5 	bl	8007fc4 <SX1276Read>
 8008a7a:	0003      	movs	r3, r0
 8008a7c:	001a      	movs	r2, r3
 8008a7e:	233f      	movs	r3, #63	; 0x3f
 8008a80:	4013      	ands	r3, r2
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	0018      	movs	r0, r3
 8008a86:	47a0      	blx	r4
                break;
 8008a88:	e001      	b.n	8008a8e <SX1276OnDio2Irq+0x11e>
                break;
 8008a8a:	46c0      	nop			; (mov r8, r8)
 8008a8c:	e02c      	b.n	8008ae8 <SX1276OnDio2Irq+0x178>
                break;
 8008a8e:	46c0      	nop			; (mov r8, r8)
            break;
 8008a90:	e02a      	b.n	8008ae8 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 8008a92:	4b17      	ldr	r3, [pc, #92]	; (8008af0 <SX1276OnDio2Irq+0x180>)
 8008a94:	795b      	ldrb	r3, [r3, #5]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d022      	beq.n	8008ae0 <SX1276OnDio2Irq+0x170>
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d000      	beq.n	8008aa0 <SX1276OnDio2Irq+0x130>
                break;
 8008a9e:	e022      	b.n	8008ae6 <SX1276OnDio2Irq+0x176>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8008aa0:	4b13      	ldr	r3, [pc, #76]	; (8008af0 <SX1276OnDio2Irq+0x180>)
 8008aa2:	2253      	movs	r2, #83	; 0x53
 8008aa4:	5c9b      	ldrb	r3, [r3, r2]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d01c      	beq.n	8008ae4 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8008aaa:	2102      	movs	r1, #2
 8008aac:	2012      	movs	r0, #18
 8008aae:	f7ff fa75 	bl	8007f9c <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8008ab2:	4b11      	ldr	r3, [pc, #68]	; (8008af8 <SX1276OnDio2Irq+0x188>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d014      	beq.n	8008ae4 <SX1276OnDio2Irq+0x174>
 8008aba:	4b0f      	ldr	r3, [pc, #60]	; (8008af8 <SX1276OnDio2Irq+0x188>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00f      	beq.n	8008ae4 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8008ac4:	4b0c      	ldr	r3, [pc, #48]	; (8008af8 <SX1276OnDio2Irq+0x188>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	695c      	ldr	r4, [r3, #20]
 8008aca:	201c      	movs	r0, #28
 8008acc:	f7ff fa7a 	bl	8007fc4 <SX1276Read>
 8008ad0:	0003      	movs	r3, r0
 8008ad2:	001a      	movs	r2, r3
 8008ad4:	233f      	movs	r3, #63	; 0x3f
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	0018      	movs	r0, r3
 8008adc:	47a0      	blx	r4
                break;
 8008ade:	e001      	b.n	8008ae4 <SX1276OnDio2Irq+0x174>
                break;
 8008ae0:	46c0      	nop			; (mov r8, r8)
 8008ae2:	e000      	b.n	8008ae6 <SX1276OnDio2Irq+0x176>
                break;
 8008ae4:	46c0      	nop			; (mov r8, r8)
            break;
 8008ae6:	46c0      	nop			; (mov r8, r8)
    }
}
 8008ae8:	46c0      	nop			; (mov r8, r8)
 8008aea:	46bd      	mov	sp, r7
 8008aec:	b007      	add	sp, #28
 8008aee:	bd90      	pop	{r4, r7, pc}
 8008af0:	200015bc 	.word	0x200015bc
 8008af4:	200015a4 	.word	0x200015a4
 8008af8:	2000041c 	.word	0x2000041c

08008afc <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void* context )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8008b04:	4b1e      	ldr	r3, [pc, #120]	; (8008b80 <SX1276OnDio3Irq+0x84>)
 8008b06:	795b      	ldrb	r3, [r3, #5]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d031      	beq.n	8008b70 <SX1276OnDio3Irq+0x74>
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d000      	beq.n	8008b12 <SX1276OnDio3Irq+0x16>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8008b10:	e031      	b.n	8008b76 <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8008b12:	2012      	movs	r0, #18
 8008b14:	f7ff fa56 	bl	8007fc4 <SX1276Read>
 8008b18:	0003      	movs	r3, r0
 8008b1a:	001a      	movs	r2, r3
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	4013      	ands	r3, r2
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d112      	bne.n	8008b4a <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8008b24:	2105      	movs	r1, #5
 8008b26:	2012      	movs	r0, #18
 8008b28:	f7ff fa38 	bl	8007f9c <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008b2c:	4b15      	ldr	r3, [pc, #84]	; (8008b84 <SX1276OnDio3Irq+0x88>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d01f      	beq.n	8008b74 <SX1276OnDio3Irq+0x78>
 8008b34:	4b13      	ldr	r3, [pc, #76]	; (8008b84 <SX1276OnDio3Irq+0x88>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	699b      	ldr	r3, [r3, #24]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d01a      	beq.n	8008b74 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 8008b3e:	4b11      	ldr	r3, [pc, #68]	; (8008b84 <SX1276OnDio3Irq+0x88>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	2001      	movs	r0, #1
 8008b46:	4798      	blx	r3
        break;
 8008b48:	e014      	b.n	8008b74 <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8008b4a:	2104      	movs	r1, #4
 8008b4c:	2012      	movs	r0, #18
 8008b4e:	f7ff fa25 	bl	8007f9c <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008b52:	4b0c      	ldr	r3, [pc, #48]	; (8008b84 <SX1276OnDio3Irq+0x88>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00c      	beq.n	8008b74 <SX1276OnDio3Irq+0x78>
 8008b5a:	4b0a      	ldr	r3, [pc, #40]	; (8008b84 <SX1276OnDio3Irq+0x88>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d007      	beq.n	8008b74 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 8008b64:	4b07      	ldr	r3, [pc, #28]	; (8008b84 <SX1276OnDio3Irq+0x88>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	699b      	ldr	r3, [r3, #24]
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	4798      	blx	r3
        break;
 8008b6e:	e001      	b.n	8008b74 <SX1276OnDio3Irq+0x78>
        break;
 8008b70:	46c0      	nop			; (mov r8, r8)
 8008b72:	e000      	b.n	8008b76 <SX1276OnDio3Irq+0x7a>
        break;
 8008b74:	46c0      	nop			; (mov r8, r8)
    }
}
 8008b76:	46c0      	nop			; (mov r8, r8)
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	b002      	add	sp, #8
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	46c0      	nop			; (mov r8, r8)
 8008b80:	200015bc 	.word	0x200015bc
 8008b84:	2000041c 	.word	0x2000041c

08008b88 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void* context )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8008b90:	4b0b      	ldr	r3, [pc, #44]	; (8008bc0 <SX1276OnDio4Irq+0x38>)
 8008b92:	795b      	ldrb	r3, [r3, #5]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <SX1276OnDio4Irq+0x16>
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d00a      	beq.n	8008bb2 <SX1276OnDio4Irq+0x2a>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8008b9c:	e00c      	b.n	8008bb8 <SX1276OnDio4Irq+0x30>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8008b9e:	4b08      	ldr	r3, [pc, #32]	; (8008bc0 <SX1276OnDio4Irq+0x38>)
 8008ba0:	2230      	movs	r2, #48	; 0x30
 8008ba2:	5c9b      	ldrb	r3, [r3, r2]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d106      	bne.n	8008bb6 <SX1276OnDio4Irq+0x2e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8008ba8:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <SX1276OnDio4Irq+0x38>)
 8008baa:	2230      	movs	r2, #48	; 0x30
 8008bac:	2101      	movs	r1, #1
 8008bae:	5499      	strb	r1, [r3, r2]
        break;
 8008bb0:	e001      	b.n	8008bb6 <SX1276OnDio4Irq+0x2e>
        break;
 8008bb2:	46c0      	nop			; (mov r8, r8)
 8008bb4:	e000      	b.n	8008bb8 <SX1276OnDio4Irq+0x30>
        break;
 8008bb6:	46c0      	nop			; (mov r8, r8)
    }
}
 8008bb8:	46c0      	nop			; (mov r8, r8)
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	b002      	add	sp, #8
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	200015bc 	.word	0x200015bc

08008bc4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008bca:	1dfb      	adds	r3, r7, #7
 8008bcc:	2200      	movs	r2, #0
 8008bce:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008bd0:	4b0b      	ldr	r3, [pc, #44]	; (8008c00 <HAL_Init+0x3c>)
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	4b0a      	ldr	r3, [pc, #40]	; (8008c00 <HAL_Init+0x3c>)
 8008bd6:	2102      	movs	r1, #2
 8008bd8:	430a      	orrs	r2, r1
 8008bda:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008bdc:	2003      	movs	r0, #3
 8008bde:	f7fc fa24 	bl	800502a <HAL_InitTick>
 8008be2:	1e03      	subs	r3, r0, #0
 8008be4:	d003      	beq.n	8008bee <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8008be6:	1dfb      	adds	r3, r7, #7
 8008be8:	2201      	movs	r2, #1
 8008bea:	701a      	strb	r2, [r3, #0]
 8008bec:	e001      	b.n	8008bf2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008bee:	f7fc fa31 	bl	8005054 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008bf2:	1dfb      	adds	r3, r7, #7
 8008bf4:	781b      	ldrb	r3, [r3, #0]
}
 8008bf6:	0018      	movs	r0, r3
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	b002      	add	sp, #8
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	46c0      	nop			; (mov r8, r8)
 8008c00:	40022000 	.word	0x40022000

08008c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0
  uwTick++;
 8008c08:	4b03      	ldr	r3, [pc, #12]	; (8008c18 <HAL_IncTick+0x14>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	1c5a      	adds	r2, r3, #1
 8008c0e:	4b02      	ldr	r3, [pc, #8]	; (8008c18 <HAL_IncTick+0x14>)
 8008c10:	601a      	str	r2, [r3, #0]
}
 8008c12:	46c0      	nop			; (mov r8, r8)
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	2000163c 	.word	0x2000163c

08008c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8008c20:	4b02      	ldr	r3, [pc, #8]	; (8008c2c <HAL_GetTick+0x10>)
 8008c22:	681b      	ldr	r3, [r3, #0]
}
 8008c24:	0018      	movs	r0, r3
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	46c0      	nop			; (mov r8, r8)
 8008c2c:	2000163c 	.word	0x2000163c

08008c30 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8008c34:	4b04      	ldr	r3, [pc, #16]	; (8008c48 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	4b03      	ldr	r3, [pc, #12]	; (8008c48 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	605a      	str	r2, [r3, #4]
}
 8008c40:	46c0      	nop			; (mov r8, r8)
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	46c0      	nop			; (mov r8, r8)
 8008c48:	40015800 	.word	0x40015800

08008c4c <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8008c50:	4b04      	ldr	r3, [pc, #16]	; (8008c64 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	4b03      	ldr	r3, [pc, #12]	; (8008c64 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8008c56:	2102      	movs	r1, #2
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	605a      	str	r2, [r3, #4]
}
 8008c5c:	46c0      	nop			; (mov r8, r8)
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	46c0      	nop			; (mov r8, r8)
 8008c64:	40015800 	.word	0x40015800

08008c68 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8008c6c:	4b04      	ldr	r3, [pc, #16]	; (8008c80 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	4b03      	ldr	r3, [pc, #12]	; (8008c80 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8008c72:	2104      	movs	r1, #4
 8008c74:	430a      	orrs	r2, r1
 8008c76:	605a      	str	r2, [r3, #4]
}
 8008c78:	46c0      	nop			; (mov r8, r8)
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	40015800 	.word	0x40015800

08008c84 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e159      	b.n	8008f4a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10a      	bne.n	8008cb4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2250      	movs	r2, #80	; 0x50
 8008ca8:	2100      	movs	r1, #0
 8008caa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	0018      	movs	r0, r3
 8008cb0:	f000 f9f8 	bl	80090a4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb8:	2210      	movs	r2, #16
 8008cba:	4013      	ands	r3, r2
 8008cbc:	2b10      	cmp	r3, #16
 8008cbe:	d005      	beq.n	8008ccc <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	2204      	movs	r2, #4
 8008cc8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8008cca:	d00b      	beq.n	8008ce4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd0:	2210      	movs	r2, #16
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2250      	movs	r2, #80	; 0x50
 8008cdc:	2100      	movs	r1, #0
 8008cde:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e132      	b.n	8008f4a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce8:	4a9a      	ldr	r2, [pc, #616]	; (8008f54 <HAL_ADC_Init+0x2d0>)
 8008cea:	4013      	ands	r3, r2
 8008cec:	2202      	movs	r2, #2
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	2203      	movs	r2, #3
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d108      	bne.n	8008d14 <HAL_ADC_Init+0x90>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d101      	bne.n	8008d14 <HAL_ADC_Init+0x90>
 8008d10:	2301      	movs	r3, #1
 8008d12:	e000      	b.n	8008d16 <HAL_ADC_Init+0x92>
 8008d14:	2300      	movs	r3, #0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d149      	bne.n	8008dae <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	23c0      	movs	r3, #192	; 0xc0
 8008d20:	061b      	lsls	r3, r3, #24
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d00b      	beq.n	8008d3e <HAL_ADC_Init+0xba>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	2380      	movs	r3, #128	; 0x80
 8008d2c:	05db      	lsls	r3, r3, #23
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d005      	beq.n	8008d3e <HAL_ADC_Init+0xba>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	2380      	movs	r3, #128	; 0x80
 8008d38:	061b      	lsls	r3, r3, #24
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d111      	bne.n	8008d62 <HAL_ADC_Init+0xde>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	691a      	ldr	r2, [r3, #16]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	0092      	lsls	r2, r2, #2
 8008d4a:	0892      	lsrs	r2, r2, #2
 8008d4c:	611a      	str	r2, [r3, #16]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6919      	ldr	r1, [r3, #16]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	430a      	orrs	r2, r1
 8008d5e:	611a      	str	r2, [r3, #16]
 8008d60:	e014      	b.n	8008d8c <HAL_ADC_Init+0x108>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	691a      	ldr	r2, [r3, #16]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	0092      	lsls	r2, r2, #2
 8008d6e:	0892      	lsrs	r2, r2, #2
 8008d70:	611a      	str	r2, [r3, #16]
 8008d72:	4b79      	ldr	r3, [pc, #484]	; (8008f58 <HAL_ADC_Init+0x2d4>)
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	4b78      	ldr	r3, [pc, #480]	; (8008f58 <HAL_ADC_Init+0x2d4>)
 8008d78:	4978      	ldr	r1, [pc, #480]	; (8008f5c <HAL_ADC_Init+0x2d8>)
 8008d7a:	400a      	ands	r2, r1
 8008d7c:	601a      	str	r2, [r3, #0]
 8008d7e:	4b76      	ldr	r3, [pc, #472]	; (8008f58 <HAL_ADC_Init+0x2d4>)
 8008d80:	6819      	ldr	r1, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	4b74      	ldr	r3, [pc, #464]	; (8008f58 <HAL_ADC_Init+0x2d4>)
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68da      	ldr	r2, [r3, #12]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2118      	movs	r1, #24
 8008d98:	438a      	bics	r2, r1
 8008d9a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68d9      	ldr	r1, [r3, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	689a      	ldr	r2, [r3, #8]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8008dae:	4b6a      	ldr	r3, [pc, #424]	; (8008f58 <HAL_ADC_Init+0x2d4>)
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	4b69      	ldr	r3, [pc, #420]	; (8008f58 <HAL_ADC_Init+0x2d4>)
 8008db4:	496a      	ldr	r1, [pc, #424]	; (8008f60 <HAL_ADC_Init+0x2dc>)
 8008db6:	400a      	ands	r2, r1
 8008db8:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8008dba:	4b67      	ldr	r3, [pc, #412]	; (8008f58 <HAL_ADC_Init+0x2d4>)
 8008dbc:	6819      	ldr	r1, [r3, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc2:	065a      	lsls	r2, r3, #25
 8008dc4:	4b64      	ldr	r3, [pc, #400]	; (8008f58 <HAL_ADC_Init+0x2d4>)
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689a      	ldr	r2, [r3, #8]
 8008dd0:	2380      	movs	r3, #128	; 0x80
 8008dd2:	055b      	lsls	r3, r3, #21
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	d108      	bne.n	8008dea <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689a      	ldr	r2, [r3, #8]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2180      	movs	r1, #128	; 0x80
 8008de4:	0549      	lsls	r1, r1, #21
 8008de6:	430a      	orrs	r2, r1
 8008de8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68da      	ldr	r2, [r3, #12]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	495b      	ldr	r1, [pc, #364]	; (8008f64 <HAL_ADC_Init+0x2e0>)
 8008df6:	400a      	ands	r2, r1
 8008df8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68d9      	ldr	r1, [r3, #12]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d101      	bne.n	8008e10 <HAL_ADC_Init+0x18c>
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	e000      	b.n	8008e12 <HAL_ADC_Init+0x18e>
 8008e10:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8008e12:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2020      	movs	r0, #32
 8008e18:	5c1b      	ldrb	r3, [r3, r0]
 8008e1a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8008e1c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	202c      	movs	r0, #44	; 0x2c
 8008e22:	5c1b      	ldrb	r3, [r3, r0]
 8008e24:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8008e26:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8008e2c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8008e34:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	69db      	ldr	r3, [r3, #28]
 8008e3a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8008e3c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e4a:	23c2      	movs	r3, #194	; 0xc2
 8008e4c:	33ff      	adds	r3, #255	; 0xff
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d00b      	beq.n	8008e6a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68d9      	ldr	r1, [r3, #12]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8008e60:	431a      	orrs	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2221      	movs	r2, #33	; 0x21
 8008e6e:	5c9b      	ldrb	r3, [r3, r2]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d11a      	bne.n	8008eaa <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2220      	movs	r2, #32
 8008e78:	5c9b      	ldrb	r3, [r3, r2]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d109      	bne.n	8008e92 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68da      	ldr	r2, [r3, #12]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2180      	movs	r1, #128	; 0x80
 8008e8a:	0249      	lsls	r1, r1, #9
 8008e8c:	430a      	orrs	r2, r1
 8008e8e:	60da      	str	r2, [r3, #12]
 8008e90:	e00b      	b.n	8008eaa <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e96:	2220      	movs	r2, #32
 8008e98:	431a      	orrs	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d11f      	bne.n	8008ef2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	691a      	ldr	r2, [r3, #16]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	492a      	ldr	r1, [pc, #168]	; (8008f68 <HAL_ADC_Init+0x2e4>)
 8008ebe:	400a      	ands	r2, r1
 8008ec0:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6919      	ldr	r1, [r3, #16]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8008ed0:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8008ed6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	430a      	orrs	r2, r1
 8008ede:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	691a      	ldr	r2, [r3, #16]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2101      	movs	r1, #1
 8008eec:	430a      	orrs	r2, r1
 8008eee:	611a      	str	r2, [r3, #16]
 8008ef0:	e00e      	b.n	8008f10 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	4013      	ands	r3, r2
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d107      	bne.n	8008f10 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	691a      	ldr	r2, [r3, #16]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2101      	movs	r1, #1
 8008f0c:	438a      	bics	r2, r1
 8008f0e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	695a      	ldr	r2, [r3, #20]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2107      	movs	r1, #7
 8008f1c:	438a      	bics	r2, r1
 8008f1e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6959      	ldr	r1, [r3, #20]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	430a      	orrs	r2, r1
 8008f30:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3c:	2203      	movs	r2, #3
 8008f3e:	4393      	bics	r3, r2
 8008f40:	2201      	movs	r2, #1
 8008f42:	431a      	orrs	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	0018      	movs	r0, r3
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	b002      	add	sp, #8
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	46c0      	nop			; (mov r8, r8)
 8008f54:	fffffefd 	.word	0xfffffefd
 8008f58:	40012708 	.word	0x40012708
 8008f5c:	ffc3ffff 	.word	0xffc3ffff
 8008f60:	fdffffff 	.word	0xfdffffff
 8008f64:	fffe0219 	.word	0xfffe0219
 8008f68:	fffffc03 	.word	0xfffffc03

08008f6c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8008f6c:	b5b0      	push	{r4, r5, r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008f74:	230f      	movs	r3, #15
 8008f76:	18fb      	adds	r3, r7, r3
 8008f78:	2200      	movs	r2, #0
 8008f7a:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d101      	bne.n	8008f86 <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e07e      	b.n	8009084 <HAL_ADC_DeInit+0x118>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8008f92:	250f      	movs	r5, #15
 8008f94:	197c      	adds	r4, r7, r5
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	0018      	movs	r0, r3
 8008f9a:	f000 facf 	bl	800953c <ADC_ConversionStop>
 8008f9e:	0003      	movs	r3, r0
 8008fa0:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8008fa2:	197b      	adds	r3, r7, r5
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d10e      	bne.n	8008fc8 <HAL_ADC_DeInit+0x5c>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8008faa:	250f      	movs	r5, #15
 8008fac:	197c      	adds	r4, r7, r5
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	0018      	movs	r0, r3
 8008fb2:	f000 fa63 	bl	800947c <ADC_Disable>
 8008fb6:	0003      	movs	r3, r0
 8008fb8:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 8008fba:	197b      	adds	r3, r7, r5
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d002      	beq.n	8008fc8 <HAL_ADC_DeInit+0x5c>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 8008fc8:	230f      	movs	r3, #15
 8008fca:	18fb      	adds	r3, r7, r3
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d051      	beq.n	8009076 <HAL_ADC_DeInit+0x10a>
  {
    
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	685a      	ldr	r2, [r3, #4]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	492b      	ldr	r1, [pc, #172]	; (800908c <HAL_ADC_DeInit+0x120>)
 8008fde:	400a      	ands	r2, r1
 8008fe0:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
  
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a2a      	ldr	r2, [pc, #168]	; (8009090 <HAL_ADC_DeInit+0x124>)
 8008fe8:	601a      	str	r2, [r3, #0]
    
    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689a      	ldr	r2, [r3, #8]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4927      	ldr	r1, [pc, #156]	; (8009094 <HAL_ADC_DeInit+0x128>)
 8008ff6:	400a      	ands	r2, r1
 8008ff8:	609a      	str	r2, [r3, #8]
    
    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */
    
    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68da      	ldr	r2, [r3, #12]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4924      	ldr	r1, [pc, #144]	; (8009098 <HAL_ADC_DeInit+0x12c>)
 8009006:	400a      	ands	r2, r1
 8009008:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
  
    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	691a      	ldr	r2, [r3, #16]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4921      	ldr	r1, [pc, #132]	; (800909c <HAL_ADC_DeInit+0x130>)
 8009016:	400a      	ands	r2, r1
 8009018:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
  
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	695a      	ldr	r2, [r3, #20]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2107      	movs	r1, #7
 8009026:	438a      	bics	r2, r1
 8009028:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6a1a      	ldr	r2, [r3, #32]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	491a      	ldr	r1, [pc, #104]	; (80090a0 <HAL_ADC_DeInit+0x134>)
 8009036:	400a      	ands	r2, r1
 8009038:	621a      	str	r2, [r3, #32]
    
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	22b4      	movs	r2, #180	; 0xb4
 8009040:	589a      	ldr	r2, [r3, r2]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	217f      	movs	r1, #127	; 0x7f
 8009048:	438a      	bics	r2, r1
 800904a:	21b4      	movs	r1, #180	; 0xb4
 800904c:	505a      	str	r2, [r3, r1]
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
  
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	22b4      	movs	r2, #180	; 0xb4
 8009054:	589a      	ldr	r2, [r3, r2]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	217f      	movs	r1, #127	; 0x7f
 800905c:	438a      	bics	r2, r1
 800905e:	21b4      	movs	r1, #180	; 0xb4
 8009060:	505a      	str	r2, [r3, r1]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	0018      	movs	r0, r3
 8009066:	f000 f825 	bl	80090b4 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2250      	movs	r2, #80	; 0x50
 800907a:	2100      	movs	r1, #0
 800907c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800907e:	230f      	movs	r3, #15
 8009080:	18fb      	adds	r3, r7, r3
 8009082:	781b      	ldrb	r3, [r3, #0]
}
 8009084:	0018      	movs	r0, r3
 8009086:	46bd      	mov	sp, r7
 8009088:	b004      	add	sp, #16
 800908a:	bdb0      	pop	{r4, r5, r7, pc}
 800908c:	fffff760 	.word	0xfffff760
 8009090:	0000089f 	.word	0x0000089f
 8009094:	efffffff 	.word	0xefffffff
 8009098:	833e0200 	.word	0x833e0200
 800909c:	3ffffc02 	.word	0x3ffffc02
 80090a0:	f000f000 	.word	0xf000f000

080090a4 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 80090ac:	46c0      	nop			; (mov r8, r8)
 80090ae:	46bd      	mov	sp, r7
 80090b0:	b002      	add	sp, #8
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <HAL_ADC_MspDeInit>:
  * @brief  DeInitialize the ADC MSP.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspDeInit must be implemented in the user file.
   */ 
}
 80090bc:	46c0      	nop			; (mov r8, r8)
 80090be:	46bd      	mov	sp, r7
 80090c0:	b002      	add	sp, #8
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80090c4:	b590      	push	{r4, r7, lr}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80090cc:	230f      	movs	r3, #15
 80090ce:	18fb      	adds	r3, r7, r3
 80090d0:	2200      	movs	r2, #0
 80090d2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	2204      	movs	r2, #4
 80090dc:	4013      	ands	r3, r2
 80090de:	d138      	bne.n	8009152 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2250      	movs	r2, #80	; 0x50
 80090e4:	5c9b      	ldrb	r3, [r3, r2]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d101      	bne.n	80090ee <HAL_ADC_Start+0x2a>
 80090ea:	2302      	movs	r3, #2
 80090ec:	e038      	b.n	8009160 <HAL_ADC_Start+0x9c>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2250      	movs	r2, #80	; 0x50
 80090f2:	2101      	movs	r1, #1
 80090f4:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	69db      	ldr	r3, [r3, #28]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d007      	beq.n	800910e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80090fe:	230f      	movs	r3, #15
 8009100:	18fc      	adds	r4, r7, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	0018      	movs	r0, r3
 8009106:	f000 f959 	bl	80093bc <ADC_Enable>
 800910a:	0003      	movs	r3, r0
 800910c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800910e:	230f      	movs	r3, #15
 8009110:	18fb      	adds	r3, r7, r3
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d120      	bne.n	800915a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800911c:	4a12      	ldr	r2, [pc, #72]	; (8009168 <HAL_ADC_Start+0xa4>)
 800911e:	4013      	ands	r3, r2
 8009120:	2280      	movs	r2, #128	; 0x80
 8009122:	0052      	lsls	r2, r2, #1
 8009124:	431a      	orrs	r2, r3
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2250      	movs	r2, #80	; 0x50
 8009134:	2100      	movs	r1, #0
 8009136:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	221c      	movs	r2, #28
 800913e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	689a      	ldr	r2, [r3, #8]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2104      	movs	r1, #4
 800914c:	430a      	orrs	r2, r1
 800914e:	609a      	str	r2, [r3, #8]
 8009150:	e003      	b.n	800915a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009152:	230f      	movs	r3, #15
 8009154:	18fb      	adds	r3, r7, r3
 8009156:	2202      	movs	r2, #2
 8009158:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800915a:	230f      	movs	r3, #15
 800915c:	18fb      	adds	r3, r7, r3
 800915e:	781b      	ldrb	r3, [r3, #0]
}
 8009160:	0018      	movs	r0, r3
 8009162:	46bd      	mov	sp, r7
 8009164:	b005      	add	sp, #20
 8009166:	bd90      	pop	{r4, r7, pc}
 8009168:	fffff0fe 	.word	0xfffff0fe

0800916c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800917a:	2300      	movs	r3, #0
 800917c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	2b08      	cmp	r3, #8
 8009184:	d102      	bne.n	800918c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8009186:	2308      	movs	r3, #8
 8009188:	60fb      	str	r3, [r7, #12]
 800918a:	e014      	b.n	80091b6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	2201      	movs	r2, #1
 8009194:	4013      	ands	r3, r2
 8009196:	2b01      	cmp	r3, #1
 8009198:	d10b      	bne.n	80091b2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800919e:	2220      	movs	r2, #32
 80091a0:	431a      	orrs	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2250      	movs	r2, #80	; 0x50
 80091aa:	2100      	movs	r1, #0
 80091ac:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e06c      	b.n	800928c <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80091b2:	230c      	movs	r3, #12
 80091b4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80091b6:	f7ff fd31 	bl	8008c1c <HAL_GetTick>
 80091ba:	0003      	movs	r3, r0
 80091bc:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80091be:	e019      	b.n	80091f4 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	3301      	adds	r3, #1
 80091c4:	d016      	beq.n	80091f4 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d007      	beq.n	80091dc <HAL_ADC_PollForConversion+0x70>
 80091cc:	f7ff fd26 	bl	8008c1c <HAL_GetTick>
 80091d0:	0002      	movs	r2, r0
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d20b      	bcs.n	80091f4 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091e0:	2204      	movs	r2, #4
 80091e2:	431a      	orrs	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2250      	movs	r2, #80	; 0x50
 80091ec:	2100      	movs	r1, #0
 80091ee:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80091f0:	2303      	movs	r3, #3
 80091f2:	e04b      	b.n	800928c <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	4013      	ands	r3, r2
 80091fe:	d0df      	beq.n	80091c0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009204:	2280      	movs	r2, #128	; 0x80
 8009206:	0092      	lsls	r2, r2, #2
 8009208:	431a      	orrs	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68da      	ldr	r2, [r3, #12]
 8009214:	23c0      	movs	r3, #192	; 0xc0
 8009216:	011b      	lsls	r3, r3, #4
 8009218:	4013      	ands	r3, r2
 800921a:	d12e      	bne.n	800927a <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2220      	movs	r2, #32
 8009220:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8009222:	2b00      	cmp	r3, #0
 8009224:	d129      	bne.n	800927a <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2208      	movs	r2, #8
 800922e:	4013      	ands	r3, r2
 8009230:	2b08      	cmp	r3, #8
 8009232:	d122      	bne.n	800927a <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	2204      	movs	r2, #4
 800923c:	4013      	ands	r3, r2
 800923e:	d110      	bne.n	8009262 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	210c      	movs	r1, #12
 800924c:	438a      	bics	r2, r1
 800924e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009254:	4a0f      	ldr	r2, [pc, #60]	; (8009294 <HAL_ADC_PollForConversion+0x128>)
 8009256:	4013      	ands	r3, r2
 8009258:	2201      	movs	r2, #1
 800925a:	431a      	orrs	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	655a      	str	r2, [r3, #84]	; 0x54
 8009260:	e00b      	b.n	800927a <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009266:	2220      	movs	r2, #32
 8009268:	431a      	orrs	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009272:	2201      	movs	r2, #1
 8009274:	431a      	orrs	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	699b      	ldr	r3, [r3, #24]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d103      	bne.n	800928a <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	220c      	movs	r2, #12
 8009288:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	0018      	movs	r0, r3
 800928e:	46bd      	mov	sp, r7
 8009290:	b004      	add	sp, #16
 8009292:	bd80      	pop	{r7, pc}
 8009294:	fffffefe 	.word	0xfffffefe

08009298 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80092a6:	0018      	movs	r0, r3
 80092a8:	46bd      	mov	sp, r7
 80092aa:	b002      	add	sp, #8
 80092ac:	bd80      	pop	{r7, pc}
	...

080092b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2250      	movs	r2, #80	; 0x50
 80092be:	5c9b      	ldrb	r3, [r3, r2]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d101      	bne.n	80092c8 <HAL_ADC_ConfigChannel+0x18>
 80092c4:	2302      	movs	r3, #2
 80092c6:	e06c      	b.n	80093a2 <HAL_ADC_ConfigChannel+0xf2>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2250      	movs	r2, #80	; 0x50
 80092cc:	2101      	movs	r1, #1
 80092ce:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	2204      	movs	r2, #4
 80092d8:	4013      	ands	r3, r2
 80092da:	d00b      	beq.n	80092f4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e0:	2220      	movs	r2, #32
 80092e2:	431a      	orrs	r2, r3
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2250      	movs	r2, #80	; 0x50
 80092ec:	2100      	movs	r1, #0
 80092ee:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e056      	b.n	80093a2 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	4a2c      	ldr	r2, [pc, #176]	; (80093ac <HAL_ADC_ConfigChannel+0xfc>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d028      	beq.n	8009350 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	035b      	lsls	r3, r3, #13
 800930a:	0b5a      	lsrs	r2, r3, #13
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	430a      	orrs	r2, r1
 8009312:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	2380      	movs	r3, #128	; 0x80
 800931a:	02db      	lsls	r3, r3, #11
 800931c:	4013      	ands	r3, r2
 800931e:	d009      	beq.n	8009334 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8009320:	4b23      	ldr	r3, [pc, #140]	; (80093b0 <HAL_ADC_ConfigChannel+0x100>)
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	4b22      	ldr	r3, [pc, #136]	; (80093b0 <HAL_ADC_ConfigChannel+0x100>)
 8009326:	2180      	movs	r1, #128	; 0x80
 8009328:	0409      	lsls	r1, r1, #16
 800932a:	430a      	orrs	r2, r1
 800932c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800932e:	200a      	movs	r0, #10
 8009330:	f000 f94a 	bl	80095c8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	2380      	movs	r3, #128	; 0x80
 800933a:	029b      	lsls	r3, r3, #10
 800933c:	4013      	ands	r3, r2
 800933e:	d02b      	beq.n	8009398 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8009340:	4b1b      	ldr	r3, [pc, #108]	; (80093b0 <HAL_ADC_ConfigChannel+0x100>)
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	4b1a      	ldr	r3, [pc, #104]	; (80093b0 <HAL_ADC_ConfigChannel+0x100>)
 8009346:	2180      	movs	r1, #128	; 0x80
 8009348:	03c9      	lsls	r1, r1, #15
 800934a:	430a      	orrs	r2, r1
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	e023      	b.n	8009398 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	035b      	lsls	r3, r3, #13
 800935c:	0b5b      	lsrs	r3, r3, #13
 800935e:	43d9      	mvns	r1, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	400a      	ands	r2, r1
 8009366:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	2380      	movs	r3, #128	; 0x80
 800936e:	02db      	lsls	r3, r3, #11
 8009370:	4013      	ands	r3, r2
 8009372:	d005      	beq.n	8009380 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8009374:	4b0e      	ldr	r3, [pc, #56]	; (80093b0 <HAL_ADC_ConfigChannel+0x100>)
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	4b0d      	ldr	r3, [pc, #52]	; (80093b0 <HAL_ADC_ConfigChannel+0x100>)
 800937a:	490e      	ldr	r1, [pc, #56]	; (80093b4 <HAL_ADC_ConfigChannel+0x104>)
 800937c:	400a      	ands	r2, r1
 800937e:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	2380      	movs	r3, #128	; 0x80
 8009386:	029b      	lsls	r3, r3, #10
 8009388:	4013      	ands	r3, r2
 800938a:	d005      	beq.n	8009398 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800938c:	4b08      	ldr	r3, [pc, #32]	; (80093b0 <HAL_ADC_ConfigChannel+0x100>)
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	4b07      	ldr	r3, [pc, #28]	; (80093b0 <HAL_ADC_ConfigChannel+0x100>)
 8009392:	4909      	ldr	r1, [pc, #36]	; (80093b8 <HAL_ADC_ConfigChannel+0x108>)
 8009394:	400a      	ands	r2, r1
 8009396:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2250      	movs	r2, #80	; 0x50
 800939c:	2100      	movs	r1, #0
 800939e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	0018      	movs	r0, r3
 80093a4:	46bd      	mov	sp, r7
 80093a6:	b002      	add	sp, #8
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	46c0      	nop			; (mov r8, r8)
 80093ac:	00001001 	.word	0x00001001
 80093b0:	40012708 	.word	0x40012708
 80093b4:	ff7fffff 	.word	0xff7fffff
 80093b8:	ffbfffff 	.word	0xffbfffff

080093bc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	2203      	movs	r2, #3
 80093d0:	4013      	ands	r3, r2
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d108      	bne.n	80093e8 <ADC_Enable+0x2c>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2201      	movs	r2, #1
 80093de:	4013      	ands	r3, r2
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d101      	bne.n	80093e8 <ADC_Enable+0x2c>
 80093e4:	2301      	movs	r3, #1
 80093e6:	e000      	b.n	80093ea <ADC_Enable+0x2e>
 80093e8:	2300      	movs	r3, #0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d13f      	bne.n	800946e <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	4a20      	ldr	r2, [pc, #128]	; (8009478 <ADC_Enable+0xbc>)
 80093f6:	4013      	ands	r3, r2
 80093f8:	d00d      	beq.n	8009416 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093fe:	2210      	movs	r2, #16
 8009400:	431a      	orrs	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800940a:	2201      	movs	r2, #1
 800940c:	431a      	orrs	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e02c      	b.n	8009470 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2101      	movs	r1, #1
 8009422:	430a      	orrs	r2, r1
 8009424:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8009426:	2001      	movs	r0, #1
 8009428:	f000 f8ce 	bl	80095c8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800942c:	f7ff fbf6 	bl	8008c1c <HAL_GetTick>
 8009430:	0003      	movs	r3, r0
 8009432:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009434:	e014      	b.n	8009460 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009436:	f7ff fbf1 	bl	8008c1c <HAL_GetTick>
 800943a:	0002      	movs	r2, r0
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	2b0a      	cmp	r3, #10
 8009442:	d90d      	bls.n	8009460 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009448:	2210      	movs	r2, #16
 800944a:	431a      	orrs	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009454:	2201      	movs	r2, #1
 8009456:	431a      	orrs	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e007      	b.n	8009470 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2201      	movs	r2, #1
 8009468:	4013      	ands	r3, r2
 800946a:	2b01      	cmp	r3, #1
 800946c:	d1e3      	bne.n	8009436 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	0018      	movs	r0, r3
 8009472:	46bd      	mov	sp, r7
 8009474:	b004      	add	sp, #16
 8009476:	bd80      	pop	{r7, pc}
 8009478:	80000017 	.word	0x80000017

0800947c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009484:	2300      	movs	r3, #0
 8009486:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	2203      	movs	r2, #3
 8009490:	4013      	ands	r3, r2
 8009492:	2b01      	cmp	r3, #1
 8009494:	d108      	bne.n	80094a8 <ADC_Disable+0x2c>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2201      	movs	r2, #1
 800949e:	4013      	ands	r3, r2
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d101      	bne.n	80094a8 <ADC_Disable+0x2c>
 80094a4:	2301      	movs	r3, #1
 80094a6:	e000      	b.n	80094aa <ADC_Disable+0x2e>
 80094a8:	2300      	movs	r3, #0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d041      	beq.n	8009532 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	2205      	movs	r2, #5
 80094b6:	4013      	ands	r3, r2
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d110      	bne.n	80094de <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	689a      	ldr	r2, [r3, #8]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2102      	movs	r1, #2
 80094c8:	430a      	orrs	r2, r1
 80094ca:	609a      	str	r2, [r3, #8]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2203      	movs	r2, #3
 80094d2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80094d4:	f7ff fba2 	bl	8008c1c <HAL_GetTick>
 80094d8:	0003      	movs	r3, r0
 80094da:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80094dc:	e022      	b.n	8009524 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094e2:	2210      	movs	r2, #16
 80094e4:	431a      	orrs	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ee:	2201      	movs	r2, #1
 80094f0:	431a      	orrs	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e01c      	b.n	8009534 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80094fa:	f7ff fb8f 	bl	8008c1c <HAL_GetTick>
 80094fe:	0002      	movs	r2, r0
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	2b0a      	cmp	r3, #10
 8009506:	d90d      	bls.n	8009524 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950c:	2210      	movs	r2, #16
 800950e:	431a      	orrs	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009518:	2201      	movs	r2, #1
 800951a:	431a      	orrs	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e007      	b.n	8009534 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	2201      	movs	r2, #1
 800952c:	4013      	ands	r3, r2
 800952e:	2b01      	cmp	r3, #1
 8009530:	d0e3      	beq.n	80094fa <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	0018      	movs	r0, r3
 8009536:	46bd      	mov	sp, r7
 8009538:	b004      	add	sp, #16
 800953a:	bd80      	pop	{r7, pc}

0800953c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009544:	2300      	movs	r3, #0
 8009546:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	2204      	movs	r2, #4
 8009550:	4013      	ands	r3, r2
 8009552:	d034      	beq.n	80095be <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	2204      	movs	r2, #4
 800955c:	4013      	ands	r3, r2
 800955e:	2b04      	cmp	r3, #4
 8009560:	d10d      	bne.n	800957e <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	2202      	movs	r2, #2
 800956a:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800956c:	d107      	bne.n	800957e <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2110      	movs	r1, #16
 800957a:	430a      	orrs	r2, r1
 800957c:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800957e:	f7ff fb4d 	bl	8008c1c <HAL_GetTick>
 8009582:	0003      	movs	r3, r0
 8009584:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8009586:	e014      	b.n	80095b2 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8009588:	f7ff fb48 	bl	8008c1c <HAL_GetTick>
 800958c:	0002      	movs	r2, r0
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	2b0a      	cmp	r3, #10
 8009594:	d90d      	bls.n	80095b2 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800959a:	2210      	movs	r2, #16
 800959c:	431a      	orrs	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a6:	2201      	movs	r2, #1
 80095a8:	431a      	orrs	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e006      	b.n	80095c0 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	2204      	movs	r2, #4
 80095ba:	4013      	ands	r3, r2
 80095bc:	d1e4      	bne.n	8009588 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	0018      	movs	r0, r3
 80095c2:	46bd      	mov	sp, r7
 80095c4:	b004      	add	sp, #16
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80095d0:	4b0a      	ldr	r3, [pc, #40]	; (80095fc <ADC_DelayMicroSecond+0x34>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	490a      	ldr	r1, [pc, #40]	; (8009600 <ADC_DelayMicroSecond+0x38>)
 80095d6:	0018      	movs	r0, r3
 80095d8:	f7f6 fd96 	bl	8000108 <__udivsi3>
 80095dc:	0003      	movs	r3, r0
 80095de:	001a      	movs	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4353      	muls	r3, r2
 80095e4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80095e6:	e002      	b.n	80095ee <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	3b01      	subs	r3, #1
 80095ec:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1f9      	bne.n	80095e8 <ADC_DelayMicroSecond+0x20>
  } 
}
 80095f4:	46c0      	nop			; (mov r8, r8)
 80095f6:	46bd      	mov	sp, r7
 80095f8:	b004      	add	sp, #16
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	20000030 	.word	0x20000030
 8009600:	000f4240 	.word	0x000f4240

08009604 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800960e:	2317      	movs	r3, #23
 8009610:	18fb      	adds	r3, r7, r3
 8009612:	2200      	movs	r2, #0
 8009614:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8009616:	2300      	movs	r3, #0
 8009618:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800961a:	2300      	movs	r3, #0
 800961c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2250      	movs	r2, #80	; 0x50
 8009622:	5c9b      	ldrb	r3, [r3, r2]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d101      	bne.n	800962c <HAL_ADCEx_Calibration_Start+0x28>
 8009628:	2302      	movs	r3, #2
 800962a:	e07a      	b.n	8009722 <HAL_ADCEx_Calibration_Start+0x11e>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2250      	movs	r2, #80	; 0x50
 8009630:	2101      	movs	r1, #1
 8009632:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	2203      	movs	r2, #3
 800963c:	4013      	ands	r3, r2
 800963e:	2b01      	cmp	r3, #1
 8009640:	d108      	bne.n	8009654 <HAL_ADCEx_Calibration_Start+0x50>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2201      	movs	r2, #1
 800964a:	4013      	ands	r3, r2
 800964c:	2b01      	cmp	r3, #1
 800964e:	d101      	bne.n	8009654 <HAL_ADCEx_Calibration_Start+0x50>
 8009650:	2301      	movs	r3, #1
 8009652:	e000      	b.n	8009656 <HAL_ADCEx_Calibration_Start+0x52>
 8009654:	2300      	movs	r3, #0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d152      	bne.n	8009700 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800965e:	4a33      	ldr	r2, [pc, #204]	; (800972c <HAL_ADCEx_Calibration_Start+0x128>)
 8009660:	4013      	ands	r3, r2
 8009662:	2202      	movs	r2, #2
 8009664:	431a      	orrs	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	2203      	movs	r2, #3
 8009672:	4013      	ands	r3, r2
 8009674:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68da      	ldr	r2, [r3, #12]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2103      	movs	r1, #3
 8009682:	438a      	bics	r2, r1
 8009684:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	689a      	ldr	r2, [r3, #8]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2180      	movs	r1, #128	; 0x80
 8009692:	0609      	lsls	r1, r1, #24
 8009694:	430a      	orrs	r2, r1
 8009696:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8009698:	f7ff fac0 	bl	8008c1c <HAL_GetTick>
 800969c:	0003      	movs	r3, r0
 800969e:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80096a0:	e014      	b.n	80096cc <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80096a2:	f7ff fabb 	bl	8008c1c <HAL_GetTick>
 80096a6:	0002      	movs	r2, r0
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	2b0a      	cmp	r3, #10
 80096ae:	d90d      	bls.n	80096cc <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b4:	2212      	movs	r2, #18
 80096b6:	4393      	bics	r3, r2
 80096b8:	2210      	movs	r2, #16
 80096ba:	431a      	orrs	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2250      	movs	r2, #80	; 0x50
 80096c4:	2100      	movs	r1, #0
 80096c6:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	e02a      	b.n	8009722 <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	0fdb      	lsrs	r3, r3, #31
 80096d4:	07da      	lsls	r2, r3, #31
 80096d6:	2380      	movs	r3, #128	; 0x80
 80096d8:	061b      	lsls	r3, r3, #24
 80096da:	429a      	cmp	r2, r3
 80096dc:	d0e1      	beq.n	80096a2 <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68d9      	ldr	r1, [r3, #12]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	430a      	orrs	r2, r1
 80096ec:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f2:	2203      	movs	r2, #3
 80096f4:	4393      	bics	r3, r2
 80096f6:	2201      	movs	r2, #1
 80096f8:	431a      	orrs	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	655a      	str	r2, [r3, #84]	; 0x54
 80096fe:	e009      	b.n	8009714 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009704:	2220      	movs	r2, #32
 8009706:	431a      	orrs	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 800970c:	2317      	movs	r3, #23
 800970e:	18fb      	adds	r3, r7, r3
 8009710:	2201      	movs	r2, #1
 8009712:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2250      	movs	r2, #80	; 0x50
 8009718:	2100      	movs	r1, #0
 800971a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800971c:	2317      	movs	r3, #23
 800971e:	18fb      	adds	r3, r7, r3
 8009720:	781b      	ldrb	r3, [r3, #0]
}
 8009722:	0018      	movs	r0, r3
 8009724:	46bd      	mov	sp, r7
 8009726:	b006      	add	sp, #24
 8009728:	bd80      	pop	{r7, pc}
 800972a:	46c0      	nop			; (mov r8, r8)
 800972c:	fffffefd 	.word	0xfffffefd

08009730 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	0002      	movs	r2, r0
 8009738:	1dfb      	adds	r3, r7, #7
 800973a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800973c:	1dfb      	adds	r3, r7, #7
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	001a      	movs	r2, r3
 8009742:	231f      	movs	r3, #31
 8009744:	401a      	ands	r2, r3
 8009746:	4b04      	ldr	r3, [pc, #16]	; (8009758 <NVIC_EnableIRQ+0x28>)
 8009748:	2101      	movs	r1, #1
 800974a:	4091      	lsls	r1, r2
 800974c:	000a      	movs	r2, r1
 800974e:	601a      	str	r2, [r3, #0]
}
 8009750:	46c0      	nop			; (mov r8, r8)
 8009752:	46bd      	mov	sp, r7
 8009754:	b002      	add	sp, #8
 8009756:	bd80      	pop	{r7, pc}
 8009758:	e000e100 	.word	0xe000e100

0800975c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800975c:	b590      	push	{r4, r7, lr}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	0002      	movs	r2, r0
 8009764:	6039      	str	r1, [r7, #0]
 8009766:	1dfb      	adds	r3, r7, #7
 8009768:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800976a:	1dfb      	adds	r3, r7, #7
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	2b7f      	cmp	r3, #127	; 0x7f
 8009770:	d932      	bls.n	80097d8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009772:	4a2f      	ldr	r2, [pc, #188]	; (8009830 <NVIC_SetPriority+0xd4>)
 8009774:	1dfb      	adds	r3, r7, #7
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	0019      	movs	r1, r3
 800977a:	230f      	movs	r3, #15
 800977c:	400b      	ands	r3, r1
 800977e:	3b08      	subs	r3, #8
 8009780:	089b      	lsrs	r3, r3, #2
 8009782:	3306      	adds	r3, #6
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	18d3      	adds	r3, r2, r3
 8009788:	3304      	adds	r3, #4
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	1dfa      	adds	r2, r7, #7
 800978e:	7812      	ldrb	r2, [r2, #0]
 8009790:	0011      	movs	r1, r2
 8009792:	2203      	movs	r2, #3
 8009794:	400a      	ands	r2, r1
 8009796:	00d2      	lsls	r2, r2, #3
 8009798:	21ff      	movs	r1, #255	; 0xff
 800979a:	4091      	lsls	r1, r2
 800979c:	000a      	movs	r2, r1
 800979e:	43d2      	mvns	r2, r2
 80097a0:	401a      	ands	r2, r3
 80097a2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	019b      	lsls	r3, r3, #6
 80097a8:	22ff      	movs	r2, #255	; 0xff
 80097aa:	401a      	ands	r2, r3
 80097ac:	1dfb      	adds	r3, r7, #7
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	0018      	movs	r0, r3
 80097b2:	2303      	movs	r3, #3
 80097b4:	4003      	ands	r3, r0
 80097b6:	00db      	lsls	r3, r3, #3
 80097b8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80097ba:	481d      	ldr	r0, [pc, #116]	; (8009830 <NVIC_SetPriority+0xd4>)
 80097bc:	1dfb      	adds	r3, r7, #7
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	001c      	movs	r4, r3
 80097c2:	230f      	movs	r3, #15
 80097c4:	4023      	ands	r3, r4
 80097c6:	3b08      	subs	r3, #8
 80097c8:	089b      	lsrs	r3, r3, #2
 80097ca:	430a      	orrs	r2, r1
 80097cc:	3306      	adds	r3, #6
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	18c3      	adds	r3, r0, r3
 80097d2:	3304      	adds	r3, #4
 80097d4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80097d6:	e027      	b.n	8009828 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80097d8:	4a16      	ldr	r2, [pc, #88]	; (8009834 <NVIC_SetPriority+0xd8>)
 80097da:	1dfb      	adds	r3, r7, #7
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	b25b      	sxtb	r3, r3
 80097e0:	089b      	lsrs	r3, r3, #2
 80097e2:	33c0      	adds	r3, #192	; 0xc0
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	589b      	ldr	r3, [r3, r2]
 80097e8:	1dfa      	adds	r2, r7, #7
 80097ea:	7812      	ldrb	r2, [r2, #0]
 80097ec:	0011      	movs	r1, r2
 80097ee:	2203      	movs	r2, #3
 80097f0:	400a      	ands	r2, r1
 80097f2:	00d2      	lsls	r2, r2, #3
 80097f4:	21ff      	movs	r1, #255	; 0xff
 80097f6:	4091      	lsls	r1, r2
 80097f8:	000a      	movs	r2, r1
 80097fa:	43d2      	mvns	r2, r2
 80097fc:	401a      	ands	r2, r3
 80097fe:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	019b      	lsls	r3, r3, #6
 8009804:	22ff      	movs	r2, #255	; 0xff
 8009806:	401a      	ands	r2, r3
 8009808:	1dfb      	adds	r3, r7, #7
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	0018      	movs	r0, r3
 800980e:	2303      	movs	r3, #3
 8009810:	4003      	ands	r3, r0
 8009812:	00db      	lsls	r3, r3, #3
 8009814:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009816:	4807      	ldr	r0, [pc, #28]	; (8009834 <NVIC_SetPriority+0xd8>)
 8009818:	1dfb      	adds	r3, r7, #7
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	b25b      	sxtb	r3, r3
 800981e:	089b      	lsrs	r3, r3, #2
 8009820:	430a      	orrs	r2, r1
 8009822:	33c0      	adds	r3, #192	; 0xc0
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	501a      	str	r2, [r3, r0]
}
 8009828:	46c0      	nop			; (mov r8, r8)
 800982a:	46bd      	mov	sp, r7
 800982c:	b003      	add	sp, #12
 800982e:	bd90      	pop	{r4, r7, pc}
 8009830:	e000ed00 	.word	0xe000ed00
 8009834:	e000e100 	.word	0xe000e100

08009838 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	60b9      	str	r1, [r7, #8]
 8009840:	607a      	str	r2, [r7, #4]
 8009842:	210f      	movs	r1, #15
 8009844:	187b      	adds	r3, r7, r1
 8009846:	1c02      	adds	r2, r0, #0
 8009848:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	187b      	adds	r3, r7, r1
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	b25b      	sxtb	r3, r3
 8009852:	0011      	movs	r1, r2
 8009854:	0018      	movs	r0, r3
 8009856:	f7ff ff81 	bl	800975c <NVIC_SetPriority>
}
 800985a:	46c0      	nop			; (mov r8, r8)
 800985c:	46bd      	mov	sp, r7
 800985e:	b004      	add	sp, #16
 8009860:	bd80      	pop	{r7, pc}

08009862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b082      	sub	sp, #8
 8009866:	af00      	add	r7, sp, #0
 8009868:	0002      	movs	r2, r0
 800986a:	1dfb      	adds	r3, r7, #7
 800986c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800986e:	1dfb      	adds	r3, r7, #7
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	b25b      	sxtb	r3, r3
 8009874:	0018      	movs	r0, r3
 8009876:	f7ff ff5b 	bl	8009730 <NVIC_EnableIRQ>
}
 800987a:	46c0      	nop			; (mov r8, r8)
 800987c:	46bd      	mov	sp, r7
 800987e:	b002      	add	sp, #8
 8009880:	bd80      	pop	{r7, pc}
	...

08009884 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d101      	bne.n	8009896 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e061      	b.n	800995a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a32      	ldr	r2, [pc, #200]	; (8009964 <HAL_DMA_Init+0xe0>)
 800989c:	4694      	mov	ip, r2
 800989e:	4463      	add	r3, ip
 80098a0:	2114      	movs	r1, #20
 80098a2:	0018      	movs	r0, r3
 80098a4:	f7f6 fc30 	bl	8000108 <__udivsi3>
 80098a8:	0003      	movs	r3, r0
 80098aa:	009a      	lsls	r2, r3, #2
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a2d      	ldr	r2, [pc, #180]	; (8009968 <HAL_DMA_Init+0xe4>)
 80098b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2225      	movs	r2, #37	; 0x25
 80098ba:	2102      	movs	r1, #2
 80098bc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	4a28      	ldr	r2, [pc, #160]	; (800996c <HAL_DMA_Init+0xe8>)
 80098ca:	4013      	ands	r3, r2
 80098cc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80098d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80098e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80098ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6a1b      	ldr	r3, [r3, #32]
 80098f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	689a      	ldr	r2, [r3, #8]
 8009908:	2380      	movs	r3, #128	; 0x80
 800990a:	01db      	lsls	r3, r3, #7
 800990c:	429a      	cmp	r2, r3
 800990e:	d018      	beq.n	8009942 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009910:	4b17      	ldr	r3, [pc, #92]	; (8009970 <HAL_DMA_Init+0xec>)
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009918:	211c      	movs	r1, #28
 800991a:	400b      	ands	r3, r1
 800991c:	210f      	movs	r1, #15
 800991e:	4099      	lsls	r1, r3
 8009920:	000b      	movs	r3, r1
 8009922:	43d9      	mvns	r1, r3
 8009924:	4b12      	ldr	r3, [pc, #72]	; (8009970 <HAL_DMA_Init+0xec>)
 8009926:	400a      	ands	r2, r1
 8009928:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800992a:	4b11      	ldr	r3, [pc, #68]	; (8009970 <HAL_DMA_Init+0xec>)
 800992c:	6819      	ldr	r1, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	685a      	ldr	r2, [r3, #4]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009936:	201c      	movs	r0, #28
 8009938:	4003      	ands	r3, r0
 800993a:	409a      	lsls	r2, r3
 800993c:	4b0c      	ldr	r3, [pc, #48]	; (8009970 <HAL_DMA_Init+0xec>)
 800993e:	430a      	orrs	r2, r1
 8009940:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2225      	movs	r2, #37	; 0x25
 800994c:	2101      	movs	r1, #1
 800994e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2224      	movs	r2, #36	; 0x24
 8009954:	2100      	movs	r1, #0
 8009956:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	0018      	movs	r0, r3
 800995c:	46bd      	mov	sp, r7
 800995e:	b004      	add	sp, #16
 8009960:	bd80      	pop	{r7, pc}
 8009962:	46c0      	nop			; (mov r8, r8)
 8009964:	bffdfff8 	.word	0xbffdfff8
 8009968:	40020000 	.word	0x40020000
 800996c:	ffff800f 	.word	0xffff800f
 8009970:	400200a8 	.word	0x400200a8

08009974 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
 8009980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009982:	2317      	movs	r3, #23
 8009984:	18fb      	adds	r3, r7, r3
 8009986:	2200      	movs	r2, #0
 8009988:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2224      	movs	r2, #36	; 0x24
 800998e:	5c9b      	ldrb	r3, [r3, r2]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d101      	bne.n	8009998 <HAL_DMA_Start_IT+0x24>
 8009994:	2302      	movs	r3, #2
 8009996:	e04f      	b.n	8009a38 <HAL_DMA_Start_IT+0xc4>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2224      	movs	r2, #36	; 0x24
 800999c:	2101      	movs	r1, #1
 800999e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2225      	movs	r2, #37	; 0x25
 80099a4:	5c9b      	ldrb	r3, [r3, r2]
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d13a      	bne.n	8009a22 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2225      	movs	r2, #37	; 0x25
 80099b0:	2102      	movs	r1, #2
 80099b2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2101      	movs	r1, #1
 80099c6:	438a      	bics	r2, r1
 80099c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	68b9      	ldr	r1, [r7, #8]
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f000 f92b 	bl	8009c2c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d008      	beq.n	80099f0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	210e      	movs	r1, #14
 80099ea:	430a      	orrs	r2, r1
 80099ec:	601a      	str	r2, [r3, #0]
 80099ee:	e00f      	b.n	8009a10 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2104      	movs	r1, #4
 80099fc:	438a      	bics	r2, r1
 80099fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	210a      	movs	r1, #10
 8009a0c:	430a      	orrs	r2, r1
 8009a0e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2101      	movs	r1, #1
 8009a1c:	430a      	orrs	r2, r1
 8009a1e:	601a      	str	r2, [r3, #0]
 8009a20:	e007      	b.n	8009a32 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2224      	movs	r2, #36	; 0x24
 8009a26:	2100      	movs	r1, #0
 8009a28:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8009a2a:	2317      	movs	r3, #23
 8009a2c:	18fb      	adds	r3, r7, r3
 8009a2e:	2202      	movs	r2, #2
 8009a30:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8009a32:	2317      	movs	r3, #23
 8009a34:	18fb      	adds	r3, r7, r3
 8009a36:	781b      	ldrb	r3, [r3, #0]
}
 8009a38:	0018      	movs	r0, r3
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	b006      	add	sp, #24
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a48:	230f      	movs	r3, #15
 8009a4a:	18fb      	adds	r3, r7, r3
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2225      	movs	r2, #37	; 0x25
 8009a54:	5c9b      	ldrb	r3, [r3, r2]
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d007      	beq.n	8009a6c <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2204      	movs	r2, #4
 8009a60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009a62:	230f      	movs	r3, #15
 8009a64:	18fb      	adds	r3, r7, r3
 8009a66:	2201      	movs	r2, #1
 8009a68:	701a      	strb	r2, [r3, #0]
 8009a6a:	e02a      	b.n	8009ac2 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	210e      	movs	r1, #14
 8009a78:	438a      	bics	r2, r1
 8009a7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2101      	movs	r1, #1
 8009a88:	438a      	bics	r2, r1
 8009a8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a90:	221c      	movs	r2, #28
 8009a92:	401a      	ands	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a98:	2101      	movs	r1, #1
 8009a9a:	4091      	lsls	r1, r2
 8009a9c:	000a      	movs	r2, r1
 8009a9e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2225      	movs	r2, #37	; 0x25
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2224      	movs	r2, #36	; 0x24
 8009aac:	2100      	movs	r1, #0
 8009aae:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d004      	beq.n	8009ac2 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	0010      	movs	r0, r2
 8009ac0:	4798      	blx	r3
    }
  }
  return status;
 8009ac2:	230f      	movs	r3, #15
 8009ac4:	18fb      	adds	r3, r7, r3
 8009ac6:	781b      	ldrb	r3, [r3, #0]
}
 8009ac8:	0018      	movs	r0, r3
 8009aca:	46bd      	mov	sp, r7
 8009acc:	b004      	add	sp, #16
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aec:	221c      	movs	r2, #28
 8009aee:	4013      	ands	r3, r2
 8009af0:	2204      	movs	r2, #4
 8009af2:	409a      	lsls	r2, r3
 8009af4:	0013      	movs	r3, r2
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	4013      	ands	r3, r2
 8009afa:	d026      	beq.n	8009b4a <HAL_DMA_IRQHandler+0x7a>
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2204      	movs	r2, #4
 8009b00:	4013      	ands	r3, r2
 8009b02:	d022      	beq.n	8009b4a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	d107      	bne.n	8009b20 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2104      	movs	r1, #4
 8009b1c:	438a      	bics	r2, r1
 8009b1e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b24:	221c      	movs	r2, #28
 8009b26:	401a      	ands	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2c:	2104      	movs	r1, #4
 8009b2e:	4091      	lsls	r1, r2
 8009b30:	000a      	movs	r2, r1
 8009b32:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d100      	bne.n	8009b3e <HAL_DMA_IRQHandler+0x6e>
 8009b3c:	e071      	b.n	8009c22 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	0010      	movs	r0, r2
 8009b46:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8009b48:	e06b      	b.n	8009c22 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b4e:	221c      	movs	r2, #28
 8009b50:	4013      	ands	r3, r2
 8009b52:	2202      	movs	r2, #2
 8009b54:	409a      	lsls	r2, r3
 8009b56:	0013      	movs	r3, r2
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	d02d      	beq.n	8009bba <HAL_DMA_IRQHandler+0xea>
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	2202      	movs	r2, #2
 8009b62:	4013      	ands	r3, r2
 8009b64:	d029      	beq.n	8009bba <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2220      	movs	r2, #32
 8009b6e:	4013      	ands	r3, r2
 8009b70:	d10b      	bne.n	8009b8a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	210a      	movs	r1, #10
 8009b7e:	438a      	bics	r2, r1
 8009b80:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2225      	movs	r2, #37	; 0x25
 8009b86:	2101      	movs	r1, #1
 8009b88:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b8e:	221c      	movs	r2, #28
 8009b90:	401a      	ands	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b96:	2102      	movs	r1, #2
 8009b98:	4091      	lsls	r1, r2
 8009b9a:	000a      	movs	r2, r1
 8009b9c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2224      	movs	r2, #36	; 0x24
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d039      	beq.n	8009c22 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	0010      	movs	r0, r2
 8009bb6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009bb8:	e033      	b.n	8009c22 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bbe:	221c      	movs	r2, #28
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	2208      	movs	r2, #8
 8009bc4:	409a      	lsls	r2, r3
 8009bc6:	0013      	movs	r3, r2
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	4013      	ands	r3, r2
 8009bcc:	d02a      	beq.n	8009c24 <HAL_DMA_IRQHandler+0x154>
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	2208      	movs	r2, #8
 8009bd2:	4013      	ands	r3, r2
 8009bd4:	d026      	beq.n	8009c24 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	210e      	movs	r1, #14
 8009be2:	438a      	bics	r2, r1
 8009be4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bea:	221c      	movs	r2, #28
 8009bec:	401a      	ands	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	4091      	lsls	r1, r2
 8009bf6:	000a      	movs	r2, r1
 8009bf8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2225      	movs	r2, #37	; 0x25
 8009c04:	2101      	movs	r1, #1
 8009c06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2224      	movs	r2, #36	; 0x24
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d005      	beq.n	8009c24 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	0010      	movs	r0, r2
 8009c20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009c22:	46c0      	nop			; (mov r8, r8)
 8009c24:	46c0      	nop			; (mov r8, r8)
}
 8009c26:	46bd      	mov	sp, r7
 8009c28:	b004      	add	sp, #16
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
 8009c38:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c3e:	221c      	movs	r2, #28
 8009c40:	401a      	ands	r2, r3
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c46:	2101      	movs	r1, #1
 8009c48:	4091      	lsls	r1, r2
 8009c4a:	000a      	movs	r2, r1
 8009c4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	683a      	ldr	r2, [r7, #0]
 8009c54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	2b10      	cmp	r3, #16
 8009c5c:	d108      	bne.n	8009c70 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68ba      	ldr	r2, [r7, #8]
 8009c6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009c6e:	e007      	b.n	8009c80 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68ba      	ldr	r2, [r7, #8]
 8009c76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	60da      	str	r2, [r3, #12]
}
 8009c80:	46c0      	nop			; (mov r8, r8)
 8009c82:	46bd      	mov	sp, r7
 8009c84:	b004      	add	sp, #16
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b086      	sub	sp, #24
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009c92:	2300      	movs	r3, #0
 8009c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009c96:	2300      	movs	r3, #0
 8009c98:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8009c9e:	e155      	b.n	8009f4c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2101      	movs	r1, #1
 8009ca6:	697a      	ldr	r2, [r7, #20]
 8009ca8:	4091      	lsls	r1, r2
 8009caa:	000a      	movs	r2, r1
 8009cac:	4013      	ands	r3, r2
 8009cae:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d100      	bne.n	8009cb8 <HAL_GPIO_Init+0x30>
 8009cb6:	e146      	b.n	8009f46 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d003      	beq.n	8009cc8 <HAL_GPIO_Init+0x40>
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	2b12      	cmp	r3, #18
 8009cc6:	d123      	bne.n	8009d10 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	08da      	lsrs	r2, r3, #3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	3208      	adds	r2, #8
 8009cd0:	0092      	lsls	r2, r2, #2
 8009cd2:	58d3      	ldr	r3, [r2, r3]
 8009cd4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	2207      	movs	r2, #7
 8009cda:	4013      	ands	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	220f      	movs	r2, #15
 8009ce0:	409a      	lsls	r2, r3
 8009ce2:	0013      	movs	r3, r2
 8009ce4:	43da      	mvns	r2, r3
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	4013      	ands	r3, r2
 8009cea:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	691a      	ldr	r2, [r3, #16]
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	2107      	movs	r1, #7
 8009cf4:	400b      	ands	r3, r1
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	409a      	lsls	r2, r3
 8009cfa:	0013      	movs	r3, r2
 8009cfc:	693a      	ldr	r2, [r7, #16]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	08da      	lsrs	r2, r3, #3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	3208      	adds	r2, #8
 8009d0a:	0092      	lsls	r2, r2, #2
 8009d0c:	6939      	ldr	r1, [r7, #16]
 8009d0e:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d00b      	beq.n	8009d30 <HAL_GPIO_Init+0xa8>
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d007      	beq.n	8009d30 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009d24:	2b11      	cmp	r3, #17
 8009d26:	d003      	beq.n	8009d30 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	2b12      	cmp	r3, #18
 8009d2e:	d130      	bne.n	8009d92 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	2203      	movs	r2, #3
 8009d3c:	409a      	lsls	r2, r3
 8009d3e:	0013      	movs	r3, r2
 8009d40:	43da      	mvns	r2, r3
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	4013      	ands	r3, r2
 8009d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	68da      	ldr	r2, [r3, #12]
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	005b      	lsls	r3, r3, #1
 8009d50:	409a      	lsls	r2, r3
 8009d52:	0013      	movs	r3, r2
 8009d54:	693a      	ldr	r2, [r7, #16]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	693a      	ldr	r2, [r7, #16]
 8009d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009d66:	2201      	movs	r2, #1
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	409a      	lsls	r2, r3
 8009d6c:	0013      	movs	r3, r2
 8009d6e:	43da      	mvns	r2, r3
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	4013      	ands	r3, r2
 8009d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	091b      	lsrs	r3, r3, #4
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	401a      	ands	r2, r3
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	409a      	lsls	r2, r3
 8009d84:	0013      	movs	r3, r2
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	005b      	lsls	r3, r3, #1
 8009d9c:	2203      	movs	r2, #3
 8009d9e:	409a      	lsls	r2, r3
 8009da0:	0013      	movs	r3, r2
 8009da2:	43da      	mvns	r2, r3
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	4013      	ands	r3, r2
 8009da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	2203      	movs	r2, #3
 8009db0:	401a      	ands	r2, r3
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	005b      	lsls	r3, r3, #1
 8009db6:	409a      	lsls	r2, r3
 8009db8:	0013      	movs	r3, r2
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	693a      	ldr	r2, [r7, #16]
 8009dc4:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	005b      	lsls	r3, r3, #1
 8009dd0:	2203      	movs	r2, #3
 8009dd2:	409a      	lsls	r2, r3
 8009dd4:	0013      	movs	r3, r2
 8009dd6:	43da      	mvns	r2, r3
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	4013      	ands	r3, r2
 8009ddc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	689a      	ldr	r2, [r3, #8]
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	005b      	lsls	r3, r3, #1
 8009de6:	409a      	lsls	r2, r3
 8009de8:	0013      	movs	r3, r2
 8009dea:	693a      	ldr	r2, [r7, #16]
 8009dec:	4313      	orrs	r3, r2
 8009dee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	685a      	ldr	r2, [r3, #4]
 8009dfa:	2380      	movs	r3, #128	; 0x80
 8009dfc:	055b      	lsls	r3, r3, #21
 8009dfe:	4013      	ands	r3, r2
 8009e00:	d100      	bne.n	8009e04 <HAL_GPIO_Init+0x17c>
 8009e02:	e0a0      	b.n	8009f46 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e04:	4b57      	ldr	r3, [pc, #348]	; (8009f64 <HAL_GPIO_Init+0x2dc>)
 8009e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e08:	4b56      	ldr	r3, [pc, #344]	; (8009f64 <HAL_GPIO_Init+0x2dc>)
 8009e0a:	2101      	movs	r1, #1
 8009e0c:	430a      	orrs	r2, r1
 8009e0e:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8009e10:	4a55      	ldr	r2, [pc, #340]	; (8009f68 <HAL_GPIO_Init+0x2e0>)
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	089b      	lsrs	r3, r3, #2
 8009e16:	3302      	adds	r3, #2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	589b      	ldr	r3, [r3, r2]
 8009e1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	2203      	movs	r2, #3
 8009e22:	4013      	ands	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	220f      	movs	r2, #15
 8009e28:	409a      	lsls	r2, r3
 8009e2a:	0013      	movs	r3, r2
 8009e2c:	43da      	mvns	r2, r3
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	4013      	ands	r3, r2
 8009e32:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	23a0      	movs	r3, #160	; 0xa0
 8009e38:	05db      	lsls	r3, r3, #23
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d01f      	beq.n	8009e7e <HAL_GPIO_Init+0x1f6>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a4a      	ldr	r2, [pc, #296]	; (8009f6c <HAL_GPIO_Init+0x2e4>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d019      	beq.n	8009e7a <HAL_GPIO_Init+0x1f2>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a49      	ldr	r2, [pc, #292]	; (8009f70 <HAL_GPIO_Init+0x2e8>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d013      	beq.n	8009e76 <HAL_GPIO_Init+0x1ee>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a48      	ldr	r2, [pc, #288]	; (8009f74 <HAL_GPIO_Init+0x2ec>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d00d      	beq.n	8009e72 <HAL_GPIO_Init+0x1ea>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a47      	ldr	r2, [pc, #284]	; (8009f78 <HAL_GPIO_Init+0x2f0>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d007      	beq.n	8009e6e <HAL_GPIO_Init+0x1e6>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4a46      	ldr	r2, [pc, #280]	; (8009f7c <HAL_GPIO_Init+0x2f4>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d101      	bne.n	8009e6a <HAL_GPIO_Init+0x1e2>
 8009e66:	2305      	movs	r3, #5
 8009e68:	e00a      	b.n	8009e80 <HAL_GPIO_Init+0x1f8>
 8009e6a:	2306      	movs	r3, #6
 8009e6c:	e008      	b.n	8009e80 <HAL_GPIO_Init+0x1f8>
 8009e6e:	2304      	movs	r3, #4
 8009e70:	e006      	b.n	8009e80 <HAL_GPIO_Init+0x1f8>
 8009e72:	2303      	movs	r3, #3
 8009e74:	e004      	b.n	8009e80 <HAL_GPIO_Init+0x1f8>
 8009e76:	2302      	movs	r3, #2
 8009e78:	e002      	b.n	8009e80 <HAL_GPIO_Init+0x1f8>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e000      	b.n	8009e80 <HAL_GPIO_Init+0x1f8>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	2103      	movs	r1, #3
 8009e84:	400a      	ands	r2, r1
 8009e86:	0092      	lsls	r2, r2, #2
 8009e88:	4093      	lsls	r3, r2
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009e90:	4935      	ldr	r1, [pc, #212]	; (8009f68 <HAL_GPIO_Init+0x2e0>)
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	089b      	lsrs	r3, r3, #2
 8009e96:	3302      	adds	r3, #2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	693a      	ldr	r2, [r7, #16]
 8009e9c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009e9e:	4b38      	ldr	r3, [pc, #224]	; (8009f80 <HAL_GPIO_Init+0x2f8>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	43da      	mvns	r2, r3
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	4013      	ands	r3, r2
 8009eac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	685a      	ldr	r2, [r3, #4]
 8009eb2:	2380      	movs	r3, #128	; 0x80
 8009eb4:	025b      	lsls	r3, r3, #9
 8009eb6:	4013      	ands	r3, r2
 8009eb8:	d003      	beq.n	8009ec2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8009eba:	693a      	ldr	r2, [r7, #16]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8009ec2:	4b2f      	ldr	r3, [pc, #188]	; (8009f80 <HAL_GPIO_Init+0x2f8>)
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8009ec8:	4b2d      	ldr	r3, [pc, #180]	; (8009f80 <HAL_GPIO_Init+0x2f8>)
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	43da      	mvns	r2, r3
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	2380      	movs	r3, #128	; 0x80
 8009ede:	029b      	lsls	r3, r3, #10
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	d003      	beq.n	8009eec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8009eec:	4b24      	ldr	r3, [pc, #144]	; (8009f80 <HAL_GPIO_Init+0x2f8>)
 8009eee:	693a      	ldr	r2, [r7, #16]
 8009ef0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009ef2:	4b23      	ldr	r3, [pc, #140]	; (8009f80 <HAL_GPIO_Init+0x2f8>)
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	43da      	mvns	r2, r3
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	4013      	ands	r3, r2
 8009f00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	685a      	ldr	r2, [r3, #4]
 8009f06:	2380      	movs	r3, #128	; 0x80
 8009f08:	035b      	lsls	r3, r3, #13
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	d003      	beq.n	8009f16 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4313      	orrs	r3, r2
 8009f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8009f16:	4b1a      	ldr	r3, [pc, #104]	; (8009f80 <HAL_GPIO_Init+0x2f8>)
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8009f1c:	4b18      	ldr	r3, [pc, #96]	; (8009f80 <HAL_GPIO_Init+0x2f8>)
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	43da      	mvns	r2, r3
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	4013      	ands	r3, r2
 8009f2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	2380      	movs	r3, #128	; 0x80
 8009f32:	039b      	lsls	r3, r3, #14
 8009f34:	4013      	ands	r3, r2
 8009f36:	d003      	beq.n	8009f40 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8009f38:	693a      	ldr	r2, [r7, #16]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8009f40:	4b0f      	ldr	r3, [pc, #60]	; (8009f80 <HAL_GPIO_Init+0x2f8>)
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	40da      	lsrs	r2, r3
 8009f54:	1e13      	subs	r3, r2, #0
 8009f56:	d000      	beq.n	8009f5a <HAL_GPIO_Init+0x2d2>
 8009f58:	e6a2      	b.n	8009ca0 <HAL_GPIO_Init+0x18>
  }
}
 8009f5a:	46c0      	nop			; (mov r8, r8)
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	b006      	add	sp, #24
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	46c0      	nop			; (mov r8, r8)
 8009f64:	40021000 	.word	0x40021000
 8009f68:	40010000 	.word	0x40010000
 8009f6c:	50000400 	.word	0x50000400
 8009f70:	50000800 	.word	0x50000800
 8009f74:	50000c00 	.word	0x50000c00
 8009f78:	50001000 	.word	0x50001000
 8009f7c:	50001c00 	.word	0x50001c00
 8009f80:	40010400 	.word	0x40010400

08009f84 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	0008      	movs	r0, r1
 8009f8e:	0011      	movs	r1, r2
 8009f90:	1cbb      	adds	r3, r7, #2
 8009f92:	1c02      	adds	r2, r0, #0
 8009f94:	801a      	strh	r2, [r3, #0]
 8009f96:	1c7b      	adds	r3, r7, #1
 8009f98:	1c0a      	adds	r2, r1, #0
 8009f9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8009f9c:	1c7b      	adds	r3, r7, #1
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d004      	beq.n	8009fae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009fa4:	1cbb      	adds	r3, r7, #2
 8009fa6:	881a      	ldrh	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8009fac:	e003      	b.n	8009fb6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8009fae:	1cbb      	adds	r3, r7, #2
 8009fb0:	881a      	ldrh	r2, [r3, #0]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009fb6:	46c0      	nop			; (mov r8, r8)
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	b002      	add	sp, #8
 8009fbc:	bd80      	pop	{r7, pc}
	...

08009fc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	0002      	movs	r2, r0
 8009fc8:	1dbb      	adds	r3, r7, #6
 8009fca:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8009fcc:	4b09      	ldr	r3, [pc, #36]	; (8009ff4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8009fce:	695b      	ldr	r3, [r3, #20]
 8009fd0:	1dba      	adds	r2, r7, #6
 8009fd2:	8812      	ldrh	r2, [r2, #0]
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	d008      	beq.n	8009fea <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009fd8:	4b06      	ldr	r3, [pc, #24]	; (8009ff4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8009fda:	1dba      	adds	r2, r7, #6
 8009fdc:	8812      	ldrh	r2, [r2, #0]
 8009fde:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009fe0:	1dbb      	adds	r3, r7, #6
 8009fe2:	881b      	ldrh	r3, [r3, #0]
 8009fe4:	0018      	movs	r0, r3
 8009fe6:	f7fb f8af 	bl	8005148 <HAL_GPIO_EXTI_Callback>
  }
}
 8009fea:	46c0      	nop			; (mov r8, r8)
 8009fec:	46bd      	mov	sp, r7
 8009fee:	b002      	add	sp, #8
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	46c0      	nop			; (mov r8, r8)
 8009ff4:	40010400 	.word	0x40010400

08009ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d101      	bne.n	800a00a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e082      	b.n	800a110 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2241      	movs	r2, #65	; 0x41
 800a00e:	5c9b      	ldrb	r3, [r3, r2]
 800a010:	b2db      	uxtb	r3, r3
 800a012:	2b00      	cmp	r3, #0
 800a014:	d107      	bne.n	800a026 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2240      	movs	r2, #64	; 0x40
 800a01a:	2100      	movs	r1, #0
 800a01c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	0018      	movs	r0, r3
 800a022:	f7fa fca1 	bl	8004968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2241      	movs	r2, #65	; 0x41
 800a02a:	2124      	movs	r1, #36	; 0x24
 800a02c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2101      	movs	r1, #1
 800a03a:	438a      	bics	r2, r1
 800a03c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4934      	ldr	r1, [pc, #208]	; (800a118 <HAL_I2C_Init+0x120>)
 800a048:	400a      	ands	r2, r1
 800a04a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	689a      	ldr	r2, [r3, #8]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4931      	ldr	r1, [pc, #196]	; (800a11c <HAL_I2C_Init+0x124>)
 800a058:	400a      	ands	r2, r1
 800a05a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d108      	bne.n	800a076 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	689a      	ldr	r2, [r3, #8]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2180      	movs	r1, #128	; 0x80
 800a06e:	0209      	lsls	r1, r1, #8
 800a070:	430a      	orrs	r2, r1
 800a072:	609a      	str	r2, [r3, #8]
 800a074:	e007      	b.n	800a086 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	689a      	ldr	r2, [r3, #8]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2184      	movs	r1, #132	; 0x84
 800a080:	0209      	lsls	r1, r1, #8
 800a082:	430a      	orrs	r2, r1
 800a084:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d104      	bne.n	800a098 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2280      	movs	r2, #128	; 0x80
 800a094:	0112      	lsls	r2, r2, #4
 800a096:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	491f      	ldr	r1, [pc, #124]	; (800a120 <HAL_I2C_Init+0x128>)
 800a0a4:	430a      	orrs	r2, r1
 800a0a6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68da      	ldr	r2, [r3, #12]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	491a      	ldr	r1, [pc, #104]	; (800a11c <HAL_I2C_Init+0x124>)
 800a0b4:	400a      	ands	r2, r1
 800a0b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	691a      	ldr	r2, [r3, #16]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	695b      	ldr	r3, [r3, #20]
 800a0c0:	431a      	orrs	r2, r3
 800a0c2:	0011      	movs	r1, r2
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	021a      	lsls	r2, r3, #8
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	430a      	orrs	r2, r1
 800a0d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	69d9      	ldr	r1, [r3, #28]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a1a      	ldr	r2, [r3, #32]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	430a      	orrs	r2, r1
 800a0f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2241      	movs	r2, #65	; 0x41
 800a0fc:	2120      	movs	r1, #32
 800a0fe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2242      	movs	r2, #66	; 0x42
 800a10a:	2100      	movs	r1, #0
 800a10c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	0018      	movs	r0, r3
 800a112:	46bd      	mov	sp, r7
 800a114:	b002      	add	sp, #8
 800a116:	bd80      	pop	{r7, pc}
 800a118:	f0ffffff 	.word	0xf0ffffff
 800a11c:	ffff7fff 	.word	0xffff7fff
 800a120:	02008000 	.word	0x02008000

0800a124 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a124:	b590      	push	{r4, r7, lr}
 800a126:	b089      	sub	sp, #36	; 0x24
 800a128:	af02      	add	r7, sp, #8
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	000c      	movs	r4, r1
 800a12e:	0010      	movs	r0, r2
 800a130:	0019      	movs	r1, r3
 800a132:	230a      	movs	r3, #10
 800a134:	18fb      	adds	r3, r7, r3
 800a136:	1c22      	adds	r2, r4, #0
 800a138:	801a      	strh	r2, [r3, #0]
 800a13a:	2308      	movs	r3, #8
 800a13c:	18fb      	adds	r3, r7, r3
 800a13e:	1c02      	adds	r2, r0, #0
 800a140:	801a      	strh	r2, [r3, #0]
 800a142:	1dbb      	adds	r3, r7, #6
 800a144:	1c0a      	adds	r2, r1, #0
 800a146:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2241      	movs	r2, #65	; 0x41
 800a14c:	5c9b      	ldrb	r3, [r3, r2]
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	2b20      	cmp	r3, #32
 800a152:	d000      	beq.n	800a156 <HAL_I2C_Mem_Write+0x32>
 800a154:	e10c      	b.n	800a370 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d004      	beq.n	800a166 <HAL_I2C_Mem_Write+0x42>
 800a15c:	232c      	movs	r3, #44	; 0x2c
 800a15e:	18fb      	adds	r3, r7, r3
 800a160:	881b      	ldrh	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d105      	bne.n	800a172 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2280      	movs	r2, #128	; 0x80
 800a16a:	0092      	lsls	r2, r2, #2
 800a16c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e0ff      	b.n	800a372 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2240      	movs	r2, #64	; 0x40
 800a176:	5c9b      	ldrb	r3, [r3, r2]
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d101      	bne.n	800a180 <HAL_I2C_Mem_Write+0x5c>
 800a17c:	2302      	movs	r3, #2
 800a17e:	e0f8      	b.n	800a372 <HAL_I2C_Mem_Write+0x24e>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2240      	movs	r2, #64	; 0x40
 800a184:	2101      	movs	r1, #1
 800a186:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a188:	f7fe fd48 	bl	8008c1c <HAL_GetTick>
 800a18c:	0003      	movs	r3, r0
 800a18e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a190:	2380      	movs	r3, #128	; 0x80
 800a192:	0219      	lsls	r1, r3, #8
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	2319      	movs	r3, #25
 800a19c:	2201      	movs	r2, #1
 800a19e:	f000 fb0b 	bl	800a7b8 <I2C_WaitOnFlagUntilTimeout>
 800a1a2:	1e03      	subs	r3, r0, #0
 800a1a4:	d001      	beq.n	800a1aa <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e0e3      	b.n	800a372 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2241      	movs	r2, #65	; 0x41
 800a1ae:	2121      	movs	r1, #33	; 0x21
 800a1b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2242      	movs	r2, #66	; 0x42
 800a1b6:	2140      	movs	r1, #64	; 0x40
 800a1b8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	222c      	movs	r2, #44	; 0x2c
 800a1ca:	18ba      	adds	r2, r7, r2
 800a1cc:	8812      	ldrh	r2, [r2, #0]
 800a1ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a1d6:	1dbb      	adds	r3, r7, #6
 800a1d8:	881c      	ldrh	r4, [r3, #0]
 800a1da:	2308      	movs	r3, #8
 800a1dc:	18fb      	adds	r3, r7, r3
 800a1de:	881a      	ldrh	r2, [r3, #0]
 800a1e0:	230a      	movs	r3, #10
 800a1e2:	18fb      	adds	r3, r7, r3
 800a1e4:	8819      	ldrh	r1, [r3, #0]
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	9301      	str	r3, [sp, #4]
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	0023      	movs	r3, r4
 800a1f2:	f000 f9f9 	bl	800a5e8 <I2C_RequestMemoryWrite>
 800a1f6:	1e03      	subs	r3, r0, #0
 800a1f8:	d005      	beq.n	800a206 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2240      	movs	r2, #64	; 0x40
 800a1fe:	2100      	movs	r1, #0
 800a200:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e0b5      	b.n	800a372 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	2bff      	cmp	r3, #255	; 0xff
 800a20e:	d911      	bls.n	800a234 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	22ff      	movs	r2, #255	; 0xff
 800a214:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a21a:	b2da      	uxtb	r2, r3
 800a21c:	2380      	movs	r3, #128	; 0x80
 800a21e:	045c      	lsls	r4, r3, #17
 800a220:	230a      	movs	r3, #10
 800a222:	18fb      	adds	r3, r7, r3
 800a224:	8819      	ldrh	r1, [r3, #0]
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	2300      	movs	r3, #0
 800a22a:	9300      	str	r3, [sp, #0]
 800a22c:	0023      	movs	r3, r4
 800a22e:	f000 fbe3 	bl	800a9f8 <I2C_TransferConfig>
 800a232:	e012      	b.n	800a25a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a238:	b29a      	uxth	r2, r3
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a242:	b2da      	uxtb	r2, r3
 800a244:	2380      	movs	r3, #128	; 0x80
 800a246:	049c      	lsls	r4, r3, #18
 800a248:	230a      	movs	r3, #10
 800a24a:	18fb      	adds	r3, r7, r3
 800a24c:	8819      	ldrh	r1, [r3, #0]
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	2300      	movs	r3, #0
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	0023      	movs	r3, r4
 800a256:	f000 fbcf 	bl	800a9f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	0018      	movs	r0, r3
 800a262:	f000 fae8 	bl	800a836 <I2C_WaitOnTXISFlagUntilTimeout>
 800a266:	1e03      	subs	r3, r0, #0
 800a268:	d001      	beq.n	800a26e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e081      	b.n	800a372 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a272:	781a      	ldrb	r2, [r3, #0]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27e:	1c5a      	adds	r2, r3, #1
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a288:	b29b      	uxth	r3, r3
 800a28a:	3b01      	subs	r3, #1
 800a28c:	b29a      	uxth	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a296:	3b01      	subs	r3, #1
 800a298:	b29a      	uxth	r2, r3
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d03a      	beq.n	800a31e <HAL_I2C_Mem_Write+0x1fa>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d136      	bne.n	800a31e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a2b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	0013      	movs	r3, r2
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	2180      	movs	r1, #128	; 0x80
 800a2be:	f000 fa7b 	bl	800a7b8 <I2C_WaitOnFlagUntilTimeout>
 800a2c2:	1e03      	subs	r3, r0, #0
 800a2c4:	d001      	beq.n	800a2ca <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e053      	b.n	800a372 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	2bff      	cmp	r3, #255	; 0xff
 800a2d2:	d911      	bls.n	800a2f8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	22ff      	movs	r2, #255	; 0xff
 800a2d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	2380      	movs	r3, #128	; 0x80
 800a2e2:	045c      	lsls	r4, r3, #17
 800a2e4:	230a      	movs	r3, #10
 800a2e6:	18fb      	adds	r3, r7, r3
 800a2e8:	8819      	ldrh	r1, [r3, #0]
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	0023      	movs	r3, r4
 800a2f2:	f000 fb81 	bl	800a9f8 <I2C_TransferConfig>
 800a2f6:	e012      	b.n	800a31e <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a306:	b2da      	uxtb	r2, r3
 800a308:	2380      	movs	r3, #128	; 0x80
 800a30a:	049c      	lsls	r4, r3, #18
 800a30c:	230a      	movs	r3, #10
 800a30e:	18fb      	adds	r3, r7, r3
 800a310:	8819      	ldrh	r1, [r3, #0]
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	2300      	movs	r3, #0
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	0023      	movs	r3, r4
 800a31a:	f000 fb6d 	bl	800a9f8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a322:	b29b      	uxth	r3, r3
 800a324:	2b00      	cmp	r3, #0
 800a326:	d198      	bne.n	800a25a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	0018      	movs	r0, r3
 800a330:	f000 fac0 	bl	800a8b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a334:	1e03      	subs	r3, r0, #0
 800a336:	d001      	beq.n	800a33c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	e01a      	b.n	800a372 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2220      	movs	r2, #32
 800a342:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	490b      	ldr	r1, [pc, #44]	; (800a37c <HAL_I2C_Mem_Write+0x258>)
 800a350:	400a      	ands	r2, r1
 800a352:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2241      	movs	r2, #65	; 0x41
 800a358:	2120      	movs	r1, #32
 800a35a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2242      	movs	r2, #66	; 0x42
 800a360:	2100      	movs	r1, #0
 800a362:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2240      	movs	r2, #64	; 0x40
 800a368:	2100      	movs	r1, #0
 800a36a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	e000      	b.n	800a372 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800a370:	2302      	movs	r3, #2
  }
}
 800a372:	0018      	movs	r0, r3
 800a374:	46bd      	mov	sp, r7
 800a376:	b007      	add	sp, #28
 800a378:	bd90      	pop	{r4, r7, pc}
 800a37a:	46c0      	nop			; (mov r8, r8)
 800a37c:	fe00e800 	.word	0xfe00e800

0800a380 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a380:	b590      	push	{r4, r7, lr}
 800a382:	b089      	sub	sp, #36	; 0x24
 800a384:	af02      	add	r7, sp, #8
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	000c      	movs	r4, r1
 800a38a:	0010      	movs	r0, r2
 800a38c:	0019      	movs	r1, r3
 800a38e:	230a      	movs	r3, #10
 800a390:	18fb      	adds	r3, r7, r3
 800a392:	1c22      	adds	r2, r4, #0
 800a394:	801a      	strh	r2, [r3, #0]
 800a396:	2308      	movs	r3, #8
 800a398:	18fb      	adds	r3, r7, r3
 800a39a:	1c02      	adds	r2, r0, #0
 800a39c:	801a      	strh	r2, [r3, #0]
 800a39e:	1dbb      	adds	r3, r7, #6
 800a3a0:	1c0a      	adds	r2, r1, #0
 800a3a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2241      	movs	r2, #65	; 0x41
 800a3a8:	5c9b      	ldrb	r3, [r3, r2]
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	2b20      	cmp	r3, #32
 800a3ae:	d000      	beq.n	800a3b2 <HAL_I2C_Mem_Read+0x32>
 800a3b0:	e110      	b.n	800a5d4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d004      	beq.n	800a3c2 <HAL_I2C_Mem_Read+0x42>
 800a3b8:	232c      	movs	r3, #44	; 0x2c
 800a3ba:	18fb      	adds	r3, r7, r3
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d105      	bne.n	800a3ce <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2280      	movs	r2, #128	; 0x80
 800a3c6:	0092      	lsls	r2, r2, #2
 800a3c8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e103      	b.n	800a5d6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2240      	movs	r2, #64	; 0x40
 800a3d2:	5c9b      	ldrb	r3, [r3, r2]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d101      	bne.n	800a3dc <HAL_I2C_Mem_Read+0x5c>
 800a3d8:	2302      	movs	r3, #2
 800a3da:	e0fc      	b.n	800a5d6 <HAL_I2C_Mem_Read+0x256>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2240      	movs	r2, #64	; 0x40
 800a3e0:	2101      	movs	r1, #1
 800a3e2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a3e4:	f7fe fc1a 	bl	8008c1c <HAL_GetTick>
 800a3e8:	0003      	movs	r3, r0
 800a3ea:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a3ec:	2380      	movs	r3, #128	; 0x80
 800a3ee:	0219      	lsls	r1, r3, #8
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	9300      	str	r3, [sp, #0]
 800a3f6:	2319      	movs	r3, #25
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f000 f9dd 	bl	800a7b8 <I2C_WaitOnFlagUntilTimeout>
 800a3fe:	1e03      	subs	r3, r0, #0
 800a400:	d001      	beq.n	800a406 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	e0e7      	b.n	800a5d6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2241      	movs	r2, #65	; 0x41
 800a40a:	2122      	movs	r1, #34	; 0x22
 800a40c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2242      	movs	r2, #66	; 0x42
 800a412:	2140      	movs	r1, #64	; 0x40
 800a414:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a420:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	222c      	movs	r2, #44	; 0x2c
 800a426:	18ba      	adds	r2, r7, r2
 800a428:	8812      	ldrh	r2, [r2, #0]
 800a42a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a432:	1dbb      	adds	r3, r7, #6
 800a434:	881c      	ldrh	r4, [r3, #0]
 800a436:	2308      	movs	r3, #8
 800a438:	18fb      	adds	r3, r7, r3
 800a43a:	881a      	ldrh	r2, [r3, #0]
 800a43c:	230a      	movs	r3, #10
 800a43e:	18fb      	adds	r3, r7, r3
 800a440:	8819      	ldrh	r1, [r3, #0]
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	9301      	str	r3, [sp, #4]
 800a448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	0023      	movs	r3, r4
 800a44e:	f000 f92f 	bl	800a6b0 <I2C_RequestMemoryRead>
 800a452:	1e03      	subs	r3, r0, #0
 800a454:	d005      	beq.n	800a462 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2240      	movs	r2, #64	; 0x40
 800a45a:	2100      	movs	r1, #0
 800a45c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e0b9      	b.n	800a5d6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a466:	b29b      	uxth	r3, r3
 800a468:	2bff      	cmp	r3, #255	; 0xff
 800a46a:	d911      	bls.n	800a490 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	22ff      	movs	r2, #255	; 0xff
 800a470:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a476:	b2da      	uxtb	r2, r3
 800a478:	2380      	movs	r3, #128	; 0x80
 800a47a:	045c      	lsls	r4, r3, #17
 800a47c:	230a      	movs	r3, #10
 800a47e:	18fb      	adds	r3, r7, r3
 800a480:	8819      	ldrh	r1, [r3, #0]
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	4b56      	ldr	r3, [pc, #344]	; (800a5e0 <HAL_I2C_Mem_Read+0x260>)
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	0023      	movs	r3, r4
 800a48a:	f000 fab5 	bl	800a9f8 <I2C_TransferConfig>
 800a48e:	e012      	b.n	800a4b6 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a494:	b29a      	uxth	r2, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	2380      	movs	r3, #128	; 0x80
 800a4a2:	049c      	lsls	r4, r3, #18
 800a4a4:	230a      	movs	r3, #10
 800a4a6:	18fb      	adds	r3, r7, r3
 800a4a8:	8819      	ldrh	r1, [r3, #0]
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	4b4c      	ldr	r3, [pc, #304]	; (800a5e0 <HAL_I2C_Mem_Read+0x260>)
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	0023      	movs	r3, r4
 800a4b2:	f000 faa1 	bl	800a9f8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a4b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	0013      	movs	r3, r2
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	2104      	movs	r1, #4
 800a4c4:	f000 f978 	bl	800a7b8 <I2C_WaitOnFlagUntilTimeout>
 800a4c8:	1e03      	subs	r3, r0, #0
 800a4ca:	d001      	beq.n	800a4d0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e082      	b.n	800a5d6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4da:	b2d2      	uxtb	r2, r2
 800a4dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	b29a      	uxth	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a506:	b29b      	uxth	r3, r3
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d03a      	beq.n	800a582 <HAL_I2C_Mem_Read+0x202>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a510:	2b00      	cmp	r3, #0
 800a512:	d136      	bne.n	800a582 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	9300      	str	r3, [sp, #0]
 800a51c:	0013      	movs	r3, r2
 800a51e:	2200      	movs	r2, #0
 800a520:	2180      	movs	r1, #128	; 0x80
 800a522:	f000 f949 	bl	800a7b8 <I2C_WaitOnFlagUntilTimeout>
 800a526:	1e03      	subs	r3, r0, #0
 800a528:	d001      	beq.n	800a52e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e053      	b.n	800a5d6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a532:	b29b      	uxth	r3, r3
 800a534:	2bff      	cmp	r3, #255	; 0xff
 800a536:	d911      	bls.n	800a55c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	22ff      	movs	r2, #255	; 0xff
 800a53c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a542:	b2da      	uxtb	r2, r3
 800a544:	2380      	movs	r3, #128	; 0x80
 800a546:	045c      	lsls	r4, r3, #17
 800a548:	230a      	movs	r3, #10
 800a54a:	18fb      	adds	r3, r7, r3
 800a54c:	8819      	ldrh	r1, [r3, #0]
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	2300      	movs	r3, #0
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	0023      	movs	r3, r4
 800a556:	f000 fa4f 	bl	800a9f8 <I2C_TransferConfig>
 800a55a:	e012      	b.n	800a582 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a560:	b29a      	uxth	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a56a:	b2da      	uxtb	r2, r3
 800a56c:	2380      	movs	r3, #128	; 0x80
 800a56e:	049c      	lsls	r4, r3, #18
 800a570:	230a      	movs	r3, #10
 800a572:	18fb      	adds	r3, r7, r3
 800a574:	8819      	ldrh	r1, [r3, #0]
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	2300      	movs	r3, #0
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	0023      	movs	r3, r4
 800a57e:	f000 fa3b 	bl	800a9f8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a586:	b29b      	uxth	r3, r3
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d194      	bne.n	800a4b6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a58c:	697a      	ldr	r2, [r7, #20]
 800a58e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	0018      	movs	r0, r3
 800a594:	f000 f98e 	bl	800a8b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a598:	1e03      	subs	r3, r0, #0
 800a59a:	d001      	beq.n	800a5a0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	e01a      	b.n	800a5d6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2220      	movs	r2, #32
 800a5a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	490c      	ldr	r1, [pc, #48]	; (800a5e4 <HAL_I2C_Mem_Read+0x264>)
 800a5b4:	400a      	ands	r2, r1
 800a5b6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2241      	movs	r2, #65	; 0x41
 800a5bc:	2120      	movs	r1, #32
 800a5be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2242      	movs	r2, #66	; 0x42
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2240      	movs	r2, #64	; 0x40
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	e000      	b.n	800a5d6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800a5d4:	2302      	movs	r3, #2
  }
}
 800a5d6:	0018      	movs	r0, r3
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	b007      	add	sp, #28
 800a5dc:	bd90      	pop	{r4, r7, pc}
 800a5de:	46c0      	nop			; (mov r8, r8)
 800a5e0:	80002400 	.word	0x80002400
 800a5e4:	fe00e800 	.word	0xfe00e800

0800a5e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a5e8:	b5b0      	push	{r4, r5, r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af02      	add	r7, sp, #8
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	000c      	movs	r4, r1
 800a5f2:	0010      	movs	r0, r2
 800a5f4:	0019      	movs	r1, r3
 800a5f6:	250a      	movs	r5, #10
 800a5f8:	197b      	adds	r3, r7, r5
 800a5fa:	1c22      	adds	r2, r4, #0
 800a5fc:	801a      	strh	r2, [r3, #0]
 800a5fe:	2308      	movs	r3, #8
 800a600:	18fb      	adds	r3, r7, r3
 800a602:	1c02      	adds	r2, r0, #0
 800a604:	801a      	strh	r2, [r3, #0]
 800a606:	1dbb      	adds	r3, r7, #6
 800a608:	1c0a      	adds	r2, r1, #0
 800a60a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a60c:	1dbb      	adds	r3, r7, #6
 800a60e:	881b      	ldrh	r3, [r3, #0]
 800a610:	b2da      	uxtb	r2, r3
 800a612:	2380      	movs	r3, #128	; 0x80
 800a614:	045c      	lsls	r4, r3, #17
 800a616:	197b      	adds	r3, r7, r5
 800a618:	8819      	ldrh	r1, [r3, #0]
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	4b23      	ldr	r3, [pc, #140]	; (800a6ac <I2C_RequestMemoryWrite+0xc4>)
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	0023      	movs	r3, r4
 800a622:	f000 f9e9 	bl	800a9f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a628:	6a39      	ldr	r1, [r7, #32]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	0018      	movs	r0, r3
 800a62e:	f000 f902 	bl	800a836 <I2C_WaitOnTXISFlagUntilTimeout>
 800a632:	1e03      	subs	r3, r0, #0
 800a634:	d001      	beq.n	800a63a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	e033      	b.n	800a6a2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a63a:	1dbb      	adds	r3, r7, #6
 800a63c:	881b      	ldrh	r3, [r3, #0]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	d107      	bne.n	800a652 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a642:	2308      	movs	r3, #8
 800a644:	18fb      	adds	r3, r7, r3
 800a646:	881b      	ldrh	r3, [r3, #0]
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	629a      	str	r2, [r3, #40]	; 0x28
 800a650:	e019      	b.n	800a686 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a652:	2308      	movs	r3, #8
 800a654:	18fb      	adds	r3, r7, r3
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	0a1b      	lsrs	r3, r3, #8
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a666:	6a39      	ldr	r1, [r7, #32]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	0018      	movs	r0, r3
 800a66c:	f000 f8e3 	bl	800a836 <I2C_WaitOnTXISFlagUntilTimeout>
 800a670:	1e03      	subs	r3, r0, #0
 800a672:	d001      	beq.n	800a678 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	e014      	b.n	800a6a2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a678:	2308      	movs	r3, #8
 800a67a:	18fb      	adds	r3, r7, r3
 800a67c:	881b      	ldrh	r3, [r3, #0]
 800a67e:	b2da      	uxtb	r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a686:	6a3a      	ldr	r2, [r7, #32]
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	0013      	movs	r3, r2
 800a690:	2200      	movs	r2, #0
 800a692:	2180      	movs	r1, #128	; 0x80
 800a694:	f000 f890 	bl	800a7b8 <I2C_WaitOnFlagUntilTimeout>
 800a698:	1e03      	subs	r3, r0, #0
 800a69a:	d001      	beq.n	800a6a0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	e000      	b.n	800a6a2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	0018      	movs	r0, r3
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	b004      	add	sp, #16
 800a6a8:	bdb0      	pop	{r4, r5, r7, pc}
 800a6aa:	46c0      	nop			; (mov r8, r8)
 800a6ac:	80002000 	.word	0x80002000

0800a6b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a6b0:	b5b0      	push	{r4, r5, r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af02      	add	r7, sp, #8
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	000c      	movs	r4, r1
 800a6ba:	0010      	movs	r0, r2
 800a6bc:	0019      	movs	r1, r3
 800a6be:	250a      	movs	r5, #10
 800a6c0:	197b      	adds	r3, r7, r5
 800a6c2:	1c22      	adds	r2, r4, #0
 800a6c4:	801a      	strh	r2, [r3, #0]
 800a6c6:	2308      	movs	r3, #8
 800a6c8:	18fb      	adds	r3, r7, r3
 800a6ca:	1c02      	adds	r2, r0, #0
 800a6cc:	801a      	strh	r2, [r3, #0]
 800a6ce:	1dbb      	adds	r3, r7, #6
 800a6d0:	1c0a      	adds	r2, r1, #0
 800a6d2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a6d4:	1dbb      	adds	r3, r7, #6
 800a6d6:	881b      	ldrh	r3, [r3, #0]
 800a6d8:	b2da      	uxtb	r2, r3
 800a6da:	197b      	adds	r3, r7, r5
 800a6dc:	8819      	ldrh	r1, [r3, #0]
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	4b23      	ldr	r3, [pc, #140]	; (800a770 <I2C_RequestMemoryRead+0xc0>)
 800a6e2:	9300      	str	r3, [sp, #0]
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	f000 f987 	bl	800a9f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6ec:	6a39      	ldr	r1, [r7, #32]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	0018      	movs	r0, r3
 800a6f2:	f000 f8a0 	bl	800a836 <I2C_WaitOnTXISFlagUntilTimeout>
 800a6f6:	1e03      	subs	r3, r0, #0
 800a6f8:	d001      	beq.n	800a6fe <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	e033      	b.n	800a766 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a6fe:	1dbb      	adds	r3, r7, #6
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d107      	bne.n	800a716 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a706:	2308      	movs	r3, #8
 800a708:	18fb      	adds	r3, r7, r3
 800a70a:	881b      	ldrh	r3, [r3, #0]
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	629a      	str	r2, [r3, #40]	; 0x28
 800a714:	e019      	b.n	800a74a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a716:	2308      	movs	r3, #8
 800a718:	18fb      	adds	r3, r7, r3
 800a71a:	881b      	ldrh	r3, [r3, #0]
 800a71c:	0a1b      	lsrs	r3, r3, #8
 800a71e:	b29b      	uxth	r3, r3
 800a720:	b2da      	uxtb	r2, r3
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a72a:	6a39      	ldr	r1, [r7, #32]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	0018      	movs	r0, r3
 800a730:	f000 f881 	bl	800a836 <I2C_WaitOnTXISFlagUntilTimeout>
 800a734:	1e03      	subs	r3, r0, #0
 800a736:	d001      	beq.n	800a73c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	e014      	b.n	800a766 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a73c:	2308      	movs	r3, #8
 800a73e:	18fb      	adds	r3, r7, r3
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	b2da      	uxtb	r2, r3
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a74a:	6a3a      	ldr	r2, [r7, #32]
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	0013      	movs	r3, r2
 800a754:	2200      	movs	r2, #0
 800a756:	2140      	movs	r1, #64	; 0x40
 800a758:	f000 f82e 	bl	800a7b8 <I2C_WaitOnFlagUntilTimeout>
 800a75c:	1e03      	subs	r3, r0, #0
 800a75e:	d001      	beq.n	800a764 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	e000      	b.n	800a766 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800a764:	2300      	movs	r3, #0
}
 800a766:	0018      	movs	r0, r3
 800a768:	46bd      	mov	sp, r7
 800a76a:	b004      	add	sp, #16
 800a76c:	bdb0      	pop	{r4, r5, r7, pc}
 800a76e:	46c0      	nop			; (mov r8, r8)
 800a770:	80002000 	.word	0x80002000

0800a774 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	2202      	movs	r2, #2
 800a784:	4013      	ands	r3, r2
 800a786:	2b02      	cmp	r3, #2
 800a788:	d103      	bne.n	800a792 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2200      	movs	r2, #0
 800a790:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	2201      	movs	r2, #1
 800a79a:	4013      	ands	r3, r2
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d007      	beq.n	800a7b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	699a      	ldr	r2, [r3, #24]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2101      	movs	r1, #1
 800a7ac:	430a      	orrs	r2, r1
 800a7ae:	619a      	str	r2, [r3, #24]
  }
}
 800a7b0:	46c0      	nop			; (mov r8, r8)
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	b002      	add	sp, #8
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	603b      	str	r3, [r7, #0]
 800a7c4:	1dfb      	adds	r3, r7, #7
 800a7c6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a7c8:	e021      	b.n	800a80e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	d01e      	beq.n	800a80e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7d0:	f7fe fa24 	bl	8008c1c <HAL_GetTick>
 800a7d4:	0002      	movs	r2, r0
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d302      	bcc.n	800a7e6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d113      	bne.n	800a80e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ea:	2220      	movs	r2, #32
 800a7ec:	431a      	orrs	r2, r3
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2241      	movs	r2, #65	; 0x41
 800a7f6:	2120      	movs	r1, #32
 800a7f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2242      	movs	r2, #66	; 0x42
 800a7fe:	2100      	movs	r1, #0
 800a800:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2240      	movs	r2, #64	; 0x40
 800a806:	2100      	movs	r1, #0
 800a808:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e00f      	b.n	800a82e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	4013      	ands	r3, r2
 800a818:	68ba      	ldr	r2, [r7, #8]
 800a81a:	1ad3      	subs	r3, r2, r3
 800a81c:	425a      	negs	r2, r3
 800a81e:	4153      	adcs	r3, r2
 800a820:	b2db      	uxtb	r3, r3
 800a822:	001a      	movs	r2, r3
 800a824:	1dfb      	adds	r3, r7, #7
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d0ce      	beq.n	800a7ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a82c:	2300      	movs	r3, #0
}
 800a82e:	0018      	movs	r0, r3
 800a830:	46bd      	mov	sp, r7
 800a832:	b004      	add	sp, #16
 800a834:	bd80      	pop	{r7, pc}

0800a836 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a836:	b580      	push	{r7, lr}
 800a838:	b084      	sub	sp, #16
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	60f8      	str	r0, [r7, #12]
 800a83e:	60b9      	str	r1, [r7, #8]
 800a840:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a842:	e02b      	b.n	800a89c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	68b9      	ldr	r1, [r7, #8]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	0018      	movs	r0, r3
 800a84c:	f000 f86e 	bl	800a92c <I2C_IsAcknowledgeFailed>
 800a850:	1e03      	subs	r3, r0, #0
 800a852:	d001      	beq.n	800a858 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e029      	b.n	800a8ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	3301      	adds	r3, #1
 800a85c:	d01e      	beq.n	800a89c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a85e:	f7fe f9dd 	bl	8008c1c <HAL_GetTick>
 800a862:	0002      	movs	r2, r0
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d302      	bcc.n	800a874 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d113      	bne.n	800a89c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a878:	2220      	movs	r2, #32
 800a87a:	431a      	orrs	r2, r3
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2241      	movs	r2, #65	; 0x41
 800a884:	2120      	movs	r1, #32
 800a886:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2242      	movs	r2, #66	; 0x42
 800a88c:	2100      	movs	r1, #0
 800a88e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2240      	movs	r2, #64	; 0x40
 800a894:	2100      	movs	r1, #0
 800a896:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	e007      	b.n	800a8ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	2202      	movs	r2, #2
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d1cc      	bne.n	800a844 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	0018      	movs	r0, r3
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	b004      	add	sp, #16
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a8c0:	e028      	b.n	800a914 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	68b9      	ldr	r1, [r7, #8]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	0018      	movs	r0, r3
 800a8ca:	f000 f82f 	bl	800a92c <I2C_IsAcknowledgeFailed>
 800a8ce:	1e03      	subs	r3, r0, #0
 800a8d0:	d001      	beq.n	800a8d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e026      	b.n	800a924 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8d6:	f7fe f9a1 	bl	8008c1c <HAL_GetTick>
 800a8da:	0002      	movs	r2, r0
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d302      	bcc.n	800a8ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d113      	bne.n	800a914 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f0:	2220      	movs	r2, #32
 800a8f2:	431a      	orrs	r2, r3
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2241      	movs	r2, #65	; 0x41
 800a8fc:	2120      	movs	r1, #32
 800a8fe:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2242      	movs	r2, #66	; 0x42
 800a904:	2100      	movs	r1, #0
 800a906:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2240      	movs	r2, #64	; 0x40
 800a90c:	2100      	movs	r1, #0
 800a90e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	e007      	b.n	800a924 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	699b      	ldr	r3, [r3, #24]
 800a91a:	2220      	movs	r2, #32
 800a91c:	4013      	ands	r3, r2
 800a91e:	2b20      	cmp	r3, #32
 800a920:	d1cf      	bne.n	800a8c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	0018      	movs	r0, r3
 800a926:	46bd      	mov	sp, r7
 800a928:	b004      	add	sp, #16
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	2210      	movs	r2, #16
 800a940:	4013      	ands	r3, r2
 800a942:	2b10      	cmp	r3, #16
 800a944:	d151      	bne.n	800a9ea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a946:	e021      	b.n	800a98c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	3301      	adds	r3, #1
 800a94c:	d01e      	beq.n	800a98c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a94e:	f7fe f965 	bl	8008c1c <HAL_GetTick>
 800a952:	0002      	movs	r2, r0
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d302      	bcc.n	800a964 <I2C_IsAcknowledgeFailed+0x38>
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d113      	bne.n	800a98c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a968:	2220      	movs	r2, #32
 800a96a:	431a      	orrs	r2, r3
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2241      	movs	r2, #65	; 0x41
 800a974:	2120      	movs	r1, #32
 800a976:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2242      	movs	r2, #66	; 0x42
 800a97c:	2100      	movs	r1, #0
 800a97e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2240      	movs	r2, #64	; 0x40
 800a984:	2100      	movs	r1, #0
 800a986:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	e02f      	b.n	800a9ec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	2220      	movs	r2, #32
 800a994:	4013      	ands	r3, r2
 800a996:	2b20      	cmp	r3, #32
 800a998:	d1d6      	bne.n	800a948 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2210      	movs	r2, #16
 800a9a0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2220      	movs	r2, #32
 800a9a8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	0018      	movs	r0, r3
 800a9ae:	f7ff fee1 	bl	800a774 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	685a      	ldr	r2, [r3, #4]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	490d      	ldr	r1, [pc, #52]	; (800a9f4 <I2C_IsAcknowledgeFailed+0xc8>)
 800a9be:	400a      	ands	r2, r1
 800a9c0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9c6:	2204      	movs	r2, #4
 800a9c8:	431a      	orrs	r2, r3
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2241      	movs	r2, #65	; 0x41
 800a9d2:	2120      	movs	r1, #32
 800a9d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2242      	movs	r2, #66	; 0x42
 800a9da:	2100      	movs	r1, #0
 800a9dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2240      	movs	r2, #64	; 0x40
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e000      	b.n	800a9ec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	0018      	movs	r0, r3
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	b004      	add	sp, #16
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	fe00e800 	.word	0xfe00e800

0800a9f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a9f8:	b590      	push	{r4, r7, lr}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	0008      	movs	r0, r1
 800aa02:	0011      	movs	r1, r2
 800aa04:	607b      	str	r3, [r7, #4]
 800aa06:	240a      	movs	r4, #10
 800aa08:	193b      	adds	r3, r7, r4
 800aa0a:	1c02      	adds	r2, r0, #0
 800aa0c:	801a      	strh	r2, [r3, #0]
 800aa0e:	2009      	movs	r0, #9
 800aa10:	183b      	adds	r3, r7, r0
 800aa12:	1c0a      	adds	r2, r1, #0
 800aa14:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	6a3a      	ldr	r2, [r7, #32]
 800aa1e:	0d51      	lsrs	r1, r2, #21
 800aa20:	2280      	movs	r2, #128	; 0x80
 800aa22:	00d2      	lsls	r2, r2, #3
 800aa24:	400a      	ands	r2, r1
 800aa26:	490e      	ldr	r1, [pc, #56]	; (800aa60 <I2C_TransferConfig+0x68>)
 800aa28:	430a      	orrs	r2, r1
 800aa2a:	43d2      	mvns	r2, r2
 800aa2c:	401a      	ands	r2, r3
 800aa2e:	0011      	movs	r1, r2
 800aa30:	193b      	adds	r3, r7, r4
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	059b      	lsls	r3, r3, #22
 800aa36:	0d9a      	lsrs	r2, r3, #22
 800aa38:	183b      	adds	r3, r7, r0
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	0418      	lsls	r0, r3, #16
 800aa3e:	23ff      	movs	r3, #255	; 0xff
 800aa40:	041b      	lsls	r3, r3, #16
 800aa42:	4003      	ands	r3, r0
 800aa44:	431a      	orrs	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	431a      	orrs	r2, r3
 800aa4a:	6a3b      	ldr	r3, [r7, #32]
 800aa4c:	431a      	orrs	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	430a      	orrs	r2, r1
 800aa54:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800aa56:	46c0      	nop			; (mov r8, r8)
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	b005      	add	sp, #20
 800aa5c:	bd90      	pop	{r4, r7, pc}
 800aa5e:	46c0      	nop			; (mov r8, r8)
 800aa60:	03ff63ff 	.word	0x03ff63ff

0800aa64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2241      	movs	r2, #65	; 0x41
 800aa72:	5c9b      	ldrb	r3, [r3, r2]
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b20      	cmp	r3, #32
 800aa78:	d138      	bne.n	800aaec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2240      	movs	r2, #64	; 0x40
 800aa7e:	5c9b      	ldrb	r3, [r3, r2]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d101      	bne.n	800aa88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aa84:	2302      	movs	r3, #2
 800aa86:	e032      	b.n	800aaee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2240      	movs	r2, #64	; 0x40
 800aa8c:	2101      	movs	r1, #1
 800aa8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2241      	movs	r2, #65	; 0x41
 800aa94:	2124      	movs	r1, #36	; 0x24
 800aa96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2101      	movs	r1, #1
 800aaa4:	438a      	bics	r2, r1
 800aaa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4911      	ldr	r1, [pc, #68]	; (800aaf8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800aab4:	400a      	ands	r2, r1
 800aab6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	6819      	ldr	r1, [r3, #0]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	430a      	orrs	r2, r1
 800aac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	2101      	movs	r1, #1
 800aad4:	430a      	orrs	r2, r1
 800aad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2241      	movs	r2, #65	; 0x41
 800aadc:	2120      	movs	r1, #32
 800aade:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2240      	movs	r2, #64	; 0x40
 800aae4:	2100      	movs	r1, #0
 800aae6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	e000      	b.n	800aaee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aaec:	2302      	movs	r3, #2
  }
}
 800aaee:	0018      	movs	r0, r3
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	b002      	add	sp, #8
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	46c0      	nop			; (mov r8, r8)
 800aaf8:	ffffefff 	.word	0xffffefff

0800aafc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b084      	sub	sp, #16
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2241      	movs	r2, #65	; 0x41
 800ab0a:	5c9b      	ldrb	r3, [r3, r2]
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	2b20      	cmp	r3, #32
 800ab10:	d139      	bne.n	800ab86 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2240      	movs	r2, #64	; 0x40
 800ab16:	5c9b      	ldrb	r3, [r3, r2]
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d101      	bne.n	800ab20 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	e033      	b.n	800ab88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2240      	movs	r2, #64	; 0x40
 800ab24:	2101      	movs	r1, #1
 800ab26:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2241      	movs	r2, #65	; 0x41
 800ab2c:	2124      	movs	r1, #36	; 0x24
 800ab2e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2101      	movs	r1, #1
 800ab3c:	438a      	bics	r2, r1
 800ab3e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	4a11      	ldr	r2, [pc, #68]	; (800ab90 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	021b      	lsls	r3, r3, #8
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2101      	movs	r1, #1
 800ab6e:	430a      	orrs	r2, r1
 800ab70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2241      	movs	r2, #65	; 0x41
 800ab76:	2120      	movs	r1, #32
 800ab78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2240      	movs	r2, #64	; 0x40
 800ab7e:	2100      	movs	r1, #0
 800ab80:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800ab82:	2300      	movs	r3, #0
 800ab84:	e000      	b.n	800ab88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ab86:	2302      	movs	r3, #2
  }
}
 800ab88:	0018      	movs	r0, r3
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	b004      	add	sp, #16
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	fffff0ff 	.word	0xfffff0ff

0800ab94 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 800ab98:	4b04      	ldr	r3, [pc, #16]	; (800abac <HAL_PWR_DisablePVD+0x18>)
 800ab9a:	681a      	ldr	r2, [r3, #0]
 800ab9c:	4b03      	ldr	r3, [pc, #12]	; (800abac <HAL_PWR_DisablePVD+0x18>)
 800ab9e:	2110      	movs	r1, #16
 800aba0:	438a      	bics	r2, r1
 800aba2:	601a      	str	r2, [r3, #0]
}
 800aba4:	46c0      	nop			; (mov r8, r8)
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	46c0      	nop			; (mov r8, r8)
 800abac:	40007000 	.word	0x40007000

0800abb0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	000a      	movs	r2, r1
 800abba:	1cfb      	adds	r3, r7, #3
 800abbc:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 800abbe:	2300      	movs	r3, #0
 800abc0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 800abc2:	4b11      	ldr	r3, [pc, #68]	; (800ac08 <HAL_PWR_EnterSLEEPMode+0x58>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	60fb      	str	r3, [r7, #12]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2203      	movs	r2, #3
 800abcc:	4393      	bics	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 800abd8:	4b0b      	ldr	r3, [pc, #44]	; (800ac08 <HAL_PWR_EnterSLEEPMode+0x58>)
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800abde:	4b0b      	ldr	r3, [pc, #44]	; (800ac0c <HAL_PWR_EnterSLEEPMode+0x5c>)
 800abe0:	691a      	ldr	r2, [r3, #16]
 800abe2:	4b0a      	ldr	r3, [pc, #40]	; (800ac0c <HAL_PWR_EnterSLEEPMode+0x5c>)
 800abe4:	2104      	movs	r1, #4
 800abe6:	438a      	bics	r2, r1
 800abe8:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800abea:	1cfb      	adds	r3, r7, #3
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d101      	bne.n	800abf6 <HAL_PWR_EnterSLEEPMode+0x46>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800abf2:	bf30      	wfi
 800abf4:	e002      	b.n	800abfc <HAL_PWR_EnterSLEEPMode+0x4c>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 800abf6:	bf40      	sev
  __ASM volatile ("wfe");
 800abf8:	bf20      	wfe
 800abfa:	bf20      	wfe
  __ASM volatile ("nop");
 800abfc:	46c0      	nop			; (mov r8, r8)
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();

}
 800abfe:	46c0      	nop			; (mov r8, r8)
 800ac00:	46bd      	mov	sp, r7
 800ac02:	b004      	add	sp, #16
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	46c0      	nop			; (mov r8, r8)
 800ac08:	40007000 	.word	0x40007000
 800ac0c:	e000ed00 	.word	0xe000ed00

0800ac10 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	000a      	movs	r2, r1
 800ac1a:	1cfb      	adds	r3, r7, #3
 800ac1c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 800ac22:	4b13      	ldr	r3, [pc, #76]	; (800ac70 <HAL_PWR_EnterSTOPMode+0x60>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	60fb      	str	r3, [r7, #12]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2203      	movs	r2, #3
 800ac2c:	4393      	bics	r3, r2
 800ac2e:	60fb      	str	r3, [r7, #12]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR = tmpreg;
 800ac38:	4b0d      	ldr	r3, [pc, #52]	; (800ac70 <HAL_PWR_EnterSTOPMode+0x60>)
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800ac3e:	4b0d      	ldr	r3, [pc, #52]	; (800ac74 <HAL_PWR_EnterSTOPMode+0x64>)
 800ac40:	691a      	ldr	r2, [r3, #16]
 800ac42:	4b0c      	ldr	r3, [pc, #48]	; (800ac74 <HAL_PWR_EnterSTOPMode+0x64>)
 800ac44:	2104      	movs	r1, #4
 800ac46:	430a      	orrs	r2, r1
 800ac48:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800ac4a:	1cfb      	adds	r3, r7, #3
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d101      	bne.n	800ac56 <HAL_PWR_EnterSTOPMode+0x46>
  __ASM volatile ("wfi");
 800ac52:	bf30      	wfi
 800ac54:	e002      	b.n	800ac5c <HAL_PWR_EnterSTOPMode+0x4c>
  __ASM volatile ("sev");
 800ac56:	bf40      	sev
  __ASM volatile ("wfe");
 800ac58:	bf20      	wfe
 800ac5a:	bf20      	wfe
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800ac5c:	4b05      	ldr	r3, [pc, #20]	; (800ac74 <HAL_PWR_EnterSTOPMode+0x64>)
 800ac5e:	691a      	ldr	r2, [r3, #16]
 800ac60:	4b04      	ldr	r3, [pc, #16]	; (800ac74 <HAL_PWR_EnterSTOPMode+0x64>)
 800ac62:	2104      	movs	r1, #4
 800ac64:	438a      	bics	r2, r1
 800ac66:	611a      	str	r2, [r3, #16]

}
 800ac68:	46c0      	nop			; (mov r8, r8)
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	b004      	add	sp, #16
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	40007000 	.word	0x40007000
 800ac74:	e000ed00 	.word	0xe000ed00

0800ac78 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 800ac7c:	4b04      	ldr	r3, [pc, #16]	; (800ac90 <HAL_PWREx_EnableFastWakeUp+0x18>)
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	4b03      	ldr	r3, [pc, #12]	; (800ac90 <HAL_PWREx_EnableFastWakeUp+0x18>)
 800ac82:	2180      	movs	r1, #128	; 0x80
 800ac84:	00c9      	lsls	r1, r1, #3
 800ac86:	430a      	orrs	r2, r1
 800ac88:	601a      	str	r2, [r3, #0]
}
 800ac8a:	46c0      	nop			; (mov r8, r8)
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	40007000 	.word	0x40007000

0800ac94 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 800ac98:	4b04      	ldr	r3, [pc, #16]	; (800acac <HAL_PWREx_EnableUltraLowPower+0x18>)
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	4b03      	ldr	r3, [pc, #12]	; (800acac <HAL_PWREx_EnableUltraLowPower+0x18>)
 800ac9e:	2180      	movs	r1, #128	; 0x80
 800aca0:	0089      	lsls	r1, r1, #2
 800aca2:	430a      	orrs	r2, r1
 800aca4:	601a      	str	r2, [r3, #0]
}
 800aca6:	46c0      	nop			; (mov r8, r8)
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	40007000 	.word	0x40007000

0800acb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800acb0:	b5b0      	push	{r4, r5, r7, lr}
 800acb2:	b08a      	sub	sp, #40	; 0x28
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d102      	bne.n	800acc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800acbe:	2301      	movs	r3, #1
 800acc0:	f000 fbbc 	bl	800b43c <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acc4:	4bc8      	ldr	r3, [pc, #800]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	220c      	movs	r2, #12
 800acca:	4013      	ands	r3, r2
 800accc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800acce:	4bc6      	ldr	r3, [pc, #792]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800acd0:	68da      	ldr	r2, [r3, #12]
 800acd2:	2380      	movs	r3, #128	; 0x80
 800acd4:	025b      	lsls	r3, r3, #9
 800acd6:	4013      	ands	r3, r2
 800acd8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2201      	movs	r2, #1
 800ace0:	4013      	ands	r3, r2
 800ace2:	d100      	bne.n	800ace6 <HAL_RCC_OscConfig+0x36>
 800ace4:	e07e      	b.n	800ade4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	2b08      	cmp	r3, #8
 800acea:	d007      	beq.n	800acfc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	2b0c      	cmp	r3, #12
 800acf0:	d112      	bne.n	800ad18 <HAL_RCC_OscConfig+0x68>
 800acf2:	69ba      	ldr	r2, [r7, #24]
 800acf4:	2380      	movs	r3, #128	; 0x80
 800acf6:	025b      	lsls	r3, r3, #9
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d10d      	bne.n	800ad18 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800acfc:	4bba      	ldr	r3, [pc, #744]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	2380      	movs	r3, #128	; 0x80
 800ad02:	029b      	lsls	r3, r3, #10
 800ad04:	4013      	ands	r3, r2
 800ad06:	d100      	bne.n	800ad0a <HAL_RCC_OscConfig+0x5a>
 800ad08:	e06b      	b.n	800ade2 <HAL_RCC_OscConfig+0x132>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d167      	bne.n	800ade2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	f000 fb92 	bl	800b43c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	685a      	ldr	r2, [r3, #4]
 800ad1c:	2380      	movs	r3, #128	; 0x80
 800ad1e:	025b      	lsls	r3, r3, #9
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d107      	bne.n	800ad34 <HAL_RCC_OscConfig+0x84>
 800ad24:	4bb0      	ldr	r3, [pc, #704]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	4baf      	ldr	r3, [pc, #700]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ad2a:	2180      	movs	r1, #128	; 0x80
 800ad2c:	0249      	lsls	r1, r1, #9
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	601a      	str	r2, [r3, #0]
 800ad32:	e027      	b.n	800ad84 <HAL_RCC_OscConfig+0xd4>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	23a0      	movs	r3, #160	; 0xa0
 800ad3a:	02db      	lsls	r3, r3, #11
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d10e      	bne.n	800ad5e <HAL_RCC_OscConfig+0xae>
 800ad40:	4ba9      	ldr	r3, [pc, #676]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	4ba8      	ldr	r3, [pc, #672]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ad46:	2180      	movs	r1, #128	; 0x80
 800ad48:	02c9      	lsls	r1, r1, #11
 800ad4a:	430a      	orrs	r2, r1
 800ad4c:	601a      	str	r2, [r3, #0]
 800ad4e:	4ba6      	ldr	r3, [pc, #664]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	4ba5      	ldr	r3, [pc, #660]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ad54:	2180      	movs	r1, #128	; 0x80
 800ad56:	0249      	lsls	r1, r1, #9
 800ad58:	430a      	orrs	r2, r1
 800ad5a:	601a      	str	r2, [r3, #0]
 800ad5c:	e012      	b.n	800ad84 <HAL_RCC_OscConfig+0xd4>
 800ad5e:	4ba2      	ldr	r3, [pc, #648]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	4ba1      	ldr	r3, [pc, #644]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ad64:	49a1      	ldr	r1, [pc, #644]	; (800afec <HAL_RCC_OscConfig+0x33c>)
 800ad66:	400a      	ands	r2, r1
 800ad68:	601a      	str	r2, [r3, #0]
 800ad6a:	4b9f      	ldr	r3, [pc, #636]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	2380      	movs	r3, #128	; 0x80
 800ad70:	025b      	lsls	r3, r3, #9
 800ad72:	4013      	ands	r3, r2
 800ad74:	60fb      	str	r3, [r7, #12]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	4b9b      	ldr	r3, [pc, #620]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	4b9a      	ldr	r3, [pc, #616]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ad7e:	499c      	ldr	r1, [pc, #624]	; (800aff0 <HAL_RCC_OscConfig+0x340>)
 800ad80:	400a      	ands	r2, r1
 800ad82:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d015      	beq.n	800adb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad8c:	f7fd ff46 	bl	8008c1c <HAL_GetTick>
 800ad90:	0003      	movs	r3, r0
 800ad92:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ad94:	e009      	b.n	800adaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad96:	f7fd ff41 	bl	8008c1c <HAL_GetTick>
 800ad9a:	0002      	movs	r2, r0
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	2b64      	cmp	r3, #100	; 0x64
 800ada2:	d902      	bls.n	800adaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ada4:	2303      	movs	r3, #3
 800ada6:	f000 fb49 	bl	800b43c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800adaa:	4b8f      	ldr	r3, [pc, #572]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	2380      	movs	r3, #128	; 0x80
 800adb0:	029b      	lsls	r3, r3, #10
 800adb2:	4013      	ands	r3, r2
 800adb4:	d0ef      	beq.n	800ad96 <HAL_RCC_OscConfig+0xe6>
 800adb6:	e015      	b.n	800ade4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800adb8:	f7fd ff30 	bl	8008c1c <HAL_GetTick>
 800adbc:	0003      	movs	r3, r0
 800adbe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800adc0:	e008      	b.n	800add4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800adc2:	f7fd ff2b 	bl	8008c1c <HAL_GetTick>
 800adc6:	0002      	movs	r2, r0
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	2b64      	cmp	r3, #100	; 0x64
 800adce:	d901      	bls.n	800add4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800add0:	2303      	movs	r3, #3
 800add2:	e333      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800add4:	4b84      	ldr	r3, [pc, #528]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	2380      	movs	r3, #128	; 0x80
 800adda:	029b      	lsls	r3, r3, #10
 800addc:	4013      	ands	r3, r2
 800adde:	d1f0      	bne.n	800adc2 <HAL_RCC_OscConfig+0x112>
 800ade0:	e000      	b.n	800ade4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ade2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2202      	movs	r2, #2
 800adea:	4013      	ands	r3, r2
 800adec:	d100      	bne.n	800adf0 <HAL_RCC_OscConfig+0x140>
 800adee:	e098      	b.n	800af22 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800adf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf8:	2220      	movs	r2, #32
 800adfa:	4013      	ands	r3, r2
 800adfc:	d009      	beq.n	800ae12 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800adfe:	4b7a      	ldr	r3, [pc, #488]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	4b79      	ldr	r3, [pc, #484]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ae04:	2120      	movs	r1, #32
 800ae06:	430a      	orrs	r2, r1
 800ae08:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0c:	2220      	movs	r2, #32
 800ae0e:	4393      	bics	r3, r2
 800ae10:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	2b04      	cmp	r3, #4
 800ae16:	d005      	beq.n	800ae24 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	2b0c      	cmp	r3, #12
 800ae1c:	d13d      	bne.n	800ae9a <HAL_RCC_OscConfig+0x1ea>
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d13a      	bne.n	800ae9a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800ae24:	4b70      	ldr	r3, [pc, #448]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2204      	movs	r2, #4
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	d004      	beq.n	800ae38 <HAL_RCC_OscConfig+0x188>
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	e301      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae38:	4b6b      	ldr	r3, [pc, #428]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	4a6d      	ldr	r2, [pc, #436]	; (800aff4 <HAL_RCC_OscConfig+0x344>)
 800ae3e:	4013      	ands	r3, r2
 800ae40:	0019      	movs	r1, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	691b      	ldr	r3, [r3, #16]
 800ae46:	021a      	lsls	r2, r3, #8
 800ae48:	4b67      	ldr	r3, [pc, #412]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ae4a:	430a      	orrs	r2, r1
 800ae4c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800ae4e:	4b66      	ldr	r3, [pc, #408]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2209      	movs	r2, #9
 800ae54:	4393      	bics	r3, r2
 800ae56:	0019      	movs	r1, r3
 800ae58:	4b63      	ldr	r3, [pc, #396]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ae5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae5c:	430a      	orrs	r2, r1
 800ae5e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ae60:	f000 fc20 	bl	800b6a4 <HAL_RCC_GetSysClockFreq>
 800ae64:	0001      	movs	r1, r0
 800ae66:	4b60      	ldr	r3, [pc, #384]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800ae68:	68db      	ldr	r3, [r3, #12]
 800ae6a:	091b      	lsrs	r3, r3, #4
 800ae6c:	220f      	movs	r2, #15
 800ae6e:	4013      	ands	r3, r2
 800ae70:	4a61      	ldr	r2, [pc, #388]	; (800aff8 <HAL_RCC_OscConfig+0x348>)
 800ae72:	5cd3      	ldrb	r3, [r2, r3]
 800ae74:	000a      	movs	r2, r1
 800ae76:	40da      	lsrs	r2, r3
 800ae78:	4b60      	ldr	r3, [pc, #384]	; (800affc <HAL_RCC_OscConfig+0x34c>)
 800ae7a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800ae7c:	2513      	movs	r5, #19
 800ae7e:	197c      	adds	r4, r7, r5
 800ae80:	2003      	movs	r0, #3
 800ae82:	f7fa f8d2 	bl	800502a <HAL_InitTick>
 800ae86:	0003      	movs	r3, r0
 800ae88:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800ae8a:	197b      	adds	r3, r7, r5
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d047      	beq.n	800af22 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800ae92:	2313      	movs	r3, #19
 800ae94:	18fb      	adds	r3, r7, r3
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	e2d0      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d027      	beq.n	800aef0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800aea0:	4b51      	ldr	r3, [pc, #324]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	2209      	movs	r2, #9
 800aea6:	4393      	bics	r3, r2
 800aea8:	0019      	movs	r1, r3
 800aeaa:	4b4f      	ldr	r3, [pc, #316]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800aeac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeae:	430a      	orrs	r2, r1
 800aeb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aeb2:	f7fd feb3 	bl	8008c1c <HAL_GetTick>
 800aeb6:	0003      	movs	r3, r0
 800aeb8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aeba:	e008      	b.n	800aece <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aebc:	f7fd feae 	bl	8008c1c <HAL_GetTick>
 800aec0:	0002      	movs	r2, r0
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d901      	bls.n	800aece <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800aeca:	2303      	movs	r3, #3
 800aecc:	e2b6      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aece:	4b46      	ldr	r3, [pc, #280]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2204      	movs	r2, #4
 800aed4:	4013      	ands	r3, r2
 800aed6:	d0f1      	beq.n	800aebc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aed8:	4b43      	ldr	r3, [pc, #268]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	4a45      	ldr	r2, [pc, #276]	; (800aff4 <HAL_RCC_OscConfig+0x344>)
 800aede:	4013      	ands	r3, r2
 800aee0:	0019      	movs	r1, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	691b      	ldr	r3, [r3, #16]
 800aee6:	021a      	lsls	r2, r3, #8
 800aee8:	4b3f      	ldr	r3, [pc, #252]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800aeea:	430a      	orrs	r2, r1
 800aeec:	605a      	str	r2, [r3, #4]
 800aeee:	e018      	b.n	800af22 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aef0:	4b3d      	ldr	r3, [pc, #244]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	4b3c      	ldr	r3, [pc, #240]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800aef6:	2101      	movs	r1, #1
 800aef8:	438a      	bics	r2, r1
 800aefa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aefc:	f7fd fe8e 	bl	8008c1c <HAL_GetTick>
 800af00:	0003      	movs	r3, r0
 800af02:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800af04:	e008      	b.n	800af18 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800af06:	f7fd fe89 	bl	8008c1c <HAL_GetTick>
 800af0a:	0002      	movs	r2, r0
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	1ad3      	subs	r3, r2, r3
 800af10:	2b02      	cmp	r3, #2
 800af12:	d901      	bls.n	800af18 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800af14:	2303      	movs	r3, #3
 800af16:	e291      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800af18:	4b33      	ldr	r3, [pc, #204]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2204      	movs	r2, #4
 800af1e:	4013      	ands	r3, r2
 800af20:	d1f1      	bne.n	800af06 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2210      	movs	r2, #16
 800af28:	4013      	ands	r3, r2
 800af2a:	d100      	bne.n	800af2e <HAL_RCC_OscConfig+0x27e>
 800af2c:	e09f      	b.n	800b06e <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d13f      	bne.n	800afb4 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800af34:	4b2c      	ldr	r3, [pc, #176]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	2380      	movs	r3, #128	; 0x80
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4013      	ands	r3, r2
 800af3e:	d005      	beq.n	800af4c <HAL_RCC_OscConfig+0x29c>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	69db      	ldr	r3, [r3, #28]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d101      	bne.n	800af4c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	e277      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800af4c:	4b26      	ldr	r3, [pc, #152]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	4a2b      	ldr	r2, [pc, #172]	; (800b000 <HAL_RCC_OscConfig+0x350>)
 800af52:	4013      	ands	r3, r2
 800af54:	0019      	movs	r1, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af5a:	4b23      	ldr	r3, [pc, #140]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800af5c:	430a      	orrs	r2, r1
 800af5e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800af60:	4b21      	ldr	r3, [pc, #132]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	021b      	lsls	r3, r3, #8
 800af66:	0a19      	lsrs	r1, r3, #8
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a1b      	ldr	r3, [r3, #32]
 800af6c:	061a      	lsls	r2, r3, #24
 800af6e:	4b1e      	ldr	r3, [pc, #120]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800af70:	430a      	orrs	r2, r1
 800af72:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af78:	0b5b      	lsrs	r3, r3, #13
 800af7a:	3301      	adds	r3, #1
 800af7c:	2280      	movs	r2, #128	; 0x80
 800af7e:	0212      	lsls	r2, r2, #8
 800af80:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800af82:	4b19      	ldr	r3, [pc, #100]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	091b      	lsrs	r3, r3, #4
 800af88:	210f      	movs	r1, #15
 800af8a:	400b      	ands	r3, r1
 800af8c:	491a      	ldr	r1, [pc, #104]	; (800aff8 <HAL_RCC_OscConfig+0x348>)
 800af8e:	5ccb      	ldrb	r3, [r1, r3]
 800af90:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800af92:	4b1a      	ldr	r3, [pc, #104]	; (800affc <HAL_RCC_OscConfig+0x34c>)
 800af94:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800af96:	2513      	movs	r5, #19
 800af98:	197c      	adds	r4, r7, r5
 800af9a:	2003      	movs	r0, #3
 800af9c:	f7fa f845 	bl	800502a <HAL_InitTick>
 800afa0:	0003      	movs	r3, r0
 800afa2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800afa4:	197b      	adds	r3, r7, r5
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d060      	beq.n	800b06e <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 800afac:	2313      	movs	r3, #19
 800afae:	18fb      	adds	r3, r7, r3
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	e243      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	69db      	ldr	r3, [r3, #28]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d03e      	beq.n	800b03a <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800afbc:	4b0a      	ldr	r3, [pc, #40]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	4b09      	ldr	r3, [pc, #36]	; (800afe8 <HAL_RCC_OscConfig+0x338>)
 800afc2:	2180      	movs	r1, #128	; 0x80
 800afc4:	0049      	lsls	r1, r1, #1
 800afc6:	430a      	orrs	r2, r1
 800afc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afca:	f7fd fe27 	bl	8008c1c <HAL_GetTick>
 800afce:	0003      	movs	r3, r0
 800afd0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800afd2:	e017      	b.n	800b004 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800afd4:	f7fd fe22 	bl	8008c1c <HAL_GetTick>
 800afd8:	0002      	movs	r2, r0
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	1ad3      	subs	r3, r2, r3
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d910      	bls.n	800b004 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 800afe2:	2303      	movs	r3, #3
 800afe4:	e22a      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
 800afe6:	46c0      	nop			; (mov r8, r8)
 800afe8:	40021000 	.word	0x40021000
 800afec:	fffeffff 	.word	0xfffeffff
 800aff0:	fffbffff 	.word	0xfffbffff
 800aff4:	ffffe0ff 	.word	0xffffe0ff
 800aff8:	0801c9d8 	.word	0x0801c9d8
 800affc:	20000030 	.word	0x20000030
 800b000:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800b004:	4bc6      	ldr	r3, [pc, #792]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	2380      	movs	r3, #128	; 0x80
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	4013      	ands	r3, r2
 800b00e:	d0e1      	beq.n	800afd4 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b010:	4bc3      	ldr	r3, [pc, #780]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	4ac3      	ldr	r2, [pc, #780]	; (800b324 <HAL_RCC_OscConfig+0x674>)
 800b016:	4013      	ands	r3, r2
 800b018:	0019      	movs	r1, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b01e:	4bc0      	ldr	r3, [pc, #768]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b020:	430a      	orrs	r2, r1
 800b022:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b024:	4bbe      	ldr	r3, [pc, #760]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	021b      	lsls	r3, r3, #8
 800b02a:	0a19      	lsrs	r1, r3, #8
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a1b      	ldr	r3, [r3, #32]
 800b030:	061a      	lsls	r2, r3, #24
 800b032:	4bbb      	ldr	r3, [pc, #748]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b034:	430a      	orrs	r2, r1
 800b036:	605a      	str	r2, [r3, #4]
 800b038:	e019      	b.n	800b06e <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b03a:	4bb9      	ldr	r3, [pc, #740]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	4bb8      	ldr	r3, [pc, #736]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b040:	49b9      	ldr	r1, [pc, #740]	; (800b328 <HAL_RCC_OscConfig+0x678>)
 800b042:	400a      	ands	r2, r1
 800b044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b046:	f7fd fde9 	bl	8008c1c <HAL_GetTick>
 800b04a:	0003      	movs	r3, r0
 800b04c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800b04e:	e008      	b.n	800b062 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b050:	f7fd fde4 	bl	8008c1c <HAL_GetTick>
 800b054:	0002      	movs	r2, r0
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d901      	bls.n	800b062 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800b05e:	2303      	movs	r3, #3
 800b060:	e1ec      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800b062:	4baf      	ldr	r3, [pc, #700]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	2380      	movs	r3, #128	; 0x80
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4013      	ands	r3, r2
 800b06c:	d1f0      	bne.n	800b050 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2208      	movs	r2, #8
 800b074:	4013      	ands	r3, r2
 800b076:	d036      	beq.n	800b0e6 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	695b      	ldr	r3, [r3, #20]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d019      	beq.n	800b0b4 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b080:	4ba7      	ldr	r3, [pc, #668]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b082:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b084:	4ba6      	ldr	r3, [pc, #664]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b086:	2101      	movs	r1, #1
 800b088:	430a      	orrs	r2, r1
 800b08a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b08c:	f7fd fdc6 	bl	8008c1c <HAL_GetTick>
 800b090:	0003      	movs	r3, r0
 800b092:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b094:	e008      	b.n	800b0a8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b096:	f7fd fdc1 	bl	8008c1c <HAL_GetTick>
 800b09a:	0002      	movs	r2, r0
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	1ad3      	subs	r3, r2, r3
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	d901      	bls.n	800b0a8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e1c9      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b0a8:	4b9d      	ldr	r3, [pc, #628]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ac:	2202      	movs	r2, #2
 800b0ae:	4013      	ands	r3, r2
 800b0b0:	d0f1      	beq.n	800b096 <HAL_RCC_OscConfig+0x3e6>
 800b0b2:	e018      	b.n	800b0e6 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b0b4:	4b9a      	ldr	r3, [pc, #616]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b0b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0b8:	4b99      	ldr	r3, [pc, #612]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b0ba:	2101      	movs	r1, #1
 800b0bc:	438a      	bics	r2, r1
 800b0be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0c0:	f7fd fdac 	bl	8008c1c <HAL_GetTick>
 800b0c4:	0003      	movs	r3, r0
 800b0c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b0c8:	e008      	b.n	800b0dc <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b0ca:	f7fd fda7 	bl	8008c1c <HAL_GetTick>
 800b0ce:	0002      	movs	r2, r0
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	1ad3      	subs	r3, r2, r3
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d901      	bls.n	800b0dc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800b0d8:	2303      	movs	r3, #3
 800b0da:	e1af      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b0dc:	4b90      	ldr	r3, [pc, #576]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b0de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	d1f1      	bne.n	800b0ca <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2204      	movs	r2, #4
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	d100      	bne.n	800b0f2 <HAL_RCC_OscConfig+0x442>
 800b0f0:	e0af      	b.n	800b252 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b0f2:	2323      	movs	r3, #35	; 0x23
 800b0f4:	18fb      	adds	r3, r7, r3
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b0fa:	4b89      	ldr	r3, [pc, #548]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b0fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0fe:	2380      	movs	r3, #128	; 0x80
 800b100:	055b      	lsls	r3, r3, #21
 800b102:	4013      	ands	r3, r2
 800b104:	d10a      	bne.n	800b11c <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b106:	4b86      	ldr	r3, [pc, #536]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b10a:	4b85      	ldr	r3, [pc, #532]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b10c:	2180      	movs	r1, #128	; 0x80
 800b10e:	0549      	lsls	r1, r1, #21
 800b110:	430a      	orrs	r2, r1
 800b112:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800b114:	2323      	movs	r3, #35	; 0x23
 800b116:	18fb      	adds	r3, r7, r3
 800b118:	2201      	movs	r2, #1
 800b11a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b11c:	4b83      	ldr	r3, [pc, #524]	; (800b32c <HAL_RCC_OscConfig+0x67c>)
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	2380      	movs	r3, #128	; 0x80
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	4013      	ands	r3, r2
 800b126:	d11a      	bne.n	800b15e <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b128:	4b80      	ldr	r3, [pc, #512]	; (800b32c <HAL_RCC_OscConfig+0x67c>)
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	4b7f      	ldr	r3, [pc, #508]	; (800b32c <HAL_RCC_OscConfig+0x67c>)
 800b12e:	2180      	movs	r1, #128	; 0x80
 800b130:	0049      	lsls	r1, r1, #1
 800b132:	430a      	orrs	r2, r1
 800b134:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b136:	f7fd fd71 	bl	8008c1c <HAL_GetTick>
 800b13a:	0003      	movs	r3, r0
 800b13c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b13e:	e008      	b.n	800b152 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b140:	f7fd fd6c 	bl	8008c1c <HAL_GetTick>
 800b144:	0002      	movs	r2, r0
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	2b64      	cmp	r3, #100	; 0x64
 800b14c:	d901      	bls.n	800b152 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800b14e:	2303      	movs	r3, #3
 800b150:	e174      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b152:	4b76      	ldr	r3, [pc, #472]	; (800b32c <HAL_RCC_OscConfig+0x67c>)
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	2380      	movs	r3, #128	; 0x80
 800b158:	005b      	lsls	r3, r3, #1
 800b15a:	4013      	ands	r3, r2
 800b15c:	d0f0      	beq.n	800b140 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	689a      	ldr	r2, [r3, #8]
 800b162:	2380      	movs	r3, #128	; 0x80
 800b164:	005b      	lsls	r3, r3, #1
 800b166:	429a      	cmp	r2, r3
 800b168:	d107      	bne.n	800b17a <HAL_RCC_OscConfig+0x4ca>
 800b16a:	4b6d      	ldr	r3, [pc, #436]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b16c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b16e:	4b6c      	ldr	r3, [pc, #432]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b170:	2180      	movs	r1, #128	; 0x80
 800b172:	0049      	lsls	r1, r1, #1
 800b174:	430a      	orrs	r2, r1
 800b176:	651a      	str	r2, [r3, #80]	; 0x50
 800b178:	e031      	b.n	800b1de <HAL_RCC_OscConfig+0x52e>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10c      	bne.n	800b19c <HAL_RCC_OscConfig+0x4ec>
 800b182:	4b67      	ldr	r3, [pc, #412]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b186:	4b66      	ldr	r3, [pc, #408]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b188:	4967      	ldr	r1, [pc, #412]	; (800b328 <HAL_RCC_OscConfig+0x678>)
 800b18a:	400a      	ands	r2, r1
 800b18c:	651a      	str	r2, [r3, #80]	; 0x50
 800b18e:	4b64      	ldr	r3, [pc, #400]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b190:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b192:	4b63      	ldr	r3, [pc, #396]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b194:	4966      	ldr	r1, [pc, #408]	; (800b330 <HAL_RCC_OscConfig+0x680>)
 800b196:	400a      	ands	r2, r1
 800b198:	651a      	str	r2, [r3, #80]	; 0x50
 800b19a:	e020      	b.n	800b1de <HAL_RCC_OscConfig+0x52e>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	689a      	ldr	r2, [r3, #8]
 800b1a0:	23a0      	movs	r3, #160	; 0xa0
 800b1a2:	00db      	lsls	r3, r3, #3
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d10e      	bne.n	800b1c6 <HAL_RCC_OscConfig+0x516>
 800b1a8:	4b5d      	ldr	r3, [pc, #372]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b1aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1ac:	4b5c      	ldr	r3, [pc, #368]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b1ae:	2180      	movs	r1, #128	; 0x80
 800b1b0:	00c9      	lsls	r1, r1, #3
 800b1b2:	430a      	orrs	r2, r1
 800b1b4:	651a      	str	r2, [r3, #80]	; 0x50
 800b1b6:	4b5a      	ldr	r3, [pc, #360]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b1b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1ba:	4b59      	ldr	r3, [pc, #356]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b1bc:	2180      	movs	r1, #128	; 0x80
 800b1be:	0049      	lsls	r1, r1, #1
 800b1c0:	430a      	orrs	r2, r1
 800b1c2:	651a      	str	r2, [r3, #80]	; 0x50
 800b1c4:	e00b      	b.n	800b1de <HAL_RCC_OscConfig+0x52e>
 800b1c6:	4b56      	ldr	r3, [pc, #344]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b1c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1ca:	4b55      	ldr	r3, [pc, #340]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b1cc:	4956      	ldr	r1, [pc, #344]	; (800b328 <HAL_RCC_OscConfig+0x678>)
 800b1ce:	400a      	ands	r2, r1
 800b1d0:	651a      	str	r2, [r3, #80]	; 0x50
 800b1d2:	4b53      	ldr	r3, [pc, #332]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b1d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b1d6:	4b52      	ldr	r3, [pc, #328]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b1d8:	4955      	ldr	r1, [pc, #340]	; (800b330 <HAL_RCC_OscConfig+0x680>)
 800b1da:	400a      	ands	r2, r1
 800b1dc:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	689b      	ldr	r3, [r3, #8]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d015      	beq.n	800b212 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b1e6:	f7fd fd19 	bl	8008c1c <HAL_GetTick>
 800b1ea:	0003      	movs	r3, r0
 800b1ec:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b1ee:	e009      	b.n	800b204 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b1f0:	f7fd fd14 	bl	8008c1c <HAL_GetTick>
 800b1f4:	0002      	movs	r2, r0
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	4a4e      	ldr	r2, [pc, #312]	; (800b334 <HAL_RCC_OscConfig+0x684>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d901      	bls.n	800b204 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 800b200:	2303      	movs	r3, #3
 800b202:	e11b      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b204:	4b46      	ldr	r3, [pc, #280]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b206:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b208:	2380      	movs	r3, #128	; 0x80
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	4013      	ands	r3, r2
 800b20e:	d0ef      	beq.n	800b1f0 <HAL_RCC_OscConfig+0x540>
 800b210:	e014      	b.n	800b23c <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b212:	f7fd fd03 	bl	8008c1c <HAL_GetTick>
 800b216:	0003      	movs	r3, r0
 800b218:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b21a:	e009      	b.n	800b230 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b21c:	f7fd fcfe 	bl	8008c1c <HAL_GetTick>
 800b220:	0002      	movs	r2, r0
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	4a43      	ldr	r2, [pc, #268]	; (800b334 <HAL_RCC_OscConfig+0x684>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d901      	bls.n	800b230 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b22c:	2303      	movs	r3, #3
 800b22e:	e105      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b230:	4b3b      	ldr	r3, [pc, #236]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b232:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b234:	2380      	movs	r3, #128	; 0x80
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	4013      	ands	r3, r2
 800b23a:	d1ef      	bne.n	800b21c <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800b23c:	2323      	movs	r3, #35	; 0x23
 800b23e:	18fb      	adds	r3, r7, r3
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	2b01      	cmp	r3, #1
 800b244:	d105      	bne.n	800b252 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b246:	4b36      	ldr	r3, [pc, #216]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b24a:	4b35      	ldr	r3, [pc, #212]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b24c:	493a      	ldr	r1, [pc, #232]	; (800b338 <HAL_RCC_OscConfig+0x688>)
 800b24e:	400a      	ands	r2, r1
 800b250:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2220      	movs	r2, #32
 800b258:	4013      	ands	r3, r2
 800b25a:	d049      	beq.n	800b2f0 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	699b      	ldr	r3, [r3, #24]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d026      	beq.n	800b2b2 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800b264:	4b2e      	ldr	r3, [pc, #184]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b266:	689a      	ldr	r2, [r3, #8]
 800b268:	4b2d      	ldr	r3, [pc, #180]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b26a:	2101      	movs	r1, #1
 800b26c:	430a      	orrs	r2, r1
 800b26e:	609a      	str	r2, [r3, #8]
 800b270:	4b2b      	ldr	r3, [pc, #172]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b274:	4b2a      	ldr	r3, [pc, #168]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b276:	2101      	movs	r1, #1
 800b278:	430a      	orrs	r2, r1
 800b27a:	635a      	str	r2, [r3, #52]	; 0x34
 800b27c:	4b2f      	ldr	r3, [pc, #188]	; (800b33c <HAL_RCC_OscConfig+0x68c>)
 800b27e:	6a1a      	ldr	r2, [r3, #32]
 800b280:	4b2e      	ldr	r3, [pc, #184]	; (800b33c <HAL_RCC_OscConfig+0x68c>)
 800b282:	2180      	movs	r1, #128	; 0x80
 800b284:	0189      	lsls	r1, r1, #6
 800b286:	430a      	orrs	r2, r1
 800b288:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b28a:	f7fd fcc7 	bl	8008c1c <HAL_GetTick>
 800b28e:	0003      	movs	r3, r0
 800b290:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b292:	e008      	b.n	800b2a6 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b294:	f7fd fcc2 	bl	8008c1c <HAL_GetTick>
 800b298:	0002      	movs	r2, r0
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d901      	bls.n	800b2a6 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e0ca      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b2a6:	4b1e      	ldr	r3, [pc, #120]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	2202      	movs	r2, #2
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	d0f1      	beq.n	800b294 <HAL_RCC_OscConfig+0x5e4>
 800b2b0:	e01e      	b.n	800b2f0 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800b2b2:	4b1b      	ldr	r3, [pc, #108]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b2b4:	689a      	ldr	r2, [r3, #8]
 800b2b6:	4b1a      	ldr	r3, [pc, #104]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b2b8:	2101      	movs	r1, #1
 800b2ba:	438a      	bics	r2, r1
 800b2bc:	609a      	str	r2, [r3, #8]
 800b2be:	4b1f      	ldr	r3, [pc, #124]	; (800b33c <HAL_RCC_OscConfig+0x68c>)
 800b2c0:	6a1a      	ldr	r2, [r3, #32]
 800b2c2:	4b1e      	ldr	r3, [pc, #120]	; (800b33c <HAL_RCC_OscConfig+0x68c>)
 800b2c4:	491e      	ldr	r1, [pc, #120]	; (800b340 <HAL_RCC_OscConfig+0x690>)
 800b2c6:	400a      	ands	r2, r1
 800b2c8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2ca:	f7fd fca7 	bl	8008c1c <HAL_GetTick>
 800b2ce:	0003      	movs	r3, r0
 800b2d0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b2d2:	e008      	b.n	800b2e6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b2d4:	f7fd fca2 	bl	8008c1c <HAL_GetTick>
 800b2d8:	0002      	movs	r2, r0
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	1ad3      	subs	r3, r2, r3
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	d901      	bls.n	800b2e6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	e0aa      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b2e6:	4b0e      	ldr	r3, [pc, #56]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	2202      	movs	r2, #2
 800b2ec:	4013      	ands	r3, r2
 800b2ee:	d1f1      	bne.n	800b2d4 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d100      	bne.n	800b2fa <HAL_RCC_OscConfig+0x64a>
 800b2f8:	e09f      	b.n	800b43a <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	2b0c      	cmp	r3, #12
 800b2fe:	d100      	bne.n	800b302 <HAL_RCC_OscConfig+0x652>
 800b300:	e078      	b.n	800b3f4 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b306:	2b02      	cmp	r3, #2
 800b308:	d159      	bne.n	800b3be <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b30a:	4b05      	ldr	r3, [pc, #20]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	4b04      	ldr	r3, [pc, #16]	; (800b320 <HAL_RCC_OscConfig+0x670>)
 800b310:	490c      	ldr	r1, [pc, #48]	; (800b344 <HAL_RCC_OscConfig+0x694>)
 800b312:	400a      	ands	r2, r1
 800b314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b316:	f7fd fc81 	bl	8008c1c <HAL_GetTick>
 800b31a:	0003      	movs	r3, r0
 800b31c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800b31e:	e01c      	b.n	800b35a <HAL_RCC_OscConfig+0x6aa>
 800b320:	40021000 	.word	0x40021000
 800b324:	ffff1fff 	.word	0xffff1fff
 800b328:	fffffeff 	.word	0xfffffeff
 800b32c:	40007000 	.word	0x40007000
 800b330:	fffffbff 	.word	0xfffffbff
 800b334:	00001388 	.word	0x00001388
 800b338:	efffffff 	.word	0xefffffff
 800b33c:	40010000 	.word	0x40010000
 800b340:	ffffdfff 	.word	0xffffdfff
 800b344:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b348:	f7fd fc68 	bl	8008c1c <HAL_GetTick>
 800b34c:	0002      	movs	r2, r0
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	2b02      	cmp	r3, #2
 800b354:	d901      	bls.n	800b35a <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800b356:	2303      	movs	r3, #3
 800b358:	e070      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800b35a:	4b3a      	ldr	r3, [pc, #232]	; (800b444 <HAL_RCC_OscConfig+0x794>)
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	2380      	movs	r3, #128	; 0x80
 800b360:	049b      	lsls	r3, r3, #18
 800b362:	4013      	ands	r3, r2
 800b364:	d1f0      	bne.n	800b348 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b366:	4b37      	ldr	r3, [pc, #220]	; (800b444 <HAL_RCC_OscConfig+0x794>)
 800b368:	68db      	ldr	r3, [r3, #12]
 800b36a:	4a37      	ldr	r2, [pc, #220]	; (800b448 <HAL_RCC_OscConfig+0x798>)
 800b36c:	4013      	ands	r3, r2
 800b36e:	0019      	movs	r1, r3
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b378:	431a      	orrs	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b37e:	431a      	orrs	r2, r3
 800b380:	4b30      	ldr	r3, [pc, #192]	; (800b444 <HAL_RCC_OscConfig+0x794>)
 800b382:	430a      	orrs	r2, r1
 800b384:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b386:	4b2f      	ldr	r3, [pc, #188]	; (800b444 <HAL_RCC_OscConfig+0x794>)
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	4b2e      	ldr	r3, [pc, #184]	; (800b444 <HAL_RCC_OscConfig+0x794>)
 800b38c:	2180      	movs	r1, #128	; 0x80
 800b38e:	0449      	lsls	r1, r1, #17
 800b390:	430a      	orrs	r2, r1
 800b392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b394:	f7fd fc42 	bl	8008c1c <HAL_GetTick>
 800b398:	0003      	movs	r3, r0
 800b39a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800b39c:	e008      	b.n	800b3b0 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b39e:	f7fd fc3d 	bl	8008c1c <HAL_GetTick>
 800b3a2:	0002      	movs	r2, r0
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	1ad3      	subs	r3, r2, r3
 800b3a8:	2b02      	cmp	r3, #2
 800b3aa:	d901      	bls.n	800b3b0 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 800b3ac:	2303      	movs	r3, #3
 800b3ae:	e045      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800b3b0:	4b24      	ldr	r3, [pc, #144]	; (800b444 <HAL_RCC_OscConfig+0x794>)
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	2380      	movs	r3, #128	; 0x80
 800b3b6:	049b      	lsls	r3, r3, #18
 800b3b8:	4013      	ands	r3, r2
 800b3ba:	d0f0      	beq.n	800b39e <HAL_RCC_OscConfig+0x6ee>
 800b3bc:	e03d      	b.n	800b43a <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b3be:	4b21      	ldr	r3, [pc, #132]	; (800b444 <HAL_RCC_OscConfig+0x794>)
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	4b20      	ldr	r3, [pc, #128]	; (800b444 <HAL_RCC_OscConfig+0x794>)
 800b3c4:	4921      	ldr	r1, [pc, #132]	; (800b44c <HAL_RCC_OscConfig+0x79c>)
 800b3c6:	400a      	ands	r2, r1
 800b3c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3ca:	f7fd fc27 	bl	8008c1c <HAL_GetTick>
 800b3ce:	0003      	movs	r3, r0
 800b3d0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800b3d2:	e008      	b.n	800b3e6 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b3d4:	f7fd fc22 	bl	8008c1c <HAL_GetTick>
 800b3d8:	0002      	movs	r2, r0
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	1ad3      	subs	r3, r2, r3
 800b3de:	2b02      	cmp	r3, #2
 800b3e0:	d901      	bls.n	800b3e6 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 800b3e2:	2303      	movs	r3, #3
 800b3e4:	e02a      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800b3e6:	4b17      	ldr	r3, [pc, #92]	; (800b444 <HAL_RCC_OscConfig+0x794>)
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	2380      	movs	r3, #128	; 0x80
 800b3ec:	049b      	lsls	r3, r3, #18
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	d1f0      	bne.n	800b3d4 <HAL_RCC_OscConfig+0x724>
 800b3f2:	e022      	b.n	800b43a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d101      	bne.n	800b400 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e01d      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b400:	4b10      	ldr	r3, [pc, #64]	; (800b444 <HAL_RCC_OscConfig+0x794>)
 800b402:	68db      	ldr	r3, [r3, #12]
 800b404:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b406:	69ba      	ldr	r2, [r7, #24]
 800b408:	2380      	movs	r3, #128	; 0x80
 800b40a:	025b      	lsls	r3, r3, #9
 800b40c:	401a      	ands	r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b412:	429a      	cmp	r2, r3
 800b414:	d10f      	bne.n	800b436 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800b416:	69ba      	ldr	r2, [r7, #24]
 800b418:	23f0      	movs	r3, #240	; 0xf0
 800b41a:	039b      	lsls	r3, r3, #14
 800b41c:	401a      	ands	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b422:	429a      	cmp	r2, r3
 800b424:	d107      	bne.n	800b436 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800b426:	69ba      	ldr	r2, [r7, #24]
 800b428:	23c0      	movs	r3, #192	; 0xc0
 800b42a:	041b      	lsls	r3, r3, #16
 800b42c:	401a      	ands	r2, r3
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800b432:	429a      	cmp	r2, r3
 800b434:	d001      	beq.n	800b43a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	e000      	b.n	800b43c <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	0018      	movs	r0, r3
 800b43e:	46bd      	mov	sp, r7
 800b440:	b00a      	add	sp, #40	; 0x28
 800b442:	bdb0      	pop	{r4, r5, r7, pc}
 800b444:	40021000 	.word	0x40021000
 800b448:	ff02ffff 	.word	0xff02ffff
 800b44c:	feffffff 	.word	0xfeffffff

0800b450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b450:	b5b0      	push	{r4, r5, r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d101      	bne.n	800b464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b460:	2301      	movs	r3, #1
 800b462:	e10d      	b.n	800b680 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b464:	4b88      	ldr	r3, [pc, #544]	; (800b688 <HAL_RCC_ClockConfig+0x238>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2201      	movs	r2, #1
 800b46a:	4013      	ands	r3, r2
 800b46c:	683a      	ldr	r2, [r7, #0]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d911      	bls.n	800b496 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b472:	4b85      	ldr	r3, [pc, #532]	; (800b688 <HAL_RCC_ClockConfig+0x238>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2201      	movs	r2, #1
 800b478:	4393      	bics	r3, r2
 800b47a:	0019      	movs	r1, r3
 800b47c:	4b82      	ldr	r3, [pc, #520]	; (800b688 <HAL_RCC_ClockConfig+0x238>)
 800b47e:	683a      	ldr	r2, [r7, #0]
 800b480:	430a      	orrs	r2, r1
 800b482:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b484:	4b80      	ldr	r3, [pc, #512]	; (800b688 <HAL_RCC_ClockConfig+0x238>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2201      	movs	r2, #1
 800b48a:	4013      	ands	r3, r2
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d001      	beq.n	800b496 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800b492:	2301      	movs	r3, #1
 800b494:	e0f4      	b.n	800b680 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2202      	movs	r2, #2
 800b49c:	4013      	ands	r3, r2
 800b49e:	d009      	beq.n	800b4b4 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4a0:	4b7a      	ldr	r3, [pc, #488]	; (800b68c <HAL_RCC_ClockConfig+0x23c>)
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	22f0      	movs	r2, #240	; 0xf0
 800b4a6:	4393      	bics	r3, r2
 800b4a8:	0019      	movs	r1, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	689a      	ldr	r2, [r3, #8]
 800b4ae:	4b77      	ldr	r3, [pc, #476]	; (800b68c <HAL_RCC_ClockConfig+0x23c>)
 800b4b0:	430a      	orrs	r2, r1
 800b4b2:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	4013      	ands	r3, r2
 800b4bc:	d100      	bne.n	800b4c0 <HAL_RCC_ClockConfig+0x70>
 800b4be:	e089      	b.n	800b5d4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d107      	bne.n	800b4d8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b4c8:	4b70      	ldr	r3, [pc, #448]	; (800b68c <HAL_RCC_ClockConfig+0x23c>)
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	2380      	movs	r3, #128	; 0x80
 800b4ce:	029b      	lsls	r3, r3, #10
 800b4d0:	4013      	ands	r3, r2
 800b4d2:	d120      	bne.n	800b516 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e0d3      	b.n	800b680 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	2b03      	cmp	r3, #3
 800b4de:	d107      	bne.n	800b4f0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b4e0:	4b6a      	ldr	r3, [pc, #424]	; (800b68c <HAL_RCC_ClockConfig+0x23c>)
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	2380      	movs	r3, #128	; 0x80
 800b4e6:	049b      	lsls	r3, r3, #18
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	d114      	bne.n	800b516 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e0c7      	b.n	800b680 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d106      	bne.n	800b506 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b4f8:	4b64      	ldr	r3, [pc, #400]	; (800b68c <HAL_RCC_ClockConfig+0x23c>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2204      	movs	r2, #4
 800b4fe:	4013      	ands	r3, r2
 800b500:	d109      	bne.n	800b516 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800b502:	2301      	movs	r3, #1
 800b504:	e0bc      	b.n	800b680 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800b506:	4b61      	ldr	r3, [pc, #388]	; (800b68c <HAL_RCC_ClockConfig+0x23c>)
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	2380      	movs	r3, #128	; 0x80
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	4013      	ands	r3, r2
 800b510:	d101      	bne.n	800b516 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	e0b4      	b.n	800b680 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b516:	4b5d      	ldr	r3, [pc, #372]	; (800b68c <HAL_RCC_ClockConfig+0x23c>)
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	2203      	movs	r2, #3
 800b51c:	4393      	bics	r3, r2
 800b51e:	0019      	movs	r1, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	685a      	ldr	r2, [r3, #4]
 800b524:	4b59      	ldr	r3, [pc, #356]	; (800b68c <HAL_RCC_ClockConfig+0x23c>)
 800b526:	430a      	orrs	r2, r1
 800b528:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b52a:	f7fd fb77 	bl	8008c1c <HAL_GetTick>
 800b52e:	0003      	movs	r3, r0
 800b530:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	2b02      	cmp	r3, #2
 800b538:	d111      	bne.n	800b55e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b53a:	e009      	b.n	800b550 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b53c:	f7fd fb6e 	bl	8008c1c <HAL_GetTick>
 800b540:	0002      	movs	r2, r0
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	4a52      	ldr	r2, [pc, #328]	; (800b690 <HAL_RCC_ClockConfig+0x240>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d901      	bls.n	800b550 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800b54c:	2303      	movs	r3, #3
 800b54e:	e097      	b.n	800b680 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800b550:	4b4e      	ldr	r3, [pc, #312]	; (800b68c <HAL_RCC_ClockConfig+0x23c>)
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	220c      	movs	r2, #12
 800b556:	4013      	ands	r3, r2
 800b558:	2b08      	cmp	r3, #8
 800b55a:	d1ef      	bne.n	800b53c <HAL_RCC_ClockConfig+0xec>
 800b55c:	e03a      	b.n	800b5d4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	2b03      	cmp	r3, #3
 800b564:	d111      	bne.n	800b58a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b566:	e009      	b.n	800b57c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b568:	f7fd fb58 	bl	8008c1c <HAL_GetTick>
 800b56c:	0002      	movs	r2, r0
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	4a47      	ldr	r2, [pc, #284]	; (800b690 <HAL_RCC_ClockConfig+0x240>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d901      	bls.n	800b57c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 800b578:	2303      	movs	r3, #3
 800b57a:	e081      	b.n	800b680 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b57c:	4b43      	ldr	r3, [pc, #268]	; (800b68c <HAL_RCC_ClockConfig+0x23c>)
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	220c      	movs	r2, #12
 800b582:	4013      	ands	r3, r2
 800b584:	2b0c      	cmp	r3, #12
 800b586:	d1ef      	bne.n	800b568 <HAL_RCC_ClockConfig+0x118>
 800b588:	e024      	b.n	800b5d4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	685b      	ldr	r3, [r3, #4]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d11b      	bne.n	800b5ca <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b592:	e009      	b.n	800b5a8 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b594:	f7fd fb42 	bl	8008c1c <HAL_GetTick>
 800b598:	0002      	movs	r2, r0
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	1ad3      	subs	r3, r2, r3
 800b59e:	4a3c      	ldr	r2, [pc, #240]	; (800b690 <HAL_RCC_ClockConfig+0x240>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d901      	bls.n	800b5a8 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800b5a4:	2303      	movs	r3, #3
 800b5a6:	e06b      	b.n	800b680 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800b5a8:	4b38      	ldr	r3, [pc, #224]	; (800b68c <HAL_RCC_ClockConfig+0x23c>)
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	220c      	movs	r2, #12
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	2b04      	cmp	r3, #4
 800b5b2:	d1ef      	bne.n	800b594 <HAL_RCC_ClockConfig+0x144>
 800b5b4:	e00e      	b.n	800b5d4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b5b6:	f7fd fb31 	bl	8008c1c <HAL_GetTick>
 800b5ba:	0002      	movs	r2, r0
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	1ad3      	subs	r3, r2, r3
 800b5c0:	4a33      	ldr	r2, [pc, #204]	; (800b690 <HAL_RCC_ClockConfig+0x240>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d901      	bls.n	800b5ca <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	e05a      	b.n	800b680 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800b5ca:	4b30      	ldr	r3, [pc, #192]	; (800b68c <HAL_RCC_ClockConfig+0x23c>)
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	220c      	movs	r2, #12
 800b5d0:	4013      	ands	r3, r2
 800b5d2:	d1f0      	bne.n	800b5b6 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b5d4:	4b2c      	ldr	r3, [pc, #176]	; (800b688 <HAL_RCC_ClockConfig+0x238>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2201      	movs	r2, #1
 800b5da:	4013      	ands	r3, r2
 800b5dc:	683a      	ldr	r2, [r7, #0]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d211      	bcs.n	800b606 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5e2:	4b29      	ldr	r3, [pc, #164]	; (800b688 <HAL_RCC_ClockConfig+0x238>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	4393      	bics	r3, r2
 800b5ea:	0019      	movs	r1, r3
 800b5ec:	4b26      	ldr	r3, [pc, #152]	; (800b688 <HAL_RCC_ClockConfig+0x238>)
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	430a      	orrs	r2, r1
 800b5f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5f4:	4b24      	ldr	r3, [pc, #144]	; (800b688 <HAL_RCC_ClockConfig+0x238>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	683a      	ldr	r2, [r7, #0]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d001      	beq.n	800b606 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	e03c      	b.n	800b680 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2204      	movs	r2, #4
 800b60c:	4013      	ands	r3, r2
 800b60e:	d009      	beq.n	800b624 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b610:	4b1e      	ldr	r3, [pc, #120]	; (800b68c <HAL_RCC_ClockConfig+0x23c>)
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	4a1f      	ldr	r2, [pc, #124]	; (800b694 <HAL_RCC_ClockConfig+0x244>)
 800b616:	4013      	ands	r3, r2
 800b618:	0019      	movs	r1, r3
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	68da      	ldr	r2, [r3, #12]
 800b61e:	4b1b      	ldr	r3, [pc, #108]	; (800b68c <HAL_RCC_ClockConfig+0x23c>)
 800b620:	430a      	orrs	r2, r1
 800b622:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2208      	movs	r2, #8
 800b62a:	4013      	ands	r3, r2
 800b62c:	d00a      	beq.n	800b644 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b62e:	4b17      	ldr	r3, [pc, #92]	; (800b68c <HAL_RCC_ClockConfig+0x23c>)
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	4a19      	ldr	r2, [pc, #100]	; (800b698 <HAL_RCC_ClockConfig+0x248>)
 800b634:	4013      	ands	r3, r2
 800b636:	0019      	movs	r1, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	691b      	ldr	r3, [r3, #16]
 800b63c:	00da      	lsls	r2, r3, #3
 800b63e:	4b13      	ldr	r3, [pc, #76]	; (800b68c <HAL_RCC_ClockConfig+0x23c>)
 800b640:	430a      	orrs	r2, r1
 800b642:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b644:	f000 f82e 	bl	800b6a4 <HAL_RCC_GetSysClockFreq>
 800b648:	0001      	movs	r1, r0
 800b64a:	4b10      	ldr	r3, [pc, #64]	; (800b68c <HAL_RCC_ClockConfig+0x23c>)
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	091b      	lsrs	r3, r3, #4
 800b650:	220f      	movs	r2, #15
 800b652:	4013      	ands	r3, r2
 800b654:	4a11      	ldr	r2, [pc, #68]	; (800b69c <HAL_RCC_ClockConfig+0x24c>)
 800b656:	5cd3      	ldrb	r3, [r2, r3]
 800b658:	000a      	movs	r2, r1
 800b65a:	40da      	lsrs	r2, r3
 800b65c:	4b10      	ldr	r3, [pc, #64]	; (800b6a0 <HAL_RCC_ClockConfig+0x250>)
 800b65e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800b660:	250b      	movs	r5, #11
 800b662:	197c      	adds	r4, r7, r5
 800b664:	2003      	movs	r0, #3
 800b666:	f7f9 fce0 	bl	800502a <HAL_InitTick>
 800b66a:	0003      	movs	r3, r0
 800b66c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800b66e:	197b      	adds	r3, r7, r5
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d003      	beq.n	800b67e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800b676:	230b      	movs	r3, #11
 800b678:	18fb      	adds	r3, r7, r3
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	e000      	b.n	800b680 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	0018      	movs	r0, r3
 800b682:	46bd      	mov	sp, r7
 800b684:	b004      	add	sp, #16
 800b686:	bdb0      	pop	{r4, r5, r7, pc}
 800b688:	40022000 	.word	0x40022000
 800b68c:	40021000 	.word	0x40021000
 800b690:	00001388 	.word	0x00001388
 800b694:	fffff8ff 	.word	0xfffff8ff
 800b698:	ffffc7ff 	.word	0xffffc7ff
 800b69c:	0801c9d8 	.word	0x0801c9d8
 800b6a0:	20000030 	.word	0x20000030

0800b6a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b086      	sub	sp, #24
 800b6a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800b6aa:	4b3b      	ldr	r3, [pc, #236]	; (800b798 <HAL_RCC_GetSysClockFreq+0xf4>)
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	220c      	movs	r2, #12
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	2b08      	cmp	r3, #8
 800b6b8:	d00e      	beq.n	800b6d8 <HAL_RCC_GetSysClockFreq+0x34>
 800b6ba:	2b0c      	cmp	r3, #12
 800b6bc:	d00f      	beq.n	800b6de <HAL_RCC_GetSysClockFreq+0x3a>
 800b6be:	2b04      	cmp	r3, #4
 800b6c0:	d157      	bne.n	800b772 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800b6c2:	4b35      	ldr	r3, [pc, #212]	; (800b798 <HAL_RCC_GetSysClockFreq+0xf4>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2210      	movs	r2, #16
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	d002      	beq.n	800b6d2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800b6cc:	4b33      	ldr	r3, [pc, #204]	; (800b79c <HAL_RCC_GetSysClockFreq+0xf8>)
 800b6ce:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800b6d0:	e05d      	b.n	800b78e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800b6d2:	4b33      	ldr	r3, [pc, #204]	; (800b7a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800b6d4:	613b      	str	r3, [r7, #16]
      break;
 800b6d6:	e05a      	b.n	800b78e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b6d8:	4b32      	ldr	r3, [pc, #200]	; (800b7a4 <HAL_RCC_GetSysClockFreq+0x100>)
 800b6da:	613b      	str	r3, [r7, #16]
      break;
 800b6dc:	e057      	b.n	800b78e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	0c9b      	lsrs	r3, r3, #18
 800b6e2:	220f      	movs	r2, #15
 800b6e4:	4013      	ands	r3, r2
 800b6e6:	4a30      	ldr	r2, [pc, #192]	; (800b7a8 <HAL_RCC_GetSysClockFreq+0x104>)
 800b6e8:	5cd3      	ldrb	r3, [r2, r3]
 800b6ea:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	0d9b      	lsrs	r3, r3, #22
 800b6f0:	2203      	movs	r2, #3
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b6f8:	4b27      	ldr	r3, [pc, #156]	; (800b798 <HAL_RCC_GetSysClockFreq+0xf4>)
 800b6fa:	68da      	ldr	r2, [r3, #12]
 800b6fc:	2380      	movs	r3, #128	; 0x80
 800b6fe:	025b      	lsls	r3, r3, #9
 800b700:	4013      	ands	r3, r2
 800b702:	d00f      	beq.n	800b724 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800b704:	68b9      	ldr	r1, [r7, #8]
 800b706:	000a      	movs	r2, r1
 800b708:	0152      	lsls	r2, r2, #5
 800b70a:	1a52      	subs	r2, r2, r1
 800b70c:	0193      	lsls	r3, r2, #6
 800b70e:	1a9b      	subs	r3, r3, r2
 800b710:	00db      	lsls	r3, r3, #3
 800b712:	185b      	adds	r3, r3, r1
 800b714:	025b      	lsls	r3, r3, #9
 800b716:	6879      	ldr	r1, [r7, #4]
 800b718:	0018      	movs	r0, r3
 800b71a:	f7f4 fcf5 	bl	8000108 <__udivsi3>
 800b71e:	0003      	movs	r3, r0
 800b720:	617b      	str	r3, [r7, #20]
 800b722:	e023      	b.n	800b76c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800b724:	4b1c      	ldr	r3, [pc, #112]	; (800b798 <HAL_RCC_GetSysClockFreq+0xf4>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2210      	movs	r2, #16
 800b72a:	4013      	ands	r3, r2
 800b72c:	d00f      	beq.n	800b74e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800b72e:	68b9      	ldr	r1, [r7, #8]
 800b730:	000a      	movs	r2, r1
 800b732:	0152      	lsls	r2, r2, #5
 800b734:	1a52      	subs	r2, r2, r1
 800b736:	0193      	lsls	r3, r2, #6
 800b738:	1a9b      	subs	r3, r3, r2
 800b73a:	00db      	lsls	r3, r3, #3
 800b73c:	185b      	adds	r3, r3, r1
 800b73e:	021b      	lsls	r3, r3, #8
 800b740:	6879      	ldr	r1, [r7, #4]
 800b742:	0018      	movs	r0, r3
 800b744:	f7f4 fce0 	bl	8000108 <__udivsi3>
 800b748:	0003      	movs	r3, r0
 800b74a:	617b      	str	r3, [r7, #20]
 800b74c:	e00e      	b.n	800b76c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800b74e:	68b9      	ldr	r1, [r7, #8]
 800b750:	000a      	movs	r2, r1
 800b752:	0152      	lsls	r2, r2, #5
 800b754:	1a52      	subs	r2, r2, r1
 800b756:	0193      	lsls	r3, r2, #6
 800b758:	1a9b      	subs	r3, r3, r2
 800b75a:	00db      	lsls	r3, r3, #3
 800b75c:	185b      	adds	r3, r3, r1
 800b75e:	029b      	lsls	r3, r3, #10
 800b760:	6879      	ldr	r1, [r7, #4]
 800b762:	0018      	movs	r0, r3
 800b764:	f7f4 fcd0 	bl	8000108 <__udivsi3>
 800b768:	0003      	movs	r3, r0
 800b76a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	613b      	str	r3, [r7, #16]
      break;
 800b770:	e00d      	b.n	800b78e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800b772:	4b09      	ldr	r3, [pc, #36]	; (800b798 <HAL_RCC_GetSysClockFreq+0xf4>)
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	0b5b      	lsrs	r3, r3, #13
 800b778:	2207      	movs	r2, #7
 800b77a:	4013      	ands	r3, r2
 800b77c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	3301      	adds	r3, #1
 800b782:	2280      	movs	r2, #128	; 0x80
 800b784:	0212      	lsls	r2, r2, #8
 800b786:	409a      	lsls	r2, r3
 800b788:	0013      	movs	r3, r2
 800b78a:	613b      	str	r3, [r7, #16]
      break;
 800b78c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800b78e:	693b      	ldr	r3, [r7, #16]
}
 800b790:	0018      	movs	r0, r3
 800b792:	46bd      	mov	sp, r7
 800b794:	b006      	add	sp, #24
 800b796:	bd80      	pop	{r7, pc}
 800b798:	40021000 	.word	0x40021000
 800b79c:	003d0900 	.word	0x003d0900
 800b7a0:	00f42400 	.word	0x00f42400
 800b7a4:	007a1200 	.word	0x007a1200
 800b7a8:	0801c9f0 	.word	0x0801c9f0

0800b7ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b7b0:	4b02      	ldr	r3, [pc, #8]	; (800b7bc <HAL_RCC_GetHCLKFreq+0x10>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
}
 800b7b4:	0018      	movs	r0, r3
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	46c0      	nop			; (mov r8, r8)
 800b7bc:	20000030 	.word	0x20000030

0800b7c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b7c4:	f7ff fff2 	bl	800b7ac <HAL_RCC_GetHCLKFreq>
 800b7c8:	0001      	movs	r1, r0
 800b7ca:	4b06      	ldr	r3, [pc, #24]	; (800b7e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	0a1b      	lsrs	r3, r3, #8
 800b7d0:	2207      	movs	r2, #7
 800b7d2:	4013      	ands	r3, r2
 800b7d4:	4a04      	ldr	r2, [pc, #16]	; (800b7e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b7d6:	5cd3      	ldrb	r3, [r2, r3]
 800b7d8:	40d9      	lsrs	r1, r3
 800b7da:	000b      	movs	r3, r1
}
 800b7dc:	0018      	movs	r0, r3
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	46c0      	nop			; (mov r8, r8)
 800b7e4:	40021000 	.word	0x40021000
 800b7e8:	0801c9e8 	.word	0x0801c9e8

0800b7ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b7f0:	f7ff ffdc 	bl	800b7ac <HAL_RCC_GetHCLKFreq>
 800b7f4:	0001      	movs	r1, r0
 800b7f6:	4b06      	ldr	r3, [pc, #24]	; (800b810 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	0adb      	lsrs	r3, r3, #11
 800b7fc:	2207      	movs	r2, #7
 800b7fe:	4013      	ands	r3, r2
 800b800:	4a04      	ldr	r2, [pc, #16]	; (800b814 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b802:	5cd3      	ldrb	r3, [r2, r3]
 800b804:	40d9      	lsrs	r1, r3
 800b806:	000b      	movs	r3, r1
}
 800b808:	0018      	movs	r0, r3
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	46c0      	nop			; (mov r8, r8)
 800b810:	40021000 	.word	0x40021000
 800b814:	0801c9e8 	.word	0x0801c9e8

0800b818 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b086      	sub	sp, #24
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2220      	movs	r2, #32
 800b826:	4013      	ands	r3, r2
 800b828:	d100      	bne.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0x14>
 800b82a:	e0c7      	b.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800b82c:	2317      	movs	r3, #23
 800b82e:	18fb      	adds	r3, r7, r3
 800b830:	2200      	movs	r2, #0
 800b832:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b834:	4b99      	ldr	r3, [pc, #612]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b838:	2380      	movs	r3, #128	; 0x80
 800b83a:	055b      	lsls	r3, r3, #21
 800b83c:	4013      	ands	r3, r2
 800b83e:	d10a      	bne.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b840:	4b96      	ldr	r3, [pc, #600]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b844:	4b95      	ldr	r3, [pc, #596]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b846:	2180      	movs	r1, #128	; 0x80
 800b848:	0549      	lsls	r1, r1, #21
 800b84a:	430a      	orrs	r2, r1
 800b84c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800b84e:	2317      	movs	r3, #23
 800b850:	18fb      	adds	r3, r7, r3
 800b852:	2201      	movs	r2, #1
 800b854:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b856:	4b92      	ldr	r3, [pc, #584]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	2380      	movs	r3, #128	; 0x80
 800b85c:	005b      	lsls	r3, r3, #1
 800b85e:	4013      	ands	r3, r2
 800b860:	d11a      	bne.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b862:	4b8f      	ldr	r3, [pc, #572]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	4b8e      	ldr	r3, [pc, #568]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800b868:	2180      	movs	r1, #128	; 0x80
 800b86a:	0049      	lsls	r1, r1, #1
 800b86c:	430a      	orrs	r2, r1
 800b86e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b870:	f7fd f9d4 	bl	8008c1c <HAL_GetTick>
 800b874:	0003      	movs	r3, r0
 800b876:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b878:	e008      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b87a:	f7fd f9cf 	bl	8008c1c <HAL_GetTick>
 800b87e:	0002      	movs	r2, r0
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	1ad3      	subs	r3, r2, r3
 800b884:	2b64      	cmp	r3, #100	; 0x64
 800b886:	d901      	bls.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 800b888:	2303      	movs	r3, #3
 800b88a:	e102      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b88c:	4b84      	ldr	r3, [pc, #528]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	2380      	movs	r3, #128	; 0x80
 800b892:	005b      	lsls	r3, r3, #1
 800b894:	4013      	ands	r3, r2
 800b896:	d0f0      	beq.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800b898:	4b80      	ldr	r3, [pc, #512]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	23c0      	movs	r3, #192	; 0xc0
 800b89e:	039b      	lsls	r3, r3, #14
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	685a      	ldr	r2, [r3, #4]
 800b8a8:	23c0      	movs	r3, #192	; 0xc0
 800b8aa:	039b      	lsls	r3, r3, #14
 800b8ac:	4013      	ands	r3, r2
 800b8ae:	68fa      	ldr	r2, [r7, #12]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d013      	beq.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	685a      	ldr	r2, [r3, #4]
 800b8b8:	23c0      	movs	r3, #192	; 0xc0
 800b8ba:	029b      	lsls	r3, r3, #10
 800b8bc:	401a      	ands	r2, r3
 800b8be:	23c0      	movs	r3, #192	; 0xc0
 800b8c0:	029b      	lsls	r3, r3, #10
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d10a      	bne.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b8c6:	4b75      	ldr	r3, [pc, #468]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	2380      	movs	r3, #128	; 0x80
 800b8cc:	029b      	lsls	r3, r3, #10
 800b8ce:	401a      	ands	r2, r3
 800b8d0:	2380      	movs	r3, #128	; 0x80
 800b8d2:	029b      	lsls	r3, r3, #10
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d101      	bne.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e0da      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800b8dc:	4b6f      	ldr	r3, [pc, #444]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b8de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8e0:	23c0      	movs	r3, #192	; 0xc0
 800b8e2:	029b      	lsls	r3, r3, #10
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d03b      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	685a      	ldr	r2, [r3, #4]
 800b8f2:	23c0      	movs	r3, #192	; 0xc0
 800b8f4:	029b      	lsls	r3, r3, #10
 800b8f6:	4013      	ands	r3, r2
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d033      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2220      	movs	r2, #32
 800b904:	4013      	ands	r3, r2
 800b906:	d02e      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800b908:	4b64      	ldr	r3, [pc, #400]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b90a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b90c:	4a65      	ldr	r2, [pc, #404]	; (800baa4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800b90e:	4013      	ands	r3, r2
 800b910:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b912:	4b62      	ldr	r3, [pc, #392]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b914:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b916:	4b61      	ldr	r3, [pc, #388]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b918:	2180      	movs	r1, #128	; 0x80
 800b91a:	0309      	lsls	r1, r1, #12
 800b91c:	430a      	orrs	r2, r1
 800b91e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b920:	4b5e      	ldr	r3, [pc, #376]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b922:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b924:	4b5d      	ldr	r3, [pc, #372]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b926:	4960      	ldr	r1, [pc, #384]	; (800baa8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800b928:	400a      	ands	r2, r1
 800b92a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800b92c:	4b5b      	ldr	r3, [pc, #364]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800b932:	68fa      	ldr	r2, [r7, #12]
 800b934:	2380      	movs	r3, #128	; 0x80
 800b936:	005b      	lsls	r3, r3, #1
 800b938:	4013      	ands	r3, r2
 800b93a:	d014      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b93c:	f7fd f96e 	bl	8008c1c <HAL_GetTick>
 800b940:	0003      	movs	r3, r0
 800b942:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b944:	e009      	b.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b946:	f7fd f969 	bl	8008c1c <HAL_GetTick>
 800b94a:	0002      	movs	r2, r0
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	4a56      	ldr	r2, [pc, #344]	; (800baac <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d901      	bls.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800b956:	2303      	movs	r3, #3
 800b958:	e09b      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b95a:	4b50      	ldr	r3, [pc, #320]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b95c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b95e:	2380      	movs	r3, #128	; 0x80
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	4013      	ands	r3, r2
 800b964:	d0ef      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	685a      	ldr	r2, [r3, #4]
 800b96a:	23c0      	movs	r3, #192	; 0xc0
 800b96c:	029b      	lsls	r3, r3, #10
 800b96e:	401a      	ands	r2, r3
 800b970:	23c0      	movs	r3, #192	; 0xc0
 800b972:	029b      	lsls	r3, r3, #10
 800b974:	429a      	cmp	r2, r3
 800b976:	d10c      	bne.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b978:	4b48      	ldr	r3, [pc, #288]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a4c      	ldr	r2, [pc, #304]	; (800bab0 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800b97e:	4013      	ands	r3, r2
 800b980:	0019      	movs	r1, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	685a      	ldr	r2, [r3, #4]
 800b986:	23c0      	movs	r3, #192	; 0xc0
 800b988:	039b      	lsls	r3, r3, #14
 800b98a:	401a      	ands	r2, r3
 800b98c:	4b43      	ldr	r3, [pc, #268]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b98e:	430a      	orrs	r2, r1
 800b990:	601a      	str	r2, [r3, #0]
 800b992:	4b42      	ldr	r3, [pc, #264]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b994:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	685a      	ldr	r2, [r3, #4]
 800b99a:	23c0      	movs	r3, #192	; 0xc0
 800b99c:	029b      	lsls	r3, r3, #10
 800b99e:	401a      	ands	r2, r3
 800b9a0:	4b3e      	ldr	r3, [pc, #248]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b9a2:	430a      	orrs	r2, r1
 800b9a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800b9a6:	2317      	movs	r3, #23
 800b9a8:	18fb      	adds	r3, r7, r3
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d105      	bne.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b9b0:	4b3a      	ldr	r3, [pc, #232]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b9b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9b4:	4b39      	ldr	r3, [pc, #228]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b9b6:	493f      	ldr	r1, [pc, #252]	; (800bab4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800b9b8:	400a      	ands	r2, r1
 800b9ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	d009      	beq.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b9c6:	4b35      	ldr	r3, [pc, #212]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b9c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ca:	2203      	movs	r2, #3
 800b9cc:	4393      	bics	r3, r2
 800b9ce:	0019      	movs	r1, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	689a      	ldr	r2, [r3, #8]
 800b9d4:	4b31      	ldr	r3, [pc, #196]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b9d6:	430a      	orrs	r2, r1
 800b9d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2202      	movs	r2, #2
 800b9e0:	4013      	ands	r3, r2
 800b9e2:	d009      	beq.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b9e4:	4b2d      	ldr	r3, [pc, #180]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b9e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9e8:	220c      	movs	r2, #12
 800b9ea:	4393      	bics	r3, r2
 800b9ec:	0019      	movs	r1, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	68da      	ldr	r2, [r3, #12]
 800b9f2:	4b2a      	ldr	r3, [pc, #168]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800b9f4:	430a      	orrs	r2, r1
 800b9f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2204      	movs	r2, #4
 800b9fe:	4013      	ands	r3, r2
 800ba00:	d009      	beq.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ba02:	4b26      	ldr	r3, [pc, #152]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba06:	4a2c      	ldr	r2, [pc, #176]	; (800bab8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800ba08:	4013      	ands	r3, r2
 800ba0a:	0019      	movs	r1, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	691a      	ldr	r2, [r3, #16]
 800ba10:	4b22      	ldr	r3, [pc, #136]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba12:	430a      	orrs	r2, r1
 800ba14:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2208      	movs	r2, #8
 800ba1c:	4013      	ands	r3, r2
 800ba1e:	d009      	beq.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ba20:	4b1e      	ldr	r3, [pc, #120]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba24:	4a25      	ldr	r2, [pc, #148]	; (800babc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800ba26:	4013      	ands	r3, r2
 800ba28:	0019      	movs	r1, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	695a      	ldr	r2, [r3, #20]
 800ba2e:	4b1b      	ldr	r3, [pc, #108]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba30:	430a      	orrs	r2, r1
 800ba32:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	2380      	movs	r3, #128	; 0x80
 800ba3a:	005b      	lsls	r3, r3, #1
 800ba3c:	4013      	ands	r3, r2
 800ba3e:	d009      	beq.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ba40:	4b16      	ldr	r3, [pc, #88]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba44:	4a17      	ldr	r2, [pc, #92]	; (800baa4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800ba46:	4013      	ands	r3, r2
 800ba48:	0019      	movs	r1, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	699a      	ldr	r2, [r3, #24]
 800ba4e:	4b13      	ldr	r3, [pc, #76]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba50:	430a      	orrs	r2, r1
 800ba52:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2240      	movs	r2, #64	; 0x40
 800ba5a:	4013      	ands	r3, r2
 800ba5c:	d009      	beq.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ba5e:	4b0f      	ldr	r3, [pc, #60]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba62:	4a17      	ldr	r2, [pc, #92]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800ba64:	4013      	ands	r3, r2
 800ba66:	0019      	movs	r1, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6a1a      	ldr	r2, [r3, #32]
 800ba6c:	4b0b      	ldr	r3, [pc, #44]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba6e:	430a      	orrs	r2, r1
 800ba70:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2280      	movs	r2, #128	; 0x80
 800ba78:	4013      	ands	r3, r2
 800ba7a:	d009      	beq.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800ba7c:	4b07      	ldr	r3, [pc, #28]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba80:	4a10      	ldr	r2, [pc, #64]	; (800bac4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800ba82:	4013      	ands	r3, r2
 800ba84:	0019      	movs	r1, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	69da      	ldr	r2, [r3, #28]
 800ba8a:	4b04      	ldr	r3, [pc, #16]	; (800ba9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800ba8c:	430a      	orrs	r2, r1
 800ba8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	0018      	movs	r0, r3
 800ba94:	46bd      	mov	sp, r7
 800ba96:	b006      	add	sp, #24
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	46c0      	nop			; (mov r8, r8)
 800ba9c:	40021000 	.word	0x40021000
 800baa0:	40007000 	.word	0x40007000
 800baa4:	fffcffff 	.word	0xfffcffff
 800baa8:	fff7ffff 	.word	0xfff7ffff
 800baac:	00001388 	.word	0x00001388
 800bab0:	ffcfffff 	.word	0xffcfffff
 800bab4:	efffffff 	.word	0xefffffff
 800bab8:	fffff3ff 	.word	0xfffff3ff
 800babc:	ffffcfff 	.word	0xffffcfff
 800bac0:	fbffffff 	.word	0xfbffffff
 800bac4:	fff3ffff 	.word	0xfff3ffff

0800bac8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d101      	bne.n	800bada <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800bad6:	2301      	movs	r3, #1
 800bad8:	e08e      	b.n	800bbf8 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2221      	movs	r2, #33	; 0x21
 800bade:	5c9b      	ldrb	r3, [r3, r2]
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d107      	bne.n	800baf6 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2220      	movs	r2, #32
 800baea:	2100      	movs	r1, #0
 800baec:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	0018      	movs	r0, r3
 800baf2:	f7f9 fad3 	bl	800509c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2221      	movs	r2, #33	; 0x21
 800bafa:	2102      	movs	r1, #2
 800bafc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	22ca      	movs	r2, #202	; 0xca
 800bb04:	625a      	str	r2, [r3, #36]	; 0x24
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2253      	movs	r2, #83	; 0x53
 800bb0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	0018      	movs	r0, r3
 800bb12:	f000 fca6 	bl	800c462 <RTC_EnterInitMode>
 800bb16:	1e03      	subs	r3, r0, #0
 800bb18:	d009      	beq.n	800bb2e <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	22ff      	movs	r2, #255	; 0xff
 800bb20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2221      	movs	r2, #33	; 0x21
 800bb26:	2104      	movs	r1, #4
 800bb28:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e064      	b.n	800bbf8 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	689a      	ldr	r2, [r3, #8]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4931      	ldr	r1, [pc, #196]	; (800bc00 <HAL_RTC_Init+0x138>)
 800bb3a:	400a      	ands	r2, r1
 800bb3c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	6899      	ldr	r1, [r3, #8]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	685a      	ldr	r2, [r3, #4]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	691b      	ldr	r3, [r3, #16]
 800bb4c:	431a      	orrs	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	699b      	ldr	r3, [r3, #24]
 800bb52:	431a      	orrs	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	430a      	orrs	r2, r1
 800bb5a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	68d2      	ldr	r2, [r2, #12]
 800bb64:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	6919      	ldr	r1, [r3, #16]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	041a      	lsls	r2, r3, #16
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	430a      	orrs	r2, r1
 800bb78:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	68da      	ldr	r2, [r3, #12]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	2180      	movs	r1, #128	; 0x80
 800bb86:	438a      	bics	r2, r1
 800bb88:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2103      	movs	r1, #3
 800bb96:	438a      	bics	r2, r1
 800bb98:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	69da      	ldr	r2, [r3, #28]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	695b      	ldr	r3, [r3, #20]
 800bba8:	431a      	orrs	r2, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	430a      	orrs	r2, r1
 800bbb0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	2220      	movs	r2, #32
 800bbba:	4013      	ands	r3, r2
 800bbbc:	d113      	bne.n	800bbe6 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	0018      	movs	r0, r3
 800bbc2:	f000 fc27 	bl	800c414 <HAL_RTC_WaitForSynchro>
 800bbc6:	1e03      	subs	r3, r0, #0
 800bbc8:	d00d      	beq.n	800bbe6 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	22ff      	movs	r2, #255	; 0xff
 800bbd0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2221      	movs	r2, #33	; 0x21
 800bbd6:	2104      	movs	r1, #4
 800bbd8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2220      	movs	r2, #32
 800bbde:	2100      	movs	r1, #0
 800bbe0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e008      	b.n	800bbf8 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	22ff      	movs	r2, #255	; 0xff
 800bbec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2221      	movs	r2, #33	; 0x21
 800bbf2:	2101      	movs	r1, #1
 800bbf4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800bbf6:	2300      	movs	r3, #0
  }
}
 800bbf8:	0018      	movs	r0, r3
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	b002      	add	sp, #8
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	ff8fffbf 	.word	0xff8fffbf

0800bc04 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bc04:	b590      	push	{r4, r7, lr}
 800bc06:	b087      	sub	sp, #28
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2220      	movs	r2, #32
 800bc14:	5c9b      	ldrb	r3, [r3, r2]
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d101      	bne.n	800bc1e <HAL_RTC_SetTime+0x1a>
 800bc1a:	2302      	movs	r3, #2
 800bc1c:	e0ad      	b.n	800bd7a <HAL_RTC_SetTime+0x176>
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2220      	movs	r2, #32
 800bc22:	2101      	movs	r1, #1
 800bc24:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2221      	movs	r2, #33	; 0x21
 800bc2a:	2102      	movs	r1, #2
 800bc2c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d125      	bne.n	800bc80 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	2240      	movs	r2, #64	; 0x40
 800bc3c:	4013      	ands	r3, r2
 800bc3e:	d102      	bne.n	800bc46 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2200      	movs	r2, #0
 800bc44:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	0018      	movs	r0, r3
 800bc4c:	f000 fc33 	bl	800c4b6 <RTC_ByteToBcd2>
 800bc50:	0003      	movs	r3, r0
 800bc52:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	785b      	ldrb	r3, [r3, #1]
 800bc58:	0018      	movs	r0, r3
 800bc5a:	f000 fc2c 	bl	800c4b6 <RTC_ByteToBcd2>
 800bc5e:	0003      	movs	r3, r0
 800bc60:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bc62:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	789b      	ldrb	r3, [r3, #2]
 800bc68:	0018      	movs	r0, r3
 800bc6a:	f000 fc24 	bl	800c4b6 <RTC_ByteToBcd2>
 800bc6e:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800bc70:	0022      	movs	r2, r4
 800bc72:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	78db      	ldrb	r3, [r3, #3]
 800bc78:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	617b      	str	r3, [r7, #20]
 800bc7e:	e017      	b.n	800bcb0 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	689b      	ldr	r3, [r3, #8]
 800bc86:	2240      	movs	r2, #64	; 0x40
 800bc88:	4013      	ands	r3, r2
 800bc8a:	d102      	bne.n	800bc92 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	785b      	ldrb	r3, [r3, #1]
 800bc9c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bc9e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800bca0:	68ba      	ldr	r2, [r7, #8]
 800bca2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800bca4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	78db      	ldrb	r3, [r3, #3]
 800bcaa:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800bcac:	4313      	orrs	r3, r2
 800bcae:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	22ca      	movs	r2, #202	; 0xca
 800bcb6:	625a      	str	r2, [r3, #36]	; 0x24
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	2253      	movs	r2, #83	; 0x53
 800bcbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	0018      	movs	r0, r3
 800bcc4:	f000 fbcd 	bl	800c462 <RTC_EnterInitMode>
 800bcc8:	1e03      	subs	r3, r0, #0
 800bcca:	d00d      	beq.n	800bce8 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	22ff      	movs	r2, #255	; 0xff
 800bcd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2221      	movs	r2, #33	; 0x21
 800bcd8:	2104      	movs	r1, #4
 800bcda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2220      	movs	r2, #32
 800bce0:	2100      	movs	r1, #0
 800bce2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e048      	b.n	800bd7a <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	697a      	ldr	r2, [r7, #20]
 800bcee:	4925      	ldr	r1, [pc, #148]	; (800bd84 <HAL_RTC_SetTime+0x180>)
 800bcf0:	400a      	ands	r2, r1
 800bcf2:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	689a      	ldr	r2, [r3, #8]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4922      	ldr	r1, [pc, #136]	; (800bd88 <HAL_RTC_SetTime+0x184>)
 800bd00:	400a      	ands	r2, r1
 800bd02:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	6899      	ldr	r1, [r3, #8]
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	68da      	ldr	r2, [r3, #12]
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	691b      	ldr	r3, [r3, #16]
 800bd12:	431a      	orrs	r2, r3
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	430a      	orrs	r2, r1
 800bd1a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	68da      	ldr	r2, [r3, #12]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	2180      	movs	r1, #128	; 0x80
 800bd28:	438a      	bics	r2, r1
 800bd2a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	689b      	ldr	r3, [r3, #8]
 800bd32:	2220      	movs	r2, #32
 800bd34:	4013      	ands	r3, r2
 800bd36:	d113      	bne.n	800bd60 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	0018      	movs	r0, r3
 800bd3c:	f000 fb6a 	bl	800c414 <HAL_RTC_WaitForSynchro>
 800bd40:	1e03      	subs	r3, r0, #0
 800bd42:	d00d      	beq.n	800bd60 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	22ff      	movs	r2, #255	; 0xff
 800bd4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2221      	movs	r2, #33	; 0x21
 800bd50:	2104      	movs	r1, #4
 800bd52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2220      	movs	r2, #32
 800bd58:	2100      	movs	r1, #0
 800bd5a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e00c      	b.n	800bd7a <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	22ff      	movs	r2, #255	; 0xff
 800bd66:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2221      	movs	r2, #33	; 0x21
 800bd6c:	2101      	movs	r1, #1
 800bd6e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2220      	movs	r2, #32
 800bd74:	2100      	movs	r1, #0
 800bd76:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800bd78:	2300      	movs	r3, #0
  }
}
 800bd7a:	0018      	movs	r0, r3
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	b007      	add	sp, #28
 800bd80:	bd90      	pop	{r4, r7, pc}
 800bd82:	46c0      	nop			; (mov r8, r8)
 800bd84:	007f7f7f 	.word	0x007f7f7f
 800bd88:	fffbffff 	.word	0xfffbffff

0800bd8c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b086      	sub	sp, #24
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	045b      	lsls	r3, r3, #17
 800bdaa:	0c5a      	lsrs	r2, r3, #17
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a22      	ldr	r2, [pc, #136]	; (800be40 <HAL_RTC_GetTime+0xb4>)
 800bdb8:	4013      	ands	r3, r2
 800bdba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	0c1b      	lsrs	r3, r3, #16
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	223f      	movs	r2, #63	; 0x3f
 800bdc4:	4013      	ands	r3, r2
 800bdc6:	b2da      	uxtb	r2, r3
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	0a1b      	lsrs	r3, r3, #8
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	227f      	movs	r2, #127	; 0x7f
 800bdd4:	4013      	ands	r3, r2
 800bdd6:	b2da      	uxtb	r2, r3
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	227f      	movs	r2, #127	; 0x7f
 800bde2:	4013      	ands	r3, r2
 800bde4:	b2da      	uxtb	r2, r3
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	0c1b      	lsrs	r3, r3, #16
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	2240      	movs	r2, #64	; 0x40
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	b2da      	uxtb	r2, r3
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d11a      	bne.n	800be36 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	0018      	movs	r0, r3
 800be06:	f000 fb7f 	bl	800c508 <RTC_Bcd2ToByte>
 800be0a:	0003      	movs	r3, r0
 800be0c:	001a      	movs	r2, r3
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	785b      	ldrb	r3, [r3, #1]
 800be16:	0018      	movs	r0, r3
 800be18:	f000 fb76 	bl	800c508 <RTC_Bcd2ToByte>
 800be1c:	0003      	movs	r3, r0
 800be1e:	001a      	movs	r2, r3
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	789b      	ldrb	r3, [r3, #2]
 800be28:	0018      	movs	r0, r3
 800be2a:	f000 fb6d 	bl	800c508 <RTC_Bcd2ToByte>
 800be2e:	0003      	movs	r3, r0
 800be30:	001a      	movs	r2, r3
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	0018      	movs	r0, r3
 800be3a:	46bd      	mov	sp, r7
 800be3c:	b006      	add	sp, #24
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	007f7f7f 	.word	0x007f7f7f

0800be44 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800be44:	b590      	push	{r4, r7, lr}
 800be46:	b087      	sub	sp, #28
 800be48:	af00      	add	r7, sp, #0
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	60b9      	str	r1, [r7, #8]
 800be4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2220      	movs	r2, #32
 800be54:	5c9b      	ldrb	r3, [r3, r2]
 800be56:	2b01      	cmp	r3, #1
 800be58:	d101      	bne.n	800be5e <HAL_RTC_SetDate+0x1a>
 800be5a:	2302      	movs	r3, #2
 800be5c:	e099      	b.n	800bf92 <HAL_RTC_SetDate+0x14e>
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2220      	movs	r2, #32
 800be62:	2101      	movs	r1, #1
 800be64:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2221      	movs	r2, #33	; 0x21
 800be6a:	2102      	movs	r1, #2
 800be6c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10e      	bne.n	800be92 <HAL_RTC_SetDate+0x4e>
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	785b      	ldrb	r3, [r3, #1]
 800be78:	001a      	movs	r2, r3
 800be7a:	2310      	movs	r3, #16
 800be7c:	4013      	ands	r3, r2
 800be7e:	d008      	beq.n	800be92 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	785b      	ldrb	r3, [r3, #1]
 800be84:	2210      	movs	r2, #16
 800be86:	4393      	bics	r3, r2
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	330a      	adds	r3, #10
 800be8c:	b2da      	uxtb	r2, r3
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d11c      	bne.n	800bed2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	78db      	ldrb	r3, [r3, #3]
 800be9c:	0018      	movs	r0, r3
 800be9e:	f000 fb0a 	bl	800c4b6 <RTC_ByteToBcd2>
 800bea2:	0003      	movs	r3, r0
 800bea4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	785b      	ldrb	r3, [r3, #1]
 800beaa:	0018      	movs	r0, r3
 800beac:	f000 fb03 	bl	800c4b6 <RTC_ByteToBcd2>
 800beb0:	0003      	movs	r3, r0
 800beb2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800beb4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	789b      	ldrb	r3, [r3, #2]
 800beba:	0018      	movs	r0, r3
 800bebc:	f000 fafb 	bl	800c4b6 <RTC_ByteToBcd2>
 800bec0:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800bec2:	0022      	movs	r2, r4
 800bec4:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800becc:	4313      	orrs	r3, r2
 800bece:	617b      	str	r3, [r7, #20]
 800bed0:	e00e      	b.n	800bef0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	78db      	ldrb	r3, [r3, #3]
 800bed6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	785b      	ldrb	r3, [r3, #1]
 800bedc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800bede:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800bee0:	68ba      	ldr	r2, [r7, #8]
 800bee2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800bee4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800beec:	4313      	orrs	r3, r2
 800beee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	22ca      	movs	r2, #202	; 0xca
 800bef6:	625a      	str	r2, [r3, #36]	; 0x24
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2253      	movs	r2, #83	; 0x53
 800befe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	0018      	movs	r0, r3
 800bf04:	f000 faad 	bl	800c462 <RTC_EnterInitMode>
 800bf08:	1e03      	subs	r3, r0, #0
 800bf0a:	d00d      	beq.n	800bf28 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	22ff      	movs	r2, #255	; 0xff
 800bf12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2221      	movs	r2, #33	; 0x21
 800bf18:	2104      	movs	r1, #4
 800bf1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2220      	movs	r2, #32
 800bf20:	2100      	movs	r1, #0
 800bf22:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800bf24:	2301      	movs	r3, #1
 800bf26:	e034      	b.n	800bf92 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	697a      	ldr	r2, [r7, #20]
 800bf2e:	491b      	ldr	r1, [pc, #108]	; (800bf9c <HAL_RTC_SetDate+0x158>)
 800bf30:	400a      	ands	r2, r1
 800bf32:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	68da      	ldr	r2, [r3, #12]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2180      	movs	r1, #128	; 0x80
 800bf40:	438a      	bics	r2, r1
 800bf42:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	2220      	movs	r2, #32
 800bf4c:	4013      	ands	r3, r2
 800bf4e:	d113      	bne.n	800bf78 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	0018      	movs	r0, r3
 800bf54:	f000 fa5e 	bl	800c414 <HAL_RTC_WaitForSynchro>
 800bf58:	1e03      	subs	r3, r0, #0
 800bf5a:	d00d      	beq.n	800bf78 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	22ff      	movs	r2, #255	; 0xff
 800bf62:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2221      	movs	r2, #33	; 0x21
 800bf68:	2104      	movs	r1, #4
 800bf6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2220      	movs	r2, #32
 800bf70:	2100      	movs	r1, #0
 800bf72:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800bf74:	2301      	movs	r3, #1
 800bf76:	e00c      	b.n	800bf92 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	22ff      	movs	r2, #255	; 0xff
 800bf7e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2221      	movs	r2, #33	; 0x21
 800bf84:	2101      	movs	r1, #1
 800bf86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2220      	movs	r2, #32
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800bf90:	2300      	movs	r3, #0
  }
}
 800bf92:	0018      	movs	r0, r3
 800bf94:	46bd      	mov	sp, r7
 800bf96:	b007      	add	sp, #28
 800bf98:	bd90      	pop	{r4, r7, pc}
 800bf9a:	46c0      	nop			; (mov r8, r8)
 800bf9c:	00ffff3f 	.word	0x00ffff3f

0800bfa0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	4a21      	ldr	r2, [pc, #132]	; (800c038 <HAL_RTC_GetDate+0x98>)
 800bfb4:	4013      	ands	r3, r2
 800bfb6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	0c1b      	lsrs	r3, r3, #16
 800bfbc:	b2da      	uxtb	r2, r3
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	0a1b      	lsrs	r3, r3, #8
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	221f      	movs	r2, #31
 800bfca:	4013      	ands	r3, r2
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	b2db      	uxtb	r3, r3
 800bfd6:	223f      	movs	r2, #63	; 0x3f
 800bfd8:	4013      	ands	r3, r2
 800bfda:	b2da      	uxtb	r2, r3
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	0b5b      	lsrs	r3, r3, #13
 800bfe4:	b2db      	uxtb	r3, r3
 800bfe6:	2207      	movs	r2, #7
 800bfe8:	4013      	ands	r3, r2
 800bfea:	b2da      	uxtb	r2, r3
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d11a      	bne.n	800c02c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	78db      	ldrb	r3, [r3, #3]
 800bffa:	0018      	movs	r0, r3
 800bffc:	f000 fa84 	bl	800c508 <RTC_Bcd2ToByte>
 800c000:	0003      	movs	r3, r0
 800c002:	001a      	movs	r2, r3
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	785b      	ldrb	r3, [r3, #1]
 800c00c:	0018      	movs	r0, r3
 800c00e:	f000 fa7b 	bl	800c508 <RTC_Bcd2ToByte>
 800c012:	0003      	movs	r3, r0
 800c014:	001a      	movs	r2, r3
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	789b      	ldrb	r3, [r3, #2]
 800c01e:	0018      	movs	r0, r3
 800c020:	f000 fa72 	bl	800c508 <RTC_Bcd2ToByte>
 800c024:	0003      	movs	r3, r0
 800c026:	001a      	movs	r2, r3
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	0018      	movs	r0, r3
 800c030:	46bd      	mov	sp, r7
 800c032:	b006      	add	sp, #24
 800c034:	bd80      	pop	{r7, pc}
 800c036:	46c0      	nop			; (mov r8, r8)
 800c038:	00ffff3f 	.word	0x00ffff3f

0800c03c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c03c:	b590      	push	{r4, r7, lr}
 800c03e:	b089      	sub	sp, #36	; 0x24
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2220      	movs	r2, #32
 800c04c:	5c9b      	ldrb	r3, [r3, r2]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d101      	bne.n	800c056 <HAL_RTC_SetAlarm_IT+0x1a>
 800c052:	2302      	movs	r3, #2
 800c054:	e130      	b.n	800c2b8 <HAL_RTC_SetAlarm_IT+0x27c>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2220      	movs	r2, #32
 800c05a:	2101      	movs	r1, #1
 800c05c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2221      	movs	r2, #33	; 0x21
 800c062:	2102      	movs	r1, #2
 800c064:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d136      	bne.n	800c0da <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	2240      	movs	r2, #64	; 0x40
 800c074:	4013      	ands	r3, r2
 800c076:	d102      	bne.n	800c07e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	2200      	movs	r2, #0
 800c07c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	0018      	movs	r0, r3
 800c084:	f000 fa17 	bl	800c4b6 <RTC_ByteToBcd2>
 800c088:	0003      	movs	r3, r0
 800c08a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	785b      	ldrb	r3, [r3, #1]
 800c090:	0018      	movs	r0, r3
 800c092:	f000 fa10 	bl	800c4b6 <RTC_ByteToBcd2>
 800c096:	0003      	movs	r3, r0
 800c098:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c09a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	789b      	ldrb	r3, [r3, #2]
 800c0a0:	0018      	movs	r0, r3
 800c0a2:	f000 fa08 	bl	800c4b6 <RTC_ByteToBcd2>
 800c0a6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c0a8:	0022      	movs	r2, r4
 800c0aa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	78db      	ldrb	r3, [r3, #3]
 800c0b0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800c0b2:	431a      	orrs	r2, r3
 800c0b4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	2220      	movs	r2, #32
 800c0ba:	5c9b      	ldrb	r3, [r3, r2]
 800c0bc:	0018      	movs	r0, r3
 800c0be:	f000 f9fa 	bl	800c4b6 <RTC_ByteToBcd2>
 800c0c2:	0003      	movs	r3, r0
 800c0c4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c0c6:	0022      	movs	r2, r4
 800c0c8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c0ce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	61fb      	str	r3, [r7, #28]
 800c0d8:	e022      	b.n	800c120 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	2240      	movs	r2, #64	; 0x40
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	d102      	bne.n	800c0ec <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	785b      	ldrb	r3, [r3, #1]
 800c0f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c0f8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c0fa:	68ba      	ldr	r2, [r7, #8]
 800c0fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800c0fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	78db      	ldrb	r3, [r3, #3]
 800c104:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800c106:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	2120      	movs	r1, #32
 800c10c:	5c5b      	ldrb	r3, [r3, r1]
 800c10e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800c110:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800c116:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800c11c:	4313      	orrs	r3, r2
 800c11e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	685a      	ldr	r2, [r3, #4]
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	699b      	ldr	r3, [r3, #24]
 800c128:	4313      	orrs	r3, r2
 800c12a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	22ca      	movs	r2, #202	; 0xca
 800c132:	625a      	str	r2, [r3, #36]	; 0x24
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2253      	movs	r2, #83	; 0x53
 800c13a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c140:	2380      	movs	r3, #128	; 0x80
 800c142:	005b      	lsls	r3, r3, #1
 800c144:	429a      	cmp	r2, r3
 800c146:	d14e      	bne.n	800c1e6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	689a      	ldr	r2, [r3, #8]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	495b      	ldr	r1, [pc, #364]	; (800c2c0 <HAL_RTC_SetAlarm_IT+0x284>)
 800c154:	400a      	ands	r2, r1
 800c156:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	22ff      	movs	r2, #255	; 0xff
 800c160:	401a      	ands	r2, r3
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4957      	ldr	r1, [pc, #348]	; (800c2c4 <HAL_RTC_SetAlarm_IT+0x288>)
 800c168:	430a      	orrs	r2, r1
 800c16a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c16c:	f7fc fd56 	bl	8008c1c <HAL_GetTick>
 800c170:	0003      	movs	r3, r0
 800c172:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c174:	e016      	b.n	800c1a4 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c176:	f7fc fd51 	bl	8008c1c <HAL_GetTick>
 800c17a:	0002      	movs	r2, r0
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	1ad2      	subs	r2, r2, r3
 800c180:	23fa      	movs	r3, #250	; 0xfa
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	429a      	cmp	r2, r3
 800c186:	d90d      	bls.n	800c1a4 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	22ff      	movs	r2, #255	; 0xff
 800c18e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2221      	movs	r2, #33	; 0x21
 800c194:	2103      	movs	r1, #3
 800c196:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2220      	movs	r2, #32
 800c19c:	2100      	movs	r1, #0
 800c19e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c1a0:	2303      	movs	r3, #3
 800c1a2:	e089      	b.n	800c2b8 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	2201      	movs	r2, #1
 800c1ac:	4013      	ands	r3, r2
 800c1ae:	d0e2      	beq.n	800c176 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	69fa      	ldr	r2, [r7, #28]
 800c1b6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	69ba      	ldr	r2, [r7, #24]
 800c1be:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	689a      	ldr	r2, [r3, #8]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2180      	movs	r1, #128	; 0x80
 800c1cc:	0049      	lsls	r1, r1, #1
 800c1ce:	430a      	orrs	r2, r1
 800c1d0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	689a      	ldr	r2, [r3, #8]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2180      	movs	r1, #128	; 0x80
 800c1de:	0149      	lsls	r1, r1, #5
 800c1e0:	430a      	orrs	r2, r1
 800c1e2:	609a      	str	r2, [r3, #8]
 800c1e4:	e04d      	b.n	800c282 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	689a      	ldr	r2, [r3, #8]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4935      	ldr	r1, [pc, #212]	; (800c2c8 <HAL_RTC_SetAlarm_IT+0x28c>)
 800c1f2:	400a      	ands	r2, r1
 800c1f4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	22ff      	movs	r2, #255	; 0xff
 800c1fe:	401a      	ands	r2, r3
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4931      	ldr	r1, [pc, #196]	; (800c2cc <HAL_RTC_SetAlarm_IT+0x290>)
 800c206:	430a      	orrs	r2, r1
 800c208:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c20a:	f7fc fd07 	bl	8008c1c <HAL_GetTick>
 800c20e:	0003      	movs	r3, r0
 800c210:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c212:	e016      	b.n	800c242 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c214:	f7fc fd02 	bl	8008c1c <HAL_GetTick>
 800c218:	0002      	movs	r2, r0
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	1ad2      	subs	r2, r2, r3
 800c21e:	23fa      	movs	r3, #250	; 0xfa
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	429a      	cmp	r2, r3
 800c224:	d90d      	bls.n	800c242 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	22ff      	movs	r2, #255	; 0xff
 800c22c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2221      	movs	r2, #33	; 0x21
 800c232:	2103      	movs	r1, #3
 800c234:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2220      	movs	r2, #32
 800c23a:	2100      	movs	r1, #0
 800c23c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c23e:	2303      	movs	r3, #3
 800c240:	e03a      	b.n	800c2b8 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	68db      	ldr	r3, [r3, #12]
 800c248:	2202      	movs	r2, #2
 800c24a:	4013      	ands	r3, r2
 800c24c:	d0e2      	beq.n	800c214 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	69fa      	ldr	r2, [r7, #28]
 800c254:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	69ba      	ldr	r2, [r7, #24]
 800c25c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	689a      	ldr	r2, [r3, #8]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2180      	movs	r1, #128	; 0x80
 800c26a:	0089      	lsls	r1, r1, #2
 800c26c:	430a      	orrs	r2, r1
 800c26e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	689a      	ldr	r2, [r3, #8]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2180      	movs	r1, #128	; 0x80
 800c27c:	0189      	lsls	r1, r1, #6
 800c27e:	430a      	orrs	r2, r1
 800c280:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800c282:	4b13      	ldr	r3, [pc, #76]	; (800c2d0 <HAL_RTC_SetAlarm_IT+0x294>)
 800c284:	681a      	ldr	r2, [r3, #0]
 800c286:	4b12      	ldr	r3, [pc, #72]	; (800c2d0 <HAL_RTC_SetAlarm_IT+0x294>)
 800c288:	2180      	movs	r1, #128	; 0x80
 800c28a:	0289      	lsls	r1, r1, #10
 800c28c:	430a      	orrs	r2, r1
 800c28e:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800c290:	4b0f      	ldr	r3, [pc, #60]	; (800c2d0 <HAL_RTC_SetAlarm_IT+0x294>)
 800c292:	689a      	ldr	r2, [r3, #8]
 800c294:	4b0e      	ldr	r3, [pc, #56]	; (800c2d0 <HAL_RTC_SetAlarm_IT+0x294>)
 800c296:	2180      	movs	r1, #128	; 0x80
 800c298:	0289      	lsls	r1, r1, #10
 800c29a:	430a      	orrs	r2, r1
 800c29c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	22ff      	movs	r2, #255	; 0xff
 800c2a4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2221      	movs	r2, #33	; 0x21
 800c2aa:	2101      	movs	r1, #1
 800c2ac:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2220      	movs	r2, #32
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c2b6:	2300      	movs	r3, #0
}
 800c2b8:	0018      	movs	r0, r3
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	b009      	add	sp, #36	; 0x24
 800c2be:	bd90      	pop	{r4, r7, pc}
 800c2c0:	fffffeff 	.word	0xfffffeff
 800c2c4:	fffffe7f 	.word	0xfffffe7f
 800c2c8:	fffffdff 	.word	0xfffffdff
 800c2cc:	fffffd7f 	.word	0xfffffd7f
 800c2d0:	40010400 	.word	0x40010400

0800c2d4 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2220      	movs	r2, #32
 800c2e2:	5c9b      	ldrb	r3, [r3, r2]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d101      	bne.n	800c2ec <HAL_RTC_DeactivateAlarm+0x18>
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	e086      	b.n	800c3fa <HAL_RTC_DeactivateAlarm+0x126>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2220      	movs	r2, #32
 800c2f0:	2101      	movs	r1, #1
 800c2f2:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2221      	movs	r2, #33	; 0x21
 800c2f8:	2102      	movs	r1, #2
 800c2fa:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	22ca      	movs	r2, #202	; 0xca
 800c302:	625a      	str	r2, [r3, #36]	; 0x24
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2253      	movs	r2, #83	; 0x53
 800c30a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800c30c:	683a      	ldr	r2, [r7, #0]
 800c30e:	2380      	movs	r3, #128	; 0x80
 800c310:	005b      	lsls	r3, r3, #1
 800c312:	429a      	cmp	r2, r3
 800c314:	d132      	bne.n	800c37c <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	689a      	ldr	r2, [r3, #8]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4938      	ldr	r1, [pc, #224]	; (800c404 <HAL_RTC_DeactivateAlarm+0x130>)
 800c322:	400a      	ands	r2, r1
 800c324:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	689a      	ldr	r2, [r3, #8]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4935      	ldr	r1, [pc, #212]	; (800c408 <HAL_RTC_DeactivateAlarm+0x134>)
 800c332:	400a      	ands	r2, r1
 800c334:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800c336:	f7fc fc71 	bl	8008c1c <HAL_GetTick>
 800c33a:	0003      	movs	r3, r0
 800c33c:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c33e:	e016      	b.n	800c36e <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c340:	f7fc fc6c 	bl	8008c1c <HAL_GetTick>
 800c344:	0002      	movs	r2, r0
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	1ad2      	subs	r2, r2, r3
 800c34a:	23fa      	movs	r3, #250	; 0xfa
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	429a      	cmp	r2, r3
 800c350:	d90d      	bls.n	800c36e <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	22ff      	movs	r2, #255	; 0xff
 800c358:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2221      	movs	r2, #33	; 0x21
 800c35e:	2103      	movs	r1, #3
 800c360:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2220      	movs	r2, #32
 800c366:	2100      	movs	r1, #0
 800c368:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c36a:	2303      	movs	r3, #3
 800c36c:	e045      	b.n	800c3fa <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	2201      	movs	r2, #1
 800c376:	4013      	ands	r3, r2
 800c378:	d0e2      	beq.n	800c340 <HAL_RTC_DeactivateAlarm+0x6c>
 800c37a:	e031      	b.n	800c3e0 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	689a      	ldr	r2, [r3, #8]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4921      	ldr	r1, [pc, #132]	; (800c40c <HAL_RTC_DeactivateAlarm+0x138>)
 800c388:	400a      	ands	r2, r1
 800c38a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	689a      	ldr	r2, [r3, #8]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	491e      	ldr	r1, [pc, #120]	; (800c410 <HAL_RTC_DeactivateAlarm+0x13c>)
 800c398:	400a      	ands	r2, r1
 800c39a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800c39c:	f7fc fc3e 	bl	8008c1c <HAL_GetTick>
 800c3a0:	0003      	movs	r3, r0
 800c3a2:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c3a4:	e016      	b.n	800c3d4 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c3a6:	f7fc fc39 	bl	8008c1c <HAL_GetTick>
 800c3aa:	0002      	movs	r2, r0
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	1ad2      	subs	r2, r2, r3
 800c3b0:	23fa      	movs	r3, #250	; 0xfa
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d90d      	bls.n	800c3d4 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	22ff      	movs	r2, #255	; 0xff
 800c3be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2221      	movs	r2, #33	; 0x21
 800c3c4:	2103      	movs	r1, #3
 800c3c6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2220      	movs	r2, #32
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c3d0:	2303      	movs	r3, #3
 800c3d2:	e012      	b.n	800c3fa <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	2202      	movs	r2, #2
 800c3dc:	4013      	ands	r3, r2
 800c3de:	d0e2      	beq.n	800c3a6 <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	22ff      	movs	r2, #255	; 0xff
 800c3e6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2221      	movs	r2, #33	; 0x21
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2220      	movs	r2, #32
 800c3f4:	2100      	movs	r1, #0
 800c3f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	0018      	movs	r0, r3
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	b004      	add	sp, #16
 800c400:	bd80      	pop	{r7, pc}
 800c402:	46c0      	nop			; (mov r8, r8)
 800c404:	fffffeff 	.word	0xfffffeff
 800c408:	ffffefff 	.word	0xffffefff
 800c40c:	fffffdff 	.word	0xfffffdff
 800c410:	ffffdfff 	.word	0xffffdfff

0800c414 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	68da      	ldr	r2, [r3, #12]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	21a0      	movs	r1, #160	; 0xa0
 800c428:	438a      	bics	r2, r1
 800c42a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800c42c:	f7fc fbf6 	bl	8008c1c <HAL_GetTick>
 800c430:	0003      	movs	r3, r0
 800c432:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c434:	e00a      	b.n	800c44c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c436:	f7fc fbf1 	bl	8008c1c <HAL_GetTick>
 800c43a:	0002      	movs	r2, r0
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	1ad2      	subs	r2, r2, r3
 800c440:	23fa      	movs	r3, #250	; 0xfa
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	429a      	cmp	r2, r3
 800c446:	d901      	bls.n	800c44c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c448:	2303      	movs	r3, #3
 800c44a:	e006      	b.n	800c45a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	68db      	ldr	r3, [r3, #12]
 800c452:	2220      	movs	r2, #32
 800c454:	4013      	ands	r3, r2
 800c456:	d0ee      	beq.n	800c436 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800c458:	2300      	movs	r3, #0
}
 800c45a:	0018      	movs	r0, r3
 800c45c:	46bd      	mov	sp, r7
 800c45e:	b004      	add	sp, #16
 800c460:	bd80      	pop	{r7, pc}

0800c462 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b084      	sub	sp, #16
 800c466:	af00      	add	r7, sp, #0
 800c468:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	2240      	movs	r2, #64	; 0x40
 800c472:	4013      	ands	r3, r2
 800c474:	d11a      	bne.n	800c4ac <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2201      	movs	r2, #1
 800c47c:	4252      	negs	r2, r2
 800c47e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c480:	f7fc fbcc 	bl	8008c1c <HAL_GetTick>
 800c484:	0003      	movs	r3, r0
 800c486:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c488:	e00a      	b.n	800c4a0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c48a:	f7fc fbc7 	bl	8008c1c <HAL_GetTick>
 800c48e:	0002      	movs	r2, r0
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	1ad2      	subs	r2, r2, r3
 800c494:	23fa      	movs	r3, #250	; 0xfa
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	429a      	cmp	r2, r3
 800c49a:	d901      	bls.n	800c4a0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800c49c:	2303      	movs	r3, #3
 800c49e:	e006      	b.n	800c4ae <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	2240      	movs	r2, #64	; 0x40
 800c4a8:	4013      	ands	r3, r2
 800c4aa:	d0ee      	beq.n	800c48a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	0018      	movs	r0, r3
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	b004      	add	sp, #16
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b084      	sub	sp, #16
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	0002      	movs	r2, r0
 800c4be:	1dfb      	adds	r3, r7, #7
 800c4c0:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800c4c6:	230b      	movs	r3, #11
 800c4c8:	18fb      	adds	r3, r7, r3
 800c4ca:	1dfa      	adds	r2, r7, #7
 800c4cc:	7812      	ldrb	r2, [r2, #0]
 800c4ce:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 800c4d0:	e008      	b.n	800c4e4 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800c4d8:	220b      	movs	r2, #11
 800c4da:	18bb      	adds	r3, r7, r2
 800c4dc:	18ba      	adds	r2, r7, r2
 800c4de:	7812      	ldrb	r2, [r2, #0]
 800c4e0:	3a0a      	subs	r2, #10
 800c4e2:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800c4e4:	230b      	movs	r3, #11
 800c4e6:	18fb      	adds	r3, r7, r3
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	2b09      	cmp	r3, #9
 800c4ec:	d8f1      	bhi.n	800c4d2 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	011b      	lsls	r3, r3, #4
 800c4f4:	b2da      	uxtb	r2, r3
 800c4f6:	230b      	movs	r3, #11
 800c4f8:	18fb      	adds	r3, r7, r3
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	b2db      	uxtb	r3, r3
}
 800c500:	0018      	movs	r0, r3
 800c502:	46bd      	mov	sp, r7
 800c504:	b004      	add	sp, #16
 800c506:	bd80      	pop	{r7, pc}

0800c508 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	0002      	movs	r2, r0
 800c510:	1dfb      	adds	r3, r7, #7
 800c512:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800c514:	1dfb      	adds	r3, r7, #7
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	091b      	lsrs	r3, r3, #4
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	001a      	movs	r2, r3
 800c51e:	0013      	movs	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	189b      	adds	r3, r3, r2
 800c524:	005b      	lsls	r3, r3, #1
 800c526:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	b2da      	uxtb	r2, r3
 800c52c:	1dfb      	adds	r3, r7, #7
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	210f      	movs	r1, #15
 800c532:	400b      	ands	r3, r1
 800c534:	b2db      	uxtb	r3, r3
 800c536:	18d3      	adds	r3, r2, r3
 800c538:	b2db      	uxtb	r3, r3
}
 800c53a:	0018      	movs	r0, r3
 800c53c:	46bd      	mov	sp, r7
 800c53e:	b004      	add	sp, #16
 800c540:	bd80      	pop	{r7, pc}

0800c542 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800c542:	b580      	push	{r7, lr}
 800c544:	b086      	sub	sp, #24
 800c546:	af00      	add	r7, sp, #0
 800c548:	60f8      	str	r0, [r7, #12]
 800c54a:	60b9      	str	r1, [r7, #8]
 800c54c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	3350      	adds	r3, #80	; 0x50
 800c554:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	697a      	ldr	r2, [r7, #20]
 800c55c:	18d3      	adds	r3, r2, r3
 800c55e:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	601a      	str	r2, [r3, #0]
}
 800c566:	46c0      	nop			; (mov r8, r8)
 800c568:	46bd      	mov	sp, r7
 800c56a:	b006      	add	sp, #24
 800c56c:	bd80      	pop	{r7, pc}

0800c56e <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800c56e:	b580      	push	{r7, lr}
 800c570:	b084      	sub	sp, #16
 800c572:	af00      	add	r7, sp, #0
 800c574:	6078      	str	r0, [r7, #4]
 800c576:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	3350      	adds	r3, #80	; 0x50
 800c57e:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	18d3      	adds	r3, r2, r3
 800c588:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
}
 800c58e:	0018      	movs	r0, r3
 800c590:	46bd      	mov	sp, r7
 800c592:	b004      	add	sp, #16
 800c594:	bd80      	pop	{r7, pc}

0800c596 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b082      	sub	sp, #8
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2220      	movs	r2, #32
 800c5a2:	5c9b      	ldrb	r3, [r3, r2]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d101      	bne.n	800c5ac <HAL_RTCEx_EnableBypassShadow+0x16>
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	e024      	b.n	800c5f6 <HAL_RTCEx_EnableBypassShadow+0x60>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2220      	movs	r2, #32
 800c5b0:	2101      	movs	r1, #1
 800c5b2:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2221      	movs	r2, #33	; 0x21
 800c5b8:	2102      	movs	r1, #2
 800c5ba:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	22ca      	movs	r2, #202	; 0xca
 800c5c2:	625a      	str	r2, [r3, #36]	; 0x24
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2253      	movs	r2, #83	; 0x53
 800c5ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	689a      	ldr	r2, [r3, #8]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2120      	movs	r1, #32
 800c5d8:	430a      	orrs	r2, r1
 800c5da:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	22ff      	movs	r2, #255	; 0xff
 800c5e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2221      	movs	r2, #33	; 0x21
 800c5e8:	2101      	movs	r1, #1
 800c5ea:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2220      	movs	r2, #32
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	0018      	movs	r0, r3
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	b002      	add	sp, #8
 800c5fc:	bd80      	pop	{r7, pc}
	...

0800c600 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d101      	bne.n	800c612 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c60e:	2301      	movs	r3, #1
 800c610:	e059      	b.n	800c6c6 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2251      	movs	r2, #81	; 0x51
 800c61c:	5c9b      	ldrb	r3, [r3, r2]
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	2b00      	cmp	r3, #0
 800c622:	d107      	bne.n	800c634 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2250      	movs	r2, #80	; 0x50
 800c628:	2100      	movs	r1, #0
 800c62a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	0018      	movs	r0, r3
 800c630:	f000 f850 	bl	800c6d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2251      	movs	r2, #81	; 0x51
 800c638:	2102      	movs	r1, #2
 800c63a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2140      	movs	r1, #64	; 0x40
 800c648:	438a      	bics	r2, r1
 800c64a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	685a      	ldr	r2, [r3, #4]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	431a      	orrs	r2, r3
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	431a      	orrs	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	691b      	ldr	r3, [r3, #16]
 800c660:	431a      	orrs	r2, r3
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	695b      	ldr	r3, [r3, #20]
 800c666:	431a      	orrs	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6999      	ldr	r1, [r3, #24]
 800c66c:	2380      	movs	r3, #128	; 0x80
 800c66e:	009b      	lsls	r3, r3, #2
 800c670:	400b      	ands	r3, r1
 800c672:	431a      	orrs	r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	69db      	ldr	r3, [r3, #28]
 800c678:	431a      	orrs	r2, r3
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6a1b      	ldr	r3, [r3, #32]
 800c67e:	431a      	orrs	r2, r3
 800c680:	0011      	movs	r1, r2
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	430a      	orrs	r2, r1
 800c68c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	699b      	ldr	r3, [r3, #24]
 800c692:	0c1b      	lsrs	r3, r3, #16
 800c694:	2204      	movs	r2, #4
 800c696:	4013      	ands	r3, r2
 800c698:	0019      	movs	r1, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	430a      	orrs	r2, r1
 800c6a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	69da      	ldr	r2, [r3, #28]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4907      	ldr	r1, [pc, #28]	; (800c6d0 <HAL_SPI_Init+0xd0>)
 800c6b2:	400a      	ands	r2, r1
 800c6b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2251      	movs	r2, #81	; 0x51
 800c6c0:	2101      	movs	r1, #1
 800c6c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	0018      	movs	r0, r3
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	b002      	add	sp, #8
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	46c0      	nop			; (mov r8, r8)
 800c6d0:	fffff7ff 	.word	0xfffff7ff

0800c6d4 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800c6dc:	46c0      	nop			; (mov r8, r8)
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	b002      	add	sp, #8
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b08c      	sub	sp, #48	; 0x30
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
 800c6f0:	001a      	movs	r2, r3
 800c6f2:	1cbb      	adds	r3, r7, #2
 800c6f4:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c6fa:	232b      	movs	r3, #43	; 0x2b
 800c6fc:	18fb      	adds	r3, r7, r3
 800c6fe:	2200      	movs	r2, #0
 800c700:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2250      	movs	r2, #80	; 0x50
 800c706:	5c9b      	ldrb	r3, [r3, r2]
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d101      	bne.n	800c710 <HAL_SPI_TransmitReceive+0x2c>
 800c70c:	2302      	movs	r3, #2
 800c70e:	e1a1      	b.n	800ca54 <HAL_SPI_TransmitReceive+0x370>
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2250      	movs	r2, #80	; 0x50
 800c714:	2101      	movs	r1, #1
 800c716:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c718:	f7fc fa80 	bl	8008c1c <HAL_GetTick>
 800c71c:	0003      	movs	r3, r0
 800c71e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c720:	2023      	movs	r0, #35	; 0x23
 800c722:	183b      	adds	r3, r7, r0
 800c724:	68fa      	ldr	r2, [r7, #12]
 800c726:	2151      	movs	r1, #81	; 0x51
 800c728:	5c52      	ldrb	r2, [r2, r1]
 800c72a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c732:	231a      	movs	r3, #26
 800c734:	18fb      	adds	r3, r7, r3
 800c736:	1cba      	adds	r2, r7, #2
 800c738:	8812      	ldrh	r2, [r2, #0]
 800c73a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c73c:	183b      	adds	r3, r7, r0
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	2b01      	cmp	r3, #1
 800c742:	d012      	beq.n	800c76a <HAL_SPI_TransmitReceive+0x86>
 800c744:	69fa      	ldr	r2, [r7, #28]
 800c746:	2382      	movs	r3, #130	; 0x82
 800c748:	005b      	lsls	r3, r3, #1
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d108      	bne.n	800c760 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	689b      	ldr	r3, [r3, #8]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d104      	bne.n	800c760 <HAL_SPI_TransmitReceive+0x7c>
 800c756:	2323      	movs	r3, #35	; 0x23
 800c758:	18fb      	adds	r3, r7, r3
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	2b04      	cmp	r3, #4
 800c75e:	d004      	beq.n	800c76a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800c760:	232b      	movs	r3, #43	; 0x2b
 800c762:	18fb      	adds	r3, r7, r3
 800c764:	2202      	movs	r2, #2
 800c766:	701a      	strb	r2, [r3, #0]
    goto error;
 800c768:	e169      	b.n	800ca3e <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d006      	beq.n	800c77e <HAL_SPI_TransmitReceive+0x9a>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d003      	beq.n	800c77e <HAL_SPI_TransmitReceive+0x9a>
 800c776:	1cbb      	adds	r3, r7, #2
 800c778:	881b      	ldrh	r3, [r3, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d104      	bne.n	800c788 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800c77e:	232b      	movs	r3, #43	; 0x2b
 800c780:	18fb      	adds	r3, r7, r3
 800c782:	2201      	movs	r2, #1
 800c784:	701a      	strb	r2, [r3, #0]
    goto error;
 800c786:	e15a      	b.n	800ca3e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2251      	movs	r2, #81	; 0x51
 800c78c:	5c9b      	ldrb	r3, [r3, r2]
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	2b04      	cmp	r3, #4
 800c792:	d003      	beq.n	800c79c <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2251      	movs	r2, #81	; 0x51
 800c798:	2105      	movs	r1, #5
 800c79a:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	1cba      	adds	r2, r7, #2
 800c7ac:	8812      	ldrh	r2, [r2, #0]
 800c7ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	1cba      	adds	r2, r7, #2
 800c7b4:	8812      	ldrh	r2, [r2, #0]
 800c7b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	1cba      	adds	r2, r7, #2
 800c7c2:	8812      	ldrh	r2, [r2, #0]
 800c7c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	1cba      	adds	r2, r7, #2
 800c7ca:	8812      	ldrh	r2, [r2, #0]
 800c7cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2240      	movs	r2, #64	; 0x40
 800c7e2:	4013      	ands	r3, r2
 800c7e4:	2b40      	cmp	r3, #64	; 0x40
 800c7e6:	d007      	beq.n	800c7f8 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	681a      	ldr	r2, [r3, #0]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2140      	movs	r1, #64	; 0x40
 800c7f4:	430a      	orrs	r2, r1
 800c7f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	68da      	ldr	r2, [r3, #12]
 800c7fc:	2380      	movs	r3, #128	; 0x80
 800c7fe:	011b      	lsls	r3, r3, #4
 800c800:	429a      	cmp	r2, r3
 800c802:	d000      	beq.n	800c806 <HAL_SPI_TransmitReceive+0x122>
 800c804:	e07a      	b.n	800c8fc <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d004      	beq.n	800c818 <HAL_SPI_TransmitReceive+0x134>
 800c80e:	231a      	movs	r3, #26
 800c810:	18fb      	adds	r3, r7, r3
 800c812:	881b      	ldrh	r3, [r3, #0]
 800c814:	2b01      	cmp	r3, #1
 800c816:	d166      	bne.n	800c8e6 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c81c:	881a      	ldrh	r2, [r3, #0]
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c828:	1c9a      	adds	r2, r3, #2
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c832:	b29b      	uxth	r3, r3
 800c834:	3b01      	subs	r3, #1
 800c836:	b29a      	uxth	r2, r3
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c83c:	e053      	b.n	800c8e6 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	2202      	movs	r2, #2
 800c846:	4013      	ands	r3, r2
 800c848:	2b02      	cmp	r3, #2
 800c84a:	d11b      	bne.n	800c884 <HAL_SPI_TransmitReceive+0x1a0>
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c850:	b29b      	uxth	r3, r3
 800c852:	2b00      	cmp	r3, #0
 800c854:	d016      	beq.n	800c884 <HAL_SPI_TransmitReceive+0x1a0>
 800c856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d113      	bne.n	800c884 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c860:	881a      	ldrh	r2, [r3, #0]
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c86c:	1c9a      	adds	r2, r3, #2
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c876:	b29b      	uxth	r3, r3
 800c878:	3b01      	subs	r3, #1
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c880:	2300      	movs	r3, #0
 800c882:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	2201      	movs	r2, #1
 800c88c:	4013      	ands	r3, r2
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d119      	bne.n	800c8c6 <HAL_SPI_TransmitReceive+0x1e2>
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c896:	b29b      	uxth	r3, r3
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d014      	beq.n	800c8c6 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	68da      	ldr	r2, [r3, #12]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a6:	b292      	uxth	r2, r2
 800c8a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ae:	1c9a      	adds	r2, r3, #2
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	b29a      	uxth	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c8c6:	f7fc f9a9 	bl	8008c1c <HAL_GetTick>
 800c8ca:	0002      	movs	r2, r0
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d807      	bhi.n	800c8e6 <HAL_SPI_TransmitReceive+0x202>
 800c8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d8:	3301      	adds	r3, #1
 800c8da:	d004      	beq.n	800c8e6 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 800c8dc:	232b      	movs	r3, #43	; 0x2b
 800c8de:	18fb      	adds	r3, r7, r3
 800c8e0:	2203      	movs	r2, #3
 800c8e2:	701a      	strb	r2, [r3, #0]
        goto error;
 800c8e4:	e0ab      	b.n	800ca3e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d1a6      	bne.n	800c83e <HAL_SPI_TransmitReceive+0x15a>
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1a1      	bne.n	800c83e <HAL_SPI_TransmitReceive+0x15a>
 800c8fa:	e07f      	b.n	800c9fc <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d005      	beq.n	800c910 <HAL_SPI_TransmitReceive+0x22c>
 800c904:	231a      	movs	r3, #26
 800c906:	18fb      	adds	r3, r7, r3
 800c908:	881b      	ldrh	r3, [r3, #0]
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d000      	beq.n	800c910 <HAL_SPI_TransmitReceive+0x22c>
 800c90e:	e06b      	b.n	800c9e8 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	330c      	adds	r3, #12
 800c91a:	7812      	ldrb	r2, [r2, #0]
 800c91c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c922:	1c5a      	adds	r2, r3, #1
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	3b01      	subs	r3, #1
 800c930:	b29a      	uxth	r2, r3
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c936:	e057      	b.n	800c9e8 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	2202      	movs	r2, #2
 800c940:	4013      	ands	r3, r2
 800c942:	2b02      	cmp	r3, #2
 800c944:	d11c      	bne.n	800c980 <HAL_SPI_TransmitReceive+0x29c>
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d017      	beq.n	800c980 <HAL_SPI_TransmitReceive+0x29c>
 800c950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c952:	2b01      	cmp	r3, #1
 800c954:	d114      	bne.n	800c980 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	330c      	adds	r3, #12
 800c960:	7812      	ldrb	r2, [r2, #0]
 800c962:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c968:	1c5a      	adds	r2, r3, #1
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c972:	b29b      	uxth	r3, r3
 800c974:	3b01      	subs	r3, #1
 800c976:	b29a      	uxth	r2, r3
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c97c:	2300      	movs	r3, #0
 800c97e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	2201      	movs	r2, #1
 800c988:	4013      	ands	r3, r2
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	d119      	bne.n	800c9c2 <HAL_SPI_TransmitReceive+0x2de>
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c992:	b29b      	uxth	r3, r3
 800c994:	2b00      	cmp	r3, #0
 800c996:	d014      	beq.n	800c9c2 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	68da      	ldr	r2, [r3, #12]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a2:	b2d2      	uxtb	r2, r2
 800c9a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9aa:	1c5a      	adds	r2, r3, #1
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	3b01      	subs	r3, #1
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c9c2:	f7fc f92b 	bl	8008c1c <HAL_GetTick>
 800c9c6:	0002      	movs	r2, r0
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ca:	1ad3      	subs	r3, r2, r3
 800c9cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d802      	bhi.n	800c9d8 <HAL_SPI_TransmitReceive+0x2f4>
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	d102      	bne.n	800c9de <HAL_SPI_TransmitReceive+0x2fa>
 800c9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d104      	bne.n	800c9e8 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 800c9de:	232b      	movs	r3, #43	; 0x2b
 800c9e0:	18fb      	adds	r3, r7, r3
 800c9e2:	2203      	movs	r2, #3
 800c9e4:	701a      	strb	r2, [r3, #0]
        goto error;
 800c9e6:	e02a      	b.n	800ca3e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1a2      	bne.n	800c938 <HAL_SPI_TransmitReceive+0x254>
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d19d      	bne.n	800c938 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c9fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	0018      	movs	r0, r3
 800ca04:	f000 f89a 	bl	800cb3c <SPI_EndRxTxTransaction>
 800ca08:	1e03      	subs	r3, r0, #0
 800ca0a:	d007      	beq.n	800ca1c <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 800ca0c:	232b      	movs	r3, #43	; 0x2b
 800ca0e:	18fb      	adds	r3, r7, r3
 800ca10:	2201      	movs	r2, #1
 800ca12:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2220      	movs	r2, #32
 800ca18:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ca1a:	e010      	b.n	800ca3e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d10b      	bne.n	800ca3c <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca24:	2300      	movs	r3, #0
 800ca26:	617b      	str	r3, [r7, #20]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	68db      	ldr	r3, [r3, #12]
 800ca2e:	617b      	str	r3, [r7, #20]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	617b      	str	r3, [r7, #20]
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	e000      	b.n	800ca3e <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 800ca3c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2251      	movs	r2, #81	; 0x51
 800ca42:	2101      	movs	r1, #1
 800ca44:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2250      	movs	r2, #80	; 0x50
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800ca4e:	232b      	movs	r3, #43	; 0x2b
 800ca50:	18fb      	adds	r3, r7, r3
 800ca52:	781b      	ldrb	r3, [r3, #0]
}
 800ca54:	0018      	movs	r0, r3
 800ca56:	46bd      	mov	sp, r7
 800ca58:	b00c      	add	sp, #48	; 0x30
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	603b      	str	r3, [r7, #0]
 800ca68:	1dfb      	adds	r3, r7, #7
 800ca6a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ca6c:	e050      	b.n	800cb10 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	3301      	adds	r3, #1
 800ca72:	d04d      	beq.n	800cb10 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ca74:	f7fc f8d2 	bl	8008c1c <HAL_GetTick>
 800ca78:	0002      	movs	r2, r0
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	683a      	ldr	r2, [r7, #0]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d902      	bls.n	800ca8a <SPI_WaitFlagStateUntilTimeout+0x2e>
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d142      	bne.n	800cb10 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	685a      	ldr	r2, [r3, #4]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	21e0      	movs	r1, #224	; 0xe0
 800ca96:	438a      	bics	r2, r1
 800ca98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	685a      	ldr	r2, [r3, #4]
 800ca9e:	2382      	movs	r3, #130	; 0x82
 800caa0:	005b      	lsls	r3, r3, #1
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d113      	bne.n	800cace <SPI_WaitFlagStateUntilTimeout+0x72>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	689a      	ldr	r2, [r3, #8]
 800caaa:	2380      	movs	r3, #128	; 0x80
 800caac:	021b      	lsls	r3, r3, #8
 800caae:	429a      	cmp	r2, r3
 800cab0:	d005      	beq.n	800cabe <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	689a      	ldr	r2, [r3, #8]
 800cab6:	2380      	movs	r3, #128	; 0x80
 800cab8:	00db      	lsls	r3, r3, #3
 800caba:	429a      	cmp	r2, r3
 800cabc:	d107      	bne.n	800cace <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2140      	movs	r1, #64	; 0x40
 800caca:	438a      	bics	r2, r1
 800cacc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cad2:	2380      	movs	r3, #128	; 0x80
 800cad4:	019b      	lsls	r3, r3, #6
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d110      	bne.n	800cafc <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4914      	ldr	r1, [pc, #80]	; (800cb38 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800cae6:	400a      	ands	r2, r1
 800cae8:	601a      	str	r2, [r3, #0]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	681a      	ldr	r2, [r3, #0]
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2180      	movs	r1, #128	; 0x80
 800caf6:	0189      	lsls	r1, r1, #6
 800caf8:	430a      	orrs	r2, r1
 800cafa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2251      	movs	r2, #81	; 0x51
 800cb00:	2101      	movs	r1, #1
 800cb02:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2250      	movs	r2, #80	; 0x50
 800cb08:	2100      	movs	r1, #0
 800cb0a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800cb0c:	2303      	movs	r3, #3
 800cb0e:	e00f      	b.n	800cb30 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	689b      	ldr	r3, [r3, #8]
 800cb16:	68ba      	ldr	r2, [r7, #8]
 800cb18:	4013      	ands	r3, r2
 800cb1a:	68ba      	ldr	r2, [r7, #8]
 800cb1c:	1ad3      	subs	r3, r2, r3
 800cb1e:	425a      	negs	r2, r3
 800cb20:	4153      	adcs	r3, r2
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	001a      	movs	r2, r3
 800cb26:	1dfb      	adds	r3, r7, #7
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d19f      	bne.n	800ca6e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	0018      	movs	r0, r3
 800cb32:	46bd      	mov	sp, r7
 800cb34:	b004      	add	sp, #16
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	ffffdfff 	.word	0xffffdfff

0800cb3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af02      	add	r7, sp, #8
 800cb42:	60f8      	str	r0, [r7, #12]
 800cb44:	60b9      	str	r1, [r7, #8]
 800cb46:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	685a      	ldr	r2, [r3, #4]
 800cb4c:	2382      	movs	r3, #130	; 0x82
 800cb4e:	005b      	lsls	r3, r3, #1
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d112      	bne.n	800cb7a <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cb54:	68ba      	ldr	r2, [r7, #8]
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	9300      	str	r3, [sp, #0]
 800cb5c:	0013      	movs	r3, r2
 800cb5e:	2200      	movs	r2, #0
 800cb60:	2180      	movs	r1, #128	; 0x80
 800cb62:	f7ff ff7b 	bl	800ca5c <SPI_WaitFlagStateUntilTimeout>
 800cb66:	1e03      	subs	r3, r0, #0
 800cb68:	d020      	beq.n	800cbac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb6e:	2220      	movs	r2, #32
 800cb70:	431a      	orrs	r2, r3
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cb76:	2303      	movs	r3, #3
 800cb78:	e019      	b.n	800cbae <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2251      	movs	r2, #81	; 0x51
 800cb7e:	5c9b      	ldrb	r3, [r3, r2]
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	2b05      	cmp	r3, #5
 800cb84:	d112      	bne.n	800cbac <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800cb86:	68ba      	ldr	r2, [r7, #8]
 800cb88:	68f8      	ldr	r0, [r7, #12]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	9300      	str	r3, [sp, #0]
 800cb8e:	0013      	movs	r3, r2
 800cb90:	2200      	movs	r2, #0
 800cb92:	2101      	movs	r1, #1
 800cb94:	f7ff ff62 	bl	800ca5c <SPI_WaitFlagStateUntilTimeout>
 800cb98:	1e03      	subs	r3, r0, #0
 800cb9a:	d007      	beq.n	800cbac <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cba0:	2220      	movs	r2, #32
 800cba2:	431a      	orrs	r2, r3
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800cba8:	2303      	movs	r3, #3
 800cbaa:	e000      	b.n	800cbae <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 800cbac:	2300      	movs	r3, #0
}
 800cbae:	0018      	movs	r0, r3
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	b004      	add	sp, #16
 800cbb4:	bd80      	pop	{r7, pc}
	...

0800cbb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d101      	bne.n	800cbca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	e044      	b.n	800cc54 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d107      	bne.n	800cbe2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2270      	movs	r2, #112	; 0x70
 800cbd6:	2100      	movs	r1, #0
 800cbd8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	0018      	movs	r0, r3
 800cbde:	f7f8 fff3 	bl	8005bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2224      	movs	r2, #36	; 0x24
 800cbe6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2101      	movs	r1, #1
 800cbf4:	438a      	bics	r2, r1
 800cbf6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	0018      	movs	r0, r3
 800cbfc:	f000 f9f6 	bl	800cfec <UART_SetConfig>
 800cc00:	0003      	movs	r3, r0
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	d101      	bne.n	800cc0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cc06:	2301      	movs	r3, #1
 800cc08:	e024      	b.n	800cc54 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d003      	beq.n	800cc1a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	0018      	movs	r0, r3
 800cc16:	f000 fd1d 	bl	800d654 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	685a      	ldr	r2, [r3, #4]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	490d      	ldr	r1, [pc, #52]	; (800cc5c <HAL_UART_Init+0xa4>)
 800cc26:	400a      	ands	r2, r1
 800cc28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	689a      	ldr	r2, [r3, #8]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	212a      	movs	r1, #42	; 0x2a
 800cc36:	438a      	bics	r2, r1
 800cc38:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	2101      	movs	r1, #1
 800cc46:	430a      	orrs	r2, r1
 800cc48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	0018      	movs	r0, r3
 800cc4e:	f000 fdb5 	bl	800d7bc <UART_CheckIdleState>
 800cc52:	0003      	movs	r3, r0
}
 800cc54:	0018      	movs	r0, r3
 800cc56:	46bd      	mov	sp, r7
 800cc58:	b002      	add	sp, #8
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	ffffb7ff 	.word	0xffffb7ff

0800cc60 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	1dbb      	adds	r3, r7, #6
 800cc6c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc72:	2b20      	cmp	r3, #32
 800cc74:	d000      	beq.n	800cc78 <HAL_UART_Transmit_DMA+0x18>
 800cc76:	e077      	b.n	800cd68 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d003      	beq.n	800cc86 <HAL_UART_Transmit_DMA+0x26>
 800cc7e:	1dbb      	adds	r3, r7, #6
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d101      	bne.n	800cc8a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800cc86:	2301      	movs	r3, #1
 800cc88:	e06f      	b.n	800cd6a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	689a      	ldr	r2, [r3, #8]
 800cc8e:	2380      	movs	r3, #128	; 0x80
 800cc90:	015b      	lsls	r3, r3, #5
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d109      	bne.n	800ccaa <HAL_UART_Transmit_DMA+0x4a>
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	691b      	ldr	r3, [r3, #16]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d105      	bne.n	800ccaa <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	2201      	movs	r2, #1
 800cca2:	4013      	ands	r3, r2
 800cca4:	d001      	beq.n	800ccaa <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800cca6:	2301      	movs	r3, #1
 800cca8:	e05f      	b.n	800cd6a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	2270      	movs	r2, #112	; 0x70
 800ccae:	5c9b      	ldrb	r3, [r3, r2]
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d101      	bne.n	800ccb8 <HAL_UART_Transmit_DMA+0x58>
 800ccb4:	2302      	movs	r3, #2
 800ccb6:	e058      	b.n	800cd6a <HAL_UART_Transmit_DMA+0x10a>
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2270      	movs	r2, #112	; 0x70
 800ccbc:	2101      	movs	r1, #1
 800ccbe:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	68ba      	ldr	r2, [r7, #8]
 800ccc4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	1dba      	adds	r2, r7, #6
 800ccca:	2150      	movs	r1, #80	; 0x50
 800cccc:	8812      	ldrh	r2, [r2, #0]
 800ccce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	1dba      	adds	r2, r7, #6
 800ccd4:	2152      	movs	r1, #82	; 0x52
 800ccd6:	8812      	ldrh	r2, [r2, #0]
 800ccd8:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2221      	movs	r2, #33	; 0x21
 800cce4:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d02a      	beq.n	800cd44 <HAL_UART_Transmit_DMA+0xe4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ccf2:	4a20      	ldr	r2, [pc, #128]	; (800cd74 <HAL_UART_Transmit_DMA+0x114>)
 800ccf4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ccfa:	4a1f      	ldr	r2, [pc, #124]	; (800cd78 <HAL_UART_Transmit_DMA+0x118>)
 800ccfc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd02:	4a1e      	ldr	r2, [pc, #120]	; (800cd7c <HAL_UART_Transmit_DMA+0x11c>)
 800cd04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd16:	0019      	movs	r1, r3
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	3328      	adds	r3, #40	; 0x28
 800cd1e:	001a      	movs	r2, r3
 800cd20:	1dbb      	adds	r3, r7, #6
 800cd22:	881b      	ldrh	r3, [r3, #0]
 800cd24:	f7fc fe26 	bl	8009974 <HAL_DMA_Start_IT>
 800cd28:	1e03      	subs	r3, r0, #0
 800cd2a:	d00b      	beq.n	800cd44 <HAL_UART_Transmit_DMA+0xe4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2210      	movs	r2, #16
 800cd30:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2270      	movs	r2, #112	; 0x70
 800cd36:	2100      	movs	r1, #0
 800cd38:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2220      	movs	r2, #32
 800cd3e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800cd40:	2301      	movs	r3, #1
 800cd42:	e012      	b.n	800cd6a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	2240      	movs	r2, #64	; 0x40
 800cd4a:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2270      	movs	r2, #112	; 0x70
 800cd50:	2100      	movs	r1, #0
 800cd52:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	689a      	ldr	r2, [r3, #8]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2180      	movs	r1, #128	; 0x80
 800cd60:	430a      	orrs	r2, r1
 800cd62:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800cd64:	2300      	movs	r3, #0
 800cd66:	e000      	b.n	800cd6a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800cd68:	2302      	movs	r3, #2
  }
}
 800cd6a:	0018      	movs	r0, r3
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	b004      	add	sp, #16
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	46c0      	nop			; (mov r8, r8)
 800cd74:	0800d945 	.word	0x0800d945
 800cd78:	0800d999 	.word	0x0800d999
 800cd7c:	0800d9b7 	.word	0x0800d9b7

0800cd80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b088      	sub	sp, #32
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	69db      	ldr	r3, [r3, #28]
 800cd8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	689b      	ldr	r3, [r3, #8]
 800cd9e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800cda0:	69fb      	ldr	r3, [r7, #28]
 800cda2:	220f      	movs	r2, #15
 800cda4:	4013      	ands	r3, r2
 800cda6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d112      	bne.n	800cdd4 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800cdae:	69fb      	ldr	r3, [r7, #28]
 800cdb0:	2220      	movs	r2, #32
 800cdb2:	4013      	ands	r3, r2
 800cdb4:	d00e      	beq.n	800cdd4 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	2220      	movs	r2, #32
 800cdba:	4013      	ands	r3, r2
 800cdbc:	d00a      	beq.n	800cdd4 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d100      	bne.n	800cdc8 <HAL_UART_IRQHandler+0x48>
 800cdc6:	e0f6      	b.n	800cfb6 <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	0010      	movs	r0, r2
 800cdd0:	4798      	blx	r3
      }
      return;
 800cdd2:	e0f0      	b.n	800cfb6 <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d100      	bne.n	800cddc <HAL_UART_IRQHandler+0x5c>
 800cdda:	e0b8      	b.n	800cf4e <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	2201      	movs	r2, #1
 800cde0:	4013      	ands	r3, r2
 800cde2:	d105      	bne.n	800cdf0 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800cde4:	69ba      	ldr	r2, [r7, #24]
 800cde6:	2390      	movs	r3, #144	; 0x90
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	4013      	ands	r3, r2
 800cdec:	d100      	bne.n	800cdf0 <HAL_UART_IRQHandler+0x70>
 800cdee:	e0ae      	b.n	800cf4e <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	d00e      	beq.n	800ce16 <HAL_UART_IRQHandler+0x96>
 800cdf8:	69ba      	ldr	r2, [r7, #24]
 800cdfa:	2380      	movs	r3, #128	; 0x80
 800cdfc:	005b      	lsls	r3, r3, #1
 800cdfe:	4013      	ands	r3, r2
 800ce00:	d009      	beq.n	800ce16 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2201      	movs	r2, #1
 800ce08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce0e:	2201      	movs	r2, #1
 800ce10:	431a      	orrs	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	2202      	movs	r2, #2
 800ce1a:	4013      	ands	r3, r2
 800ce1c:	d00d      	beq.n	800ce3a <HAL_UART_IRQHandler+0xba>
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	2201      	movs	r2, #1
 800ce22:	4013      	ands	r3, r2
 800ce24:	d009      	beq.n	800ce3a <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	2202      	movs	r2, #2
 800ce2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce32:	2204      	movs	r2, #4
 800ce34:	431a      	orrs	r2, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce3a:	69fb      	ldr	r3, [r7, #28]
 800ce3c:	2204      	movs	r2, #4
 800ce3e:	4013      	ands	r3, r2
 800ce40:	d00d      	beq.n	800ce5e <HAL_UART_IRQHandler+0xde>
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	2201      	movs	r2, #1
 800ce46:	4013      	ands	r3, r2
 800ce48:	d009      	beq.n	800ce5e <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2204      	movs	r2, #4
 800ce50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce56:	2202      	movs	r2, #2
 800ce58:	431a      	orrs	r2, r3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ce5e:	69fb      	ldr	r3, [r7, #28]
 800ce60:	2208      	movs	r2, #8
 800ce62:	4013      	ands	r3, r2
 800ce64:	d011      	beq.n	800ce8a <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	2220      	movs	r2, #32
 800ce6a:	4013      	ands	r3, r2
 800ce6c:	d103      	bne.n	800ce76 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	2201      	movs	r2, #1
 800ce72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ce74:	d009      	beq.n	800ce8a <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2208      	movs	r2, #8
 800ce7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce82:	2208      	movs	r2, #8
 800ce84:	431a      	orrs	r2, r3
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d100      	bne.n	800ce94 <HAL_UART_IRQHandler+0x114>
 800ce92:	e092      	b.n	800cfba <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	2220      	movs	r2, #32
 800ce98:	4013      	ands	r3, r2
 800ce9a:	d00c      	beq.n	800ceb6 <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	2220      	movs	r2, #32
 800cea0:	4013      	ands	r3, r2
 800cea2:	d008      	beq.n	800ceb6 <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d004      	beq.n	800ceb6 <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	0010      	movs	r0, r2
 800ceb4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceba:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	2240      	movs	r2, #64	; 0x40
 800cec4:	4013      	ands	r3, r2
 800cec6:	2b40      	cmp	r3, #64	; 0x40
 800cec8:	d003      	beq.n	800ced2 <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	2208      	movs	r2, #8
 800cece:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ced0:	d033      	beq.n	800cf3a <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	0018      	movs	r0, r3
 800ced6:	f000 fd15 	bl	800d904 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	2240      	movs	r2, #64	; 0x40
 800cee2:	4013      	ands	r3, r2
 800cee4:	2b40      	cmp	r3, #64	; 0x40
 800cee6:	d123      	bne.n	800cf30 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	689a      	ldr	r2, [r3, #8]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2140      	movs	r1, #64	; 0x40
 800cef4:	438a      	bics	r2, r1
 800cef6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d012      	beq.n	800cf26 <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf04:	4a30      	ldr	r2, [pc, #192]	; (800cfc8 <HAL_UART_IRQHandler+0x248>)
 800cf06:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf0c:	0018      	movs	r0, r3
 800cf0e:	f7fc fd97 	bl	8009a40 <HAL_DMA_Abort_IT>
 800cf12:	1e03      	subs	r3, r0, #0
 800cf14:	d019      	beq.n	800cf4a <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf20:	0018      	movs	r0, r3
 800cf22:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf24:	e011      	b.n	800cf4a <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	0018      	movs	r0, r3
 800cf2a:	f000 f857 	bl	800cfdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf2e:	e00c      	b.n	800cf4a <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	0018      	movs	r0, r3
 800cf34:	f000 f852 	bl	800cfdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf38:	e007      	b.n	800cf4a <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	0018      	movs	r0, r3
 800cf3e:	f000 f84d 	bl	800cfdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2200      	movs	r2, #0
 800cf46:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800cf48:	e037      	b.n	800cfba <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf4a:	46c0      	nop			; (mov r8, r8)
    return;
 800cf4c:	e035      	b.n	800cfba <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cf4e:	69fa      	ldr	r2, [r7, #28]
 800cf50:	2380      	movs	r3, #128	; 0x80
 800cf52:	035b      	lsls	r3, r3, #13
 800cf54:	4013      	ands	r3, r2
 800cf56:	d00e      	beq.n	800cf76 <HAL_UART_IRQHandler+0x1f6>
 800cf58:	697a      	ldr	r2, [r7, #20]
 800cf5a:	2380      	movs	r3, #128	; 0x80
 800cf5c:	03db      	lsls	r3, r3, #15
 800cf5e:	4013      	ands	r3, r2
 800cf60:	d009      	beq.n	800cf76 <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	2280      	movs	r2, #128	; 0x80
 800cf68:	0352      	lsls	r2, r2, #13
 800cf6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	0018      	movs	r0, r3
 800cf70:	f000 fd91 	bl	800da96 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf74:	e024      	b.n	800cfc0 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	2280      	movs	r2, #128	; 0x80
 800cf7a:	4013      	ands	r3, r2
 800cf7c:	d00d      	beq.n	800cf9a <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	2280      	movs	r2, #128	; 0x80
 800cf82:	4013      	ands	r3, r2
 800cf84:	d009      	beq.n	800cf9a <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d017      	beq.n	800cfbe <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	0010      	movs	r0, r2
 800cf96:	4798      	blx	r3
    }
    return;
 800cf98:	e011      	b.n	800cfbe <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	2240      	movs	r2, #64	; 0x40
 800cf9e:	4013      	ands	r3, r2
 800cfa0:	d00e      	beq.n	800cfc0 <HAL_UART_IRQHandler+0x240>
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	2240      	movs	r2, #64	; 0x40
 800cfa6:	4013      	ands	r3, r2
 800cfa8:	d00a      	beq.n	800cfc0 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	0018      	movs	r0, r3
 800cfae:	f000 fd58 	bl	800da62 <UART_EndTransmit_IT>
    return;
 800cfb2:	46c0      	nop			; (mov r8, r8)
 800cfb4:	e004      	b.n	800cfc0 <HAL_UART_IRQHandler+0x240>
      return;
 800cfb6:	46c0      	nop			; (mov r8, r8)
 800cfb8:	e002      	b.n	800cfc0 <HAL_UART_IRQHandler+0x240>
    return;
 800cfba:	46c0      	nop			; (mov r8, r8)
 800cfbc:	e000      	b.n	800cfc0 <HAL_UART_IRQHandler+0x240>
    return;
 800cfbe:	46c0      	nop			; (mov r8, r8)
  }

}
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	b008      	add	sp, #32
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	46c0      	nop			; (mov r8, r8)
 800cfc8:	0800da35 	.word	0x0800da35

0800cfcc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cfd4:	46c0      	nop			; (mov r8, r8)
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	b002      	add	sp, #8
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cfe4:	46c0      	nop			; (mov r8, r8)
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	b002      	add	sp, #8
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cfec:	b5b0      	push	{r4, r5, r7, lr}
 800cfee:	b08e      	sub	sp, #56	; 0x38
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800cff4:	231b      	movs	r3, #27
 800cff6:	2218      	movs	r2, #24
 800cff8:	4694      	mov	ip, r2
 800cffa:	44bc      	add	ip, r7
 800cffc:	4463      	add	r3, ip
 800cffe:	2210      	movs	r2, #16
 800d000:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800d002:	2300      	movs	r3, #0
 800d004:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800d006:	2313      	movs	r3, #19
 800d008:	2218      	movs	r2, #24
 800d00a:	4694      	mov	ip, r2
 800d00c:	44bc      	add	ip, r7
 800d00e:	4463      	add	r3, ip
 800d010:	2200      	movs	r2, #0
 800d012:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800d014:	2300      	movs	r3, #0
 800d016:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	689a      	ldr	r2, [r3, #8]
 800d01c:	69fb      	ldr	r3, [r7, #28]
 800d01e:	691b      	ldr	r3, [r3, #16]
 800d020:	431a      	orrs	r2, r3
 800d022:	69fb      	ldr	r3, [r7, #28]
 800d024:	695b      	ldr	r3, [r3, #20]
 800d026:	431a      	orrs	r2, r3
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	69db      	ldr	r3, [r3, #28]
 800d02c:	4313      	orrs	r3, r2
 800d02e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4aca      	ldr	r2, [pc, #808]	; (800d360 <UART_SetConfig+0x374>)
 800d038:	4013      	ands	r3, r2
 800d03a:	0019      	movs	r1, r3
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d042:	430a      	orrs	r2, r1
 800d044:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	4ac5      	ldr	r2, [pc, #788]	; (800d364 <UART_SetConfig+0x378>)
 800d04e:	4013      	ands	r3, r2
 800d050:	0019      	movs	r1, r3
 800d052:	69fb      	ldr	r3, [r7, #28]
 800d054:	68da      	ldr	r2, [r3, #12]
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	430a      	orrs	r2, r1
 800d05c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	699b      	ldr	r3, [r3, #24]
 800d062:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4abf      	ldr	r2, [pc, #764]	; (800d368 <UART_SetConfig+0x37c>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d004      	beq.n	800d078 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	6a1b      	ldr	r3, [r3, #32]
 800d072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d074:	4313      	orrs	r3, r2
 800d076:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	689b      	ldr	r3, [r3, #8]
 800d07e:	4abb      	ldr	r2, [pc, #748]	; (800d36c <UART_SetConfig+0x380>)
 800d080:	4013      	ands	r3, r2
 800d082:	0019      	movs	r1, r3
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d08a:	430a      	orrs	r2, r1
 800d08c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d08e:	69fb      	ldr	r3, [r7, #28]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4ab7      	ldr	r2, [pc, #732]	; (800d370 <UART_SetConfig+0x384>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d134      	bne.n	800d102 <UART_SetConfig+0x116>
 800d098:	4bb6      	ldr	r3, [pc, #728]	; (800d374 <UART_SetConfig+0x388>)
 800d09a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d09c:	2203      	movs	r2, #3
 800d09e:	4013      	ands	r3, r2
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d015      	beq.n	800d0d0 <UART_SetConfig+0xe4>
 800d0a4:	d304      	bcc.n	800d0b0 <UART_SetConfig+0xc4>
 800d0a6:	2b02      	cmp	r3, #2
 800d0a8:	d00a      	beq.n	800d0c0 <UART_SetConfig+0xd4>
 800d0aa:	2b03      	cmp	r3, #3
 800d0ac:	d018      	beq.n	800d0e0 <UART_SetConfig+0xf4>
 800d0ae:	e01f      	b.n	800d0f0 <UART_SetConfig+0x104>
 800d0b0:	231b      	movs	r3, #27
 800d0b2:	2218      	movs	r2, #24
 800d0b4:	4694      	mov	ip, r2
 800d0b6:	44bc      	add	ip, r7
 800d0b8:	4463      	add	r3, ip
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	701a      	strb	r2, [r3, #0]
 800d0be:	e0c5      	b.n	800d24c <UART_SetConfig+0x260>
 800d0c0:	231b      	movs	r3, #27
 800d0c2:	2218      	movs	r2, #24
 800d0c4:	4694      	mov	ip, r2
 800d0c6:	44bc      	add	ip, r7
 800d0c8:	4463      	add	r3, ip
 800d0ca:	2202      	movs	r2, #2
 800d0cc:	701a      	strb	r2, [r3, #0]
 800d0ce:	e0bd      	b.n	800d24c <UART_SetConfig+0x260>
 800d0d0:	231b      	movs	r3, #27
 800d0d2:	2218      	movs	r2, #24
 800d0d4:	4694      	mov	ip, r2
 800d0d6:	44bc      	add	ip, r7
 800d0d8:	4463      	add	r3, ip
 800d0da:	2204      	movs	r2, #4
 800d0dc:	701a      	strb	r2, [r3, #0]
 800d0de:	e0b5      	b.n	800d24c <UART_SetConfig+0x260>
 800d0e0:	231b      	movs	r3, #27
 800d0e2:	2218      	movs	r2, #24
 800d0e4:	4694      	mov	ip, r2
 800d0e6:	44bc      	add	ip, r7
 800d0e8:	4463      	add	r3, ip
 800d0ea:	2208      	movs	r2, #8
 800d0ec:	701a      	strb	r2, [r3, #0]
 800d0ee:	e0ad      	b.n	800d24c <UART_SetConfig+0x260>
 800d0f0:	231b      	movs	r3, #27
 800d0f2:	2218      	movs	r2, #24
 800d0f4:	4694      	mov	ip, r2
 800d0f6:	44bc      	add	ip, r7
 800d0f8:	4463      	add	r3, ip
 800d0fa:	2210      	movs	r2, #16
 800d0fc:	701a      	strb	r2, [r3, #0]
 800d0fe:	46c0      	nop			; (mov r8, r8)
 800d100:	e0a4      	b.n	800d24c <UART_SetConfig+0x260>
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4a9c      	ldr	r2, [pc, #624]	; (800d378 <UART_SetConfig+0x38c>)
 800d108:	4293      	cmp	r3, r2
 800d10a:	d137      	bne.n	800d17c <UART_SetConfig+0x190>
 800d10c:	4b99      	ldr	r3, [pc, #612]	; (800d374 <UART_SetConfig+0x388>)
 800d10e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d110:	220c      	movs	r2, #12
 800d112:	4013      	ands	r3, r2
 800d114:	2b04      	cmp	r3, #4
 800d116:	d018      	beq.n	800d14a <UART_SetConfig+0x15e>
 800d118:	d802      	bhi.n	800d120 <UART_SetConfig+0x134>
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d005      	beq.n	800d12a <UART_SetConfig+0x13e>
 800d11e:	e024      	b.n	800d16a <UART_SetConfig+0x17e>
 800d120:	2b08      	cmp	r3, #8
 800d122:	d00a      	beq.n	800d13a <UART_SetConfig+0x14e>
 800d124:	2b0c      	cmp	r3, #12
 800d126:	d018      	beq.n	800d15a <UART_SetConfig+0x16e>
 800d128:	e01f      	b.n	800d16a <UART_SetConfig+0x17e>
 800d12a:	231b      	movs	r3, #27
 800d12c:	2218      	movs	r2, #24
 800d12e:	4694      	mov	ip, r2
 800d130:	44bc      	add	ip, r7
 800d132:	4463      	add	r3, ip
 800d134:	2200      	movs	r2, #0
 800d136:	701a      	strb	r2, [r3, #0]
 800d138:	e088      	b.n	800d24c <UART_SetConfig+0x260>
 800d13a:	231b      	movs	r3, #27
 800d13c:	2218      	movs	r2, #24
 800d13e:	4694      	mov	ip, r2
 800d140:	44bc      	add	ip, r7
 800d142:	4463      	add	r3, ip
 800d144:	2202      	movs	r2, #2
 800d146:	701a      	strb	r2, [r3, #0]
 800d148:	e080      	b.n	800d24c <UART_SetConfig+0x260>
 800d14a:	231b      	movs	r3, #27
 800d14c:	2218      	movs	r2, #24
 800d14e:	4694      	mov	ip, r2
 800d150:	44bc      	add	ip, r7
 800d152:	4463      	add	r3, ip
 800d154:	2204      	movs	r2, #4
 800d156:	701a      	strb	r2, [r3, #0]
 800d158:	e078      	b.n	800d24c <UART_SetConfig+0x260>
 800d15a:	231b      	movs	r3, #27
 800d15c:	2218      	movs	r2, #24
 800d15e:	4694      	mov	ip, r2
 800d160:	44bc      	add	ip, r7
 800d162:	4463      	add	r3, ip
 800d164:	2208      	movs	r2, #8
 800d166:	701a      	strb	r2, [r3, #0]
 800d168:	e070      	b.n	800d24c <UART_SetConfig+0x260>
 800d16a:	231b      	movs	r3, #27
 800d16c:	2218      	movs	r2, #24
 800d16e:	4694      	mov	ip, r2
 800d170:	44bc      	add	ip, r7
 800d172:	4463      	add	r3, ip
 800d174:	2210      	movs	r2, #16
 800d176:	701a      	strb	r2, [r3, #0]
 800d178:	46c0      	nop			; (mov r8, r8)
 800d17a:	e067      	b.n	800d24c <UART_SetConfig+0x260>
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a7e      	ldr	r2, [pc, #504]	; (800d37c <UART_SetConfig+0x390>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d107      	bne.n	800d196 <UART_SetConfig+0x1aa>
 800d186:	231b      	movs	r3, #27
 800d188:	2218      	movs	r2, #24
 800d18a:	4694      	mov	ip, r2
 800d18c:	44bc      	add	ip, r7
 800d18e:	4463      	add	r3, ip
 800d190:	2200      	movs	r2, #0
 800d192:	701a      	strb	r2, [r3, #0]
 800d194:	e05a      	b.n	800d24c <UART_SetConfig+0x260>
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4a79      	ldr	r2, [pc, #484]	; (800d380 <UART_SetConfig+0x394>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d107      	bne.n	800d1b0 <UART_SetConfig+0x1c4>
 800d1a0:	231b      	movs	r3, #27
 800d1a2:	2218      	movs	r2, #24
 800d1a4:	4694      	mov	ip, r2
 800d1a6:	44bc      	add	ip, r7
 800d1a8:	4463      	add	r3, ip
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	701a      	strb	r2, [r3, #0]
 800d1ae:	e04d      	b.n	800d24c <UART_SetConfig+0x260>
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a6c      	ldr	r2, [pc, #432]	; (800d368 <UART_SetConfig+0x37c>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d141      	bne.n	800d23e <UART_SetConfig+0x252>
 800d1ba:	4b6e      	ldr	r3, [pc, #440]	; (800d374 <UART_SetConfig+0x388>)
 800d1bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d1be:	23c0      	movs	r3, #192	; 0xc0
 800d1c0:	011b      	lsls	r3, r3, #4
 800d1c2:	4013      	ands	r3, r2
 800d1c4:	2280      	movs	r2, #128	; 0x80
 800d1c6:	00d2      	lsls	r2, r2, #3
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d01f      	beq.n	800d20c <UART_SetConfig+0x220>
 800d1cc:	2280      	movs	r2, #128	; 0x80
 800d1ce:	00d2      	lsls	r2, r2, #3
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d802      	bhi.n	800d1da <UART_SetConfig+0x1ee>
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d009      	beq.n	800d1ec <UART_SetConfig+0x200>
 800d1d8:	e028      	b.n	800d22c <UART_SetConfig+0x240>
 800d1da:	2280      	movs	r2, #128	; 0x80
 800d1dc:	0112      	lsls	r2, r2, #4
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d00c      	beq.n	800d1fc <UART_SetConfig+0x210>
 800d1e2:	22c0      	movs	r2, #192	; 0xc0
 800d1e4:	0112      	lsls	r2, r2, #4
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d018      	beq.n	800d21c <UART_SetConfig+0x230>
 800d1ea:	e01f      	b.n	800d22c <UART_SetConfig+0x240>
 800d1ec:	231b      	movs	r3, #27
 800d1ee:	2218      	movs	r2, #24
 800d1f0:	4694      	mov	ip, r2
 800d1f2:	44bc      	add	ip, r7
 800d1f4:	4463      	add	r3, ip
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	701a      	strb	r2, [r3, #0]
 800d1fa:	e027      	b.n	800d24c <UART_SetConfig+0x260>
 800d1fc:	231b      	movs	r3, #27
 800d1fe:	2218      	movs	r2, #24
 800d200:	4694      	mov	ip, r2
 800d202:	44bc      	add	ip, r7
 800d204:	4463      	add	r3, ip
 800d206:	2202      	movs	r2, #2
 800d208:	701a      	strb	r2, [r3, #0]
 800d20a:	e01f      	b.n	800d24c <UART_SetConfig+0x260>
 800d20c:	231b      	movs	r3, #27
 800d20e:	2218      	movs	r2, #24
 800d210:	4694      	mov	ip, r2
 800d212:	44bc      	add	ip, r7
 800d214:	4463      	add	r3, ip
 800d216:	2204      	movs	r2, #4
 800d218:	701a      	strb	r2, [r3, #0]
 800d21a:	e017      	b.n	800d24c <UART_SetConfig+0x260>
 800d21c:	231b      	movs	r3, #27
 800d21e:	2218      	movs	r2, #24
 800d220:	4694      	mov	ip, r2
 800d222:	44bc      	add	ip, r7
 800d224:	4463      	add	r3, ip
 800d226:	2208      	movs	r2, #8
 800d228:	701a      	strb	r2, [r3, #0]
 800d22a:	e00f      	b.n	800d24c <UART_SetConfig+0x260>
 800d22c:	231b      	movs	r3, #27
 800d22e:	2218      	movs	r2, #24
 800d230:	4694      	mov	ip, r2
 800d232:	44bc      	add	ip, r7
 800d234:	4463      	add	r3, ip
 800d236:	2210      	movs	r2, #16
 800d238:	701a      	strb	r2, [r3, #0]
 800d23a:	46c0      	nop			; (mov r8, r8)
 800d23c:	e006      	b.n	800d24c <UART_SetConfig+0x260>
 800d23e:	231b      	movs	r3, #27
 800d240:	2218      	movs	r2, #24
 800d242:	4694      	mov	ip, r2
 800d244:	44bc      	add	ip, r7
 800d246:	4463      	add	r3, ip
 800d248:	2210      	movs	r2, #16
 800d24a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4a45      	ldr	r2, [pc, #276]	; (800d368 <UART_SetConfig+0x37c>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d000      	beq.n	800d258 <UART_SetConfig+0x26c>
 800d256:	e09d      	b.n	800d394 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d258:	231b      	movs	r3, #27
 800d25a:	2218      	movs	r2, #24
 800d25c:	4694      	mov	ip, r2
 800d25e:	44bc      	add	ip, r7
 800d260:	4463      	add	r3, ip
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	2b02      	cmp	r3, #2
 800d266:	d00d      	beq.n	800d284 <UART_SetConfig+0x298>
 800d268:	dc02      	bgt.n	800d270 <UART_SetConfig+0x284>
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d005      	beq.n	800d27a <UART_SetConfig+0x28e>
 800d26e:	e01d      	b.n	800d2ac <UART_SetConfig+0x2c0>
 800d270:	2b04      	cmp	r3, #4
 800d272:	d012      	beq.n	800d29a <UART_SetConfig+0x2ae>
 800d274:	2b08      	cmp	r3, #8
 800d276:	d015      	beq.n	800d2a4 <UART_SetConfig+0x2b8>
 800d278:	e018      	b.n	800d2ac <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800d27a:	f7fe faa1 	bl	800b7c0 <HAL_RCC_GetPCLK1Freq>
 800d27e:	0003      	movs	r3, r0
 800d280:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d282:	e01b      	b.n	800d2bc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d284:	4b3b      	ldr	r3, [pc, #236]	; (800d374 <UART_SetConfig+0x388>)
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	2210      	movs	r2, #16
 800d28a:	4013      	ands	r3, r2
 800d28c:	d002      	beq.n	800d294 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800d28e:	4b3d      	ldr	r3, [pc, #244]	; (800d384 <UART_SetConfig+0x398>)
 800d290:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800d292:	e013      	b.n	800d2bc <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800d294:	4b3c      	ldr	r3, [pc, #240]	; (800d388 <UART_SetConfig+0x39c>)
 800d296:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d298:	e010      	b.n	800d2bc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800d29a:	f7fe fa03 	bl	800b6a4 <HAL_RCC_GetSysClockFreq>
 800d29e:	0003      	movs	r3, r0
 800d2a0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d2a2:	e00b      	b.n	800d2bc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800d2a4:	2380      	movs	r3, #128	; 0x80
 800d2a6:	021b      	lsls	r3, r3, #8
 800d2a8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d2aa:	e007      	b.n	800d2bc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800d2ac:	2313      	movs	r3, #19
 800d2ae:	2218      	movs	r2, #24
 800d2b0:	4694      	mov	ip, r2
 800d2b2:	44bc      	add	ip, r7
 800d2b4:	4463      	add	r3, ip
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	701a      	strb	r2, [r3, #0]
        break;
 800d2ba:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800d2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d100      	bne.n	800d2c4 <UART_SetConfig+0x2d8>
 800d2c2:	e1a6      	b.n	800d612 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d2c4:	69fb      	ldr	r3, [r7, #28]
 800d2c6:	685a      	ldr	r2, [r3, #4]
 800d2c8:	0013      	movs	r3, r2
 800d2ca:	005b      	lsls	r3, r3, #1
 800d2cc:	189b      	adds	r3, r3, r2
 800d2ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d305      	bcc.n	800d2e0 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d2d4:	69fb      	ldr	r3, [r7, #28]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d2da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d907      	bls.n	800d2f0 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 800d2e0:	2313      	movs	r3, #19
 800d2e2:	2218      	movs	r2, #24
 800d2e4:	4694      	mov	ip, r2
 800d2e6:	44bc      	add	ip, r7
 800d2e8:	4463      	add	r3, ip
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	701a      	strb	r2, [r3, #0]
 800d2ee:	e190      	b.n	800d612 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 800d2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f2:	613b      	str	r3, [r7, #16]
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	617b      	str	r3, [r7, #20]
 800d2f8:	6939      	ldr	r1, [r7, #16]
 800d2fa:	697a      	ldr	r2, [r7, #20]
 800d2fc:	000b      	movs	r3, r1
 800d2fe:	0e1b      	lsrs	r3, r3, #24
 800d300:	0010      	movs	r0, r2
 800d302:	0205      	lsls	r5, r0, #8
 800d304:	431d      	orrs	r5, r3
 800d306:	000b      	movs	r3, r1
 800d308:	021c      	lsls	r4, r3, #8
 800d30a:	69fb      	ldr	r3, [r7, #28]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	085b      	lsrs	r3, r3, #1
 800d310:	60bb      	str	r3, [r7, #8]
 800d312:	2300      	movs	r3, #0
 800d314:	60fb      	str	r3, [r7, #12]
 800d316:	68b8      	ldr	r0, [r7, #8]
 800d318:	68f9      	ldr	r1, [r7, #12]
 800d31a:	1900      	adds	r0, r0, r4
 800d31c:	4169      	adcs	r1, r5
 800d31e:	69fb      	ldr	r3, [r7, #28]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	603b      	str	r3, [r7, #0]
 800d324:	2300      	movs	r3, #0
 800d326:	607b      	str	r3, [r7, #4]
 800d328:	683a      	ldr	r2, [r7, #0]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f7f3 f8fe 	bl	800052c <__aeabi_uldivmod>
 800d330:	0003      	movs	r3, r0
 800d332:	000c      	movs	r4, r1
 800d334:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d338:	4a14      	ldr	r2, [pc, #80]	; (800d38c <UART_SetConfig+0x3a0>)
 800d33a:	4293      	cmp	r3, r2
 800d33c:	d908      	bls.n	800d350 <UART_SetConfig+0x364>
 800d33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d340:	4a13      	ldr	r2, [pc, #76]	; (800d390 <UART_SetConfig+0x3a4>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d804      	bhi.n	800d350 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d34c:	60da      	str	r2, [r3, #12]
 800d34e:	e160      	b.n	800d612 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 800d350:	2313      	movs	r3, #19
 800d352:	2218      	movs	r2, #24
 800d354:	4694      	mov	ip, r2
 800d356:	44bc      	add	ip, r7
 800d358:	4463      	add	r3, ip
 800d35a:	2201      	movs	r2, #1
 800d35c:	701a      	strb	r2, [r3, #0]
 800d35e:	e158      	b.n	800d612 <UART_SetConfig+0x626>
 800d360:	efff69f3 	.word	0xefff69f3
 800d364:	ffffcfff 	.word	0xffffcfff
 800d368:	40004800 	.word	0x40004800
 800d36c:	fffff4ff 	.word	0xfffff4ff
 800d370:	40013800 	.word	0x40013800
 800d374:	40021000 	.word	0x40021000
 800d378:	40004400 	.word	0x40004400
 800d37c:	40004c00 	.word	0x40004c00
 800d380:	40005000 	.word	0x40005000
 800d384:	003d0900 	.word	0x003d0900
 800d388:	00f42400 	.word	0x00f42400
 800d38c:	000002ff 	.word	0x000002ff
 800d390:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	69da      	ldr	r2, [r3, #28]
 800d398:	2380      	movs	r3, #128	; 0x80
 800d39a:	021b      	lsls	r3, r3, #8
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d000      	beq.n	800d3a2 <UART_SetConfig+0x3b6>
 800d3a0:	e0a9      	b.n	800d4f6 <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 800d3a2:	231b      	movs	r3, #27
 800d3a4:	2218      	movs	r2, #24
 800d3a6:	4694      	mov	ip, r2
 800d3a8:	44bc      	add	ip, r7
 800d3aa:	4463      	add	r3, ip
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	2b08      	cmp	r3, #8
 800d3b0:	d86d      	bhi.n	800d48e <UART_SetConfig+0x4a2>
 800d3b2:	009a      	lsls	r2, r3, #2
 800d3b4:	4b9f      	ldr	r3, [pc, #636]	; (800d634 <UART_SetConfig+0x648>)
 800d3b6:	18d3      	adds	r3, r2, r3
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d3bc:	f7fe fa00 	bl	800b7c0 <HAL_RCC_GetPCLK1Freq>
 800d3c0:	0003      	movs	r3, r0
 800d3c2:	005a      	lsls	r2, r3, #1
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	085b      	lsrs	r3, r3, #1
 800d3ca:	18d2      	adds	r2, r2, r3
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	0019      	movs	r1, r3
 800d3d2:	0010      	movs	r0, r2
 800d3d4:	f7f2 fe98 	bl	8000108 <__udivsi3>
 800d3d8:	0003      	movs	r3, r0
 800d3da:	b29b      	uxth	r3, r3
 800d3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d3de:	e05e      	b.n	800d49e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800d3e0:	f7fe fa04 	bl	800b7ec <HAL_RCC_GetPCLK2Freq>
 800d3e4:	0003      	movs	r3, r0
 800d3e6:	005a      	lsls	r2, r3, #1
 800d3e8:	69fb      	ldr	r3, [r7, #28]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	085b      	lsrs	r3, r3, #1
 800d3ee:	18d2      	adds	r2, r2, r3
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	0019      	movs	r1, r3
 800d3f6:	0010      	movs	r0, r2
 800d3f8:	f7f2 fe86 	bl	8000108 <__udivsi3>
 800d3fc:	0003      	movs	r3, r0
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d402:	e04c      	b.n	800d49e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d404:	4b8c      	ldr	r3, [pc, #560]	; (800d638 <UART_SetConfig+0x64c>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2210      	movs	r2, #16
 800d40a:	4013      	ands	r3, r2
 800d40c:	d00e      	beq.n	800d42c <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800d40e:	69fb      	ldr	r3, [r7, #28]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	085b      	lsrs	r3, r3, #1
 800d414:	4a89      	ldr	r2, [pc, #548]	; (800d63c <UART_SetConfig+0x650>)
 800d416:	189a      	adds	r2, r3, r2
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	0019      	movs	r1, r3
 800d41e:	0010      	movs	r0, r2
 800d420:	f7f2 fe72 	bl	8000108 <__udivsi3>
 800d424:	0003      	movs	r3, r0
 800d426:	b29b      	uxth	r3, r3
 800d428:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800d42a:	e038      	b.n	800d49e <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	085b      	lsrs	r3, r3, #1
 800d432:	4a83      	ldr	r2, [pc, #524]	; (800d640 <UART_SetConfig+0x654>)
 800d434:	189a      	adds	r2, r3, r2
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	0019      	movs	r1, r3
 800d43c:	0010      	movs	r0, r2
 800d43e:	f7f2 fe63 	bl	8000108 <__udivsi3>
 800d442:	0003      	movs	r3, r0
 800d444:	b29b      	uxth	r3, r3
 800d446:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d448:	e029      	b.n	800d49e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800d44a:	f7fe f92b 	bl	800b6a4 <HAL_RCC_GetSysClockFreq>
 800d44e:	0003      	movs	r3, r0
 800d450:	005a      	lsls	r2, r3, #1
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	685b      	ldr	r3, [r3, #4]
 800d456:	085b      	lsrs	r3, r3, #1
 800d458:	18d2      	adds	r2, r2, r3
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	0019      	movs	r1, r3
 800d460:	0010      	movs	r0, r2
 800d462:	f7f2 fe51 	bl	8000108 <__udivsi3>
 800d466:	0003      	movs	r3, r0
 800d468:	b29b      	uxth	r3, r3
 800d46a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d46c:	e017      	b.n	800d49e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800d46e:	69fb      	ldr	r3, [r7, #28]
 800d470:	685b      	ldr	r3, [r3, #4]
 800d472:	085b      	lsrs	r3, r3, #1
 800d474:	2280      	movs	r2, #128	; 0x80
 800d476:	0252      	lsls	r2, r2, #9
 800d478:	189a      	adds	r2, r3, r2
 800d47a:	69fb      	ldr	r3, [r7, #28]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	0019      	movs	r1, r3
 800d480:	0010      	movs	r0, r2
 800d482:	f7f2 fe41 	bl	8000108 <__udivsi3>
 800d486:	0003      	movs	r3, r0
 800d488:	b29b      	uxth	r3, r3
 800d48a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d48c:	e007      	b.n	800d49e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800d48e:	2313      	movs	r3, #19
 800d490:	2218      	movs	r2, #24
 800d492:	4694      	mov	ip, r2
 800d494:	44bc      	add	ip, r7
 800d496:	4463      	add	r3, ip
 800d498:	2201      	movs	r2, #1
 800d49a:	701a      	strb	r2, [r3, #0]
        break;
 800d49c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a0:	2b0f      	cmp	r3, #15
 800d4a2:	d920      	bls.n	800d4e6 <UART_SetConfig+0x4fa>
 800d4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a6:	4a67      	ldr	r2, [pc, #412]	; (800d644 <UART_SetConfig+0x658>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d81c      	bhi.n	800d4e6 <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ae:	b29a      	uxth	r2, r3
 800d4b0:	200a      	movs	r0, #10
 800d4b2:	2418      	movs	r4, #24
 800d4b4:	193b      	adds	r3, r7, r4
 800d4b6:	181b      	adds	r3, r3, r0
 800d4b8:	210f      	movs	r1, #15
 800d4ba:	438a      	bics	r2, r1
 800d4bc:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c0:	085b      	lsrs	r3, r3, #1
 800d4c2:	b29b      	uxth	r3, r3
 800d4c4:	2207      	movs	r2, #7
 800d4c6:	4013      	ands	r3, r2
 800d4c8:	b299      	uxth	r1, r3
 800d4ca:	193b      	adds	r3, r7, r4
 800d4cc:	181b      	adds	r3, r3, r0
 800d4ce:	193a      	adds	r2, r7, r4
 800d4d0:	1812      	adds	r2, r2, r0
 800d4d2:	8812      	ldrh	r2, [r2, #0]
 800d4d4:	430a      	orrs	r2, r1
 800d4d6:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	193a      	adds	r2, r7, r4
 800d4de:	1812      	adds	r2, r2, r0
 800d4e0:	8812      	ldrh	r2, [r2, #0]
 800d4e2:	60da      	str	r2, [r3, #12]
 800d4e4:	e095      	b.n	800d612 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 800d4e6:	2313      	movs	r3, #19
 800d4e8:	2218      	movs	r2, #24
 800d4ea:	4694      	mov	ip, r2
 800d4ec:	44bc      	add	ip, r7
 800d4ee:	4463      	add	r3, ip
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	701a      	strb	r2, [r3, #0]
 800d4f4:	e08d      	b.n	800d612 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 800d4f6:	231b      	movs	r3, #27
 800d4f8:	2218      	movs	r2, #24
 800d4fa:	4694      	mov	ip, r2
 800d4fc:	44bc      	add	ip, r7
 800d4fe:	4463      	add	r3, ip
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	2b08      	cmp	r3, #8
 800d504:	d86a      	bhi.n	800d5dc <UART_SetConfig+0x5f0>
 800d506:	009a      	lsls	r2, r3, #2
 800d508:	4b4f      	ldr	r3, [pc, #316]	; (800d648 <UART_SetConfig+0x65c>)
 800d50a:	18d3      	adds	r3, r2, r3
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800d510:	f7fe f956 	bl	800b7c0 <HAL_RCC_GetPCLK1Freq>
 800d514:	0002      	movs	r2, r0
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	685b      	ldr	r3, [r3, #4]
 800d51a:	085b      	lsrs	r3, r3, #1
 800d51c:	18d2      	adds	r2, r2, r3
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	0019      	movs	r1, r3
 800d524:	0010      	movs	r0, r2
 800d526:	f7f2 fdef 	bl	8000108 <__udivsi3>
 800d52a:	0003      	movs	r3, r0
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d530:	e05c      	b.n	800d5ec <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800d532:	f7fe f95b 	bl	800b7ec <HAL_RCC_GetPCLK2Freq>
 800d536:	0002      	movs	r2, r0
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	085b      	lsrs	r3, r3, #1
 800d53e:	18d2      	adds	r2, r2, r3
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	0019      	movs	r1, r3
 800d546:	0010      	movs	r0, r2
 800d548:	f7f2 fdde 	bl	8000108 <__udivsi3>
 800d54c:	0003      	movs	r3, r0
 800d54e:	b29b      	uxth	r3, r3
 800d550:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d552:	e04b      	b.n	800d5ec <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d554:	4b38      	ldr	r3, [pc, #224]	; (800d638 <UART_SetConfig+0x64c>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2210      	movs	r2, #16
 800d55a:	4013      	ands	r3, r2
 800d55c:	d00e      	beq.n	800d57c <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800d55e:	69fb      	ldr	r3, [r7, #28]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	085b      	lsrs	r3, r3, #1
 800d564:	4a39      	ldr	r2, [pc, #228]	; (800d64c <UART_SetConfig+0x660>)
 800d566:	189a      	adds	r2, r3, r2
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	0019      	movs	r1, r3
 800d56e:	0010      	movs	r0, r2
 800d570:	f7f2 fdca 	bl	8000108 <__udivsi3>
 800d574:	0003      	movs	r3, r0
 800d576:	b29b      	uxth	r3, r3
 800d578:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800d57a:	e037      	b.n	800d5ec <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	085b      	lsrs	r3, r3, #1
 800d582:	4a33      	ldr	r2, [pc, #204]	; (800d650 <UART_SetConfig+0x664>)
 800d584:	189a      	adds	r2, r3, r2
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	0019      	movs	r1, r3
 800d58c:	0010      	movs	r0, r2
 800d58e:	f7f2 fdbb 	bl	8000108 <__udivsi3>
 800d592:	0003      	movs	r3, r0
 800d594:	b29b      	uxth	r3, r3
 800d596:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d598:	e028      	b.n	800d5ec <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800d59a:	f7fe f883 	bl	800b6a4 <HAL_RCC_GetSysClockFreq>
 800d59e:	0002      	movs	r2, r0
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	085b      	lsrs	r3, r3, #1
 800d5a6:	18d2      	adds	r2, r2, r3
 800d5a8:	69fb      	ldr	r3, [r7, #28]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	0019      	movs	r1, r3
 800d5ae:	0010      	movs	r0, r2
 800d5b0:	f7f2 fdaa 	bl	8000108 <__udivsi3>
 800d5b4:	0003      	movs	r3, r0
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5ba:	e017      	b.n	800d5ec <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800d5bc:	69fb      	ldr	r3, [r7, #28]
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	085b      	lsrs	r3, r3, #1
 800d5c2:	2280      	movs	r2, #128	; 0x80
 800d5c4:	0212      	lsls	r2, r2, #8
 800d5c6:	189a      	adds	r2, r3, r2
 800d5c8:	69fb      	ldr	r3, [r7, #28]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	0019      	movs	r1, r3
 800d5ce:	0010      	movs	r0, r2
 800d5d0:	f7f2 fd9a 	bl	8000108 <__udivsi3>
 800d5d4:	0003      	movs	r3, r0
 800d5d6:	b29b      	uxth	r3, r3
 800d5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d5da:	e007      	b.n	800d5ec <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800d5dc:	2313      	movs	r3, #19
 800d5de:	2218      	movs	r2, #24
 800d5e0:	4694      	mov	ip, r2
 800d5e2:	44bc      	add	ip, r7
 800d5e4:	4463      	add	r3, ip
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	701a      	strb	r2, [r3, #0]
        break;
 800d5ea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ee:	2b0f      	cmp	r3, #15
 800d5f0:	d908      	bls.n	800d604 <UART_SetConfig+0x618>
 800d5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f4:	4a13      	ldr	r2, [pc, #76]	; (800d644 <UART_SetConfig+0x658>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d804      	bhi.n	800d604 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d600:	60da      	str	r2, [r3, #12]
 800d602:	e006      	b.n	800d612 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 800d604:	2313      	movs	r3, #19
 800d606:	2218      	movs	r2, #24
 800d608:	4694      	mov	ip, r2
 800d60a:	44bc      	add	ip, r7
 800d60c:	4463      	add	r3, ip
 800d60e:	2201      	movs	r2, #1
 800d610:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	2200      	movs	r2, #0
 800d616:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	2200      	movs	r2, #0
 800d61c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800d61e:	2313      	movs	r3, #19
 800d620:	2218      	movs	r2, #24
 800d622:	4694      	mov	ip, r2
 800d624:	44bc      	add	ip, r7
 800d626:	4463      	add	r3, ip
 800d628:	781b      	ldrb	r3, [r3, #0]
}
 800d62a:	0018      	movs	r0, r3
 800d62c:	46bd      	mov	sp, r7
 800d62e:	b00e      	add	sp, #56	; 0x38
 800d630:	bdb0      	pop	{r4, r5, r7, pc}
 800d632:	46c0      	nop			; (mov r8, r8)
 800d634:	0801cb7c 	.word	0x0801cb7c
 800d638:	40021000 	.word	0x40021000
 800d63c:	007a1200 	.word	0x007a1200
 800d640:	01e84800 	.word	0x01e84800
 800d644:	0000ffff 	.word	0x0000ffff
 800d648:	0801cba0 	.word	0x0801cba0
 800d64c:	003d0900 	.word	0x003d0900
 800d650:	00f42400 	.word	0x00f42400

0800d654 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d660:	2201      	movs	r2, #1
 800d662:	4013      	ands	r3, r2
 800d664:	d00b      	beq.n	800d67e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	4a4a      	ldr	r2, [pc, #296]	; (800d798 <UART_AdvFeatureConfig+0x144>)
 800d66e:	4013      	ands	r3, r2
 800d670:	0019      	movs	r1, r3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	430a      	orrs	r2, r1
 800d67c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d682:	2202      	movs	r2, #2
 800d684:	4013      	ands	r3, r2
 800d686:	d00b      	beq.n	800d6a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	4a43      	ldr	r2, [pc, #268]	; (800d79c <UART_AdvFeatureConfig+0x148>)
 800d690:	4013      	ands	r3, r2
 800d692:	0019      	movs	r1, r3
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	430a      	orrs	r2, r1
 800d69e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a4:	2204      	movs	r2, #4
 800d6a6:	4013      	ands	r3, r2
 800d6a8:	d00b      	beq.n	800d6c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	685b      	ldr	r3, [r3, #4]
 800d6b0:	4a3b      	ldr	r2, [pc, #236]	; (800d7a0 <UART_AdvFeatureConfig+0x14c>)
 800d6b2:	4013      	ands	r3, r2
 800d6b4:	0019      	movs	r1, r3
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	430a      	orrs	r2, r1
 800d6c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c6:	2208      	movs	r2, #8
 800d6c8:	4013      	ands	r3, r2
 800d6ca:	d00b      	beq.n	800d6e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	4a34      	ldr	r2, [pc, #208]	; (800d7a4 <UART_AdvFeatureConfig+0x150>)
 800d6d4:	4013      	ands	r3, r2
 800d6d6:	0019      	movs	r1, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	430a      	orrs	r2, r1
 800d6e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e8:	2210      	movs	r2, #16
 800d6ea:	4013      	ands	r3, r2
 800d6ec:	d00b      	beq.n	800d706 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	689b      	ldr	r3, [r3, #8]
 800d6f4:	4a2c      	ldr	r2, [pc, #176]	; (800d7a8 <UART_AdvFeatureConfig+0x154>)
 800d6f6:	4013      	ands	r3, r2
 800d6f8:	0019      	movs	r1, r3
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	430a      	orrs	r2, r1
 800d704:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70a:	2220      	movs	r2, #32
 800d70c:	4013      	ands	r3, r2
 800d70e:	d00b      	beq.n	800d728 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	689b      	ldr	r3, [r3, #8]
 800d716:	4a25      	ldr	r2, [pc, #148]	; (800d7ac <UART_AdvFeatureConfig+0x158>)
 800d718:	4013      	ands	r3, r2
 800d71a:	0019      	movs	r1, r3
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	430a      	orrs	r2, r1
 800d726:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d72c:	2240      	movs	r2, #64	; 0x40
 800d72e:	4013      	ands	r3, r2
 800d730:	d01d      	beq.n	800d76e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	4a1d      	ldr	r2, [pc, #116]	; (800d7b0 <UART_AdvFeatureConfig+0x15c>)
 800d73a:	4013      	ands	r3, r2
 800d73c:	0019      	movs	r1, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	430a      	orrs	r2, r1
 800d748:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d74e:	2380      	movs	r3, #128	; 0x80
 800d750:	035b      	lsls	r3, r3, #13
 800d752:	429a      	cmp	r2, r3
 800d754:	d10b      	bne.n	800d76e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	4a15      	ldr	r2, [pc, #84]	; (800d7b4 <UART_AdvFeatureConfig+0x160>)
 800d75e:	4013      	ands	r3, r2
 800d760:	0019      	movs	r1, r3
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	430a      	orrs	r2, r1
 800d76c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d772:	2280      	movs	r2, #128	; 0x80
 800d774:	4013      	ands	r3, r2
 800d776:	d00b      	beq.n	800d790 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	685b      	ldr	r3, [r3, #4]
 800d77e:	4a0e      	ldr	r2, [pc, #56]	; (800d7b8 <UART_AdvFeatureConfig+0x164>)
 800d780:	4013      	ands	r3, r2
 800d782:	0019      	movs	r1, r3
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	430a      	orrs	r2, r1
 800d78e:	605a      	str	r2, [r3, #4]
  }
}
 800d790:	46c0      	nop			; (mov r8, r8)
 800d792:	46bd      	mov	sp, r7
 800d794:	b002      	add	sp, #8
 800d796:	bd80      	pop	{r7, pc}
 800d798:	fffdffff 	.word	0xfffdffff
 800d79c:	fffeffff 	.word	0xfffeffff
 800d7a0:	fffbffff 	.word	0xfffbffff
 800d7a4:	ffff7fff 	.word	0xffff7fff
 800d7a8:	ffffefff 	.word	0xffffefff
 800d7ac:	ffffdfff 	.word	0xffffdfff
 800d7b0:	ffefffff 	.word	0xffefffff
 800d7b4:	ff9fffff 	.word	0xff9fffff
 800d7b8:	fff7ffff 	.word	0xfff7ffff

0800d7bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b086      	sub	sp, #24
 800d7c0:	af02      	add	r7, sp, #8
 800d7c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800d7ca:	f7fb fa27 	bl	8008c1c <HAL_GetTick>
 800d7ce:	0003      	movs	r3, r0
 800d7d0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	2208      	movs	r2, #8
 800d7da:	4013      	ands	r3, r2
 800d7dc:	2b08      	cmp	r3, #8
 800d7de:	d10d      	bne.n	800d7fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d7e0:	68fa      	ldr	r2, [r7, #12]
 800d7e2:	2380      	movs	r3, #128	; 0x80
 800d7e4:	0399      	lsls	r1, r3, #14
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	4b16      	ldr	r3, [pc, #88]	; (800d844 <UART_CheckIdleState+0x88>)
 800d7ea:	9300      	str	r3, [sp, #0]
 800d7ec:	0013      	movs	r3, r2
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	f000 f82a 	bl	800d848 <UART_WaitOnFlagUntilTimeout>
 800d7f4:	1e03      	subs	r3, r0, #0
 800d7f6:	d001      	beq.n	800d7fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7f8:	2303      	movs	r3, #3
 800d7fa:	e01f      	b.n	800d83c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	2204      	movs	r2, #4
 800d804:	4013      	ands	r3, r2
 800d806:	2b04      	cmp	r3, #4
 800d808:	d10d      	bne.n	800d826 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d80a:	68fa      	ldr	r2, [r7, #12]
 800d80c:	2380      	movs	r3, #128	; 0x80
 800d80e:	03d9      	lsls	r1, r3, #15
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	4b0c      	ldr	r3, [pc, #48]	; (800d844 <UART_CheckIdleState+0x88>)
 800d814:	9300      	str	r3, [sp, #0]
 800d816:	0013      	movs	r3, r2
 800d818:	2200      	movs	r2, #0
 800d81a:	f000 f815 	bl	800d848 <UART_WaitOnFlagUntilTimeout>
 800d81e:	1e03      	subs	r3, r0, #0
 800d820:	d001      	beq.n	800d826 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d822:	2303      	movs	r3, #3
 800d824:	e00a      	b.n	800d83c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2220      	movs	r2, #32
 800d82a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2220      	movs	r2, #32
 800d830:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2270      	movs	r2, #112	; 0x70
 800d836:	2100      	movs	r1, #0
 800d838:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d83a:	2300      	movs	r3, #0
}
 800d83c:	0018      	movs	r0, r3
 800d83e:	46bd      	mov	sp, r7
 800d840:	b004      	add	sp, #16
 800d842:	bd80      	pop	{r7, pc}
 800d844:	01ffffff 	.word	0x01ffffff

0800d848 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b084      	sub	sp, #16
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	603b      	str	r3, [r7, #0]
 800d854:	1dfb      	adds	r3, r7, #7
 800d856:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d858:	e029      	b.n	800d8ae <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	3301      	adds	r3, #1
 800d85e:	d026      	beq.n	800d8ae <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d860:	f7fb f9dc 	bl	8008c1c <HAL_GetTick>
 800d864:	0002      	movs	r2, r0
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	1ad3      	subs	r3, r2, r3
 800d86a:	69ba      	ldr	r2, [r7, #24]
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d302      	bcc.n	800d876 <UART_WaitOnFlagUntilTimeout+0x2e>
 800d870:	69bb      	ldr	r3, [r7, #24]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d11b      	bne.n	800d8ae <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4915      	ldr	r1, [pc, #84]	; (800d8d8 <UART_WaitOnFlagUntilTimeout+0x90>)
 800d882:	400a      	ands	r2, r1
 800d884:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	689a      	ldr	r2, [r3, #8]
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2101      	movs	r1, #1
 800d892:	438a      	bics	r2, r1
 800d894:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2220      	movs	r2, #32
 800d89a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2220      	movs	r2, #32
 800d8a0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2270      	movs	r2, #112	; 0x70
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800d8aa:	2303      	movs	r3, #3
 800d8ac:	e00f      	b.n	800d8ce <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	69db      	ldr	r3, [r3, #28]
 800d8b4:	68ba      	ldr	r2, [r7, #8]
 800d8b6:	4013      	ands	r3, r2
 800d8b8:	68ba      	ldr	r2, [r7, #8]
 800d8ba:	1ad3      	subs	r3, r2, r3
 800d8bc:	425a      	negs	r2, r3
 800d8be:	4153      	adcs	r3, r2
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	001a      	movs	r2, r3
 800d8c4:	1dfb      	adds	r3, r7, #7
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d0c6      	beq.n	800d85a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d8cc:	2300      	movs	r3, #0
}
 800d8ce:	0018      	movs	r0, r3
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	b004      	add	sp, #16
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	46c0      	nop			; (mov r8, r8)
 800d8d8:	fffffe5f 	.word	0xfffffe5f

0800d8dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	21c0      	movs	r1, #192	; 0xc0
 800d8f0:	438a      	bics	r2, r1
 800d8f2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2220      	movs	r2, #32
 800d8f8:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d8fa:	46c0      	nop			; (mov r8, r8)
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	b002      	add	sp, #8
 800d900:	bd80      	pop	{r7, pc}
	...

0800d904 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	490a      	ldr	r1, [pc, #40]	; (800d940 <UART_EndRxTransfer+0x3c>)
 800d918:	400a      	ands	r2, r1
 800d91a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	689a      	ldr	r2, [r3, #8]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2101      	movs	r1, #1
 800d928:	438a      	bics	r2, r1
 800d92a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2220      	movs	r2, #32
 800d930:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2200      	movs	r2, #0
 800d936:	661a      	str	r2, [r3, #96]	; 0x60
}
 800d938:	46c0      	nop			; (mov r8, r8)
 800d93a:	46bd      	mov	sp, r7
 800d93c:	b002      	add	sp, #8
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	fffffedf 	.word	0xfffffedf

0800d944 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d950:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2220      	movs	r2, #32
 800d95a:	4013      	ands	r3, r2
 800d95c:	d114      	bne.n	800d988 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2252      	movs	r2, #82	; 0x52
 800d962:	2100      	movs	r1, #0
 800d964:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	689a      	ldr	r2, [r3, #8]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	2180      	movs	r1, #128	; 0x80
 800d972:	438a      	bics	r2, r1
 800d974:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	681a      	ldr	r2, [r3, #0]
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2140      	movs	r1, #64	; 0x40
 800d982:	430a      	orrs	r2, r1
 800d984:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d986:	e003      	b.n	800d990 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	0018      	movs	r0, r3
 800d98c:	f7f8 f8f6 	bl	8005b7c <HAL_UART_TxCpltCallback>
}
 800d990:	46c0      	nop			; (mov r8, r8)
 800d992:	46bd      	mov	sp, r7
 800d994:	b004      	add	sp, #16
 800d996:	bd80      	pop	{r7, pc}

0800d998 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9a4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	0018      	movs	r0, r3
 800d9aa:	f7ff fb0f 	bl	800cfcc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d9ae:	46c0      	nop			; (mov r8, r8)
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	b004      	add	sp, #16
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b086      	sub	sp, #24
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9c2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9ce:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	2280      	movs	r2, #128	; 0x80
 800d9d8:	4013      	ands	r3, r2
 800d9da:	2b80      	cmp	r3, #128	; 0x80
 800d9dc:	d10a      	bne.n	800d9f4 <UART_DMAError+0x3e>
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	2b21      	cmp	r3, #33	; 0x21
 800d9e2:	d107      	bne.n	800d9f4 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	2252      	movs	r2, #82	; 0x52
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	0018      	movs	r0, r3
 800d9f0:	f7ff ff74 	bl	800d8dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	689b      	ldr	r3, [r3, #8]
 800d9fa:	2240      	movs	r2, #64	; 0x40
 800d9fc:	4013      	ands	r3, r2
 800d9fe:	2b40      	cmp	r3, #64	; 0x40
 800da00:	d10a      	bne.n	800da18 <UART_DMAError+0x62>
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2b22      	cmp	r3, #34	; 0x22
 800da06:	d107      	bne.n	800da18 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	225a      	movs	r2, #90	; 0x5a
 800da0c:	2100      	movs	r1, #0
 800da0e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	0018      	movs	r0, r3
 800da14:	f7ff ff76 	bl	800d904 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800da18:	697b      	ldr	r3, [r7, #20]
 800da1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da1c:	2210      	movs	r2, #16
 800da1e:	431a      	orrs	r2, r3
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	0018      	movs	r0, r3
 800da28:	f7ff fad8 	bl	800cfdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da2c:	46c0      	nop			; (mov r8, r8)
 800da2e:	46bd      	mov	sp, r7
 800da30:	b006      	add	sp, #24
 800da32:	bd80      	pop	{r7, pc}

0800da34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	225a      	movs	r2, #90	; 0x5a
 800da46:	2100      	movs	r1, #0
 800da48:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	2252      	movs	r2, #82	; 0x52
 800da4e:	2100      	movs	r1, #0
 800da50:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	0018      	movs	r0, r3
 800da56:	f7ff fac1 	bl	800cfdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da5a:	46c0      	nop			; (mov r8, r8)
 800da5c:	46bd      	mov	sp, r7
 800da5e:	b004      	add	sp, #16
 800da60:	bd80      	pop	{r7, pc}

0800da62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800da62:	b580      	push	{r7, lr}
 800da64:	b082      	sub	sp, #8
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2140      	movs	r1, #64	; 0x40
 800da76:	438a      	bics	r2, r1
 800da78:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2220      	movs	r2, #32
 800da7e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2200      	movs	r2, #0
 800da84:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	0018      	movs	r0, r3
 800da8a:	f7f8 f877 	bl	8005b7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da8e:	46c0      	nop			; (mov r8, r8)
 800da90:	46bd      	mov	sp, r7
 800da92:	b002      	add	sp, #8
 800da94:	bd80      	pop	{r7, pc}

0800da96 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b082      	sub	sp, #8
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800da9e:	46c0      	nop			; (mov r8, r8)
 800daa0:	46bd      	mov	sp, r7
 800daa2:	b002      	add	sp, #8
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b082      	sub	sp, #8
 800daaa:	af00      	add	r7, sp, #0
 800daac:	6078      	str	r0, [r7, #4]
 800daae:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	781a      	ldrb	r2, [r3, #0]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	3301      	adds	r3, #1
 800dabc:	683a      	ldr	r2, [r7, #0]
 800dabe:	7852      	ldrb	r2, [r2, #1]
 800dac0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	3302      	adds	r3, #2
 800dac6:	683a      	ldr	r2, [r7, #0]
 800dac8:	7892      	ldrb	r2, [r2, #2]
 800daca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	3303      	adds	r3, #3
 800dad0:	683a      	ldr	r2, [r7, #0]
 800dad2:	78d2      	ldrb	r2, [r2, #3]
 800dad4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	3304      	adds	r3, #4
 800dada:	683a      	ldr	r2, [r7, #0]
 800dadc:	7912      	ldrb	r2, [r2, #4]
 800dade:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	3305      	adds	r3, #5
 800dae4:	683a      	ldr	r2, [r7, #0]
 800dae6:	7952      	ldrb	r2, [r2, #5]
 800dae8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	3306      	adds	r3, #6
 800daee:	683a      	ldr	r2, [r7, #0]
 800daf0:	7992      	ldrb	r2, [r2, #6]
 800daf2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	3307      	adds	r3, #7
 800daf8:	683a      	ldr	r2, [r7, #0]
 800dafa:	79d2      	ldrb	r2, [r2, #7]
 800dafc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	3308      	adds	r3, #8
 800db02:	683a      	ldr	r2, [r7, #0]
 800db04:	7a12      	ldrb	r2, [r2, #8]
 800db06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	3309      	adds	r3, #9
 800db0c:	683a      	ldr	r2, [r7, #0]
 800db0e:	7a52      	ldrb	r2, [r2, #9]
 800db10:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	330a      	adds	r3, #10
 800db16:	683a      	ldr	r2, [r7, #0]
 800db18:	7a92      	ldrb	r2, [r2, #10]
 800db1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	330b      	adds	r3, #11
 800db20:	683a      	ldr	r2, [r7, #0]
 800db22:	7ad2      	ldrb	r2, [r2, #11]
 800db24:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	330c      	adds	r3, #12
 800db2a:	683a      	ldr	r2, [r7, #0]
 800db2c:	7b12      	ldrb	r2, [r2, #12]
 800db2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	330d      	adds	r3, #13
 800db34:	683a      	ldr	r2, [r7, #0]
 800db36:	7b52      	ldrb	r2, [r2, #13]
 800db38:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	330e      	adds	r3, #14
 800db3e:	683a      	ldr	r2, [r7, #0]
 800db40:	7b92      	ldrb	r2, [r2, #14]
 800db42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	330f      	adds	r3, #15
 800db48:	683a      	ldr	r2, [r7, #0]
 800db4a:	7bd2      	ldrb	r2, [r2, #15]
 800db4c:	701a      	strb	r2, [r3, #0]
#endif
}
 800db4e:	46c0      	nop			; (mov r8, r8)
 800db50:	46bd      	mov	sp, r7
 800db52:	b002      	add	sp, #8
 800db54:	bd80      	pop	{r7, pc}

0800db56 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800db56:	b580      	push	{r7, lr}
 800db58:	b084      	sub	sp, #16
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	60f8      	str	r0, [r7, #12]
 800db5e:	60b9      	str	r1, [r7, #8]
 800db60:	1dfb      	adds	r3, r7, #7
 800db62:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800db64:	e007      	b.n	800db76 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800db66:	68ba      	ldr	r2, [r7, #8]
 800db68:	1c53      	adds	r3, r2, #1
 800db6a:	60bb      	str	r3, [r7, #8]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	1c59      	adds	r1, r3, #1
 800db70:	60f9      	str	r1, [r7, #12]
 800db72:	7812      	ldrb	r2, [r2, #0]
 800db74:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800db76:	1dfb      	adds	r3, r7, #7
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	1dfa      	adds	r2, r7, #7
 800db7c:	1e59      	subs	r1, r3, #1
 800db7e:	7011      	strb	r1, [r2, #0]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d1f0      	bne.n	800db66 <copy_block_nn+0x10>
}
 800db84:	46c0      	nop			; (mov r8, r8)
 800db86:	46bd      	mov	sp, r7
 800db88:	b004      	add	sp, #16
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	781a      	ldrb	r2, [r3, #0]
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	4053      	eors	r3, r2
 800dba0:	b2da      	uxtb	r2, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	3301      	adds	r3, #1
 800dbaa:	7819      	ldrb	r1, [r3, #0]
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	781a      	ldrb	r2, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	404a      	eors	r2, r1
 800dbb8:	b2d2      	uxtb	r2, r2
 800dbba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	3302      	adds	r3, #2
 800dbc0:	7819      	ldrb	r1, [r3, #0]
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	3302      	adds	r3, #2
 800dbc6:	781a      	ldrb	r2, [r3, #0]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	3302      	adds	r3, #2
 800dbcc:	404a      	eors	r2, r1
 800dbce:	b2d2      	uxtb	r2, r2
 800dbd0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	3303      	adds	r3, #3
 800dbd6:	7819      	ldrb	r1, [r3, #0]
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	3303      	adds	r3, #3
 800dbdc:	781a      	ldrb	r2, [r3, #0]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	3303      	adds	r3, #3
 800dbe2:	404a      	eors	r2, r1
 800dbe4:	b2d2      	uxtb	r2, r2
 800dbe6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	3304      	adds	r3, #4
 800dbec:	7819      	ldrb	r1, [r3, #0]
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	3304      	adds	r3, #4
 800dbf2:	781a      	ldrb	r2, [r3, #0]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	3304      	adds	r3, #4
 800dbf8:	404a      	eors	r2, r1
 800dbfa:	b2d2      	uxtb	r2, r2
 800dbfc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	3305      	adds	r3, #5
 800dc02:	7819      	ldrb	r1, [r3, #0]
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	3305      	adds	r3, #5
 800dc08:	781a      	ldrb	r2, [r3, #0]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	3305      	adds	r3, #5
 800dc0e:	404a      	eors	r2, r1
 800dc10:	b2d2      	uxtb	r2, r2
 800dc12:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	3306      	adds	r3, #6
 800dc18:	7819      	ldrb	r1, [r3, #0]
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	3306      	adds	r3, #6
 800dc1e:	781a      	ldrb	r2, [r3, #0]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	3306      	adds	r3, #6
 800dc24:	404a      	eors	r2, r1
 800dc26:	b2d2      	uxtb	r2, r2
 800dc28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	3307      	adds	r3, #7
 800dc2e:	7819      	ldrb	r1, [r3, #0]
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	3307      	adds	r3, #7
 800dc34:	781a      	ldrb	r2, [r3, #0]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	3307      	adds	r3, #7
 800dc3a:	404a      	eors	r2, r1
 800dc3c:	b2d2      	uxtb	r2, r2
 800dc3e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	3308      	adds	r3, #8
 800dc44:	7819      	ldrb	r1, [r3, #0]
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	3308      	adds	r3, #8
 800dc4a:	781a      	ldrb	r2, [r3, #0]
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	3308      	adds	r3, #8
 800dc50:	404a      	eors	r2, r1
 800dc52:	b2d2      	uxtb	r2, r2
 800dc54:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	3309      	adds	r3, #9
 800dc5a:	7819      	ldrb	r1, [r3, #0]
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	3309      	adds	r3, #9
 800dc60:	781a      	ldrb	r2, [r3, #0]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	3309      	adds	r3, #9
 800dc66:	404a      	eors	r2, r1
 800dc68:	b2d2      	uxtb	r2, r2
 800dc6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	330a      	adds	r3, #10
 800dc70:	7819      	ldrb	r1, [r3, #0]
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	330a      	adds	r3, #10
 800dc76:	781a      	ldrb	r2, [r3, #0]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	330a      	adds	r3, #10
 800dc7c:	404a      	eors	r2, r1
 800dc7e:	b2d2      	uxtb	r2, r2
 800dc80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	330b      	adds	r3, #11
 800dc86:	7819      	ldrb	r1, [r3, #0]
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	330b      	adds	r3, #11
 800dc8c:	781a      	ldrb	r2, [r3, #0]
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	330b      	adds	r3, #11
 800dc92:	404a      	eors	r2, r1
 800dc94:	b2d2      	uxtb	r2, r2
 800dc96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	330c      	adds	r3, #12
 800dc9c:	7819      	ldrb	r1, [r3, #0]
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	330c      	adds	r3, #12
 800dca2:	781a      	ldrb	r2, [r3, #0]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	330c      	adds	r3, #12
 800dca8:	404a      	eors	r2, r1
 800dcaa:	b2d2      	uxtb	r2, r2
 800dcac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	330d      	adds	r3, #13
 800dcb2:	7819      	ldrb	r1, [r3, #0]
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	330d      	adds	r3, #13
 800dcb8:	781a      	ldrb	r2, [r3, #0]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	330d      	adds	r3, #13
 800dcbe:	404a      	eors	r2, r1
 800dcc0:	b2d2      	uxtb	r2, r2
 800dcc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	330e      	adds	r3, #14
 800dcc8:	7819      	ldrb	r1, [r3, #0]
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	330e      	adds	r3, #14
 800dcce:	781a      	ldrb	r2, [r3, #0]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	330e      	adds	r3, #14
 800dcd4:	404a      	eors	r2, r1
 800dcd6:	b2d2      	uxtb	r2, r2
 800dcd8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	330f      	adds	r3, #15
 800dcde:	7819      	ldrb	r1, [r3, #0]
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	330f      	adds	r3, #15
 800dce4:	781a      	ldrb	r2, [r3, #0]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	330f      	adds	r3, #15
 800dcea:	404a      	eors	r2, r1
 800dcec:	b2d2      	uxtb	r2, r2
 800dcee:	701a      	strb	r2, [r3, #0]
#endif
}
 800dcf0:	46c0      	nop			; (mov r8, r8)
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	b002      	add	sp, #8
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60f8      	str	r0, [r7, #12]
 800dd00:	60b9      	str	r1, [r7, #8]
 800dd02:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	781a      	ldrb	r2, [r3, #0]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	4053      	eors	r3, r2
 800dd0e:	b2da      	uxtb	r2, r3
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	3301      	adds	r3, #1
 800dd18:	7819      	ldrb	r1, [r3, #0]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	781a      	ldrb	r2, [r3, #0]
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	3301      	adds	r3, #1
 800dd24:	404a      	eors	r2, r1
 800dd26:	b2d2      	uxtb	r2, r2
 800dd28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	3302      	adds	r3, #2
 800dd2e:	7819      	ldrb	r1, [r3, #0]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	3302      	adds	r3, #2
 800dd34:	781a      	ldrb	r2, [r3, #0]
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	3302      	adds	r3, #2
 800dd3a:	404a      	eors	r2, r1
 800dd3c:	b2d2      	uxtb	r2, r2
 800dd3e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	3303      	adds	r3, #3
 800dd44:	7819      	ldrb	r1, [r3, #0]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	3303      	adds	r3, #3
 800dd4a:	781a      	ldrb	r2, [r3, #0]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	3303      	adds	r3, #3
 800dd50:	404a      	eors	r2, r1
 800dd52:	b2d2      	uxtb	r2, r2
 800dd54:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	3304      	adds	r3, #4
 800dd5a:	7819      	ldrb	r1, [r3, #0]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	3304      	adds	r3, #4
 800dd60:	781a      	ldrb	r2, [r3, #0]
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	3304      	adds	r3, #4
 800dd66:	404a      	eors	r2, r1
 800dd68:	b2d2      	uxtb	r2, r2
 800dd6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	3305      	adds	r3, #5
 800dd70:	7819      	ldrb	r1, [r3, #0]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	3305      	adds	r3, #5
 800dd76:	781a      	ldrb	r2, [r3, #0]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	3305      	adds	r3, #5
 800dd7c:	404a      	eors	r2, r1
 800dd7e:	b2d2      	uxtb	r2, r2
 800dd80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	3306      	adds	r3, #6
 800dd86:	7819      	ldrb	r1, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	3306      	adds	r3, #6
 800dd8c:	781a      	ldrb	r2, [r3, #0]
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	3306      	adds	r3, #6
 800dd92:	404a      	eors	r2, r1
 800dd94:	b2d2      	uxtb	r2, r2
 800dd96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	3307      	adds	r3, #7
 800dd9c:	7819      	ldrb	r1, [r3, #0]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	3307      	adds	r3, #7
 800dda2:	781a      	ldrb	r2, [r3, #0]
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	3307      	adds	r3, #7
 800dda8:	404a      	eors	r2, r1
 800ddaa:	b2d2      	uxtb	r2, r2
 800ddac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	3308      	adds	r3, #8
 800ddb2:	7819      	ldrb	r1, [r3, #0]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	3308      	adds	r3, #8
 800ddb8:	781a      	ldrb	r2, [r3, #0]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	3308      	adds	r3, #8
 800ddbe:	404a      	eors	r2, r1
 800ddc0:	b2d2      	uxtb	r2, r2
 800ddc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	3309      	adds	r3, #9
 800ddc8:	7819      	ldrb	r1, [r3, #0]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	3309      	adds	r3, #9
 800ddce:	781a      	ldrb	r2, [r3, #0]
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	3309      	adds	r3, #9
 800ddd4:	404a      	eors	r2, r1
 800ddd6:	b2d2      	uxtb	r2, r2
 800ddd8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	330a      	adds	r3, #10
 800ddde:	7819      	ldrb	r1, [r3, #0]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	330a      	adds	r3, #10
 800dde4:	781a      	ldrb	r2, [r3, #0]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	330a      	adds	r3, #10
 800ddea:	404a      	eors	r2, r1
 800ddec:	b2d2      	uxtb	r2, r2
 800ddee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	330b      	adds	r3, #11
 800ddf4:	7819      	ldrb	r1, [r3, #0]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	330b      	adds	r3, #11
 800ddfa:	781a      	ldrb	r2, [r3, #0]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	330b      	adds	r3, #11
 800de00:	404a      	eors	r2, r1
 800de02:	b2d2      	uxtb	r2, r2
 800de04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	330c      	adds	r3, #12
 800de0a:	7819      	ldrb	r1, [r3, #0]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	330c      	adds	r3, #12
 800de10:	781a      	ldrb	r2, [r3, #0]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	330c      	adds	r3, #12
 800de16:	404a      	eors	r2, r1
 800de18:	b2d2      	uxtb	r2, r2
 800de1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	330d      	adds	r3, #13
 800de20:	7819      	ldrb	r1, [r3, #0]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	330d      	adds	r3, #13
 800de26:	781a      	ldrb	r2, [r3, #0]
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	330d      	adds	r3, #13
 800de2c:	404a      	eors	r2, r1
 800de2e:	b2d2      	uxtb	r2, r2
 800de30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	330e      	adds	r3, #14
 800de36:	7819      	ldrb	r1, [r3, #0]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	330e      	adds	r3, #14
 800de3c:	781a      	ldrb	r2, [r3, #0]
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	330e      	adds	r3, #14
 800de42:	404a      	eors	r2, r1
 800de44:	b2d2      	uxtb	r2, r2
 800de46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	330f      	adds	r3, #15
 800de4c:	7819      	ldrb	r1, [r3, #0]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	330f      	adds	r3, #15
 800de52:	781a      	ldrb	r2, [r3, #0]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	330f      	adds	r3, #15
 800de58:	404a      	eors	r2, r1
 800de5a:	b2d2      	uxtb	r2, r2
 800de5c:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800de5e:	46c0      	nop			; (mov r8, r8)
 800de60:	46bd      	mov	sp, r7
 800de62:	b004      	add	sp, #16
 800de64:	bd80      	pop	{r7, pc}

0800de66 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800de66:	b580      	push	{r7, lr}
 800de68:	b082      	sub	sp, #8
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
 800de6e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800de70:	683a      	ldr	r2, [r7, #0]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	0011      	movs	r1, r2
 800de76:	0018      	movs	r0, r3
 800de78:	f7ff fe88 	bl	800db8c <xor_block>
}
 800de7c:	46c0      	nop			; (mov r8, r8)
 800de7e:	46bd      	mov	sp, r7
 800de80:	b002      	add	sp, #8
 800de82:	bd80      	pop	{r7, pc}

0800de84 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	001a      	movs	r2, r3
 800de92:	4b4c      	ldr	r3, [pc, #304]	; (800dfc4 <shift_sub_rows+0x140>)
 800de94:	5c9a      	ldrb	r2, [r3, r2]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	701a      	strb	r2, [r3, #0]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	3304      	adds	r3, #4
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	0019      	movs	r1, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	3304      	adds	r3, #4
 800dea6:	4a47      	ldr	r2, [pc, #284]	; (800dfc4 <shift_sub_rows+0x140>)
 800dea8:	5c52      	ldrb	r2, [r2, r1]
 800deaa:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	3308      	adds	r3, #8
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	0019      	movs	r1, r3
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	3308      	adds	r3, #8
 800deb8:	4a42      	ldr	r2, [pc, #264]	; (800dfc4 <shift_sub_rows+0x140>)
 800deba:	5c52      	ldrb	r2, [r2, r1]
 800debc:	701a      	strb	r2, [r3, #0]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	330c      	adds	r3, #12
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	0019      	movs	r1, r3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	330c      	adds	r3, #12
 800deca:	4a3e      	ldr	r2, [pc, #248]	; (800dfc4 <shift_sub_rows+0x140>)
 800decc:	5c52      	ldrb	r2, [r2, r1]
 800dece:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800ded0:	200f      	movs	r0, #15
 800ded2:	183b      	adds	r3, r7, r0
 800ded4:	687a      	ldr	r2, [r7, #4]
 800ded6:	7852      	ldrb	r2, [r2, #1]
 800ded8:	701a      	strb	r2, [r3, #0]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	3305      	adds	r3, #5
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	0019      	movs	r1, r3
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	3301      	adds	r3, #1
 800dee6:	4a37      	ldr	r2, [pc, #220]	; (800dfc4 <shift_sub_rows+0x140>)
 800dee8:	5c52      	ldrb	r2, [r2, r1]
 800deea:	701a      	strb	r2, [r3, #0]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	3309      	adds	r3, #9
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	0019      	movs	r1, r3
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	3305      	adds	r3, #5
 800def8:	4a32      	ldr	r2, [pc, #200]	; (800dfc4 <shift_sub_rows+0x140>)
 800defa:	5c52      	ldrb	r2, [r2, r1]
 800defc:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	330d      	adds	r3, #13
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	0019      	movs	r1, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	3309      	adds	r3, #9
 800df0a:	4a2e      	ldr	r2, [pc, #184]	; (800dfc4 <shift_sub_rows+0x140>)
 800df0c:	5c52      	ldrb	r2, [r2, r1]
 800df0e:	701a      	strb	r2, [r3, #0]
 800df10:	183b      	adds	r3, r7, r0
 800df12:	781a      	ldrb	r2, [r3, #0]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	330d      	adds	r3, #13
 800df18:	492a      	ldr	r1, [pc, #168]	; (800dfc4 <shift_sub_rows+0x140>)
 800df1a:	5c8a      	ldrb	r2, [r1, r2]
 800df1c:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800df1e:	183b      	adds	r3, r7, r0
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	7892      	ldrb	r2, [r2, #2]
 800df24:	701a      	strb	r2, [r3, #0]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	330a      	adds	r3, #10
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	0019      	movs	r1, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	3302      	adds	r3, #2
 800df32:	4a24      	ldr	r2, [pc, #144]	; (800dfc4 <shift_sub_rows+0x140>)
 800df34:	5c52      	ldrb	r2, [r2, r1]
 800df36:	701a      	strb	r2, [r3, #0]
 800df38:	183b      	adds	r3, r7, r0
 800df3a:	781a      	ldrb	r2, [r3, #0]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	330a      	adds	r3, #10
 800df40:	4920      	ldr	r1, [pc, #128]	; (800dfc4 <shift_sub_rows+0x140>)
 800df42:	5c8a      	ldrb	r2, [r1, r2]
 800df44:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800df46:	183b      	adds	r3, r7, r0
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	7992      	ldrb	r2, [r2, #6]
 800df4c:	701a      	strb	r2, [r3, #0]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	330e      	adds	r3, #14
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	0019      	movs	r1, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	3306      	adds	r3, #6
 800df5a:	4a1a      	ldr	r2, [pc, #104]	; (800dfc4 <shift_sub_rows+0x140>)
 800df5c:	5c52      	ldrb	r2, [r2, r1]
 800df5e:	701a      	strb	r2, [r3, #0]
 800df60:	183b      	adds	r3, r7, r0
 800df62:	781a      	ldrb	r2, [r3, #0]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	330e      	adds	r3, #14
 800df68:	4916      	ldr	r1, [pc, #88]	; (800dfc4 <shift_sub_rows+0x140>)
 800df6a:	5c8a      	ldrb	r2, [r1, r2]
 800df6c:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800df6e:	183b      	adds	r3, r7, r0
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	7bd2      	ldrb	r2, [r2, #15]
 800df74:	701a      	strb	r2, [r3, #0]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	330b      	adds	r3, #11
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	0019      	movs	r1, r3
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	330f      	adds	r3, #15
 800df82:	4a10      	ldr	r2, [pc, #64]	; (800dfc4 <shift_sub_rows+0x140>)
 800df84:	5c52      	ldrb	r2, [r2, r1]
 800df86:	701a      	strb	r2, [r3, #0]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	3307      	adds	r3, #7
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	0019      	movs	r1, r3
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	330b      	adds	r3, #11
 800df94:	4a0b      	ldr	r2, [pc, #44]	; (800dfc4 <shift_sub_rows+0x140>)
 800df96:	5c52      	ldrb	r2, [r2, r1]
 800df98:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	3303      	adds	r3, #3
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	0019      	movs	r1, r3
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	3307      	adds	r3, #7
 800dfa6:	4a07      	ldr	r2, [pc, #28]	; (800dfc4 <shift_sub_rows+0x140>)
 800dfa8:	5c52      	ldrb	r2, [r2, r1]
 800dfaa:	701a      	strb	r2, [r3, #0]
 800dfac:	183b      	adds	r3, r7, r0
 800dfae:	781a      	ldrb	r2, [r3, #0]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	3303      	adds	r3, #3
 800dfb4:	4903      	ldr	r1, [pc, #12]	; (800dfc4 <shift_sub_rows+0x140>)
 800dfb6:	5c8a      	ldrb	r2, [r1, r2]
 800dfb8:	701a      	strb	r2, [r3, #0]
}
 800dfba:	46c0      	nop			; (mov r8, r8)
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	b004      	add	sp, #16
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	46c0      	nop			; (mov r8, r8)
 800dfc4:	0801cbc4 	.word	0x0801cbc4

0800dfc8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800dfc8:	b590      	push	{r4, r7, lr}
 800dfca:	b087      	sub	sp, #28
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800dfd0:	687a      	ldr	r2, [r7, #4]
 800dfd2:	2008      	movs	r0, #8
 800dfd4:	0004      	movs	r4, r0
 800dfd6:	183b      	adds	r3, r7, r0
 800dfd8:	0011      	movs	r1, r2
 800dfda:	0018      	movs	r0, r3
 800dfdc:	f7ff fd63 	bl	800daa6 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800dfe0:	0020      	movs	r0, r4
 800dfe2:	183b      	adds	r3, r7, r0
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	001a      	movs	r2, r3
 800dfe8:	4be7      	ldr	r3, [pc, #924]	; (800e388 <mix_sub_columns+0x3c0>)
 800dfea:	5c9a      	ldrb	r2, [r3, r2]
 800dfec:	183b      	adds	r3, r7, r0
 800dfee:	795b      	ldrb	r3, [r3, #5]
 800dff0:	0019      	movs	r1, r3
 800dff2:	4be6      	ldr	r3, [pc, #920]	; (800e38c <mix_sub_columns+0x3c4>)
 800dff4:	5c5b      	ldrb	r3, [r3, r1]
 800dff6:	4053      	eors	r3, r2
 800dff8:	b2da      	uxtb	r2, r3
 800dffa:	183b      	adds	r3, r7, r0
 800dffc:	7a9b      	ldrb	r3, [r3, #10]
 800dffe:	0019      	movs	r1, r3
 800e000:	4be3      	ldr	r3, [pc, #908]	; (800e390 <mix_sub_columns+0x3c8>)
 800e002:	5c5b      	ldrb	r3, [r3, r1]
 800e004:	4053      	eors	r3, r2
 800e006:	b2da      	uxtb	r2, r3
 800e008:	183b      	adds	r3, r7, r0
 800e00a:	7bdb      	ldrb	r3, [r3, #15]
 800e00c:	0019      	movs	r1, r3
 800e00e:	4be0      	ldr	r3, [pc, #896]	; (800e390 <mix_sub_columns+0x3c8>)
 800e010:	5c5b      	ldrb	r3, [r3, r1]
 800e012:	4053      	eors	r3, r2
 800e014:	b2da      	uxtb	r2, r3
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e01a:	183b      	adds	r3, r7, r0
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	001a      	movs	r2, r3
 800e020:	4bdb      	ldr	r3, [pc, #876]	; (800e390 <mix_sub_columns+0x3c8>)
 800e022:	5c9a      	ldrb	r2, [r3, r2]
 800e024:	183b      	adds	r3, r7, r0
 800e026:	795b      	ldrb	r3, [r3, #5]
 800e028:	0019      	movs	r1, r3
 800e02a:	4bd7      	ldr	r3, [pc, #860]	; (800e388 <mix_sub_columns+0x3c0>)
 800e02c:	5c5b      	ldrb	r3, [r3, r1]
 800e02e:	4053      	eors	r3, r2
 800e030:	b2da      	uxtb	r2, r3
 800e032:	183b      	adds	r3, r7, r0
 800e034:	7a9b      	ldrb	r3, [r3, #10]
 800e036:	0019      	movs	r1, r3
 800e038:	4bd4      	ldr	r3, [pc, #848]	; (800e38c <mix_sub_columns+0x3c4>)
 800e03a:	5c5b      	ldrb	r3, [r3, r1]
 800e03c:	4053      	eors	r3, r2
 800e03e:	b2d9      	uxtb	r1, r3
 800e040:	183b      	adds	r3, r7, r0
 800e042:	7bdb      	ldrb	r3, [r3, #15]
 800e044:	001a      	movs	r2, r3
 800e046:	4bd2      	ldr	r3, [pc, #840]	; (800e390 <mix_sub_columns+0x3c8>)
 800e048:	5c9a      	ldrb	r2, [r3, r2]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	3301      	adds	r3, #1
 800e04e:	404a      	eors	r2, r1
 800e050:	b2d2      	uxtb	r2, r2
 800e052:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e054:	183b      	adds	r3, r7, r0
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	001a      	movs	r2, r3
 800e05a:	4bcd      	ldr	r3, [pc, #820]	; (800e390 <mix_sub_columns+0x3c8>)
 800e05c:	5c9a      	ldrb	r2, [r3, r2]
 800e05e:	183b      	adds	r3, r7, r0
 800e060:	795b      	ldrb	r3, [r3, #5]
 800e062:	0019      	movs	r1, r3
 800e064:	4bca      	ldr	r3, [pc, #808]	; (800e390 <mix_sub_columns+0x3c8>)
 800e066:	5c5b      	ldrb	r3, [r3, r1]
 800e068:	4053      	eors	r3, r2
 800e06a:	b2da      	uxtb	r2, r3
 800e06c:	183b      	adds	r3, r7, r0
 800e06e:	7a9b      	ldrb	r3, [r3, #10]
 800e070:	0019      	movs	r1, r3
 800e072:	4bc5      	ldr	r3, [pc, #788]	; (800e388 <mix_sub_columns+0x3c0>)
 800e074:	5c5b      	ldrb	r3, [r3, r1]
 800e076:	4053      	eors	r3, r2
 800e078:	b2d9      	uxtb	r1, r3
 800e07a:	183b      	adds	r3, r7, r0
 800e07c:	7bdb      	ldrb	r3, [r3, #15]
 800e07e:	001a      	movs	r2, r3
 800e080:	4bc2      	ldr	r3, [pc, #776]	; (800e38c <mix_sub_columns+0x3c4>)
 800e082:	5c9a      	ldrb	r2, [r3, r2]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	3302      	adds	r3, #2
 800e088:	404a      	eors	r2, r1
 800e08a:	b2d2      	uxtb	r2, r2
 800e08c:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e08e:	183b      	adds	r3, r7, r0
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	001a      	movs	r2, r3
 800e094:	4bbd      	ldr	r3, [pc, #756]	; (800e38c <mix_sub_columns+0x3c4>)
 800e096:	5c9a      	ldrb	r2, [r3, r2]
 800e098:	183b      	adds	r3, r7, r0
 800e09a:	795b      	ldrb	r3, [r3, #5]
 800e09c:	0019      	movs	r1, r3
 800e09e:	4bbc      	ldr	r3, [pc, #752]	; (800e390 <mix_sub_columns+0x3c8>)
 800e0a0:	5c5b      	ldrb	r3, [r3, r1]
 800e0a2:	4053      	eors	r3, r2
 800e0a4:	b2da      	uxtb	r2, r3
 800e0a6:	183b      	adds	r3, r7, r0
 800e0a8:	7a9b      	ldrb	r3, [r3, #10]
 800e0aa:	0019      	movs	r1, r3
 800e0ac:	4bb8      	ldr	r3, [pc, #736]	; (800e390 <mix_sub_columns+0x3c8>)
 800e0ae:	5c5b      	ldrb	r3, [r3, r1]
 800e0b0:	4053      	eors	r3, r2
 800e0b2:	b2d9      	uxtb	r1, r3
 800e0b4:	183b      	adds	r3, r7, r0
 800e0b6:	7bdb      	ldrb	r3, [r3, #15]
 800e0b8:	001a      	movs	r2, r3
 800e0ba:	4bb3      	ldr	r3, [pc, #716]	; (800e388 <mix_sub_columns+0x3c0>)
 800e0bc:	5c9a      	ldrb	r2, [r3, r2]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	3303      	adds	r3, #3
 800e0c2:	404a      	eors	r2, r1
 800e0c4:	b2d2      	uxtb	r2, r2
 800e0c6:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e0c8:	183b      	adds	r3, r7, r0
 800e0ca:	791b      	ldrb	r3, [r3, #4]
 800e0cc:	001a      	movs	r2, r3
 800e0ce:	4bae      	ldr	r3, [pc, #696]	; (800e388 <mix_sub_columns+0x3c0>)
 800e0d0:	5c9a      	ldrb	r2, [r3, r2]
 800e0d2:	183b      	adds	r3, r7, r0
 800e0d4:	7a5b      	ldrb	r3, [r3, #9]
 800e0d6:	0019      	movs	r1, r3
 800e0d8:	4bac      	ldr	r3, [pc, #688]	; (800e38c <mix_sub_columns+0x3c4>)
 800e0da:	5c5b      	ldrb	r3, [r3, r1]
 800e0dc:	4053      	eors	r3, r2
 800e0de:	b2da      	uxtb	r2, r3
 800e0e0:	183b      	adds	r3, r7, r0
 800e0e2:	7b9b      	ldrb	r3, [r3, #14]
 800e0e4:	0019      	movs	r1, r3
 800e0e6:	4baa      	ldr	r3, [pc, #680]	; (800e390 <mix_sub_columns+0x3c8>)
 800e0e8:	5c5b      	ldrb	r3, [r3, r1]
 800e0ea:	4053      	eors	r3, r2
 800e0ec:	b2d9      	uxtb	r1, r3
 800e0ee:	183b      	adds	r3, r7, r0
 800e0f0:	78db      	ldrb	r3, [r3, #3]
 800e0f2:	001a      	movs	r2, r3
 800e0f4:	4ba6      	ldr	r3, [pc, #664]	; (800e390 <mix_sub_columns+0x3c8>)
 800e0f6:	5c9a      	ldrb	r2, [r3, r2]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	3304      	adds	r3, #4
 800e0fc:	404a      	eors	r2, r1
 800e0fe:	b2d2      	uxtb	r2, r2
 800e100:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e102:	183b      	adds	r3, r7, r0
 800e104:	791b      	ldrb	r3, [r3, #4]
 800e106:	001a      	movs	r2, r3
 800e108:	4ba1      	ldr	r3, [pc, #644]	; (800e390 <mix_sub_columns+0x3c8>)
 800e10a:	5c9a      	ldrb	r2, [r3, r2]
 800e10c:	183b      	adds	r3, r7, r0
 800e10e:	7a5b      	ldrb	r3, [r3, #9]
 800e110:	0019      	movs	r1, r3
 800e112:	4b9d      	ldr	r3, [pc, #628]	; (800e388 <mix_sub_columns+0x3c0>)
 800e114:	5c5b      	ldrb	r3, [r3, r1]
 800e116:	4053      	eors	r3, r2
 800e118:	b2da      	uxtb	r2, r3
 800e11a:	183b      	adds	r3, r7, r0
 800e11c:	7b9b      	ldrb	r3, [r3, #14]
 800e11e:	0019      	movs	r1, r3
 800e120:	4b9a      	ldr	r3, [pc, #616]	; (800e38c <mix_sub_columns+0x3c4>)
 800e122:	5c5b      	ldrb	r3, [r3, r1]
 800e124:	4053      	eors	r3, r2
 800e126:	b2d9      	uxtb	r1, r3
 800e128:	183b      	adds	r3, r7, r0
 800e12a:	78db      	ldrb	r3, [r3, #3]
 800e12c:	001a      	movs	r2, r3
 800e12e:	4b98      	ldr	r3, [pc, #608]	; (800e390 <mix_sub_columns+0x3c8>)
 800e130:	5c9a      	ldrb	r2, [r3, r2]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	3305      	adds	r3, #5
 800e136:	404a      	eors	r2, r1
 800e138:	b2d2      	uxtb	r2, r2
 800e13a:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e13c:	183b      	adds	r3, r7, r0
 800e13e:	791b      	ldrb	r3, [r3, #4]
 800e140:	001a      	movs	r2, r3
 800e142:	4b93      	ldr	r3, [pc, #588]	; (800e390 <mix_sub_columns+0x3c8>)
 800e144:	5c9a      	ldrb	r2, [r3, r2]
 800e146:	183b      	adds	r3, r7, r0
 800e148:	7a5b      	ldrb	r3, [r3, #9]
 800e14a:	0019      	movs	r1, r3
 800e14c:	4b90      	ldr	r3, [pc, #576]	; (800e390 <mix_sub_columns+0x3c8>)
 800e14e:	5c5b      	ldrb	r3, [r3, r1]
 800e150:	4053      	eors	r3, r2
 800e152:	b2da      	uxtb	r2, r3
 800e154:	183b      	adds	r3, r7, r0
 800e156:	7b9b      	ldrb	r3, [r3, #14]
 800e158:	0019      	movs	r1, r3
 800e15a:	4b8b      	ldr	r3, [pc, #556]	; (800e388 <mix_sub_columns+0x3c0>)
 800e15c:	5c5b      	ldrb	r3, [r3, r1]
 800e15e:	4053      	eors	r3, r2
 800e160:	b2d9      	uxtb	r1, r3
 800e162:	183b      	adds	r3, r7, r0
 800e164:	78db      	ldrb	r3, [r3, #3]
 800e166:	001a      	movs	r2, r3
 800e168:	4b88      	ldr	r3, [pc, #544]	; (800e38c <mix_sub_columns+0x3c4>)
 800e16a:	5c9a      	ldrb	r2, [r3, r2]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	3306      	adds	r3, #6
 800e170:	404a      	eors	r2, r1
 800e172:	b2d2      	uxtb	r2, r2
 800e174:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e176:	183b      	adds	r3, r7, r0
 800e178:	791b      	ldrb	r3, [r3, #4]
 800e17a:	001a      	movs	r2, r3
 800e17c:	4b83      	ldr	r3, [pc, #524]	; (800e38c <mix_sub_columns+0x3c4>)
 800e17e:	5c9a      	ldrb	r2, [r3, r2]
 800e180:	183b      	adds	r3, r7, r0
 800e182:	7a5b      	ldrb	r3, [r3, #9]
 800e184:	0019      	movs	r1, r3
 800e186:	4b82      	ldr	r3, [pc, #520]	; (800e390 <mix_sub_columns+0x3c8>)
 800e188:	5c5b      	ldrb	r3, [r3, r1]
 800e18a:	4053      	eors	r3, r2
 800e18c:	b2da      	uxtb	r2, r3
 800e18e:	183b      	adds	r3, r7, r0
 800e190:	7b9b      	ldrb	r3, [r3, #14]
 800e192:	0019      	movs	r1, r3
 800e194:	4b7e      	ldr	r3, [pc, #504]	; (800e390 <mix_sub_columns+0x3c8>)
 800e196:	5c5b      	ldrb	r3, [r3, r1]
 800e198:	4053      	eors	r3, r2
 800e19a:	b2d9      	uxtb	r1, r3
 800e19c:	183b      	adds	r3, r7, r0
 800e19e:	78db      	ldrb	r3, [r3, #3]
 800e1a0:	001a      	movs	r2, r3
 800e1a2:	4b79      	ldr	r3, [pc, #484]	; (800e388 <mix_sub_columns+0x3c0>)
 800e1a4:	5c9a      	ldrb	r2, [r3, r2]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	3307      	adds	r3, #7
 800e1aa:	404a      	eors	r2, r1
 800e1ac:	b2d2      	uxtb	r2, r2
 800e1ae:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e1b0:	183b      	adds	r3, r7, r0
 800e1b2:	7a1b      	ldrb	r3, [r3, #8]
 800e1b4:	001a      	movs	r2, r3
 800e1b6:	4b74      	ldr	r3, [pc, #464]	; (800e388 <mix_sub_columns+0x3c0>)
 800e1b8:	5c9a      	ldrb	r2, [r3, r2]
 800e1ba:	183b      	adds	r3, r7, r0
 800e1bc:	7b5b      	ldrb	r3, [r3, #13]
 800e1be:	0019      	movs	r1, r3
 800e1c0:	4b72      	ldr	r3, [pc, #456]	; (800e38c <mix_sub_columns+0x3c4>)
 800e1c2:	5c5b      	ldrb	r3, [r3, r1]
 800e1c4:	4053      	eors	r3, r2
 800e1c6:	b2da      	uxtb	r2, r3
 800e1c8:	183b      	adds	r3, r7, r0
 800e1ca:	789b      	ldrb	r3, [r3, #2]
 800e1cc:	0019      	movs	r1, r3
 800e1ce:	4b70      	ldr	r3, [pc, #448]	; (800e390 <mix_sub_columns+0x3c8>)
 800e1d0:	5c5b      	ldrb	r3, [r3, r1]
 800e1d2:	4053      	eors	r3, r2
 800e1d4:	b2d9      	uxtb	r1, r3
 800e1d6:	183b      	adds	r3, r7, r0
 800e1d8:	79db      	ldrb	r3, [r3, #7]
 800e1da:	001a      	movs	r2, r3
 800e1dc:	4b6c      	ldr	r3, [pc, #432]	; (800e390 <mix_sub_columns+0x3c8>)
 800e1de:	5c9a      	ldrb	r2, [r3, r2]
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	3308      	adds	r3, #8
 800e1e4:	404a      	eors	r2, r1
 800e1e6:	b2d2      	uxtb	r2, r2
 800e1e8:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e1ea:	183b      	adds	r3, r7, r0
 800e1ec:	7a1b      	ldrb	r3, [r3, #8]
 800e1ee:	001a      	movs	r2, r3
 800e1f0:	4b67      	ldr	r3, [pc, #412]	; (800e390 <mix_sub_columns+0x3c8>)
 800e1f2:	5c9a      	ldrb	r2, [r3, r2]
 800e1f4:	183b      	adds	r3, r7, r0
 800e1f6:	7b5b      	ldrb	r3, [r3, #13]
 800e1f8:	0019      	movs	r1, r3
 800e1fa:	4b63      	ldr	r3, [pc, #396]	; (800e388 <mix_sub_columns+0x3c0>)
 800e1fc:	5c5b      	ldrb	r3, [r3, r1]
 800e1fe:	4053      	eors	r3, r2
 800e200:	b2da      	uxtb	r2, r3
 800e202:	183b      	adds	r3, r7, r0
 800e204:	789b      	ldrb	r3, [r3, #2]
 800e206:	0019      	movs	r1, r3
 800e208:	4b60      	ldr	r3, [pc, #384]	; (800e38c <mix_sub_columns+0x3c4>)
 800e20a:	5c5b      	ldrb	r3, [r3, r1]
 800e20c:	4053      	eors	r3, r2
 800e20e:	b2d9      	uxtb	r1, r3
 800e210:	183b      	adds	r3, r7, r0
 800e212:	79db      	ldrb	r3, [r3, #7]
 800e214:	001a      	movs	r2, r3
 800e216:	4b5e      	ldr	r3, [pc, #376]	; (800e390 <mix_sub_columns+0x3c8>)
 800e218:	5c9a      	ldrb	r2, [r3, r2]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	3309      	adds	r3, #9
 800e21e:	404a      	eors	r2, r1
 800e220:	b2d2      	uxtb	r2, r2
 800e222:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e224:	183b      	adds	r3, r7, r0
 800e226:	7a1b      	ldrb	r3, [r3, #8]
 800e228:	001a      	movs	r2, r3
 800e22a:	4b59      	ldr	r3, [pc, #356]	; (800e390 <mix_sub_columns+0x3c8>)
 800e22c:	5c9a      	ldrb	r2, [r3, r2]
 800e22e:	183b      	adds	r3, r7, r0
 800e230:	7b5b      	ldrb	r3, [r3, #13]
 800e232:	0019      	movs	r1, r3
 800e234:	4b56      	ldr	r3, [pc, #344]	; (800e390 <mix_sub_columns+0x3c8>)
 800e236:	5c5b      	ldrb	r3, [r3, r1]
 800e238:	4053      	eors	r3, r2
 800e23a:	b2da      	uxtb	r2, r3
 800e23c:	183b      	adds	r3, r7, r0
 800e23e:	789b      	ldrb	r3, [r3, #2]
 800e240:	0019      	movs	r1, r3
 800e242:	4b51      	ldr	r3, [pc, #324]	; (800e388 <mix_sub_columns+0x3c0>)
 800e244:	5c5b      	ldrb	r3, [r3, r1]
 800e246:	4053      	eors	r3, r2
 800e248:	b2d9      	uxtb	r1, r3
 800e24a:	183b      	adds	r3, r7, r0
 800e24c:	79db      	ldrb	r3, [r3, #7]
 800e24e:	001a      	movs	r2, r3
 800e250:	4b4e      	ldr	r3, [pc, #312]	; (800e38c <mix_sub_columns+0x3c4>)
 800e252:	5c9a      	ldrb	r2, [r3, r2]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	330a      	adds	r3, #10
 800e258:	404a      	eors	r2, r1
 800e25a:	b2d2      	uxtb	r2, r2
 800e25c:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e25e:	183b      	adds	r3, r7, r0
 800e260:	7a1b      	ldrb	r3, [r3, #8]
 800e262:	001a      	movs	r2, r3
 800e264:	4b49      	ldr	r3, [pc, #292]	; (800e38c <mix_sub_columns+0x3c4>)
 800e266:	5c9a      	ldrb	r2, [r3, r2]
 800e268:	183b      	adds	r3, r7, r0
 800e26a:	7b5b      	ldrb	r3, [r3, #13]
 800e26c:	0019      	movs	r1, r3
 800e26e:	4b48      	ldr	r3, [pc, #288]	; (800e390 <mix_sub_columns+0x3c8>)
 800e270:	5c5b      	ldrb	r3, [r3, r1]
 800e272:	4053      	eors	r3, r2
 800e274:	b2da      	uxtb	r2, r3
 800e276:	183b      	adds	r3, r7, r0
 800e278:	789b      	ldrb	r3, [r3, #2]
 800e27a:	0019      	movs	r1, r3
 800e27c:	4b44      	ldr	r3, [pc, #272]	; (800e390 <mix_sub_columns+0x3c8>)
 800e27e:	5c5b      	ldrb	r3, [r3, r1]
 800e280:	4053      	eors	r3, r2
 800e282:	b2d9      	uxtb	r1, r3
 800e284:	183b      	adds	r3, r7, r0
 800e286:	79db      	ldrb	r3, [r3, #7]
 800e288:	001a      	movs	r2, r3
 800e28a:	4b3f      	ldr	r3, [pc, #252]	; (800e388 <mix_sub_columns+0x3c0>)
 800e28c:	5c9a      	ldrb	r2, [r3, r2]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	330b      	adds	r3, #11
 800e292:	404a      	eors	r2, r1
 800e294:	b2d2      	uxtb	r2, r2
 800e296:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e298:	183b      	adds	r3, r7, r0
 800e29a:	7b1b      	ldrb	r3, [r3, #12]
 800e29c:	001a      	movs	r2, r3
 800e29e:	4b3a      	ldr	r3, [pc, #232]	; (800e388 <mix_sub_columns+0x3c0>)
 800e2a0:	5c9a      	ldrb	r2, [r3, r2]
 800e2a2:	183b      	adds	r3, r7, r0
 800e2a4:	785b      	ldrb	r3, [r3, #1]
 800e2a6:	0019      	movs	r1, r3
 800e2a8:	4b38      	ldr	r3, [pc, #224]	; (800e38c <mix_sub_columns+0x3c4>)
 800e2aa:	5c5b      	ldrb	r3, [r3, r1]
 800e2ac:	4053      	eors	r3, r2
 800e2ae:	b2da      	uxtb	r2, r3
 800e2b0:	183b      	adds	r3, r7, r0
 800e2b2:	799b      	ldrb	r3, [r3, #6]
 800e2b4:	0019      	movs	r1, r3
 800e2b6:	4b36      	ldr	r3, [pc, #216]	; (800e390 <mix_sub_columns+0x3c8>)
 800e2b8:	5c5b      	ldrb	r3, [r3, r1]
 800e2ba:	4053      	eors	r3, r2
 800e2bc:	b2d9      	uxtb	r1, r3
 800e2be:	183b      	adds	r3, r7, r0
 800e2c0:	7adb      	ldrb	r3, [r3, #11]
 800e2c2:	001a      	movs	r2, r3
 800e2c4:	4b32      	ldr	r3, [pc, #200]	; (800e390 <mix_sub_columns+0x3c8>)
 800e2c6:	5c9a      	ldrb	r2, [r3, r2]
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	330c      	adds	r3, #12
 800e2cc:	404a      	eors	r2, r1
 800e2ce:	b2d2      	uxtb	r2, r2
 800e2d0:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e2d2:	183b      	adds	r3, r7, r0
 800e2d4:	7b1b      	ldrb	r3, [r3, #12]
 800e2d6:	001a      	movs	r2, r3
 800e2d8:	4b2d      	ldr	r3, [pc, #180]	; (800e390 <mix_sub_columns+0x3c8>)
 800e2da:	5c9a      	ldrb	r2, [r3, r2]
 800e2dc:	183b      	adds	r3, r7, r0
 800e2de:	785b      	ldrb	r3, [r3, #1]
 800e2e0:	0019      	movs	r1, r3
 800e2e2:	4b29      	ldr	r3, [pc, #164]	; (800e388 <mix_sub_columns+0x3c0>)
 800e2e4:	5c5b      	ldrb	r3, [r3, r1]
 800e2e6:	4053      	eors	r3, r2
 800e2e8:	b2da      	uxtb	r2, r3
 800e2ea:	183b      	adds	r3, r7, r0
 800e2ec:	799b      	ldrb	r3, [r3, #6]
 800e2ee:	0019      	movs	r1, r3
 800e2f0:	4b26      	ldr	r3, [pc, #152]	; (800e38c <mix_sub_columns+0x3c4>)
 800e2f2:	5c5b      	ldrb	r3, [r3, r1]
 800e2f4:	4053      	eors	r3, r2
 800e2f6:	b2d9      	uxtb	r1, r3
 800e2f8:	183b      	adds	r3, r7, r0
 800e2fa:	7adb      	ldrb	r3, [r3, #11]
 800e2fc:	001a      	movs	r2, r3
 800e2fe:	4b24      	ldr	r3, [pc, #144]	; (800e390 <mix_sub_columns+0x3c8>)
 800e300:	5c9a      	ldrb	r2, [r3, r2]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	330d      	adds	r3, #13
 800e306:	404a      	eors	r2, r1
 800e308:	b2d2      	uxtb	r2, r2
 800e30a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e30c:	183b      	adds	r3, r7, r0
 800e30e:	7b1b      	ldrb	r3, [r3, #12]
 800e310:	001a      	movs	r2, r3
 800e312:	4b1f      	ldr	r3, [pc, #124]	; (800e390 <mix_sub_columns+0x3c8>)
 800e314:	5c9a      	ldrb	r2, [r3, r2]
 800e316:	183b      	adds	r3, r7, r0
 800e318:	785b      	ldrb	r3, [r3, #1]
 800e31a:	0019      	movs	r1, r3
 800e31c:	4b1c      	ldr	r3, [pc, #112]	; (800e390 <mix_sub_columns+0x3c8>)
 800e31e:	5c5b      	ldrb	r3, [r3, r1]
 800e320:	4053      	eors	r3, r2
 800e322:	b2da      	uxtb	r2, r3
 800e324:	183b      	adds	r3, r7, r0
 800e326:	799b      	ldrb	r3, [r3, #6]
 800e328:	0019      	movs	r1, r3
 800e32a:	4b17      	ldr	r3, [pc, #92]	; (800e388 <mix_sub_columns+0x3c0>)
 800e32c:	5c5b      	ldrb	r3, [r3, r1]
 800e32e:	4053      	eors	r3, r2
 800e330:	b2d9      	uxtb	r1, r3
 800e332:	183b      	adds	r3, r7, r0
 800e334:	7adb      	ldrb	r3, [r3, #11]
 800e336:	001a      	movs	r2, r3
 800e338:	4b14      	ldr	r3, [pc, #80]	; (800e38c <mix_sub_columns+0x3c4>)
 800e33a:	5c9a      	ldrb	r2, [r3, r2]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	330e      	adds	r3, #14
 800e340:	404a      	eors	r2, r1
 800e342:	b2d2      	uxtb	r2, r2
 800e344:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e346:	183b      	adds	r3, r7, r0
 800e348:	7b1b      	ldrb	r3, [r3, #12]
 800e34a:	001a      	movs	r2, r3
 800e34c:	4b0f      	ldr	r3, [pc, #60]	; (800e38c <mix_sub_columns+0x3c4>)
 800e34e:	5c9a      	ldrb	r2, [r3, r2]
 800e350:	183b      	adds	r3, r7, r0
 800e352:	785b      	ldrb	r3, [r3, #1]
 800e354:	0019      	movs	r1, r3
 800e356:	4b0e      	ldr	r3, [pc, #56]	; (800e390 <mix_sub_columns+0x3c8>)
 800e358:	5c5b      	ldrb	r3, [r3, r1]
 800e35a:	4053      	eors	r3, r2
 800e35c:	b2da      	uxtb	r2, r3
 800e35e:	183b      	adds	r3, r7, r0
 800e360:	799b      	ldrb	r3, [r3, #6]
 800e362:	0019      	movs	r1, r3
 800e364:	4b0a      	ldr	r3, [pc, #40]	; (800e390 <mix_sub_columns+0x3c8>)
 800e366:	5c5b      	ldrb	r3, [r3, r1]
 800e368:	4053      	eors	r3, r2
 800e36a:	b2d9      	uxtb	r1, r3
 800e36c:	183b      	adds	r3, r7, r0
 800e36e:	7adb      	ldrb	r3, [r3, #11]
 800e370:	001a      	movs	r2, r3
 800e372:	4b05      	ldr	r3, [pc, #20]	; (800e388 <mix_sub_columns+0x3c0>)
 800e374:	5c9a      	ldrb	r2, [r3, r2]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	330f      	adds	r3, #15
 800e37a:	404a      	eors	r2, r1
 800e37c:	b2d2      	uxtb	r2, r2
 800e37e:	701a      	strb	r2, [r3, #0]
  }
 800e380:	46c0      	nop			; (mov r8, r8)
 800e382:	46bd      	mov	sp, r7
 800e384:	b007      	add	sp, #28
 800e386:	bd90      	pop	{r4, r7, pc}
 800e388:	0801ccc4 	.word	0x0801ccc4
 800e38c:	0801cdc4 	.word	0x0801cdc4
 800e390:	0801cbc4 	.word	0x0801cbc4

0800e394 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 800e394:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e396:	b087      	sub	sp, #28
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	607a      	str	r2, [r7, #4]
 800e39e:	200b      	movs	r0, #11
 800e3a0:	183b      	adds	r3, r7, r0
 800e3a2:	1c0a      	adds	r2, r1, #0
 800e3a4:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800e3a6:	183b      	adds	r3, r7, r0
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	2b18      	cmp	r3, #24
 800e3ac:	d009      	beq.n	800e3c2 <aes_set_key+0x2e>
 800e3ae:	2b20      	cmp	r3, #32
 800e3b0:	d007      	beq.n	800e3c2 <aes_set_key+0x2e>
 800e3b2:	2b10      	cmp	r3, #16
 800e3b4:	d005      	beq.n	800e3c2 <aes_set_key+0x2e>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	22f0      	movs	r2, #240	; 0xf0
 800e3ba:	2100      	movs	r1, #0
 800e3bc:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 800e3be:	23ff      	movs	r3, #255	; 0xff
 800e3c0:	e113      	b.n	800e5ea <aes_set_key+0x256>
        break;
 800e3c2:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	240b      	movs	r4, #11
 800e3c8:	193b      	adds	r3, r7, r4
 800e3ca:	781a      	ldrb	r2, [r3, #0]
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	0019      	movs	r1, r3
 800e3d0:	f7ff fbc1 	bl	800db56 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800e3d4:	0020      	movs	r0, r4
 800e3d6:	183b      	adds	r3, r7, r0
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	331c      	adds	r3, #28
 800e3dc:	b2da      	uxtb	r2, r3
 800e3de:	2111      	movs	r1, #17
 800e3e0:	187b      	adds	r3, r7, r1
 800e3e2:	0092      	lsls	r2, r2, #2
 800e3e4:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800e3e6:	187b      	adds	r3, r7, r1
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	091b      	lsrs	r3, r3, #4
 800e3ec:	b2db      	uxtb	r3, r3
 800e3ee:	3b01      	subs	r3, #1
 800e3f0:	b2d9      	uxtb	r1, r3
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	22f0      	movs	r2, #240	; 0xf0
 800e3f6:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e3f8:	2317      	movs	r3, #23
 800e3fa:	18fb      	adds	r3, r7, r3
 800e3fc:	183a      	adds	r2, r7, r0
 800e3fe:	7812      	ldrb	r2, [r2, #0]
 800e400:	701a      	strb	r2, [r3, #0]
 800e402:	2316      	movs	r3, #22
 800e404:	18fb      	adds	r3, r7, r3
 800e406:	2201      	movs	r2, #1
 800e408:	701a      	strb	r2, [r3, #0]
 800e40a:	e0e4      	b.n	800e5d6 <aes_set_key+0x242>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800e40c:	2017      	movs	r0, #23
 800e40e:	183b      	adds	r3, r7, r0
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	1f1a      	subs	r2, r3, #4
 800e414:	2315      	movs	r3, #21
 800e416:	18fb      	adds	r3, r7, r3
 800e418:	6879      	ldr	r1, [r7, #4]
 800e41a:	5c8a      	ldrb	r2, [r1, r2]
 800e41c:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 800e41e:	183b      	adds	r3, r7, r0
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	1eda      	subs	r2, r3, #3
 800e424:	2314      	movs	r3, #20
 800e426:	18fb      	adds	r3, r7, r3
 800e428:	6879      	ldr	r1, [r7, #4]
 800e42a:	5c8a      	ldrb	r2, [r1, r2]
 800e42c:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800e42e:	183b      	adds	r3, r7, r0
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	1e9a      	subs	r2, r3, #2
 800e434:	2313      	movs	r3, #19
 800e436:	18fb      	adds	r3, r7, r3
 800e438:	6879      	ldr	r1, [r7, #4]
 800e43a:	5c8a      	ldrb	r2, [r1, r2]
 800e43c:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 800e43e:	183b      	adds	r3, r7, r0
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	1e5a      	subs	r2, r3, #1
 800e444:	2312      	movs	r3, #18
 800e446:	18fb      	adds	r3, r7, r3
 800e448:	6879      	ldr	r1, [r7, #4]
 800e44a:	5c8a      	ldrb	r2, [r1, r2]
 800e44c:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 800e44e:	183a      	adds	r2, r7, r0
 800e450:	230b      	movs	r3, #11
 800e452:	18fb      	adds	r3, r7, r3
 800e454:	7812      	ldrb	r2, [r2, #0]
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	0019      	movs	r1, r3
 800e45a:	0010      	movs	r0, r2
 800e45c:	f7f1 feda 	bl	8000214 <__aeabi_uidivmod>
 800e460:	000b      	movs	r3, r1
 800e462:	b2db      	uxtb	r3, r3
 800e464:	2b00      	cmp	r3, #0
 800e466:	d13e      	bne.n	800e4e6 <aes_set_key+0x152>
        {
            tt = t0;
 800e468:	2410      	movs	r4, #16
 800e46a:	193b      	adds	r3, r7, r4
 800e46c:	2015      	movs	r0, #21
 800e46e:	183a      	adds	r2, r7, r0
 800e470:	7812      	ldrb	r2, [r2, #0]
 800e472:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 800e474:	2514      	movs	r5, #20
 800e476:	197b      	adds	r3, r7, r5
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	4a5e      	ldr	r2, [pc, #376]	; (800e5f4 <aes_set_key+0x260>)
 800e47c:	5cd1      	ldrb	r1, [r2, r3]
 800e47e:	183b      	adds	r3, r7, r0
 800e480:	2016      	movs	r0, #22
 800e482:	183a      	adds	r2, r7, r0
 800e484:	7812      	ldrb	r2, [r2, #0]
 800e486:	404a      	eors	r2, r1
 800e488:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800e48a:	2613      	movs	r6, #19
 800e48c:	19bb      	adds	r3, r7, r6
 800e48e:	781a      	ldrb	r2, [r3, #0]
 800e490:	197b      	adds	r3, r7, r5
 800e492:	4958      	ldr	r1, [pc, #352]	; (800e5f4 <aes_set_key+0x260>)
 800e494:	5c8a      	ldrb	r2, [r1, r2]
 800e496:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 800e498:	2512      	movs	r5, #18
 800e49a:	197b      	adds	r3, r7, r5
 800e49c:	781a      	ldrb	r2, [r3, #0]
 800e49e:	19bb      	adds	r3, r7, r6
 800e4a0:	4954      	ldr	r1, [pc, #336]	; (800e5f4 <aes_set_key+0x260>)
 800e4a2:	5c8a      	ldrb	r2, [r1, r2]
 800e4a4:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800e4a6:	193b      	adds	r3, r7, r4
 800e4a8:	781a      	ldrb	r2, [r3, #0]
 800e4aa:	197b      	adds	r3, r7, r5
 800e4ac:	4951      	ldr	r1, [pc, #324]	; (800e5f4 <aes_set_key+0x260>)
 800e4ae:	5c8a      	ldrb	r2, [r1, r2]
 800e4b0:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 800e4b2:	183b      	adds	r3, r7, r0
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	005b      	lsls	r3, r3, #1
 800e4b8:	b25a      	sxtb	r2, r3
 800e4ba:	0004      	movs	r4, r0
 800e4bc:	183b      	adds	r3, r7, r0
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	09db      	lsrs	r3, r3, #7
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	1c19      	adds	r1, r3, #0
 800e4c6:	1c0b      	adds	r3, r1, #0
 800e4c8:	18db      	adds	r3, r3, r3
 800e4ca:	185b      	adds	r3, r3, r1
 800e4cc:	1c19      	adds	r1, r3, #0
 800e4ce:	00c8      	lsls	r0, r1, #3
 800e4d0:	1c19      	adds	r1, r3, #0
 800e4d2:	1c03      	adds	r3, r0, #0
 800e4d4:	18cb      	adds	r3, r1, r3
 800e4d6:	b2db      	uxtb	r3, r3
 800e4d8:	b25b      	sxtb	r3, r3
 800e4da:	4053      	eors	r3, r2
 800e4dc:	b25a      	sxtb	r2, r3
 800e4de:	0020      	movs	r0, r4
 800e4e0:	183b      	adds	r3, r7, r0
 800e4e2:	701a      	strb	r2, [r3, #0]
 800e4e4:	e02e      	b.n	800e544 <aes_set_key+0x1b0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800e4e6:	230b      	movs	r3, #11
 800e4e8:	18fb      	adds	r3, r7, r3
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	2b18      	cmp	r3, #24
 800e4ee:	d929      	bls.n	800e544 <aes_set_key+0x1b0>
 800e4f0:	2317      	movs	r3, #23
 800e4f2:	18fa      	adds	r2, r7, r3
 800e4f4:	230b      	movs	r3, #11
 800e4f6:	18fb      	adds	r3, r7, r3
 800e4f8:	7812      	ldrb	r2, [r2, #0]
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	0019      	movs	r1, r3
 800e4fe:	0010      	movs	r0, r2
 800e500:	f7f1 fe88 	bl	8000214 <__aeabi_uidivmod>
 800e504:	000b      	movs	r3, r1
 800e506:	b2db      	uxtb	r3, r3
 800e508:	2b10      	cmp	r3, #16
 800e50a:	d11b      	bne.n	800e544 <aes_set_key+0x1b0>
        {
            t0 = s_box(t0);
 800e50c:	2115      	movs	r1, #21
 800e50e:	187b      	adds	r3, r7, r1
 800e510:	781a      	ldrb	r2, [r3, #0]
 800e512:	187b      	adds	r3, r7, r1
 800e514:	4937      	ldr	r1, [pc, #220]	; (800e5f4 <aes_set_key+0x260>)
 800e516:	5c8a      	ldrb	r2, [r1, r2]
 800e518:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 800e51a:	2114      	movs	r1, #20
 800e51c:	187b      	adds	r3, r7, r1
 800e51e:	781a      	ldrb	r2, [r3, #0]
 800e520:	187b      	adds	r3, r7, r1
 800e522:	4934      	ldr	r1, [pc, #208]	; (800e5f4 <aes_set_key+0x260>)
 800e524:	5c8a      	ldrb	r2, [r1, r2]
 800e526:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 800e528:	2113      	movs	r1, #19
 800e52a:	187b      	adds	r3, r7, r1
 800e52c:	781a      	ldrb	r2, [r3, #0]
 800e52e:	187b      	adds	r3, r7, r1
 800e530:	4930      	ldr	r1, [pc, #192]	; (800e5f4 <aes_set_key+0x260>)
 800e532:	5c8a      	ldrb	r2, [r1, r2]
 800e534:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 800e536:	2112      	movs	r1, #18
 800e538:	187b      	adds	r3, r7, r1
 800e53a:	781a      	ldrb	r2, [r3, #0]
 800e53c:	187b      	adds	r3, r7, r1
 800e53e:	492d      	ldr	r1, [pc, #180]	; (800e5f4 <aes_set_key+0x260>)
 800e540:	5c8a      	ldrb	r2, [r1, r2]
 800e542:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 800e544:	2410      	movs	r4, #16
 800e546:	193b      	adds	r3, r7, r4
 800e548:	2017      	movs	r0, #23
 800e54a:	1839      	adds	r1, r7, r0
 800e54c:	220b      	movs	r2, #11
 800e54e:	18ba      	adds	r2, r7, r2
 800e550:	7809      	ldrb	r1, [r1, #0]
 800e552:	7812      	ldrb	r2, [r2, #0]
 800e554:	1a8a      	subs	r2, r1, r2
 800e556:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800e558:	193b      	adds	r3, r7, r4
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	687a      	ldr	r2, [r7, #4]
 800e55e:	5cd1      	ldrb	r1, [r2, r3]
 800e560:	183b      	adds	r3, r7, r0
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	2215      	movs	r2, #21
 800e566:	18ba      	adds	r2, r7, r2
 800e568:	7812      	ldrb	r2, [r2, #0]
 800e56a:	404a      	eors	r2, r1
 800e56c:	b2d1      	uxtb	r1, r2
 800e56e:	687a      	ldr	r2, [r7, #4]
 800e570:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800e572:	193b      	adds	r3, r7, r4
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	3301      	adds	r3, #1
 800e578:	687a      	ldr	r2, [r7, #4]
 800e57a:	5cd1      	ldrb	r1, [r2, r3]
 800e57c:	183b      	adds	r3, r7, r0
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	3301      	adds	r3, #1
 800e582:	2214      	movs	r2, #20
 800e584:	18ba      	adds	r2, r7, r2
 800e586:	7812      	ldrb	r2, [r2, #0]
 800e588:	404a      	eors	r2, r1
 800e58a:	b2d1      	uxtb	r1, r2
 800e58c:	687a      	ldr	r2, [r7, #4]
 800e58e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800e590:	193b      	adds	r3, r7, r4
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	3302      	adds	r3, #2
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	5cd1      	ldrb	r1, [r2, r3]
 800e59a:	183b      	adds	r3, r7, r0
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	3302      	adds	r3, #2
 800e5a0:	2213      	movs	r2, #19
 800e5a2:	18ba      	adds	r2, r7, r2
 800e5a4:	7812      	ldrb	r2, [r2, #0]
 800e5a6:	404a      	eors	r2, r1
 800e5a8:	b2d1      	uxtb	r1, r2
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800e5ae:	193b      	adds	r3, r7, r4
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	3303      	adds	r3, #3
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	5cd1      	ldrb	r1, [r2, r3]
 800e5b8:	183b      	adds	r3, r7, r0
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	3303      	adds	r3, #3
 800e5be:	2212      	movs	r2, #18
 800e5c0:	18ba      	adds	r2, r7, r2
 800e5c2:	7812      	ldrb	r2, [r2, #0]
 800e5c4:	404a      	eors	r2, r1
 800e5c6:	b2d1      	uxtb	r1, r2
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e5cc:	183b      	adds	r3, r7, r0
 800e5ce:	183a      	adds	r2, r7, r0
 800e5d0:	7812      	ldrb	r2, [r2, #0]
 800e5d2:	3204      	adds	r2, #4
 800e5d4:	701a      	strb	r2, [r3, #0]
 800e5d6:	2317      	movs	r3, #23
 800e5d8:	18fa      	adds	r2, r7, r3
 800e5da:	2311      	movs	r3, #17
 800e5dc:	18fb      	adds	r3, r7, r3
 800e5de:	7812      	ldrb	r2, [r2, #0]
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d200      	bcs.n	800e5e8 <aes_set_key+0x254>
 800e5e6:	e711      	b.n	800e40c <aes_set_key+0x78>
    }
    return 0;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	0018      	movs	r0, r3
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	b007      	add	sp, #28
 800e5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5f2:	46c0      	nop			; (mov r8, r8)
 800e5f4:	0801cbc4 	.word	0x0801cbc4

0800e5f8 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 800e5f8:	b5b0      	push	{r4, r5, r7, lr}
 800e5fa:	b08a      	sub	sp, #40	; 0x28
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	60f8      	str	r0, [r7, #12]
 800e600:	60b9      	str	r1, [r7, #8]
 800e602:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	22f0      	movs	r2, #240	; 0xf0
 800e608:	5c9b      	ldrb	r3, [r3, r2]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d03a      	beq.n	800e684 <aes_encrypt+0x8c>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	68f9      	ldr	r1, [r7, #12]
 800e612:	2314      	movs	r3, #20
 800e614:	18fb      	adds	r3, r7, r3
 800e616:	0018      	movs	r0, r3
 800e618:	f7ff fb6e 	bl	800dcf8 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800e61c:	2327      	movs	r3, #39	; 0x27
 800e61e:	18fb      	adds	r3, r7, r3
 800e620:	2201      	movs	r2, #1
 800e622:	701a      	strb	r2, [r3, #0]
 800e624:	e014      	b.n	800e650 <aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800e626:	2514      	movs	r5, #20
 800e628:	197b      	adds	r3, r7, r5
 800e62a:	0018      	movs	r0, r3
 800e62c:	f7ff fccc 	bl	800dfc8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2427      	movs	r4, #39	; 0x27
 800e634:	193a      	adds	r2, r7, r4
 800e636:	7812      	ldrb	r2, [r2, #0]
 800e638:	0112      	lsls	r2, r2, #4
 800e63a:	189a      	adds	r2, r3, r2
 800e63c:	197b      	adds	r3, r7, r5
 800e63e:	0011      	movs	r1, r2
 800e640:	0018      	movs	r0, r3
 800e642:	f7ff fc10 	bl	800de66 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800e646:	193b      	adds	r3, r7, r4
 800e648:	193a      	adds	r2, r7, r4
 800e64a:	7812      	ldrb	r2, [r2, #0]
 800e64c:	3201      	adds	r2, #1
 800e64e:	701a      	strb	r2, [r3, #0]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	22f0      	movs	r2, #240	; 0xf0
 800e654:	5c9b      	ldrb	r3, [r3, r2]
 800e656:	2227      	movs	r2, #39	; 0x27
 800e658:	18ba      	adds	r2, r7, r2
 800e65a:	7812      	ldrb	r2, [r2, #0]
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d3e2      	bcc.n	800e626 <aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800e660:	2414      	movs	r4, #20
 800e662:	193b      	adds	r3, r7, r4
 800e664:	0018      	movs	r0, r3
 800e666:	f7ff fc0d 	bl	800de84 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2227      	movs	r2, #39	; 0x27
 800e66e:	18ba      	adds	r2, r7, r2
 800e670:	7812      	ldrb	r2, [r2, #0]
 800e672:	0112      	lsls	r2, r2, #4
 800e674:	189a      	adds	r2, r3, r2
 800e676:	1939      	adds	r1, r7, r4
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	0018      	movs	r0, r3
 800e67c:	f7ff fb3c 	bl	800dcf8 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800e680:	2300      	movs	r3, #0
 800e682:	e000      	b.n	800e686 <aes_encrypt+0x8e>
        return ( uint8_t )-1;
 800e684:	23ff      	movs	r3, #255	; 0xff
}
 800e686:	0018      	movs	r0, r3
 800e688:	46bd      	mov	sp, r7
 800e68a:	b00a      	add	sp, #40	; 0x28
 800e68c:	bdb0      	pop	{r4, r5, r7, pc}

0800e68e <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 800e68e:	b580      	push	{r7, lr}
 800e690:	b082      	sub	sp, #8
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	33f1      	adds	r3, #241	; 0xf1
 800e69a:	2210      	movs	r2, #16
 800e69c:	2100      	movs	r1, #0
 800e69e:	0018      	movs	r0, r3
 800e6a0:	f00c ffa0 	bl	801b5e4 <memset1>
            ctx->M_n = 0;
 800e6a4:	687a      	ldr	r2, [r7, #4]
 800e6a6:	238a      	movs	r3, #138	; 0x8a
 800e6a8:	005b      	lsls	r3, r3, #1
 800e6aa:	2100      	movs	r1, #0
 800e6ac:	50d1      	str	r1, [r2, r3]
        memset1(ctx->rijndael.ksch, '\0', 240);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	22f0      	movs	r2, #240	; 0xf0
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	0018      	movs	r0, r3
 800e6b6:	f00c ff95 	bl	801b5e4 <memset1>
}
 800e6ba:	46c0      	nop			; (mov r8, r8)
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	b002      	add	sp, #8
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b082      	sub	sp, #8
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
 800e6ca:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 800e6cc:	687a      	ldr	r2, [r7, #4]
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	2110      	movs	r1, #16
 800e6d2:	0018      	movs	r0, r3
 800e6d4:	f7ff fe5e 	bl	800e394 <aes_set_key>
}
 800e6d8:	46c0      	nop			; (mov r8, r8)
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	b002      	add	sp, #8
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 800e6e0:	b590      	push	{r4, r7, lr}
 800e6e2:	b08d      	sub	sp, #52	; 0x34
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	60b9      	str	r1, [r7, #8]
 800e6ea:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	238a      	movs	r3, #138	; 0x8a
 800e6f0:	005b      	lsls	r3, r3, #1
 800e6f2:	58d3      	ldr	r3, [r2, r3]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d100      	bne.n	800e6fa <AES_CMAC_Update+0x1a>
 800e6f8:	e097      	b.n	800e82a <AES_CMAC_Update+0x14a>
                  mlen = MIN(16 - ctx->M_n, len);
 800e6fa:	68fa      	ldr	r2, [r7, #12]
 800e6fc:	238a      	movs	r3, #138	; 0x8a
 800e6fe:	005b      	lsls	r3, r3, #1
 800e700:	58d3      	ldr	r3, [r2, r3]
 800e702:	2210      	movs	r2, #16
 800e704:	1ad2      	subs	r2, r2, r3
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	4293      	cmp	r3, r2
 800e70a:	d900      	bls.n	800e70e <AES_CMAC_Update+0x2e>
 800e70c:	0013      	movs	r3, r2
 800e70e:	627b      	str	r3, [r7, #36]	; 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	1c9a      	adds	r2, r3, #2
 800e714:	32ff      	adds	r2, #255	; 0xff
 800e716:	68f9      	ldr	r1, [r7, #12]
 800e718:	238a      	movs	r3, #138	; 0x8a
 800e71a:	005b      	lsls	r3, r3, #1
 800e71c:	58cb      	ldr	r3, [r1, r3]
 800e71e:	18d3      	adds	r3, r2, r3
 800e720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e722:	b292      	uxth	r2, r2
 800e724:	68b9      	ldr	r1, [r7, #8]
 800e726:	0018      	movs	r0, r3
 800e728:	f00c ff20 	bl	801b56c <memcpy1>
                    ctx->M_n += mlen;
 800e72c:	68fa      	ldr	r2, [r7, #12]
 800e72e:	238a      	movs	r3, #138	; 0x8a
 800e730:	005b      	lsls	r3, r3, #1
 800e732:	58d2      	ldr	r2, [r2, r3]
 800e734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e736:	18d1      	adds	r1, r2, r3
 800e738:	68fa      	ldr	r2, [r7, #12]
 800e73a:	238a      	movs	r3, #138	; 0x8a
 800e73c:	005b      	lsls	r3, r3, #1
 800e73e:	50d1      	str	r1, [r2, r3]
                    if (ctx->M_n < 16 || len == mlen)
 800e740:	68fa      	ldr	r2, [r7, #12]
 800e742:	238a      	movs	r3, #138	; 0x8a
 800e744:	005b      	lsls	r3, r3, #1
 800e746:	58d3      	ldr	r3, [r2, r3]
 800e748:	2b0f      	cmp	r3, #15
 800e74a:	d800      	bhi.n	800e74e <AES_CMAC_Update+0x6e>
 800e74c:	e07f      	b.n	800e84e <AES_CMAC_Update+0x16e>
 800e74e:	687a      	ldr	r2, [r7, #4]
 800e750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e752:	429a      	cmp	r2, r3
 800e754:	d100      	bne.n	800e758 <AES_CMAC_Update+0x78>
 800e756:	e07a      	b.n	800e84e <AES_CMAC_Update+0x16e>
                            return;
                   XOR(ctx->M_last, ctx->X);
 800e758:	2300      	movs	r3, #0
 800e75a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e75c:	e018      	b.n	800e790 <AES_CMAC_Update+0xb0>
 800e75e:	68fa      	ldr	r2, [r7, #12]
 800e760:	21f1      	movs	r1, #241	; 0xf1
 800e762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e764:	18d3      	adds	r3, r2, r3
 800e766:	185b      	adds	r3, r3, r1
 800e768:	781a      	ldrb	r2, [r3, #0]
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	2302      	movs	r3, #2
 800e76e:	33ff      	adds	r3, #255	; 0xff
 800e770:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e772:	1841      	adds	r1, r0, r1
 800e774:	18cb      	adds	r3, r1, r3
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	4053      	eors	r3, r2
 800e77a:	b2d8      	uxtb	r0, r3
 800e77c:	68fa      	ldr	r2, [r7, #12]
 800e77e:	21f1      	movs	r1, #241	; 0xf1
 800e780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e782:	18d3      	adds	r3, r2, r3
 800e784:	185b      	adds	r3, r3, r1
 800e786:	1c02      	adds	r2, r0, #0
 800e788:	701a      	strb	r2, [r3, #0]
 800e78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78c:	3301      	adds	r3, #1
 800e78e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e792:	2b0f      	cmp	r3, #15
 800e794:	dde3      	ble.n	800e75e <AES_CMAC_Update+0x7e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	33f1      	adds	r3, #241	; 0xf1
 800e79a:	0018      	movs	r0, r3
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	33f1      	adds	r3, #241	; 0xf1
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	0019      	movs	r1, r3
 800e7a4:	f7ff ff28 	bl	800e5f8 <aes_encrypt>
                    data += mlen;
 800e7a8:	68ba      	ldr	r2, [r7, #8]
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	18d3      	adds	r3, r2, r3
 800e7ae:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
 800e7b0:	687a      	ldr	r2, [r7, #4]
 800e7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b4:	1ad3      	subs	r3, r2, r3
 800e7b6:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
 800e7b8:	e037      	b.n	800e82a <AES_CMAC_Update+0x14a>

                    XOR(data, ctx->X);
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7be:	e015      	b.n	800e7ec <AES_CMAC_Update+0x10c>
 800e7c0:	68fa      	ldr	r2, [r7, #12]
 800e7c2:	21f1      	movs	r1, #241	; 0xf1
 800e7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c6:	18d3      	adds	r3, r2, r3
 800e7c8:	185b      	adds	r3, r3, r1
 800e7ca:	781a      	ldrb	r2, [r3, #0]
 800e7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ce:	68b9      	ldr	r1, [r7, #8]
 800e7d0:	18cb      	adds	r3, r1, r3
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	4053      	eors	r3, r2
 800e7d6:	b2d8      	uxtb	r0, r3
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	21f1      	movs	r1, #241	; 0xf1
 800e7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7de:	18d3      	adds	r3, r2, r3
 800e7e0:	185b      	adds	r3, r3, r1
 800e7e2:	1c02      	adds	r2, r0, #0
 800e7e4:	701a      	strb	r2, [r3, #0]
 800e7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ee:	2b0f      	cmp	r3, #15
 800e7f0:	dde6      	ble.n	800e7c0 <AES_CMAC_Update+0xe0>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	33f1      	adds	r3, #241	; 0xf1
 800e7f6:	0019      	movs	r1, r3
 800e7f8:	2414      	movs	r4, #20
 800e7fa:	193b      	adds	r3, r7, r4
 800e7fc:	2210      	movs	r2, #16
 800e7fe:	0018      	movs	r0, r3
 800e800:	f00c feb4 	bl	801b56c <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 800e804:	68fa      	ldr	r2, [r7, #12]
 800e806:	1939      	adds	r1, r7, r4
 800e808:	193b      	adds	r3, r7, r4
 800e80a:	0018      	movs	r0, r3
 800e80c:	f7ff fef4 	bl	800e5f8 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	33f1      	adds	r3, #241	; 0xf1
 800e814:	1939      	adds	r1, r7, r4
 800e816:	2210      	movs	r2, #16
 800e818:	0018      	movs	r0, r3
 800e81a:	f00c fea7 	bl	801b56c <memcpy1>

                    data += 16;
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	3310      	adds	r3, #16
 800e822:	60bb      	str	r3, [r7, #8]
                    len -= 16;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	3b10      	subs	r3, #16
 800e828:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2b10      	cmp	r3, #16
 800e82e:	d8c4      	bhi.n	800e7ba <AES_CMAC_Update+0xda>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	3302      	adds	r3, #2
 800e834:	33ff      	adds	r3, #255	; 0xff
 800e836:	687a      	ldr	r2, [r7, #4]
 800e838:	b292      	uxth	r2, r2
 800e83a:	68b9      	ldr	r1, [r7, #8]
 800e83c:	0018      	movs	r0, r3
 800e83e:	f00c fe95 	bl	801b56c <memcpy1>
            ctx->M_n = len;
 800e842:	68fa      	ldr	r2, [r7, #12]
 800e844:	238a      	movs	r3, #138	; 0x8a
 800e846:	005b      	lsls	r3, r3, #1
 800e848:	6879      	ldr	r1, [r7, #4]
 800e84a:	50d1      	str	r1, [r2, r3]
 800e84c:	e000      	b.n	800e850 <AES_CMAC_Update+0x170>
                            return;
 800e84e:	46c0      	nop			; (mov r8, r8)
}
 800e850:	46bd      	mov	sp, r7
 800e852:	b00d      	add	sp, #52	; 0x34
 800e854:	bd90      	pop	{r4, r7, pc}

0800e856 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 800e856:	b590      	push	{r4, r7, lr}
 800e858:	b093      	sub	sp, #76	; 0x4c
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
 800e85e:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 800e860:	241c      	movs	r4, #28
 800e862:	193b      	adds	r3, r7, r4
 800e864:	2210      	movs	r2, #16
 800e866:	2100      	movs	r1, #0
 800e868:	0018      	movs	r0, r3
 800e86a:	f00c febb 	bl	801b5e4 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 800e86e:	683a      	ldr	r2, [r7, #0]
 800e870:	1939      	adds	r1, r7, r4
 800e872:	193b      	adds	r3, r7, r4
 800e874:	0018      	movs	r0, r3
 800e876:	f7ff febf 	bl	800e5f8 <aes_encrypt>

            if (K[0] & 0x80) {
 800e87a:	193b      	adds	r3, r7, r4
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	b25b      	sxtb	r3, r3
 800e880:	2b00      	cmp	r3, #0
 800e882:	da2e      	bge.n	800e8e2 <AES_CMAC_Final+0x8c>
                    LSHIFT(K, K);
 800e884:	2300      	movs	r3, #0
 800e886:	647b      	str	r3, [r7, #68]	; 0x44
 800e888:	e018      	b.n	800e8bc <AES_CMAC_Final+0x66>
 800e88a:	201c      	movs	r0, #28
 800e88c:	183a      	adds	r2, r7, r0
 800e88e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e890:	18d3      	adds	r3, r2, r3
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	005b      	lsls	r3, r3, #1
 800e896:	b25a      	sxtb	r2, r3
 800e898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e89a:	3301      	adds	r3, #1
 800e89c:	1839      	adds	r1, r7, r0
 800e89e:	5ccb      	ldrb	r3, [r1, r3]
 800e8a0:	09db      	lsrs	r3, r3, #7
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	b25b      	sxtb	r3, r3
 800e8a6:	4313      	orrs	r3, r2
 800e8a8:	b25b      	sxtb	r3, r3
 800e8aa:	b2d9      	uxtb	r1, r3
 800e8ac:	183a      	adds	r2, r7, r0
 800e8ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8b0:	18d3      	adds	r3, r2, r3
 800e8b2:	1c0a      	adds	r2, r1, #0
 800e8b4:	701a      	strb	r2, [r3, #0]
 800e8b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	647b      	str	r3, [r7, #68]	; 0x44
 800e8bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8be:	2b0e      	cmp	r3, #14
 800e8c0:	dde3      	ble.n	800e88a <AES_CMAC_Final+0x34>
 800e8c2:	211c      	movs	r1, #28
 800e8c4:	187b      	adds	r3, r7, r1
 800e8c6:	7bdb      	ldrb	r3, [r3, #15]
 800e8c8:	18db      	adds	r3, r3, r3
 800e8ca:	b2da      	uxtb	r2, r3
 800e8cc:	187b      	adds	r3, r7, r1
 800e8ce:	73da      	strb	r2, [r3, #15]
                   K[15] ^= 0x87;
 800e8d0:	187b      	adds	r3, r7, r1
 800e8d2:	7bdb      	ldrb	r3, [r3, #15]
 800e8d4:	2279      	movs	r2, #121	; 0x79
 800e8d6:	4252      	negs	r2, r2
 800e8d8:	4053      	eors	r3, r2
 800e8da:	b2da      	uxtb	r2, r3
 800e8dc:	187b      	adds	r3, r7, r1
 800e8de:	73da      	strb	r2, [r3, #15]
 800e8e0:	e025      	b.n	800e92e <AES_CMAC_Final+0xd8>
            } else
                    LSHIFT(K, K);
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	643b      	str	r3, [r7, #64]	; 0x40
 800e8e6:	e018      	b.n	800e91a <AES_CMAC_Final+0xc4>
 800e8e8:	201c      	movs	r0, #28
 800e8ea:	183a      	adds	r2, r7, r0
 800e8ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8ee:	18d3      	adds	r3, r2, r3
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	005b      	lsls	r3, r3, #1
 800e8f4:	b25a      	sxtb	r2, r3
 800e8f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8f8:	3301      	adds	r3, #1
 800e8fa:	1839      	adds	r1, r7, r0
 800e8fc:	5ccb      	ldrb	r3, [r1, r3]
 800e8fe:	09db      	lsrs	r3, r3, #7
 800e900:	b2db      	uxtb	r3, r3
 800e902:	b25b      	sxtb	r3, r3
 800e904:	4313      	orrs	r3, r2
 800e906:	b25b      	sxtb	r3, r3
 800e908:	b2d9      	uxtb	r1, r3
 800e90a:	183a      	adds	r2, r7, r0
 800e90c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e90e:	18d3      	adds	r3, r2, r3
 800e910:	1c0a      	adds	r2, r1, #0
 800e912:	701a      	strb	r2, [r3, #0]
 800e914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e916:	3301      	adds	r3, #1
 800e918:	643b      	str	r3, [r7, #64]	; 0x40
 800e91a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e91c:	2b0e      	cmp	r3, #14
 800e91e:	dde3      	ble.n	800e8e8 <AES_CMAC_Final+0x92>
 800e920:	211c      	movs	r1, #28
 800e922:	187b      	adds	r3, r7, r1
 800e924:	7bdb      	ldrb	r3, [r3, #15]
 800e926:	18db      	adds	r3, r3, r3
 800e928:	b2da      	uxtb	r2, r3
 800e92a:	187b      	adds	r3, r7, r1
 800e92c:	73da      	strb	r2, [r3, #15]


            if (ctx->M_n == 16) {
 800e92e:	683a      	ldr	r2, [r7, #0]
 800e930:	238a      	movs	r3, #138	; 0x8a
 800e932:	005b      	lsls	r3, r3, #1
 800e934:	58d3      	ldr	r3, [r2, r3]
 800e936:	2b10      	cmp	r3, #16
 800e938:	d11f      	bne.n	800e97a <AES_CMAC_Final+0x124>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 800e93a:	2300      	movs	r3, #0
 800e93c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e93e:	e018      	b.n	800e972 <AES_CMAC_Final+0x11c>
 800e940:	6839      	ldr	r1, [r7, #0]
 800e942:	2302      	movs	r3, #2
 800e944:	33ff      	adds	r3, #255	; 0xff
 800e946:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e948:	188a      	adds	r2, r1, r2
 800e94a:	18d3      	adds	r3, r2, r3
 800e94c:	781a      	ldrb	r2, [r3, #0]
 800e94e:	231c      	movs	r3, #28
 800e950:	18f9      	adds	r1, r7, r3
 800e952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e954:	18cb      	adds	r3, r1, r3
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	4053      	eors	r3, r2
 800e95a:	b2d8      	uxtb	r0, r3
 800e95c:	6839      	ldr	r1, [r7, #0]
 800e95e:	2302      	movs	r3, #2
 800e960:	33ff      	adds	r3, #255	; 0xff
 800e962:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e964:	188a      	adds	r2, r1, r2
 800e966:	18d3      	adds	r3, r2, r3
 800e968:	1c02      	adds	r2, r0, #0
 800e96a:	701a      	strb	r2, [r3, #0]
 800e96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e96e:	3301      	adds	r3, #1
 800e970:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e974:	2b0f      	cmp	r3, #15
 800e976:	dde3      	ble.n	800e940 <AES_CMAC_Final+0xea>
 800e978:	e09f      	b.n	800eaba <AES_CMAC_Final+0x264>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 800e97a:	231c      	movs	r3, #28
 800e97c:	18fb      	adds	r3, r7, r3
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	b25b      	sxtb	r3, r3
 800e982:	2b00      	cmp	r3, #0
 800e984:	da2e      	bge.n	800e9e4 <AES_CMAC_Final+0x18e>
                          LSHIFT(K, K);
 800e986:	2300      	movs	r3, #0
 800e988:	63bb      	str	r3, [r7, #56]	; 0x38
 800e98a:	e018      	b.n	800e9be <AES_CMAC_Final+0x168>
 800e98c:	201c      	movs	r0, #28
 800e98e:	183a      	adds	r2, r7, r0
 800e990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e992:	18d3      	adds	r3, r2, r3
 800e994:	781b      	ldrb	r3, [r3, #0]
 800e996:	005b      	lsls	r3, r3, #1
 800e998:	b25a      	sxtb	r2, r3
 800e99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99c:	3301      	adds	r3, #1
 800e99e:	1839      	adds	r1, r7, r0
 800e9a0:	5ccb      	ldrb	r3, [r1, r3]
 800e9a2:	09db      	lsrs	r3, r3, #7
 800e9a4:	b2db      	uxtb	r3, r3
 800e9a6:	b25b      	sxtb	r3, r3
 800e9a8:	4313      	orrs	r3, r2
 800e9aa:	b25b      	sxtb	r3, r3
 800e9ac:	b2d9      	uxtb	r1, r3
 800e9ae:	183a      	adds	r2, r7, r0
 800e9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b2:	18d3      	adds	r3, r2, r3
 800e9b4:	1c0a      	adds	r2, r1, #0
 800e9b6:	701a      	strb	r2, [r3, #0]
 800e9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c0:	2b0e      	cmp	r3, #14
 800e9c2:	dde3      	ble.n	800e98c <AES_CMAC_Final+0x136>
 800e9c4:	211c      	movs	r1, #28
 800e9c6:	187b      	adds	r3, r7, r1
 800e9c8:	7bdb      	ldrb	r3, [r3, #15]
 800e9ca:	18db      	adds	r3, r3, r3
 800e9cc:	b2da      	uxtb	r2, r3
 800e9ce:	187b      	adds	r3, r7, r1
 800e9d0:	73da      	strb	r2, [r3, #15]
                          K[15] ^= 0x87;
 800e9d2:	187b      	adds	r3, r7, r1
 800e9d4:	7bdb      	ldrb	r3, [r3, #15]
 800e9d6:	2279      	movs	r2, #121	; 0x79
 800e9d8:	4252      	negs	r2, r2
 800e9da:	4053      	eors	r3, r2
 800e9dc:	b2da      	uxtb	r2, r3
 800e9de:	187b      	adds	r3, r7, r1
 800e9e0:	73da      	strb	r2, [r3, #15]
 800e9e2:	e025      	b.n	800ea30 <AES_CMAC_Final+0x1da>
                  } else
                           LSHIFT(K, K);
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	637b      	str	r3, [r7, #52]	; 0x34
 800e9e8:	e018      	b.n	800ea1c <AES_CMAC_Final+0x1c6>
 800e9ea:	201c      	movs	r0, #28
 800e9ec:	183a      	adds	r2, r7, r0
 800e9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9f0:	18d3      	adds	r3, r2, r3
 800e9f2:	781b      	ldrb	r3, [r3, #0]
 800e9f4:	005b      	lsls	r3, r3, #1
 800e9f6:	b25a      	sxtb	r2, r3
 800e9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	1839      	adds	r1, r7, r0
 800e9fe:	5ccb      	ldrb	r3, [r1, r3]
 800ea00:	09db      	lsrs	r3, r3, #7
 800ea02:	b2db      	uxtb	r3, r3
 800ea04:	b25b      	sxtb	r3, r3
 800ea06:	4313      	orrs	r3, r2
 800ea08:	b25b      	sxtb	r3, r3
 800ea0a:	b2d9      	uxtb	r1, r3
 800ea0c:	183a      	adds	r2, r7, r0
 800ea0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea10:	18d3      	adds	r3, r2, r3
 800ea12:	1c0a      	adds	r2, r1, #0
 800ea14:	701a      	strb	r2, [r3, #0]
 800ea16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea18:	3301      	adds	r3, #1
 800ea1a:	637b      	str	r3, [r7, #52]	; 0x34
 800ea1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea1e:	2b0e      	cmp	r3, #14
 800ea20:	dde3      	ble.n	800e9ea <AES_CMAC_Final+0x194>
 800ea22:	211c      	movs	r1, #28
 800ea24:	187b      	adds	r3, r7, r1
 800ea26:	7bdb      	ldrb	r3, [r3, #15]
 800ea28:	18db      	adds	r3, r3, r3
 800ea2a:	b2da      	uxtb	r2, r3
 800ea2c:	187b      	adds	r3, r7, r1
 800ea2e:	73da      	strb	r2, [r3, #15]

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 800ea30:	683a      	ldr	r2, [r7, #0]
 800ea32:	238a      	movs	r3, #138	; 0x8a
 800ea34:	005b      	lsls	r3, r3, #1
 800ea36:	58d2      	ldr	r2, [r2, r3]
 800ea38:	6839      	ldr	r1, [r7, #0]
 800ea3a:	2302      	movs	r3, #2
 800ea3c:	33ff      	adds	r3, #255	; 0xff
 800ea3e:	188a      	adds	r2, r1, r2
 800ea40:	18d3      	adds	r3, r2, r3
 800ea42:	2280      	movs	r2, #128	; 0x80
 800ea44:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 800ea46:	e00a      	b.n	800ea5e <AES_CMAC_Final+0x208>
                         ctx->M_last[ctx->M_n] = 0;
 800ea48:	683a      	ldr	r2, [r7, #0]
 800ea4a:	238a      	movs	r3, #138	; 0x8a
 800ea4c:	005b      	lsls	r3, r3, #1
 800ea4e:	58d2      	ldr	r2, [r2, r3]
 800ea50:	6839      	ldr	r1, [r7, #0]
 800ea52:	2302      	movs	r3, #2
 800ea54:	33ff      	adds	r3, #255	; 0xff
 800ea56:	188a      	adds	r2, r1, r2
 800ea58:	18d3      	adds	r3, r2, r3
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 800ea5e:	683a      	ldr	r2, [r7, #0]
 800ea60:	238a      	movs	r3, #138	; 0x8a
 800ea62:	005b      	lsls	r3, r3, #1
 800ea64:	58d3      	ldr	r3, [r2, r3]
 800ea66:	1c59      	adds	r1, r3, #1
 800ea68:	683a      	ldr	r2, [r7, #0]
 800ea6a:	238a      	movs	r3, #138	; 0x8a
 800ea6c:	005b      	lsls	r3, r3, #1
 800ea6e:	50d1      	str	r1, [r2, r3]
 800ea70:	683a      	ldr	r2, [r7, #0]
 800ea72:	238a      	movs	r3, #138	; 0x8a
 800ea74:	005b      	lsls	r3, r3, #1
 800ea76:	58d3      	ldr	r3, [r2, r3]
 800ea78:	2b0f      	cmp	r3, #15
 800ea7a:	d9e5      	bls.n	800ea48 <AES_CMAC_Final+0x1f2>
   
                  XOR(K, ctx->M_last);
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	633b      	str	r3, [r7, #48]	; 0x30
 800ea80:	e018      	b.n	800eab4 <AES_CMAC_Final+0x25e>
 800ea82:	6839      	ldr	r1, [r7, #0]
 800ea84:	2302      	movs	r3, #2
 800ea86:	33ff      	adds	r3, #255	; 0xff
 800ea88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea8a:	188a      	adds	r2, r1, r2
 800ea8c:	18d3      	adds	r3, r2, r3
 800ea8e:	781a      	ldrb	r2, [r3, #0]
 800ea90:	231c      	movs	r3, #28
 800ea92:	18f9      	adds	r1, r7, r3
 800ea94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea96:	18cb      	adds	r3, r1, r3
 800ea98:	781b      	ldrb	r3, [r3, #0]
 800ea9a:	4053      	eors	r3, r2
 800ea9c:	b2d8      	uxtb	r0, r3
 800ea9e:	6839      	ldr	r1, [r7, #0]
 800eaa0:	2302      	movs	r3, #2
 800eaa2:	33ff      	adds	r3, #255	; 0xff
 800eaa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaa6:	188a      	adds	r2, r1, r2
 800eaa8:	18d3      	adds	r3, r2, r3
 800eaaa:	1c02      	adds	r2, r0, #0
 800eaac:	701a      	strb	r2, [r3, #0]
 800eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab0:	3301      	adds	r3, #1
 800eab2:	633b      	str	r3, [r7, #48]	; 0x30
 800eab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab6:	2b0f      	cmp	r3, #15
 800eab8:	dde3      	ble.n	800ea82 <AES_CMAC_Final+0x22c>


           }
           XOR(ctx->M_last, ctx->X);
 800eaba:	2300      	movs	r3, #0
 800eabc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eabe:	e018      	b.n	800eaf2 <AES_CMAC_Final+0x29c>
 800eac0:	683a      	ldr	r2, [r7, #0]
 800eac2:	21f1      	movs	r1, #241	; 0xf1
 800eac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac6:	18d3      	adds	r3, r2, r3
 800eac8:	185b      	adds	r3, r3, r1
 800eaca:	781a      	ldrb	r2, [r3, #0]
 800eacc:	6838      	ldr	r0, [r7, #0]
 800eace:	2302      	movs	r3, #2
 800ead0:	33ff      	adds	r3, #255	; 0xff
 800ead2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ead4:	1841      	adds	r1, r0, r1
 800ead6:	18cb      	adds	r3, r1, r3
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	4053      	eors	r3, r2
 800eadc:	b2d8      	uxtb	r0, r3
 800eade:	683a      	ldr	r2, [r7, #0]
 800eae0:	21f1      	movs	r1, #241	; 0xf1
 800eae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae4:	18d3      	adds	r3, r2, r3
 800eae6:	185b      	adds	r3, r3, r1
 800eae8:	1c02      	adds	r2, r0, #0
 800eaea:	701a      	strb	r2, [r3, #0]
 800eaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaee:	3301      	adds	r3, #1
 800eaf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf4:	2b0f      	cmp	r3, #15
 800eaf6:	dde3      	ble.n	800eac0 <AES_CMAC_Final+0x26a>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	33f1      	adds	r3, #241	; 0xf1
 800eafc:	0019      	movs	r1, r3
 800eafe:	240c      	movs	r4, #12
 800eb00:	193b      	adds	r3, r7, r4
 800eb02:	2210      	movs	r2, #16
 800eb04:	0018      	movs	r0, r3
 800eb06:	f00c fd31 	bl	801b56c <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 800eb0a:	683a      	ldr	r2, [r7, #0]
 800eb0c:	6879      	ldr	r1, [r7, #4]
 800eb0e:	193b      	adds	r3, r7, r4
 800eb10:	0018      	movs	r0, r3
 800eb12:	f7ff fd71 	bl	800e5f8 <aes_encrypt>
           memset1(K, 0, sizeof K);
 800eb16:	231c      	movs	r3, #28
 800eb18:	18fb      	adds	r3, r7, r3
 800eb1a:	2210      	movs	r2, #16
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	0018      	movs	r0, r3
 800eb20:	f00c fd60 	bl	801b5e4 <memset1>

}
 800eb24:	46c0      	nop			; (mov r8, r8)
 800eb26:	46bd      	mov	sp, r7
 800eb28:	b013      	add	sp, #76	; 0x4c
 800eb2a:	bd90      	pop	{r4, r7, pc}

0800eb2c <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	0002      	movs	r2, r0
 800eb34:	6039      	str	r1, [r7, #0]
 800eb36:	1dfb      	adds	r3, r7, #7
 800eb38:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eb3a:	230f      	movs	r3, #15
 800eb3c:	18fb      	adds	r3, r7, r3
 800eb3e:	2200      	movs	r2, #0
 800eb40:	701a      	strb	r2, [r3, #0]
 800eb42:	e025      	b.n	800eb90 <GetKeyByID+0x64>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 800eb44:	230f      	movs	r3, #15
 800eb46:	18fb      	adds	r3, r7, r3
 800eb48:	781a      	ldrb	r2, [r3, #0]
 800eb4a:	4816      	ldr	r0, [pc, #88]	; (800eba4 <GetKeyByID+0x78>)
 800eb4c:	238b      	movs	r3, #139	; 0x8b
 800eb4e:	0099      	lsls	r1, r3, #2
 800eb50:	0013      	movs	r3, r2
 800eb52:	011b      	lsls	r3, r3, #4
 800eb54:	189b      	adds	r3, r3, r2
 800eb56:	18c3      	adds	r3, r0, r3
 800eb58:	185b      	adds	r3, r3, r1
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	1dfa      	adds	r2, r7, #7
 800eb5e:	7812      	ldrb	r2, [r2, #0]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d10f      	bne.n	800eb84 <GetKeyByID+0x58>
        {
            *keyItem = &( SeNvmCtx.KeyList[i] );
 800eb64:	230f      	movs	r3, #15
 800eb66:	18fb      	adds	r3, r7, r3
 800eb68:	781a      	ldrb	r2, [r3, #0]
 800eb6a:	0013      	movs	r3, r2
 800eb6c:	011b      	lsls	r3, r3, #4
 800eb6e:	189b      	adds	r3, r3, r2
 800eb70:	228a      	movs	r2, #138	; 0x8a
 800eb72:	0092      	lsls	r2, r2, #2
 800eb74:	189a      	adds	r2, r3, r2
 800eb76:	4b0b      	ldr	r3, [pc, #44]	; (800eba4 <GetKeyByID+0x78>)
 800eb78:	18d3      	adds	r3, r2, r3
 800eb7a:	1d1a      	adds	r2, r3, #4
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800eb80:	2300      	movs	r3, #0
 800eb82:	e00b      	b.n	800eb9c <GetKeyByID+0x70>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eb84:	210f      	movs	r1, #15
 800eb86:	187b      	adds	r3, r7, r1
 800eb88:	781a      	ldrb	r2, [r3, #0]
 800eb8a:	187b      	adds	r3, r7, r1
 800eb8c:	3201      	adds	r2, #1
 800eb8e:	701a      	strb	r2, [r3, #0]
 800eb90:	230f      	movs	r3, #15
 800eb92:	18fb      	adds	r3, r7, r3
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	2b17      	cmp	r3, #23
 800eb98:	d9d4      	bls.n	800eb44 <GetKeyByID+0x18>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eb9a:	2303      	movs	r3, #3
}
 800eb9c:	0018      	movs	r0, r3
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	b004      	add	sp, #16
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	20000524 	.word	0x20000524

0800eba8 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	af00      	add	r7, sp, #0
    return;
 800ebac:	46c0      	nop			; (mov r8, r8)
}
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
	...

0800ebb4 <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 800ebb4:	b5b0      	push	{r4, r5, r7, lr}
 800ebb6:	b08a      	sub	sp, #40	; 0x28
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	60f8      	str	r0, [r7, #12]
 800ebbc:	60b9      	str	r1, [r7, #8]
 800ebbe:	0019      	movs	r1, r3
 800ebc0:	1dbb      	adds	r3, r7, #6
 800ebc2:	801a      	strh	r2, [r3, #0]
 800ebc4:	1d7b      	adds	r3, r7, #5
 800ebc6:	1c0a      	adds	r2, r1, #0
 800ebc8:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d002      	beq.n	800ebd6 <ComputeCmac+0x22>
 800ebd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d101      	bne.n	800ebda <ComputeCmac+0x26>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ebd6:	2302      	movs	r3, #2
 800ebd8:	e046      	b.n	800ec68 <ComputeCmac+0xb4>
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 800ebda:	4b25      	ldr	r3, [pc, #148]	; (800ec70 <ComputeCmac+0xbc>)
 800ebdc:	0018      	movs	r0, r3
 800ebde:	f7ff fd56 	bl	800e68e <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ebe2:	2527      	movs	r5, #39	; 0x27
 800ebe4:	197c      	adds	r4, r7, r5
 800ebe6:	2310      	movs	r3, #16
 800ebe8:	18fa      	adds	r2, r7, r3
 800ebea:	1d7b      	adds	r3, r7, #5
 800ebec:	781b      	ldrb	r3, [r3, #0]
 800ebee:	0011      	movs	r1, r2
 800ebf0:	0018      	movs	r0, r3
 800ebf2:	f7ff ff9b 	bl	800eb2c <GetKeyByID>
 800ebf6:	0003      	movs	r3, r0
 800ebf8:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ebfa:	197b      	adds	r3, r7, r5
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d12f      	bne.n	800ec62 <ComputeCmac+0xae>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	1c5a      	adds	r2, r3, #1
 800ec06:	4b1a      	ldr	r3, [pc, #104]	; (800ec70 <ComputeCmac+0xbc>)
 800ec08:	0011      	movs	r1, r2
 800ec0a:	0018      	movs	r0, r3
 800ec0c:	f7ff fd59 	bl	800e6c2 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d005      	beq.n	800ec22 <ComputeCmac+0x6e>
        {
            AES_CMAC_Update( SeNvmCtx.AesCmacCtx, micBxBuffer, 16 );
 800ec16:	68f9      	ldr	r1, [r7, #12]
 800ec18:	4b15      	ldr	r3, [pc, #84]	; (800ec70 <ComputeCmac+0xbc>)
 800ec1a:	2210      	movs	r2, #16
 800ec1c:	0018      	movs	r0, r3
 800ec1e:	f7ff fd5f 	bl	800e6e0 <AES_CMAC_Update>
        }

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 800ec22:	1dbb      	adds	r3, r7, #6
 800ec24:	881a      	ldrh	r2, [r3, #0]
 800ec26:	68b9      	ldr	r1, [r7, #8]
 800ec28:	4b11      	ldr	r3, [pc, #68]	; (800ec70 <ComputeCmac+0xbc>)
 800ec2a:	0018      	movs	r0, r3
 800ec2c:	f7ff fd58 	bl	800e6e0 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 800ec30:	4a0f      	ldr	r2, [pc, #60]	; (800ec70 <ComputeCmac+0xbc>)
 800ec32:	2114      	movs	r1, #20
 800ec34:	000c      	movs	r4, r1
 800ec36:	187b      	adds	r3, r7, r1
 800ec38:	0011      	movs	r1, r2
 800ec3a:	0018      	movs	r0, r3
 800ec3c:	f7ff fe0b 	bl	800e856 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 800ec40:	0021      	movs	r1, r4
 800ec42:	187b      	adds	r3, r7, r1
 800ec44:	78db      	ldrb	r3, [r3, #3]
 800ec46:	061a      	lsls	r2, r3, #24
 800ec48:	187b      	adds	r3, r7, r1
 800ec4a:	789b      	ldrb	r3, [r3, #2]
 800ec4c:	041b      	lsls	r3, r3, #16
 800ec4e:	431a      	orrs	r2, r3
 800ec50:	187b      	adds	r3, r7, r1
 800ec52:	785b      	ldrb	r3, [r3, #1]
 800ec54:	021b      	lsls	r3, r3, #8
 800ec56:	4313      	orrs	r3, r2
 800ec58:	187a      	adds	r2, r7, r1
 800ec5a:	7812      	ldrb	r2, [r2, #0]
 800ec5c:	431a      	orrs	r2, r3
 800ec5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec60:	601a      	str	r2, [r3, #0]
    }

    return retval;
 800ec62:	2327      	movs	r3, #39	; 0x27
 800ec64:	18fb      	adds	r3, r7, r3
 800ec66:	781b      	ldrb	r3, [r3, #0]
}
 800ec68:	0018      	movs	r0, r3
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	b00a      	add	sp, #40	; 0x28
 800ec6e:	bdb0      	pop	{r4, r5, r7, pc}
 800ec70:	20000638 	.word	0x20000638

0800ec74 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmEvent seNvmCtxChanged )
{
 800ec74:	b5b0      	push	{r4, r5, r7, lr}
 800ec76:	b088      	sub	sp, #32
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
    uint8_t itr = 0;
 800ec7c:	241f      	movs	r4, #31
 800ec7e:	193b      	adds	r3, r7, r4
 800ec80:	2200      	movs	r2, #0
 800ec82:	701a      	strb	r2, [r3, #0]
    uint8_t zeroKey[16] = { 0 };
 800ec84:	250c      	movs	r5, #12
 800ec86:	197b      	adds	r3, r7, r5
 800ec88:	0018      	movs	r0, r3
 800ec8a:	2310      	movs	r3, #16
 800ec8c:	001a      	movs	r2, r3
 800ec8e:	2100      	movs	r1, #0
 800ec90:	f00c fcf0 	bl	801b674 <memset>

    // Initialize with defaults
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 800ec94:	193b      	adds	r3, r7, r4
 800ec96:	781b      	ldrb	r3, [r3, #0]
 800ec98:	193a      	adds	r2, r7, r4
 800ec9a:	1c59      	adds	r1, r3, #1
 800ec9c:	7011      	strb	r1, [r2, #0]
 800ec9e:	0018      	movs	r0, r3
 800eca0:	49d0      	ldr	r1, [pc, #832]	; (800efe4 <SecureElementInit+0x370>)
 800eca2:	238b      	movs	r3, #139	; 0x8b
 800eca4:	009a      	lsls	r2, r3, #2
 800eca6:	0003      	movs	r3, r0
 800eca8:	011b      	lsls	r3, r3, #4
 800ecaa:	181b      	adds	r3, r3, r0
 800ecac:	18cb      	adds	r3, r1, r3
 800ecae:	189b      	adds	r3, r3, r2
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 800ecb4:	193b      	adds	r3, r7, r4
 800ecb6:	781b      	ldrb	r3, [r3, #0]
 800ecb8:	193a      	adds	r2, r7, r4
 800ecba:	1c59      	adds	r1, r3, #1
 800ecbc:	7011      	strb	r1, [r2, #0]
 800ecbe:	0018      	movs	r0, r3
 800ecc0:	49c8      	ldr	r1, [pc, #800]	; (800efe4 <SecureElementInit+0x370>)
 800ecc2:	238b      	movs	r3, #139	; 0x8b
 800ecc4:	009a      	lsls	r2, r3, #2
 800ecc6:	0003      	movs	r3, r0
 800ecc8:	011b      	lsls	r3, r3, #4
 800ecca:	181b      	adds	r3, r3, r0
 800eccc:	18cb      	adds	r3, r1, r3
 800ecce:	189b      	adds	r3, r3, r2
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 800ecd4:	193b      	adds	r3, r7, r4
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	193a      	adds	r2, r7, r4
 800ecda:	1c59      	adds	r1, r3, #1
 800ecdc:	7011      	strb	r1, [r2, #0]
 800ecde:	0018      	movs	r0, r3
 800ece0:	49c0      	ldr	r1, [pc, #768]	; (800efe4 <SecureElementInit+0x370>)
 800ece2:	238b      	movs	r3, #139	; 0x8b
 800ece4:	009a      	lsls	r2, r3, #2
 800ece6:	0003      	movs	r3, r0
 800ece8:	011b      	lsls	r3, r3, #4
 800ecea:	181b      	adds	r3, r3, r0
 800ecec:	18cb      	adds	r3, r1, r3
 800ecee:	189b      	adds	r3, r3, r2
 800ecf0:	2202      	movs	r2, #2
 800ecf2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 800ecf4:	193b      	adds	r3, r7, r4
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	193a      	adds	r2, r7, r4
 800ecfa:	1c59      	adds	r1, r3, #1
 800ecfc:	7011      	strb	r1, [r2, #0]
 800ecfe:	0018      	movs	r0, r3
 800ed00:	49b8      	ldr	r1, [pc, #736]	; (800efe4 <SecureElementInit+0x370>)
 800ed02:	238b      	movs	r3, #139	; 0x8b
 800ed04:	009a      	lsls	r2, r3, #2
 800ed06:	0003      	movs	r3, r0
 800ed08:	011b      	lsls	r3, r3, #4
 800ed0a:	181b      	adds	r3, r3, r0
 800ed0c:	18cb      	adds	r3, r1, r3
 800ed0e:	189b      	adds	r3, r3, r2
 800ed10:	2203      	movs	r2, #3
 800ed12:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 800ed14:	193b      	adds	r3, r7, r4
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	193a      	adds	r2, r7, r4
 800ed1a:	1c59      	adds	r1, r3, #1
 800ed1c:	7011      	strb	r1, [r2, #0]
 800ed1e:	0018      	movs	r0, r3
 800ed20:	49b0      	ldr	r1, [pc, #704]	; (800efe4 <SecureElementInit+0x370>)
 800ed22:	238b      	movs	r3, #139	; 0x8b
 800ed24:	009a      	lsls	r2, r3, #2
 800ed26:	0003      	movs	r3, r0
 800ed28:	011b      	lsls	r3, r3, #4
 800ed2a:	181b      	adds	r3, r3, r0
 800ed2c:	18cb      	adds	r3, r1, r3
 800ed2e:	189b      	adds	r3, r3, r2
 800ed30:	2204      	movs	r2, #4
 800ed32:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 800ed34:	193b      	adds	r3, r7, r4
 800ed36:	781b      	ldrb	r3, [r3, #0]
 800ed38:	193a      	adds	r2, r7, r4
 800ed3a:	1c59      	adds	r1, r3, #1
 800ed3c:	7011      	strb	r1, [r2, #0]
 800ed3e:	0018      	movs	r0, r3
 800ed40:	49a8      	ldr	r1, [pc, #672]	; (800efe4 <SecureElementInit+0x370>)
 800ed42:	238b      	movs	r3, #139	; 0x8b
 800ed44:	009a      	lsls	r2, r3, #2
 800ed46:	0003      	movs	r3, r0
 800ed48:	011b      	lsls	r3, r3, #4
 800ed4a:	181b      	adds	r3, r3, r0
 800ed4c:	18cb      	adds	r3, r1, r3
 800ed4e:	189b      	adds	r3, r3, r2
 800ed50:	2205      	movs	r2, #5
 800ed52:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 800ed54:	193b      	adds	r3, r7, r4
 800ed56:	781b      	ldrb	r3, [r3, #0]
 800ed58:	193a      	adds	r2, r7, r4
 800ed5a:	1c59      	adds	r1, r3, #1
 800ed5c:	7011      	strb	r1, [r2, #0]
 800ed5e:	0018      	movs	r0, r3
 800ed60:	49a0      	ldr	r1, [pc, #640]	; (800efe4 <SecureElementInit+0x370>)
 800ed62:	238b      	movs	r3, #139	; 0x8b
 800ed64:	009a      	lsls	r2, r3, #2
 800ed66:	0003      	movs	r3, r0
 800ed68:	011b      	lsls	r3, r3, #4
 800ed6a:	181b      	adds	r3, r3, r0
 800ed6c:	18cb      	adds	r3, r1, r3
 800ed6e:	189b      	adds	r3, r3, r2
 800ed70:	2206      	movs	r2, #6
 800ed72:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 800ed74:	193b      	adds	r3, r7, r4
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	193a      	adds	r2, r7, r4
 800ed7a:	1c59      	adds	r1, r3, #1
 800ed7c:	7011      	strb	r1, [r2, #0]
 800ed7e:	0018      	movs	r0, r3
 800ed80:	4998      	ldr	r1, [pc, #608]	; (800efe4 <SecureElementInit+0x370>)
 800ed82:	238b      	movs	r3, #139	; 0x8b
 800ed84:	009a      	lsls	r2, r3, #2
 800ed86:	0003      	movs	r3, r0
 800ed88:	011b      	lsls	r3, r3, #4
 800ed8a:	181b      	adds	r3, r3, r0
 800ed8c:	18cb      	adds	r3, r1, r3
 800ed8e:	189b      	adds	r3, r3, r2
 800ed90:	2207      	movs	r2, #7
 800ed92:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 800ed94:	193b      	adds	r3, r7, r4
 800ed96:	781b      	ldrb	r3, [r3, #0]
 800ed98:	193a      	adds	r2, r7, r4
 800ed9a:	1c59      	adds	r1, r3, #1
 800ed9c:	7011      	strb	r1, [r2, #0]
 800ed9e:	0018      	movs	r0, r3
 800eda0:	4990      	ldr	r1, [pc, #576]	; (800efe4 <SecureElementInit+0x370>)
 800eda2:	238b      	movs	r3, #139	; 0x8b
 800eda4:	009a      	lsls	r2, r3, #2
 800eda6:	0003      	movs	r3, r0
 800eda8:	011b      	lsls	r3, r3, #4
 800edaa:	181b      	adds	r3, r3, r0
 800edac:	18cb      	adds	r3, r1, r3
 800edae:	189b      	adds	r3, r3, r2
 800edb0:	2208      	movs	r2, #8
 800edb2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_ROOT_KEY;
 800edb4:	193b      	adds	r3, r7, r4
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	193a      	adds	r2, r7, r4
 800edba:	1c59      	adds	r1, r3, #1
 800edbc:	7011      	strb	r1, [r2, #0]
 800edbe:	0018      	movs	r0, r3
 800edc0:	4988      	ldr	r1, [pc, #544]	; (800efe4 <SecureElementInit+0x370>)
 800edc2:	238b      	movs	r3, #139	; 0x8b
 800edc4:	009a      	lsls	r2, r3, #2
 800edc6:	0003      	movs	r3, r0
 800edc8:	011b      	lsls	r3, r3, #4
 800edca:	181b      	adds	r3, r3, r0
 800edcc:	18cb      	adds	r3, r1, r3
 800edce:	189b      	adds	r3, r3, r2
 800edd0:	2209      	movs	r2, #9
 800edd2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 800edd4:	193b      	adds	r3, r7, r4
 800edd6:	781b      	ldrb	r3, [r3, #0]
 800edd8:	193a      	adds	r2, r7, r4
 800edda:	1c59      	adds	r1, r3, #1
 800eddc:	7011      	strb	r1, [r2, #0]
 800edde:	0018      	movs	r0, r3
 800ede0:	4980      	ldr	r1, [pc, #512]	; (800efe4 <SecureElementInit+0x370>)
 800ede2:	238b      	movs	r3, #139	; 0x8b
 800ede4:	009a      	lsls	r2, r3, #2
 800ede6:	0003      	movs	r3, r0
 800ede8:	011b      	lsls	r3, r3, #4
 800edea:	181b      	adds	r3, r3, r0
 800edec:	18cb      	adds	r3, r1, r3
 800edee:	189b      	adds	r3, r3, r2
 800edf0:	227f      	movs	r2, #127	; 0x7f
 800edf2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 800edf4:	193b      	adds	r3, r7, r4
 800edf6:	781b      	ldrb	r3, [r3, #0]
 800edf8:	193a      	adds	r2, r7, r4
 800edfa:	1c59      	adds	r1, r3, #1
 800edfc:	7011      	strb	r1, [r2, #0]
 800edfe:	0018      	movs	r0, r3
 800ee00:	4978      	ldr	r1, [pc, #480]	; (800efe4 <SecureElementInit+0x370>)
 800ee02:	238b      	movs	r3, #139	; 0x8b
 800ee04:	009a      	lsls	r2, r3, #2
 800ee06:	0003      	movs	r3, r0
 800ee08:	011b      	lsls	r3, r3, #4
 800ee0a:	181b      	adds	r3, r3, r0
 800ee0c:	18cb      	adds	r3, r1, r3
 800ee0e:	189b      	adds	r3, r3, r2
 800ee10:	2280      	movs	r2, #128	; 0x80
 800ee12:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 800ee14:	193b      	adds	r3, r7, r4
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	193a      	adds	r2, r7, r4
 800ee1a:	1c59      	adds	r1, r3, #1
 800ee1c:	7011      	strb	r1, [r2, #0]
 800ee1e:	0018      	movs	r0, r3
 800ee20:	4970      	ldr	r1, [pc, #448]	; (800efe4 <SecureElementInit+0x370>)
 800ee22:	238b      	movs	r3, #139	; 0x8b
 800ee24:	009a      	lsls	r2, r3, #2
 800ee26:	0003      	movs	r3, r0
 800ee28:	011b      	lsls	r3, r3, #4
 800ee2a:	181b      	adds	r3, r3, r0
 800ee2c:	18cb      	adds	r3, r1, r3
 800ee2e:	189b      	adds	r3, r3, r2
 800ee30:	2281      	movs	r2, #129	; 0x81
 800ee32:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 800ee34:	193b      	adds	r3, r7, r4
 800ee36:	781b      	ldrb	r3, [r3, #0]
 800ee38:	193a      	adds	r2, r7, r4
 800ee3a:	1c59      	adds	r1, r3, #1
 800ee3c:	7011      	strb	r1, [r2, #0]
 800ee3e:	0018      	movs	r0, r3
 800ee40:	4968      	ldr	r1, [pc, #416]	; (800efe4 <SecureElementInit+0x370>)
 800ee42:	238b      	movs	r3, #139	; 0x8b
 800ee44:	009a      	lsls	r2, r3, #2
 800ee46:	0003      	movs	r3, r0
 800ee48:	011b      	lsls	r3, r3, #4
 800ee4a:	181b      	adds	r3, r3, r0
 800ee4c:	18cb      	adds	r3, r1, r3
 800ee4e:	189b      	adds	r3, r3, r2
 800ee50:	2282      	movs	r2, #130	; 0x82
 800ee52:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 800ee54:	193b      	adds	r3, r7, r4
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	193a      	adds	r2, r7, r4
 800ee5a:	1c59      	adds	r1, r3, #1
 800ee5c:	7011      	strb	r1, [r2, #0]
 800ee5e:	0018      	movs	r0, r3
 800ee60:	4960      	ldr	r1, [pc, #384]	; (800efe4 <SecureElementInit+0x370>)
 800ee62:	238b      	movs	r3, #139	; 0x8b
 800ee64:	009a      	lsls	r2, r3, #2
 800ee66:	0003      	movs	r3, r0
 800ee68:	011b      	lsls	r3, r3, #4
 800ee6a:	181b      	adds	r3, r3, r0
 800ee6c:	18cb      	adds	r3, r1, r3
 800ee6e:	189b      	adds	r3, r3, r2
 800ee70:	2283      	movs	r2, #131	; 0x83
 800ee72:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 800ee74:	193b      	adds	r3, r7, r4
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	193a      	adds	r2, r7, r4
 800ee7a:	1c59      	adds	r1, r3, #1
 800ee7c:	7011      	strb	r1, [r2, #0]
 800ee7e:	0018      	movs	r0, r3
 800ee80:	4958      	ldr	r1, [pc, #352]	; (800efe4 <SecureElementInit+0x370>)
 800ee82:	238b      	movs	r3, #139	; 0x8b
 800ee84:	009a      	lsls	r2, r3, #2
 800ee86:	0003      	movs	r3, r0
 800ee88:	011b      	lsls	r3, r3, #4
 800ee8a:	181b      	adds	r3, r3, r0
 800ee8c:	18cb      	adds	r3, r1, r3
 800ee8e:	189b      	adds	r3, r3, r2
 800ee90:	2284      	movs	r2, #132	; 0x84
 800ee92:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 800ee94:	193b      	adds	r3, r7, r4
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	193a      	adds	r2, r7, r4
 800ee9a:	1c59      	adds	r1, r3, #1
 800ee9c:	7011      	strb	r1, [r2, #0]
 800ee9e:	0018      	movs	r0, r3
 800eea0:	4950      	ldr	r1, [pc, #320]	; (800efe4 <SecureElementInit+0x370>)
 800eea2:	238b      	movs	r3, #139	; 0x8b
 800eea4:	009a      	lsls	r2, r3, #2
 800eea6:	0003      	movs	r3, r0
 800eea8:	011b      	lsls	r3, r3, #4
 800eeaa:	181b      	adds	r3, r3, r0
 800eeac:	18cb      	adds	r3, r1, r3
 800eeae:	189b      	adds	r3, r3, r2
 800eeb0:	2285      	movs	r2, #133	; 0x85
 800eeb2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 800eeb4:	193b      	adds	r3, r7, r4
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	193a      	adds	r2, r7, r4
 800eeba:	1c59      	adds	r1, r3, #1
 800eebc:	7011      	strb	r1, [r2, #0]
 800eebe:	0018      	movs	r0, r3
 800eec0:	4948      	ldr	r1, [pc, #288]	; (800efe4 <SecureElementInit+0x370>)
 800eec2:	238b      	movs	r3, #139	; 0x8b
 800eec4:	009a      	lsls	r2, r3, #2
 800eec6:	0003      	movs	r3, r0
 800eec8:	011b      	lsls	r3, r3, #4
 800eeca:	181b      	adds	r3, r3, r0
 800eecc:	18cb      	adds	r3, r1, r3
 800eece:	189b      	adds	r3, r3, r2
 800eed0:	2286      	movs	r2, #134	; 0x86
 800eed2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 800eed4:	193b      	adds	r3, r7, r4
 800eed6:	781b      	ldrb	r3, [r3, #0]
 800eed8:	193a      	adds	r2, r7, r4
 800eeda:	1c59      	adds	r1, r3, #1
 800eedc:	7011      	strb	r1, [r2, #0]
 800eede:	0018      	movs	r0, r3
 800eee0:	4940      	ldr	r1, [pc, #256]	; (800efe4 <SecureElementInit+0x370>)
 800eee2:	238b      	movs	r3, #139	; 0x8b
 800eee4:	009a      	lsls	r2, r3, #2
 800eee6:	0003      	movs	r3, r0
 800eee8:	011b      	lsls	r3, r3, #4
 800eeea:	181b      	adds	r3, r3, r0
 800eeec:	18cb      	adds	r3, r1, r3
 800eeee:	189b      	adds	r3, r3, r2
 800eef0:	2287      	movs	r2, #135	; 0x87
 800eef2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 800eef4:	193b      	adds	r3, r7, r4
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	193a      	adds	r2, r7, r4
 800eefa:	1c59      	adds	r1, r3, #1
 800eefc:	7011      	strb	r1, [r2, #0]
 800eefe:	0018      	movs	r0, r3
 800ef00:	4938      	ldr	r1, [pc, #224]	; (800efe4 <SecureElementInit+0x370>)
 800ef02:	238b      	movs	r3, #139	; 0x8b
 800ef04:	009a      	lsls	r2, r3, #2
 800ef06:	0003      	movs	r3, r0
 800ef08:	011b      	lsls	r3, r3, #4
 800ef0a:	181b      	adds	r3, r3, r0
 800ef0c:	18cb      	adds	r3, r1, r3
 800ef0e:	189b      	adds	r3, r3, r2
 800ef10:	2288      	movs	r2, #136	; 0x88
 800ef12:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 800ef14:	193b      	adds	r3, r7, r4
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	193a      	adds	r2, r7, r4
 800ef1a:	1c59      	adds	r1, r3, #1
 800ef1c:	7011      	strb	r1, [r2, #0]
 800ef1e:	0018      	movs	r0, r3
 800ef20:	4930      	ldr	r1, [pc, #192]	; (800efe4 <SecureElementInit+0x370>)
 800ef22:	238b      	movs	r3, #139	; 0x8b
 800ef24:	009a      	lsls	r2, r3, #2
 800ef26:	0003      	movs	r3, r0
 800ef28:	011b      	lsls	r3, r3, #4
 800ef2a:	181b      	adds	r3, r3, r0
 800ef2c:	18cb      	adds	r3, r1, r3
 800ef2e:	189b      	adds	r3, r3, r2
 800ef30:	2289      	movs	r2, #137	; 0x89
 800ef32:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 800ef34:	193b      	adds	r3, r7, r4
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	193a      	adds	r2, r7, r4
 800ef3a:	1c59      	adds	r1, r3, #1
 800ef3c:	7011      	strb	r1, [r2, #0]
 800ef3e:	0018      	movs	r0, r3
 800ef40:	4928      	ldr	r1, [pc, #160]	; (800efe4 <SecureElementInit+0x370>)
 800ef42:	238b      	movs	r3, #139	; 0x8b
 800ef44:	009a      	lsls	r2, r3, #2
 800ef46:	0003      	movs	r3, r0
 800ef48:	011b      	lsls	r3, r3, #4
 800ef4a:	181b      	adds	r3, r3, r0
 800ef4c:	18cb      	adds	r3, r1, r3
 800ef4e:	189b      	adds	r3, r3, r2
 800ef50:	228a      	movs	r2, #138	; 0x8a
 800ef52:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 800ef54:	193b      	adds	r3, r7, r4
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	193a      	adds	r2, r7, r4
 800ef5a:	1c59      	adds	r1, r3, #1
 800ef5c:	7011      	strb	r1, [r2, #0]
 800ef5e:	0018      	movs	r0, r3
 800ef60:	4920      	ldr	r1, [pc, #128]	; (800efe4 <SecureElementInit+0x370>)
 800ef62:	238b      	movs	r3, #139	; 0x8b
 800ef64:	009a      	lsls	r2, r3, #2
 800ef66:	0003      	movs	r3, r0
 800ef68:	011b      	lsls	r3, r3, #4
 800ef6a:	181b      	adds	r3, r3, r0
 800ef6c:	18cb      	adds	r3, r1, r3
 800ef6e:	189b      	adds	r3, r3, r2
 800ef70:	228b      	movs	r2, #139	; 0x8b
 800ef72:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;
 800ef74:	193b      	adds	r3, r7, r4
 800ef76:	781a      	ldrb	r2, [r3, #0]
 800ef78:	481a      	ldr	r0, [pc, #104]	; (800efe4 <SecureElementInit+0x370>)
 800ef7a:	238b      	movs	r3, #139	; 0x8b
 800ef7c:	0099      	lsls	r1, r3, #2
 800ef7e:	0013      	movs	r3, r2
 800ef80:	011b      	lsls	r3, r3, #4
 800ef82:	189b      	adds	r3, r3, r2
 800ef84:	18c3      	adds	r3, r0, r3
 800ef86:	185b      	adds	r3, r3, r1
 800ef88:	228c      	movs	r2, #140	; 0x8c
 800ef8a:	701a      	strb	r2, [r3, #0]

    // Set standard keys
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 800ef8c:	193b      	adds	r3, r7, r4
 800ef8e:	781a      	ldrb	r2, [r3, #0]
 800ef90:	0013      	movs	r3, r2
 800ef92:	011b      	lsls	r3, r3, #4
 800ef94:	189b      	adds	r3, r3, r2
 800ef96:	228a      	movs	r2, #138	; 0x8a
 800ef98:	0092      	lsls	r2, r2, #2
 800ef9a:	189a      	adds	r2, r3, r2
 800ef9c:	4b11      	ldr	r3, [pc, #68]	; (800efe4 <SecureElementInit+0x370>)
 800ef9e:	18d3      	adds	r3, r2, r3
 800efa0:	3305      	adds	r3, #5
 800efa2:	1979      	adds	r1, r7, r5
 800efa4:	2210      	movs	r2, #16
 800efa6:	0018      	movs	r0, r3
 800efa8:	f00c fae0 	bl	801b56c <memcpy1>

    memset1( SeNvmCtx.DevEui, 0, SE_EUI_SIZE );
 800efac:	4b0d      	ldr	r3, [pc, #52]	; (800efe4 <SecureElementInit+0x370>)
 800efae:	2210      	movs	r2, #16
 800efb0:	2100      	movs	r1, #0
 800efb2:	0018      	movs	r0, r3
 800efb4:	f00c fb16 	bl	801b5e4 <memset1>
    memset1( SeNvmCtx.JoinEui, 0, SE_EUI_SIZE );
 800efb8:	4b0b      	ldr	r3, [pc, #44]	; (800efe8 <SecureElementInit+0x374>)
 800efba:	2210      	movs	r2, #16
 800efbc:	2100      	movs	r1, #0
 800efbe:	0018      	movs	r0, r3
 800efc0:	f00c fb10 	bl	801b5e4 <memset1>

    // Assign callback
    if( seNvmCtxChanged != 0 )
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d003      	beq.n	800efd2 <SecureElementInit+0x35e>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
 800efca:	4b08      	ldr	r3, [pc, #32]	; (800efec <SecureElementInit+0x378>)
 800efcc:	687a      	ldr	r2, [r7, #4]
 800efce:	601a      	str	r2, [r3, #0]
 800efd0:	e002      	b.n	800efd8 <SecureElementInit+0x364>
    }
    else
    {
        SeNvmCtxChanged = DummyCB;
 800efd2:	4b06      	ldr	r3, [pc, #24]	; (800efec <SecureElementInit+0x378>)
 800efd4:	4a06      	ldr	r2, [pc, #24]	; (800eff0 <SecureElementInit+0x37c>)
 800efd6:	601a      	str	r2, [r3, #0]
    }

    return SECURE_ELEMENT_SUCCESS;
 800efd8:	2300      	movs	r3, #0
}
 800efda:	0018      	movs	r0, r3
 800efdc:	46bd      	mov	sp, r7
 800efde:	b008      	add	sp, #32
 800efe0:	bdb0      	pop	{r4, r5, r7, pc}
 800efe2:	46c0      	nop			; (mov r8, r8)
 800efe4:	20000524 	.word	0x20000524
 800efe8:	20000534 	.word	0x20000534
 800efec:	200008e8 	.word	0x200008e8
 800eff0:	0800eba9 	.word	0x0800eba9

0800eff4 <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b082      	sub	sp, #8
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
    // Restore nvm context
    if( seNvmCtx != 0 )
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d008      	beq.n	800f014 <SecureElementRestoreNvmCtx+0x20>
    {
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 800f002:	23f1      	movs	r3, #241	; 0xf1
 800f004:	009a      	lsls	r2, r3, #2
 800f006:	6879      	ldr	r1, [r7, #4]
 800f008:	4b05      	ldr	r3, [pc, #20]	; (800f020 <SecureElementRestoreNvmCtx+0x2c>)
 800f00a:	0018      	movs	r0, r3
 800f00c:	f00c faae 	bl	801b56c <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 800f010:	2300      	movs	r3, #0
 800f012:	e000      	b.n	800f016 <SecureElementRestoreNvmCtx+0x22>
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f014:	2302      	movs	r3, #2
    }
}
 800f016:	0018      	movs	r0, r3
 800f018:	46bd      	mov	sp, r7
 800f01a:	b002      	add	sp, #8
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	46c0      	nop			; (mov r8, r8)
 800f020:	20000524 	.word	0x20000524

0800f024 <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b082      	sub	sp, #8
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
    *seNvmCtxSize = sizeof( SeNvmCtx );
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	22f1      	movs	r2, #241	; 0xf1
 800f030:	0092      	lsls	r2, r2, #2
 800f032:	601a      	str	r2, [r3, #0]
    return &SeNvmCtx;
 800f034:	4b02      	ldr	r3, [pc, #8]	; (800f040 <SecureElementGetNvmCtx+0x1c>)
}
 800f036:	0018      	movs	r0, r3
 800f038:	46bd      	mov	sp, r7
 800f03a:	b002      	add	sp, #8
 800f03c:	bd80      	pop	{r7, pc}
 800f03e:	46c0      	nop			; (mov r8, r8)
 800f040:	20000524 	.word	0x20000524

0800f044 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800f044:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f046:	b089      	sub	sp, #36	; 0x24
 800f048:	af00      	add	r7, sp, #0
 800f04a:	0002      	movs	r2, r0
 800f04c:	6039      	str	r1, [r7, #0]
 800f04e:	1dfb      	adds	r3, r7, #7
 800f050:	701a      	strb	r2, [r3, #0]
    if( key == NULL )
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d101      	bne.n	800f05c <SecureElementSetKey+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f058:	2302      	movs	r3, #2
 800f05a:	e072      	b.n	800f142 <SecureElementSetKey+0xfe>
    }

    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f05c:	231f      	movs	r3, #31
 800f05e:	18fb      	adds	r3, r7, r3
 800f060:	2200      	movs	r2, #0
 800f062:	701a      	strb	r2, [r3, #0]
 800f064:	e067      	b.n	800f136 <SecureElementSetKey+0xf2>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 800f066:	231f      	movs	r3, #31
 800f068:	18fb      	adds	r3, r7, r3
 800f06a:	781a      	ldrb	r2, [r3, #0]
 800f06c:	4837      	ldr	r0, [pc, #220]	; (800f14c <SecureElementSetKey+0x108>)
 800f06e:	238b      	movs	r3, #139	; 0x8b
 800f070:	0099      	lsls	r1, r3, #2
 800f072:	0013      	movs	r3, r2
 800f074:	011b      	lsls	r3, r3, #4
 800f076:	189b      	adds	r3, r3, r2
 800f078:	18c3      	adds	r3, r0, r3
 800f07a:	185b      	adds	r3, r3, r1
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	1dfa      	adds	r2, r7, #7
 800f080:	7812      	ldrb	r2, [r2, #0]
 800f082:	429a      	cmp	r2, r3
 800f084:	d151      	bne.n	800f12a <SecureElementSetKey+0xe6>
        {
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 800f086:	1dfb      	adds	r3, r7, #7
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	2b80      	cmp	r3, #128	; 0x80
 800f08c:	d00b      	beq.n	800f0a6 <SecureElementSetKey+0x62>
 800f08e:	1dfb      	adds	r3, r7, #7
 800f090:	781b      	ldrb	r3, [r3, #0]
 800f092:	2b83      	cmp	r3, #131	; 0x83
 800f094:	d007      	beq.n	800f0a6 <SecureElementSetKey+0x62>
 800f096:	1dfb      	adds	r3, r7, #7
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	2b86      	cmp	r3, #134	; 0x86
 800f09c:	d003      	beq.n	800f0a6 <SecureElementSetKey+0x62>
 800f09e:	1dfb      	adds	r3, r7, #7
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	2b89      	cmp	r3, #137	; 0x89
 800f0a4:	d12b      	bne.n	800f0fe <SecureElementSetKey+0xba>
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800f0a6:	251e      	movs	r5, #30
 800f0a8:	197b      	adds	r3, r7, r5
 800f0aa:	2206      	movs	r2, #6
 800f0ac:	701a      	strb	r2, [r3, #0]
                uint8_t decryptedKey[16] = { 0 };
 800f0ae:	260c      	movs	r6, #12
 800f0b0:	19bb      	adds	r3, r7, r6
 800f0b2:	0018      	movs	r0, r3
 800f0b4:	2310      	movs	r3, #16
 800f0b6:	001a      	movs	r2, r3
 800f0b8:	2100      	movs	r1, #0
 800f0ba:	f00c fadb 	bl	801b674 <memset>

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800f0be:	197c      	adds	r4, r7, r5
 800f0c0:	19bb      	adds	r3, r7, r6
 800f0c2:	6838      	ldr	r0, [r7, #0]
 800f0c4:	227f      	movs	r2, #127	; 0x7f
 800f0c6:	2110      	movs	r1, #16
 800f0c8:	f000 f8a8 	bl	800f21c <SecureElementAesEncrypt>
 800f0cc:	0003      	movs	r3, r0
 800f0ce:	7023      	strb	r3, [r4, #0]

                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 800f0d0:	231f      	movs	r3, #31
 800f0d2:	18fb      	adds	r3, r7, r3
 800f0d4:	781a      	ldrb	r2, [r3, #0]
 800f0d6:	0013      	movs	r3, r2
 800f0d8:	011b      	lsls	r3, r3, #4
 800f0da:	189b      	adds	r3, r3, r2
 800f0dc:	228a      	movs	r2, #138	; 0x8a
 800f0de:	0092      	lsls	r2, r2, #2
 800f0e0:	189a      	adds	r2, r3, r2
 800f0e2:	4b1a      	ldr	r3, [pc, #104]	; (800f14c <SecureElementSetKey+0x108>)
 800f0e4:	18d3      	adds	r3, r2, r3
 800f0e6:	3305      	adds	r3, #5
 800f0e8:	19b9      	adds	r1, r7, r6
 800f0ea:	2210      	movs	r2, #16
 800f0ec:	0018      	movs	r0, r3
 800f0ee:	f00c fa3d 	bl	801b56c <memcpy1>
                SeNvmCtxChanged( );
 800f0f2:	4b17      	ldr	r3, [pc, #92]	; (800f150 <SecureElementSetKey+0x10c>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	4798      	blx	r3

                return retval;
 800f0f8:	197b      	adds	r3, r7, r5
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	e021      	b.n	800f142 <SecureElementSetKey+0xfe>
            }
            else
            {
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 800f0fe:	231f      	movs	r3, #31
 800f100:	18fb      	adds	r3, r7, r3
 800f102:	781a      	ldrb	r2, [r3, #0]
 800f104:	0013      	movs	r3, r2
 800f106:	011b      	lsls	r3, r3, #4
 800f108:	189b      	adds	r3, r3, r2
 800f10a:	228a      	movs	r2, #138	; 0x8a
 800f10c:	0092      	lsls	r2, r2, #2
 800f10e:	189a      	adds	r2, r3, r2
 800f110:	4b0e      	ldr	r3, [pc, #56]	; (800f14c <SecureElementSetKey+0x108>)
 800f112:	18d3      	adds	r3, r2, r3
 800f114:	3305      	adds	r3, #5
 800f116:	6839      	ldr	r1, [r7, #0]
 800f118:	2210      	movs	r2, #16
 800f11a:	0018      	movs	r0, r3
 800f11c:	f00c fa26 	bl	801b56c <memcpy1>
                SeNvmCtxChanged( );
 800f120:	4b0b      	ldr	r3, [pc, #44]	; (800f150 <SecureElementSetKey+0x10c>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 800f126:	2300      	movs	r3, #0
 800f128:	e00b      	b.n	800f142 <SecureElementSetKey+0xfe>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f12a:	211f      	movs	r1, #31
 800f12c:	187b      	adds	r3, r7, r1
 800f12e:	781a      	ldrb	r2, [r3, #0]
 800f130:	187b      	adds	r3, r7, r1
 800f132:	3201      	adds	r2, #1
 800f134:	701a      	strb	r2, [r3, #0]
 800f136:	231f      	movs	r3, #31
 800f138:	18fb      	adds	r3, r7, r3
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	2b17      	cmp	r3, #23
 800f13e:	d992      	bls.n	800f066 <SecureElementSetKey+0x22>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f140:	2303      	movs	r3, #3
}
 800f142:	0018      	movs	r0, r3
 800f144:	46bd      	mov	sp, r7
 800f146:	b009      	add	sp, #36	; 0x24
 800f148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f14a:	46c0      	nop			; (mov r8, r8)
 800f14c:	20000524 	.word	0x20000524
 800f150:	200008e8 	.word	0x200008e8

0800f154 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 800f154:	b590      	push	{r4, r7, lr}
 800f156:	b087      	sub	sp, #28
 800f158:	af02      	add	r7, sp, #8
 800f15a:	60f8      	str	r0, [r7, #12]
 800f15c:	60b9      	str	r1, [r7, #8]
 800f15e:	0019      	movs	r1, r3
 800f160:	1dbb      	adds	r3, r7, #6
 800f162:	801a      	strh	r2, [r3, #0]
 800f164:	1d7b      	adds	r3, r7, #5
 800f166:	1c0a      	adds	r2, r1, #0
 800f168:	701a      	strb	r2, [r3, #0]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800f16a:	1d7b      	adds	r3, r7, #5
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	2b7e      	cmp	r3, #126	; 0x7e
 800f170:	d901      	bls.n	800f176 <SecureElementComputeAesCmac+0x22>
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f172:	2303      	movs	r3, #3
 800f174:	e00b      	b.n	800f18e <SecureElementComputeAesCmac+0x3a>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800f176:	1d7b      	adds	r3, r7, #5
 800f178:	781c      	ldrb	r4, [r3, #0]
 800f17a:	1dbb      	adds	r3, r7, #6
 800f17c:	881a      	ldrh	r2, [r3, #0]
 800f17e:	68b9      	ldr	r1, [r7, #8]
 800f180:	68f8      	ldr	r0, [r7, #12]
 800f182:	6a3b      	ldr	r3, [r7, #32]
 800f184:	9300      	str	r3, [sp, #0]
 800f186:	0023      	movs	r3, r4
 800f188:	f7ff fd14 	bl	800ebb4 <ComputeCmac>
 800f18c:	0003      	movs	r3, r0
}
 800f18e:	0018      	movs	r0, r3
 800f190:	46bd      	mov	sp, r7
 800f192:	b005      	add	sp, #20
 800f194:	bd90      	pop	{r4, r7, pc}

0800f196 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 800f196:	b5b0      	push	{r4, r5, r7, lr}
 800f198:	b088      	sub	sp, #32
 800f19a:	af02      	add	r7, sp, #8
 800f19c:	60f8      	str	r0, [r7, #12]
 800f19e:	0008      	movs	r0, r1
 800f1a0:	607a      	str	r2, [r7, #4]
 800f1a2:	0019      	movs	r1, r3
 800f1a4:	230a      	movs	r3, #10
 800f1a6:	18fb      	adds	r3, r7, r3
 800f1a8:	1c02      	adds	r2, r0, #0
 800f1aa:	801a      	strh	r2, [r3, #0]
 800f1ac:	2309      	movs	r3, #9
 800f1ae:	18fb      	adds	r3, r7, r3
 800f1b0:	1c0a      	adds	r2, r1, #0
 800f1b2:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL )
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d101      	bne.n	800f1be <SecureElementVerifyAesCmac+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f1ba:	2302      	movs	r3, #2
 800f1bc:	e029      	b.n	800f212 <SecureElementVerifyAesCmac+0x7c>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800f1be:	2517      	movs	r5, #23
 800f1c0:	197b      	adds	r3, r7, r5
 800f1c2:	2206      	movs	r2, #6
 800f1c4:	701a      	strb	r2, [r3, #0]
    uint32_t compCmac = 0;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	613b      	str	r3, [r7, #16]
    retval = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800f1ca:	197c      	adds	r4, r7, r5
 800f1cc:	2309      	movs	r3, #9
 800f1ce:	18fb      	adds	r3, r7, r3
 800f1d0:	7818      	ldrb	r0, [r3, #0]
 800f1d2:	230a      	movs	r3, #10
 800f1d4:	18fb      	adds	r3, r7, r3
 800f1d6:	881a      	ldrh	r2, [r3, #0]
 800f1d8:	68f9      	ldr	r1, [r7, #12]
 800f1da:	2310      	movs	r3, #16
 800f1dc:	18fb      	adds	r3, r7, r3
 800f1de:	9300      	str	r3, [sp, #0]
 800f1e0:	0003      	movs	r3, r0
 800f1e2:	2000      	movs	r0, #0
 800f1e4:	f7ff fce6 	bl	800ebb4 <ComputeCmac>
 800f1e8:	0003      	movs	r3, r0
 800f1ea:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f1ec:	197b      	adds	r3, r7, r5
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d003      	beq.n	800f1fc <SecureElementVerifyAesCmac+0x66>
    {
        return retval;
 800f1f4:	2317      	movs	r3, #23
 800f1f6:	18fb      	adds	r3, r7, r3
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	e00a      	b.n	800f212 <SecureElementVerifyAesCmac+0x7c>
    }

    if( expectedCmac != compCmac )
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	429a      	cmp	r2, r3
 800f202:	d003      	beq.n	800f20c <SecureElementVerifyAesCmac+0x76>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800f204:	2317      	movs	r3, #23
 800f206:	18fb      	adds	r3, r7, r3
 800f208:	2201      	movs	r2, #1
 800f20a:	701a      	strb	r2, [r3, #0]
    }

    return retval;
 800f20c:	2317      	movs	r3, #23
 800f20e:	18fb      	adds	r3, r7, r3
 800f210:	781b      	ldrb	r3, [r3, #0]
}
 800f212:	0018      	movs	r0, r3
 800f214:	46bd      	mov	sp, r7
 800f216:	b006      	add	sp, #24
 800f218:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f21c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 800f21c:	b5b0      	push	{r4, r5, r7, lr}
 800f21e:	b086      	sub	sp, #24
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	0008      	movs	r0, r1
 800f226:	0011      	movs	r1, r2
 800f228:	607b      	str	r3, [r7, #4]
 800f22a:	230a      	movs	r3, #10
 800f22c:	18fb      	adds	r3, r7, r3
 800f22e:	1c02      	adds	r2, r0, #0
 800f230:	801a      	strh	r2, [r3, #0]
 800f232:	2309      	movs	r3, #9
 800f234:	18fb      	adds	r3, r7, r3
 800f236:	1c0a      	adds	r2, r1, #0
 800f238:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || encBuffer == NULL )
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d002      	beq.n	800f246 <SecureElementAesEncrypt+0x2a>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d101      	bne.n	800f24a <SecureElementAesEncrypt+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f246:	2302      	movs	r3, #2
 800f248:	e04c      	b.n	800f2e4 <SecureElementAesEncrypt+0xc8>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800f24a:	230a      	movs	r3, #10
 800f24c:	18fb      	adds	r3, r7, r3
 800f24e:	881b      	ldrh	r3, [r3, #0]
 800f250:	220f      	movs	r2, #15
 800f252:	4013      	ands	r3, r2
 800f254:	b29b      	uxth	r3, r3
 800f256:	2b00      	cmp	r3, #0
 800f258:	d001      	beq.n	800f25e <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f25a:	2305      	movs	r3, #5
 800f25c:	e042      	b.n	800f2e4 <SecureElementAesEncrypt+0xc8>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 800f25e:	4b23      	ldr	r3, [pc, #140]	; (800f2ec <SecureElementAesEncrypt+0xd0>)
 800f260:	22f0      	movs	r2, #240	; 0xf0
 800f262:	2100      	movs	r1, #0
 800f264:	0018      	movs	r0, r3
 800f266:	f00c f9bd 	bl	801b5e4 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800f26a:	2516      	movs	r5, #22
 800f26c:	197c      	adds	r4, r7, r5
 800f26e:	2310      	movs	r3, #16
 800f270:	18fa      	adds	r2, r7, r3
 800f272:	2309      	movs	r3, #9
 800f274:	18fb      	adds	r3, r7, r3
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	0011      	movs	r1, r2
 800f27a:	0018      	movs	r0, r3
 800f27c:	f7ff fc56 	bl	800eb2c <GetKeyByID>
 800f280:	0003      	movs	r3, r0
 800f282:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f284:	197b      	adds	r3, r7, r5
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d128      	bne.n	800f2de <SecureElementAesEncrypt+0xc2>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	3301      	adds	r3, #1
 800f290:	4a16      	ldr	r2, [pc, #88]	; (800f2ec <SecureElementAesEncrypt+0xd0>)
 800f292:	2110      	movs	r1, #16
 800f294:	0018      	movs	r0, r3
 800f296:	f7ff f87d 	bl	800e394 <aes_set_key>

        uint8_t block = 0;
 800f29a:	2317      	movs	r3, #23
 800f29c:	18fb      	adds	r3, r7, r3
 800f29e:	2200      	movs	r2, #0
 800f2a0:	701a      	strb	r2, [r3, #0]

        while( size != 0 )
 800f2a2:	e017      	b.n	800f2d4 <SecureElementAesEncrypt+0xb8>
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 800f2a4:	2417      	movs	r4, #23
 800f2a6:	193b      	adds	r3, r7, r4
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	68fa      	ldr	r2, [r7, #12]
 800f2ac:	18d0      	adds	r0, r2, r3
 800f2ae:	193b      	adds	r3, r7, r4
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	687a      	ldr	r2, [r7, #4]
 800f2b4:	18d3      	adds	r3, r2, r3
 800f2b6:	4a0d      	ldr	r2, [pc, #52]	; (800f2ec <SecureElementAesEncrypt+0xd0>)
 800f2b8:	0019      	movs	r1, r3
 800f2ba:	f7ff f99d 	bl	800e5f8 <aes_encrypt>
            block = block + 16;
 800f2be:	193b      	adds	r3, r7, r4
 800f2c0:	193a      	adds	r2, r7, r4
 800f2c2:	7812      	ldrb	r2, [r2, #0]
 800f2c4:	3210      	adds	r2, #16
 800f2c6:	701a      	strb	r2, [r3, #0]
            size = size - 16;
 800f2c8:	220a      	movs	r2, #10
 800f2ca:	18bb      	adds	r3, r7, r2
 800f2cc:	18ba      	adds	r2, r7, r2
 800f2ce:	8812      	ldrh	r2, [r2, #0]
 800f2d0:	3a10      	subs	r2, #16
 800f2d2:	801a      	strh	r2, [r3, #0]
        while( size != 0 )
 800f2d4:	230a      	movs	r3, #10
 800f2d6:	18fb      	adds	r3, r7, r3
 800f2d8:	881b      	ldrh	r3, [r3, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d1e2      	bne.n	800f2a4 <SecureElementAesEncrypt+0x88>
        }
    }
    return retval;
 800f2de:	2316      	movs	r3, #22
 800f2e0:	18fb      	adds	r3, r7, r3
 800f2e2:	781b      	ldrb	r3, [r3, #0]
}
 800f2e4:	0018      	movs	r0, r3
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	b006      	add	sp, #24
 800f2ea:	bdb0      	pop	{r4, r5, r7, pc}
 800f2ec:	20000544 	.word	0x20000544

0800f2f0 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 800f2f0:	b5b0      	push	{r4, r5, r7, lr}
 800f2f2:	b08a      	sub	sp, #40	; 0x28
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	60b9      	str	r1, [r7, #8]
 800f2fa:	0019      	movs	r1, r3
 800f2fc:	1dfb      	adds	r3, r7, #7
 800f2fe:	701a      	strb	r2, [r3, #0]
 800f300:	1dbb      	adds	r3, r7, #6
 800f302:	1c0a      	adds	r2, r1, #0
 800f304:	701a      	strb	r2, [r3, #0]
    if( input == NULL )
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d101      	bne.n	800f310 <SecureElementDeriveAndStoreKey+0x20>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f30c:	2302      	movs	r3, #2
 800f30e:	e048      	b.n	800f3a2 <SecureElementDeriveAndStoreKey+0xb2>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800f310:	2327      	movs	r3, #39	; 0x27
 800f312:	18fb      	adds	r3, r7, r3
 800f314:	2206      	movs	r2, #6
 800f316:	701a      	strb	r2, [r3, #0]
    uint8_t key[16] = { 0 };
 800f318:	2314      	movs	r3, #20
 800f31a:	18fb      	adds	r3, r7, r3
 800f31c:	0018      	movs	r0, r3
 800f31e:	2310      	movs	r3, #16
 800f320:	001a      	movs	r2, r3
 800f322:	2100      	movs	r1, #0
 800f324:	f00c f9a6 	bl	801b674 <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 800f328:	1dbb      	adds	r3, r7, #6
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	2b7f      	cmp	r3, #127	; 0x7f
 800f32e:	d10e      	bne.n	800f34e <SecureElementDeriveAndStoreKey+0x5e>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 800f330:	1dfb      	adds	r3, r7, #7
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d104      	bne.n	800f342 <SecureElementDeriveAndStoreKey+0x52>
 800f338:	230c      	movs	r3, #12
 800f33a:	18fb      	adds	r3, r7, r3
 800f33c:	789b      	ldrb	r3, [r3, #2]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d003      	beq.n	800f34a <SecureElementDeriveAndStoreKey+0x5a>
 800f342:	1dfb      	adds	r3, r7, #7
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	2b02      	cmp	r3, #2
 800f348:	d101      	bne.n	800f34e <SecureElementDeriveAndStoreKey+0x5e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f34a:	2303      	movs	r3, #3
 800f34c:	e029      	b.n	800f3a2 <SecureElementDeriveAndStoreKey+0xb2>
        }
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800f34e:	2527      	movs	r5, #39	; 0x27
 800f350:	197c      	adds	r4, r7, r5
 800f352:	2314      	movs	r3, #20
 800f354:	18f9      	adds	r1, r7, r3
 800f356:	1dfb      	adds	r3, r7, #7
 800f358:	781a      	ldrb	r2, [r3, #0]
 800f35a:	68b8      	ldr	r0, [r7, #8]
 800f35c:	000b      	movs	r3, r1
 800f35e:	2110      	movs	r1, #16
 800f360:	f7ff ff5c 	bl	800f21c <SecureElementAesEncrypt>
 800f364:	0003      	movs	r3, r0
 800f366:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f368:	197b      	adds	r3, r7, r5
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d003      	beq.n	800f378 <SecureElementDeriveAndStoreKey+0x88>
    {
        return retval;
 800f370:	2327      	movs	r3, #39	; 0x27
 800f372:	18fb      	adds	r3, r7, r3
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	e014      	b.n	800f3a2 <SecureElementDeriveAndStoreKey+0xb2>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800f378:	2527      	movs	r5, #39	; 0x27
 800f37a:	197c      	adds	r4, r7, r5
 800f37c:	2314      	movs	r3, #20
 800f37e:	18fa      	adds	r2, r7, r3
 800f380:	1dbb      	adds	r3, r7, #6
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	0011      	movs	r1, r2
 800f386:	0018      	movs	r0, r3
 800f388:	f7ff fe5c 	bl	800f044 <SecureElementSetKey>
 800f38c:	0003      	movs	r3, r0
 800f38e:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f390:	197b      	adds	r3, r7, r5
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d003      	beq.n	800f3a0 <SecureElementDeriveAndStoreKey+0xb0>
    {
        return retval;
 800f398:	2327      	movs	r3, #39	; 0x27
 800f39a:	18fb      	adds	r3, r7, r3
 800f39c:	781b      	ldrb	r3, [r3, #0]
 800f39e:	e000      	b.n	800f3a2 <SecureElementDeriveAndStoreKey+0xb2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f3a0:	2300      	movs	r3, #0
}
 800f3a2:	0018      	movs	r0, r3
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	b00a      	add	sp, #40	; 0x28
 800f3a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f3ac <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b082      	sub	sp, #8
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d101      	bne.n	800f3be <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f3ba:	2302      	movs	r3, #2
 800f3bc:	e006      	b.n	800f3cc <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random( );
 800f3be:	4b05      	ldr	r3, [pc, #20]	; (800f3d4 <SecureElementRandomNumber+0x28>)
 800f3c0:	69db      	ldr	r3, [r3, #28]
 800f3c2:	4798      	blx	r3
 800f3c4:	0002      	movs	r2, r0
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f3ca:	2300      	movs	r3, #0
}
 800f3cc:	0018      	movs	r0, r3
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	b002      	add	sp, #8
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	0801ca04 	.word	0x0801ca04

0800f3d8 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d101      	bne.n	800f3ea <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f3e6:	2302      	movs	r3, #2
 800f3e8:	e009      	b.n	800f3fe <SecureElementSetDevEui+0x26>
    }
    memcpy1( SeNvmCtx.DevEui, devEui, SE_EUI_SIZE );
 800f3ea:	6879      	ldr	r1, [r7, #4]
 800f3ec:	4b06      	ldr	r3, [pc, #24]	; (800f408 <SecureElementSetDevEui+0x30>)
 800f3ee:	2210      	movs	r2, #16
 800f3f0:	0018      	movs	r0, r3
 800f3f2:	f00c f8bb 	bl	801b56c <memcpy1>
    SeNvmCtxChanged( );
 800f3f6:	4b05      	ldr	r3, [pc, #20]	; (800f40c <SecureElementSetDevEui+0x34>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 800f3fc:	2300      	movs	r3, #0
}
 800f3fe:	0018      	movs	r0, r3
 800f400:	46bd      	mov	sp, r7
 800f402:	b002      	add	sp, #8
 800f404:	bd80      	pop	{r7, pc}
 800f406:	46c0      	nop			; (mov r8, r8)
 800f408:	20000524 	.word	0x20000524
 800f40c:	200008e8 	.word	0x200008e8

0800f410 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800f410:	b580      	push	{r7, lr}
 800f412:	af00      	add	r7, sp, #0
    return SeNvmCtx.DevEui;
 800f414:	4b01      	ldr	r3, [pc, #4]	; (800f41c <SecureElementGetDevEui+0xc>)
}
 800f416:	0018      	movs	r0, r3
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	20000524 	.word	0x20000524

0800f420 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d101      	bne.n	800f432 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f42e:	2302      	movs	r3, #2
 800f430:	e009      	b.n	800f446 <SecureElementSetJoinEui+0x26>
    }
    memcpy1( SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE );
 800f432:	6879      	ldr	r1, [r7, #4]
 800f434:	4b06      	ldr	r3, [pc, #24]	; (800f450 <SecureElementSetJoinEui+0x30>)
 800f436:	2210      	movs	r2, #16
 800f438:	0018      	movs	r0, r3
 800f43a:	f00c f897 	bl	801b56c <memcpy1>
    SeNvmCtxChanged( );
 800f43e:	4b05      	ldr	r3, [pc, #20]	; (800f454 <SecureElementSetJoinEui+0x34>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 800f444:	2300      	movs	r3, #0
}
 800f446:	0018      	movs	r0, r3
 800f448:	46bd      	mov	sp, r7
 800f44a:	b002      	add	sp, #8
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	46c0      	nop			; (mov r8, r8)
 800f450:	20000534 	.word	0x20000534
 800f454:	200008e8 	.word	0x200008e8

0800f458 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	af00      	add	r7, sp, #0
    return SeNvmCtx.JoinEui;
 800f45c:	4b01      	ldr	r3, [pc, #4]	; (800f464 <SecureElementGetJoinEui+0xc>)
}
 800f45e:	0018      	movs	r0, r3
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}
 800f464:	20000534 	.word	0x20000534

0800f468 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800f468:	b5b0      	push	{r4, r5, r7, lr}
 800f46a:	b084      	sub	sp, #16
 800f46c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800f46e:	f00b fea4 	bl	801b1ba <TimerGetCurrentTime>
 800f472:	0002      	movs	r2, r0
 800f474:	4b1e      	ldr	r3, [pc, #120]	; (800f4f0 <OnRadioTxDone+0x88>)
 800f476:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800f478:	4d1e      	ldr	r5, [pc, #120]	; (800f4f4 <OnRadioTxDone+0x8c>)
 800f47a:	23ce      	movs	r3, #206	; 0xce
 800f47c:	009c      	lsls	r4, r3, #2
 800f47e:	003b      	movs	r3, r7
 800f480:	0018      	movs	r0, r3
 800f482:	f00b fcb0 	bl	801ade6 <SysTimeGet>
 800f486:	003a      	movs	r2, r7
 800f488:	192b      	adds	r3, r5, r4
 800f48a:	ca03      	ldmia	r2!, {r0, r1}
 800f48c:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800f48e:	4b1a      	ldr	r3, [pc, #104]	; (800f4f8 <OnRadioTxDone+0x90>)
 800f490:	781a      	ldrb	r2, [r3, #0]
 800f492:	2110      	movs	r1, #16
 800f494:	430a      	orrs	r2, r1
 800f496:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f498:	4a16      	ldr	r2, [pc, #88]	; (800f4f4 <OnRadioTxDone+0x8c>)
 800f49a:	23d2      	movs	r3, #210	; 0xd2
 800f49c:	009b      	lsls	r3, r3, #2
 800f49e:	58d3      	ldr	r3, [r2, r3]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d00c      	beq.n	800f4be <OnRadioTxDone+0x56>
 800f4a4:	4a13      	ldr	r2, [pc, #76]	; (800f4f4 <OnRadioTxDone+0x8c>)
 800f4a6:	23d2      	movs	r3, #210	; 0xd2
 800f4a8:	009b      	lsls	r3, r3, #2
 800f4aa:	58d3      	ldr	r3, [r2, r3]
 800f4ac:	68db      	ldr	r3, [r3, #12]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d005      	beq.n	800f4be <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f4b2:	4a10      	ldr	r2, [pc, #64]	; (800f4f4 <OnRadioTxDone+0x8c>)
 800f4b4:	23d2      	movs	r3, #210	; 0xd2
 800f4b6:	009b      	lsls	r3, r3, #2
 800f4b8:	58d3      	ldr	r3, [r2, r3]
 800f4ba:	68db      	ldr	r3, [r3, #12]
 800f4bc:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 800f4be:	2208      	movs	r2, #8
 800f4c0:	0014      	movs	r4, r2
 800f4c2:	18bb      	adds	r3, r7, r2
 800f4c4:	0018      	movs	r0, r3
 800f4c6:	f00b fcc7 	bl	801ae58 <SysTimeGetMcuTime>
 800f4ca:	0022      	movs	r2, r4
 800f4cc:	18bb      	adds	r3, r7, r2
 800f4ce:	6819      	ldr	r1, [r3, #0]
 800f4d0:	18bb      	adds	r3, r7, r2
 800f4d2:	2204      	movs	r2, #4
 800f4d4:	5e9b      	ldrsh	r3, [r3, r2]
 800f4d6:	001a      	movs	r2, r3
 800f4d8:	4b08      	ldr	r3, [pc, #32]	; (800f4fc <OnRadioTxDone+0x94>)
 800f4da:	0018      	movs	r0, r3
 800f4dc:	f00b ff3e 	bl	801b35c <TraceSend>
 800f4e0:	4b07      	ldr	r3, [pc, #28]	; (800f500 <OnRadioTxDone+0x98>)
 800f4e2:	0018      	movs	r0, r3
 800f4e4:	f00b ff3a 	bl	801b35c <TraceSend>
#endif
}
 800f4e8:	46c0      	nop			; (mov r8, r8)
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	b004      	add	sp, #16
 800f4ee:	bdb0      	pop	{r4, r5, r7, pc}
 800f4f0:	20001640 	.word	0x20001640
 800f4f4:	200008ec 	.word	0x200008ec
 800f4f8:	20000f50 	.word	0x20000f50
 800f4fc:	0801c2a4 	.word	0x0801c2a4
 800f500:	0801c2b0 	.word	0x0801c2b0

0800f504 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800f504:	b5b0      	push	{r4, r5, r7, lr}
 800f506:	b086      	sub	sp, #24
 800f508:	af00      	add	r7, sp, #0
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	000c      	movs	r4, r1
 800f50e:	0010      	movs	r0, r2
 800f510:	0019      	movs	r1, r3
 800f512:	250a      	movs	r5, #10
 800f514:	197b      	adds	r3, r7, r5
 800f516:	1c22      	adds	r2, r4, #0
 800f518:	801a      	strh	r2, [r3, #0]
 800f51a:	2408      	movs	r4, #8
 800f51c:	193b      	adds	r3, r7, r4
 800f51e:	1c02      	adds	r2, r0, #0
 800f520:	801a      	strh	r2, [r3, #0]
 800f522:	1dfb      	adds	r3, r7, #7
 800f524:	1c0a      	adds	r2, r1, #0
 800f526:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f528:	f00b fe47 	bl	801b1ba <TimerGetCurrentTime>
 800f52c:	0002      	movs	r2, r0
 800f52e:	4b21      	ldr	r3, [pc, #132]	; (800f5b4 <OnRadioRxDone+0xb0>)
 800f530:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800f532:	4b20      	ldr	r3, [pc, #128]	; (800f5b4 <OnRadioRxDone+0xb0>)
 800f534:	68fa      	ldr	r2, [r7, #12]
 800f536:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800f538:	4b1e      	ldr	r3, [pc, #120]	; (800f5b4 <OnRadioRxDone+0xb0>)
 800f53a:	197a      	adds	r2, r7, r5
 800f53c:	8812      	ldrh	r2, [r2, #0]
 800f53e:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800f540:	4b1c      	ldr	r3, [pc, #112]	; (800f5b4 <OnRadioRxDone+0xb0>)
 800f542:	193a      	adds	r2, r7, r4
 800f544:	8812      	ldrh	r2, [r2, #0]
 800f546:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800f548:	4b1a      	ldr	r3, [pc, #104]	; (800f5b4 <OnRadioRxDone+0xb0>)
 800f54a:	1dfa      	adds	r2, r7, #7
 800f54c:	7812      	ldrb	r2, [r2, #0]
 800f54e:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f550:	4b19      	ldr	r3, [pc, #100]	; (800f5b8 <OnRadioRxDone+0xb4>)
 800f552:	781a      	ldrb	r2, [r3, #0]
 800f554:	2108      	movs	r1, #8
 800f556:	430a      	orrs	r2, r1
 800f558:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f55a:	4a18      	ldr	r2, [pc, #96]	; (800f5bc <OnRadioRxDone+0xb8>)
 800f55c:	23d2      	movs	r3, #210	; 0xd2
 800f55e:	009b      	lsls	r3, r3, #2
 800f560:	58d3      	ldr	r3, [r2, r3]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d00c      	beq.n	800f580 <OnRadioRxDone+0x7c>
 800f566:	4a15      	ldr	r2, [pc, #84]	; (800f5bc <OnRadioRxDone+0xb8>)
 800f568:	23d2      	movs	r3, #210	; 0xd2
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	58d3      	ldr	r3, [r2, r3]
 800f56e:	68db      	ldr	r3, [r3, #12]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d005      	beq.n	800f580 <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f574:	4a11      	ldr	r2, [pc, #68]	; (800f5bc <OnRadioRxDone+0xb8>)
 800f576:	23d2      	movs	r3, #210	; 0xd2
 800f578:	009b      	lsls	r3, r3, #2
 800f57a:	58d3      	ldr	r3, [r2, r3]
 800f57c:	68db      	ldr	r3, [r3, #12]
 800f57e:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
 800f580:	2210      	movs	r2, #16
 800f582:	0014      	movs	r4, r2
 800f584:	18bb      	adds	r3, r7, r2
 800f586:	0018      	movs	r0, r3
 800f588:	f00b fc66 	bl	801ae58 <SysTimeGetMcuTime>
 800f58c:	0022      	movs	r2, r4
 800f58e:	18bb      	adds	r3, r7, r2
 800f590:	6819      	ldr	r1, [r3, #0]
 800f592:	18bb      	adds	r3, r7, r2
 800f594:	2204      	movs	r2, #4
 800f596:	5e9b      	ldrsh	r3, [r3, r2]
 800f598:	001a      	movs	r2, r3
 800f59a:	4b09      	ldr	r3, [pc, #36]	; (800f5c0 <OnRadioRxDone+0xbc>)
 800f59c:	0018      	movs	r0, r3
 800f59e:	f00b fedd 	bl	801b35c <TraceSend>
 800f5a2:	4b08      	ldr	r3, [pc, #32]	; (800f5c4 <OnRadioRxDone+0xc0>)
 800f5a4:	0018      	movs	r0, r3
 800f5a6:	f00b fed9 	bl	801b35c <TraceSend>
#endif
}
 800f5aa:	46c0      	nop			; (mov r8, r8)
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	b006      	add	sp, #24
 800f5b0:	bdb0      	pop	{r4, r5, r7, pc}
 800f5b2:	46c0      	nop			; (mov r8, r8)
 800f5b4:	20001644 	.word	0x20001644
 800f5b8:	20000f50 	.word	0x20000f50
 800f5bc:	200008ec 	.word	0x200008ec
 800f5c0:	0801c2a4 	.word	0x0801c2a4
 800f5c4:	0801c2c0 	.word	0x0801c2c0

0800f5c8 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f5ce:	4b17      	ldr	r3, [pc, #92]	; (800f62c <OnRadioTxTimeout+0x64>)
 800f5d0:	781a      	ldrb	r2, [r3, #0]
 800f5d2:	2104      	movs	r1, #4
 800f5d4:	430a      	orrs	r2, r1
 800f5d6:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f5d8:	4a15      	ldr	r2, [pc, #84]	; (800f630 <OnRadioTxTimeout+0x68>)
 800f5da:	23d2      	movs	r3, #210	; 0xd2
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	58d3      	ldr	r3, [r2, r3]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d00c      	beq.n	800f5fe <OnRadioTxTimeout+0x36>
 800f5e4:	4a12      	ldr	r2, [pc, #72]	; (800f630 <OnRadioTxTimeout+0x68>)
 800f5e6:	23d2      	movs	r3, #210	; 0xd2
 800f5e8:	009b      	lsls	r3, r3, #2
 800f5ea:	58d3      	ldr	r3, [r2, r3]
 800f5ec:	68db      	ldr	r3, [r3, #12]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d005      	beq.n	800f5fe <OnRadioTxTimeout+0x36>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f5f2:	4a0f      	ldr	r2, [pc, #60]	; (800f630 <OnRadioTxTimeout+0x68>)
 800f5f4:	23d2      	movs	r3, #210	; 0xd2
 800f5f6:	009b      	lsls	r3, r3, #2
 800f5f8:	58d3      	ldr	r3, [r2, r3]
 800f5fa:	68db      	ldr	r3, [r3, #12]
 800f5fc:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
 800f5fe:	003b      	movs	r3, r7
 800f600:	0018      	movs	r0, r3
 800f602:	f00b fc29 	bl	801ae58 <SysTimeGetMcuTime>
 800f606:	003b      	movs	r3, r7
 800f608:	6819      	ldr	r1, [r3, #0]
 800f60a:	003b      	movs	r3, r7
 800f60c:	2204      	movs	r2, #4
 800f60e:	5e9b      	ldrsh	r3, [r3, r2]
 800f610:	001a      	movs	r2, r3
 800f612:	4b08      	ldr	r3, [pc, #32]	; (800f634 <OnRadioTxTimeout+0x6c>)
 800f614:	0018      	movs	r0, r3
 800f616:	f00b fea1 	bl	801b35c <TraceSend>
 800f61a:	4b07      	ldr	r3, [pc, #28]	; (800f638 <OnRadioTxTimeout+0x70>)
 800f61c:	0018      	movs	r0, r3
 800f61e:	f00b fe9d 	bl	801b35c <TraceSend>
#endif
}
 800f622:	46c0      	nop			; (mov r8, r8)
 800f624:	46bd      	mov	sp, r7
 800f626:	b002      	add	sp, #8
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	46c0      	nop			; (mov r8, r8)
 800f62c:	20000f50 	.word	0x20000f50
 800f630:	200008ec 	.word	0x200008ec
 800f634:	0801c2a4 	.word	0x0801c2a4
 800f638:	0801c2d0 	.word	0x0801c2d0

0800f63c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f640:	4b0d      	ldr	r3, [pc, #52]	; (800f678 <OnRadioRxError+0x3c>)
 800f642:	781a      	ldrb	r2, [r3, #0]
 800f644:	2102      	movs	r1, #2
 800f646:	430a      	orrs	r2, r1
 800f648:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f64a:	4a0c      	ldr	r2, [pc, #48]	; (800f67c <OnRadioRxError+0x40>)
 800f64c:	23d2      	movs	r3, #210	; 0xd2
 800f64e:	009b      	lsls	r3, r3, #2
 800f650:	58d3      	ldr	r3, [r2, r3]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d00c      	beq.n	800f670 <OnRadioRxError+0x34>
 800f656:	4a09      	ldr	r2, [pc, #36]	; (800f67c <OnRadioRxError+0x40>)
 800f658:	23d2      	movs	r3, #210	; 0xd2
 800f65a:	009b      	lsls	r3, r3, #2
 800f65c:	58d3      	ldr	r3, [r2, r3]
 800f65e:	68db      	ldr	r3, [r3, #12]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d005      	beq.n	800f670 <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f664:	4a05      	ldr	r2, [pc, #20]	; (800f67c <OnRadioRxError+0x40>)
 800f666:	23d2      	movs	r3, #210	; 0xd2
 800f668:	009b      	lsls	r3, r3, #2
 800f66a:	58d3      	ldr	r3, [r2, r3]
 800f66c:	68db      	ldr	r3, [r3, #12]
 800f66e:	4798      	blx	r3
    }
}
 800f670:	46c0      	nop			; (mov r8, r8)
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}
 800f676:	46c0      	nop			; (mov r8, r8)
 800f678:	20000f50 	.word	0x20000f50
 800f67c:	200008ec 	.word	0x200008ec

0800f680 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f686:	4b17      	ldr	r3, [pc, #92]	; (800f6e4 <OnRadioRxTimeout+0x64>)
 800f688:	781a      	ldrb	r2, [r3, #0]
 800f68a:	2101      	movs	r1, #1
 800f68c:	430a      	orrs	r2, r1
 800f68e:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f690:	4a15      	ldr	r2, [pc, #84]	; (800f6e8 <OnRadioRxTimeout+0x68>)
 800f692:	23d2      	movs	r3, #210	; 0xd2
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	58d3      	ldr	r3, [r2, r3]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d00c      	beq.n	800f6b6 <OnRadioRxTimeout+0x36>
 800f69c:	4a12      	ldr	r2, [pc, #72]	; (800f6e8 <OnRadioRxTimeout+0x68>)
 800f69e:	23d2      	movs	r3, #210	; 0xd2
 800f6a0:	009b      	lsls	r3, r3, #2
 800f6a2:	58d3      	ldr	r3, [r2, r3]
 800f6a4:	68db      	ldr	r3, [r3, #12]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d005      	beq.n	800f6b6 <OnRadioRxTimeout+0x36>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f6aa:	4a0f      	ldr	r2, [pc, #60]	; (800f6e8 <OnRadioRxTimeout+0x68>)
 800f6ac:	23d2      	movs	r3, #210	; 0xd2
 800f6ae:	009b      	lsls	r3, r3, #2
 800f6b0:	58d3      	ldr	r3, [r2, r3]
 800f6b2:	68db      	ldr	r3, [r3, #12]
 800f6b4:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
 800f6b6:	003b      	movs	r3, r7
 800f6b8:	0018      	movs	r0, r3
 800f6ba:	f00b fbcd 	bl	801ae58 <SysTimeGetMcuTime>
 800f6be:	003b      	movs	r3, r7
 800f6c0:	6819      	ldr	r1, [r3, #0]
 800f6c2:	003b      	movs	r3, r7
 800f6c4:	2204      	movs	r2, #4
 800f6c6:	5e9b      	ldrsh	r3, [r3, r2]
 800f6c8:	001a      	movs	r2, r3
 800f6ca:	4b08      	ldr	r3, [pc, #32]	; (800f6ec <OnRadioRxTimeout+0x6c>)
 800f6cc:	0018      	movs	r0, r3
 800f6ce:	f00b fe45 	bl	801b35c <TraceSend>
 800f6d2:	4b07      	ldr	r3, [pc, #28]	; (800f6f0 <OnRadioRxTimeout+0x70>)
 800f6d4:	0018      	movs	r0, r3
 800f6d6:	f00b fe41 	bl	801b35c <TraceSend>
#endif
}
 800f6da:	46c0      	nop			; (mov r8, r8)
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	b002      	add	sp, #8
 800f6e0:	bd80      	pop	{r7, pc}
 800f6e2:	46c0      	nop			; (mov r8, r8)
 800f6e4:	20000f50 	.word	0x20000f50
 800f6e8:	200008ec 	.word	0x200008ec
 800f6ec:	0801c2a4 	.word	0x0801c2a4
 800f6f0:	0801c2e0 	.word	0x0801c2e0

0800f6f4 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f6f8:	4b0a      	ldr	r3, [pc, #40]	; (800f724 <UpdateRxSlotIdleState+0x30>)
 800f6fa:	4a0b      	ldr	r2, [pc, #44]	; (800f728 <UpdateRxSlotIdleState+0x34>)
 800f6fc:	589b      	ldr	r3, [r3, r2]
 800f6fe:	22f0      	movs	r2, #240	; 0xf0
 800f700:	5c9b      	ldrb	r3, [r3, r2]
 800f702:	2b02      	cmp	r3, #2
 800f704:	d005      	beq.n	800f712 <UpdateRxSlotIdleState+0x1e>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f706:	4a07      	ldr	r2, [pc, #28]	; (800f724 <UpdateRxSlotIdleState+0x30>)
 800f708:	2390      	movs	r3, #144	; 0x90
 800f70a:	00db      	lsls	r3, r3, #3
 800f70c:	2106      	movs	r1, #6
 800f70e:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f710:	e004      	b.n	800f71c <UpdateRxSlotIdleState+0x28>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f712:	4a04      	ldr	r2, [pc, #16]	; (800f724 <UpdateRxSlotIdleState+0x30>)
 800f714:	2390      	movs	r3, #144	; 0x90
 800f716:	00db      	lsls	r3, r3, #3
 800f718:	2102      	movs	r1, #2
 800f71a:	54d1      	strb	r1, [r2, r3]
}
 800f71c:	46c0      	nop			; (mov r8, r8)
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}
 800f722:	46c0      	nop			; (mov r8, r8)
 800f724:	200008ec 	.word	0x200008ec
 800f728:	00000484 	.word	0x00000484

0800f72c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f732:	4b4a      	ldr	r3, [pc, #296]	; (800f85c <ProcessRadioTxDone+0x130>)
 800f734:	4a4a      	ldr	r2, [pc, #296]	; (800f860 <ProcessRadioTxDone+0x134>)
 800f736:	589b      	ldr	r3, [r3, r2]
 800f738:	22f0      	movs	r2, #240	; 0xf0
 800f73a:	5c9b      	ldrb	r3, [r3, r2]
 800f73c:	2b02      	cmp	r3, #2
 800f73e:	d002      	beq.n	800f746 <ProcessRadioTxDone+0x1a>
    {
        Radio.Sleep( );
 800f740:	4b48      	ldr	r3, [pc, #288]	; (800f864 <ProcessRadioTxDone+0x138>)
 800f742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f744:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800f746:	4a45      	ldr	r2, [pc, #276]	; (800f85c <ProcessRadioTxDone+0x130>)
 800f748:	23ec      	movs	r3, #236	; 0xec
 800f74a:	009b      	lsls	r3, r3, #2
 800f74c:	58d2      	ldr	r2, [r2, r3]
 800f74e:	4b46      	ldr	r3, [pc, #280]	; (800f868 <ProcessRadioTxDone+0x13c>)
 800f750:	0011      	movs	r1, r2
 800f752:	0018      	movs	r0, r3
 800f754:	f00b fd0c 	bl	801b170 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f758:	4b43      	ldr	r3, [pc, #268]	; (800f868 <ProcessRadioTxDone+0x13c>)
 800f75a:	0018      	movs	r0, r3
 800f75c:	f00b fbb6 	bl	801aecc <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800f760:	4a3e      	ldr	r2, [pc, #248]	; (800f85c <ProcessRadioTxDone+0x130>)
 800f762:	23ed      	movs	r3, #237	; 0xed
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	58d2      	ldr	r2, [r2, r3]
 800f768:	4b40      	ldr	r3, [pc, #256]	; (800f86c <ProcessRadioTxDone+0x140>)
 800f76a:	0011      	movs	r1, r2
 800f76c:	0018      	movs	r0, r3
 800f76e:	f00b fcff 	bl	801b170 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f772:	4b3e      	ldr	r3, [pc, #248]	; (800f86c <ProcessRadioTxDone+0x140>)
 800f774:	0018      	movs	r0, r3
 800f776:	f00b fba9 	bl	801aecc <TimerStart>

    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800f77a:	4b38      	ldr	r3, [pc, #224]	; (800f85c <ProcessRadioTxDone+0x130>)
 800f77c:	4a38      	ldr	r2, [pc, #224]	; (800f860 <ProcessRadioTxDone+0x134>)
 800f77e:	589b      	ldr	r3, [r3, r2]
 800f780:	22f0      	movs	r2, #240	; 0xf0
 800f782:	5c9b      	ldrb	r3, [r3, r2]
 800f784:	2b02      	cmp	r3, #2
 800f786:	d004      	beq.n	800f792 <ProcessRadioTxDone+0x66>
 800f788:	4b34      	ldr	r3, [pc, #208]	; (800f85c <ProcessRadioTxDone+0x130>)
 800f78a:	4a39      	ldr	r2, [pc, #228]	; (800f870 <ProcessRadioTxDone+0x144>)
 800f78c:	5c9b      	ldrb	r3, [r3, r2]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d021      	beq.n	800f7d6 <ProcessRadioTxDone+0xaa>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800f792:	210c      	movs	r1, #12
 800f794:	187b      	adds	r3, r7, r1
 800f796:	2216      	movs	r2, #22
 800f798:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f79a:	4b30      	ldr	r3, [pc, #192]	; (800f85c <ProcessRadioTxDone+0x130>)
 800f79c:	4a30      	ldr	r2, [pc, #192]	; (800f860 <ProcessRadioTxDone+0x134>)
 800f79e:	589b      	ldr	r3, [r3, r2]
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	187a      	adds	r2, r7, r1
 800f7a4:	0011      	movs	r1, r2
 800f7a6:	0018      	movs	r0, r3
 800f7a8:	f007 fe62 	bl	8017470 <RegionGetPhyParam>
 800f7ac:	0003      	movs	r3, r0
 800f7ae:	001a      	movs	r2, r3
 800f7b0:	2108      	movs	r1, #8
 800f7b2:	187b      	adds	r3, r7, r1
 800f7b4:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f7b6:	4a29      	ldr	r2, [pc, #164]	; (800f85c <ProcessRadioTxDone+0x130>)
 800f7b8:	23ed      	movs	r3, #237	; 0xed
 800f7ba:	009b      	lsls	r3, r3, #2
 800f7bc:	58d2      	ldr	r2, [r2, r3]
 800f7be:	187b      	adds	r3, r7, r1
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	18d2      	adds	r2, r2, r3
 800f7c4:	4b2b      	ldr	r3, [pc, #172]	; (800f874 <ProcessRadioTxDone+0x148>)
 800f7c6:	0011      	movs	r1, r2
 800f7c8:	0018      	movs	r0, r3
 800f7ca:	f00b fcd1 	bl	801b170 <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800f7ce:	4b29      	ldr	r3, [pc, #164]	; (800f874 <ProcessRadioTxDone+0x148>)
 800f7d0:	0018      	movs	r0, r3
 800f7d2:	f00b fb7b 	bl	801aecc <TimerStart>
    }

    // Store last Tx channel
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 800f7d6:	4b21      	ldr	r3, [pc, #132]	; (800f85c <ProcessRadioTxDone+0x130>)
 800f7d8:	4a21      	ldr	r2, [pc, #132]	; (800f860 <ProcessRadioTxDone+0x134>)
 800f7da:	589a      	ldr	r2, [r3, r2]
 800f7dc:	4b1f      	ldr	r3, [pc, #124]	; (800f85c <ProcessRadioTxDone+0x130>)
 800f7de:	4926      	ldr	r1, [pc, #152]	; (800f878 <ProcessRadioTxDone+0x14c>)
 800f7e0:	5c59      	ldrb	r1, [r3, r1]
 800f7e2:	239f      	movs	r3, #159	; 0x9f
 800f7e4:	005b      	lsls	r3, r3, #1
 800f7e6:	54d1      	strb	r1, [r2, r3]
    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f7e8:	4b1c      	ldr	r3, [pc, #112]	; (800f85c <ProcessRadioTxDone+0x130>)
 800f7ea:	4a23      	ldr	r2, [pc, #140]	; (800f878 <ProcessRadioTxDone+0x14c>)
 800f7ec:	5c9a      	ldrb	r2, [r3, r2]
 800f7ee:	003b      	movs	r3, r7
 800f7f0:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800f7f2:	4b1a      	ldr	r3, [pc, #104]	; (800f85c <ProcessRadioTxDone+0x130>)
 800f7f4:	4a1a      	ldr	r2, [pc, #104]	; (800f860 <ProcessRadioTxDone+0x134>)
 800f7f6:	589a      	ldr	r2, [r3, r2]
 800f7f8:	23ea      	movs	r3, #234	; 0xea
 800f7fa:	005b      	lsls	r3, r3, #1
 800f7fc:	5cd3      	ldrb	r3, [r2, r3]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d103      	bne.n	800f80a <ProcessRadioTxDone+0xde>
    {
        txDone.Joined  = false;
 800f802:	003b      	movs	r3, r7
 800f804:	2200      	movs	r2, #0
 800f806:	705a      	strb	r2, [r3, #1]
 800f808:	e002      	b.n	800f810 <ProcessRadioTxDone+0xe4>
    }
    else
    {
        txDone.Joined  = true;
 800f80a:	003b      	movs	r3, r7
 800f80c:	2201      	movs	r2, #1
 800f80e:	705a      	strb	r2, [r3, #1]
    }
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f810:	4b1a      	ldr	r3, [pc, #104]	; (800f87c <ProcessRadioTxDone+0x150>)
 800f812:	681a      	ldr	r2, [r3, #0]
 800f814:	003b      	movs	r3, r7
 800f816:	605a      	str	r2, [r3, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800f818:	4b10      	ldr	r3, [pc, #64]	; (800f85c <ProcessRadioTxDone+0x130>)
 800f81a:	4a11      	ldr	r2, [pc, #68]	; (800f860 <ProcessRadioTxDone+0x134>)
 800f81c:	589b      	ldr	r3, [r3, r2]
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	003a      	movs	r2, r7
 800f822:	0011      	movs	r1, r2
 800f824:	0018      	movs	r0, r3
 800f826:	f007 fe4b 	bl	80174c0 <RegionSetBandTxDone>
    // Update Aggregated last tx done time
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800f82a:	4b0c      	ldr	r3, [pc, #48]	; (800f85c <ProcessRadioTxDone+0x130>)
 800f82c:	4a0c      	ldr	r2, [pc, #48]	; (800f860 <ProcessRadioTxDone+0x134>)
 800f82e:	589a      	ldr	r2, [r3, r2]
 800f830:	4b12      	ldr	r3, [pc, #72]	; (800f87c <ProcessRadioTxDone+0x150>)
 800f832:	6819      	ldr	r1, [r3, #0]
 800f834:	23e2      	movs	r3, #226	; 0xe2
 800f836:	005b      	lsls	r3, r3, #1
 800f838:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == false )
 800f83a:	4b08      	ldr	r3, [pc, #32]	; (800f85c <ProcessRadioTxDone+0x130>)
 800f83c:	4a0c      	ldr	r2, [pc, #48]	; (800f870 <ProcessRadioTxDone+0x144>)
 800f83e:	5c9b      	ldrb	r3, [r3, r2]
 800f840:	2201      	movs	r2, #1
 800f842:	4053      	eors	r3, r2
 800f844:	b2db      	uxtb	r3, r3
 800f846:	2b00      	cmp	r3, #0
 800f848:	d003      	beq.n	800f852 <ProcessRadioTxDone+0x126>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f84a:	4b04      	ldr	r3, [pc, #16]	; (800f85c <ProcessRadioTxDone+0x130>)
 800f84c:	4a0c      	ldr	r2, [pc, #48]	; (800f880 <ProcessRadioTxDone+0x154>)
 800f84e:	2100      	movs	r1, #0
 800f850:	5499      	strb	r1, [r3, r2]
    }
}
 800f852:	46c0      	nop			; (mov r8, r8)
 800f854:	46bd      	mov	sp, r7
 800f856:	b004      	add	sp, #16
 800f858:	bd80      	pop	{r7, pc}
 800f85a:	46c0      	nop			; (mov r8, r8)
 800f85c:	200008ec 	.word	0x200008ec
 800f860:	00000484 	.word	0x00000484
 800f864:	0801ca04 	.word	0x0801ca04
 800f868:	20000c6c 	.word	0x20000c6c
 800f86c:	20000c84 	.word	0x20000c84
 800f870:	00000414 	.word	0x00000414
 800f874:	20000ce4 	.word	0x20000ce4
 800f878:	00000415 	.word	0x00000415
 800f87c:	20001640 	.word	0x20001640
 800f880:	0000043d 	.word	0x0000043d

0800f884 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f884:	b580      	push	{r7, lr}
 800f886:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f888:	4a11      	ldr	r2, [pc, #68]	; (800f8d0 <PrepareRxDoneAbort+0x4c>)
 800f88a:	23d0      	movs	r3, #208	; 0xd0
 800f88c:	009b      	lsls	r3, r3, #2
 800f88e:	58d3      	ldr	r3, [r2, r3]
 800f890:	2280      	movs	r2, #128	; 0x80
 800f892:	431a      	orrs	r2, r3
 800f894:	0011      	movs	r1, r2
 800f896:	4a0e      	ldr	r2, [pc, #56]	; (800f8d0 <PrepareRxDoneAbort+0x4c>)
 800f898:	23d0      	movs	r3, #208	; 0xd0
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == true )
 800f89e:	4b0c      	ldr	r3, [pc, #48]	; (800f8d0 <PrepareRxDoneAbort+0x4c>)
 800f8a0:	4a0c      	ldr	r2, [pc, #48]	; (800f8d4 <PrepareRxDoneAbort+0x50>)
 800f8a2:	5c9b      	ldrb	r3, [r3, r2]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d002      	beq.n	800f8ae <PrepareRxDoneAbort+0x2a>
    {
        OnAckTimeoutTimerEvent( NULL );
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	f001 f9bb 	bl	8010c24 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f8ae:	4b08      	ldr	r3, [pc, #32]	; (800f8d0 <PrepareRxDoneAbort+0x4c>)
 800f8b0:	4a09      	ldr	r2, [pc, #36]	; (800f8d8 <PrepareRxDoneAbort+0x54>)
 800f8b2:	5c99      	ldrb	r1, [r3, r2]
 800f8b4:	2002      	movs	r0, #2
 800f8b6:	4301      	orrs	r1, r0
 800f8b8:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f8ba:	4b05      	ldr	r3, [pc, #20]	; (800f8d0 <PrepareRxDoneAbort+0x4c>)
 800f8bc:	4a06      	ldr	r2, [pc, #24]	; (800f8d8 <PrepareRxDoneAbort+0x54>)
 800f8be:	5c99      	ldrb	r1, [r3, r2]
 800f8c0:	2020      	movs	r0, #32
 800f8c2:	4301      	orrs	r1, r0
 800f8c4:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800f8c6:	f7ff ff15 	bl	800f6f4 <UpdateRxSlotIdleState>
}
 800f8ca:	46c0      	nop			; (mov r8, r8)
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}
 800f8d0:	200008ec 	.word	0x200008ec
 800f8d4:	00000414 	.word	0x00000414
 800f8d8:	00000481 	.word	0x00000481

0800f8dc <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8de:	b0a7      	sub	sp, #156	; 0x9c
 800f8e0:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f8e2:	2380      	movs	r3, #128	; 0x80
 800f8e4:	18fb      	adds	r3, r7, r3
 800f8e6:	2213      	movs	r2, #19
 800f8e8:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f8ea:	4bdd      	ldr	r3, [pc, #884]	; (800fc60 <ProcessRadioRxDone+0x384>)
 800f8ec:	685b      	ldr	r3, [r3, #4]
 800f8ee:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800f8f0:	247a      	movs	r4, #122	; 0x7a
 800f8f2:	193b      	adds	r3, r7, r4
 800f8f4:	4ada      	ldr	r2, [pc, #872]	; (800fc60 <ProcessRadioRxDone+0x384>)
 800f8f6:	8912      	ldrh	r2, [r2, #8]
 800f8f8:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800f8fa:	2078      	movs	r0, #120	; 0x78
 800f8fc:	183b      	adds	r3, r7, r0
 800f8fe:	4ad8      	ldr	r2, [pc, #864]	; (800fc60 <ProcessRadioRxDone+0x384>)
 800f900:	8952      	ldrh	r2, [r2, #10]
 800f902:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800f904:	2577      	movs	r5, #119	; 0x77
 800f906:	197b      	adds	r3, r7, r5
 800f908:	4ad5      	ldr	r2, [pc, #852]	; (800fc60 <ProcessRadioRxDone+0x384>)
 800f90a:	7b12      	ldrb	r2, [r2, #12]
 800f90c:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800f90e:	2376      	movs	r3, #118	; 0x76
 800f910:	18fb      	adds	r3, r7, r3
 800f912:	2200      	movs	r2, #0
 800f914:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800f916:	2300      	movs	r3, #0
 800f918:	60bb      	str	r3, [r7, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800f91a:	4bd2      	ldr	r3, [pc, #840]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f91c:	4ad2      	ldr	r2, [pc, #840]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800f91e:	589b      	ldr	r3, [r3, r2]
 800f920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f922:	2284      	movs	r2, #132	; 0x84
 800f924:	18ba      	adds	r2, r7, r2
 800f926:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800f928:	2383      	movs	r3, #131	; 0x83
 800f92a:	18fb      	adds	r3, r7, r3
 800f92c:	2200      	movs	r2, #0
 800f92e:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f930:	2382      	movs	r3, #130	; 0x82
 800f932:	18fb      	adds	r3, r7, r3
 800f934:	2204      	movs	r2, #4
 800f936:	701a      	strb	r2, [r3, #0]
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800f938:	4aca      	ldr	r2, [pc, #808]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f93a:	2388      	movs	r3, #136	; 0x88
 800f93c:	00db      	lsls	r3, r3, #3
 800f93e:	2100      	movs	r1, #0
 800f940:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800f942:	4bc8      	ldr	r3, [pc, #800]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f944:	183a      	adds	r2, r7, r0
 800f946:	49c9      	ldr	r1, [pc, #804]	; (800fc6c <ProcessRadioRxDone+0x390>)
 800f948:	8812      	ldrh	r2, [r2, #0]
 800f94a:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800f94c:	4bc5      	ldr	r3, [pc, #788]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f94e:	197a      	adds	r2, r7, r5
 800f950:	49c7      	ldr	r1, [pc, #796]	; (800fc70 <ProcessRadioRxDone+0x394>)
 800f952:	7812      	ldrb	r2, [r2, #0]
 800f954:	545a      	strb	r2, [r3, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800f956:	4ac3      	ldr	r2, [pc, #780]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f958:	2390      	movs	r3, #144	; 0x90
 800f95a:	00db      	lsls	r3, r3, #3
 800f95c:	5cd1      	ldrb	r1, [r2, r3]
 800f95e:	4bc1      	ldr	r3, [pc, #772]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f960:	4ac4      	ldr	r2, [pc, #784]	; (800fc74 <ProcessRadioRxDone+0x398>)
 800f962:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800f964:	4bbf      	ldr	r3, [pc, #764]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f966:	4ac4      	ldr	r2, [pc, #784]	; (800fc78 <ProcessRadioRxDone+0x39c>)
 800f968:	2100      	movs	r1, #0
 800f96a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800f96c:	4bbd      	ldr	r3, [pc, #756]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f96e:	4ac3      	ldr	r2, [pc, #780]	; (800fc7c <ProcessRadioRxDone+0x3a0>)
 800f970:	2100      	movs	r1, #0
 800f972:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800f974:	4bbb      	ldr	r3, [pc, #748]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f976:	4ac2      	ldr	r2, [pc, #776]	; (800fc80 <ProcessRadioRxDone+0x3a4>)
 800f978:	2100      	movs	r1, #0
 800f97a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800f97c:	4bb9      	ldr	r3, [pc, #740]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f97e:	4ac1      	ldr	r2, [pc, #772]	; (800fc84 <ProcessRadioRxDone+0x3a8>)
 800f980:	2100      	movs	r1, #0
 800f982:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 800f984:	4ab7      	ldr	r2, [pc, #732]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f986:	2385      	movs	r3, #133	; 0x85
 800f988:	00db      	lsls	r3, r3, #3
 800f98a:	2100      	movs	r1, #0
 800f98c:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxData = false;
 800f98e:	4bb5      	ldr	r3, [pc, #724]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f990:	4abd      	ldr	r2, [pc, #756]	; (800fc88 <ProcessRadioRxDone+0x3ac>)
 800f992:	2100      	movs	r1, #0
 800f994:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800f996:	4bb3      	ldr	r3, [pc, #716]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f998:	4abc      	ldr	r2, [pc, #752]	; (800fc8c <ProcessRadioRxDone+0x3b0>)
 800f99a:	2100      	movs	r1, #0
 800f99c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f99e:	4ab1      	ldr	r2, [pc, #708]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f9a0:	2386      	movs	r3, #134	; 0x86
 800f9a2:	00db      	lsls	r3, r3, #3
 800f9a4:	2100      	movs	r1, #0
 800f9a6:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f9a8:	4bae      	ldr	r3, [pc, #696]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f9aa:	4ab9      	ldr	r2, [pc, #740]	; (800fc90 <ProcessRadioRxDone+0x3b4>)
 800f9ac:	2100      	movs	r1, #0
 800f9ae:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 800f9b0:	4bac      	ldr	r3, [pc, #688]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f9b2:	4ab8      	ldr	r2, [pc, #736]	; (800fc94 <ProcessRadioRxDone+0x3b8>)
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f9b8:	4aaa      	ldr	r2, [pc, #680]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f9ba:	2387      	movs	r3, #135	; 0x87
 800f9bc:	00db      	lsls	r3, r3, #3
 800f9be:	2100      	movs	r1, #0
 800f9c0:	54d1      	strb	r1, [r2, r3]

    Radio.Sleep( );
 800f9c2:	4bb5      	ldr	r3, [pc, #724]	; (800fc98 <ProcessRadioRxDone+0x3bc>)
 800f9c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9c6:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800f9c8:	4bb4      	ldr	r3, [pc, #720]	; (800fc9c <ProcessRadioRxDone+0x3c0>)
 800f9ca:	0018      	movs	r0, r3
 800f9cc:	f00b fb56 	bl	801b07c <TimerStop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800f9d0:	193b      	adds	r3, r7, r4
 800f9d2:	881a      	ldrh	r2, [r3, #0]
 800f9d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f9d6:	0011      	movs	r1, r2
 800f9d8:	0018      	movs	r0, r3
 800f9da:	f005 fabc 	bl	8014f56 <LoRaMacClassBRxBeacon>
 800f9de:	1e03      	subs	r3, r0, #0
 800f9e0:	d00e      	beq.n	800fa00 <ProcessRadioRxDone+0x124>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800f9e2:	4ba0      	ldr	r3, [pc, #640]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f9e4:	2278      	movs	r2, #120	; 0x78
 800f9e6:	18ba      	adds	r2, r7, r2
 800f9e8:	49ad      	ldr	r1, [pc, #692]	; (800fca0 <ProcessRadioRxDone+0x3c4>)
 800f9ea:	8812      	ldrh	r2, [r2, #0]
 800f9ec:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800f9ee:	4a9d      	ldr	r2, [pc, #628]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800f9f0:	2377      	movs	r3, #119	; 0x77
 800f9f2:	18f9      	adds	r1, r7, r3
 800f9f4:	238f      	movs	r3, #143	; 0x8f
 800f9f6:	00db      	lsls	r3, r3, #3
 800f9f8:	7809      	ldrb	r1, [r1, #0]
 800f9fa:	54d1      	strb	r1, [r2, r3]
        return;
 800f9fc:	f000 fc84 	bl	8010308 <ProcessRadioRxDone+0xa2c>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800fa00:	4b98      	ldr	r3, [pc, #608]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fa02:	4a99      	ldr	r2, [pc, #612]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fa04:	589b      	ldr	r3, [r3, r2]
 800fa06:	22f0      	movs	r2, #240	; 0xf0
 800fa08:	5c9b      	ldrb	r3, [r3, r2]
 800fa0a:	2b01      	cmp	r3, #1
 800fa0c:	d11c      	bne.n	800fa48 <ProcessRadioRxDone+0x16c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fa0e:	f005 fab4 	bl	8014f7a <LoRaMacClassBIsPingExpected>
 800fa12:	1e03      	subs	r3, r0, #0
 800fa14:	d00a      	beq.n	800fa2c <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fa16:	2000      	movs	r0, #0
 800fa18:	f005 fa6b 	bl	8014ef2 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800fa1c:	2000      	movs	r0, #0
 800fa1e:	f005 fa8a 	bl	8014f36 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800fa22:	4b90      	ldr	r3, [pc, #576]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fa24:	4a93      	ldr	r2, [pc, #588]	; (800fc74 <ProcessRadioRxDone+0x398>)
 800fa26:	2104      	movs	r1, #4
 800fa28:	5499      	strb	r1, [r3, r2]
 800fa2a:	e00d      	b.n	800fa48 <ProcessRadioRxDone+0x16c>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fa2c:	f005 faab 	bl	8014f86 <LoRaMacClassBIsMulticastExpected>
 800fa30:	1e03      	subs	r3, r0, #0
 800fa32:	d009      	beq.n	800fa48 <ProcessRadioRxDone+0x16c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800fa34:	2000      	movs	r0, #0
 800fa36:	f005 fa66 	bl	8014f06 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fa3a:	2000      	movs	r0, #0
 800fa3c:	f005 fa83 	bl	8014f46 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800fa40:	4b88      	ldr	r3, [pc, #544]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fa42:	4a8c      	ldr	r2, [pc, #560]	; (800fc74 <ProcessRadioRxDone+0x398>)
 800fa44:	2105      	movs	r1, #5
 800fa46:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800fa48:	2276      	movs	r2, #118	; 0x76
 800fa4a:	18bb      	adds	r3, r7, r2
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	18ba      	adds	r2, r7, r2
 800fa50:	1c59      	adds	r1, r3, #1
 800fa52:	7011      	strb	r1, [r2, #0]
 800fa54:	001a      	movs	r2, r3
 800fa56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa58:	189b      	adds	r3, r3, r2
 800fa5a:	781a      	ldrb	r2, [r3, #0]
 800fa5c:	2174      	movs	r1, #116	; 0x74
 800fa5e:	187b      	adds	r3, r7, r1
 800fa60:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800fa62:	187b      	adds	r3, r7, r1
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	061b      	lsls	r3, r3, #24
 800fa68:	0f5b      	lsrs	r3, r3, #29
 800fa6a:	b2db      	uxtb	r3, r3
 800fa6c:	2b03      	cmp	r3, #3
 800fa6e:	d100      	bne.n	800fa72 <ProcessRadioRxDone+0x196>
 800fa70:	e11e      	b.n	800fcb0 <ProcessRadioRxDone+0x3d4>
 800fa72:	dc03      	bgt.n	800fa7c <ProcessRadioRxDone+0x1a0>
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d00a      	beq.n	800fa8e <ProcessRadioRxDone+0x1b2>
 800fa78:	f000 fc1d 	bl	80102b6 <ProcessRadioRxDone+0x9da>
 800fa7c:	2b05      	cmp	r3, #5
 800fa7e:	d100      	bne.n	800fa82 <ProcessRadioRxDone+0x1a6>
 800fa80:	e112      	b.n	800fca8 <ProcessRadioRxDone+0x3cc>
 800fa82:	2b07      	cmp	r3, #7
 800fa84:	d101      	bne.n	800fa8a <ProcessRadioRxDone+0x1ae>
 800fa86:	f000 fbe7 	bl	8010258 <ProcessRadioRxDone+0x97c>
 800fa8a:	f000 fc14 	bl	80102b6 <ProcessRadioRxDone+0x9da>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            macMsgJoinAccept.Buffer = payload;
 800fa8e:	210c      	movs	r1, #12
 800fa90:	187b      	adds	r3, r7, r1
 800fa92:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fa94:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800fa96:	237a      	movs	r3, #122	; 0x7a
 800fa98:	18fb      	adds	r3, r7, r3
 800fa9a:	881b      	ldrh	r3, [r3, #0]
 800fa9c:	b2da      	uxtb	r2, r3
 800fa9e:	187b      	adds	r3, r7, r1
 800faa0:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800faa2:	4b70      	ldr	r3, [pc, #448]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800faa4:	4a70      	ldr	r2, [pc, #448]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800faa6:	589a      	ldr	r2, [r3, r2]
 800faa8:	23ea      	movs	r3, #234	; 0xea
 800faaa:	005b      	lsls	r3, r3, #1
 800faac:	5cd3      	ldrb	r3, [r2, r3]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d007      	beq.n	800fac2 <ProcessRadioRxDone+0x1e6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fab2:	4b6c      	ldr	r3, [pc, #432]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fab4:	4a7b      	ldr	r2, [pc, #492]	; (800fca4 <ProcessRadioRxDone+0x3c8>)
 800fab6:	2101      	movs	r1, #1
 800fab8:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800faba:	f7ff fee3 	bl	800f884 <PrepareRxDoneAbort>
                return;
 800fabe:	f000 fc23 	bl	8010308 <ProcessRadioRxDone+0xa2c>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800fac2:	f7ff fcc9 	bl	800f458 <SecureElementGetJoinEui>
 800fac6:	0001      	movs	r1, r0
 800fac8:	2580      	movs	r5, #128	; 0x80
 800faca:	197c      	adds	r4, r7, r5
 800facc:	230c      	movs	r3, #12
 800face:	18fb      	adds	r3, r7, r3
 800fad0:	001a      	movs	r2, r3
 800fad2:	20ff      	movs	r0, #255	; 0xff
 800fad4:	f006 fd30 	bl	8016538 <LoRaMacCryptoHandleJoinAccept>
 800fad8:	0003      	movs	r3, r0
 800fada:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800fadc:	197b      	adds	r3, r7, r5
 800fade:	781b      	ldrb	r3, [r3, #0]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d000      	beq.n	800fae6 <ProcessRadioRxDone+0x20a>
 800fae4:	e0b0      	b.n	800fc48 <ProcessRadioRxDone+0x36c>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800fae6:	240c      	movs	r4, #12
 800fae8:	193b      	adds	r3, r7, r4
 800faea:	7a59      	ldrb	r1, [r3, #9]
 800faec:	4b5d      	ldr	r3, [pc, #372]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800faee:	4a5e      	ldr	r2, [pc, #376]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800faf0:	589b      	ldr	r3, [r3, r2]
 800faf2:	000a      	movs	r2, r1
 800faf4:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800faf6:	4b5b      	ldr	r3, [pc, #364]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800faf8:	4a5b      	ldr	r2, [pc, #364]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fafa:	589b      	ldr	r3, [r3, r2]
 800fafc:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800fafe:	193b      	adds	r3, r7, r4
 800fb00:	7a9b      	ldrb	r3, [r3, #10]
 800fb02:	021a      	lsls	r2, r3, #8
 800fb04:	4b57      	ldr	r3, [pc, #348]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fb06:	4858      	ldr	r0, [pc, #352]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fb08:	581b      	ldr	r3, [r3, r0]
 800fb0a:	430a      	orrs	r2, r1
 800fb0c:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800fb0e:	4b55      	ldr	r3, [pc, #340]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fb10:	4a55      	ldr	r2, [pc, #340]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fb12:	589b      	ldr	r3, [r3, r2]
 800fb14:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800fb16:	193b      	adds	r3, r7, r4
 800fb18:	7adb      	ldrb	r3, [r3, #11]
 800fb1a:	041a      	lsls	r2, r3, #16
 800fb1c:	4b51      	ldr	r3, [pc, #324]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fb1e:	4852      	ldr	r0, [pc, #328]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fb20:	581b      	ldr	r3, [r3, r0]
 800fb22:	430a      	orrs	r2, r1
 800fb24:	649a      	str	r2, [r3, #72]	; 0x48

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800fb26:	4b4f      	ldr	r3, [pc, #316]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fb28:	4a4f      	ldr	r2, [pc, #316]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fb2a:	589b      	ldr	r3, [r3, r2]
 800fb2c:	0020      	movs	r0, r4
 800fb2e:	183a      	adds	r2, r7, r0
 800fb30:	68d2      	ldr	r2, [r2, #12]
 800fb32:	64da      	str	r2, [r3, #76]	; 0x4c

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800fb34:	183b      	adds	r3, r7, r0
 800fb36:	7c1b      	ldrb	r3, [r3, #16]
 800fb38:	065b      	lsls	r3, r3, #25
 800fb3a:	0f5b      	lsrs	r3, r3, #29
 800fb3c:	b2d9      	uxtb	r1, r3
 800fb3e:	4b49      	ldr	r3, [pc, #292]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fb40:	4a49      	ldr	r2, [pc, #292]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fb42:	589a      	ldr	r2, [r3, r2]
 800fb44:	231a      	movs	r3, #26
 800fb46:	33ff      	adds	r3, #255	; 0xff
 800fb48:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fb4a:	183b      	adds	r3, r7, r0
 800fb4c:	7c1b      	ldrb	r3, [r3, #16]
 800fb4e:	071b      	lsls	r3, r3, #28
 800fb50:	0f1b      	lsrs	r3, r3, #28
 800fb52:	b2d9      	uxtb	r1, r3
 800fb54:	4b43      	ldr	r3, [pc, #268]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fb56:	4a44      	ldr	r2, [pc, #272]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fb58:	589a      	ldr	r2, [r3, r2]
 800fb5a:	2390      	movs	r3, #144	; 0x90
 800fb5c:	005b      	lsls	r3, r3, #1
 800fb5e:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800fb60:	183b      	adds	r3, r7, r0
 800fb62:	7c1b      	ldrb	r3, [r3, #16]
 800fb64:	071b      	lsls	r3, r3, #28
 800fb66:	0f1b      	lsrs	r3, r3, #28
 800fb68:	b2d9      	uxtb	r1, r3
 800fb6a:	4b3e      	ldr	r3, [pc, #248]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fb6c:	4a3e      	ldr	r2, [pc, #248]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fb6e:	589a      	ldr	r2, [r3, r2]
 800fb70:	2394      	movs	r3, #148	; 0x94
 800fb72:	005b      	lsls	r3, r3, #1
 800fb74:	54d1      	strb	r1, [r2, r3]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800fb76:	183b      	adds	r3, r7, r0
 800fb78:	7c59      	ldrb	r1, [r3, #17]
 800fb7a:	4b3a      	ldr	r3, [pc, #232]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fb7c:	4a3a      	ldr	r2, [pc, #232]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fb7e:	589a      	ldr	r2, [r3, r2]
 800fb80:	2384      	movs	r3, #132	; 0x84
 800fb82:	005b      	lsls	r3, r3, #1
 800fb84:	50d1      	str	r1, [r2, r3]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800fb86:	4b37      	ldr	r3, [pc, #220]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fb88:	4a37      	ldr	r2, [pc, #220]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fb8a:	589a      	ldr	r2, [r3, r2]
 800fb8c:	2384      	movs	r3, #132	; 0x84
 800fb8e:	005b      	lsls	r3, r3, #1
 800fb90:	58d3      	ldr	r3, [r2, r3]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d106      	bne.n	800fba4 <ProcessRadioRxDone+0x2c8>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800fb96:	4b33      	ldr	r3, [pc, #204]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fb98:	4a33      	ldr	r2, [pc, #204]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fb9a:	589a      	ldr	r2, [r3, r2]
 800fb9c:	2384      	movs	r3, #132	; 0x84
 800fb9e:	005b      	lsls	r3, r3, #1
 800fba0:	2101      	movs	r1, #1
 800fba2:	50d1      	str	r1, [r2, r3]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800fba4:	4b2f      	ldr	r3, [pc, #188]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fba6:	4a30      	ldr	r2, [pc, #192]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fba8:	589a      	ldr	r2, [r3, r2]
 800fbaa:	2384      	movs	r3, #132	; 0x84
 800fbac:	005b      	lsls	r3, r3, #1
 800fbae:	58d2      	ldr	r2, [r2, r3]
 800fbb0:	4b2c      	ldr	r3, [pc, #176]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fbb2:	492d      	ldr	r1, [pc, #180]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fbb4:	5859      	ldr	r1, [r3, r1]
 800fbb6:	0013      	movs	r3, r2
 800fbb8:	015b      	lsls	r3, r3, #5
 800fbba:	1a9b      	subs	r3, r3, r2
 800fbbc:	009b      	lsls	r3, r3, #2
 800fbbe:	189b      	adds	r3, r3, r2
 800fbc0:	00db      	lsls	r3, r3, #3
 800fbc2:	001a      	movs	r2, r3
 800fbc4:	2384      	movs	r3, #132	; 0x84
 800fbc6:	005b      	lsls	r3, r3, #1
 800fbc8:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800fbca:	4b26      	ldr	r3, [pc, #152]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fbcc:	4a26      	ldr	r2, [pc, #152]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fbce:	589a      	ldr	r2, [r3, r2]
 800fbd0:	2384      	movs	r3, #132	; 0x84
 800fbd2:	005b      	lsls	r3, r3, #1
 800fbd4:	58d3      	ldr	r3, [r2, r3]
 800fbd6:	4a23      	ldr	r2, [pc, #140]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fbd8:	4923      	ldr	r1, [pc, #140]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fbda:	5852      	ldr	r2, [r2, r1]
 800fbdc:	21fa      	movs	r1, #250	; 0xfa
 800fbde:	0089      	lsls	r1, r1, #2
 800fbe0:	1859      	adds	r1, r3, r1
 800fbe2:	2386      	movs	r3, #134	; 0x86
 800fbe4:	005b      	lsls	r3, r3, #1
 800fbe6:	50d1      	str	r1, [r2, r3]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800fbe8:	4b1e      	ldr	r3, [pc, #120]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fbea:	4a1f      	ldr	r2, [pc, #124]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fbec:	589a      	ldr	r2, [r3, r2]
 800fbee:	23e9      	movs	r3, #233	; 0xe9
 800fbf0:	005b      	lsls	r3, r3, #1
 800fbf2:	2100      	movs	r1, #0
 800fbf4:	54d1      	strb	r1, [r2, r3]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800fbf6:	216c      	movs	r1, #108	; 0x6c
 800fbf8:	187b      	adds	r3, r7, r1
 800fbfa:	220c      	movs	r2, #12
 800fbfc:	18ba      	adds	r2, r7, r2
 800fbfe:	3212      	adds	r2, #18
 800fc00:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800fc02:	237a      	movs	r3, #122	; 0x7a
 800fc04:	18fb      	adds	r3, r7, r3
 800fc06:	881b      	ldrh	r3, [r3, #0]
 800fc08:	b2db      	uxtb	r3, r3
 800fc0a:	3b11      	subs	r3, #17
 800fc0c:	b2da      	uxtb	r2, r3
 800fc0e:	187b      	adds	r3, r7, r1
 800fc10:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800fc12:	4b14      	ldr	r3, [pc, #80]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fc14:	4a14      	ldr	r2, [pc, #80]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fc16:	589b      	ldr	r3, [r3, r2]
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	187a      	adds	r2, r7, r1
 800fc1c:	0011      	movs	r1, r2
 800fc1e:	0018      	movs	r0, r3
 800fc20:	f007 fcaa 	bl	8017578 <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800fc24:	4b0f      	ldr	r3, [pc, #60]	; (800fc64 <ProcessRadioRxDone+0x388>)
 800fc26:	4a10      	ldr	r2, [pc, #64]	; (800fc68 <ProcessRadioRxDone+0x38c>)
 800fc28:	589a      	ldr	r2, [r3, r2]
 800fc2a:	23ea      	movs	r3, #234	; 0xea
 800fc2c:	005b      	lsls	r3, r3, #1
 800fc2e:	2102      	movs	r1, #2
 800fc30:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fc32:	2000      	movs	r0, #0
 800fc34:	f005 fe50 	bl	80158d8 <LoRaMacConfirmQueueIsCmdActive>
 800fc38:	1e03      	subs	r3, r0, #0
 800fc3a:	d100      	bne.n	800fc3e <ProcessRadioRxDone+0x362>
 800fc3c:	e342      	b.n	80102c4 <ProcessRadioRxDone+0x9e8>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800fc3e:	2100      	movs	r1, #0
 800fc40:	2000      	movs	r0, #0
 800fc42:	f005 fdc5 	bl	80157d0 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800fc46:	e33d      	b.n	80102c4 <ProcessRadioRxDone+0x9e8>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fc48:	2000      	movs	r0, #0
 800fc4a:	f005 fe45 	bl	80158d8 <LoRaMacConfirmQueueIsCmdActive>
 800fc4e:	1e03      	subs	r3, r0, #0
 800fc50:	d100      	bne.n	800fc54 <ProcessRadioRxDone+0x378>
 800fc52:	e337      	b.n	80102c4 <ProcessRadioRxDone+0x9e8>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800fc54:	2100      	movs	r1, #0
 800fc56:	2007      	movs	r0, #7
 800fc58:	f005 fdba 	bl	80157d0 <LoRaMacConfirmQueueSetStatus>
            break;
 800fc5c:	e332      	b.n	80102c4 <ProcessRadioRxDone+0x9e8>
 800fc5e:	46c0      	nop			; (mov r8, r8)
 800fc60:	20001644 	.word	0x20001644
 800fc64:	200008ec 	.word	0x200008ec
 800fc68:	00000484 	.word	0x00000484
 800fc6c:	0000042a 	.word	0x0000042a
 800fc70:	0000042c 	.word	0x0000042c
 800fc74:	0000042d 	.word	0x0000042d
 800fc78:	0000041f 	.word	0x0000041f
 800fc7c:	0000041e 	.word	0x0000041e
 800fc80:	00000421 	.word	0x00000421
 800fc84:	00000424 	.word	0x00000424
 800fc88:	00000429 	.word	0x00000429
 800fc8c:	0000042e 	.word	0x0000042e
 800fc90:	0000041c 	.word	0x0000041c
 800fc94:	00000434 	.word	0x00000434
 800fc98:	0801ca04 	.word	0x0801ca04
 800fc9c:	20000c84 	.word	0x20000c84
 800fca0:	00000476 	.word	0x00000476
 800fca4:	0000041d 	.word	0x0000041d
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800fca8:	4bcc      	ldr	r3, [pc, #816]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fcaa:	4acd      	ldr	r2, [pc, #820]	; (800ffe0 <ProcessRadioRxDone+0x704>)
 800fcac:	2101      	movs	r1, #1
 800fcae:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800fcb0:	4bca      	ldr	r3, [pc, #808]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fcb2:	4acc      	ldr	r2, [pc, #816]	; (800ffe4 <ProcessRadioRxDone+0x708>)
 800fcb4:	589a      	ldr	r2, [r3, r2]
 800fcb6:	232e      	movs	r3, #46	; 0x2e
 800fcb8:	33ff      	adds	r3, #255	; 0xff
 800fcba:	5cd2      	ldrb	r2, [r2, r3]
 800fcbc:	2168      	movs	r1, #104	; 0x68
 800fcbe:	187b      	adds	r3, r7, r1
 800fcc0:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800fcc2:	4ac6      	ldr	r2, [pc, #792]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fcc4:	2384      	movs	r3, #132	; 0x84
 800fcc6:	00db      	lsls	r3, r3, #3
 800fcc8:	5cd3      	ldrb	r3, [r2, r3]
 800fcca:	b25a      	sxtb	r2, r3
 800fccc:	187b      	adds	r3, r7, r1
 800fcce:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fcd0:	187b      	adds	r3, r7, r1
 800fcd2:	220d      	movs	r2, #13
 800fcd4:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800fcd6:	4bc1      	ldr	r3, [pc, #772]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fcd8:	4ac2      	ldr	r2, [pc, #776]	; (800ffe4 <ProcessRadioRxDone+0x708>)
 800fcda:	589a      	ldr	r2, [r3, r2]
 800fcdc:	2340      	movs	r3, #64	; 0x40
 800fcde:	33ff      	adds	r3, #255	; 0xff
 800fce0:	5cd3      	ldrb	r3, [r2, r3]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d003      	beq.n	800fcee <ProcessRadioRxDone+0x412>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fce6:	2368      	movs	r3, #104	; 0x68
 800fce8:	18fb      	adds	r3, r7, r3
 800fcea:	220e      	movs	r2, #14
 800fcec:	701a      	strb	r2, [r3, #0]
            }
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800fcee:	4bbb      	ldr	r3, [pc, #748]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fcf0:	4abc      	ldr	r2, [pc, #752]	; (800ffe4 <ProcessRadioRxDone+0x708>)
 800fcf2:	589b      	ldr	r3, [r3, r2]
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	2268      	movs	r2, #104	; 0x68
 800fcf8:	18ba      	adds	r2, r7, r2
 800fcfa:	0011      	movs	r1, r2
 800fcfc:	0018      	movs	r0, r3
 800fcfe:	f007 fbb7 	bl	8017470 <RegionGetPhyParam>
 800fd02:	0003      	movs	r3, r0
 800fd04:	001a      	movs	r2, r3
 800fd06:	2364      	movs	r3, #100	; 0x64
 800fd08:	18fb      	adds	r3, r7, r3
 800fd0a:	601a      	str	r2, [r3, #0]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 800fd0c:	237a      	movs	r3, #122	; 0x7a
 800fd0e:	18fb      	adds	r3, r7, r3
 800fd10:	881b      	ldrh	r3, [r3, #0]
 800fd12:	3b0d      	subs	r3, #13
 800fd14:	b29b      	uxth	r3, r3
 800fd16:	b21b      	sxth	r3, r3
 800fd18:	1c1a      	adds	r2, r3, #0
 800fd1a:	b213      	sxth	r3, r2
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	da01      	bge.n	800fd24 <ProcessRadioRxDone+0x448>
 800fd20:	2300      	movs	r3, #0
 800fd22:	1c1a      	adds	r2, r3, #0
 800fd24:	b212      	sxth	r2, r2
 800fd26:	2364      	movs	r3, #100	; 0x64
 800fd28:	18fb      	adds	r3, r7, r3
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	b21b      	sxth	r3, r3
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	dd06      	ble.n	800fd40 <ProcessRadioRxDone+0x464>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fd32:	4baa      	ldr	r3, [pc, #680]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fd34:	4aac      	ldr	r2, [pc, #688]	; (800ffe8 <ProcessRadioRxDone+0x70c>)
 800fd36:	2101      	movs	r1, #1
 800fd38:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800fd3a:	f7ff fda3 	bl	800f884 <PrepareRxDoneAbort>
                return;
 800fd3e:	e2e3      	b.n	8010308 <ProcessRadioRxDone+0xa2c>
            }
            macMsgData.Buffer = payload;
 800fd40:	2134      	movs	r1, #52	; 0x34
 800fd42:	187b      	adds	r3, r7, r1
 800fd44:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fd46:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800fd48:	237a      	movs	r3, #122	; 0x7a
 800fd4a:	18fb      	adds	r3, r7, r3
 800fd4c:	881b      	ldrh	r3, [r3, #0]
 800fd4e:	b2da      	uxtb	r2, r3
 800fd50:	187b      	adds	r3, r7, r1
 800fd52:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800fd54:	187b      	adds	r3, r7, r1
 800fd56:	4aa5      	ldr	r2, [pc, #660]	; (800ffec <ProcessRadioRxDone+0x710>)
 800fd58:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800fd5a:	0008      	movs	r0, r1
 800fd5c:	187b      	adds	r3, r7, r1
 800fd5e:	2228      	movs	r2, #40	; 0x28
 800fd60:	21ff      	movs	r1, #255	; 0xff
 800fd62:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800fd64:	183b      	adds	r3, r7, r0
 800fd66:	0018      	movs	r0, r3
 800fd68:	f007 f897 	bl	8016e9a <LoRaMacParserData>
 800fd6c:	1e03      	subs	r3, r0, #0
 800fd6e:	d006      	beq.n	800fd7e <ProcessRadioRxDone+0x4a2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fd70:	4b9a      	ldr	r3, [pc, #616]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fd72:	4a9d      	ldr	r2, [pc, #628]	; (800ffe8 <ProcessRadioRxDone+0x70c>)
 800fd74:	2101      	movs	r1, #1
 800fd76:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800fd78:	f7ff fd84 	bl	800f884 <PrepareRxDoneAbort>
                return;
 800fd7c:	e2c4      	b.n	8010308 <ProcessRadioRxDone+0xa2c>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800fd7e:	2034      	movs	r0, #52	; 0x34
 800fd80:	183b      	adds	r3, r7, r0
 800fd82:	689a      	ldr	r2, [r3, #8]
 800fd84:	4b95      	ldr	r3, [pc, #596]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fd86:	499a      	ldr	r1, [pc, #616]	; (800fff0 <ProcessRadioRxDone+0x714>)
 800fd88:	505a      	str	r2, [r3, r1]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800fd8a:	1dba      	adds	r2, r7, #6
 800fd8c:	183b      	adds	r3, r7, r0
 800fd8e:	0011      	movs	r1, r2
 800fd90:	0018      	movs	r0, r3
 800fd92:	f003 f849 	bl	8012e28 <DetermineFrameType>
 800fd96:	1e03      	subs	r3, r0, #0
 800fd98:	d006      	beq.n	800fda8 <ProcessRadioRxDone+0x4cc>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fd9a:	4b90      	ldr	r3, [pc, #576]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fd9c:	4a92      	ldr	r2, [pc, #584]	; (800ffe8 <ProcessRadioRxDone+0x70c>)
 800fd9e:	2101      	movs	r1, #1
 800fda0:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800fda2:	f7ff fd6f 	bl	800f884 <PrepareRxDoneAbort>
                return;
 800fda6:	e2af      	b.n	8010308 <ProcessRadioRxDone+0xa2c>
            }

            //Check if it is a multicast message
            multicast = 0;
 800fda8:	2383      	movs	r3, #131	; 0x83
 800fdaa:	18fb      	adds	r3, r7, r3
 800fdac:	2200      	movs	r2, #0
 800fdae:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fdb4:	2381      	movs	r3, #129	; 0x81
 800fdb6:	18fb      	adds	r3, r7, r3
 800fdb8:	2200      	movs	r2, #0
 800fdba:	701a      	strb	r2, [r3, #0]
 800fdbc:	e066      	b.n	800fe8c <ProcessRadioRxDone+0x5b0>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800fdbe:	4b87      	ldr	r3, [pc, #540]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fdc0:	4a88      	ldr	r2, [pc, #544]	; (800ffe4 <ProcessRadioRxDone+0x708>)
 800fdc2:	5899      	ldr	r1, [r3, r2]
 800fdc4:	2381      	movs	r3, #129	; 0x81
 800fdc6:	18fb      	adds	r3, r7, r3
 800fdc8:	781a      	ldrb	r2, [r3, #0]
 800fdca:	0013      	movs	r3, r2
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	189b      	adds	r3, r3, r2
 800fdd0:	00db      	lsls	r3, r3, #3
 800fdd2:	18cb      	adds	r3, r1, r3
 800fdd4:	3354      	adds	r3, #84	; 0x54
 800fdd6:	681a      	ldr	r2, [r3, #0]
 800fdd8:	2334      	movs	r3, #52	; 0x34
 800fdda:	18fb      	adds	r3, r7, r3
 800fddc:	689b      	ldr	r3, [r3, #8]
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d14e      	bne.n	800fe80 <ProcessRadioRxDone+0x5a4>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800fde2:	4b7e      	ldr	r3, [pc, #504]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fde4:	4a7f      	ldr	r2, [pc, #508]	; (800ffe4 <ProcessRadioRxDone+0x708>)
 800fde6:	5899      	ldr	r1, [r3, r2]
 800fde8:	2381      	movs	r3, #129	; 0x81
 800fdea:	18fb      	adds	r3, r7, r3
 800fdec:	781a      	ldrb	r2, [r3, #0]
 800fdee:	2051      	movs	r0, #81	; 0x51
 800fdf0:	0013      	movs	r3, r2
 800fdf2:	009b      	lsls	r3, r3, #2
 800fdf4:	189b      	adds	r3, r3, r2
 800fdf6:	00db      	lsls	r3, r3, #3
 800fdf8:	18cb      	adds	r3, r1, r3
 800fdfa:	181b      	adds	r3, r3, r0
 800fdfc:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d03e      	beq.n	800fe80 <ProcessRadioRxDone+0x5a4>
                {
                    multicast = 1;
 800fe02:	2383      	movs	r3, #131	; 0x83
 800fe04:	18fb      	adds	r3, r7, r3
 800fe06:	2201      	movs	r2, #1
 800fe08:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800fe0a:	4b74      	ldr	r3, [pc, #464]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fe0c:	4a75      	ldr	r2, [pc, #468]	; (800ffe4 <ProcessRadioRxDone+0x708>)
 800fe0e:	5898      	ldr	r0, [r3, r2]
 800fe10:	2581      	movs	r5, #129	; 0x81
 800fe12:	197b      	adds	r3, r7, r5
 800fe14:	781a      	ldrb	r2, [r3, #0]
 800fe16:	2382      	movs	r3, #130	; 0x82
 800fe18:	18f9      	adds	r1, r7, r3
 800fe1a:	2452      	movs	r4, #82	; 0x52
 800fe1c:	0013      	movs	r3, r2
 800fe1e:	009b      	lsls	r3, r3, #2
 800fe20:	189b      	adds	r3, r3, r2
 800fe22:	00db      	lsls	r3, r3, #3
 800fe24:	18c3      	adds	r3, r0, r3
 800fe26:	191b      	adds	r3, r3, r4
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	700b      	strb	r3, [r1, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800fe2c:	4b6b      	ldr	r3, [pc, #428]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fe2e:	4a6d      	ldr	r2, [pc, #436]	; (800ffe4 <ProcessRadioRxDone+0x708>)
 800fe30:	5899      	ldr	r1, [r3, r2]
 800fe32:	0028      	movs	r0, r5
 800fe34:	183b      	adds	r3, r7, r0
 800fe36:	781a      	ldrb	r2, [r3, #0]
 800fe38:	0013      	movs	r3, r2
 800fe3a:	009b      	lsls	r3, r3, #2
 800fe3c:	189b      	adds	r3, r3, r2
 800fe3e:	00db      	lsls	r3, r3, #3
 800fe40:	18cb      	adds	r3, r1, r3
 800fe42:	336c      	adds	r3, #108	; 0x6c
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	60bb      	str	r3, [r7, #8]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800fe4a:	4b64      	ldr	r3, [pc, #400]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fe4c:	4a65      	ldr	r2, [pc, #404]	; (800ffe4 <ProcessRadioRxDone+0x708>)
 800fe4e:	5899      	ldr	r1, [r3, r2]
 800fe50:	183b      	adds	r3, r7, r0
 800fe52:	781a      	ldrb	r2, [r3, #0]
 800fe54:	0013      	movs	r3, r2
 800fe56:	009b      	lsls	r3, r3, #2
 800fe58:	189b      	adds	r3, r3, r2
 800fe5a:	00db      	lsls	r3, r3, #3
 800fe5c:	18cb      	adds	r3, r1, r3
 800fe5e:	3354      	adds	r3, #84	; 0x54
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2284      	movs	r2, #132	; 0x84
 800fe64:	18ba      	adds	r2, r7, r2
 800fe66:	6013      	str	r3, [r2, #0]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800fe68:	4b5c      	ldr	r3, [pc, #368]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fe6a:	4a5e      	ldr	r2, [pc, #376]	; (800ffe4 <ProcessRadioRxDone+0x708>)
 800fe6c:	589b      	ldr	r3, [r3, r2]
 800fe6e:	22f0      	movs	r2, #240	; 0xf0
 800fe70:	5c9b      	ldrb	r3, [r3, r2]
 800fe72:	2b02      	cmp	r3, #2
 800fe74:	d110      	bne.n	800fe98 <ProcessRadioRxDone+0x5bc>
                    {
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fe76:	4b59      	ldr	r3, [pc, #356]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fe78:	4a5e      	ldr	r2, [pc, #376]	; (800fff4 <ProcessRadioRxDone+0x718>)
 800fe7a:	2103      	movs	r1, #3
 800fe7c:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 800fe7e:	e00b      	b.n	800fe98 <ProcessRadioRxDone+0x5bc>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fe80:	2181      	movs	r1, #129	; 0x81
 800fe82:	187b      	adds	r3, r7, r1
 800fe84:	781a      	ldrb	r2, [r3, #0]
 800fe86:	187b      	adds	r3, r7, r1
 800fe88:	3201      	adds	r2, #1
 800fe8a:	701a      	strb	r2, [r3, #0]
 800fe8c:	2381      	movs	r3, #129	; 0x81
 800fe8e:	18fb      	adds	r3, r7, r3
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	2b03      	cmp	r3, #3
 800fe94:	d993      	bls.n	800fdbe <ProcessRadioRxDone+0x4e2>
 800fe96:	e000      	b.n	800fe9a <ProcessRadioRxDone+0x5be>
                    break;
 800fe98:	46c0      	nop			; (mov r8, r8)
                }
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800fe9a:	2168      	movs	r1, #104	; 0x68
 800fe9c:	187b      	adds	r3, r7, r1
 800fe9e:	2215      	movs	r2, #21
 800fea0:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800fea2:	4b4e      	ldr	r3, [pc, #312]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fea4:	4a4f      	ldr	r2, [pc, #316]	; (800ffe4 <ProcessRadioRxDone+0x708>)
 800fea6:	589b      	ldr	r3, [r3, r2]
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	187a      	adds	r2, r7, r1
 800feac:	0011      	movs	r1, r2
 800feae:	0018      	movs	r0, r3
 800feb0:	f007 fade 	bl	8017470 <RegionGetPhyParam>
 800feb4:	0003      	movs	r3, r0
 800feb6:	001a      	movs	r2, r3
 800feb8:	2064      	movs	r0, #100	; 0x64
 800feba:	183b      	adds	r3, r7, r0
 800febc:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800febe:	1dbb      	adds	r3, r7, #6
 800fec0:	781d      	ldrb	r5, [r3, #0]
 800fec2:	4b46      	ldr	r3, [pc, #280]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800fec4:	4a47      	ldr	r2, [pc, #284]	; (800ffe4 <ProcessRadioRxDone+0x708>)
 800fec6:	5899      	ldr	r1, [r3, r2]
 800fec8:	183b      	adds	r3, r7, r0
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	b29b      	uxth	r3, r3
 800fece:	2280      	movs	r2, #128	; 0x80
 800fed0:	18bc      	adds	r4, r7, r2
 800fed2:	22e8      	movs	r2, #232	; 0xe8
 800fed4:	0052      	lsls	r2, r2, #1
 800fed6:	588e      	ldr	r6, [r1, r2]
 800fed8:	2134      	movs	r1, #52	; 0x34
 800feda:	1879      	adds	r1, r7, r1
 800fedc:	2082      	movs	r0, #130	; 0x82
 800fede:	183a      	adds	r2, r7, r0
 800fee0:	7810      	ldrb	r0, [r2, #0]
 800fee2:	2208      	movs	r2, #8
 800fee4:	18ba      	adds	r2, r7, r2
 800fee6:	9202      	str	r2, [sp, #8]
 800fee8:	1dfa      	adds	r2, r7, #7
 800feea:	9201      	str	r2, [sp, #4]
 800feec:	9300      	str	r3, [sp, #0]
 800feee:	0033      	movs	r3, r6
 800fef0:	000a      	movs	r2, r1
 800fef2:	0029      	movs	r1, r5
 800fef4:	f000 fed8 	bl	8010ca8 <GetFCntDown>
 800fef8:	0003      	movs	r3, r0
 800fefa:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fefc:	2280      	movs	r2, #128	; 0x80
 800fefe:	18bb      	adds	r3, r7, r2
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d041      	beq.n	800ff8a <ProcessRadioRxDone+0x6ae>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800ff06:	2380      	movs	r3, #128	; 0x80
 800ff08:	18fb      	adds	r3, r7, r3
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	2b07      	cmp	r3, #7
 800ff0e:	d126      	bne.n	800ff5e <ProcessRadioRxDone+0x682>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800ff10:	4b32      	ldr	r3, [pc, #200]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800ff12:	4a35      	ldr	r2, [pc, #212]	; (800ffe8 <ProcessRadioRxDone+0x70c>)
 800ff14:	2108      	movs	r1, #8
 800ff16:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800ff18:	4b30      	ldr	r3, [pc, #192]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800ff1a:	4a32      	ldr	r2, [pc, #200]	; (800ffe4 <ProcessRadioRxDone+0x708>)
 800ff1c:	589a      	ldr	r2, [r3, r2]
 800ff1e:	23e9      	movs	r3, #233	; 0xe9
 800ff20:	005b      	lsls	r3, r3, #1
 800ff22:	5cd3      	ldrb	r3, [r2, r3]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d128      	bne.n	800ff7a <ProcessRadioRxDone+0x69e>
 800ff28:	2374      	movs	r3, #116	; 0x74
 800ff2a:	18fb      	adds	r3, r7, r3
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	221f      	movs	r2, #31
 800ff30:	4393      	bics	r3, r2
 800ff32:	b2db      	uxtb	r3, r3
 800ff34:	2ba0      	cmp	r3, #160	; 0xa0
 800ff36:	d120      	bne.n	800ff7a <ProcessRadioRxDone+0x69e>
 800ff38:	4b28      	ldr	r3, [pc, #160]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800ff3a:	4a2a      	ldr	r2, [pc, #168]	; (800ffe4 <ProcessRadioRxDone+0x708>)
 800ff3c:	589a      	ldr	r2, [r3, r2]
 800ff3e:	23ec      	movs	r3, #236	; 0xec
 800ff40:	005b      	lsls	r3, r3, #1
 800ff42:	58d2      	ldr	r2, [r2, r3]
 800ff44:	2334      	movs	r3, #52	; 0x34
 800ff46:	18fb      	adds	r3, r7, r3
 800ff48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d115      	bne.n	800ff7a <ProcessRadioRxDone+0x69e>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800ff4e:	4b23      	ldr	r3, [pc, #140]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800ff50:	4a24      	ldr	r2, [pc, #144]	; (800ffe4 <ProcessRadioRxDone+0x708>)
 800ff52:	589a      	ldr	r2, [r3, r2]
 800ff54:	23e0      	movs	r3, #224	; 0xe0
 800ff56:	005b      	lsls	r3, r3, #1
 800ff58:	2101      	movs	r1, #1
 800ff5a:	54d1      	strb	r1, [r2, r3]
 800ff5c:	e00d      	b.n	800ff7a <ProcessRadioRxDone+0x69e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800ff5e:	2380      	movs	r3, #128	; 0x80
 800ff60:	18fb      	adds	r3, r7, r3
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	2b08      	cmp	r3, #8
 800ff66:	d104      	bne.n	800ff72 <ProcessRadioRxDone+0x696>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800ff68:	4b1c      	ldr	r3, [pc, #112]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800ff6a:	4a1f      	ldr	r2, [pc, #124]	; (800ffe8 <ProcessRadioRxDone+0x70c>)
 800ff6c:	210a      	movs	r1, #10
 800ff6e:	5499      	strb	r1, [r3, r2]
 800ff70:	e003      	b.n	800ff7a <ProcessRadioRxDone+0x69e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ff72:	4b1a      	ldr	r3, [pc, #104]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800ff74:	4a1c      	ldr	r2, [pc, #112]	; (800ffe8 <ProcessRadioRxDone+0x70c>)
 800ff76:	2101      	movs	r1, #1
 800ff78:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ff7a:	68b9      	ldr	r1, [r7, #8]
 800ff7c:	4a17      	ldr	r2, [pc, #92]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800ff7e:	2386      	movs	r3, #134	; 0x86
 800ff80:	00db      	lsls	r3, r3, #3
 800ff82:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800ff84:	f7ff fc7e 	bl	800f884 <PrepareRxDoneAbort>
                return;
 800ff88:	e1be      	b.n	8010308 <ProcessRadioRxDone+0xa2c>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800ff8a:	1dfb      	adds	r3, r7, #7
 800ff8c:	781a      	ldrb	r2, [r3, #0]
 800ff8e:	68bd      	ldr	r5, [r7, #8]
 800ff90:	2680      	movs	r6, #128	; 0x80
 800ff92:	19bc      	adds	r4, r7, r6
 800ff94:	2384      	movs	r3, #132	; 0x84
 800ff96:	18fb      	adds	r3, r7, r3
 800ff98:	6819      	ldr	r1, [r3, #0]
 800ff9a:	2382      	movs	r3, #130	; 0x82
 800ff9c:	18fb      	adds	r3, r7, r3
 800ff9e:	7818      	ldrb	r0, [r3, #0]
 800ffa0:	2334      	movs	r3, #52	; 0x34
 800ffa2:	18fb      	adds	r3, r7, r3
 800ffa4:	9300      	str	r3, [sp, #0]
 800ffa6:	002b      	movs	r3, r5
 800ffa8:	f006 fd52 	bl	8016a50 <LoRaMacCryptoUnsecureMessage>
 800ffac:	0003      	movs	r3, r0
 800ffae:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ffb0:	19bb      	adds	r3, r7, r6
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d01f      	beq.n	800fff8 <ProcessRadioRxDone+0x71c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800ffb8:	2380      	movs	r3, #128	; 0x80
 800ffba:	18fb      	adds	r3, r7, r3
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	2b02      	cmp	r3, #2
 800ffc0:	d104      	bne.n	800ffcc <ProcessRadioRxDone+0x6f0>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800ffc2:	4b06      	ldr	r3, [pc, #24]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800ffc4:	4a08      	ldr	r2, [pc, #32]	; (800ffe8 <ProcessRadioRxDone+0x70c>)
 800ffc6:	210b      	movs	r1, #11
 800ffc8:	5499      	strb	r1, [r3, r2]
 800ffca:	e003      	b.n	800ffd4 <ProcessRadioRxDone+0x6f8>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800ffcc:	4b03      	ldr	r3, [pc, #12]	; (800ffdc <ProcessRadioRxDone+0x700>)
 800ffce:	4a06      	ldr	r2, [pc, #24]	; (800ffe8 <ProcessRadioRxDone+0x70c>)
 800ffd0:	210c      	movs	r1, #12
 800ffd2:	5499      	strb	r1, [r3, r2]
                }
                PrepareRxDoneAbort( );
 800ffd4:	f7ff fc56 	bl	800f884 <PrepareRxDoneAbort>
                return;
 800ffd8:	46c0      	nop			; (mov r8, r8)
 800ffda:	e195      	b.n	8010308 <ProcessRadioRxDone+0xa2c>
 800ffdc:	200008ec 	.word	0x200008ec
 800ffe0:	0000041c 	.word	0x0000041c
 800ffe4:	00000484 	.word	0x00000484
 800ffe8:	0000041d 	.word	0x0000041d
 800ffec:	20000b24 	.word	0x20000b24
 800fff0:	00000434 	.word	0x00000434
 800fff4:	0000042d 	.word	0x0000042d
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fff8:	4bc5      	ldr	r3, [pc, #788]	; (8010310 <ProcessRadioRxDone+0xa34>)
 800fffa:	4ac6      	ldr	r2, [pc, #792]	; (8010314 <ProcessRadioRxDone+0xa38>)
 800fffc:	2100      	movs	r1, #0
 800fffe:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 8010000:	4bc3      	ldr	r3, [pc, #780]	; (8010310 <ProcessRadioRxDone+0xa34>)
 8010002:	2283      	movs	r2, #131	; 0x83
 8010004:	18ba      	adds	r2, r7, r2
 8010006:	49c4      	ldr	r1, [pc, #784]	; (8010318 <ProcessRadioRxDone+0xa3c>)
 8010008:	7812      	ldrb	r2, [r2, #0]
 801000a:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 801000c:	2034      	movs	r0, #52	; 0x34
 801000e:	183b      	adds	r3, r7, r0
 8010010:	7b1b      	ldrb	r3, [r3, #12]
 8010012:	06db      	lsls	r3, r3, #27
 8010014:	0fdb      	lsrs	r3, r3, #31
 8010016:	b2db      	uxtb	r3, r3
 8010018:	0019      	movs	r1, r3
 801001a:	4bbd      	ldr	r3, [pc, #756]	; (8010310 <ProcessRadioRxDone+0xa34>)
 801001c:	4abf      	ldr	r2, [pc, #764]	; (801031c <ProcessRadioRxDone+0xa40>)
 801001e:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 8010020:	4bbb      	ldr	r3, [pc, #748]	; (8010310 <ProcessRadioRxDone+0xa34>)
 8010022:	4abf      	ldr	r2, [pc, #764]	; (8010320 <ProcessRadioRxDone+0xa44>)
 8010024:	2100      	movs	r1, #0
 8010026:	5099      	str	r1, [r3, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 8010028:	4ab9      	ldr	r2, [pc, #740]	; (8010310 <ProcessRadioRxDone+0xa34>)
 801002a:	2385      	movs	r3, #133	; 0x85
 801002c:	00db      	lsls	r3, r3, #3
 801002e:	2100      	movs	r1, #0
 8010030:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8010032:	68b9      	ldr	r1, [r7, #8]
 8010034:	4ab6      	ldr	r2, [pc, #728]	; (8010310 <ProcessRadioRxDone+0xa34>)
 8010036:	2386      	movs	r3, #134	; 0x86
 8010038:	00db      	lsls	r3, r3, #3
 801003a:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 801003c:	183b      	adds	r3, r7, r0
 801003e:	7b1b      	ldrb	r3, [r3, #12]
 8010040:	069b      	lsls	r3, r3, #26
 8010042:	0fdb      	lsrs	r3, r3, #31
 8010044:	b2db      	uxtb	r3, r3
 8010046:	1e5a      	subs	r2, r3, #1
 8010048:	4193      	sbcs	r3, r2
 801004a:	b2d9      	uxtb	r1, r3
 801004c:	4bb0      	ldr	r3, [pc, #704]	; (8010310 <ProcessRadioRxDone+0xa34>)
 801004e:	4ab5      	ldr	r2, [pc, #724]	; (8010324 <ProcessRadioRxDone+0xa48>)
 8010050:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010052:	4baf      	ldr	r3, [pc, #700]	; (8010310 <ProcessRadioRxDone+0xa34>)
 8010054:	4ab4      	ldr	r2, [pc, #720]	; (8010328 <ProcessRadioRxDone+0xa4c>)
 8010056:	2100      	movs	r1, #0
 8010058:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 801005a:	183b      	adds	r3, r7, r0
 801005c:	7b1b      	ldrb	r3, [r3, #12]
 801005e:	069b      	lsls	r3, r3, #26
 8010060:	0fdb      	lsrs	r3, r3, #31
 8010062:	b2db      	uxtb	r3, r3
 8010064:	1e5a      	subs	r2, r3, #1
 8010066:	4193      	sbcs	r3, r2
 8010068:	b2d9      	uxtb	r1, r3
 801006a:	4aa9      	ldr	r2, [pc, #676]	; (8010310 <ProcessRadioRxDone+0xa34>)
 801006c:	2388      	movs	r3, #136	; 0x88
 801006e:	00db      	lsls	r3, r3, #3
 8010070:	54d1      	strb	r1, [r2, r3]

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8010072:	4ba7      	ldr	r3, [pc, #668]	; (8010310 <ProcessRadioRxDone+0xa34>)
 8010074:	4aad      	ldr	r2, [pc, #692]	; (801032c <ProcessRadioRxDone+0xa50>)
 8010076:	5c9b      	ldrb	r3, [r3, r2]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d004      	beq.n	8010086 <ProcessRadioRxDone+0x7aa>
                ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )
 801007c:	4ba4      	ldr	r3, [pc, #656]	; (8010310 <ProcessRadioRxDone+0xa34>)
 801007e:	4aab      	ldr	r2, [pc, #684]	; (801032c <ProcessRadioRxDone+0xa50>)
 8010080:	5c9b      	ldrb	r3, [r3, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8010082:	2b01      	cmp	r3, #1
 8010084:	d105      	bne.n	8010092 <ProcessRadioRxDone+0x7b6>
            {
                MacCtx.NvmCtx->AdrAckCounter = 0;
 8010086:	4ba2      	ldr	r3, [pc, #648]	; (8010310 <ProcessRadioRxDone+0xa34>)
 8010088:	4aa9      	ldr	r2, [pc, #676]	; (8010330 <ProcessRadioRxDone+0xa54>)
 801008a:	589b      	ldr	r3, [r3, r2]
 801008c:	22f4      	movs	r2, #244	; 0xf4
 801008e:	2100      	movs	r1, #0
 8010090:	5099      	str	r1, [r3, r2]
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8010092:	2383      	movs	r3, #131	; 0x83
 8010094:	18fb      	adds	r3, r7, r3
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	2b01      	cmp	r3, #1
 801009a:	d104      	bne.n	80100a6 <ProcessRadioRxDone+0x7ca>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 801009c:	4b9c      	ldr	r3, [pc, #624]	; (8010310 <ProcessRadioRxDone+0xa34>)
 801009e:	4aa5      	ldr	r2, [pc, #660]	; (8010334 <ProcessRadioRxDone+0xa58>)
 80100a0:	2102      	movs	r1, #2
 80100a2:	5499      	strb	r1, [r3, r2]
 80100a4:	e02f      	b.n	8010106 <ProcessRadioRxDone+0x82a>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 80100a6:	2374      	movs	r3, #116	; 0x74
 80100a8:	18fb      	adds	r3, r7, r3
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	221f      	movs	r2, #31
 80100ae:	4393      	bics	r3, r2
 80100b0:	b2db      	uxtb	r3, r3
 80100b2:	2ba0      	cmp	r3, #160	; 0xa0
 80100b4:	d11c      	bne.n	80100f0 <ProcessRadioRxDone+0x814>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 80100b6:	4b96      	ldr	r3, [pc, #600]	; (8010310 <ProcessRadioRxDone+0xa34>)
 80100b8:	4a9d      	ldr	r2, [pc, #628]	; (8010330 <ProcessRadioRxDone+0xa54>)
 80100ba:	589a      	ldr	r2, [r3, r2]
 80100bc:	23e0      	movs	r3, #224	; 0xe0
 80100be:	005b      	lsls	r3, r3, #1
 80100c0:	2101      	movs	r1, #1
 80100c2:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 80100c4:	4b92      	ldr	r3, [pc, #584]	; (8010310 <ProcessRadioRxDone+0xa34>)
 80100c6:	4a9a      	ldr	r2, [pc, #616]	; (8010330 <ProcessRadioRxDone+0xa54>)
 80100c8:	589a      	ldr	r2, [r3, r2]
 80100ca:	23e9      	movs	r3, #233	; 0xe9
 80100cc:	005b      	lsls	r3, r3, #1
 80100ce:	5cd3      	ldrb	r3, [r2, r3]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d108      	bne.n	80100e6 <ProcessRadioRxDone+0x80a>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 80100d4:	4b8e      	ldr	r3, [pc, #568]	; (8010310 <ProcessRadioRxDone+0xa34>)
 80100d6:	4a96      	ldr	r2, [pc, #600]	; (8010330 <ProcessRadioRxDone+0xa54>)
 80100d8:	589a      	ldr	r2, [r3, r2]
 80100da:	2334      	movs	r3, #52	; 0x34
 80100dc:	18fb      	adds	r3, r7, r3
 80100de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80100e0:	23ec      	movs	r3, #236	; 0xec
 80100e2:	005b      	lsls	r3, r3, #1
 80100e4:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80100e6:	4b8a      	ldr	r3, [pc, #552]	; (8010310 <ProcessRadioRxDone+0xa34>)
 80100e8:	4a92      	ldr	r2, [pc, #584]	; (8010334 <ProcessRadioRxDone+0xa58>)
 80100ea:	2101      	movs	r1, #1
 80100ec:	5499      	strb	r1, [r3, r2]
 80100ee:	e00a      	b.n	8010106 <ProcessRadioRxDone+0x82a>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 80100f0:	4b87      	ldr	r3, [pc, #540]	; (8010310 <ProcessRadioRxDone+0xa34>)
 80100f2:	4a8f      	ldr	r2, [pc, #572]	; (8010330 <ProcessRadioRxDone+0xa54>)
 80100f4:	589a      	ldr	r2, [r3, r2]
 80100f6:	23e0      	movs	r3, #224	; 0xe0
 80100f8:	005b      	lsls	r3, r3, #1
 80100fa:	2100      	movs	r1, #0
 80100fc:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80100fe:	4b84      	ldr	r3, [pc, #528]	; (8010310 <ProcessRadioRxDone+0xa34>)
 8010100:	4a8c      	ldr	r2, [pc, #560]	; (8010334 <ProcessRadioRxDone+0xa58>)
 8010102:	2100      	movs	r1, #0
 8010104:	5499      	strb	r1, [r3, r2]
                }
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8010106:	4b82      	ldr	r3, [pc, #520]	; (8010310 <ProcessRadioRxDone+0xa34>)
 8010108:	4a88      	ldr	r2, [pc, #544]	; (801032c <ProcessRadioRxDone+0xa50>)
 801010a:	5c98      	ldrb	r0, [r3, r2]
 801010c:	4b80      	ldr	r3, [pc, #512]	; (8010310 <ProcessRadioRxDone+0xa34>)
 801010e:	4a8a      	ldr	r2, [pc, #552]	; (8010338 <ProcessRadioRxDone+0xa5c>)
 8010110:	5c9a      	ldrb	r2, [r3, r2]
 8010112:	2334      	movs	r3, #52	; 0x34
 8010114:	18fb      	adds	r3, r7, r3
 8010116:	7b1b      	ldrb	r3, [r3, #12]
 8010118:	1c19      	adds	r1, r3, #0
 801011a:	f002 f999 	bl	8012450 <RemoveMacCommands>

            switch( fType )
 801011e:	1dbb      	adds	r3, r7, #6
 8010120:	781b      	ldrb	r3, [r3, #0]
 8010122:	2b01      	cmp	r3, #1
 8010124:	d038      	beq.n	8010198 <ProcessRadioRxDone+0x8bc>
 8010126:	dc02      	bgt.n	801012e <ProcessRadioRxDone+0x852>
 8010128:	2b00      	cmp	r3, #0
 801012a:	d005      	beq.n	8010138 <ProcessRadioRxDone+0x85c>
 801012c:	e086      	b.n	801023c <ProcessRadioRxDone+0x960>
 801012e:	2b02      	cmp	r3, #2
 8010130:	d052      	beq.n	80101d8 <ProcessRadioRxDone+0x8fc>
 8010132:	2b03      	cmp	r3, #3
 8010134:	d06a      	beq.n	801020c <ProcessRadioRxDone+0x930>
 8010136:	e081      	b.n	801023c <ProcessRadioRxDone+0x960>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8010138:	2034      	movs	r0, #52	; 0x34
 801013a:	183b      	adds	r3, r7, r0
 801013c:	7b1b      	ldrb	r3, [r3, #12]
 801013e:	071b      	lsls	r3, r3, #28
 8010140:	0f1b      	lsrs	r3, r3, #28
 8010142:	b2db      	uxtb	r3, r3
 8010144:	001c      	movs	r4, r3
 8010146:	4b72      	ldr	r3, [pc, #456]	; (8010310 <ProcessRadioRxDone+0xa34>)
 8010148:	4a78      	ldr	r2, [pc, #480]	; (801032c <ProcessRadioRxDone+0xa50>)
 801014a:	5c9b      	ldrb	r3, [r3, r2]
 801014c:	2277      	movs	r2, #119	; 0x77
 801014e:	18ba      	adds	r2, r7, r2
 8010150:	2100      	movs	r1, #0
 8010152:	5651      	ldrsb	r1, [r2, r1]
 8010154:	0005      	movs	r5, r0
 8010156:	183a      	adds	r2, r7, r0
 8010158:	3210      	adds	r2, #16
 801015a:	0010      	movs	r0, r2
 801015c:	9300      	str	r3, [sp, #0]
 801015e:	000b      	movs	r3, r1
 8010160:	0022      	movs	r2, r4
 8010162:	2100      	movs	r1, #0
 8010164:	f000 ffd6 	bl	8011114 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010168:	0028      	movs	r0, r5
 801016a:	183b      	adds	r3, r7, r0
 801016c:	2220      	movs	r2, #32
 801016e:	5c99      	ldrb	r1, [r3, r2]
 8010170:	4b67      	ldr	r3, [pc, #412]	; (8010310 <ProcessRadioRxDone+0xa34>)
 8010172:	4a72      	ldr	r2, [pc, #456]	; (801033c <ProcessRadioRxDone+0xa60>)
 8010174:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8010176:	183b      	adds	r3, r7, r0
 8010178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801017a:	4b65      	ldr	r3, [pc, #404]	; (8010310 <ProcessRadioRxDone+0xa34>)
 801017c:	4968      	ldr	r1, [pc, #416]	; (8010320 <ProcessRadioRxDone+0xa44>)
 801017e:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8010180:	183b      	adds	r3, r7, r0
 8010182:	2228      	movs	r2, #40	; 0x28
 8010184:	5c99      	ldrb	r1, [r3, r2]
 8010186:	4a62      	ldr	r2, [pc, #392]	; (8010310 <ProcessRadioRxDone+0xa34>)
 8010188:	2385      	movs	r3, #133	; 0x85
 801018a:	00db      	lsls	r3, r3, #3
 801018c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 801018e:	4b60      	ldr	r3, [pc, #384]	; (8010310 <ProcessRadioRxDone+0xa34>)
 8010190:	4a6b      	ldr	r2, [pc, #428]	; (8010340 <ProcessRadioRxDone+0xa64>)
 8010192:	2101      	movs	r1, #1
 8010194:	5499      	strb	r1, [r3, r2]
                    break;
 8010196:	e058      	b.n	801024a <ProcessRadioRxDone+0x96e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8010198:	2034      	movs	r0, #52	; 0x34
 801019a:	183b      	adds	r3, r7, r0
 801019c:	7b1b      	ldrb	r3, [r3, #12]
 801019e:	071b      	lsls	r3, r3, #28
 80101a0:	0f1b      	lsrs	r3, r3, #28
 80101a2:	b2db      	uxtb	r3, r3
 80101a4:	001c      	movs	r4, r3
 80101a6:	4b5a      	ldr	r3, [pc, #360]	; (8010310 <ProcessRadioRxDone+0xa34>)
 80101a8:	4a60      	ldr	r2, [pc, #384]	; (801032c <ProcessRadioRxDone+0xa50>)
 80101aa:	5c9b      	ldrb	r3, [r3, r2]
 80101ac:	2277      	movs	r2, #119	; 0x77
 80101ae:	18ba      	adds	r2, r7, r2
 80101b0:	2100      	movs	r1, #0
 80101b2:	5651      	ldrsb	r1, [r2, r1]
 80101b4:	0005      	movs	r5, r0
 80101b6:	183a      	adds	r2, r7, r0
 80101b8:	3210      	adds	r2, #16
 80101ba:	0010      	movs	r0, r2
 80101bc:	9300      	str	r3, [sp, #0]
 80101be:	000b      	movs	r3, r1
 80101c0:	0022      	movs	r2, r4
 80101c2:	2100      	movs	r1, #0
 80101c4:	f000 ffa6 	bl	8011114 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80101c8:	0028      	movs	r0, r5
 80101ca:	183b      	adds	r3, r7, r0
 80101cc:	2220      	movs	r2, #32
 80101ce:	5c99      	ldrb	r1, [r3, r2]
 80101d0:	4b4f      	ldr	r3, [pc, #316]	; (8010310 <ProcessRadioRxDone+0xa34>)
 80101d2:	4a5a      	ldr	r2, [pc, #360]	; (801033c <ProcessRadioRxDone+0xa60>)
 80101d4:	5499      	strb	r1, [r3, r2]
                    break;
 80101d6:	e038      	b.n	801024a <ProcessRadioRxDone+0x96e>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 80101d8:	2434      	movs	r4, #52	; 0x34
 80101da:	193b      	adds	r3, r7, r4
 80101dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80101de:	193b      	adds	r3, r7, r4
 80101e0:	2228      	movs	r2, #40	; 0x28
 80101e2:	5c99      	ldrb	r1, [r3, r2]
 80101e4:	4b4a      	ldr	r3, [pc, #296]	; (8010310 <ProcessRadioRxDone+0xa34>)
 80101e6:	4a51      	ldr	r2, [pc, #324]	; (801032c <ProcessRadioRxDone+0xa50>)
 80101e8:	5c9b      	ldrb	r3, [r3, r2]
 80101ea:	2277      	movs	r2, #119	; 0x77
 80101ec:	18ba      	adds	r2, r7, r2
 80101ee:	7812      	ldrb	r2, [r2, #0]
 80101f0:	b252      	sxtb	r2, r2
 80101f2:	9300      	str	r3, [sp, #0]
 80101f4:	0013      	movs	r3, r2
 80101f6:	000a      	movs	r2, r1
 80101f8:	2100      	movs	r1, #0
 80101fa:	f000 ff8b 	bl	8011114 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80101fe:	193b      	adds	r3, r7, r4
 8010200:	2220      	movs	r2, #32
 8010202:	5c99      	ldrb	r1, [r3, r2]
 8010204:	4b42      	ldr	r3, [pc, #264]	; (8010310 <ProcessRadioRxDone+0xa34>)
 8010206:	4a4d      	ldr	r2, [pc, #308]	; (801033c <ProcessRadioRxDone+0xa60>)
 8010208:	5499      	strb	r1, [r3, r2]
                    break;
 801020a:	e01e      	b.n	801024a <ProcessRadioRxDone+0x96e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801020c:	2034      	movs	r0, #52	; 0x34
 801020e:	183b      	adds	r3, r7, r0
 8010210:	2220      	movs	r2, #32
 8010212:	5c99      	ldrb	r1, [r3, r2]
 8010214:	4b3e      	ldr	r3, [pc, #248]	; (8010310 <ProcessRadioRxDone+0xa34>)
 8010216:	4a49      	ldr	r2, [pc, #292]	; (801033c <ProcessRadioRxDone+0xa60>)
 8010218:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 801021a:	183b      	adds	r3, r7, r0
 801021c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801021e:	4b3c      	ldr	r3, [pc, #240]	; (8010310 <ProcessRadioRxDone+0xa34>)
 8010220:	493f      	ldr	r1, [pc, #252]	; (8010320 <ProcessRadioRxDone+0xa44>)
 8010222:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8010224:	183b      	adds	r3, r7, r0
 8010226:	2228      	movs	r2, #40	; 0x28
 8010228:	5c99      	ldrb	r1, [r3, r2]
 801022a:	4a39      	ldr	r2, [pc, #228]	; (8010310 <ProcessRadioRxDone+0xa34>)
 801022c:	2385      	movs	r3, #133	; 0x85
 801022e:	00db      	lsls	r3, r3, #3
 8010230:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 8010232:	4b37      	ldr	r3, [pc, #220]	; (8010310 <ProcessRadioRxDone+0xa34>)
 8010234:	4a42      	ldr	r2, [pc, #264]	; (8010340 <ProcessRadioRxDone+0xa64>)
 8010236:	2101      	movs	r1, #1
 8010238:	5499      	strb	r1, [r3, r2]
                    break;
 801023a:	e006      	b.n	801024a <ProcessRadioRxDone+0x96e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801023c:	4b34      	ldr	r3, [pc, #208]	; (8010310 <ProcessRadioRxDone+0xa34>)
 801023e:	4a35      	ldr	r2, [pc, #212]	; (8010314 <ProcessRadioRxDone+0xa38>)
 8010240:	2101      	movs	r1, #1
 8010242:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 8010244:	f7ff fb1e 	bl	800f884 <PrepareRxDoneAbort>
                    break;
 8010248:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 801024a:	4b31      	ldr	r3, [pc, #196]	; (8010310 <ProcessRadioRxDone+0xa34>)
 801024c:	4a3d      	ldr	r2, [pc, #244]	; (8010344 <ProcessRadioRxDone+0xa68>)
 801024e:	5c99      	ldrb	r1, [r3, r2]
 8010250:	2002      	movs	r0, #2
 8010252:	4301      	orrs	r1, r0
 8010254:	5499      	strb	r1, [r3, r2]

            break;
 8010256:	e036      	b.n	80102c6 <ProcessRadioRxDone+0x9ea>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8010258:	2476      	movs	r4, #118	; 0x76
 801025a:	193b      	adds	r3, r7, r4
 801025c:	781b      	ldrb	r3, [r3, #0]
 801025e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010260:	18d1      	adds	r1, r2, r3
 8010262:	193b      	adds	r3, r7, r4
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	b29b      	uxth	r3, r3
 8010268:	257a      	movs	r5, #122	; 0x7a
 801026a:	197a      	adds	r2, r7, r5
 801026c:	8812      	ldrh	r2, [r2, #0]
 801026e:	1ad3      	subs	r3, r2, r3
 8010270:	b29a      	uxth	r2, r3
 8010272:	4b35      	ldr	r3, [pc, #212]	; (8010348 <ProcessRadioRxDone+0xa6c>)
 8010274:	0018      	movs	r0, r3
 8010276:	f00b f979 	bl	801b56c <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 801027a:	4b25      	ldr	r3, [pc, #148]	; (8010310 <ProcessRadioRxDone+0xa34>)
 801027c:	4a2d      	ldr	r2, [pc, #180]	; (8010334 <ProcessRadioRxDone+0xa58>)
 801027e:	2103      	movs	r1, #3
 8010280:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010282:	4b23      	ldr	r3, [pc, #140]	; (8010310 <ProcessRadioRxDone+0xa34>)
 8010284:	4a23      	ldr	r2, [pc, #140]	; (8010314 <ProcessRadioRxDone+0xa38>)
 8010286:	2100      	movs	r1, #0
 8010288:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 801028a:	4b21      	ldr	r3, [pc, #132]	; (8010310 <ProcessRadioRxDone+0xa34>)
 801028c:	4924      	ldr	r1, [pc, #144]	; (8010320 <ProcessRadioRxDone+0xa44>)
 801028e:	4a2e      	ldr	r2, [pc, #184]	; (8010348 <ProcessRadioRxDone+0xa6c>)
 8010290:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8010292:	197b      	adds	r3, r7, r5
 8010294:	881b      	ldrh	r3, [r3, #0]
 8010296:	b2da      	uxtb	r2, r3
 8010298:	193b      	adds	r3, r7, r4
 801029a:	781b      	ldrb	r3, [r3, #0]
 801029c:	1ad3      	subs	r3, r2, r3
 801029e:	b2d9      	uxtb	r1, r3
 80102a0:	4a1b      	ldr	r2, [pc, #108]	; (8010310 <ProcessRadioRxDone+0xa34>)
 80102a2:	2385      	movs	r3, #133	; 0x85
 80102a4:	00db      	lsls	r3, r3, #3
 80102a6:	54d1      	strb	r1, [r2, r3]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 80102a8:	4b19      	ldr	r3, [pc, #100]	; (8010310 <ProcessRadioRxDone+0xa34>)
 80102aa:	4a26      	ldr	r2, [pc, #152]	; (8010344 <ProcessRadioRxDone+0xa68>)
 80102ac:	5c99      	ldrb	r1, [r3, r2]
 80102ae:	2002      	movs	r0, #2
 80102b0:	4301      	orrs	r1, r0
 80102b2:	5499      	strb	r1, [r3, r2]
            break;
 80102b4:	e007      	b.n	80102c6 <ProcessRadioRxDone+0x9ea>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80102b6:	4b16      	ldr	r3, [pc, #88]	; (8010310 <ProcessRadioRxDone+0xa34>)
 80102b8:	4a16      	ldr	r2, [pc, #88]	; (8010314 <ProcessRadioRxDone+0xa38>)
 80102ba:	2101      	movs	r1, #1
 80102bc:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 80102be:	f7ff fae1 	bl	800f884 <PrepareRxDoneAbort>
            break;
 80102c2:	e000      	b.n	80102c6 <ProcessRadioRxDone+0x9ea>
            break;
 80102c4:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 80102c6:	4b12      	ldr	r3, [pc, #72]	; (8010310 <ProcessRadioRxDone+0xa34>)
 80102c8:	4a20      	ldr	r2, [pc, #128]	; (801034c <ProcessRadioRxDone+0xa70>)
 80102ca:	5c9b      	ldrb	r3, [r3, r2]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d009      	beq.n	80102e4 <ProcessRadioRxDone+0xa08>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80102d0:	4a0f      	ldr	r2, [pc, #60]	; (8010310 <ProcessRadioRxDone+0xa34>)
 80102d2:	2388      	movs	r3, #136	; 0x88
 80102d4:	00db      	lsls	r3, r3, #3
 80102d6:	5cd3      	ldrb	r3, [r2, r3]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d00d      	beq.n	80102f8 <ProcessRadioRxDone+0xa1c>
        {
            OnAckTimeoutTimerEvent( NULL );
 80102dc:	2000      	movs	r0, #0
 80102de:	f000 fca1 	bl	8010c24 <OnAckTimeoutTimerEvent>
 80102e2:	e009      	b.n	80102f8 <ProcessRadioRxDone+0xa1c>
        }
    }
    else
    {
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 80102e4:	4b0a      	ldr	r3, [pc, #40]	; (8010310 <ProcessRadioRxDone+0xa34>)
 80102e6:	4a12      	ldr	r2, [pc, #72]	; (8010330 <ProcessRadioRxDone+0xa54>)
 80102e8:	589b      	ldr	r3, [r3, r2]
 80102ea:	22f0      	movs	r2, #240	; 0xf0
 80102ec:	5c9b      	ldrb	r3, [r3, r2]
 80102ee:	2b02      	cmp	r3, #2
 80102f0:	d102      	bne.n	80102f8 <ProcessRadioRxDone+0xa1c>
        {
            OnAckTimeoutTimerEvent( NULL );
 80102f2:	2000      	movs	r0, #0
 80102f4:	f000 fc96 	bl	8010c24 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 80102f8:	4b05      	ldr	r3, [pc, #20]	; (8010310 <ProcessRadioRxDone+0xa34>)
 80102fa:	4a12      	ldr	r2, [pc, #72]	; (8010344 <ProcessRadioRxDone+0xa68>)
 80102fc:	5c99      	ldrb	r1, [r3, r2]
 80102fe:	2020      	movs	r0, #32
 8010300:	4301      	orrs	r1, r0
 8010302:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 8010304:	f7ff f9f6 	bl	800f6f4 <UpdateRxSlotIdleState>
}
 8010308:	46bd      	mov	sp, r7
 801030a:	b023      	add	sp, #140	; 0x8c
 801030c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801030e:	46c0      	nop			; (mov r8, r8)
 8010310:	200008ec 	.word	0x200008ec
 8010314:	0000041d 	.word	0x0000041d
 8010318:	0000041e 	.word	0x0000041e
 801031c:	00000421 	.word	0x00000421
 8010320:	00000424 	.word	0x00000424
 8010324:	0000042e 	.word	0x0000042e
 8010328:	0000043d 	.word	0x0000043d
 801032c:	0000042d 	.word	0x0000042d
 8010330:	00000484 	.word	0x00000484
 8010334:	0000041c 	.word	0x0000041c
 8010338:	0000043c 	.word	0x0000043c
 801033c:	0000041f 	.word	0x0000041f
 8010340:	00000429 	.word	0x00000429
 8010344:	00000481 	.word	0x00000481
 8010348:	20000b24 	.word	0x20000b24
 801034c:	00000414 	.word	0x00000414

08010350 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8010350:	b580      	push	{r7, lr}
 8010352:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8010354:	4b12      	ldr	r3, [pc, #72]	; (80103a0 <ProcessRadioTxTimeout+0x50>)
 8010356:	4a13      	ldr	r2, [pc, #76]	; (80103a4 <ProcessRadioTxTimeout+0x54>)
 8010358:	589b      	ldr	r3, [r3, r2]
 801035a:	22f0      	movs	r2, #240	; 0xf0
 801035c:	5c9b      	ldrb	r3, [r3, r2]
 801035e:	2b02      	cmp	r3, #2
 8010360:	d002      	beq.n	8010368 <ProcessRadioTxTimeout+0x18>
    {
        Radio.Sleep( );
 8010362:	4b11      	ldr	r3, [pc, #68]	; (80103a8 <ProcessRadioTxTimeout+0x58>)
 8010364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010366:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8010368:	f7ff f9c4 	bl	800f6f4 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 801036c:	4b0c      	ldr	r3, [pc, #48]	; (80103a0 <ProcessRadioTxTimeout+0x50>)
 801036e:	4a0f      	ldr	r2, [pc, #60]	; (80103ac <ProcessRadioTxTimeout+0x5c>)
 8010370:	2102      	movs	r1, #2
 8010372:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8010374:	2002      	movs	r0, #2
 8010376:	f005 fa7d 	bl	8015874 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 801037a:	4b09      	ldr	r3, [pc, #36]	; (80103a0 <ProcessRadioTxTimeout+0x50>)
 801037c:	4a0c      	ldr	r2, [pc, #48]	; (80103b0 <ProcessRadioTxTimeout+0x60>)
 801037e:	5c9b      	ldrb	r3, [r3, r2]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d003      	beq.n	801038c <ProcessRadioTxTimeout+0x3c>
    {
        MacCtx.AckTimeoutRetry = true;
 8010384:	4b06      	ldr	r3, [pc, #24]	; (80103a0 <ProcessRadioTxTimeout+0x50>)
 8010386:	4a0b      	ldr	r2, [pc, #44]	; (80103b4 <ProcessRadioTxTimeout+0x64>)
 8010388:	2101      	movs	r1, #1
 801038a:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 801038c:	4b04      	ldr	r3, [pc, #16]	; (80103a0 <ProcessRadioTxTimeout+0x50>)
 801038e:	4a0a      	ldr	r2, [pc, #40]	; (80103b8 <ProcessRadioTxTimeout+0x68>)
 8010390:	5c99      	ldrb	r1, [r3, r2]
 8010392:	2020      	movs	r0, #32
 8010394:	4301      	orrs	r1, r0
 8010396:	5499      	strb	r1, [r3, r2]
}
 8010398:	46c0      	nop			; (mov r8, r8)
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
 801039e:	46c0      	nop			; (mov r8, r8)
 80103a0:	200008ec 	.word	0x200008ec
 80103a4:	00000484 	.word	0x00000484
 80103a8:	0801ca04 	.word	0x0801ca04
 80103ac:	0000043d 	.word	0x0000043d
 80103b0:	00000414 	.word	0x00000414
 80103b4:	00000413 	.word	0x00000413
 80103b8:	00000481 	.word	0x00000481

080103bc <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b084      	sub	sp, #16
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	0002      	movs	r2, r0
 80103c4:	1dfb      	adds	r3, r7, #7
 80103c6:	701a      	strb	r2, [r3, #0]
 80103c8:	1dbb      	adds	r3, r7, #6
 80103ca:	1c0a      	adds	r2, r1, #0
 80103cc:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 80103ce:	230f      	movs	r3, #15
 80103d0:	18fb      	adds	r3, r7, r3
 80103d2:	2200      	movs	r2, #0
 80103d4:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80103d6:	4b3d      	ldr	r3, [pc, #244]	; (80104cc <HandleRadioRxErrorTimeout+0x110>)
 80103d8:	4a3d      	ldr	r2, [pc, #244]	; (80104d0 <HandleRadioRxErrorTimeout+0x114>)
 80103da:	589b      	ldr	r3, [r3, r2]
 80103dc:	22f0      	movs	r2, #240	; 0xf0
 80103de:	5c9b      	ldrb	r3, [r3, r2]
 80103e0:	2b02      	cmp	r3, #2
 80103e2:	d002      	beq.n	80103ea <HandleRadioRxErrorTimeout+0x2e>
    {
        Radio.Sleep( );
 80103e4:	4b3b      	ldr	r3, [pc, #236]	; (80104d4 <HandleRadioRxErrorTimeout+0x118>)
 80103e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103e8:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80103ea:	f004 fdc0 	bl	8014f6e <LoRaMacClassBIsBeaconExpected>
 80103ee:	1e03      	subs	r3, r0, #0
 80103f0:	d009      	beq.n	8010406 <HandleRadioRxErrorTimeout+0x4a>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80103f2:	2002      	movs	r0, #2
 80103f4:	f004 fd73 	bl	8014ede <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80103f8:	2000      	movs	r0, #0
 80103fa:	f004 fd94 	bl	8014f26 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80103fe:	230f      	movs	r3, #15
 8010400:	18fb      	adds	r3, r7, r3
 8010402:	2201      	movs	r2, #1
 8010404:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8010406:	4b31      	ldr	r3, [pc, #196]	; (80104cc <HandleRadioRxErrorTimeout+0x110>)
 8010408:	4a31      	ldr	r2, [pc, #196]	; (80104d0 <HandleRadioRxErrorTimeout+0x114>)
 801040a:	589b      	ldr	r3, [r3, r2]
 801040c:	22f0      	movs	r2, #240	; 0xf0
 801040e:	5c9b      	ldrb	r3, [r3, r2]
 8010410:	2b01      	cmp	r3, #1
 8010412:	d11b      	bne.n	801044c <HandleRadioRxErrorTimeout+0x90>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010414:	f004 fdb1 	bl	8014f7a <LoRaMacClassBIsPingExpected>
 8010418:	1e03      	subs	r3, r0, #0
 801041a:	d009      	beq.n	8010430 <HandleRadioRxErrorTimeout+0x74>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801041c:	2000      	movs	r0, #0
 801041e:	f004 fd68 	bl	8014ef2 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010422:	2000      	movs	r0, #0
 8010424:	f004 fd87 	bl	8014f36 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8010428:	230f      	movs	r3, #15
 801042a:	18fb      	adds	r3, r7, r3
 801042c:	2201      	movs	r2, #1
 801042e:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010430:	f004 fda9 	bl	8014f86 <LoRaMacClassBIsMulticastExpected>
 8010434:	1e03      	subs	r3, r0, #0
 8010436:	d009      	beq.n	801044c <HandleRadioRxErrorTimeout+0x90>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010438:	2000      	movs	r0, #0
 801043a:	f004 fd64 	bl	8014f06 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 801043e:	2000      	movs	r0, #0
 8010440:	f004 fd81 	bl	8014f46 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8010444:	230f      	movs	r3, #15
 8010446:	18fb      	adds	r3, r7, r3
 8010448:	2201      	movs	r2, #1
 801044a:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 801044c:	230f      	movs	r3, #15
 801044e:	18fb      	adds	r3, r7, r3
 8010450:	781b      	ldrb	r3, [r3, #0]
 8010452:	2201      	movs	r2, #1
 8010454:	4053      	eors	r3, r2
 8010456:	b2db      	uxtb	r3, r3
 8010458:	2b00      	cmp	r3, #0
 801045a:	d031      	beq.n	80104c0 <HandleRadioRxErrorTimeout+0x104>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 801045c:	4a1b      	ldr	r2, [pc, #108]	; (80104cc <HandleRadioRxErrorTimeout+0x110>)
 801045e:	2390      	movs	r3, #144	; 0x90
 8010460:	00db      	lsls	r3, r3, #3
 8010462:	5cd3      	ldrb	r3, [r2, r3]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d10f      	bne.n	8010488 <HandleRadioRxErrorTimeout+0xcc>
        {
            if( MacCtx.NodeAckRequested == true )
 8010468:	4b18      	ldr	r3, [pc, #96]	; (80104cc <HandleRadioRxErrorTimeout+0x110>)
 801046a:	4a1b      	ldr	r2, [pc, #108]	; (80104d8 <HandleRadioRxErrorTimeout+0x11c>)
 801046c:	5c9b      	ldrb	r3, [r3, r2]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d004      	beq.n	801047c <HandleRadioRxErrorTimeout+0xc0>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8010472:	4b16      	ldr	r3, [pc, #88]	; (80104cc <HandleRadioRxErrorTimeout+0x110>)
 8010474:	1dfa      	adds	r2, r7, #7
 8010476:	4919      	ldr	r1, [pc, #100]	; (80104dc <HandleRadioRxErrorTimeout+0x120>)
 8010478:	7812      	ldrb	r2, [r2, #0]
 801047a:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 801047c:	1dfb      	adds	r3, r7, #7
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	0018      	movs	r0, r3
 8010482:	f005 f9f7 	bl	8015874 <LoRaMacConfirmQueueSetStatusCmn>
 8010486:	e01b      	b.n	80104c0 <HandleRadioRxErrorTimeout+0x104>
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8010488:	4b10      	ldr	r3, [pc, #64]	; (80104cc <HandleRadioRxErrorTimeout+0x110>)
 801048a:	4a13      	ldr	r2, [pc, #76]	; (80104d8 <HandleRadioRxErrorTimeout+0x11c>)
 801048c:	5c9b      	ldrb	r3, [r3, r2]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d004      	beq.n	801049c <HandleRadioRxErrorTimeout+0xe0>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8010492:	4b0e      	ldr	r3, [pc, #56]	; (80104cc <HandleRadioRxErrorTimeout+0x110>)
 8010494:	1dba      	adds	r2, r7, #6
 8010496:	4911      	ldr	r1, [pc, #68]	; (80104dc <HandleRadioRxErrorTimeout+0x120>)
 8010498:	7812      	ldrb	r2, [r2, #0]
 801049a:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 801049c:	1dbb      	adds	r3, r7, #6
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	0018      	movs	r0, r3
 80104a2:	f005 f9e7 	bl	8015874 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80104a6:	4b09      	ldr	r3, [pc, #36]	; (80104cc <HandleRadioRxErrorTimeout+0x110>)
 80104a8:	4a09      	ldr	r2, [pc, #36]	; (80104d0 <HandleRadioRxErrorTimeout+0x114>)
 80104aa:	589b      	ldr	r3, [r3, r2]
 80104ac:	22f0      	movs	r2, #240	; 0xf0
 80104ae:	5c9b      	ldrb	r3, [r3, r2]
 80104b0:	2b02      	cmp	r3, #2
 80104b2:	d005      	beq.n	80104c0 <HandleRadioRxErrorTimeout+0x104>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 80104b4:	4b05      	ldr	r3, [pc, #20]	; (80104cc <HandleRadioRxErrorTimeout+0x110>)
 80104b6:	4a0a      	ldr	r2, [pc, #40]	; (80104e0 <HandleRadioRxErrorTimeout+0x124>)
 80104b8:	5c99      	ldrb	r1, [r3, r2]
 80104ba:	2020      	movs	r0, #32
 80104bc:	4301      	orrs	r1, r0
 80104be:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    UpdateRxSlotIdleState( );
 80104c0:	f7ff f918 	bl	800f6f4 <UpdateRxSlotIdleState>
}
 80104c4:	46c0      	nop			; (mov r8, r8)
 80104c6:	46bd      	mov	sp, r7
 80104c8:	b004      	add	sp, #16
 80104ca:	bd80      	pop	{r7, pc}
 80104cc:	200008ec 	.word	0x200008ec
 80104d0:	00000484 	.word	0x00000484
 80104d4:	0801ca04 	.word	0x0801ca04
 80104d8:	00000414 	.word	0x00000414
 80104dc:	0000043d 	.word	0x0000043d
 80104e0:	00000481 	.word	0x00000481

080104e4 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80104e8:	2106      	movs	r1, #6
 80104ea:	2005      	movs	r0, #5
 80104ec:	f7ff ff66 	bl	80103bc <HandleRadioRxErrorTimeout>
}
 80104f0:	46c0      	nop			; (mov r8, r8)
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}

080104f6 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 80104f6:	b580      	push	{r7, lr}
 80104f8:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 80104fa:	2104      	movs	r1, #4
 80104fc:	2003      	movs	r0, #3
 80104fe:	f7ff ff5d 	bl	80103bc <HandleRadioRxErrorTimeout>
}
 8010502:	46c0      	nop			; (mov r8, r8)
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b084      	sub	sp, #16
 801050c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801050e:	f3ef 8310 	mrs	r3, PRIMASK
 8010512:	607b      	str	r3, [r7, #4]
  return(result);
 8010514:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8010516:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010518:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 801051a:	4b1f      	ldr	r3, [pc, #124]	; (8010598 <LoRaMacHandleIrqEvents+0x90>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8010520:	4b1d      	ldr	r3, [pc, #116]	; (8010598 <LoRaMacHandleIrqEvents+0x90>)
 8010522:	2200      	movs	r2, #0
 8010524:	601a      	str	r2, [r3, #0]
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	f383 8810 	msr	PRIMASK, r3
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d02c      	beq.n	8010590 <LoRaMacHandleIrqEvents+0x88>
    {
        if( events.Events.TxDone == 1 )
 8010536:	003b      	movs	r3, r7
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	2210      	movs	r2, #16
 801053c:	4013      	ands	r3, r2
 801053e:	b2db      	uxtb	r3, r3
 8010540:	2b00      	cmp	r3, #0
 8010542:	d001      	beq.n	8010548 <LoRaMacHandleIrqEvents+0x40>
        {
            ProcessRadioTxDone( );
 8010544:	f7ff f8f2 	bl	800f72c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8010548:	003b      	movs	r3, r7
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	2208      	movs	r2, #8
 801054e:	4013      	ands	r3, r2
 8010550:	b2db      	uxtb	r3, r3
 8010552:	2b00      	cmp	r3, #0
 8010554:	d001      	beq.n	801055a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8010556:	f7ff f9c1 	bl	800f8dc <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 801055a:	003b      	movs	r3, r7
 801055c:	781b      	ldrb	r3, [r3, #0]
 801055e:	2204      	movs	r2, #4
 8010560:	4013      	ands	r3, r2
 8010562:	b2db      	uxtb	r3, r3
 8010564:	2b00      	cmp	r3, #0
 8010566:	d001      	beq.n	801056c <LoRaMacHandleIrqEvents+0x64>
        {
            ProcessRadioTxTimeout( );
 8010568:	f7ff fef2 	bl	8010350 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 801056c:	003b      	movs	r3, r7
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	2202      	movs	r2, #2
 8010572:	4013      	ands	r3, r2
 8010574:	b2db      	uxtb	r3, r3
 8010576:	2b00      	cmp	r3, #0
 8010578:	d001      	beq.n	801057e <LoRaMacHandleIrqEvents+0x76>
        {
            ProcessRadioRxError( );
 801057a:	f7ff ffb3 	bl	80104e4 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 801057e:	003b      	movs	r3, r7
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	2201      	movs	r2, #1
 8010584:	4013      	ands	r3, r2
 8010586:	b2db      	uxtb	r3, r3
 8010588:	2b00      	cmp	r3, #0
 801058a:	d001      	beq.n	8010590 <LoRaMacHandleIrqEvents+0x88>
        {
            ProcessRadioRxTimeout( );
 801058c:	f7ff ffb3 	bl	80104f6 <ProcessRadioRxTimeout>
        }
    }
}
 8010590:	46c0      	nop			; (mov r8, r8)
 8010592:	46bd      	mov	sp, r7
 8010594:	b004      	add	sp, #16
 8010596:	bd80      	pop	{r7, pc}
 8010598:	20000f50 	.word	0x20000f50

0801059c <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 801059c:	b580      	push	{r7, lr}
 801059e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80105a0:	4a08      	ldr	r2, [pc, #32]	; (80105c4 <LoRaMacIsBusy+0x28>)
 80105a2:	23d0      	movs	r3, #208	; 0xd0
 80105a4:	009b      	lsls	r3, r3, #2
 80105a6:	58d3      	ldr	r3, [r2, r3]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d106      	bne.n	80105ba <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80105ac:	4b05      	ldr	r3, [pc, #20]	; (80105c4 <LoRaMacIsBusy+0x28>)
 80105ae:	4a06      	ldr	r2, [pc, #24]	; (80105c8 <LoRaMacIsBusy+0x2c>)
 80105b0:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80105b2:	2b01      	cmp	r3, #1
 80105b4:	d101      	bne.n	80105ba <LoRaMacIsBusy+0x1e>
    {
        return false;
 80105b6:	2300      	movs	r3, #0
 80105b8:	e000      	b.n	80105bc <LoRaMacIsBusy+0x20>
    }
    return true;
 80105ba:	2301      	movs	r3, #1
}
 80105bc:	0018      	movs	r0, r3
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	46c0      	nop			; (mov r8, r8)
 80105c4:	200008ec 	.word	0x200008ec
 80105c8:	00000482 	.word	0x00000482

080105cc <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	0002      	movs	r2, r0
 80105d4:	1dfb      	adds	r3, r7, #7
 80105d6:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 80105d8:	4b04      	ldr	r3, [pc, #16]	; (80105ec <LoRaMacEnableRequests+0x20>)
 80105da:	1dfa      	adds	r2, r7, #7
 80105dc:	4904      	ldr	r1, [pc, #16]	; (80105f0 <LoRaMacEnableRequests+0x24>)
 80105de:	7812      	ldrb	r2, [r2, #0]
 80105e0:	545a      	strb	r2, [r3, r1]
}
 80105e2:	46c0      	nop			; (mov r8, r8)
 80105e4:	46bd      	mov	sp, r7
 80105e6:	b002      	add	sp, #8
 80105e8:	bd80      	pop	{r7, pc}
 80105ea:	46c0      	nop			; (mov r8, r8)
 80105ec:	200008ec 	.word	0x200008ec
 80105f0:	00000482 	.word	0x00000482

080105f4 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 80105fa:	1d3b      	adds	r3, r7, #4
 80105fc:	4a2c      	ldr	r2, [pc, #176]	; (80106b0 <LoRaMacHandleRequestEvents+0xbc>)
 80105fe:	492d      	ldr	r1, [pc, #180]	; (80106b4 <LoRaMacHandleRequestEvents+0xc0>)
 8010600:	5c52      	ldrb	r2, [r2, r1]
 8010602:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8010604:	4a2a      	ldr	r2, [pc, #168]	; (80106b0 <LoRaMacHandleRequestEvents+0xbc>)
 8010606:	23d0      	movs	r3, #208	; 0xd0
 8010608:	009b      	lsls	r3, r3, #2
 801060a:	58d3      	ldr	r3, [r2, r3]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d14a      	bne.n	80106a6 <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010610:	4b27      	ldr	r3, [pc, #156]	; (80106b0 <LoRaMacHandleRequestEvents+0xbc>)
 8010612:	4a28      	ldr	r2, [pc, #160]	; (80106b4 <LoRaMacHandleRequestEvents+0xc0>)
 8010614:	5c9b      	ldrb	r3, [r3, r2]
 8010616:	2201      	movs	r2, #1
 8010618:	4013      	ands	r3, r2
 801061a:	b2db      	uxtb	r3, r3
 801061c:	2b00      	cmp	r3, #0
 801061e:	d005      	beq.n	801062c <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8010620:	4b23      	ldr	r3, [pc, #140]	; (80106b0 <LoRaMacHandleRequestEvents+0xbc>)
 8010622:	4a24      	ldr	r2, [pc, #144]	; (80106b4 <LoRaMacHandleRequestEvents+0xc0>)
 8010624:	5c99      	ldrb	r1, [r3, r2]
 8010626:	2001      	movs	r0, #1
 8010628:	4381      	bics	r1, r0
 801062a:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801062c:	4b20      	ldr	r3, [pc, #128]	; (80106b0 <LoRaMacHandleRequestEvents+0xbc>)
 801062e:	4a21      	ldr	r2, [pc, #132]	; (80106b4 <LoRaMacHandleRequestEvents+0xc0>)
 8010630:	5c9b      	ldrb	r3, [r3, r2]
 8010632:	2204      	movs	r2, #4
 8010634:	4013      	ands	r3, r2
 8010636:	b2db      	uxtb	r3, r3
 8010638:	2b00      	cmp	r3, #0
 801063a:	d005      	beq.n	8010648 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801063c:	4b1c      	ldr	r3, [pc, #112]	; (80106b0 <LoRaMacHandleRequestEvents+0xbc>)
 801063e:	4a1d      	ldr	r2, [pc, #116]	; (80106b4 <LoRaMacHandleRequestEvents+0xc0>)
 8010640:	5c99      	ldrb	r1, [r3, r2]
 8010642:	2004      	movs	r0, #4
 8010644:	4381      	bics	r1, r0
 8010646:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010648:	2001      	movs	r0, #1
 801064a:	f7ff ffbf 	bl	80105cc <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 801064e:	1d3b      	adds	r3, r7, #4
 8010650:	781b      	ldrb	r3, [r3, #0]
 8010652:	2201      	movs	r2, #1
 8010654:	4013      	ands	r3, r2
 8010656:	b2db      	uxtb	r3, r3
 8010658:	2b00      	cmp	r3, #0
 801065a:	d007      	beq.n	801066c <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 801065c:	4a14      	ldr	r2, [pc, #80]	; (80106b0 <LoRaMacHandleRequestEvents+0xbc>)
 801065e:	23d1      	movs	r3, #209	; 0xd1
 8010660:	009b      	lsls	r3, r3, #2
 8010662:	58d3      	ldr	r3, [r2, r3]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	4a14      	ldr	r2, [pc, #80]	; (80106b8 <LoRaMacHandleRequestEvents+0xc4>)
 8010668:	0010      	movs	r0, r2
 801066a:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 801066c:	1d3b      	adds	r3, r7, #4
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	2204      	movs	r2, #4
 8010672:	4013      	ands	r3, r2
 8010674:	b2db      	uxtb	r3, r3
 8010676:	2b00      	cmp	r3, #0
 8010678:	d00d      	beq.n	8010696 <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 801067a:	4b10      	ldr	r3, [pc, #64]	; (80106bc <LoRaMacHandleRequestEvents+0xc8>)
 801067c:	0018      	movs	r0, r3
 801067e:	f005 f945 	bl	801590c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8010682:	f005 f9a5 	bl	80159d0 <LoRaMacConfirmQueueGetCnt>
 8010686:	1e03      	subs	r3, r0, #0
 8010688:	d005      	beq.n	8010696 <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 801068a:	4b09      	ldr	r3, [pc, #36]	; (80106b0 <LoRaMacHandleRequestEvents+0xbc>)
 801068c:	4a09      	ldr	r2, [pc, #36]	; (80106b4 <LoRaMacHandleRequestEvents+0xc0>)
 801068e:	5c99      	ldrb	r1, [r3, r2]
 8010690:	2004      	movs	r0, #4
 8010692:	4301      	orrs	r1, r0
 8010694:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8010696:	f004 fc91 	bl	8014fbc <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 801069a:	4b05      	ldr	r3, [pc, #20]	; (80106b0 <LoRaMacHandleRequestEvents+0xbc>)
 801069c:	4a05      	ldr	r2, [pc, #20]	; (80106b4 <LoRaMacHandleRequestEvents+0xc0>)
 801069e:	5c99      	ldrb	r1, [r3, r2]
 80106a0:	2020      	movs	r0, #32
 80106a2:	4381      	bics	r1, r0
 80106a4:	5499      	strb	r1, [r3, r2]
    }
}
 80106a6:	46c0      	nop			; (mov r8, r8)
 80106a8:	46bd      	mov	sp, r7
 80106aa:	b002      	add	sp, #8
 80106ac:	bd80      	pop	{r7, pc}
 80106ae:	46c0      	nop			; (mov r8, r8)
 80106b0:	200008ec 	.word	0x200008ec
 80106b4:	00000481 	.word	0x00000481
 80106b8:	20000d28 	.word	0x20000d28
 80106bc:	20000d3c 	.word	0x20000d3c

080106c0 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b082      	sub	sp, #8
 80106c4:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 80106c6:	4a0b      	ldr	r2, [pc, #44]	; (80106f4 <LoRaMacHandleScheduleUplinkEvent+0x34>)
 80106c8:	23d0      	movs	r3, #208	; 0xd0
 80106ca:	009b      	lsls	r3, r3, #2
 80106cc:	58d3      	ldr	r3, [r2, r3]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d10c      	bne.n	80106ec <LoRaMacHandleScheduleUplinkEvent+0x2c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 80106d2:	1dfb      	adds	r3, r7, #7
 80106d4:	2200      	movs	r2, #0
 80106d6:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 80106d8:	1dfb      	adds	r3, r7, #7
 80106da:	0018      	movs	r0, r3
 80106dc:	f004 ff70 	bl	80155c0 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 80106e0:	1dfb      	adds	r3, r7, #7
 80106e2:	781b      	ldrb	r3, [r3, #0]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d001      	beq.n	80106ec <LoRaMacHandleScheduleUplinkEvent+0x2c>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 80106e8:	f000 fd04 	bl	80110f4 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 80106ec:	46c0      	nop			; (mov r8, r8)
 80106ee:	46bd      	mov	sp, r7
 80106f0:	b002      	add	sp, #8
 80106f2:	bd80      	pop	{r7, pc}
 80106f4:	200008ec 	.word	0x200008ec

080106f8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b088      	sub	sp, #32
 80106fc:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80106fe:	4b26      	ldr	r3, [pc, #152]	; (8010798 <LoRaMacHandleIndicationEvents+0xa0>)
 8010700:	4a26      	ldr	r2, [pc, #152]	; (801079c <LoRaMacHandleIndicationEvents+0xa4>)
 8010702:	5c9b      	ldrb	r3, [r3, r2]
 8010704:	2208      	movs	r2, #8
 8010706:	4013      	ands	r3, r2
 8010708:	b2db      	uxtb	r3, r3
 801070a:	2b00      	cmp	r3, #0
 801070c:	d00d      	beq.n	801072a <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 801070e:	4b22      	ldr	r3, [pc, #136]	; (8010798 <LoRaMacHandleIndicationEvents+0xa0>)
 8010710:	4a22      	ldr	r2, [pc, #136]	; (801079c <LoRaMacHandleIndicationEvents+0xa4>)
 8010712:	5c99      	ldrb	r1, [r3, r2]
 8010714:	2008      	movs	r0, #8
 8010716:	4381      	bics	r1, r0
 8010718:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 801071a:	4a1f      	ldr	r2, [pc, #124]	; (8010798 <LoRaMacHandleIndicationEvents+0xa0>)
 801071c:	23d1      	movs	r3, #209	; 0xd1
 801071e:	009b      	lsls	r3, r3, #2
 8010720:	58d3      	ldr	r3, [r2, r3]
 8010722:	68db      	ldr	r3, [r3, #12]
 8010724:	4a1e      	ldr	r2, [pc, #120]	; (80107a0 <LoRaMacHandleIndicationEvents+0xa8>)
 8010726:	0010      	movs	r0, r2
 8010728:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 801072a:	4b1b      	ldr	r3, [pc, #108]	; (8010798 <LoRaMacHandleIndicationEvents+0xa0>)
 801072c:	4a1b      	ldr	r2, [pc, #108]	; (801079c <LoRaMacHandleIndicationEvents+0xa4>)
 801072e:	5c9b      	ldrb	r3, [r3, r2]
 8010730:	2210      	movs	r2, #16
 8010732:	4013      	ands	r3, r2
 8010734:	b2db      	uxtb	r3, r3
 8010736:	2b00      	cmp	r3, #0
 8010738:	d013      	beq.n	8010762 <LoRaMacHandleIndicationEvents+0x6a>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 801073a:	1d3b      	adds	r3, r7, #4
 801073c:	2206      	movs	r2, #6
 801073e:	701a      	strb	r2, [r3, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010740:	1d3b      	adds	r3, r7, #4
 8010742:	2200      	movs	r2, #0
 8010744:	705a      	strb	r2, [r3, #1]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8010746:	4a14      	ldr	r2, [pc, #80]	; (8010798 <LoRaMacHandleIndicationEvents+0xa0>)
 8010748:	23d1      	movs	r3, #209	; 0xd1
 801074a:	009b      	lsls	r3, r3, #2
 801074c:	58d3      	ldr	r3, [r2, r3]
 801074e:	68db      	ldr	r3, [r3, #12]
 8010750:	1d3a      	adds	r2, r7, #4
 8010752:	0010      	movs	r0, r2
 8010754:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8010756:	4b10      	ldr	r3, [pc, #64]	; (8010798 <LoRaMacHandleIndicationEvents+0xa0>)
 8010758:	4a10      	ldr	r2, [pc, #64]	; (801079c <LoRaMacHandleIndicationEvents+0xa4>)
 801075a:	5c99      	ldrb	r1, [r3, r2]
 801075c:	2010      	movs	r0, #16
 801075e:	4381      	bics	r1, r0
 8010760:	5499      	strb	r1, [r3, r2]
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010762:	4b0d      	ldr	r3, [pc, #52]	; (8010798 <LoRaMacHandleIndicationEvents+0xa0>)
 8010764:	4a0d      	ldr	r2, [pc, #52]	; (801079c <LoRaMacHandleIndicationEvents+0xa4>)
 8010766:	5c9b      	ldrb	r3, [r3, r2]
 8010768:	2202      	movs	r2, #2
 801076a:	4013      	ands	r3, r2
 801076c:	b2db      	uxtb	r3, r3
 801076e:	2b00      	cmp	r3, #0
 8010770:	d00d      	beq.n	801078e <LoRaMacHandleIndicationEvents+0x96>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8010772:	4b09      	ldr	r3, [pc, #36]	; (8010798 <LoRaMacHandleIndicationEvents+0xa0>)
 8010774:	4a09      	ldr	r2, [pc, #36]	; (801079c <LoRaMacHandleIndicationEvents+0xa4>)
 8010776:	5c99      	ldrb	r1, [r3, r2]
 8010778:	2002      	movs	r0, #2
 801077a:	4381      	bics	r1, r0
 801077c:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 801077e:	4a06      	ldr	r2, [pc, #24]	; (8010798 <LoRaMacHandleIndicationEvents+0xa0>)
 8010780:	23d1      	movs	r3, #209	; 0xd1
 8010782:	009b      	lsls	r3, r3, #2
 8010784:	58d3      	ldr	r3, [r2, r3]
 8010786:	685b      	ldr	r3, [r3, #4]
 8010788:	4a06      	ldr	r2, [pc, #24]	; (80107a4 <LoRaMacHandleIndicationEvents+0xac>)
 801078a:	0010      	movs	r0, r2
 801078c:	4798      	blx	r3
    }
}
 801078e:	46c0      	nop			; (mov r8, r8)
 8010790:	46bd      	mov	sp, r7
 8010792:	b008      	add	sp, #32
 8010794:	bd80      	pop	{r7, pc}
 8010796:	46c0      	nop			; (mov r8, r8)
 8010798:	200008ec 	.word	0x200008ec
 801079c:	00000481 	.word	0x00000481
 80107a0:	20000d50 	.word	0x20000d50
 80107a4:	20000d08 	.word	0x20000d08

080107a8 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 80107a8:	b590      	push	{r4, r7, lr}
 80107aa:	b083      	sub	sp, #12
 80107ac:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80107ae:	4b39      	ldr	r3, [pc, #228]	; (8010894 <LoRaMacHandleMcpsRequest+0xec>)
 80107b0:	4a39      	ldr	r2, [pc, #228]	; (8010898 <LoRaMacHandleMcpsRequest+0xf0>)
 80107b2:	5c9b      	ldrb	r3, [r3, r2]
 80107b4:	2201      	movs	r2, #1
 80107b6:	4013      	ands	r3, r2
 80107b8:	b2db      	uxtb	r3, r3
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d066      	beq.n	801088c <LoRaMacHandleMcpsRequest+0xe4>
    {
        bool stopRetransmission = false;
 80107be:	1dfb      	adds	r3, r7, #7
 80107c0:	2200      	movs	r2, #0
 80107c2:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 80107c4:	1dbb      	adds	r3, r7, #6
 80107c6:	2200      	movs	r2, #0
 80107c8:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80107ca:	4b32      	ldr	r3, [pc, #200]	; (8010894 <LoRaMacHandleMcpsRequest+0xec>)
 80107cc:	4a33      	ldr	r2, [pc, #204]	; (801089c <LoRaMacHandleMcpsRequest+0xf4>)
 80107ce:	5c9b      	ldrb	r3, [r3, r2]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d004      	beq.n	80107de <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 80107d4:	4b2f      	ldr	r3, [pc, #188]	; (8010894 <LoRaMacHandleMcpsRequest+0xec>)
 80107d6:	4a31      	ldr	r2, [pc, #196]	; (801089c <LoRaMacHandleMcpsRequest+0xf4>)
 80107d8:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80107da:	2b03      	cmp	r3, #3
 80107dc:	d105      	bne.n	80107ea <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 80107de:	1dfc      	adds	r4, r7, #7
 80107e0:	f002 fb70 	bl	8012ec4 <CheckRetransUnconfirmedUplink>
 80107e4:	0003      	movs	r3, r0
 80107e6:	7023      	strb	r3, [r4, #0]
 80107e8:	e026      	b.n	8010838 <LoRaMacHandleMcpsRequest+0x90>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80107ea:	4b2a      	ldr	r3, [pc, #168]	; (8010894 <LoRaMacHandleMcpsRequest+0xec>)
 80107ec:	4a2b      	ldr	r2, [pc, #172]	; (801089c <LoRaMacHandleMcpsRequest+0xf4>)
 80107ee:	5c9b      	ldrb	r3, [r3, r2]
 80107f0:	2b01      	cmp	r3, #1
 80107f2:	d121      	bne.n	8010838 <LoRaMacHandleMcpsRequest+0x90>
        {
            if( MacCtx.AckTimeoutRetry == true )
 80107f4:	4b27      	ldr	r3, [pc, #156]	; (8010894 <LoRaMacHandleMcpsRequest+0xec>)
 80107f6:	4a2a      	ldr	r2, [pc, #168]	; (80108a0 <LoRaMacHandleMcpsRequest+0xf8>)
 80107f8:	5c9b      	ldrb	r3, [r3, r2]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d019      	beq.n	8010832 <LoRaMacHandleMcpsRequest+0x8a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 80107fe:	1dfc      	adds	r4, r7, #7
 8010800:	f002 fb94 	bl	8012f2c <CheckRetransConfirmedUplink>
 8010804:	0003      	movs	r3, r0
 8010806:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8010808:	4b22      	ldr	r3, [pc, #136]	; (8010894 <LoRaMacHandleMcpsRequest+0xec>)
 801080a:	4a26      	ldr	r2, [pc, #152]	; (80108a4 <LoRaMacHandleMcpsRequest+0xfc>)
 801080c:	589a      	ldr	r2, [r3, r2]
 801080e:	23e9      	movs	r3, #233	; 0xe9
 8010810:	005b      	lsls	r3, r3, #1
 8010812:	5cd3      	ldrb	r3, [r2, r3]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d10f      	bne.n	8010838 <LoRaMacHandleMcpsRequest+0x90>
                {
                    if( stopRetransmission == false )
 8010818:	1dfb      	adds	r3, r7, #7
 801081a:	781b      	ldrb	r3, [r3, #0]
 801081c:	2201      	movs	r2, #1
 801081e:	4053      	eors	r3, r2
 8010820:	b2db      	uxtb	r3, r3
 8010822:	2b00      	cmp	r3, #0
 8010824:	d002      	beq.n	801082c <LoRaMacHandleMcpsRequest+0x84>
                    {
                        AckTimeoutRetriesProcess( );
 8010826:	f002 fbf5 	bl	8013014 <AckTimeoutRetriesProcess>
 801082a:	e005      	b.n	8010838 <LoRaMacHandleMcpsRequest+0x90>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 801082c:	f002 fc40 	bl	80130b0 <AckTimeoutRetriesFinalize>
 8010830:	e002      	b.n	8010838 <LoRaMacHandleMcpsRequest+0x90>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8010832:	1dbb      	adds	r3, r7, #6
 8010834:	2201      	movs	r2, #1
 8010836:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 8010838:	1dfb      	adds	r3, r7, #7
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d011      	beq.n	8010864 <LoRaMacHandleMcpsRequest+0xbc>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8010840:	4b19      	ldr	r3, [pc, #100]	; (80108a8 <LoRaMacHandleMcpsRequest+0x100>)
 8010842:	0018      	movs	r0, r3
 8010844:	f00a fc1a 	bl	801b07c <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010848:	4a12      	ldr	r2, [pc, #72]	; (8010894 <LoRaMacHandleMcpsRequest+0xec>)
 801084a:	23d0      	movs	r3, #208	; 0xd0
 801084c:	009b      	lsls	r3, r3, #2
 801084e:	58d3      	ldr	r3, [r2, r3]
 8010850:	2220      	movs	r2, #32
 8010852:	4393      	bics	r3, r2
 8010854:	0019      	movs	r1, r3
 8010856:	4a0f      	ldr	r2, [pc, #60]	; (8010894 <LoRaMacHandleMcpsRequest+0xec>)
 8010858:	23d0      	movs	r3, #208	; 0xd0
 801085a:	009b      	lsls	r3, r3, #2
 801085c:	50d1      	str	r1, [r2, r3]
            StopRetransmission( );
 801085e:	f002 fb8d 	bl	8012f7c <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8010862:	e013      	b.n	801088c <LoRaMacHandleMcpsRequest+0xe4>
        else if( waitForRetransmission == false )
 8010864:	1dbb      	adds	r3, r7, #6
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	2201      	movs	r2, #1
 801086a:	4053      	eors	r3, r2
 801086c:	b2db      	uxtb	r3, r3
 801086e:	2b00      	cmp	r3, #0
 8010870:	d00c      	beq.n	801088c <LoRaMacHandleMcpsRequest+0xe4>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8010872:	4b08      	ldr	r3, [pc, #32]	; (8010894 <LoRaMacHandleMcpsRequest+0xec>)
 8010874:	4a08      	ldr	r2, [pc, #32]	; (8010898 <LoRaMacHandleMcpsRequest+0xf0>)
 8010876:	5c99      	ldrb	r1, [r3, r2]
 8010878:	2020      	movs	r0, #32
 801087a:	4381      	bics	r1, r0
 801087c:	5499      	strb	r1, [r3, r2]
            MacCtx.AckTimeoutRetry = false;
 801087e:	4b05      	ldr	r3, [pc, #20]	; (8010894 <LoRaMacHandleMcpsRequest+0xec>)
 8010880:	4a07      	ldr	r2, [pc, #28]	; (80108a0 <LoRaMacHandleMcpsRequest+0xf8>)
 8010882:	2100      	movs	r1, #0
 8010884:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
 8010886:	2000      	movs	r0, #0
 8010888:	f000 f8e8 	bl	8010a5c <OnTxDelayedTimerEvent>
}
 801088c:	46c0      	nop			; (mov r8, r8)
 801088e:	46bd      	mov	sp, r7
 8010890:	b003      	add	sp, #12
 8010892:	bd90      	pop	{r4, r7, pc}
 8010894:	200008ec 	.word	0x200008ec
 8010898:	00000481 	.word	0x00000481
 801089c:	0000043c 	.word	0x0000043c
 80108a0:	00000413 	.word	0x00000413
 80108a4:	00000484 	.word	0x00000484
 80108a8:	20000c54 	.word	0x20000c54

080108ac <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80108b0:	4b1d      	ldr	r3, [pc, #116]	; (8010928 <LoRaMacHandleMlmeRequest+0x7c>)
 80108b2:	4a1e      	ldr	r2, [pc, #120]	; (801092c <LoRaMacHandleMlmeRequest+0x80>)
 80108b4:	5c9b      	ldrb	r3, [r3, r2]
 80108b6:	2204      	movs	r2, #4
 80108b8:	4013      	ands	r3, r2
 80108ba:	b2db      	uxtb	r3, r3
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d02f      	beq.n	8010920 <LoRaMacHandleMlmeRequest+0x74>
    {
        if( ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 80108c0:	2000      	movs	r0, #0
 80108c2:	f005 f809 	bl	80158d8 <LoRaMacConfirmQueueIsCmdActive>
 80108c6:	1e03      	subs	r3, r0, #0
 80108c8:	d015      	beq.n	80108f6 <LoRaMacHandleMlmeRequest+0x4a>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 80108ca:	2000      	movs	r0, #0
 80108cc:	f004 ffac 	bl	8015828 <LoRaMacConfirmQueueGetStatus>
 80108d0:	1e03      	subs	r3, r0, #0
 80108d2:	d104      	bne.n	80108de <LoRaMacHandleMlmeRequest+0x32>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 80108d4:	4a14      	ldr	r2, [pc, #80]	; (8010928 <LoRaMacHandleMlmeRequest+0x7c>)
 80108d6:	2382      	movs	r3, #130	; 0x82
 80108d8:	00db      	lsls	r3, r3, #3
 80108da:	2100      	movs	r1, #0
 80108dc:	54d1      	strb	r1, [r2, r3]
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80108de:	4a12      	ldr	r2, [pc, #72]	; (8010928 <LoRaMacHandleMlmeRequest+0x7c>)
 80108e0:	23d0      	movs	r3, #208	; 0xd0
 80108e2:	009b      	lsls	r3, r3, #2
 80108e4:	58d3      	ldr	r3, [r2, r3]
 80108e6:	2202      	movs	r2, #2
 80108e8:	4393      	bics	r3, r2
 80108ea:	0019      	movs	r1, r3
 80108ec:	4a0e      	ldr	r2, [pc, #56]	; (8010928 <LoRaMacHandleMlmeRequest+0x7c>)
 80108ee:	23d0      	movs	r3, #208	; 0xd0
 80108f0:	009b      	lsls	r3, r3, #2
 80108f2:	50d1      	str	r1, [r2, r3]
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 80108f4:	e014      	b.n	8010920 <LoRaMacHandleMlmeRequest+0x74>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80108f6:	2004      	movs	r0, #4
 80108f8:	f004 ffee 	bl	80158d8 <LoRaMacConfirmQueueIsCmdActive>
 80108fc:	1e03      	subs	r3, r0, #0
 80108fe:	d104      	bne.n	801090a <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8010900:	2005      	movs	r0, #5
 8010902:	f004 ffe9 	bl	80158d8 <LoRaMacConfirmQueueIsCmdActive>
 8010906:	1e03      	subs	r3, r0, #0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8010908:	d00a      	beq.n	8010920 <LoRaMacHandleMlmeRequest+0x74>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801090a:	4a07      	ldr	r2, [pc, #28]	; (8010928 <LoRaMacHandleMlmeRequest+0x7c>)
 801090c:	23d0      	movs	r3, #208	; 0xd0
 801090e:	009b      	lsls	r3, r3, #2
 8010910:	58d3      	ldr	r3, [r2, r3]
 8010912:	2202      	movs	r2, #2
 8010914:	4393      	bics	r3, r2
 8010916:	0019      	movs	r1, r3
 8010918:	4a03      	ldr	r2, [pc, #12]	; (8010928 <LoRaMacHandleMlmeRequest+0x7c>)
 801091a:	23d0      	movs	r3, #208	; 0xd0
 801091c:	009b      	lsls	r3, r3, #2
 801091e:	50d1      	str	r1, [r2, r3]
}
 8010920:	46c0      	nop			; (mov r8, r8)
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
 8010926:	46c0      	nop			; (mov r8, r8)
 8010928:	200008ec 	.word	0x200008ec
 801092c:	00000481 	.word	0x00000481

08010930 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010930:	b580      	push	{r7, lr}
 8010932:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010934:	200b      	movs	r0, #11
 8010936:	f004 ffcf 	bl	80158d8 <LoRaMacConfirmQueueIsCmdActive>
 801093a:	1e03      	subs	r3, r0, #0
 801093c:	d01c      	beq.n	8010978 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 801093e:	4b10      	ldr	r3, [pc, #64]	; (8010980 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010940:	4a10      	ldr	r2, [pc, #64]	; (8010984 <LoRaMacCheckForBeaconAcquisition+0x54>)
 8010942:	5c9b      	ldrb	r3, [r3, r2]
 8010944:	2201      	movs	r2, #1
 8010946:	4013      	ands	r3, r2
 8010948:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801094a:	2b00      	cmp	r3, #0
 801094c:	d114      	bne.n	8010978 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801094e:	4b0c      	ldr	r3, [pc, #48]	; (8010980 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010950:	4a0c      	ldr	r2, [pc, #48]	; (8010984 <LoRaMacCheckForBeaconAcquisition+0x54>)
 8010952:	5c9b      	ldrb	r3, [r3, r2]
 8010954:	2204      	movs	r2, #4
 8010956:	4013      	ands	r3, r2
 8010958:	b2db      	uxtb	r3, r3
 801095a:	2b00      	cmp	r3, #0
 801095c:	d00c      	beq.n	8010978 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801095e:	4a08      	ldr	r2, [pc, #32]	; (8010980 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010960:	23d0      	movs	r3, #208	; 0xd0
 8010962:	009b      	lsls	r3, r3, #2
 8010964:	58d3      	ldr	r3, [r2, r3]
 8010966:	2202      	movs	r2, #2
 8010968:	4393      	bics	r3, r2
 801096a:	0019      	movs	r1, r3
 801096c:	4a04      	ldr	r2, [pc, #16]	; (8010980 <LoRaMacCheckForBeaconAcquisition+0x50>)
 801096e:	23d0      	movs	r3, #208	; 0xd0
 8010970:	009b      	lsls	r3, r3, #2
 8010972:	50d1      	str	r1, [r2, r3]
            return 0x01;
 8010974:	2301      	movs	r3, #1
 8010976:	e000      	b.n	801097a <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 8010978:	2300      	movs	r3, #0
}
 801097a:	0018      	movs	r0, r3
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}
 8010980:	200008ec 	.word	0x200008ec
 8010984:	00000481 	.word	0x00000481

08010988 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 8010988:	b580      	push	{r7, lr}
 801098a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 801098c:	4a0f      	ldr	r2, [pc, #60]	; (80109cc <LoRaMacCheckForRxAbort+0x44>)
 801098e:	23d0      	movs	r3, #208	; 0xd0
 8010990:	009b      	lsls	r3, r3, #2
 8010992:	58d3      	ldr	r3, [r2, r3]
 8010994:	2280      	movs	r2, #128	; 0x80
 8010996:	4013      	ands	r3, r2
 8010998:	d015      	beq.n	80109c6 <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 801099a:	4a0c      	ldr	r2, [pc, #48]	; (80109cc <LoRaMacCheckForRxAbort+0x44>)
 801099c:	23d0      	movs	r3, #208	; 0xd0
 801099e:	009b      	lsls	r3, r3, #2
 80109a0:	58d3      	ldr	r3, [r2, r3]
 80109a2:	2280      	movs	r2, #128	; 0x80
 80109a4:	4393      	bics	r3, r2
 80109a6:	0019      	movs	r1, r3
 80109a8:	4a08      	ldr	r2, [pc, #32]	; (80109cc <LoRaMacCheckForRxAbort+0x44>)
 80109aa:	23d0      	movs	r3, #208	; 0xd0
 80109ac:	009b      	lsls	r3, r3, #2
 80109ae:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80109b0:	4a06      	ldr	r2, [pc, #24]	; (80109cc <LoRaMacCheckForRxAbort+0x44>)
 80109b2:	23d0      	movs	r3, #208	; 0xd0
 80109b4:	009b      	lsls	r3, r3, #2
 80109b6:	58d3      	ldr	r3, [r2, r3]
 80109b8:	2202      	movs	r2, #2
 80109ba:	4393      	bics	r3, r2
 80109bc:	0019      	movs	r1, r3
 80109be:	4a03      	ldr	r2, [pc, #12]	; (80109cc <LoRaMacCheckForRxAbort+0x44>)
 80109c0:	23d0      	movs	r3, #208	; 0xd0
 80109c2:	009b      	lsls	r3, r3, #2
 80109c4:	50d1      	str	r1, [r2, r3]
    }
}
 80109c6:	46c0      	nop			; (mov r8, r8)
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}
 80109cc:	200008ec 	.word	0x200008ec

080109d0 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b082      	sub	sp, #8
 80109d4:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 80109d6:	1dfb      	adds	r3, r7, #7
 80109d8:	2200      	movs	r2, #0
 80109da:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 80109dc:	f7ff fd94 	bl	8010508 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80109e0:	f004 fb49 	bl	8015076 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80109e4:	4b1b      	ldr	r3, [pc, #108]	; (8010a54 <LoRaMacProcess+0x84>)
 80109e6:	4a1c      	ldr	r2, [pc, #112]	; (8010a58 <LoRaMacProcess+0x88>)
 80109e8:	5c9b      	ldrb	r3, [r3, r2]
 80109ea:	2220      	movs	r2, #32
 80109ec:	4013      	ands	r3, r2
 80109ee:	b2db      	uxtb	r3, r3
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d020      	beq.n	8010a36 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 80109f4:	2000      	movs	r0, #0
 80109f6:	f7ff fde9 	bl	80105cc <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 80109fa:	f7ff ffc5 	bl	8010988 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 80109fe:	f002 fbed 	bl	80131dc <IsRequestPending>
 8010a02:	1e03      	subs	r3, r0, #0
 8010a04:	d008      	beq.n	8010a18 <LoRaMacProcess+0x48>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8010a06:	f7ff ff93 	bl	8010930 <LoRaMacCheckForBeaconAcquisition>
 8010a0a:	0003      	movs	r3, r0
 8010a0c:	0019      	movs	r1, r3
 8010a0e:	1dfb      	adds	r3, r7, #7
 8010a10:	1dfa      	adds	r2, r7, #7
 8010a12:	7812      	ldrb	r2, [r2, #0]
 8010a14:	430a      	orrs	r2, r1
 8010a16:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 8010a18:	1dfb      	adds	r3, r7, #7
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d103      	bne.n	8010a28 <LoRaMacProcess+0x58>
        {
            LoRaMacHandleMlmeRequest( );
 8010a20:	f7ff ff44 	bl	80108ac <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8010a24:	f7ff fec0 	bl	80107a8 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8010a28:	f7ff fde4 	bl	80105f4 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8010a2c:	f7ff fe48 	bl	80106c0 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010a30:	2001      	movs	r0, #1
 8010a32:	f7ff fdcb 	bl	80105cc <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 8010a36:	f7ff fe5f 	bl	80106f8 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8010a3a:	4a06      	ldr	r2, [pc, #24]	; (8010a54 <LoRaMacProcess+0x84>)
 8010a3c:	2390      	movs	r3, #144	; 0x90
 8010a3e:	00db      	lsls	r3, r3, #3
 8010a40:	5cd3      	ldrb	r3, [r2, r3]
 8010a42:	2b02      	cmp	r3, #2
 8010a44:	d101      	bne.n	8010a4a <LoRaMacProcess+0x7a>
    {
        OpenContinuousRxCWindow( );
 8010a46:	f001 fe5b 	bl	8012700 <OpenContinuousRxCWindow>
    }
}
 8010a4a:	46c0      	nop			; (mov r8, r8)
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	b002      	add	sp, #8
 8010a50:	bd80      	pop	{r7, pc}
 8010a52:	46c0      	nop			; (mov r8, r8)
 8010a54:	200008ec 	.word	0x200008ec
 8010a58:	00000481 	.word	0x00000481

08010a5c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b082      	sub	sp, #8
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010a64:	4b19      	ldr	r3, [pc, #100]	; (8010acc <OnTxDelayedTimerEvent+0x70>)
 8010a66:	0018      	movs	r0, r3
 8010a68:	f00a fb08 	bl	801b07c <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010a6c:	4a18      	ldr	r2, [pc, #96]	; (8010ad0 <OnTxDelayedTimerEvent+0x74>)
 8010a6e:	23d0      	movs	r3, #208	; 0xd0
 8010a70:	009b      	lsls	r3, r3, #2
 8010a72:	58d3      	ldr	r3, [r2, r3]
 8010a74:	2220      	movs	r2, #32
 8010a76:	4393      	bics	r3, r2
 8010a78:	0019      	movs	r1, r3
 8010a7a:	4a15      	ldr	r2, [pc, #84]	; (8010ad0 <OnTxDelayedTimerEvent+0x74>)
 8010a7c:	23d0      	movs	r3, #208	; 0xd0
 8010a7e:	009b      	lsls	r3, r3, #2
 8010a80:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8010a82:	2001      	movs	r0, #1
 8010a84:	f001 fa98 	bl	8011fb8 <ScheduleTx>
 8010a88:	1e03      	subs	r3, r0, #0
 8010a8a:	d01a      	beq.n	8010ac2 <OnTxDelayedTimerEvent+0x66>
 8010a8c:	2b0b      	cmp	r3, #11
 8010a8e:	d018      	beq.n	8010ac2 <OnTxDelayedTimerEvent+0x66>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010a90:	4b0f      	ldr	r3, [pc, #60]	; (8010ad0 <OnTxDelayedTimerEvent+0x74>)
 8010a92:	4a10      	ldr	r2, [pc, #64]	; (8010ad4 <OnTxDelayedTimerEvent+0x78>)
 8010a94:	589b      	ldr	r3, [r3, r2]
 8010a96:	22f9      	movs	r2, #249	; 0xf9
 8010a98:	569b      	ldrsb	r3, [r3, r2]
 8010a9a:	b2d9      	uxtb	r1, r3
 8010a9c:	4b0c      	ldr	r3, [pc, #48]	; (8010ad0 <OnTxDelayedTimerEvent+0x74>)
 8010a9e:	4a0e      	ldr	r2, [pc, #56]	; (8010ad8 <OnTxDelayedTimerEvent+0x7c>)
 8010aa0:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010aa2:	4b0b      	ldr	r3, [pc, #44]	; (8010ad0 <OnTxDelayedTimerEvent+0x74>)
 8010aa4:	4a0d      	ldr	r2, [pc, #52]	; (8010adc <OnTxDelayedTimerEvent+0x80>)
 8010aa6:	5c99      	ldrb	r1, [r3, r2]
 8010aa8:	4b09      	ldr	r3, [pc, #36]	; (8010ad0 <OnTxDelayedTimerEvent+0x74>)
 8010aaa:	4a0d      	ldr	r2, [pc, #52]	; (8010ae0 <OnTxDelayedTimerEvent+0x84>)
 8010aac:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8010aae:	4b08      	ldr	r3, [pc, #32]	; (8010ad0 <OnTxDelayedTimerEvent+0x74>)
 8010ab0:	4a0c      	ldr	r2, [pc, #48]	; (8010ae4 <OnTxDelayedTimerEvent+0x88>)
 8010ab2:	2109      	movs	r1, #9
 8010ab4:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8010ab6:	2009      	movs	r0, #9
 8010ab8:	f004 fedc 	bl	8015874 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010abc:	f002 fa5e 	bl	8012f7c <StopRetransmission>
            break;
 8010ac0:	e000      	b.n	8010ac4 <OnTxDelayedTimerEvent+0x68>
            break;
 8010ac2:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8010ac4:	46c0      	nop			; (mov r8, r8)
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	b002      	add	sp, #8
 8010aca:	bd80      	pop	{r7, pc}
 8010acc:	20000c54 	.word	0x20000c54
 8010ad0:	200008ec 	.word	0x200008ec
 8010ad4:	00000484 	.word	0x00000484
 8010ad8:	0000043e 	.word	0x0000043e
 8010adc:	00000412 	.word	0x00000412
 8010ae0:	00000441 	.word	0x00000441
 8010ae4:	0000043d 	.word	0x0000043d

08010ae8 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b082      	sub	sp, #8
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8010af0:	4b1a      	ldr	r3, [pc, #104]	; (8010b5c <OnRxWindow1TimerEvent+0x74>)
 8010af2:	4a1b      	ldr	r2, [pc, #108]	; (8010b60 <OnRxWindow1TimerEvent+0x78>)
 8010af4:	5c99      	ldrb	r1, [r3, r2]
 8010af6:	4a19      	ldr	r2, [pc, #100]	; (8010b5c <OnRxWindow1TimerEvent+0x74>)
 8010af8:	23ee      	movs	r3, #238	; 0xee
 8010afa:	009b      	lsls	r3, r3, #2
 8010afc:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 8010afe:	4b17      	ldr	r3, [pc, #92]	; (8010b5c <OnRxWindow1TimerEvent+0x74>)
 8010b00:	4a18      	ldr	r2, [pc, #96]	; (8010b64 <OnRxWindow1TimerEvent+0x7c>)
 8010b02:	589a      	ldr	r2, [r3, r2]
 8010b04:	231a      	movs	r3, #26
 8010b06:	33ff      	adds	r3, #255	; 0xff
 8010b08:	5cd3      	ldrb	r3, [r2, r3]
 8010b0a:	b259      	sxtb	r1, r3
 8010b0c:	4b13      	ldr	r3, [pc, #76]	; (8010b5c <OnRxWindow1TimerEvent+0x74>)
 8010b0e:	4a16      	ldr	r2, [pc, #88]	; (8010b68 <OnRxWindow1TimerEvent+0x80>)
 8010b10:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010b12:	4b12      	ldr	r3, [pc, #72]	; (8010b5c <OnRxWindow1TimerEvent+0x74>)
 8010b14:	4a13      	ldr	r2, [pc, #76]	; (8010b64 <OnRxWindow1TimerEvent+0x7c>)
 8010b16:	589a      	ldr	r2, [r3, r2]
 8010b18:	232e      	movs	r3, #46	; 0x2e
 8010b1a:	33ff      	adds	r3, #255	; 0xff
 8010b1c:	5cd1      	ldrb	r1, [r2, r3]
 8010b1e:	4a0f      	ldr	r2, [pc, #60]	; (8010b5c <OnRxWindow1TimerEvent+0x74>)
 8010b20:	23f2      	movs	r3, #242	; 0xf2
 8010b22:	009b      	lsls	r3, r3, #2
 8010b24:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8010b26:	4b0d      	ldr	r3, [pc, #52]	; (8010b5c <OnRxWindow1TimerEvent+0x74>)
 8010b28:	4a0e      	ldr	r2, [pc, #56]	; (8010b64 <OnRxWindow1TimerEvent+0x7c>)
 8010b2a:	589a      	ldr	r2, [r3, r2]
 8010b2c:	2340      	movs	r3, #64	; 0x40
 8010b2e:	33ff      	adds	r3, #255	; 0xff
 8010b30:	5cd1      	ldrb	r1, [r2, r3]
 8010b32:	4b0a      	ldr	r3, [pc, #40]	; (8010b5c <OnRxWindow1TimerEvent+0x74>)
 8010b34:	4a0d      	ldr	r2, [pc, #52]	; (8010b6c <OnRxWindow1TimerEvent+0x84>)
 8010b36:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 8010b38:	4b08      	ldr	r3, [pc, #32]	; (8010b5c <OnRxWindow1TimerEvent+0x74>)
 8010b3a:	4a0d      	ldr	r2, [pc, #52]	; (8010b70 <OnRxWindow1TimerEvent+0x88>)
 8010b3c:	2100      	movs	r1, #0
 8010b3e:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010b40:	4b06      	ldr	r3, [pc, #24]	; (8010b5c <OnRxWindow1TimerEvent+0x74>)
 8010b42:	4a0c      	ldr	r2, [pc, #48]	; (8010b74 <OnRxWindow1TimerEvent+0x8c>)
 8010b44:	2100      	movs	r1, #0
 8010b46:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8010b48:	4a0b      	ldr	r2, [pc, #44]	; (8010b78 <OnRxWindow1TimerEvent+0x90>)
 8010b4a:	4b0c      	ldr	r3, [pc, #48]	; (8010b7c <OnRxWindow1TimerEvent+0x94>)
 8010b4c:	0011      	movs	r1, r2
 8010b4e:	0018      	movs	r0, r3
 8010b50:	f001 fda2 	bl	8012698 <RxWindowSetup>
}
 8010b54:	46c0      	nop			; (mov r8, r8)
 8010b56:	46bd      	mov	sp, r7
 8010b58:	b002      	add	sp, #8
 8010b5a:	bd80      	pop	{r7, pc}
 8010b5c:	200008ec 	.word	0x200008ec
 8010b60:	00000415 	.word	0x00000415
 8010b64:	00000484 	.word	0x00000484
 8010b68:	000003bb 	.word	0x000003bb
 8010b6c:	000003c9 	.word	0x000003c9
 8010b70:	000003ca 	.word	0x000003ca
 8010b74:	000003cb 	.word	0x000003cb
 8010b78:	20000ca4 	.word	0x20000ca4
 8010b7c:	20000c6c 	.word	0x20000c6c

08010b80 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b082      	sub	sp, #8
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010b88:	4a1e      	ldr	r2, [pc, #120]	; (8010c04 <OnRxWindow2TimerEvent+0x84>)
 8010b8a:	2390      	movs	r3, #144	; 0x90
 8010b8c:	00db      	lsls	r3, r3, #3
 8010b8e:	5cd3      	ldrb	r3, [r2, r3]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d032      	beq.n	8010bfa <OnRxWindow2TimerEvent+0x7a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010b94:	4b1b      	ldr	r3, [pc, #108]	; (8010c04 <OnRxWindow2TimerEvent+0x84>)
 8010b96:	4a1c      	ldr	r2, [pc, #112]	; (8010c08 <OnRxWindow2TimerEvent+0x88>)
 8010b98:	5c99      	ldrb	r1, [r3, r2]
 8010b9a:	4a1a      	ldr	r2, [pc, #104]	; (8010c04 <OnRxWindow2TimerEvent+0x84>)
 8010b9c:	23f3      	movs	r3, #243	; 0xf3
 8010b9e:	009b      	lsls	r3, r3, #2
 8010ba0:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8010ba2:	4b18      	ldr	r3, [pc, #96]	; (8010c04 <OnRxWindow2TimerEvent+0x84>)
 8010ba4:	4a19      	ldr	r2, [pc, #100]	; (8010c0c <OnRxWindow2TimerEvent+0x8c>)
 8010ba6:	589a      	ldr	r2, [r3, r2]
 8010ba8:	238e      	movs	r3, #142	; 0x8e
 8010baa:	005b      	lsls	r3, r3, #1
 8010bac:	58d1      	ldr	r1, [r2, r3]
 8010bae:	4a15      	ldr	r2, [pc, #84]	; (8010c04 <OnRxWindow2TimerEvent+0x84>)
 8010bb0:	23f4      	movs	r3, #244	; 0xf4
 8010bb2:	009b      	lsls	r3, r3, #2
 8010bb4:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010bb6:	4b13      	ldr	r3, [pc, #76]	; (8010c04 <OnRxWindow2TimerEvent+0x84>)
 8010bb8:	4a14      	ldr	r2, [pc, #80]	; (8010c0c <OnRxWindow2TimerEvent+0x8c>)
 8010bba:	589a      	ldr	r2, [r3, r2]
 8010bbc:	232e      	movs	r3, #46	; 0x2e
 8010bbe:	33ff      	adds	r3, #255	; 0xff
 8010bc0:	5cd1      	ldrb	r1, [r2, r3]
 8010bc2:	4a10      	ldr	r2, [pc, #64]	; (8010c04 <OnRxWindow2TimerEvent+0x84>)
 8010bc4:	23f7      	movs	r3, #247	; 0xf7
 8010bc6:	009b      	lsls	r3, r3, #2
 8010bc8:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8010bca:	4b0e      	ldr	r3, [pc, #56]	; (8010c04 <OnRxWindow2TimerEvent+0x84>)
 8010bcc:	4a0f      	ldr	r2, [pc, #60]	; (8010c0c <OnRxWindow2TimerEvent+0x8c>)
 8010bce:	589a      	ldr	r2, [r3, r2]
 8010bd0:	2340      	movs	r3, #64	; 0x40
 8010bd2:	33ff      	adds	r3, #255	; 0xff
 8010bd4:	5cd1      	ldrb	r1, [r2, r3]
 8010bd6:	4b0b      	ldr	r3, [pc, #44]	; (8010c04 <OnRxWindow2TimerEvent+0x84>)
 8010bd8:	4a0d      	ldr	r2, [pc, #52]	; (8010c10 <OnRxWindow2TimerEvent+0x90>)
 8010bda:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010bdc:	4b09      	ldr	r3, [pc, #36]	; (8010c04 <OnRxWindow2TimerEvent+0x84>)
 8010bde:	4a0d      	ldr	r2, [pc, #52]	; (8010c14 <OnRxWindow2TimerEvent+0x94>)
 8010be0:	2100      	movs	r1, #0
 8010be2:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010be4:	4b07      	ldr	r3, [pc, #28]	; (8010c04 <OnRxWindow2TimerEvent+0x84>)
 8010be6:	4a0c      	ldr	r2, [pc, #48]	; (8010c18 <OnRxWindow2TimerEvent+0x98>)
 8010be8:	2101      	movs	r1, #1
 8010bea:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8010bec:	4a0b      	ldr	r2, [pc, #44]	; (8010c1c <OnRxWindow2TimerEvent+0x9c>)
 8010bee:	4b0c      	ldr	r3, [pc, #48]	; (8010c20 <OnRxWindow2TimerEvent+0xa0>)
 8010bf0:	0011      	movs	r1, r2
 8010bf2:	0018      	movs	r0, r3
 8010bf4:	f001 fd50 	bl	8012698 <RxWindowSetup>
 8010bf8:	e000      	b.n	8010bfc <OnRxWindow2TimerEvent+0x7c>
        return;
 8010bfa:	46c0      	nop			; (mov r8, r8)
}
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	b002      	add	sp, #8
 8010c00:	bd80      	pop	{r7, pc}
 8010c02:	46c0      	nop			; (mov r8, r8)
 8010c04:	200008ec 	.word	0x200008ec
 8010c08:	00000415 	.word	0x00000415
 8010c0c:	00000484 	.word	0x00000484
 8010c10:	000003dd 	.word	0x000003dd
 8010c14:	000003de 	.word	0x000003de
 8010c18:	000003df 	.word	0x000003df
 8010c1c:	20000cb8 	.word	0x20000cb8
 8010c20:	20000c84 	.word	0x20000c84

08010c24 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b082      	sub	sp, #8
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8010c2c:	4b18      	ldr	r3, [pc, #96]	; (8010c90 <OnAckTimeoutTimerEvent+0x6c>)
 8010c2e:	0018      	movs	r0, r3
 8010c30:	f00a fa24 	bl	801b07c <TimerStop>

    if( MacCtx.NodeAckRequested == true )
 8010c34:	4b17      	ldr	r3, [pc, #92]	; (8010c94 <OnAckTimeoutTimerEvent+0x70>)
 8010c36:	4a18      	ldr	r2, [pc, #96]	; (8010c98 <OnAckTimeoutTimerEvent+0x74>)
 8010c38:	5c9b      	ldrb	r3, [r3, r2]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d003      	beq.n	8010c46 <OnAckTimeoutTimerEvent+0x22>
    {
        MacCtx.AckTimeoutRetry = true;
 8010c3e:	4b15      	ldr	r3, [pc, #84]	; (8010c94 <OnAckTimeoutTimerEvent+0x70>)
 8010c40:	4a16      	ldr	r2, [pc, #88]	; (8010c9c <OnAckTimeoutTimerEvent+0x78>)
 8010c42:	2101      	movs	r1, #1
 8010c44:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8010c46:	4b13      	ldr	r3, [pc, #76]	; (8010c94 <OnAckTimeoutTimerEvent+0x70>)
 8010c48:	4a15      	ldr	r2, [pc, #84]	; (8010ca0 <OnAckTimeoutTimerEvent+0x7c>)
 8010c4a:	589b      	ldr	r3, [r3, r2]
 8010c4c:	22f0      	movs	r2, #240	; 0xf0
 8010c4e:	5c9b      	ldrb	r3, [r3, r2]
 8010c50:	2b02      	cmp	r3, #2
 8010c52:	d105      	bne.n	8010c60 <OnAckTimeoutTimerEvent+0x3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8010c54:	4b0f      	ldr	r3, [pc, #60]	; (8010c94 <OnAckTimeoutTimerEvent+0x70>)
 8010c56:	4a13      	ldr	r2, [pc, #76]	; (8010ca4 <OnAckTimeoutTimerEvent+0x80>)
 8010c58:	5c99      	ldrb	r1, [r3, r2]
 8010c5a:	2020      	movs	r0, #32
 8010c5c:	4301      	orrs	r1, r0
 8010c5e:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010c60:	4a0c      	ldr	r2, [pc, #48]	; (8010c94 <OnAckTimeoutTimerEvent+0x70>)
 8010c62:	23d2      	movs	r3, #210	; 0xd2
 8010c64:	009b      	lsls	r3, r3, #2
 8010c66:	58d3      	ldr	r3, [r2, r3]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d00c      	beq.n	8010c86 <OnAckTimeoutTimerEvent+0x62>
 8010c6c:	4a09      	ldr	r2, [pc, #36]	; (8010c94 <OnAckTimeoutTimerEvent+0x70>)
 8010c6e:	23d2      	movs	r3, #210	; 0xd2
 8010c70:	009b      	lsls	r3, r3, #2
 8010c72:	58d3      	ldr	r3, [r2, r3]
 8010c74:	68db      	ldr	r3, [r3, #12]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d005      	beq.n	8010c86 <OnAckTimeoutTimerEvent+0x62>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010c7a:	4a06      	ldr	r2, [pc, #24]	; (8010c94 <OnAckTimeoutTimerEvent+0x70>)
 8010c7c:	23d2      	movs	r3, #210	; 0xd2
 8010c7e:	009b      	lsls	r3, r3, #2
 8010c80:	58d3      	ldr	r3, [r2, r3]
 8010c82:	68db      	ldr	r3, [r3, #12]
 8010c84:	4798      	blx	r3
    }
}
 8010c86:	46c0      	nop			; (mov r8, r8)
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	b002      	add	sp, #8
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	46c0      	nop			; (mov r8, r8)
 8010c90:	20000ce4 	.word	0x20000ce4
 8010c94:	200008ec 	.word	0x200008ec
 8010c98:	00000414 	.word	0x00000414
 8010c9c:	00000413 	.word	0x00000413
 8010ca0:	00000484 	.word	0x00000484
 8010ca4:	00000481 	.word	0x00000481

08010ca8 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010ca8:	b590      	push	{r4, r7, lr}
 8010caa:	b085      	sub	sp, #20
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	60ba      	str	r2, [r7, #8]
 8010cb0:	607b      	str	r3, [r7, #4]
 8010cb2:	230f      	movs	r3, #15
 8010cb4:	18fb      	adds	r3, r7, r3
 8010cb6:	1c02      	adds	r2, r0, #0
 8010cb8:	701a      	strb	r2, [r3, #0]
 8010cba:	230e      	movs	r3, #14
 8010cbc:	18fb      	adds	r3, r7, r3
 8010cbe:	1c0a      	adds	r2, r1, #0
 8010cc0:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d005      	beq.n	8010cd4 <GetFCntDown+0x2c>
 8010cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d002      	beq.n	8010cd4 <GetFCntDown+0x2c>
 8010cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d101      	bne.n	8010cd8 <GetFCntDown+0x30>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010cd4:	230a      	movs	r3, #10
 8010cd6:	e042      	b.n	8010d5e <GetFCntDown+0xb6>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010cd8:	230f      	movs	r3, #15
 8010cda:	18fb      	adds	r3, r7, r3
 8010cdc:	781b      	ldrb	r3, [r3, #0]
 8010cde:	2b04      	cmp	r3, #4
 8010ce0:	d82e      	bhi.n	8010d40 <GetFCntDown+0x98>
 8010ce2:	009a      	lsls	r2, r3, #2
 8010ce4:	4b20      	ldr	r3, [pc, #128]	; (8010d68 <GetFCntDown+0xc0>)
 8010ce6:	18d3      	adds	r3, r2, r3
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	469f      	mov	pc, r3
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8010cec:	1d3b      	adds	r3, r7, #4
 8010cee:	789b      	ldrb	r3, [r3, #2]
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	d111      	bne.n	8010d18 <GetFCntDown+0x70>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8010cf4:	230e      	movs	r3, #14
 8010cf6:	18fb      	adds	r3, r7, r3
 8010cf8:	781b      	ldrb	r3, [r3, #0]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d004      	beq.n	8010d08 <GetFCntDown+0x60>
 8010cfe:	230e      	movs	r3, #14
 8010d00:	18fb      	adds	r3, r7, r3
 8010d02:	781b      	ldrb	r3, [r3, #0]
 8010d04:	2b03      	cmp	r3, #3
 8010d06:	d103      	bne.n	8010d10 <GetFCntDown+0x68>
                {
                    *fCntID = A_FCNT_DOWN;
 8010d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d0a:	2202      	movs	r2, #2
 8010d0c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8010d0e:	e019      	b.n	8010d44 <GetFCntDown+0x9c>
                    *fCntID = N_FCNT_DOWN;
 8010d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d12:	2201      	movs	r2, #1
 8010d14:	701a      	strb	r2, [r3, #0]
            break;
 8010d16:	e015      	b.n	8010d44 <GetFCntDown+0x9c>
                *fCntID = FCNT_DOWN;
 8010d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1a:	2203      	movs	r2, #3
 8010d1c:	701a      	strb	r2, [r3, #0]
            break;
 8010d1e:	e011      	b.n	8010d44 <GetFCntDown+0x9c>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8010d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d22:	2204      	movs	r2, #4
 8010d24:	701a      	strb	r2, [r3, #0]
            break;
 8010d26:	e00d      	b.n	8010d44 <GetFCntDown+0x9c>
        case MULTICAST_1_ADDR:
            *fCntID = MC_FCNT_DOWN_1;
 8010d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d2a:	2205      	movs	r2, #5
 8010d2c:	701a      	strb	r2, [r3, #0]
            break;
 8010d2e:	e009      	b.n	8010d44 <GetFCntDown+0x9c>
        case MULTICAST_2_ADDR:
            *fCntID = MC_FCNT_DOWN_2;
 8010d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d32:	2206      	movs	r2, #6
 8010d34:	701a      	strb	r2, [r3, #0]
            break;
 8010d36:	e005      	b.n	8010d44 <GetFCntDown+0x9c>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
 8010d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3a:	2207      	movs	r2, #7
 8010d3c:	701a      	strb	r2, [r3, #0]
            break;
 8010d3e:	e001      	b.n	8010d44 <GetFCntDown+0x9c>
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010d40:	2305      	movs	r3, #5
 8010d42:	e00c      	b.n	8010d5e <GetFCntDown+0xb6>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8010d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d46:	7818      	ldrb	r0, [r3, #0]
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	89db      	ldrh	r3, [r3, #14]
 8010d4c:	001c      	movs	r4, r3
 8010d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d50:	2220      	movs	r2, #32
 8010d52:	18ba      	adds	r2, r7, r2
 8010d54:	8811      	ldrh	r1, [r2, #0]
 8010d56:	0022      	movs	r2, r4
 8010d58:	f005 fab2 	bl	80162c0 <LoRaMacCryptoGetFCntDown>
 8010d5c:	0003      	movs	r3, r0
}
 8010d5e:	0018      	movs	r0, r3
 8010d60:	46bd      	mov	sp, r7
 8010d62:	b005      	add	sp, #20
 8010d64:	bd90      	pop	{r4, r7, pc}
 8010d66:	46c0      	nop			; (mov r8, r8)
 8010d68:	0801ced4 	.word	0x0801ced4

08010d6c <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8010d6c:	b5b0      	push	{r4, r5, r7, lr}
 8010d6e:	b086      	sub	sp, #24
 8010d70:	af02      	add	r7, sp, #8
 8010d72:	0002      	movs	r2, r0
 8010d74:	1dfb      	adds	r3, r7, #7
 8010d76:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d78:	230f      	movs	r3, #15
 8010d7a:	18fb      	adds	r3, r7, r3
 8010d7c:	2203      	movs	r2, #3
 8010d7e:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 8010d80:	4b96      	ldr	r3, [pc, #600]	; (8010fdc <SwitchClass+0x270>)
 8010d82:	4a97      	ldr	r2, [pc, #604]	; (8010fe0 <SwitchClass+0x274>)
 8010d84:	589b      	ldr	r3, [r3, r2]
 8010d86:	22f0      	movs	r2, #240	; 0xf0
 8010d88:	5c9b      	ldrb	r3, [r3, r2]
 8010d8a:	2b01      	cmp	r3, #1
 8010d8c:	d100      	bne.n	8010d90 <SwitchClass+0x24>
 8010d8e:	e0f1      	b.n	8010f74 <SwitchClass+0x208>
 8010d90:	2b02      	cmp	r3, #2
 8010d92:	d100      	bne.n	8010d96 <SwitchClass+0x2a>
 8010d94:	e103      	b.n	8010f9e <SwitchClass+0x232>
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d000      	beq.n	8010d9c <SwitchClass+0x30>
 8010d9a:	e118      	b.n	8010fce <SwitchClass+0x262>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8010d9c:	1dfb      	adds	r3, r7, #7
 8010d9e:	781b      	ldrb	r3, [r3, #0]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d10d      	bne.n	8010dc0 <SwitchClass+0x54>
            {
                // Revert back RxC parameters
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8010da4:	4b8d      	ldr	r3, [pc, #564]	; (8010fdc <SwitchClass+0x270>)
 8010da6:	4a8e      	ldr	r2, [pc, #568]	; (8010fe0 <SwitchClass+0x274>)
 8010da8:	5899      	ldr	r1, [r3, r2]
 8010daa:	4b8c      	ldr	r3, [pc, #560]	; (8010fdc <SwitchClass+0x270>)
 8010dac:	4a8c      	ldr	r2, [pc, #560]	; (8010fe0 <SwitchClass+0x274>)
 8010dae:	5898      	ldr	r0, [r3, r2]
 8010db0:	2392      	movs	r3, #146	; 0x92
 8010db2:	005b      	lsls	r3, r3, #1
 8010db4:	228e      	movs	r2, #142	; 0x8e
 8010db6:	0052      	lsls	r2, r2, #1
 8010db8:	18c3      	adds	r3, r0, r3
 8010dba:	188a      	adds	r2, r1, r2
 8010dbc:	ca03      	ldmia	r2!, {r0, r1}
 8010dbe:	c303      	stmia	r3!, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 8010dc0:	1dfb      	adds	r3, r7, #7
 8010dc2:	781b      	ldrb	r3, [r3, #0]
 8010dc4:	2b01      	cmp	r3, #1
 8010dc6:	d113      	bne.n	8010df0 <SwitchClass+0x84>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010dc8:	250f      	movs	r5, #15
 8010dca:	197c      	adds	r4, r7, r5
 8010dcc:	1dfb      	adds	r3, r7, #7
 8010dce:	781b      	ldrb	r3, [r3, #0]
 8010dd0:	0018      	movs	r0, r3
 8010dd2:	f004 f8f8 	bl	8014fc6 <LoRaMacClassBSwitchClass>
 8010dd6:	0003      	movs	r3, r0
 8010dd8:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 8010dda:	197b      	adds	r3, r7, r5
 8010ddc:	781b      	ldrb	r3, [r3, #0]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d106      	bne.n	8010df0 <SwitchClass+0x84>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 8010de2:	4b7e      	ldr	r3, [pc, #504]	; (8010fdc <SwitchClass+0x270>)
 8010de4:	4a7e      	ldr	r2, [pc, #504]	; (8010fe0 <SwitchClass+0x274>)
 8010de6:	589b      	ldr	r3, [r3, r2]
 8010de8:	1dfa      	adds	r2, r7, #7
 8010dea:	21f0      	movs	r1, #240	; 0xf0
 8010dec:	7812      	ldrb	r2, [r2, #0]
 8010dee:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 8010df0:	1dfb      	adds	r3, r7, #7
 8010df2:	781b      	ldrb	r3, [r3, #0]
 8010df4:	2b02      	cmp	r3, #2
 8010df6:	d000      	beq.n	8010dfa <SwitchClass+0x8e>
 8010df8:	e0e4      	b.n	8010fc4 <SwitchClass+0x258>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8010dfa:	4b78      	ldr	r3, [pc, #480]	; (8010fdc <SwitchClass+0x270>)
 8010dfc:	4a78      	ldr	r2, [pc, #480]	; (8010fe0 <SwitchClass+0x274>)
 8010dfe:	589b      	ldr	r3, [r3, r2]
 8010e00:	1dfa      	adds	r2, r7, #7
 8010e02:	21f0      	movs	r1, #240	; 0xf0
 8010e04:	7812      	ldrb	r2, [r2, #0]
 8010e06:	545a      	strb	r2, [r3, r1]

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010e08:	4874      	ldr	r0, [pc, #464]	; (8010fdc <SwitchClass+0x270>)
 8010e0a:	23f8      	movs	r3, #248	; 0xf8
 8010e0c:	009b      	lsls	r3, r3, #2
 8010e0e:	4973      	ldr	r1, [pc, #460]	; (8010fdc <SwitchClass+0x270>)
 8010e10:	22f3      	movs	r2, #243	; 0xf3
 8010e12:	0092      	lsls	r2, r2, #2
 8010e14:	18c3      	adds	r3, r0, r3
 8010e16:	188a      	adds	r2, r1, r2
 8010e18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8010e1a:	c313      	stmia	r3!, {r0, r1, r4}
 8010e1c:	ca03      	ldmia	r2!, {r0, r1}
 8010e1e:	c303      	stmia	r3!, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010e20:	4b6e      	ldr	r3, [pc, #440]	; (8010fdc <SwitchClass+0x270>)
 8010e22:	4a70      	ldr	r2, [pc, #448]	; (8010fe4 <SwitchClass+0x278>)
 8010e24:	2102      	movs	r1, #2
 8010e26:	5499      	strb	r1, [r3, r2]

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010e28:	230e      	movs	r3, #14
 8010e2a:	18fb      	adds	r3, r7, r3
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	701a      	strb	r2, [r3, #0]
 8010e30:	e070      	b.n	8010f14 <SwitchClass+0x1a8>
                {
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8010e32:	4b6a      	ldr	r3, [pc, #424]	; (8010fdc <SwitchClass+0x270>)
 8010e34:	4a6a      	ldr	r2, [pc, #424]	; (8010fe0 <SwitchClass+0x274>)
 8010e36:	5899      	ldr	r1, [r3, r2]
 8010e38:	230e      	movs	r3, #14
 8010e3a:	18fb      	adds	r3, r7, r3
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	569a      	ldrsb	r2, [r3, r2]
 8010e40:	2051      	movs	r0, #81	; 0x51
 8010e42:	0013      	movs	r3, r2
 8010e44:	009b      	lsls	r3, r3, #2
 8010e46:	189b      	adds	r3, r3, r2
 8010e48:	00db      	lsls	r3, r3, #3
 8010e4a:	18cb      	adds	r3, r1, r3
 8010e4c:	181b      	adds	r3, r3, r0
 8010e4e:	781b      	ldrb	r3, [r3, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d056      	beq.n	8010f02 <SwitchClass+0x196>
                    // TODO: Check multicast channel device class.
                    {
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8010e54:	4b61      	ldr	r3, [pc, #388]	; (8010fdc <SwitchClass+0x270>)
 8010e56:	4a62      	ldr	r2, [pc, #392]	; (8010fe0 <SwitchClass+0x274>)
 8010e58:	5898      	ldr	r0, [r3, r2]
 8010e5a:	240e      	movs	r4, #14
 8010e5c:	193b      	adds	r3, r7, r4
 8010e5e:	2200      	movs	r2, #0
 8010e60:	569a      	ldrsb	r2, [r3, r2]
 8010e62:	4b5e      	ldr	r3, [pc, #376]	; (8010fdc <SwitchClass+0x270>)
 8010e64:	495e      	ldr	r1, [pc, #376]	; (8010fe0 <SwitchClass+0x274>)
 8010e66:	5859      	ldr	r1, [r3, r1]
 8010e68:	0013      	movs	r3, r2
 8010e6a:	009b      	lsls	r3, r3, #2
 8010e6c:	189b      	adds	r3, r3, r2
 8010e6e:	00db      	lsls	r3, r3, #3
 8010e70:	18c3      	adds	r3, r0, r3
 8010e72:	3364      	adds	r3, #100	; 0x64
 8010e74:	681a      	ldr	r2, [r3, #0]
 8010e76:	2392      	movs	r3, #146	; 0x92
 8010e78:	005b      	lsls	r3, r3, #1
 8010e7a:	50ca      	str	r2, [r1, r3]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8010e7c:	4b57      	ldr	r3, [pc, #348]	; (8010fdc <SwitchClass+0x270>)
 8010e7e:	4a58      	ldr	r2, [pc, #352]	; (8010fe0 <SwitchClass+0x274>)
 8010e80:	5899      	ldr	r1, [r3, r2]
 8010e82:	193b      	adds	r3, r7, r4
 8010e84:	2200      	movs	r2, #0
 8010e86:	569a      	ldrsb	r2, [r3, r2]
 8010e88:	2068      	movs	r0, #104	; 0x68
 8010e8a:	0013      	movs	r3, r2
 8010e8c:	009b      	lsls	r3, r3, #2
 8010e8e:	189b      	adds	r3, r3, r2
 8010e90:	00db      	lsls	r3, r3, #3
 8010e92:	18cb      	adds	r3, r1, r3
 8010e94:	181b      	adds	r3, r3, r0
 8010e96:	2100      	movs	r1, #0
 8010e98:	5659      	ldrsb	r1, [r3, r1]
 8010e9a:	4b50      	ldr	r3, [pc, #320]	; (8010fdc <SwitchClass+0x270>)
 8010e9c:	4a50      	ldr	r2, [pc, #320]	; (8010fe0 <SwitchClass+0x274>)
 8010e9e:	589a      	ldr	r2, [r3, r2]
 8010ea0:	b2c9      	uxtb	r1, r1
 8010ea2:	2394      	movs	r3, #148	; 0x94
 8010ea4:	005b      	lsls	r3, r3, #1
 8010ea6:	54d1      	strb	r1, [r2, r3]

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010ea8:	4b4c      	ldr	r3, [pc, #304]	; (8010fdc <SwitchClass+0x270>)
 8010eaa:	4a4f      	ldr	r2, [pc, #316]	; (8010fe8 <SwitchClass+0x27c>)
 8010eac:	5c99      	ldrb	r1, [r3, r2]
 8010eae:	4a4b      	ldr	r2, [pc, #300]	; (8010fdc <SwitchClass+0x270>)
 8010eb0:	23f8      	movs	r3, #248	; 0xf8
 8010eb2:	009b      	lsls	r3, r3, #2
 8010eb4:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8010eb6:	4b49      	ldr	r3, [pc, #292]	; (8010fdc <SwitchClass+0x270>)
 8010eb8:	4a49      	ldr	r2, [pc, #292]	; (8010fe0 <SwitchClass+0x274>)
 8010eba:	589a      	ldr	r2, [r3, r2]
 8010ebc:	2392      	movs	r3, #146	; 0x92
 8010ebe:	005b      	lsls	r3, r3, #1
 8010ec0:	58d1      	ldr	r1, [r2, r3]
 8010ec2:	4a46      	ldr	r2, [pc, #280]	; (8010fdc <SwitchClass+0x270>)
 8010ec4:	23f9      	movs	r3, #249	; 0xf9
 8010ec6:	009b      	lsls	r3, r3, #2
 8010ec8:	50d1      	str	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010eca:	4b44      	ldr	r3, [pc, #272]	; (8010fdc <SwitchClass+0x270>)
 8010ecc:	4a44      	ldr	r2, [pc, #272]	; (8010fe0 <SwitchClass+0x274>)
 8010ece:	589a      	ldr	r2, [r3, r2]
 8010ed0:	232e      	movs	r3, #46	; 0x2e
 8010ed2:	33ff      	adds	r3, #255	; 0xff
 8010ed4:	5cd1      	ldrb	r1, [r2, r3]
 8010ed6:	4a41      	ldr	r2, [pc, #260]	; (8010fdc <SwitchClass+0x270>)
 8010ed8:	23fc      	movs	r3, #252	; 0xfc
 8010eda:	009b      	lsls	r3, r3, #2
 8010edc:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8010ede:	4b3f      	ldr	r3, [pc, #252]	; (8010fdc <SwitchClass+0x270>)
 8010ee0:	4a3f      	ldr	r2, [pc, #252]	; (8010fe0 <SwitchClass+0x274>)
 8010ee2:	589a      	ldr	r2, [r3, r2]
 8010ee4:	2340      	movs	r3, #64	; 0x40
 8010ee6:	33ff      	adds	r3, #255	; 0xff
 8010ee8:	5cd1      	ldrb	r1, [r2, r3]
 8010eea:	4b3c      	ldr	r3, [pc, #240]	; (8010fdc <SwitchClass+0x270>)
 8010eec:	4a3f      	ldr	r2, [pc, #252]	; (8010fec <SwitchClass+0x280>)
 8010eee:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010ef0:	4b3a      	ldr	r3, [pc, #232]	; (8010fdc <SwitchClass+0x270>)
 8010ef2:	4a3c      	ldr	r2, [pc, #240]	; (8010fe4 <SwitchClass+0x278>)
 8010ef4:	2103      	movs	r1, #3
 8010ef6:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010ef8:	4b38      	ldr	r3, [pc, #224]	; (8010fdc <SwitchClass+0x270>)
 8010efa:	4a3d      	ldr	r2, [pc, #244]	; (8010ff0 <SwitchClass+0x284>)
 8010efc:	2101      	movs	r1, #1
 8010efe:	5499      	strb	r1, [r3, r2]
                        break;
 8010f00:	e00e      	b.n	8010f20 <SwitchClass+0x1b4>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010f02:	210e      	movs	r1, #14
 8010f04:	187b      	adds	r3, r7, r1
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	b25b      	sxtb	r3, r3
 8010f0a:	b2db      	uxtb	r3, r3
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	b2da      	uxtb	r2, r3
 8010f10:	187b      	adds	r3, r7, r1
 8010f12:	701a      	strb	r2, [r3, #0]
 8010f14:	230e      	movs	r3, #14
 8010f16:	18fb      	adds	r3, r7, r3
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	b25b      	sxtb	r3, r3
 8010f1c:	2b03      	cmp	r3, #3
 8010f1e:	dd88      	ble.n	8010e32 <SwitchClass+0xc6>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010f20:	4b2e      	ldr	r3, [pc, #184]	; (8010fdc <SwitchClass+0x270>)
 8010f22:	4a34      	ldr	r2, [pc, #208]	; (8010ff4 <SwitchClass+0x288>)
 8010f24:	2100      	movs	r1, #0
 8010f26:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010f28:	4b33      	ldr	r3, [pc, #204]	; (8010ff8 <SwitchClass+0x28c>)
 8010f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f2c:	4798      	blx	r3
                // Compute Rx2 windows parameters in case the RX2 datarate has changed
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010f2e:	4b2b      	ldr	r3, [pc, #172]	; (8010fdc <SwitchClass+0x270>)
 8010f30:	4a2b      	ldr	r2, [pc, #172]	; (8010fe0 <SwitchClass+0x274>)
 8010f32:	589b      	ldr	r3, [r3, r2]
 8010f34:	7818      	ldrb	r0, [r3, #0]
                                                 MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8010f36:	4b29      	ldr	r3, [pc, #164]	; (8010fdc <SwitchClass+0x270>)
 8010f38:	4a29      	ldr	r2, [pc, #164]	; (8010fe0 <SwitchClass+0x274>)
 8010f3a:	589a      	ldr	r2, [r3, r2]
 8010f3c:	2394      	movs	r3, #148	; 0x94
 8010f3e:	005b      	lsls	r3, r3, #1
 8010f40:	5cd3      	ldrb	r3, [r2, r3]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010f42:	b259      	sxtb	r1, r3
                                                 MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8010f44:	4b25      	ldr	r3, [pc, #148]	; (8010fdc <SwitchClass+0x270>)
 8010f46:	4a26      	ldr	r2, [pc, #152]	; (8010fe0 <SwitchClass+0x274>)
 8010f48:	589a      	ldr	r2, [r3, r2]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010f4a:	2380      	movs	r3, #128	; 0x80
 8010f4c:	005b      	lsls	r3, r3, #1
 8010f4e:	5cd4      	ldrb	r4, [r2, r3]
                                                 MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8010f50:	4b22      	ldr	r3, [pc, #136]	; (8010fdc <SwitchClass+0x270>)
 8010f52:	4a23      	ldr	r2, [pc, #140]	; (8010fe0 <SwitchClass+0x274>)
 8010f54:	589b      	ldr	r3, [r3, r2]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010f56:	22fc      	movs	r2, #252	; 0xfc
 8010f58:	589a      	ldr	r2, [r3, r2]
 8010f5a:	4b28      	ldr	r3, [pc, #160]	; (8010ffc <SwitchClass+0x290>)
 8010f5c:	9300      	str	r3, [sp, #0]
 8010f5e:	0013      	movs	r3, r2
 8010f60:	0022      	movs	r2, r4
 8010f62:	f006 fb34 	bl	80175ce <RegionComputeRxWindowParameters>
                                                 &MacCtx.RxWindowCConfig );
                OpenContinuousRxCWindow( );
 8010f66:	f001 fbcb 	bl	8012700 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 8010f6a:	230f      	movs	r3, #15
 8010f6c:	18fb      	adds	r3, r7, r3
 8010f6e:	2200      	movs	r2, #0
 8010f70:	701a      	strb	r2, [r3, #0]
            }
            break;
 8010f72:	e027      	b.n	8010fc4 <SwitchClass+0x258>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010f74:	250f      	movs	r5, #15
 8010f76:	197c      	adds	r4, r7, r5
 8010f78:	1dfb      	adds	r3, r7, #7
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	0018      	movs	r0, r3
 8010f7e:	f004 f822 	bl	8014fc6 <LoRaMacClassBSwitchClass>
 8010f82:	0003      	movs	r3, r0
 8010f84:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 8010f86:	197b      	adds	r3, r7, r5
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d11c      	bne.n	8010fc8 <SwitchClass+0x25c>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8010f8e:	4b13      	ldr	r3, [pc, #76]	; (8010fdc <SwitchClass+0x270>)
 8010f90:	4a13      	ldr	r2, [pc, #76]	; (8010fe0 <SwitchClass+0x274>)
 8010f92:	589b      	ldr	r3, [r3, r2]
 8010f94:	1dfa      	adds	r2, r7, #7
 8010f96:	21f0      	movs	r1, #240	; 0xf0
 8010f98:	7812      	ldrb	r2, [r2, #0]
 8010f9a:	545a      	strb	r2, [r3, r1]
            }
            break;
 8010f9c:	e014      	b.n	8010fc8 <SwitchClass+0x25c>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010f9e:	1dfb      	adds	r3, r7, #7
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d112      	bne.n	8010fcc <SwitchClass+0x260>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8010fa6:	4b0d      	ldr	r3, [pc, #52]	; (8010fdc <SwitchClass+0x270>)
 8010fa8:	4a0d      	ldr	r2, [pc, #52]	; (8010fe0 <SwitchClass+0x274>)
 8010faa:	589b      	ldr	r3, [r3, r2]
 8010fac:	1dfa      	adds	r2, r7, #7
 8010fae:	21f0      	movs	r1, #240	; 0xf0
 8010fb0:	7812      	ldrb	r2, [r2, #0]
 8010fb2:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8010fb4:	4b10      	ldr	r3, [pc, #64]	; (8010ff8 <SwitchClass+0x28c>)
 8010fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fb8:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8010fba:	230f      	movs	r3, #15
 8010fbc:	18fb      	adds	r3, r7, r3
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8010fc2:	e003      	b.n	8010fcc <SwitchClass+0x260>
            break;
 8010fc4:	46c0      	nop			; (mov r8, r8)
 8010fc6:	e002      	b.n	8010fce <SwitchClass+0x262>
            break;
 8010fc8:	46c0      	nop			; (mov r8, r8)
 8010fca:	e000      	b.n	8010fce <SwitchClass+0x262>
            break;
 8010fcc:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
 8010fce:	230f      	movs	r3, #15
 8010fd0:	18fb      	adds	r3, r7, r3
 8010fd2:	781b      	ldrb	r3, [r3, #0]
}
 8010fd4:	0018      	movs	r0, r3
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	b004      	add	sp, #16
 8010fda:	bdb0      	pop	{r4, r5, r7, pc}
 8010fdc:	200008ec 	.word	0x200008ec
 8010fe0:	00000484 	.word	0x00000484
 8010fe4:	000003f3 	.word	0x000003f3
 8010fe8:	00000415 	.word	0x00000415
 8010fec:	000003f1 	.word	0x000003f1
 8010ff0:	000003f2 	.word	0x000003f2
 8010ff4:	00000414 	.word	0x00000414
 8010ff8:	0801ca04 	.word	0x0801ca04
 8010ffc:	20000ccc 	.word	0x20000ccc

08011000 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b084      	sub	sp, #16
 8011004:	af00      	add	r7, sp, #0
 8011006:	0002      	movs	r2, r0
 8011008:	1dfb      	adds	r3, r7, #7
 801100a:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801100c:	4b18      	ldr	r3, [pc, #96]	; (8011070 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 801100e:	4a19      	ldr	r2, [pc, #100]	; (8011074 <GetMaxAppPayloadWithoutFOptsLength+0x74>)
 8011010:	589a      	ldr	r2, [r3, r2]
 8011012:	2396      	movs	r3, #150	; 0x96
 8011014:	005b      	lsls	r3, r3, #1
 8011016:	5cd2      	ldrb	r2, [r2, r3]
 8011018:	210c      	movs	r1, #12
 801101a:	187b      	adds	r3, r7, r1
 801101c:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 801101e:	187b      	adds	r3, r7, r1
 8011020:	1dfa      	adds	r2, r7, #7
 8011022:	7812      	ldrb	r2, [r2, #0]
 8011024:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8011026:	187b      	adds	r3, r7, r1
 8011028:	220d      	movs	r2, #13
 801102a:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 801102c:	4b10      	ldr	r3, [pc, #64]	; (8011070 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 801102e:	4a11      	ldr	r2, [pc, #68]	; (8011074 <GetMaxAppPayloadWithoutFOptsLength+0x74>)
 8011030:	589a      	ldr	r2, [r3, r2]
 8011032:	2340      	movs	r3, #64	; 0x40
 8011034:	33ff      	adds	r3, #255	; 0xff
 8011036:	5cd3      	ldrb	r3, [r2, r3]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d003      	beq.n	8011044 <GetMaxAppPayloadWithoutFOptsLength+0x44>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 801103c:	230c      	movs	r3, #12
 801103e:	18fb      	adds	r3, r7, r3
 8011040:	220e      	movs	r2, #14
 8011042:	701a      	strb	r2, [r3, #0]
    }
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011044:	4b0a      	ldr	r3, [pc, #40]	; (8011070 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8011046:	4a0b      	ldr	r2, [pc, #44]	; (8011074 <GetMaxAppPayloadWithoutFOptsLength+0x74>)
 8011048:	589b      	ldr	r3, [r3, r2]
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	220c      	movs	r2, #12
 801104e:	18ba      	adds	r2, r7, r2
 8011050:	0011      	movs	r1, r2
 8011052:	0018      	movs	r0, r3
 8011054:	f006 fa0c 	bl	8017470 <RegionGetPhyParam>
 8011058:	0003      	movs	r3, r0
 801105a:	001a      	movs	r2, r3
 801105c:	2108      	movs	r1, #8
 801105e:	187b      	adds	r3, r7, r1
 8011060:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 8011062:	187b      	adds	r3, r7, r1
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	b2db      	uxtb	r3, r3
}
 8011068:	0018      	movs	r0, r3
 801106a:	46bd      	mov	sp, r7
 801106c:	b004      	add	sp, #16
 801106e:	bd80      	pop	{r7, pc}
 8011070:	200008ec 	.word	0x200008ec
 8011074:	00000484 	.word	0x00000484

08011078 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8011078:	b5b0      	push	{r4, r5, r7, lr}
 801107a:	b084      	sub	sp, #16
 801107c:	af00      	add	r7, sp, #0
 801107e:	0004      	movs	r4, r0
 8011080:	0008      	movs	r0, r1
 8011082:	0011      	movs	r1, r2
 8011084:	1dfb      	adds	r3, r7, #7
 8011086:	1c22      	adds	r2, r4, #0
 8011088:	701a      	strb	r2, [r3, #0]
 801108a:	1dbb      	adds	r3, r7, #6
 801108c:	1c02      	adds	r2, r0, #0
 801108e:	701a      	strb	r2, [r3, #0]
 8011090:	1d7b      	adds	r3, r7, #5
 8011092:	1c0a      	adds	r2, r1, #0
 8011094:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 8011096:	200e      	movs	r0, #14
 8011098:	0004      	movs	r4, r0
 801109a:	183b      	adds	r3, r7, r0
 801109c:	2200      	movs	r2, #0
 801109e:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 80110a0:	250c      	movs	r5, #12
 80110a2:	197b      	adds	r3, r7, r5
 80110a4:	2200      	movs	r2, #0
 80110a6:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80110a8:	1dbb      	adds	r3, r7, #6
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	b25b      	sxtb	r3, r3
 80110ae:	0018      	movs	r0, r3
 80110b0:	f7ff ffa6 	bl	8011000 <GetMaxAppPayloadWithoutFOptsLength>
 80110b4:	0003      	movs	r3, r0
 80110b6:	001a      	movs	r2, r3
 80110b8:	0020      	movs	r0, r4
 80110ba:	183b      	adds	r3, r7, r0
 80110bc:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80110be:	1dfb      	adds	r3, r7, #7
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	b299      	uxth	r1, r3
 80110c4:	1d7b      	adds	r3, r7, #5
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	b29a      	uxth	r2, r3
 80110ca:	197b      	adds	r3, r7, r5
 80110cc:	188a      	adds	r2, r1, r2
 80110ce:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80110d0:	197a      	adds	r2, r7, r5
 80110d2:	183b      	adds	r3, r7, r0
 80110d4:	8812      	ldrh	r2, [r2, #0]
 80110d6:	881b      	ldrh	r3, [r3, #0]
 80110d8:	429a      	cmp	r2, r3
 80110da:	d806      	bhi.n	80110ea <ValidatePayloadLength+0x72>
 80110dc:	230c      	movs	r3, #12
 80110de:	18fb      	adds	r3, r7, r3
 80110e0:	881b      	ldrh	r3, [r3, #0]
 80110e2:	2bff      	cmp	r3, #255	; 0xff
 80110e4:	d801      	bhi.n	80110ea <ValidatePayloadLength+0x72>
    {
        return true;
 80110e6:	2301      	movs	r3, #1
 80110e8:	e000      	b.n	80110ec <ValidatePayloadLength+0x74>
    }
    return false;
 80110ea:	2300      	movs	r3, #0
}
 80110ec:	0018      	movs	r0, r3
 80110ee:	46bd      	mov	sp, r7
 80110f0:	b004      	add	sp, #16
 80110f2:	bdb0      	pop	{r4, r5, r7, pc}

080110f4 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80110f8:	4b04      	ldr	r3, [pc, #16]	; (801110c <SetMlmeScheduleUplinkIndication+0x18>)
 80110fa:	4a05      	ldr	r2, [pc, #20]	; (8011110 <SetMlmeScheduleUplinkIndication+0x1c>)
 80110fc:	5c99      	ldrb	r1, [r3, r2]
 80110fe:	2010      	movs	r0, #16
 8011100:	4301      	orrs	r1, r0
 8011102:	5499      	strb	r1, [r3, r2]
}
 8011104:	46c0      	nop			; (mov r8, r8)
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	46c0      	nop			; (mov r8, r8)
 801110c:	200008ec 	.word	0x200008ec
 8011110:	00000481 	.word	0x00000481

08011114 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8011114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011116:	b0a5      	sub	sp, #148	; 0x94
 8011118:	af02      	add	r7, sp, #8
 801111a:	6078      	str	r0, [r7, #4]
 801111c:	000c      	movs	r4, r1
 801111e:	0010      	movs	r0, r2
 8011120:	0019      	movs	r1, r3
 8011122:	1cfb      	adds	r3, r7, #3
 8011124:	1c22      	adds	r2, r4, #0
 8011126:	701a      	strb	r2, [r3, #0]
 8011128:	1cbb      	adds	r3, r7, #2
 801112a:	1c02      	adds	r2, r0, #0
 801112c:	701a      	strb	r2, [r3, #0]
 801112e:	1c7b      	adds	r3, r7, #1
 8011130:	1c0a      	adds	r2, r1, #0
 8011132:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 8011134:	236b      	movs	r3, #107	; 0x6b
 8011136:	18fb      	adds	r3, r7, r3
 8011138:	2200      	movs	r2, #0
 801113a:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 801113c:	2387      	movs	r3, #135	; 0x87
 801113e:	18fb      	adds	r3, r7, r3
 8011140:	2200      	movs	r2, #0
 8011142:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011144:	2168      	movs	r1, #104	; 0x68
 8011146:	187b      	adds	r3, r7, r1
 8011148:	2200      	movs	r2, #0
 801114a:	701a      	strb	r2, [r3, #0]
 801114c:	187b      	adds	r3, r7, r1
 801114e:	2200      	movs	r2, #0
 8011150:	705a      	strb	r2, [r3, #1]

    while( macIndex < commandsSize )
 8011152:	f000 fd80 	bl	8011c56 <ProcessMacCommands+0xb42>
    {
        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8011156:	1cfb      	adds	r3, r7, #3
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	1cfa      	adds	r2, r7, #3
 801115c:	1c59      	adds	r1, r3, #1
 801115e:	7011      	strb	r1, [r2, #0]
 8011160:	001a      	movs	r2, r3
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	189b      	adds	r3, r3, r2
 8011166:	781b      	ldrb	r3, [r3, #0]
 8011168:	2b13      	cmp	r3, #19
 801116a:	d901      	bls.n	8011170 <ProcessMacCommands+0x5c>
 801116c:	f000 fd7c 	bl	8011c68 <ProcessMacCommands+0xb54>
 8011170:	009a      	lsls	r2, r3, #2
 8011172:	4be6      	ldr	r3, [pc, #920]	; (801150c <ProcessMacCommands+0x3f8>)
 8011174:	18d3      	adds	r3, r2, r3
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 801117a:	2003      	movs	r0, #3
 801117c:	f004 fbac 	bl	80158d8 <LoRaMacConfirmQueueIsCmdActive>
 8011180:	1e03      	subs	r3, r0, #0
 8011182:	d01c      	beq.n	80111be <ProcessMacCommands+0xaa>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8011184:	2103      	movs	r1, #3
 8011186:	2000      	movs	r0, #0
 8011188:	f004 fb22 	bl	80157d0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 801118c:	1cfb      	adds	r3, r7, #3
 801118e:	781b      	ldrb	r3, [r3, #0]
 8011190:	1cfa      	adds	r2, r7, #3
 8011192:	1c59      	adds	r1, r3, #1
 8011194:	7011      	strb	r1, [r2, #0]
 8011196:	001a      	movs	r2, r3
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	189b      	adds	r3, r3, r2
 801119c:	7819      	ldrb	r1, [r3, #0]
 801119e:	4adc      	ldr	r2, [pc, #880]	; (8011510 <ProcessMacCommands+0x3fc>)
 80111a0:	238b      	movs	r3, #139	; 0x8b
 80111a2:	00db      	lsls	r3, r3, #3
 80111a4:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80111a6:	1cfb      	adds	r3, r7, #3
 80111a8:	781b      	ldrb	r3, [r3, #0]
 80111aa:	1cfa      	adds	r2, r7, #3
 80111ac:	1c59      	adds	r1, r3, #1
 80111ae:	7011      	strb	r1, [r2, #0]
 80111b0:	001a      	movs	r2, r3
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	189b      	adds	r3, r3, r2
 80111b6:	7819      	ldrb	r1, [r3, #0]
 80111b8:	4bd5      	ldr	r3, [pc, #852]	; (8011510 <ProcessMacCommands+0x3fc>)
 80111ba:	4ad6      	ldr	r2, [pc, #856]	; (8011514 <ProcessMacCommands+0x400>)
 80111bc:	5499      	strb	r1, [r3, r2]
 80111be:	2287      	movs	r2, #135	; 0x87
 80111c0:	18bb      	adds	r3, r7, r2
 80111c2:	18ba      	adds	r2, r7, r2
 80111c4:	7812      	ldrb	r2, [r2, #0]
 80111c6:	701a      	strb	r2, [r3, #0]
                }
                break;
 80111c8:	f000 fd45 	bl	8011c56 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80111cc:	2357      	movs	r3, #87	; 0x57
 80111ce:	18fb      	adds	r3, r7, r3
 80111d0:	2200      	movs	r2, #0
 80111d2:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 80111d4:	2356      	movs	r3, #86	; 0x56
 80111d6:	18fb      	adds	r3, r7, r3
 80111d8:	2200      	movs	r2, #0
 80111da:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 80111dc:	2355      	movs	r3, #85	; 0x55
 80111de:	18fb      	adds	r3, r7, r3
 80111e0:	2200      	movs	r2, #0
 80111e2:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 80111e4:	2354      	movs	r3, #84	; 0x54
 80111e6:	18fb      	adds	r3, r7, r3
 80111e8:	2200      	movs	r2, #0
 80111ea:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 80111ec:	2387      	movs	r3, #135	; 0x87
 80111ee:	18fb      	adds	r3, r7, r3
 80111f0:	781b      	ldrb	r3, [r3, #0]
 80111f2:	2201      	movs	r2, #1
 80111f4:	4053      	eors	r3, r2
 80111f6:	b2db      	uxtb	r3, r3
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d100      	bne.n	80111fe <ProcessMacCommands+0xea>
 80111fc:	e0a6      	b.n	801134c <ProcessMacCommands+0x238>
                {
                    adrBlockFound = true;
 80111fe:	2387      	movs	r3, #135	; 0x87
 8011200:	18fb      	adds	r3, r7, r3
 8011202:	2201      	movs	r2, #1
 8011204:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8011206:	1cfb      	adds	r3, r7, #3
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	3b01      	subs	r3, #1
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	18d2      	adds	r2, r2, r3
 8011210:	2158      	movs	r1, #88	; 0x58
 8011212:	187b      	adds	r3, r7, r1
 8011214:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8011216:	1cba      	adds	r2, r7, #2
 8011218:	1cfb      	adds	r3, r7, #3
 801121a:	7812      	ldrb	r2, [r2, #0]
 801121c:	781b      	ldrb	r3, [r3, #0]
 801121e:	1ad3      	subs	r3, r2, r3
 8011220:	b2db      	uxtb	r3, r3
 8011222:	3301      	adds	r3, #1
 8011224:	b2da      	uxtb	r2, r3
 8011226:	187b      	adds	r3, r7, r1
 8011228:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 801122a:	4bb9      	ldr	r3, [pc, #740]	; (8011510 <ProcessMacCommands+0x3fc>)
 801122c:	4aba      	ldr	r2, [pc, #744]	; (8011518 <ProcessMacCommands+0x404>)
 801122e:	589b      	ldr	r3, [r3, r2]
 8011230:	22f2      	movs	r2, #242	; 0xf2
 8011232:	5c9a      	ldrb	r2, [r3, r2]
 8011234:	187b      	adds	r3, r7, r1
 8011236:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011238:	4bb5      	ldr	r3, [pc, #724]	; (8011510 <ProcessMacCommands+0x3fc>)
 801123a:	4ab7      	ldr	r2, [pc, #732]	; (8011518 <ProcessMacCommands+0x404>)
 801123c:	589a      	ldr	r2, [r3, r2]
 801123e:	2396      	movs	r3, #150	; 0x96
 8011240:	005b      	lsls	r3, r3, #1
 8011242:	5cd2      	ldrb	r2, [r2, r3]
 8011244:	187b      	adds	r3, r7, r1
 8011246:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011248:	4bb1      	ldr	r3, [pc, #708]	; (8011510 <ProcessMacCommands+0x3fc>)
 801124a:	4ab3      	ldr	r2, [pc, #716]	; (8011518 <ProcessMacCommands+0x404>)
 801124c:	589b      	ldr	r3, [r3, r2]
 801124e:	22f9      	movs	r2, #249	; 0xf9
 8011250:	569a      	ldrsb	r2, [r3, r2]
 8011252:	000d      	movs	r5, r1
 8011254:	187b      	adds	r3, r7, r1
 8011256:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011258:	4bad      	ldr	r3, [pc, #692]	; (8011510 <ProcessMacCommands+0x3fc>)
 801125a:	4aaf      	ldr	r2, [pc, #700]	; (8011518 <ProcessMacCommands+0x404>)
 801125c:	589b      	ldr	r3, [r3, r2]
 801125e:	22f8      	movs	r2, #248	; 0xf8
 8011260:	569a      	ldrsb	r2, [r3, r2]
 8011262:	197b      	adds	r3, r7, r5
 8011264:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8011266:	4baa      	ldr	r3, [pc, #680]	; (8011510 <ProcessMacCommands+0x3fc>)
 8011268:	4aab      	ldr	r2, [pc, #684]	; (8011518 <ProcessMacCommands+0x404>)
 801126a:	589a      	ldr	r2, [r3, r2]
 801126c:	238c      	movs	r3, #140	; 0x8c
 801126e:	005b      	lsls	r3, r3, #1
 8011270:	5cd2      	ldrb	r2, [r2, r3]
 8011272:	197b      	adds	r3, r7, r5
 8011274:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8011276:	4ba6      	ldr	r3, [pc, #664]	; (8011510 <ProcessMacCommands+0x3fc>)
 8011278:	4aa7      	ldr	r2, [pc, #668]	; (8011518 <ProcessMacCommands+0x404>)
 801127a:	5899      	ldr	r1, [r3, r2]
 801127c:	197b      	adds	r3, r7, r5
 801127e:	22e8      	movs	r2, #232	; 0xe8
 8011280:	0052      	lsls	r2, r2, #1
 8011282:	588a      	ldr	r2, [r1, r2]
 8011284:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8011286:	4ba2      	ldr	r3, [pc, #648]	; (8011510 <ProcessMacCommands+0x3fc>)
 8011288:	4aa3      	ldr	r2, [pc, #652]	; (8011518 <ProcessMacCommands+0x404>)
 801128a:	589b      	ldr	r3, [r3, r2]
 801128c:	7818      	ldrb	r0, [r3, #0]
 801128e:	2356      	movs	r3, #86	; 0x56
 8011290:	18fc      	adds	r4, r7, r3
 8011292:	2357      	movs	r3, #87	; 0x57
 8011294:	18fa      	adds	r2, r7, r3
 8011296:	1979      	adds	r1, r7, r5
 8011298:	2354      	movs	r3, #84	; 0x54
 801129a:	18fb      	adds	r3, r7, r3
 801129c:	9301      	str	r3, [sp, #4]
 801129e:	2355      	movs	r3, #85	; 0x55
 80112a0:	18fb      	adds	r3, r7, r3
 80112a2:	9300      	str	r3, [sp, #0]
 80112a4:	0023      	movs	r3, r4
 80112a6:	f006 f9eb 	bl	8017680 <RegionLinkAdrReq>
 80112aa:	0003      	movs	r3, r0
 80112ac:	001a      	movs	r2, r3
 80112ae:	216b      	movs	r1, #107	; 0x6b
 80112b0:	187b      	adds	r3, r7, r1
 80112b2:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 80112b4:	187b      	adds	r3, r7, r1
 80112b6:	781b      	ldrb	r3, [r3, #0]
 80112b8:	001a      	movs	r2, r3
 80112ba:	2307      	movs	r3, #7
 80112bc:	4013      	ands	r3, r2
 80112be:	2b07      	cmp	r3, #7
 80112c0:	d11a      	bne.n	80112f8 <ProcessMacCommands+0x1e4>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 80112c2:	4b93      	ldr	r3, [pc, #588]	; (8011510 <ProcessMacCommands+0x3fc>)
 80112c4:	4a94      	ldr	r2, [pc, #592]	; (8011518 <ProcessMacCommands+0x404>)
 80112c6:	589b      	ldr	r3, [r3, r2]
 80112c8:	2257      	movs	r2, #87	; 0x57
 80112ca:	18ba      	adds	r2, r7, r2
 80112cc:	2100      	movs	r1, #0
 80112ce:	5651      	ldrsb	r1, [r2, r1]
 80112d0:	22f9      	movs	r2, #249	; 0xf9
 80112d2:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 80112d4:	4b8e      	ldr	r3, [pc, #568]	; (8011510 <ProcessMacCommands+0x3fc>)
 80112d6:	4a90      	ldr	r2, [pc, #576]	; (8011518 <ProcessMacCommands+0x404>)
 80112d8:	589b      	ldr	r3, [r3, r2]
 80112da:	2256      	movs	r2, #86	; 0x56
 80112dc:	18ba      	adds	r2, r7, r2
 80112de:	2100      	movs	r1, #0
 80112e0:	5651      	ldrsb	r1, [r2, r1]
 80112e2:	22f8      	movs	r2, #248	; 0xf8
 80112e4:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 80112e6:	4b8a      	ldr	r3, [pc, #552]	; (8011510 <ProcessMacCommands+0x3fc>)
 80112e8:	4a8b      	ldr	r2, [pc, #556]	; (8011518 <ProcessMacCommands+0x404>)
 80112ea:	589a      	ldr	r2, [r3, r2]
 80112ec:	2355      	movs	r3, #85	; 0x55
 80112ee:	18fb      	adds	r3, r7, r3
 80112f0:	7819      	ldrb	r1, [r3, #0]
 80112f2:	238c      	movs	r3, #140	; 0x8c
 80112f4:	005b      	lsls	r3, r3, #1
 80112f6:	54d1      	strb	r1, [r2, r3]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80112f8:	2386      	movs	r3, #134	; 0x86
 80112fa:	18fb      	adds	r3, r7, r3
 80112fc:	2200      	movs	r2, #0
 80112fe:	701a      	strb	r2, [r3, #0]
 8011300:	e00c      	b.n	801131c <ProcessMacCommands+0x208>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8011302:	236b      	movs	r3, #107	; 0x6b
 8011304:	18fb      	adds	r3, r7, r3
 8011306:	2201      	movs	r2, #1
 8011308:	0019      	movs	r1, r3
 801130a:	2003      	movs	r0, #3
 801130c:	f004 f81c 	bl	8015348 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8011310:	2186      	movs	r1, #134	; 0x86
 8011312:	187b      	adds	r3, r7, r1
 8011314:	781a      	ldrb	r2, [r3, #0]
 8011316:	187b      	adds	r3, r7, r1
 8011318:	3201      	adds	r2, #1
 801131a:	701a      	strb	r2, [r3, #0]
 801131c:	2354      	movs	r3, #84	; 0x54
 801131e:	18fb      	adds	r3, r7, r3
 8011320:	781b      	ldrb	r3, [r3, #0]
 8011322:	2105      	movs	r1, #5
 8011324:	0018      	movs	r0, r3
 8011326:	f7ee feef 	bl	8000108 <__udivsi3>
 801132a:	0003      	movs	r3, r0
 801132c:	b2db      	uxtb	r3, r3
 801132e:	2286      	movs	r2, #134	; 0x86
 8011330:	18ba      	adds	r2, r7, r2
 8011332:	7812      	ldrb	r2, [r2, #0]
 8011334:	429a      	cmp	r2, r3
 8011336:	d3e4      	bcc.n	8011302 <ProcessMacCommands+0x1ee>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 8011338:	2354      	movs	r3, #84	; 0x54
 801133a:	18fb      	adds	r3, r7, r3
 801133c:	781a      	ldrb	r2, [r3, #0]
 801133e:	1cfb      	adds	r3, r7, #3
 8011340:	781b      	ldrb	r3, [r3, #0]
 8011342:	18d3      	adds	r3, r2, r3
 8011344:	b2da      	uxtb	r2, r3
 8011346:	1cfb      	adds	r3, r7, #3
 8011348:	3a01      	subs	r2, #1
 801134a:	701a      	strb	r2, [r3, #0]
                }
                break;
 801134c:	46c0      	nop			; (mov r8, r8)
 801134e:	f000 fc82 	bl	8011c56 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8011352:	1cfb      	adds	r3, r7, #3
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	1cfa      	adds	r2, r7, #3
 8011358:	1c59      	adds	r1, r3, #1
 801135a:	7011      	strb	r1, [r2, #0]
 801135c:	001a      	movs	r2, r3
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	189b      	adds	r3, r3, r2
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	4a6a      	ldr	r2, [pc, #424]	; (8011510 <ProcessMacCommands+0x3fc>)
 8011366:	496c      	ldr	r1, [pc, #432]	; (8011518 <ProcessMacCommands+0x404>)
 8011368:	5852      	ldr	r2, [r2, r1]
 801136a:	210f      	movs	r1, #15
 801136c:	400b      	ands	r3, r1
 801136e:	b2d9      	uxtb	r1, r3
 8011370:	239e      	movs	r3, #158	; 0x9e
 8011372:	005b      	lsls	r3, r3, #1
 8011374:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8011376:	4b66      	ldr	r3, [pc, #408]	; (8011510 <ProcessMacCommands+0x3fc>)
 8011378:	4a67      	ldr	r2, [pc, #412]	; (8011518 <ProcessMacCommands+0x404>)
 801137a:	589a      	ldr	r2, [r3, r2]
 801137c:	239e      	movs	r3, #158	; 0x9e
 801137e:	005b      	lsls	r3, r3, #1
 8011380:	5cd3      	ldrb	r3, [r2, r3]
 8011382:	001a      	movs	r2, r3
 8011384:	2301      	movs	r3, #1
 8011386:	4093      	lsls	r3, r2
 8011388:	0019      	movs	r1, r3
 801138a:	4b61      	ldr	r3, [pc, #388]	; (8011510 <ProcessMacCommands+0x3fc>)
 801138c:	4a62      	ldr	r2, [pc, #392]	; (8011518 <ProcessMacCommands+0x404>)
 801138e:	589a      	ldr	r2, [r3, r2]
 8011390:	b289      	uxth	r1, r1
 8011392:	23e1      	movs	r3, #225	; 0xe1
 8011394:	005b      	lsls	r3, r3, #1
 8011396:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8011398:	2368      	movs	r3, #104	; 0x68
 801139a:	18fb      	adds	r3, r7, r3
 801139c:	2200      	movs	r2, #0
 801139e:	0019      	movs	r1, r3
 80113a0:	2004      	movs	r0, #4
 80113a2:	f003 ffd1 	bl	8015348 <LoRaMacCommandsAddCmd>
 80113a6:	2287      	movs	r2, #135	; 0x87
 80113a8:	18bb      	adds	r3, r7, r2
 80113aa:	18ba      	adds	r2, r7, r2
 80113ac:	7812      	ldrb	r2, [r2, #0]
 80113ae:	701a      	strb	r2, [r3, #0]
                break;
 80113b0:	f000 fc51 	bl	8011c56 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 80113b4:	246b      	movs	r4, #107	; 0x6b
 80113b6:	193b      	adds	r3, r7, r4
 80113b8:	2207      	movs	r2, #7
 80113ba:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80113bc:	1cfb      	adds	r3, r7, #3
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	687a      	ldr	r2, [r7, #4]
 80113c2:	18d3      	adds	r3, r2, r3
 80113c4:	781b      	ldrb	r3, [r3, #0]
 80113c6:	091b      	lsrs	r3, r3, #4
 80113c8:	b2db      	uxtb	r3, r3
 80113ca:	b25b      	sxtb	r3, r3
 80113cc:	2207      	movs	r2, #7
 80113ce:	4013      	ands	r3, r2
 80113d0:	b25a      	sxtb	r2, r3
 80113d2:	204c      	movs	r0, #76	; 0x4c
 80113d4:	183b      	adds	r3, r7, r0
 80113d6:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80113d8:	1cfb      	adds	r3, r7, #3
 80113da:	781b      	ldrb	r3, [r3, #0]
 80113dc:	687a      	ldr	r2, [r7, #4]
 80113de:	18d3      	adds	r3, r2, r3
 80113e0:	781b      	ldrb	r3, [r3, #0]
 80113e2:	b25b      	sxtb	r3, r3
 80113e4:	220f      	movs	r2, #15
 80113e6:	4013      	ands	r3, r2
 80113e8:	b25a      	sxtb	r2, r3
 80113ea:	183b      	adds	r3, r7, r0
 80113ec:	701a      	strb	r2, [r3, #0]
                macIndex++;
 80113ee:	1cfb      	adds	r3, r7, #3
 80113f0:	781a      	ldrb	r2, [r3, #0]
 80113f2:	1cfb      	adds	r3, r7, #3
 80113f4:	3201      	adds	r2, #1
 80113f6:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80113f8:	1cfb      	adds	r3, r7, #3
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	1cfa      	adds	r2, r7, #3
 80113fe:	1c59      	adds	r1, r3, #1
 8011400:	7011      	strb	r1, [r2, #0]
 8011402:	001a      	movs	r2, r3
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	189b      	adds	r3, r3, r2
 8011408:	781b      	ldrb	r3, [r3, #0]
 801140a:	001a      	movs	r2, r3
 801140c:	183b      	adds	r3, r7, r0
 801140e:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011410:	1cfb      	adds	r3, r7, #3
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	1cfa      	adds	r2, r7, #3
 8011416:	1c59      	adds	r1, r3, #1
 8011418:	7011      	strb	r1, [r2, #0]
 801141a:	001a      	movs	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	189b      	adds	r3, r3, r2
 8011420:	781b      	ldrb	r3, [r3, #0]
 8011422:	021a      	lsls	r2, r3, #8
 8011424:	183b      	adds	r3, r7, r0
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	431a      	orrs	r2, r3
 801142a:	183b      	adds	r3, r7, r0
 801142c:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801142e:	1cfb      	adds	r3, r7, #3
 8011430:	781b      	ldrb	r3, [r3, #0]
 8011432:	1cfa      	adds	r2, r7, #3
 8011434:	1c59      	adds	r1, r3, #1
 8011436:	7011      	strb	r1, [r2, #0]
 8011438:	001a      	movs	r2, r3
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	189b      	adds	r3, r3, r2
 801143e:	781b      	ldrb	r3, [r3, #0]
 8011440:	041a      	lsls	r2, r3, #16
 8011442:	0001      	movs	r1, r0
 8011444:	187b      	adds	r3, r7, r1
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	431a      	orrs	r2, r3
 801144a:	187b      	adds	r3, r7, r1
 801144c:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 801144e:	187b      	adds	r3, r7, r1
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	2264      	movs	r2, #100	; 0x64
 8011454:	435a      	muls	r2, r3
 8011456:	187b      	adds	r3, r7, r1
 8011458:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 801145a:	4b2d      	ldr	r3, [pc, #180]	; (8011510 <ProcessMacCommands+0x3fc>)
 801145c:	4a2e      	ldr	r2, [pc, #184]	; (8011518 <ProcessMacCommands+0x404>)
 801145e:	589b      	ldr	r3, [r3, r2]
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	187a      	adds	r2, r7, r1
 8011464:	0011      	movs	r1, r2
 8011466:	0018      	movs	r0, r3
 8011468:	f006 f928 	bl	80176bc <RegionRxParamSetupReq>
 801146c:	0003      	movs	r3, r0
 801146e:	001a      	movs	r2, r3
 8011470:	193b      	adds	r3, r7, r4
 8011472:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 8011474:	193b      	adds	r3, r7, r4
 8011476:	781b      	ldrb	r3, [r3, #0]
 8011478:	001a      	movs	r2, r3
 801147a:	2307      	movs	r3, #7
 801147c:	4013      	ands	r3, r2
 801147e:	2b07      	cmp	r3, #7
 8011480:	d12e      	bne.n	80114e0 <ProcessMacCommands+0x3cc>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8011482:	204c      	movs	r0, #76	; 0x4c
 8011484:	183b      	adds	r3, r7, r0
 8011486:	2100      	movs	r1, #0
 8011488:	5659      	ldrsb	r1, [r3, r1]
 801148a:	4b21      	ldr	r3, [pc, #132]	; (8011510 <ProcessMacCommands+0x3fc>)
 801148c:	4a22      	ldr	r2, [pc, #136]	; (8011518 <ProcessMacCommands+0x404>)
 801148e:	589a      	ldr	r2, [r3, r2]
 8011490:	b2c9      	uxtb	r1, r1
 8011492:	2390      	movs	r3, #144	; 0x90
 8011494:	005b      	lsls	r3, r3, #1
 8011496:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8011498:	183b      	adds	r3, r7, r0
 801149a:	2100      	movs	r1, #0
 801149c:	5659      	ldrsb	r1, [r3, r1]
 801149e:	4b1c      	ldr	r3, [pc, #112]	; (8011510 <ProcessMacCommands+0x3fc>)
 80114a0:	4a1d      	ldr	r2, [pc, #116]	; (8011518 <ProcessMacCommands+0x404>)
 80114a2:	589a      	ldr	r2, [r3, r2]
 80114a4:	b2c9      	uxtb	r1, r1
 80114a6:	2394      	movs	r3, #148	; 0x94
 80114a8:	005b      	lsls	r3, r3, #1
 80114aa:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80114ac:	4b18      	ldr	r3, [pc, #96]	; (8011510 <ProcessMacCommands+0x3fc>)
 80114ae:	4a1a      	ldr	r2, [pc, #104]	; (8011518 <ProcessMacCommands+0x404>)
 80114b0:	589a      	ldr	r2, [r3, r2]
 80114b2:	183b      	adds	r3, r7, r0
 80114b4:	6859      	ldr	r1, [r3, #4]
 80114b6:	238e      	movs	r3, #142	; 0x8e
 80114b8:	005b      	lsls	r3, r3, #1
 80114ba:	50d1      	str	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80114bc:	4b14      	ldr	r3, [pc, #80]	; (8011510 <ProcessMacCommands+0x3fc>)
 80114be:	4a16      	ldr	r2, [pc, #88]	; (8011518 <ProcessMacCommands+0x404>)
 80114c0:	589a      	ldr	r2, [r3, r2]
 80114c2:	183b      	adds	r3, r7, r0
 80114c4:	6859      	ldr	r1, [r3, #4]
 80114c6:	2392      	movs	r3, #146	; 0x92
 80114c8:	005b      	lsls	r3, r3, #1
 80114ca:	50d1      	str	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80114cc:	183b      	adds	r3, r7, r0
 80114ce:	2101      	movs	r1, #1
 80114d0:	5659      	ldrsb	r1, [r3, r1]
 80114d2:	4b0f      	ldr	r3, [pc, #60]	; (8011510 <ProcessMacCommands+0x3fc>)
 80114d4:	4a10      	ldr	r2, [pc, #64]	; (8011518 <ProcessMacCommands+0x404>)
 80114d6:	589a      	ldr	r2, [r3, r2]
 80114d8:	b2c9      	uxtb	r1, r1
 80114da:	231a      	movs	r3, #26
 80114dc:	33ff      	adds	r3, #255	; 0xff
 80114de:	54d1      	strb	r1, [r2, r3]
                }
                macCmdPayload[0] = status;
 80114e0:	236b      	movs	r3, #107	; 0x6b
 80114e2:	18fb      	adds	r3, r7, r3
 80114e4:	781a      	ldrb	r2, [r3, #0]
 80114e6:	2168      	movs	r1, #104	; 0x68
 80114e8:	187b      	adds	r3, r7, r1
 80114ea:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80114ec:	187b      	adds	r3, r7, r1
 80114ee:	2201      	movs	r2, #1
 80114f0:	0019      	movs	r1, r3
 80114f2:	2005      	movs	r0, #5
 80114f4:	f003 ff28 	bl	8015348 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 80114f8:	f7ff fdfc 	bl	80110f4 <SetMlmeScheduleUplinkIndication>
                break;
 80114fc:	46c0      	nop			; (mov r8, r8)
 80114fe:	2287      	movs	r2, #135	; 0x87
 8011500:	18bb      	adds	r3, r7, r2
 8011502:	18ba      	adds	r2, r7, r2
 8011504:	7812      	ldrb	r2, [r2, #0]
 8011506:	701a      	strb	r2, [r3, #0]
 8011508:	e3a5      	b.n	8011c56 <ProcessMacCommands+0xb42>
 801150a:	46c0      	nop			; (mov r8, r8)
 801150c:	0801cee8 	.word	0x0801cee8
 8011510:	200008ec 	.word	0x200008ec
 8011514:	00000459 	.word	0x00000459
 8011518:	00000484 	.word	0x00000484
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 801151c:	2385      	movs	r3, #133	; 0x85
 801151e:	18fb      	adds	r3, r7, r3
 8011520:	22ff      	movs	r2, #255	; 0xff
 8011522:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8011524:	4af1      	ldr	r2, [pc, #964]	; (80118ec <ProcessMacCommands+0x7d8>)
 8011526:	23d2      	movs	r3, #210	; 0xd2
 8011528:	009b      	lsls	r3, r3, #2
 801152a:	58d3      	ldr	r3, [r2, r3]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d010      	beq.n	8011552 <ProcessMacCommands+0x43e>
 8011530:	4aee      	ldr	r2, [pc, #952]	; (80118ec <ProcessMacCommands+0x7d8>)
 8011532:	23d2      	movs	r3, #210	; 0xd2
 8011534:	009b      	lsls	r3, r3, #2
 8011536:	58d3      	ldr	r3, [r2, r3]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d009      	beq.n	8011552 <ProcessMacCommands+0x43e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 801153e:	4aeb      	ldr	r2, [pc, #940]	; (80118ec <ProcessMacCommands+0x7d8>)
 8011540:	23d2      	movs	r3, #210	; 0xd2
 8011542:	009b      	lsls	r3, r3, #2
 8011544:	58d3      	ldr	r3, [r2, r3]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	2285      	movs	r2, #133	; 0x85
 801154a:	18bc      	adds	r4, r7, r2
 801154c:	4798      	blx	r3
 801154e:	0003      	movs	r3, r0
 8011550:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 8011552:	2168      	movs	r1, #104	; 0x68
 8011554:	187b      	adds	r3, r7, r1
 8011556:	2285      	movs	r2, #133	; 0x85
 8011558:	18ba      	adds	r2, r7, r2
 801155a:	7812      	ldrb	r2, [r2, #0]
 801155c:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 801155e:	1c7b      	adds	r3, r7, #1
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	223f      	movs	r2, #63	; 0x3f
 8011564:	4013      	ands	r3, r2
 8011566:	b2da      	uxtb	r2, r3
 8011568:	187b      	adds	r3, r7, r1
 801156a:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 801156c:	187b      	adds	r3, r7, r1
 801156e:	2202      	movs	r2, #2
 8011570:	0019      	movs	r1, r3
 8011572:	2006      	movs	r0, #6
 8011574:	f003 fee8 	bl	8015348 <LoRaMacCommandsAddCmd>
 8011578:	2287      	movs	r2, #135	; 0x87
 801157a:	18bb      	adds	r3, r7, r2
 801157c:	18ba      	adds	r2, r7, r2
 801157e:	7812      	ldrb	r2, [r2, #0]
 8011580:	701a      	strb	r2, [r3, #0]
                break;
 8011582:	e368      	b.n	8011c56 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8011584:	246b      	movs	r4, #107	; 0x6b
 8011586:	193b      	adds	r3, r7, r4
 8011588:	2203      	movs	r2, #3
 801158a:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 801158c:	1cfb      	adds	r3, r7, #3
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	1cfa      	adds	r2, r7, #3
 8011592:	1c59      	adds	r1, r3, #1
 8011594:	7011      	strb	r1, [r2, #0]
 8011596:	001a      	movs	r2, r3
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	189b      	adds	r3, r3, r2
 801159c:	781b      	ldrb	r3, [r3, #0]
 801159e:	b25a      	sxtb	r2, r3
 80115a0:	2544      	movs	r5, #68	; 0x44
 80115a2:	197b      	adds	r3, r7, r5
 80115a4:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 80115a6:	197b      	adds	r3, r7, r5
 80115a8:	2038      	movs	r0, #56	; 0x38
 80115aa:	183a      	adds	r2, r7, r0
 80115ac:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 80115ae:	1cfb      	adds	r3, r7, #3
 80115b0:	781b      	ldrb	r3, [r3, #0]
 80115b2:	1cfa      	adds	r2, r7, #3
 80115b4:	1c59      	adds	r1, r3, #1
 80115b6:	7011      	strb	r1, [r2, #0]
 80115b8:	001a      	movs	r2, r3
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	189b      	adds	r3, r3, r2
 80115be:	781b      	ldrb	r3, [r3, #0]
 80115c0:	001a      	movs	r2, r3
 80115c2:	183b      	adds	r3, r7, r0
 80115c4:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80115c6:	1cfb      	adds	r3, r7, #3
 80115c8:	781b      	ldrb	r3, [r3, #0]
 80115ca:	1cfa      	adds	r2, r7, #3
 80115cc:	1c59      	adds	r1, r3, #1
 80115ce:	7011      	strb	r1, [r2, #0]
 80115d0:	001a      	movs	r2, r3
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	189b      	adds	r3, r3, r2
 80115d6:	781b      	ldrb	r3, [r3, #0]
 80115d8:	021a      	lsls	r2, r3, #8
 80115da:	183b      	adds	r3, r7, r0
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	431a      	orrs	r2, r3
 80115e0:	183b      	adds	r3, r7, r0
 80115e2:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80115e4:	1cfb      	adds	r3, r7, #3
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	1cfa      	adds	r2, r7, #3
 80115ea:	1c59      	adds	r1, r3, #1
 80115ec:	7011      	strb	r1, [r2, #0]
 80115ee:	001a      	movs	r2, r3
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	189b      	adds	r3, r3, r2
 80115f4:	781b      	ldrb	r3, [r3, #0]
 80115f6:	041a      	lsls	r2, r3, #16
 80115f8:	183b      	adds	r3, r7, r0
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	431a      	orrs	r2, r3
 80115fe:	183b      	adds	r3, r7, r0
 8011600:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 8011602:	183b      	adds	r3, r7, r0
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	2264      	movs	r2, #100	; 0x64
 8011608:	435a      	muls	r2, r3
 801160a:	183b      	adds	r3, r7, r0
 801160c:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 801160e:	183b      	adds	r3, r7, r0
 8011610:	2200      	movs	r2, #0
 8011612:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 8011614:	1cfb      	adds	r3, r7, #3
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	1cfa      	adds	r2, r7, #3
 801161a:	1c59      	adds	r1, r3, #1
 801161c:	7011      	strb	r1, [r2, #0]
 801161e:	001a      	movs	r2, r3
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	189b      	adds	r3, r3, r2
 8011624:	781b      	ldrb	r3, [r3, #0]
 8011626:	b25a      	sxtb	r2, r3
 8011628:	183b      	adds	r3, r7, r0
 801162a:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 801162c:	4baf      	ldr	r3, [pc, #700]	; (80118ec <ProcessMacCommands+0x7d8>)
 801162e:	4ab0      	ldr	r2, [pc, #704]	; (80118f0 <ProcessMacCommands+0x7dc>)
 8011630:	589b      	ldr	r3, [r3, r2]
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	197a      	adds	r2, r7, r5
 8011636:	0011      	movs	r1, r2
 8011638:	0018      	movs	r0, r3
 801163a:	f006 f855 	bl	80176e8 <RegionNewChannelReq>
 801163e:	0003      	movs	r3, r0
 8011640:	001a      	movs	r2, r3
 8011642:	193b      	adds	r3, r7, r4
 8011644:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 8011646:	193b      	adds	r3, r7, r4
 8011648:	781a      	ldrb	r2, [r3, #0]
 801164a:	2168      	movs	r1, #104	; 0x68
 801164c:	187b      	adds	r3, r7, r1
 801164e:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8011650:	187b      	adds	r3, r7, r1
 8011652:	2201      	movs	r2, #1
 8011654:	0019      	movs	r1, r3
 8011656:	2007      	movs	r0, #7
 8011658:	f003 fe76 	bl	8015348 <LoRaMacCommandsAddCmd>
                break;
 801165c:	46c0      	nop			; (mov r8, r8)
 801165e:	2287      	movs	r2, #135	; 0x87
 8011660:	18bb      	adds	r3, r7, r2
 8011662:	18ba      	adds	r2, r7, r2
 8011664:	7812      	ldrb	r2, [r2, #0]
 8011666:	701a      	strb	r2, [r3, #0]
 8011668:	e2f5      	b.n	8011c56 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 801166a:	1cfb      	adds	r3, r7, #3
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	1cfa      	adds	r2, r7, #3
 8011670:	1c59      	adds	r1, r3, #1
 8011672:	7011      	strb	r1, [r2, #0]
 8011674:	001a      	movs	r2, r3
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	189b      	adds	r3, r3, r2
 801167a:	781a      	ldrb	r2, [r3, #0]
 801167c:	2084      	movs	r0, #132	; 0x84
 801167e:	183b      	adds	r3, r7, r0
 8011680:	210f      	movs	r1, #15
 8011682:	400a      	ands	r2, r1
 8011684:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 8011686:	183b      	adds	r3, r7, r0
 8011688:	781b      	ldrb	r3, [r3, #0]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d105      	bne.n	801169a <ProcessMacCommands+0x586>
                {
                    delay++;
 801168e:	2184      	movs	r1, #132	; 0x84
 8011690:	187b      	adds	r3, r7, r1
 8011692:	781a      	ldrb	r2, [r3, #0]
 8011694:	187b      	adds	r3, r7, r1
 8011696:	3201      	adds	r2, #1
 8011698:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 801169a:	2384      	movs	r3, #132	; 0x84
 801169c:	18fb      	adds	r3, r7, r3
 801169e:	781a      	ldrb	r2, [r3, #0]
 80116a0:	0013      	movs	r3, r2
 80116a2:	015b      	lsls	r3, r3, #5
 80116a4:	1a9b      	subs	r3, r3, r2
 80116a6:	009b      	lsls	r3, r3, #2
 80116a8:	189b      	adds	r3, r3, r2
 80116aa:	00db      	lsls	r3, r3, #3
 80116ac:	0019      	movs	r1, r3
 80116ae:	4b8f      	ldr	r3, [pc, #572]	; (80118ec <ProcessMacCommands+0x7d8>)
 80116b0:	4a8f      	ldr	r2, [pc, #572]	; (80118f0 <ProcessMacCommands+0x7dc>)
 80116b2:	589a      	ldr	r2, [r3, r2]
 80116b4:	2384      	movs	r3, #132	; 0x84
 80116b6:	005b      	lsls	r3, r3, #1
 80116b8:	50d1      	str	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 80116ba:	4b8c      	ldr	r3, [pc, #560]	; (80118ec <ProcessMacCommands+0x7d8>)
 80116bc:	4a8c      	ldr	r2, [pc, #560]	; (80118f0 <ProcessMacCommands+0x7dc>)
 80116be:	589a      	ldr	r2, [r3, r2]
 80116c0:	2384      	movs	r3, #132	; 0x84
 80116c2:	005b      	lsls	r3, r3, #1
 80116c4:	58d3      	ldr	r3, [r2, r3]
 80116c6:	4a89      	ldr	r2, [pc, #548]	; (80118ec <ProcessMacCommands+0x7d8>)
 80116c8:	4989      	ldr	r1, [pc, #548]	; (80118f0 <ProcessMacCommands+0x7dc>)
 80116ca:	5852      	ldr	r2, [r2, r1]
 80116cc:	21fa      	movs	r1, #250	; 0xfa
 80116ce:	0089      	lsls	r1, r1, #2
 80116d0:	1859      	adds	r1, r3, r1
 80116d2:	2386      	movs	r3, #134	; 0x86
 80116d4:	005b      	lsls	r3, r3, #1
 80116d6:	50d1      	str	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80116d8:	2368      	movs	r3, #104	; 0x68
 80116da:	18fb      	adds	r3, r7, r3
 80116dc:	2200      	movs	r2, #0
 80116de:	0019      	movs	r1, r3
 80116e0:	2008      	movs	r0, #8
 80116e2:	f003 fe31 	bl	8015348 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 80116e6:	f7ff fd05 	bl	80110f4 <SetMlmeScheduleUplinkIndication>
 80116ea:	2287      	movs	r2, #135	; 0x87
 80116ec:	18bb      	adds	r3, r7, r2
 80116ee:	18ba      	adds	r2, r7, r2
 80116f0:	7812      	ldrb	r2, [r2, #0]
 80116f2:	701a      	strb	r2, [r3, #0]
                break;
 80116f4:	e2af      	b.n	8011c56 <ProcessMacCommands+0xb42>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 80116f6:	1cfb      	adds	r3, r7, #3
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	1cfa      	adds	r2, r7, #3
 80116fc:	1c59      	adds	r1, r3, #1
 80116fe:	7011      	strb	r1, [r2, #0]
 8011700:	001a      	movs	r2, r3
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	189a      	adds	r2, r3, r2
 8011706:	2176      	movs	r1, #118	; 0x76
 8011708:	187b      	adds	r3, r7, r1
 801170a:	7812      	ldrb	r2, [r2, #0]
 801170c:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 801170e:	2034      	movs	r0, #52	; 0x34
 8011710:	183b      	adds	r3, r7, r0
 8011712:	2200      	movs	r2, #0
 8011714:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 8011716:	183b      	adds	r3, r7, r0
 8011718:	2200      	movs	r2, #0
 801171a:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 801171c:	187b      	adds	r3, r7, r1
 801171e:	781b      	ldrb	r3, [r3, #0]
 8011720:	2220      	movs	r2, #32
 8011722:	4013      	ands	r3, r2
 8011724:	d003      	beq.n	801172e <ProcessMacCommands+0x61a>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8011726:	2334      	movs	r3, #52	; 0x34
 8011728:	18fb      	adds	r3, r7, r3
 801172a:	2201      	movs	r2, #1
 801172c:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 801172e:	2376      	movs	r3, #118	; 0x76
 8011730:	18fb      	adds	r3, r7, r3
 8011732:	781b      	ldrb	r3, [r3, #0]
 8011734:	2210      	movs	r2, #16
 8011736:	4013      	ands	r3, r2
 8011738:	d003      	beq.n	8011742 <ProcessMacCommands+0x62e>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 801173a:	2334      	movs	r3, #52	; 0x34
 801173c:	18fb      	adds	r3, r7, r3
 801173e:	2201      	movs	r2, #1
 8011740:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8011742:	2376      	movs	r3, #118	; 0x76
 8011744:	18fb      	adds	r3, r7, r3
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	220f      	movs	r2, #15
 801174a:	4013      	ands	r3, r2
 801174c:	b2da      	uxtb	r2, r3
 801174e:	2134      	movs	r1, #52	; 0x34
 8011750:	187b      	adds	r3, r7, r1
 8011752:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8011754:	4b65      	ldr	r3, [pc, #404]	; (80118ec <ProcessMacCommands+0x7d8>)
 8011756:	4a66      	ldr	r2, [pc, #408]	; (80118f0 <ProcessMacCommands+0x7dc>)
 8011758:	589b      	ldr	r3, [r3, r2]
 801175a:	781b      	ldrb	r3, [r3, #0]
 801175c:	187a      	adds	r2, r7, r1
 801175e:	0011      	movs	r1, r2
 8011760:	0018      	movs	r0, r3
 8011762:	f005 ffd7 	bl	8017714 <RegionTxParamSetupReq>
 8011766:	0003      	movs	r3, r0
 8011768:	3301      	adds	r3, #1
 801176a:	d055      	beq.n	8011818 <ProcessMacCommands+0x704>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 801176c:	4b5f      	ldr	r3, [pc, #380]	; (80118ec <ProcessMacCommands+0x7d8>)
 801176e:	4a60      	ldr	r2, [pc, #384]	; (80118f0 <ProcessMacCommands+0x7dc>)
 8011770:	589a      	ldr	r2, [r3, r2]
 8011772:	2034      	movs	r0, #52	; 0x34
 8011774:	183b      	adds	r3, r7, r0
 8011776:	7819      	ldrb	r1, [r3, #0]
 8011778:	2396      	movs	r3, #150	; 0x96
 801177a:	005b      	lsls	r3, r3, #1
 801177c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 801177e:	4b5b      	ldr	r3, [pc, #364]	; (80118ec <ProcessMacCommands+0x7d8>)
 8011780:	4a5b      	ldr	r2, [pc, #364]	; (80118f0 <ProcessMacCommands+0x7dc>)
 8011782:	589a      	ldr	r2, [r3, r2]
 8011784:	183b      	adds	r3, r7, r0
 8011786:	7859      	ldrb	r1, [r3, #1]
 8011788:	232e      	movs	r3, #46	; 0x2e
 801178a:	33ff      	adds	r3, #255	; 0xff
 801178c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 801178e:	183b      	adds	r3, r7, r0
 8011790:	789b      	ldrb	r3, [r3, #2]
 8011792:	001a      	movs	r2, r3
 8011794:	4b57      	ldr	r3, [pc, #348]	; (80118f4 <ProcessMacCommands+0x7e0>)
 8011796:	5c99      	ldrb	r1, [r3, r2]
 8011798:	4b54      	ldr	r3, [pc, #336]	; (80118ec <ProcessMacCommands+0x7d8>)
 801179a:	4a55      	ldr	r2, [pc, #340]	; (80118f0 <ProcessMacCommands+0x7dc>)
 801179c:	589c      	ldr	r4, [r3, r2]
 801179e:	0008      	movs	r0, r1
 80117a0:	f7ef fd5a 	bl	8001258 <__aeabi_ui2f>
 80117a4:	1c02      	adds	r2, r0, #0
 80117a6:	2398      	movs	r3, #152	; 0x98
 80117a8:	005b      	lsls	r3, r3, #1
 80117aa:	50e2      	str	r2, [r4, r3]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80117ac:	2130      	movs	r1, #48	; 0x30
 80117ae:	187b      	adds	r3, r7, r1
 80117b0:	2202      	movs	r2, #2
 80117b2:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80117b4:	4b4d      	ldr	r3, [pc, #308]	; (80118ec <ProcessMacCommands+0x7d8>)
 80117b6:	4a4e      	ldr	r2, [pc, #312]	; (80118f0 <ProcessMacCommands+0x7dc>)
 80117b8:	589a      	ldr	r2, [r3, r2]
 80117ba:	2396      	movs	r3, #150	; 0x96
 80117bc:	005b      	lsls	r3, r3, #1
 80117be:	5cd2      	ldrb	r2, [r2, r3]
 80117c0:	187b      	adds	r3, r7, r1
 80117c2:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80117c4:	4b49      	ldr	r3, [pc, #292]	; (80118ec <ProcessMacCommands+0x7d8>)
 80117c6:	4a4a      	ldr	r2, [pc, #296]	; (80118f0 <ProcessMacCommands+0x7dc>)
 80117c8:	589b      	ldr	r3, [r3, r2]
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	187a      	adds	r2, r7, r1
 80117ce:	0011      	movs	r1, r2
 80117d0:	0018      	movs	r0, r3
 80117d2:	f005 fe4d 	bl	8017470 <RegionGetPhyParam>
 80117d6:	0003      	movs	r3, r0
 80117d8:	001a      	movs	r2, r3
 80117da:	212c      	movs	r1, #44	; 0x2c
 80117dc:	187b      	adds	r3, r7, r1
 80117de:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 80117e0:	187b      	adds	r3, r7, r1
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	b259      	sxtb	r1, r3
 80117e6:	4b41      	ldr	r3, [pc, #260]	; (80118ec <ProcessMacCommands+0x7d8>)
 80117e8:	4a41      	ldr	r2, [pc, #260]	; (80118f0 <ProcessMacCommands+0x7dc>)
 80117ea:	589b      	ldr	r3, [r3, r2]
 80117ec:	22f9      	movs	r2, #249	; 0xf9
 80117ee:	5698      	ldrsb	r0, [r3, r2]
 80117f0:	4b3e      	ldr	r3, [pc, #248]	; (80118ec <ProcessMacCommands+0x7d8>)
 80117f2:	4a3f      	ldr	r2, [pc, #252]	; (80118f0 <ProcessMacCommands+0x7dc>)
 80117f4:	589b      	ldr	r3, [r3, r2]
 80117f6:	1c04      	adds	r4, r0, #0
 80117f8:	1c08      	adds	r0, r1, #0
 80117fa:	b241      	sxtb	r1, r0
 80117fc:	b262      	sxtb	r2, r4
 80117fe:	4291      	cmp	r1, r2
 8011800:	da00      	bge.n	8011804 <ProcessMacCommands+0x6f0>
 8011802:	1c20      	adds	r0, r4, #0
 8011804:	b241      	sxtb	r1, r0
 8011806:	22f9      	movs	r2, #249	; 0xf9
 8011808:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 801180a:	2368      	movs	r3, #104	; 0x68
 801180c:	18fb      	adds	r3, r7, r3
 801180e:	2200      	movs	r2, #0
 8011810:	0019      	movs	r1, r3
 8011812:	2009      	movs	r0, #9
 8011814:	f003 fd98 	bl	8015348 <LoRaMacCommandsAddCmd>
                }
                break;
 8011818:	46c0      	nop			; (mov r8, r8)
 801181a:	2287      	movs	r2, #135	; 0x87
 801181c:	18bb      	adds	r3, r7, r2
 801181e:	18ba      	adds	r2, r7, r2
 8011820:	7812      	ldrb	r2, [r2, #0]
 8011822:	701a      	strb	r2, [r3, #0]
 8011824:	e217      	b.n	8011c56 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8011826:	246b      	movs	r4, #107	; 0x6b
 8011828:	193b      	adds	r3, r7, r4
 801182a:	2203      	movs	r2, #3
 801182c:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 801182e:	1cfb      	adds	r3, r7, #3
 8011830:	781b      	ldrb	r3, [r3, #0]
 8011832:	1cfa      	adds	r2, r7, #3
 8011834:	1c59      	adds	r1, r3, #1
 8011836:	7011      	strb	r1, [r2, #0]
 8011838:	001a      	movs	r2, r3
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	189b      	adds	r3, r3, r2
 801183e:	781a      	ldrb	r2, [r3, #0]
 8011840:	2024      	movs	r0, #36	; 0x24
 8011842:	183b      	adds	r3, r7, r0
 8011844:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8011846:	1cfb      	adds	r3, r7, #3
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	1cfa      	adds	r2, r7, #3
 801184c:	1c59      	adds	r1, r3, #1
 801184e:	7011      	strb	r1, [r2, #0]
 8011850:	001a      	movs	r2, r3
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	189b      	adds	r3, r3, r2
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	001a      	movs	r2, r3
 801185a:	183b      	adds	r3, r7, r0
 801185c:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801185e:	1cfb      	adds	r3, r7, #3
 8011860:	781b      	ldrb	r3, [r3, #0]
 8011862:	1cfa      	adds	r2, r7, #3
 8011864:	1c59      	adds	r1, r3, #1
 8011866:	7011      	strb	r1, [r2, #0]
 8011868:	001a      	movs	r2, r3
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	189b      	adds	r3, r3, r2
 801186e:	781b      	ldrb	r3, [r3, #0]
 8011870:	021a      	lsls	r2, r3, #8
 8011872:	183b      	adds	r3, r7, r0
 8011874:	685b      	ldr	r3, [r3, #4]
 8011876:	431a      	orrs	r2, r3
 8011878:	183b      	adds	r3, r7, r0
 801187a:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801187c:	1cfb      	adds	r3, r7, #3
 801187e:	781b      	ldrb	r3, [r3, #0]
 8011880:	1cfa      	adds	r2, r7, #3
 8011882:	1c59      	adds	r1, r3, #1
 8011884:	7011      	strb	r1, [r2, #0]
 8011886:	001a      	movs	r2, r3
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	189b      	adds	r3, r3, r2
 801188c:	781b      	ldrb	r3, [r3, #0]
 801188e:	041a      	lsls	r2, r3, #16
 8011890:	0001      	movs	r1, r0
 8011892:	187b      	adds	r3, r7, r1
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	431a      	orrs	r2, r3
 8011898:	187b      	adds	r3, r7, r1
 801189a:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 801189c:	187b      	adds	r3, r7, r1
 801189e:	685b      	ldr	r3, [r3, #4]
 80118a0:	2264      	movs	r2, #100	; 0x64
 80118a2:	435a      	muls	r2, r3
 80118a4:	187b      	adds	r3, r7, r1
 80118a6:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 80118a8:	4b10      	ldr	r3, [pc, #64]	; (80118ec <ProcessMacCommands+0x7d8>)
 80118aa:	4a11      	ldr	r2, [pc, #68]	; (80118f0 <ProcessMacCommands+0x7dc>)
 80118ac:	589b      	ldr	r3, [r3, r2]
 80118ae:	781b      	ldrb	r3, [r3, #0]
 80118b0:	187a      	adds	r2, r7, r1
 80118b2:	0011      	movs	r1, r2
 80118b4:	0018      	movs	r0, r3
 80118b6:	f005 ff43 	bl	8017740 <RegionDlChannelReq>
 80118ba:	0003      	movs	r3, r0
 80118bc:	001a      	movs	r2, r3
 80118be:	193b      	adds	r3, r7, r4
 80118c0:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 80118c2:	193b      	adds	r3, r7, r4
 80118c4:	781a      	ldrb	r2, [r3, #0]
 80118c6:	2168      	movs	r1, #104	; 0x68
 80118c8:	187b      	adds	r3, r7, r1
 80118ca:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80118cc:	187b      	adds	r3, r7, r1
 80118ce:	2201      	movs	r2, #1
 80118d0:	0019      	movs	r1, r3
 80118d2:	200a      	movs	r0, #10
 80118d4:	f003 fd38 	bl	8015348 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 80118d8:	f7ff fc0c 	bl	80110f4 <SetMlmeScheduleUplinkIndication>
                break;
 80118dc:	46c0      	nop			; (mov r8, r8)
 80118de:	2287      	movs	r2, #135	; 0x87
 80118e0:	18bb      	adds	r3, r7, r2
 80118e2:	18ba      	adds	r2, r7, r2
 80118e4:	7812      	ldrb	r2, [r2, #0]
 80118e6:	701a      	strb	r2, [r3, #0]
 80118e8:	e1b5      	b.n	8011c56 <ProcessMacCommands+0xb42>
 80118ea:	46c0      	nop			; (mov r8, r8)
 80118ec:	200008ec 	.word	0x200008ec
 80118f0:	00000484 	.word	0x00000484
 80118f4:	0801cec4 	.word	0x0801cec4
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                SysTime_t gpsEpochTime = { 0 };
 80118f8:	241c      	movs	r4, #28
 80118fa:	193b      	adds	r3, r7, r4
 80118fc:	0018      	movs	r0, r3
 80118fe:	2308      	movs	r3, #8
 8011900:	001a      	movs	r2, r3
 8011902:	2100      	movs	r1, #0
 8011904:	f009 feb6 	bl	801b674 <memset>
                SysTime_t sysTime = { 0 };
 8011908:	2514      	movs	r5, #20
 801190a:	197b      	adds	r3, r7, r5
 801190c:	0018      	movs	r0, r3
 801190e:	2308      	movs	r3, #8
 8011910:	001a      	movs	r2, r3
 8011912:	2100      	movs	r1, #0
 8011914:	f009 feae 	bl	801b674 <memset>
                SysTime_t sysTimeCurrent = { 0 };
 8011918:	260c      	movs	r6, #12
 801191a:	19bb      	adds	r3, r7, r6
 801191c:	0018      	movs	r0, r3
 801191e:	2308      	movs	r3, #8
 8011920:	001a      	movs	r2, r3
 8011922:	2100      	movs	r1, #0
 8011924:	f009 fea6 	bl	801b674 <memset>

                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8011928:	1cfb      	adds	r3, r7, #3
 801192a:	781b      	ldrb	r3, [r3, #0]
 801192c:	1cfa      	adds	r2, r7, #3
 801192e:	1c59      	adds	r1, r3, #1
 8011930:	7011      	strb	r1, [r2, #0]
 8011932:	001a      	movs	r2, r3
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	189b      	adds	r3, r3, r2
 8011938:	781b      	ldrb	r3, [r3, #0]
 801193a:	001a      	movs	r2, r3
 801193c:	0020      	movs	r0, r4
 801193e:	183b      	adds	r3, r7, r0
 8011940:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8011942:	1cfb      	adds	r3, r7, #3
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	1cfa      	adds	r2, r7, #3
 8011948:	1c59      	adds	r1, r3, #1
 801194a:	7011      	strb	r1, [r2, #0]
 801194c:	001a      	movs	r2, r3
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	189b      	adds	r3, r3, r2
 8011952:	781b      	ldrb	r3, [r3, #0]
 8011954:	021a      	lsls	r2, r3, #8
 8011956:	183b      	adds	r3, r7, r0
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	431a      	orrs	r2, r3
 801195c:	183b      	adds	r3, r7, r0
 801195e:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8011960:	1cfb      	adds	r3, r7, #3
 8011962:	781b      	ldrb	r3, [r3, #0]
 8011964:	1cfa      	adds	r2, r7, #3
 8011966:	1c59      	adds	r1, r3, #1
 8011968:	7011      	strb	r1, [r2, #0]
 801196a:	001a      	movs	r2, r3
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	189b      	adds	r3, r3, r2
 8011970:	781b      	ldrb	r3, [r3, #0]
 8011972:	041a      	lsls	r2, r3, #16
 8011974:	183b      	adds	r3, r7, r0
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	431a      	orrs	r2, r3
 801197a:	183b      	adds	r3, r7, r0
 801197c:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 801197e:	1cfb      	adds	r3, r7, #3
 8011980:	781b      	ldrb	r3, [r3, #0]
 8011982:	1cfa      	adds	r2, r7, #3
 8011984:	1c59      	adds	r1, r3, #1
 8011986:	7011      	strb	r1, [r2, #0]
 8011988:	001a      	movs	r2, r3
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	189b      	adds	r3, r3, r2
 801198e:	781b      	ldrb	r3, [r3, #0]
 8011990:	061a      	lsls	r2, r3, #24
 8011992:	183b      	adds	r3, r7, r0
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	431a      	orrs	r2, r3
 8011998:	183b      	adds	r3, r7, r0
 801199a:	601a      	str	r2, [r3, #0]
                gpsEpochTime.SubSeconds = payload[macIndex++];
 801199c:	1cfb      	adds	r3, r7, #3
 801199e:	781b      	ldrb	r3, [r3, #0]
 80119a0:	1cfa      	adds	r2, r7, #3
 80119a2:	1c59      	adds	r1, r3, #1
 80119a4:	7011      	strb	r1, [r2, #0]
 80119a6:	001a      	movs	r2, r3
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	189b      	adds	r3, r3, r2
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	b21a      	sxth	r2, r3
 80119b0:	183b      	adds	r3, r7, r0
 80119b2:	809a      	strh	r2, [r3, #4]

                // Convert the fractional second received in ms
                // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80119b4:	0001      	movs	r1, r0
 80119b6:	183b      	adds	r3, r7, r0
 80119b8:	2204      	movs	r2, #4
 80119ba:	5e9b      	ldrsh	r3, [r3, r2]
 80119bc:	001a      	movs	r2, r3
 80119be:	0013      	movs	r3, r2
 80119c0:	015b      	lsls	r3, r3, #5
 80119c2:	1a9b      	subs	r3, r3, r2
 80119c4:	009b      	lsls	r3, r3, #2
 80119c6:	189b      	adds	r3, r3, r2
 80119c8:	00db      	lsls	r3, r3, #3
 80119ca:	121b      	asrs	r3, r3, #8
 80119cc:	b21a      	sxth	r2, r3
 80119ce:	187b      	adds	r3, r7, r1
 80119d0:	809a      	strh	r2, [r3, #4]

                // Copy received GPS Epoch time into system time
                sysTime = gpsEpochTime;
 80119d2:	002c      	movs	r4, r5
 80119d4:	193b      	adds	r3, r7, r4
 80119d6:	187a      	adds	r2, r7, r1
 80119d8:	ca03      	ldmia	r2!, {r0, r1}
 80119da:	c303      	stmia	r3!, {r0, r1}
                // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80119dc:	193b      	adds	r3, r7, r4
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	4aa3      	ldr	r2, [pc, #652]	; (8011c70 <ProcessMacCommands+0xb5c>)
 80119e2:	189a      	adds	r2, r3, r2
 80119e4:	193b      	adds	r3, r7, r4
 80119e6:	601a      	str	r2, [r3, #0]

                // Compensate time difference between Tx Done time and now
                sysTimeCurrent = SysTimeGet( );
 80119e8:	19bb      	adds	r3, r7, r6
 80119ea:	0018      	movs	r0, r3
 80119ec:	f009 f9fb 	bl	801ade6 <SysTimeGet>
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80119f0:	236c      	movs	r3, #108	; 0x6c
 80119f2:	18fd      	adds	r5, r7, r3
 80119f4:	499f      	ldr	r1, [pc, #636]	; (8011c74 <ProcessMacCommands+0xb60>)
 80119f6:	23ce      	movs	r3, #206	; 0xce
 80119f8:	009b      	lsls	r3, r3, #2
 80119fa:	0026      	movs	r6, r4
 80119fc:	193a      	adds	r2, r7, r4
 80119fe:	2404      	movs	r4, #4
 8011a00:	18c8      	adds	r0, r1, r3
 8011a02:	1900      	adds	r0, r0, r4
 8011a04:	466c      	mov	r4, sp
 8011a06:	6800      	ldr	r0, [r0, #0]
 8011a08:	6020      	str	r0, [r4, #0]
 8011a0a:	58cb      	ldr	r3, [r1, r3]
 8011a0c:	6811      	ldr	r1, [r2, #0]
 8011a0e:	6852      	ldr	r2, [r2, #4]
 8011a10:	0028      	movs	r0, r5
 8011a12:	f009 f963 	bl	801acdc <SysTimeSub>
 8011a16:	0034      	movs	r4, r6
 8011a18:	0025      	movs	r5, r4
 8011a1a:	193c      	adds	r4, r7, r4
 8011a1c:	236c      	movs	r3, #108	; 0x6c
 8011a1e:	18fb      	adds	r3, r7, r3
 8011a20:	260c      	movs	r6, #12
 8011a22:	19ba      	adds	r2, r7, r6
 8011a24:	4669      	mov	r1, sp
 8011a26:	6858      	ldr	r0, [r3, #4]
 8011a28:	6008      	str	r0, [r1, #0]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	6811      	ldr	r1, [r2, #0]
 8011a2e:	6852      	ldr	r2, [r2, #4]
 8011a30:	0020      	movs	r0, r4
 8011a32:	f009 f8fb 	bl	801ac2c <SysTimeAdd>

                // Apply the new system time.
                SysTimeSet( sysTime );
 8011a36:	002c      	movs	r4, r5
 8011a38:	193b      	adds	r3, r7, r4
 8011a3a:	6818      	ldr	r0, [r3, #0]
 8011a3c:	6859      	ldr	r1, [r3, #4]
 8011a3e:	f009 f9a1 	bl	801ad84 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 8011a42:	f003 fafc 	bl	801503e <LoRaMacClassBDeviceTimeAns>
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8011a46:	4a8b      	ldr	r2, [pc, #556]	; (8011c74 <ProcessMacCommands+0xb60>)
 8011a48:	2387      	movs	r3, #135	; 0x87
 8011a4a:	00db      	lsls	r3, r3, #3
 8011a4c:	2101      	movs	r1, #1
 8011a4e:	54d1      	strb	r1, [r2, r3]
                break;
 8011a50:	46c0      	nop			; (mov r8, r8)
 8011a52:	2287      	movs	r2, #135	; 0x87
 8011a54:	18bb      	adds	r3, r7, r2
 8011a56:	18ba      	adds	r2, r7, r2
 8011a58:	7812      	ldrb	r2, [r2, #0]
 8011a5a:	701a      	strb	r2, [r3, #0]
 8011a5c:	e0fb      	b.n	8011c56 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                // According to the specification, it is not allowed to process this answer in
                // a ping or multicast slot
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8011a5e:	4a85      	ldr	r2, [pc, #532]	; (8011c74 <ProcessMacCommands+0xb60>)
 8011a60:	2390      	movs	r3, #144	; 0x90
 8011a62:	00db      	lsls	r3, r3, #3
 8011a64:	5cd3      	ldrb	r3, [r2, r3]
 8011a66:	2b04      	cmp	r3, #4
 8011a68:	d007      	beq.n	8011a7a <ProcessMacCommands+0x966>
 8011a6a:	4a82      	ldr	r2, [pc, #520]	; (8011c74 <ProcessMacCommands+0xb60>)
 8011a6c:	2390      	movs	r3, #144	; 0x90
 8011a6e:	00db      	lsls	r3, r3, #3
 8011a70:	5cd3      	ldrb	r3, [r2, r3]
 8011a72:	2b05      	cmp	r3, #5
 8011a74:	d001      	beq.n	8011a7a <ProcessMacCommands+0x966>
                {
                    LoRaMacClassBPingSlotInfoAns( );
 8011a76:	f003 fac3 	bl	8015000 <LoRaMacClassBPingSlotInfoAns>
 8011a7a:	2287      	movs	r2, #135	; 0x87
 8011a7c:	18bb      	adds	r3, r7, r2
 8011a7e:	18ba      	adds	r2, r7, r2
 8011a80:	7812      	ldrb	r2, [r2, #0]
 8011a82:	701a      	strb	r2, [r3, #0]
                }
                break;
 8011a84:	e0e7      	b.n	8011c56 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8011a86:	207c      	movs	r0, #124	; 0x7c
 8011a88:	183b      	adds	r3, r7, r0
 8011a8a:	2203      	movs	r2, #3
 8011a8c:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011a92:	1cfb      	adds	r3, r7, #3
 8011a94:	781b      	ldrb	r3, [r3, #0]
 8011a96:	1cfa      	adds	r2, r7, #3
 8011a98:	1c59      	adds	r1, r3, #1
 8011a9a:	7011      	strb	r1, [r2, #0]
 8011a9c:	001a      	movs	r2, r3
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	189b      	adds	r3, r3, r2
 8011aa2:	781b      	ldrb	r3, [r3, #0]
 8011aa4:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011aa6:	1cfb      	adds	r3, r7, #3
 8011aa8:	781b      	ldrb	r3, [r3, #0]
 8011aaa:	1cfa      	adds	r2, r7, #3
 8011aac:	1c59      	adds	r1, r3, #1
 8011aae:	7011      	strb	r1, [r2, #0]
 8011ab0:	001a      	movs	r2, r3
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	189b      	adds	r3, r3, r2
 8011ab6:	781b      	ldrb	r3, [r3, #0]
 8011ab8:	021b      	lsls	r3, r3, #8
 8011aba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011abc:	4313      	orrs	r3, r2
 8011abe:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011ac0:	1cfb      	adds	r3, r7, #3
 8011ac2:	781b      	ldrb	r3, [r3, #0]
 8011ac4:	1cfa      	adds	r2, r7, #3
 8011ac6:	1c59      	adds	r1, r3, #1
 8011ac8:	7011      	strb	r1, [r2, #0]
 8011aca:	001a      	movs	r2, r3
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	189b      	adds	r3, r3, r2
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	041b      	lsls	r3, r3, #16
 8011ad4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011ad6:	4313      	orrs	r3, r2
 8011ad8:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8011ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011adc:	2264      	movs	r2, #100	; 0x64
 8011ade:	4353      	muls	r3, r2
 8011ae0:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8011ae2:	1cfb      	adds	r3, r7, #3
 8011ae4:	781b      	ldrb	r3, [r3, #0]
 8011ae6:	1cfa      	adds	r2, r7, #3
 8011ae8:	1c59      	adds	r1, r3, #1
 8011aea:	7011      	strb	r1, [r2, #0]
 8011aec:	001a      	movs	r2, r3
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	189b      	adds	r3, r3, r2
 8011af2:	781a      	ldrb	r2, [r3, #0]
 8011af4:	2677      	movs	r6, #119	; 0x77
 8011af6:	19bb      	adds	r3, r7, r6
 8011af8:	210f      	movs	r1, #15
 8011afa:	400a      	ands	r2, r1
 8011afc:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8011afe:	0005      	movs	r5, r0
 8011b00:	183c      	adds	r4, r7, r0
 8011b02:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011b04:	19bb      	adds	r3, r7, r6
 8011b06:	781b      	ldrb	r3, [r3, #0]
 8011b08:	0011      	movs	r1, r2
 8011b0a:	0018      	movs	r0, r3
 8011b0c:	f003 fa7d 	bl	801500a <LoRaMacClassBPingSlotChannelReq>
 8011b10:	0003      	movs	r3, r0
 8011b12:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 8011b14:	2168      	movs	r1, #104	; 0x68
 8011b16:	187b      	adds	r3, r7, r1
 8011b18:	0028      	movs	r0, r5
 8011b1a:	183a      	adds	r2, r7, r0
 8011b1c:	7812      	ldrb	r2, [r2, #0]
 8011b1e:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8011b20:	187b      	adds	r3, r7, r1
 8011b22:	2201      	movs	r2, #1
 8011b24:	0019      	movs	r1, r3
 8011b26:	2011      	movs	r0, #17
 8011b28:	f003 fc0e 	bl	8015348 <LoRaMacCommandsAddCmd>
 8011b2c:	2287      	movs	r2, #135	; 0x87
 8011b2e:	18bb      	adds	r3, r7, r2
 8011b30:	18ba      	adds	r2, r7, r2
 8011b32:	7812      	ldrb	r2, [r2, #0]
 8011b34:	701a      	strb	r2, [r3, #0]
                break;
 8011b36:	e08e      	b.n	8011c56 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                uint16_t beaconTimingDelay = 0;
 8011b38:	207e      	movs	r0, #126	; 0x7e
 8011b3a:	183b      	adds	r3, r7, r0
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	801a      	strh	r2, [r3, #0]
                uint8_t beaconTimingChannel = 0;
 8011b40:	247d      	movs	r4, #125	; 0x7d
 8011b42:	193b      	adds	r3, r7, r4
 8011b44:	2200      	movs	r2, #0
 8011b46:	701a      	strb	r2, [r3, #0]

                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8011b48:	1cfb      	adds	r3, r7, #3
 8011b4a:	781b      	ldrb	r3, [r3, #0]
 8011b4c:	1cfa      	adds	r2, r7, #3
 8011b4e:	1c59      	adds	r1, r3, #1
 8011b50:	7011      	strb	r1, [r2, #0]
 8011b52:	001a      	movs	r2, r3
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	189b      	adds	r3, r3, r2
 8011b58:	781a      	ldrb	r2, [r3, #0]
 8011b5a:	183b      	adds	r3, r7, r0
 8011b5c:	801a      	strh	r2, [r3, #0]
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8011b5e:	1cfb      	adds	r3, r7, #3
 8011b60:	781b      	ldrb	r3, [r3, #0]
 8011b62:	1cfa      	adds	r2, r7, #3
 8011b64:	1c59      	adds	r1, r3, #1
 8011b66:	7011      	strb	r1, [r2, #0]
 8011b68:	001a      	movs	r2, r3
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	189b      	adds	r3, r3, r2
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	021b      	lsls	r3, r3, #8
 8011b72:	b21a      	sxth	r2, r3
 8011b74:	183b      	adds	r3, r7, r0
 8011b76:	2100      	movs	r1, #0
 8011b78:	5e5b      	ldrsh	r3, [r3, r1]
 8011b7a:	4313      	orrs	r3, r2
 8011b7c:	b21a      	sxth	r2, r3
 8011b7e:	183b      	adds	r3, r7, r0
 8011b80:	801a      	strh	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
 8011b82:	1cfb      	adds	r3, r7, #3
 8011b84:	781b      	ldrb	r3, [r3, #0]
 8011b86:	1cfa      	adds	r2, r7, #3
 8011b88:	1c59      	adds	r1, r3, #1
 8011b8a:	7011      	strb	r1, [r2, #0]
 8011b8c:	001a      	movs	r2, r3
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	189a      	adds	r2, r3, r2
 8011b92:	193b      	adds	r3, r7, r4
 8011b94:	7812      	ldrb	r2, [r2, #0]
 8011b96:	701a      	strb	r2, [r3, #0]

                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8011b98:	4b37      	ldr	r3, [pc, #220]	; (8011c78 <ProcessMacCommands+0xb64>)
 8011b9a:	681a      	ldr	r2, [r3, #0]
 8011b9c:	193b      	adds	r3, r7, r4
 8011b9e:	7819      	ldrb	r1, [r3, #0]
 8011ba0:	183b      	adds	r3, r7, r0
 8011ba2:	881b      	ldrh	r3, [r3, #0]
 8011ba4:	0018      	movs	r0, r3
 8011ba6:	f003 fa3c 	bl	8015022 <LoRaMacClassBBeaconTimingAns>
 8011baa:	2287      	movs	r2, #135	; 0x87
 8011bac:	18bb      	adds	r3, r7, r2
 8011bae:	18ba      	adds	r2, r7, r2
 8011bb0:	7812      	ldrb	r2, [r2, #0]
 8011bb2:	701a      	strb	r2, [r3, #0]
                break;
 8011bb4:	e04f      	b.n	8011c56 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	2080      	movs	r0, #128	; 0x80
 8011bba:	183a      	adds	r2, r7, r0
 8011bbc:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 8011bbe:	1cfb      	adds	r3, r7, #3
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	1cfa      	adds	r2, r7, #3
 8011bc4:	1c59      	adds	r1, r3, #1
 8011bc6:	7011      	strb	r1, [r2, #0]
 8011bc8:	001a      	movs	r2, r3
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	189b      	adds	r3, r3, r2
 8011bce:	781b      	ldrb	r3, [r3, #0]
 8011bd0:	183a      	adds	r2, r7, r0
 8011bd2:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011bd4:	1cfb      	adds	r3, r7, #3
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	1cfa      	adds	r2, r7, #3
 8011bda:	1c59      	adds	r1, r3, #1
 8011bdc:	7011      	strb	r1, [r2, #0]
 8011bde:	001a      	movs	r2, r3
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	189b      	adds	r3, r3, r2
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	021b      	lsls	r3, r3, #8
 8011be8:	183a      	adds	r2, r7, r0
 8011bea:	6812      	ldr	r2, [r2, #0]
 8011bec:	4313      	orrs	r3, r2
 8011bee:	183a      	adds	r2, r7, r0
 8011bf0:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011bf2:	1cfb      	adds	r3, r7, #3
 8011bf4:	781b      	ldrb	r3, [r3, #0]
 8011bf6:	1cfa      	adds	r2, r7, #3
 8011bf8:	1c59      	adds	r1, r3, #1
 8011bfa:	7011      	strb	r1, [r2, #0]
 8011bfc:	001a      	movs	r2, r3
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	189b      	adds	r3, r3, r2
 8011c02:	781b      	ldrb	r3, [r3, #0]
 8011c04:	041b      	lsls	r3, r3, #16
 8011c06:	183a      	adds	r2, r7, r0
 8011c08:	6812      	ldr	r2, [r2, #0]
 8011c0a:	4313      	orrs	r3, r2
 8011c0c:	183a      	adds	r2, r7, r0
 8011c0e:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 8011c10:	183b      	adds	r3, r7, r0
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	2264      	movs	r2, #100	; 0x64
 8011c16:	4353      	muls	r3, r2
 8011c18:	183a      	adds	r2, r7, r0
 8011c1a:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8011c1c:	183b      	adds	r3, r7, r0
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	0018      	movs	r0, r3
 8011c22:	f003 fa11 	bl	8015048 <LoRaMacClassBBeaconFreqReq>
 8011c26:	1e03      	subs	r3, r0, #0
 8011c28:	d004      	beq.n	8011c34 <ProcessMacCommands+0xb20>
                    {
                        macCmdPayload[0] = 1;
 8011c2a:	2368      	movs	r3, #104	; 0x68
 8011c2c:	18fb      	adds	r3, r7, r3
 8011c2e:	2201      	movs	r2, #1
 8011c30:	701a      	strb	r2, [r3, #0]
 8011c32:	e003      	b.n	8011c3c <ProcessMacCommands+0xb28>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8011c34:	2368      	movs	r3, #104	; 0x68
 8011c36:	18fb      	adds	r3, r7, r3
 8011c38:	2200      	movs	r2, #0
 8011c3a:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8011c3c:	2368      	movs	r3, #104	; 0x68
 8011c3e:	18fb      	adds	r3, r7, r3
 8011c40:	2201      	movs	r2, #1
 8011c42:	0019      	movs	r1, r3
 8011c44:	2013      	movs	r0, #19
 8011c46:	f003 fb7f 	bl	8015348 <LoRaMacCommandsAddCmd>
 8011c4a:	2287      	movs	r2, #135	; 0x87
 8011c4c:	18bb      	adds	r3, r7, r2
 8011c4e:	18ba      	adds	r2, r7, r2
 8011c50:	7812      	ldrb	r2, [r2, #0]
 8011c52:	701a      	strb	r2, [r3, #0]
                }
                break;
 8011c54:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 8011c56:	1cfa      	adds	r2, r7, #3
 8011c58:	1cbb      	adds	r3, r7, #2
 8011c5a:	7812      	ldrb	r2, [r2, #0]
 8011c5c:	781b      	ldrb	r3, [r3, #0]
 8011c5e:	429a      	cmp	r2, r3
 8011c60:	d201      	bcs.n	8011c66 <ProcessMacCommands+0xb52>
 8011c62:	f7ff fa78 	bl	8011156 <ProcessMacCommands+0x42>
 8011c66:	e000      	b.n	8011c6a <ProcessMacCommands+0xb56>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8011c68:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	b023      	add	sp, #140	; 0x8c
 8011c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c70:	12d53d80 	.word	0x12d53d80
 8011c74:	200008ec 	.word	0x200008ec
 8011c78:	20001644 	.word	0x20001644

08011c7c <Send>:

LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8011c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c7e:	b08f      	sub	sp, #60	; 0x3c
 8011c80:	af02      	add	r7, sp, #8
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	0008      	movs	r0, r1
 8011c86:	607a      	str	r2, [r7, #4]
 8011c88:	0019      	movs	r1, r3
 8011c8a:	230b      	movs	r3, #11
 8011c8c:	18fb      	adds	r3, r7, r3
 8011c8e:	1c02      	adds	r2, r0, #0
 8011c90:	701a      	strb	r2, [r3, #0]
 8011c92:	2308      	movs	r3, #8
 8011c94:	18fb      	adds	r3, r7, r3
 8011c96:	1c0a      	adds	r2, r1, #0
 8011c98:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c9a:	232f      	movs	r3, #47	; 0x2f
 8011c9c:	18fb      	adds	r3, r7, r3
 8011c9e:	2203      	movs	r2, #3
 8011ca0:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011ca2:	4b8f      	ldr	r3, [pc, #572]	; (8011ee0 <Send+0x264>)
 8011ca4:	4a8f      	ldr	r2, [pc, #572]	; (8011ee4 <Send+0x268>)
 8011ca6:	589a      	ldr	r2, [r3, r2]
 8011ca8:	232e      	movs	r3, #46	; 0x2e
 8011caa:	18fb      	adds	r3, r7, r3
 8011cac:	21f9      	movs	r1, #249	; 0xf9
 8011cae:	5c52      	ldrb	r2, [r2, r1]
 8011cb0:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011cb2:	4b8b      	ldr	r3, [pc, #556]	; (8011ee0 <Send+0x264>)
 8011cb4:	4a8b      	ldr	r2, [pc, #556]	; (8011ee4 <Send+0x268>)
 8011cb6:	589a      	ldr	r2, [r3, r2]
 8011cb8:	232d      	movs	r3, #45	; 0x2d
 8011cba:	18fb      	adds	r3, r7, r3
 8011cbc:	21f8      	movs	r1, #248	; 0xf8
 8011cbe:	5c52      	ldrb	r2, [r2, r1]
 8011cc0:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8011cc2:	4b87      	ldr	r3, [pc, #540]	; (8011ee0 <Send+0x264>)
 8011cc4:	4a87      	ldr	r2, [pc, #540]	; (8011ee4 <Send+0x268>)
 8011cc6:	589b      	ldr	r3, [r3, r2]
 8011cc8:	22f4      	movs	r2, #244	; 0xf4
 8011cca:	589b      	ldr	r3, [r3, r2]
 8011ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011cce:	4b84      	ldr	r3, [pc, #528]	; (8011ee0 <Send+0x264>)
 8011cd0:	4a84      	ldr	r2, [pc, #528]	; (8011ee4 <Send+0x268>)
 8011cd2:	589a      	ldr	r2, [r3, r2]
 8011cd4:	23ea      	movs	r3, #234	; 0xea
 8011cd6:	005b      	lsls	r3, r3, #1
 8011cd8:	5cd3      	ldrb	r3, [r2, r3]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d101      	bne.n	8011ce2 <Send+0x66>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8011cde:	2307      	movs	r3, #7
 8011ce0:	e0f9      	b.n	8011ed6 <Send+0x25a>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 8011ce2:	4b7f      	ldr	r3, [pc, #508]	; (8011ee0 <Send+0x264>)
 8011ce4:	4a7f      	ldr	r2, [pc, #508]	; (8011ee4 <Send+0x268>)
 8011ce6:	589a      	ldr	r2, [r3, r2]
 8011ce8:	239e      	movs	r3, #158	; 0x9e
 8011cea:	005b      	lsls	r3, r3, #1
 8011cec:	5cd3      	ldrb	r3, [r2, r3]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d106      	bne.n	8011d00 <Send+0x84>
    {
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8011cf2:	4b7b      	ldr	r3, [pc, #492]	; (8011ee0 <Send+0x264>)
 8011cf4:	4a7b      	ldr	r2, [pc, #492]	; (8011ee4 <Send+0x268>)
 8011cf6:	589a      	ldr	r2, [r3, r2]
 8011cf8:	23e4      	movs	r3, #228	; 0xe4
 8011cfa:	005b      	lsls	r3, r3, #1
 8011cfc:	2100      	movs	r1, #0
 8011cfe:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 8011d00:	202c      	movs	r0, #44	; 0x2c
 8011d02:	183b      	adds	r3, r7, r0
 8011d04:	2200      	movs	r2, #0
 8011d06:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 8011d08:	183b      	adds	r3, r7, r0
 8011d0a:	781a      	ldrb	r2, [r3, #0]
 8011d0c:	210f      	movs	r1, #15
 8011d0e:	438a      	bics	r2, r1
 8011d10:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8011d12:	4b73      	ldr	r3, [pc, #460]	; (8011ee0 <Send+0x264>)
 8011d14:	4a73      	ldr	r2, [pc, #460]	; (8011ee4 <Send+0x268>)
 8011d16:	589b      	ldr	r3, [r3, r2]
 8011d18:	22f2      	movs	r2, #242	; 0xf2
 8011d1a:	5c9a      	ldrb	r2, [r3, r2]
 8011d1c:	183b      	adds	r3, r7, r0
 8011d1e:	01d0      	lsls	r0, r2, #7
 8011d20:	781a      	ldrb	r2, [r3, #0]
 8011d22:	217f      	movs	r1, #127	; 0x7f
 8011d24:	400a      	ands	r2, r1
 8011d26:	1c11      	adds	r1, r2, #0
 8011d28:	1c02      	adds	r2, r0, #0
 8011d2a:	430a      	orrs	r2, r1
 8011d2c:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8011d2e:	4b6c      	ldr	r3, [pc, #432]	; (8011ee0 <Send+0x264>)
 8011d30:	4a6c      	ldr	r2, [pc, #432]	; (8011ee4 <Send+0x268>)
 8011d32:	589b      	ldr	r3, [r3, r2]
 8011d34:	22f0      	movs	r2, #240	; 0xf0
 8011d36:	5c9b      	ldrb	r3, [r3, r2]
 8011d38:	2b01      	cmp	r3, #1
 8011d3a:	d106      	bne.n	8011d4a <Send+0xce>
    {
        fCtrl.Bits.FPending      = 1;
 8011d3c:	232c      	movs	r3, #44	; 0x2c
 8011d3e:	18fb      	adds	r3, r7, r3
 8011d40:	781a      	ldrb	r2, [r3, #0]
 8011d42:	2110      	movs	r1, #16
 8011d44:	430a      	orrs	r2, r1
 8011d46:	701a      	strb	r2, [r3, #0]
 8011d48:	e005      	b.n	8011d56 <Send+0xda>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8011d4a:	232c      	movs	r3, #44	; 0x2c
 8011d4c:	18fb      	adds	r3, r7, r3
 8011d4e:	781a      	ldrb	r2, [r3, #0]
 8011d50:	2110      	movs	r1, #16
 8011d52:	438a      	bics	r2, r1
 8011d54:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 8011d56:	4b62      	ldr	r3, [pc, #392]	; (8011ee0 <Send+0x264>)
 8011d58:	4a62      	ldr	r2, [pc, #392]	; (8011ee4 <Send+0x268>)
 8011d5a:	589a      	ldr	r2, [r3, r2]
 8011d5c:	23e0      	movs	r3, #224	; 0xe0
 8011d5e:	005b      	lsls	r3, r3, #1
 8011d60:	5cd3      	ldrb	r3, [r2, r3]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d005      	beq.n	8011d72 <Send+0xf6>
    {
        fCtrl.Bits.Ack = 1;
 8011d66:	232c      	movs	r3, #44	; 0x2c
 8011d68:	18fb      	adds	r3, r7, r3
 8011d6a:	781a      	ldrb	r2, [r3, #0]
 8011d6c:	2120      	movs	r1, #32
 8011d6e:	430a      	orrs	r2, r1
 8011d70:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8011d72:	4b5b      	ldr	r3, [pc, #364]	; (8011ee0 <Send+0x264>)
 8011d74:	4a5b      	ldr	r2, [pc, #364]	; (8011ee4 <Send+0x268>)
 8011d76:	5899      	ldr	r1, [r3, r2]
 8011d78:	2014      	movs	r0, #20
 8011d7a:	183b      	adds	r3, r7, r0
 8011d7c:	22e8      	movs	r2, #232	; 0xe8
 8011d7e:	0052      	lsls	r2, r2, #1
 8011d80:	588a      	ldr	r2, [r1, r2]
 8011d82:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 8011d84:	0001      	movs	r1, r0
 8011d86:	187b      	adds	r3, r7, r1
 8011d88:	2201      	movs	r2, #1
 8011d8a:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8011d8c:	242c      	movs	r4, #44	; 0x2c
 8011d8e:	193b      	adds	r3, r7, r4
 8011d90:	781b      	ldrb	r3, [r3, #0]
 8011d92:	061b      	lsls	r3, r3, #24
 8011d94:	0fdb      	lsrs	r3, r3, #31
 8011d96:	b2db      	uxtb	r3, r3
 8011d98:	1e5a      	subs	r2, r3, #1
 8011d9a:	4193      	sbcs	r3, r2
 8011d9c:	b2da      	uxtb	r2, r3
 8011d9e:	187b      	adds	r3, r7, r1
 8011da0:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8011da2:	4b4f      	ldr	r3, [pc, #316]	; (8011ee0 <Send+0x264>)
 8011da4:	4a4f      	ldr	r2, [pc, #316]	; (8011ee4 <Send+0x268>)
 8011da6:	589b      	ldr	r3, [r3, r2]
 8011da8:	22f4      	movs	r2, #244	; 0xf4
 8011daa:	589a      	ldr	r2, [r3, r2]
 8011dac:	0008      	movs	r0, r1
 8011dae:	183b      	adds	r3, r7, r0
 8011db0:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011db2:	4a4b      	ldr	r2, [pc, #300]	; (8011ee0 <Send+0x264>)
 8011db4:	23fd      	movs	r3, #253	; 0xfd
 8011db6:	009b      	lsls	r3, r3, #2
 8011db8:	5ad2      	ldrh	r2, [r2, r3]
 8011dba:	183b      	adds	r3, r7, r0
 8011dbc:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8011dbe:	4b48      	ldr	r3, [pc, #288]	; (8011ee0 <Send+0x264>)
 8011dc0:	4a49      	ldr	r2, [pc, #292]	; (8011ee8 <Send+0x26c>)
 8011dc2:	5a9a      	ldrh	r2, [r3, r2]
 8011dc4:	183b      	adds	r3, r7, r0
 8011dc6:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011dc8:	4b45      	ldr	r3, [pc, #276]	; (8011ee0 <Send+0x264>)
 8011dca:	4a46      	ldr	r2, [pc, #280]	; (8011ee4 <Send+0x268>)
 8011dcc:	589b      	ldr	r3, [r3, r2]
 8011dce:	22f9      	movs	r2, #249	; 0xf9
 8011dd0:	569a      	ldrsb	r2, [r3, r2]
 8011dd2:	183b      	adds	r3, r7, r0
 8011dd4:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011dd6:	4b42      	ldr	r3, [pc, #264]	; (8011ee0 <Send+0x264>)
 8011dd8:	4a42      	ldr	r2, [pc, #264]	; (8011ee4 <Send+0x268>)
 8011dda:	589b      	ldr	r3, [r3, r2]
 8011ddc:	22f8      	movs	r2, #248	; 0xf8
 8011dde:	569a      	ldrsb	r2, [r3, r2]
 8011de0:	183b      	adds	r3, r7, r0
 8011de2:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011de4:	4b3e      	ldr	r3, [pc, #248]	; (8011ee0 <Send+0x264>)
 8011de6:	4a3f      	ldr	r2, [pc, #252]	; (8011ee4 <Send+0x268>)
 8011de8:	589a      	ldr	r2, [r3, r2]
 8011dea:	2396      	movs	r3, #150	; 0x96
 8011dec:	005b      	lsls	r3, r3, #1
 8011dee:	5cd2      	ldrb	r2, [r2, r3]
 8011df0:	183b      	adds	r3, r7, r0
 8011df2:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8011df4:	4b3a      	ldr	r3, [pc, #232]	; (8011ee0 <Send+0x264>)
 8011df6:	4a3b      	ldr	r2, [pc, #236]	; (8011ee4 <Send+0x268>)
 8011df8:	589b      	ldr	r3, [r3, r2]
 8011dfa:	781a      	ldrb	r2, [r3, #0]
 8011dfc:	183b      	adds	r3, r7, r0
 8011dfe:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8011e00:	4b37      	ldr	r3, [pc, #220]	; (8011ee0 <Send+0x264>)
 8011e02:	4a38      	ldr	r2, [pc, #224]	; (8011ee4 <Send+0x268>)
 8011e04:	589b      	ldr	r3, [r3, r2]
 8011e06:	33f9      	adds	r3, #249	; 0xf9
 8011e08:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 8011e0a:	4b35      	ldr	r3, [pc, #212]	; (8011ee0 <Send+0x264>)
 8011e0c:	4a35      	ldr	r2, [pc, #212]	; (8011ee4 <Send+0x268>)
 8011e0e:	589b      	ldr	r3, [r3, r2]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8011e10:	33f8      	adds	r3, #248	; 0xf8
 8011e12:	001a      	movs	r2, r3
 8011e14:	2328      	movs	r3, #40	; 0x28
 8011e16:	18fb      	adds	r3, r7, r3
 8011e18:	1838      	adds	r0, r7, r0
 8011e1a:	f003 f829 	bl	8014e70 <LoRaMacAdrCalcNext>
 8011e1e:	0003      	movs	r3, r0
 8011e20:	0019      	movs	r1, r3
 8011e22:	0026      	movs	r6, r4
 8011e24:	193b      	adds	r3, r7, r4
 8011e26:	2201      	movs	r2, #1
 8011e28:	400a      	ands	r2, r1
 8011e2a:	0190      	lsls	r0, r2, #6
 8011e2c:	781a      	ldrb	r2, [r3, #0]
 8011e2e:	2140      	movs	r1, #64	; 0x40
 8011e30:	438a      	bics	r2, r1
 8011e32:	1c11      	adds	r1, r2, #0
 8011e34:	1c02      	adds	r2, r0, #0
 8011e36:	430a      	orrs	r2, r1
 8011e38:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8011e3a:	232f      	movs	r3, #47	; 0x2f
 8011e3c:	18fc      	adds	r4, r7, r3
 8011e3e:	687d      	ldr	r5, [r7, #4]
 8011e40:	220b      	movs	r2, #11
 8011e42:	18bb      	adds	r3, r7, r2
 8011e44:	781a      	ldrb	r2, [r3, #0]
 8011e46:	19b9      	adds	r1, r7, r6
 8011e48:	68f8      	ldr	r0, [r7, #12]
 8011e4a:	2608      	movs	r6, #8
 8011e4c:	19bb      	adds	r3, r7, r6
 8011e4e:	881b      	ldrh	r3, [r3, #0]
 8011e50:	9300      	str	r3, [sp, #0]
 8011e52:	002b      	movs	r3, r5
 8011e54:	f000 fc86 	bl	8012764 <PrepareFrame>
 8011e58:	0003      	movs	r3, r0
 8011e5a:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011e5c:	232f      	movs	r3, #47	; 0x2f
 8011e5e:	18fb      	adds	r3, r7, r3
 8011e60:	781b      	ldrb	r3, [r3, #0]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d004      	beq.n	8011e70 <Send+0x1f4>
 8011e66:	232f      	movs	r3, #47	; 0x2f
 8011e68:	18fb      	adds	r3, r7, r3
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	2b0a      	cmp	r3, #10
 8011e6e:	d106      	bne.n	8011e7e <Send+0x202>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( false );
 8011e70:	232f      	movs	r3, #47	; 0x2f
 8011e72:	18fc      	adds	r4, r7, r3
 8011e74:	2000      	movs	r0, #0
 8011e76:	f000 f89f 	bl	8011fb8 <ScheduleTx>
 8011e7a:	0003      	movs	r3, r0
 8011e7c:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011e7e:	232f      	movs	r3, #47	; 0x2f
 8011e80:	18fb      	adds	r3, r7, r3
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d010      	beq.n	8011eaa <Send+0x22e>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8011e88:	4b15      	ldr	r3, [pc, #84]	; (8011ee0 <Send+0x264>)
 8011e8a:	4a16      	ldr	r2, [pc, #88]	; (8011ee4 <Send+0x268>)
 8011e8c:	589b      	ldr	r3, [r3, r2]
 8011e8e:	222e      	movs	r2, #46	; 0x2e
 8011e90:	18ba      	adds	r2, r7, r2
 8011e92:	21f9      	movs	r1, #249	; 0xf9
 8011e94:	7812      	ldrb	r2, [r2, #0]
 8011e96:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 8011e98:	4b11      	ldr	r3, [pc, #68]	; (8011ee0 <Send+0x264>)
 8011e9a:	4a12      	ldr	r2, [pc, #72]	; (8011ee4 <Send+0x268>)
 8011e9c:	589b      	ldr	r3, [r3, r2]
 8011e9e:	222d      	movs	r2, #45	; 0x2d
 8011ea0:	18ba      	adds	r2, r7, r2
 8011ea2:	21f8      	movs	r1, #248	; 0xf8
 8011ea4:	7812      	ldrb	r2, [r2, #0]
 8011ea6:	545a      	strb	r2, [r3, r1]
 8011ea8:	e012      	b.n	8011ed0 <Send+0x254>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 8011eaa:	4b0d      	ldr	r3, [pc, #52]	; (8011ee0 <Send+0x264>)
 8011eac:	4a0d      	ldr	r2, [pc, #52]	; (8011ee4 <Send+0x268>)
 8011eae:	589a      	ldr	r2, [r3, r2]
 8011eb0:	23e0      	movs	r3, #224	; 0xe0
 8011eb2:	005b      	lsls	r3, r3, #1
 8011eb4:	2100      	movs	r1, #0
 8011eb6:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8011eb8:	4b09      	ldr	r3, [pc, #36]	; (8011ee0 <Send+0x264>)
 8011eba:	4a0a      	ldr	r2, [pc, #40]	; (8011ee4 <Send+0x268>)
 8011ebc:	589b      	ldr	r3, [r3, r2]
 8011ebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ec0:	21f4      	movs	r1, #244	; 0xf4
 8011ec2:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8011ec4:	f003 faca 	bl	801545c <LoRaMacCommandsRemoveNoneStickyCmds>
 8011ec8:	1e03      	subs	r3, r0, #0
 8011eca:	d001      	beq.n	8011ed0 <Send+0x254>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011ecc:	2313      	movs	r3, #19
 8011ece:	e002      	b.n	8011ed6 <Send+0x25a>
        }
    }
    return status;
 8011ed0:	232f      	movs	r3, #47	; 0x2f
 8011ed2:	18fb      	adds	r3, r7, r3
 8011ed4:	781b      	ldrb	r3, [r3, #0]
}
 8011ed6:	0018      	movs	r0, r3
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	b00d      	add	sp, #52	; 0x34
 8011edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ede:	46c0      	nop			; (mov r8, r8)
 8011ee0:	200008ec 	.word	0x200008ec
 8011ee4:	00000484 	.word	0x00000484
 8011ee8:	000003f6 	.word	0x000003f6

08011eec <SendReJoinReq>:

LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8011eec:	b5b0      	push	{r4, r5, r7, lr}
 8011eee:	b084      	sub	sp, #16
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	0002      	movs	r2, r0
 8011ef4:	1dfb      	adds	r3, r7, #7
 8011ef6:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011ef8:	230e      	movs	r3, #14
 8011efa:	18fb      	adds	r3, r7, r3
 8011efc:	2200      	movs	r2, #0
 8011efe:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8011f00:	230c      	movs	r3, #12
 8011f02:	18fb      	adds	r3, r7, r3
 8011f04:	2200      	movs	r2, #0
 8011f06:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 8011f08:	230f      	movs	r3, #15
 8011f0a:	18fb      	adds	r3, r7, r3
 8011f0c:	2201      	movs	r2, #1
 8011f0e:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 8011f10:	1dfb      	adds	r3, r7, #7
 8011f12:	781b      	ldrb	r3, [r3, #0]
 8011f14:	2bff      	cmp	r3, #255	; 0xff
 8011f16:	d132      	bne.n	8011f7e <SendReJoinReq+0x92>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8011f18:	2000      	movs	r0, #0
 8011f1a:	f7fe ff27 	bl	8010d6c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8011f1e:	4a22      	ldr	r2, [pc, #136]	; (8011fa8 <SendReJoinReq+0xbc>)
 8011f20:	2382      	movs	r3, #130	; 0x82
 8011f22:	005b      	lsls	r3, r3, #1
 8011f24:	2100      	movs	r1, #0
 8011f26:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8011f28:	4a1f      	ldr	r2, [pc, #124]	; (8011fa8 <SendReJoinReq+0xbc>)
 8011f2a:	2384      	movs	r3, #132	; 0x84
 8011f2c:	005b      	lsls	r3, r3, #1
 8011f2e:	491f      	ldr	r1, [pc, #124]	; (8011fac <SendReJoinReq+0xc0>)
 8011f30:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011f32:	4a1d      	ldr	r2, [pc, #116]	; (8011fa8 <SendReJoinReq+0xbc>)
 8011f34:	2386      	movs	r3, #134	; 0x86
 8011f36:	005b      	lsls	r3, r3, #1
 8011f38:	21ff      	movs	r1, #255	; 0xff
 8011f3a:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8011f3c:	200c      	movs	r0, #12
 8011f3e:	183b      	adds	r3, r7, r0
 8011f40:	781a      	ldrb	r2, [r3, #0]
 8011f42:	211f      	movs	r1, #31
 8011f44:	400a      	ands	r2, r1
 8011f46:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8011f48:	183b      	adds	r3, r7, r0
 8011f4a:	7819      	ldrb	r1, [r3, #0]
 8011f4c:	4a16      	ldr	r2, [pc, #88]	; (8011fa8 <SendReJoinReq+0xbc>)
 8011f4e:	230e      	movs	r3, #14
 8011f50:	33ff      	adds	r3, #255	; 0xff
 8011f52:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8011f54:	f7fd fa80 	bl	800f458 <SecureElementGetJoinEui>
 8011f58:	0001      	movs	r1, r0
 8011f5a:	4b15      	ldr	r3, [pc, #84]	; (8011fb0 <SendReJoinReq+0xc4>)
 8011f5c:	2208      	movs	r2, #8
 8011f5e:	0018      	movs	r0, r3
 8011f60:	f009 fb04 	bl	801b56c <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8011f64:	f7fd fa54 	bl	800f410 <SecureElementGetDevEui>
 8011f68:	0001      	movs	r1, r0
 8011f6a:	4b12      	ldr	r3, [pc, #72]	; (8011fb4 <SendReJoinReq+0xc8>)
 8011f6c:	2208      	movs	r2, #8
 8011f6e:	0018      	movs	r0, r3
 8011f70:	f009 fafc 	bl	801b56c <memcpy1>

            allowDelayedTx = false;
 8011f74:	230f      	movs	r3, #15
 8011f76:	18fb      	adds	r3, r7, r3
 8011f78:	2200      	movs	r2, #0
 8011f7a:	701a      	strb	r2, [r3, #0]

            break;
 8011f7c:	e004      	b.n	8011f88 <SendReJoinReq+0x9c>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011f7e:	230e      	movs	r3, #14
 8011f80:	18fb      	adds	r3, r7, r3
 8011f82:	2202      	movs	r2, #2
 8011f84:	701a      	strb	r2, [r3, #0]
            break;
 8011f86:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011f88:	250e      	movs	r5, #14
 8011f8a:	197c      	adds	r4, r7, r5
 8011f8c:	230f      	movs	r3, #15
 8011f8e:	18fb      	adds	r3, r7, r3
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	0018      	movs	r0, r3
 8011f94:	f000 f810 	bl	8011fb8 <ScheduleTx>
 8011f98:	0003      	movs	r3, r0
 8011f9a:	7023      	strb	r3, [r4, #0]
    return status;
 8011f9c:	197b      	adds	r3, r7, r5
 8011f9e:	781b      	ldrb	r3, [r3, #0]
}
 8011fa0:	0018      	movs	r0, r3
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	b004      	add	sp, #16
 8011fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8011fa8:	200008ec 	.word	0x200008ec
 8011fac:	200008ee 	.word	0x200008ee
 8011fb0:	200009fa 	.word	0x200009fa
 8011fb4:	20000a02 	.word	0x20000a02

08011fb8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fba:	b08b      	sub	sp, #44	; 0x2c
 8011fbc:	af02      	add	r7, sp, #8
 8011fbe:	0002      	movs	r2, r0
 8011fc0:	1dfb      	adds	r3, r7, #7
 8011fc2:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011fc4:	231f      	movs	r3, #31
 8011fc6:	18fb      	adds	r3, r7, r3
 8011fc8:	2203      	movs	r2, #3
 8011fca:	701a      	strb	r2, [r3, #0]
    TimerTime_t dutyCycleTimeOff = 0;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	61bb      	str	r3, [r7, #24]
    NextChanParams_t nextChan;
    size_t macCmdsSize = 0;
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	60bb      	str	r3, [r7, #8]

    // Update back-off
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8011fd4:	4ba7      	ldr	r3, [pc, #668]	; (8012274 <ScheduleTx+0x2bc>)
 8011fd6:	4aa8      	ldr	r2, [pc, #672]	; (8012278 <ScheduleTx+0x2c0>)
 8011fd8:	589a      	ldr	r2, [r3, r2]
 8011fda:	239f      	movs	r3, #159	; 0x9f
 8011fdc:	005b      	lsls	r3, r3, #1
 8011fde:	5cd3      	ldrb	r3, [r2, r3]
 8011fe0:	0018      	movs	r0, r3
 8011fe2:	f000 f9c5 	bl	8012370 <CalculateBackOff>

    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8011fe6:	4ba3      	ldr	r3, [pc, #652]	; (8012274 <ScheduleTx+0x2bc>)
 8011fe8:	4aa3      	ldr	r2, [pc, #652]	; (8012278 <ScheduleTx+0x2c0>)
 8011fea:	589a      	ldr	r2, [r3, r2]
 8011fec:	23e4      	movs	r3, #228	; 0xe4
 8011fee:	005b      	lsls	r3, r3, #1
 8011ff0:	58d2      	ldr	r2, [r2, r3]
 8011ff2:	210c      	movs	r1, #12
 8011ff4:	187b      	adds	r3, r7, r1
 8011ff6:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011ff8:	4b9e      	ldr	r3, [pc, #632]	; (8012274 <ScheduleTx+0x2bc>)
 8011ffa:	4a9f      	ldr	r2, [pc, #636]	; (8012278 <ScheduleTx+0x2c0>)
 8011ffc:	589b      	ldr	r3, [r3, r2]
 8011ffe:	22f9      	movs	r2, #249	; 0xf9
 8012000:	569a      	ldrsb	r2, [r3, r2]
 8012002:	187b      	adds	r3, r7, r1
 8012004:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8012006:	4b9b      	ldr	r3, [pc, #620]	; (8012274 <ScheduleTx+0x2bc>)
 8012008:	4a9b      	ldr	r2, [pc, #620]	; (8012278 <ScheduleTx+0x2c0>)
 801200a:	589a      	ldr	r2, [r3, r2]
 801200c:	233e      	movs	r3, #62	; 0x3e
 801200e:	33ff      	adds	r3, #255	; 0xff
 8012010:	5cd2      	ldrb	r2, [r2, r3]
 8012012:	187b      	adds	r3, r7, r1
 8012014:	729a      	strb	r2, [r3, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8012016:	4b97      	ldr	r3, [pc, #604]	; (8012274 <ScheduleTx+0x2bc>)
 8012018:	4a97      	ldr	r2, [pc, #604]	; (8012278 <ScheduleTx+0x2c0>)
 801201a:	589a      	ldr	r2, [r3, r2]
 801201c:	23ea      	movs	r3, #234	; 0xea
 801201e:	005b      	lsls	r3, r3, #1
 8012020:	5cd3      	ldrb	r3, [r2, r3]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d104      	bne.n	8012030 <ScheduleTx+0x78>
    {
        nextChan.Joined = false;
 8012026:	230c      	movs	r3, #12
 8012028:	18fb      	adds	r3, r7, r3
 801202a:	2200      	movs	r2, #0
 801202c:	725a      	strb	r2, [r3, #9]
 801202e:	e003      	b.n	8012038 <ScheduleTx+0x80>
    }
    else
    {
        nextChan.Joined = true;
 8012030:	230c      	movs	r3, #12
 8012032:	18fb      	adds	r3, r7, r3
 8012034:	2201      	movs	r2, #1
 8012036:	725a      	strb	r2, [r3, #9]
    }
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8012038:	4b8e      	ldr	r3, [pc, #568]	; (8012274 <ScheduleTx+0x2bc>)
 801203a:	4a8f      	ldr	r2, [pc, #572]	; (8012278 <ScheduleTx+0x2c0>)
 801203c:	589a      	ldr	r2, [r3, r2]
 801203e:	23e2      	movs	r3, #226	; 0xe2
 8012040:	005b      	lsls	r3, r3, #1
 8012042:	58d2      	ldr	r2, [r2, r3]
 8012044:	210c      	movs	r1, #12
 8012046:	187b      	adds	r3, r7, r1
 8012048:	605a      	str	r2, [r3, #4]

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 801204a:	4b8a      	ldr	r3, [pc, #552]	; (8012274 <ScheduleTx+0x2bc>)
 801204c:	4a8a      	ldr	r2, [pc, #552]	; (8012278 <ScheduleTx+0x2c0>)
 801204e:	589b      	ldr	r3, [r3, r2]
 8012050:	7818      	ldrb	r0, [r3, #0]
 8012052:	4b88      	ldr	r3, [pc, #544]	; (8012274 <ScheduleTx+0x2bc>)
 8012054:	4a88      	ldr	r2, [pc, #544]	; (8012278 <ScheduleTx+0x2c0>)
 8012056:	589b      	ldr	r3, [r3, r2]
 8012058:	33c9      	adds	r3, #201	; 0xc9
 801205a:	33ff      	adds	r3, #255	; 0xff
 801205c:	261f      	movs	r6, #31
 801205e:	19bc      	adds	r4, r7, r6
 8012060:	2218      	movs	r2, #24
 8012062:	18bd      	adds	r5, r7, r2
 8012064:	4a85      	ldr	r2, [pc, #532]	; (801227c <ScheduleTx+0x2c4>)
 8012066:	1879      	adds	r1, r7, r1
 8012068:	9300      	str	r3, [sp, #0]
 801206a:	002b      	movs	r3, r5
 801206c:	f005 fbb6 	bl	80177dc <RegionNextChannel>
 8012070:	0003      	movs	r3, r0
 8012072:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 8012074:	19bb      	adds	r3, r7, r6
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d026      	beq.n	80120ca <ScheduleTx+0x112>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 801207c:	231f      	movs	r3, #31
 801207e:	18fb      	adds	r3, r7, r3
 8012080:	781b      	ldrb	r3, [r3, #0]
 8012082:	2b0b      	cmp	r3, #11
 8012084:	d11d      	bne.n	80120c2 <ScheduleTx+0x10a>
 8012086:	1dfb      	adds	r3, r7, #7
 8012088:	781b      	ldrb	r3, [r3, #0]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d019      	beq.n	80120c2 <ScheduleTx+0x10a>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( dutyCycleTimeOff != 0 )
 801208e:	69bb      	ldr	r3, [r7, #24]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d014      	beq.n	80120be <ScheduleTx+0x106>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8012094:	4a77      	ldr	r2, [pc, #476]	; (8012274 <ScheduleTx+0x2bc>)
 8012096:	23d0      	movs	r3, #208	; 0xd0
 8012098:	009b      	lsls	r3, r3, #2
 801209a:	58d3      	ldr	r3, [r2, r3]
 801209c:	2220      	movs	r2, #32
 801209e:	431a      	orrs	r2, r3
 80120a0:	0011      	movs	r1, r2
 80120a2:	4a74      	ldr	r2, [pc, #464]	; (8012274 <ScheduleTx+0x2bc>)
 80120a4:	23d0      	movs	r3, #208	; 0xd0
 80120a6:	009b      	lsls	r3, r3, #2
 80120a8:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 80120aa:	69ba      	ldr	r2, [r7, #24]
 80120ac:	4b74      	ldr	r3, [pc, #464]	; (8012280 <ScheduleTx+0x2c8>)
 80120ae:	0011      	movs	r1, r2
 80120b0:	0018      	movs	r0, r3
 80120b2:	f009 f85d 	bl	801b170 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 80120b6:	4b72      	ldr	r3, [pc, #456]	; (8012280 <ScheduleTx+0x2c8>)
 80120b8:	0018      	movs	r0, r3
 80120ba:	f008 ff07 	bl	801aecc <TimerStart>
            }
            return LORAMAC_STATUS_OK;
 80120be:	2300      	movs	r3, #0
 80120c0:	e0d3      	b.n	801226a <ScheduleTx+0x2b2>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 80120c2:	231f      	movs	r3, #31
 80120c4:	18fb      	adds	r3, r7, r3
 80120c6:	781b      	ldrb	r3, [r3, #0]
 80120c8:	e0cf      	b.n	801226a <ScheduleTx+0x2b2>
        }
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80120ca:	4b6a      	ldr	r3, [pc, #424]	; (8012274 <ScheduleTx+0x2bc>)
 80120cc:	4a6a      	ldr	r2, [pc, #424]	; (8012278 <ScheduleTx+0x2c0>)
 80120ce:	589b      	ldr	r3, [r3, r2]
 80120d0:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 80120d2:	4b68      	ldr	r3, [pc, #416]	; (8012274 <ScheduleTx+0x2bc>)
 80120d4:	4a68      	ldr	r2, [pc, #416]	; (8012278 <ScheduleTx+0x2c0>)
 80120d6:	589b      	ldr	r3, [r3, r2]
 80120d8:	7818      	ldrb	r0, [r3, #0]
 80120da:	4b66      	ldr	r3, [pc, #408]	; (8012274 <ScheduleTx+0x2bc>)
 80120dc:	4a66      	ldr	r2, [pc, #408]	; (8012278 <ScheduleTx+0x2c0>)
 80120de:	589a      	ldr	r2, [r3, r2]
 80120e0:	232e      	movs	r3, #46	; 0x2e
 80120e2:	33ff      	adds	r3, #255	; 0xff
 80120e4:	5cd1      	ldrb	r1, [r2, r3]
 80120e6:	4b63      	ldr	r3, [pc, #396]	; (8012274 <ScheduleTx+0x2bc>)
 80120e8:	4a63      	ldr	r2, [pc, #396]	; (8012278 <ScheduleTx+0x2c0>)
 80120ea:	589b      	ldr	r3, [r3, r2]
 80120ec:	22f9      	movs	r2, #249	; 0xf9
 80120ee:	569d      	ldrsb	r5, [r3, r2]
 80120f0:	4b60      	ldr	r3, [pc, #384]	; (8012274 <ScheduleTx+0x2bc>)
 80120f2:	4a61      	ldr	r2, [pc, #388]	; (8012278 <ScheduleTx+0x2c0>)
 80120f4:	589a      	ldr	r2, [r3, r2]
 80120f6:	231a      	movs	r3, #26
 80120f8:	33ff      	adds	r3, #255	; 0xff
 80120fa:	5cd3      	ldrb	r3, [r2, r3]
 80120fc:	b25b      	sxtb	r3, r3
 80120fe:	002a      	movs	r2, r5
 8012100:	f005 fb9c 	bl	801783c <RegionApplyDrOffset>
 8012104:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8012106:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8012108:	4b5a      	ldr	r3, [pc, #360]	; (8012274 <ScheduleTx+0x2bc>)
 801210a:	4a5b      	ldr	r2, [pc, #364]	; (8012278 <ScheduleTx+0x2c0>)
 801210c:	589a      	ldr	r2, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801210e:	2380      	movs	r3, #128	; 0x80
 8012110:	005b      	lsls	r3, r3, #1
 8012112:	5cd0      	ldrb	r0, [r2, r3]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8012114:	4b57      	ldr	r3, [pc, #348]	; (8012274 <ScheduleTx+0x2bc>)
 8012116:	4a58      	ldr	r2, [pc, #352]	; (8012278 <ScheduleTx+0x2c0>)
 8012118:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801211a:	22fc      	movs	r2, #252	; 0xfc
 801211c:	589a      	ldr	r2, [r3, r2]
 801211e:	4b59      	ldr	r3, [pc, #356]	; (8012284 <ScheduleTx+0x2cc>)
 8012120:	9300      	str	r3, [sp, #0]
 8012122:	0013      	movs	r3, r2
 8012124:	0002      	movs	r2, r0
 8012126:	0020      	movs	r0, r4
 8012128:	f005 fa51 	bl	80175ce <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801212c:	4b51      	ldr	r3, [pc, #324]	; (8012274 <ScheduleTx+0x2bc>)
 801212e:	4a52      	ldr	r2, [pc, #328]	; (8012278 <ScheduleTx+0x2c0>)
 8012130:	589b      	ldr	r3, [r3, r2]
 8012132:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8012134:	4b4f      	ldr	r3, [pc, #316]	; (8012274 <ScheduleTx+0x2bc>)
 8012136:	4a50      	ldr	r2, [pc, #320]	; (8012278 <ScheduleTx+0x2c0>)
 8012138:	589a      	ldr	r2, [r3, r2]
 801213a:	2390      	movs	r3, #144	; 0x90
 801213c:	005b      	lsls	r3, r3, #1
 801213e:	5cd3      	ldrb	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8012140:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8012142:	4b4c      	ldr	r3, [pc, #304]	; (8012274 <ScheduleTx+0x2bc>)
 8012144:	4a4c      	ldr	r2, [pc, #304]	; (8012278 <ScheduleTx+0x2c0>)
 8012146:	589a      	ldr	r2, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8012148:	2380      	movs	r3, #128	; 0x80
 801214a:	005b      	lsls	r3, r3, #1
 801214c:	5cd4      	ldrb	r4, [r2, r3]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 801214e:	4b49      	ldr	r3, [pc, #292]	; (8012274 <ScheduleTx+0x2bc>)
 8012150:	4a49      	ldr	r2, [pc, #292]	; (8012278 <ScheduleTx+0x2c0>)
 8012152:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8012154:	22fc      	movs	r2, #252	; 0xfc
 8012156:	589a      	ldr	r2, [r3, r2]
 8012158:	4b4b      	ldr	r3, [pc, #300]	; (8012288 <ScheduleTx+0x2d0>)
 801215a:	9300      	str	r3, [sp, #0]
 801215c:	0013      	movs	r3, r2
 801215e:	0022      	movs	r2, r4
 8012160:	f005 fa35 	bl	80175ce <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8012164:	4b43      	ldr	r3, [pc, #268]	; (8012274 <ScheduleTx+0x2bc>)
 8012166:	4a44      	ldr	r2, [pc, #272]	; (8012278 <ScheduleTx+0x2c0>)
 8012168:	589a      	ldr	r2, [r3, r2]
 801216a:	23ea      	movs	r3, #234	; 0xea
 801216c:	005b      	lsls	r3, r3, #1
 801216e:	5cd3      	ldrb	r3, [r2, r3]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d11e      	bne.n	80121b2 <ScheduleTx+0x1fa>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012174:	4b3f      	ldr	r3, [pc, #252]	; (8012274 <ScheduleTx+0x2bc>)
 8012176:	4a40      	ldr	r2, [pc, #256]	; (8012278 <ScheduleTx+0x2c0>)
 8012178:	589a      	ldr	r2, [r3, r2]
 801217a:	2388      	movs	r3, #136	; 0x88
 801217c:	005b      	lsls	r3, r3, #1
 801217e:	58d3      	ldr	r3, [r2, r3]
 8012180:	493c      	ldr	r1, [pc, #240]	; (8012274 <ScheduleTx+0x2bc>)
 8012182:	22f1      	movs	r2, #241	; 0xf1
 8012184:	0092      	lsls	r2, r2, #2
 8012186:	588a      	ldr	r2, [r1, r2]
 8012188:	1899      	adds	r1, r3, r2
 801218a:	4a3a      	ldr	r2, [pc, #232]	; (8012274 <ScheduleTx+0x2bc>)
 801218c:	23ec      	movs	r3, #236	; 0xec
 801218e:	009b      	lsls	r3, r3, #2
 8012190:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012192:	4b38      	ldr	r3, [pc, #224]	; (8012274 <ScheduleTx+0x2bc>)
 8012194:	4a38      	ldr	r2, [pc, #224]	; (8012278 <ScheduleTx+0x2c0>)
 8012196:	589a      	ldr	r2, [r3, r2]
 8012198:	238a      	movs	r3, #138	; 0x8a
 801219a:	005b      	lsls	r3, r3, #1
 801219c:	58d3      	ldr	r3, [r2, r3]
 801219e:	4935      	ldr	r1, [pc, #212]	; (8012274 <ScheduleTx+0x2bc>)
 80121a0:	22f6      	movs	r2, #246	; 0xf6
 80121a2:	0092      	lsls	r2, r2, #2
 80121a4:	588a      	ldr	r2, [r1, r2]
 80121a6:	1899      	adds	r1, r3, r2
 80121a8:	4a32      	ldr	r2, [pc, #200]	; (8012274 <ScheduleTx+0x2bc>)
 80121aa:	23ed      	movs	r3, #237	; 0xed
 80121ac:	009b      	lsls	r3, r3, #2
 80121ae:	50d1      	str	r1, [r2, r3]
 80121b0:	e03c      	b.n	801222c <ScheduleTx+0x274>
    }
    else
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80121b2:	2308      	movs	r3, #8
 80121b4:	18fb      	adds	r3, r7, r3
 80121b6:	0018      	movs	r0, r3
 80121b8:	f003 f99c 	bl	80154f4 <LoRaMacCommandsGetSizeSerializedCmds>
 80121bc:	1e03      	subs	r3, r0, #0
 80121be:	d001      	beq.n	80121c4 <ScheduleTx+0x20c>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80121c0:	2313      	movs	r3, #19
 80121c2:	e052      	b.n	801226a <ScheduleTx+0x2b2>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 80121c4:	4b2b      	ldr	r3, [pc, #172]	; (8012274 <ScheduleTx+0x2bc>)
 80121c6:	4a31      	ldr	r2, [pc, #196]	; (801228c <ScheduleTx+0x2d4>)
 80121c8:	5c98      	ldrb	r0, [r3, r2]
 80121ca:	4b2a      	ldr	r3, [pc, #168]	; (8012274 <ScheduleTx+0x2bc>)
 80121cc:	4a2a      	ldr	r2, [pc, #168]	; (8012278 <ScheduleTx+0x2c0>)
 80121ce:	589b      	ldr	r3, [r3, r2]
 80121d0:	22f9      	movs	r2, #249	; 0xf9
 80121d2:	569b      	ldrsb	r3, [r3, r2]
 80121d4:	68ba      	ldr	r2, [r7, #8]
 80121d6:	b2d2      	uxtb	r2, r2
 80121d8:	0019      	movs	r1, r3
 80121da:	f7fe ff4d 	bl	8011078 <ValidatePayloadLength>
 80121de:	0003      	movs	r3, r0
 80121e0:	001a      	movs	r2, r3
 80121e2:	2301      	movs	r3, #1
 80121e4:	4053      	eors	r3, r2
 80121e6:	b2db      	uxtb	r3, r3
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d001      	beq.n	80121f0 <ScheduleTx+0x238>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80121ec:	2308      	movs	r3, #8
 80121ee:	e03c      	b.n	801226a <ScheduleTx+0x2b2>
        }
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80121f0:	4b20      	ldr	r3, [pc, #128]	; (8012274 <ScheduleTx+0x2bc>)
 80121f2:	4a21      	ldr	r2, [pc, #132]	; (8012278 <ScheduleTx+0x2c0>)
 80121f4:	589a      	ldr	r2, [r3, r2]
 80121f6:	2384      	movs	r3, #132	; 0x84
 80121f8:	005b      	lsls	r3, r3, #1
 80121fa:	58d3      	ldr	r3, [r2, r3]
 80121fc:	491d      	ldr	r1, [pc, #116]	; (8012274 <ScheduleTx+0x2bc>)
 80121fe:	22f1      	movs	r2, #241	; 0xf1
 8012200:	0092      	lsls	r2, r2, #2
 8012202:	588a      	ldr	r2, [r1, r2]
 8012204:	1899      	adds	r1, r3, r2
 8012206:	4a1b      	ldr	r2, [pc, #108]	; (8012274 <ScheduleTx+0x2bc>)
 8012208:	23ec      	movs	r3, #236	; 0xec
 801220a:	009b      	lsls	r3, r3, #2
 801220c:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801220e:	4b19      	ldr	r3, [pc, #100]	; (8012274 <ScheduleTx+0x2bc>)
 8012210:	4a19      	ldr	r2, [pc, #100]	; (8012278 <ScheduleTx+0x2c0>)
 8012212:	589a      	ldr	r2, [r3, r2]
 8012214:	2386      	movs	r3, #134	; 0x86
 8012216:	005b      	lsls	r3, r3, #1
 8012218:	58d3      	ldr	r3, [r2, r3]
 801221a:	4916      	ldr	r1, [pc, #88]	; (8012274 <ScheduleTx+0x2bc>)
 801221c:	22f6      	movs	r2, #246	; 0xf6
 801221e:	0092      	lsls	r2, r2, #2
 8012220:	588a      	ldr	r2, [r1, r2]
 8012222:	1899      	adds	r1, r3, r2
 8012224:	4a13      	ldr	r2, [pc, #76]	; (8012274 <ScheduleTx+0x2bc>)
 8012226:	23ed      	movs	r3, #237	; 0xed
 8012228:	009b      	lsls	r3, r3, #2
 801222a:	50d1      	str	r1, [r2, r3]
    }

    // Secure frame
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 801222c:	4b11      	ldr	r3, [pc, #68]	; (8012274 <ScheduleTx+0x2bc>)
 801222e:	4a12      	ldr	r2, [pc, #72]	; (8012278 <ScheduleTx+0x2c0>)
 8012230:	589b      	ldr	r3, [r3, r2]
 8012232:	22f9      	movs	r2, #249	; 0xf9
 8012234:	569b      	ldrsb	r3, [r3, r2]
 8012236:	b2d8      	uxtb	r0, r3
 8012238:	4b0e      	ldr	r3, [pc, #56]	; (8012274 <ScheduleTx+0x2bc>)
 801223a:	4a15      	ldr	r2, [pc, #84]	; (8012290 <ScheduleTx+0x2d8>)
 801223c:	5c9b      	ldrb	r3, [r3, r2]
 801223e:	251e      	movs	r5, #30
 8012240:	197c      	adds	r4, r7, r5
 8012242:	0019      	movs	r1, r3
 8012244:	f000 f826 	bl	8012294 <SecureFrame>
 8012248:	0003      	movs	r3, r0
 801224a:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_STATUS_OK )
 801224c:	197b      	adds	r3, r7, r5
 801224e:	781b      	ldrb	r3, [r3, #0]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d003      	beq.n	801225c <ScheduleTx+0x2a4>
    {
        return retval;
 8012254:	231e      	movs	r3, #30
 8012256:	18fb      	adds	r3, r7, r3
 8012258:	781b      	ldrb	r3, [r3, #0]
 801225a:	e006      	b.n	801226a <ScheduleTx+0x2b2>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 801225c:	4b05      	ldr	r3, [pc, #20]	; (8012274 <ScheduleTx+0x2bc>)
 801225e:	4a0c      	ldr	r2, [pc, #48]	; (8012290 <ScheduleTx+0x2d8>)
 8012260:	5c9b      	ldrb	r3, [r3, r2]
 8012262:	0018      	movs	r0, r3
 8012264:	f000 fbce 	bl	8012a04 <SendFrameOnChannel>
 8012268:	0003      	movs	r3, r0
}
 801226a:	0018      	movs	r0, r3
 801226c:	46bd      	mov	sp, r7
 801226e:	b009      	add	sp, #36	; 0x24
 8012270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012272:	46c0      	nop			; (mov r8, r8)
 8012274:	200008ec 	.word	0x200008ec
 8012278:	00000484 	.word	0x00000484
 801227c:	20000d01 	.word	0x20000d01
 8012280:	20000c54 	.word	0x20000c54
 8012284:	20000ca4 	.word	0x20000ca4
 8012288:	20000cb8 	.word	0x20000cb8
 801228c:	00000237 	.word	0x00000237
 8012290:	00000415 	.word	0x00000415

08012294 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8012294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012296:	b085      	sub	sp, #20
 8012298:	af00      	add	r7, sp, #0
 801229a:	0002      	movs	r2, r0
 801229c:	1dfb      	adds	r3, r7, #7
 801229e:	701a      	strb	r2, [r3, #0]
 80122a0:	1dbb      	adds	r3, r7, #6
 80122a2:	1c0a      	adds	r2, r1, #0
 80122a4:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80122a6:	230f      	movs	r3, #15
 80122a8:	18fb      	adds	r3, r7, r3
 80122aa:	2213      	movs	r2, #19
 80122ac:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 80122ae:	2300      	movs	r3, #0
 80122b0:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80122b2:	4a2c      	ldr	r2, [pc, #176]	; (8012364 <SecureFrame+0xd0>)
 80122b4:	2382      	movs	r3, #130	; 0x82
 80122b6:	005b      	lsls	r3, r3, #1
 80122b8:	5cd3      	ldrb	r3, [r2, r3]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d002      	beq.n	80122c4 <SecureFrame+0x30>
 80122be:	2b04      	cmp	r3, #4
 80122c0:	d016      	beq.n	80122f0 <SecureFrame+0x5c>
 80122c2:	e047      	b.n	8012354 <SecureFrame+0xc0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80122c4:	250f      	movs	r5, #15
 80122c6:	197c      	adds	r4, r7, r5
 80122c8:	4b27      	ldr	r3, [pc, #156]	; (8012368 <SecureFrame+0xd4>)
 80122ca:	0018      	movs	r0, r3
 80122cc:	f004 f8ea 	bl	80164a4 <LoRaMacCryptoPrepareJoinRequest>
 80122d0:	0003      	movs	r3, r0
 80122d2:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80122d4:	197b      	adds	r3, r7, r5
 80122d6:	781b      	ldrb	r3, [r3, #0]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d001      	beq.n	80122e0 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80122dc:	2311      	movs	r3, #17
 80122de:	e03c      	b.n	801235a <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80122e0:	4a20      	ldr	r2, [pc, #128]	; (8012364 <SecureFrame+0xd0>)
 80122e2:	2386      	movs	r3, #134	; 0x86
 80122e4:	005b      	lsls	r3, r3, #1
 80122e6:	5cd3      	ldrb	r3, [r2, r3]
 80122e8:	b29a      	uxth	r2, r3
 80122ea:	4b1e      	ldr	r3, [pc, #120]	; (8012364 <SecureFrame+0xd0>)
 80122ec:	801a      	strh	r2, [r3, #0]
            break;
 80122ee:	e033      	b.n	8012358 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80122f0:	2308      	movs	r3, #8
 80122f2:	18fb      	adds	r3, r7, r3
 80122f4:	0018      	movs	r0, r3
 80122f6:	f003 ffcd 	bl	8016294 <LoRaMacCryptoGetFCntUp>
 80122fa:	1e03      	subs	r3, r0, #0
 80122fc:	d001      	beq.n	8012302 <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80122fe:	2312      	movs	r3, #18
 8012300:	e02b      	b.n	801235a <SecureFrame+0xc6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8012302:	4a18      	ldr	r2, [pc, #96]	; (8012364 <SecureFrame+0xd0>)
 8012304:	2382      	movs	r3, #130	; 0x82
 8012306:	00db      	lsls	r3, r3, #3
 8012308:	5cd3      	ldrb	r3, [r2, r3]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d104      	bne.n	8012318 <SecureFrame+0x84>
 801230e:	4b15      	ldr	r3, [pc, #84]	; (8012364 <SecureFrame+0xd0>)
 8012310:	4a16      	ldr	r2, [pc, #88]	; (801236c <SecureFrame+0xd8>)
 8012312:	5c9b      	ldrb	r3, [r3, r2]
 8012314:	2b01      	cmp	r3, #1
 8012316:	d902      	bls.n	801231e <SecureFrame+0x8a>
            {
                fCntUp -= 1;
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	3b01      	subs	r3, #1
 801231c:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 801231e:	68b8      	ldr	r0, [r7, #8]
 8012320:	260f      	movs	r6, #15
 8012322:	19bc      	adds	r4, r7, r6
 8012324:	4d10      	ldr	r5, [pc, #64]	; (8012368 <SecureFrame+0xd4>)
 8012326:	1dbb      	adds	r3, r7, #6
 8012328:	781a      	ldrb	r2, [r3, #0]
 801232a:	1dfb      	adds	r3, r7, #7
 801232c:	7819      	ldrb	r1, [r3, #0]
 801232e:	002b      	movs	r3, r5
 8012330:	f004 fafe 	bl	8016930 <LoRaMacCryptoSecureMessage>
 8012334:	0003      	movs	r3, r0
 8012336:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012338:	19bb      	adds	r3, r7, r6
 801233a:	781b      	ldrb	r3, [r3, #0]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d001      	beq.n	8012344 <SecureFrame+0xb0>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012340:	2311      	movs	r3, #17
 8012342:	e00a      	b.n	801235a <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012344:	4a07      	ldr	r2, [pc, #28]	; (8012364 <SecureFrame+0xd0>)
 8012346:	2386      	movs	r3, #134	; 0x86
 8012348:	005b      	lsls	r3, r3, #1
 801234a:	5cd3      	ldrb	r3, [r2, r3]
 801234c:	b29a      	uxth	r2, r3
 801234e:	4b05      	ldr	r3, [pc, #20]	; (8012364 <SecureFrame+0xd0>)
 8012350:	801a      	strh	r2, [r3, #0]
            break;
 8012352:	e001      	b.n	8012358 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012354:	2303      	movs	r3, #3
 8012356:	e000      	b.n	801235a <SecureFrame+0xc6>
    }
    return LORAMAC_STATUS_OK;
 8012358:	2300      	movs	r3, #0
}
 801235a:	0018      	movs	r0, r3
 801235c:	46bd      	mov	sp, r7
 801235e:	b005      	add	sp, #20
 8012360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012362:	46c0      	nop			; (mov r8, r8)
 8012364:	200008ec 	.word	0x200008ec
 8012368:	200009f4 	.word	0x200009f4
 801236c:	00000412 	.word	0x00000412

08012370 <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
 8012370:	b590      	push	{r4, r7, lr}
 8012372:	b087      	sub	sp, #28
 8012374:	af00      	add	r7, sp, #0
 8012376:	0002      	movs	r2, r0
 8012378:	1dfb      	adds	r3, r7, #7
 801237a:	701a      	strb	r2, [r3, #0]
    CalcBackOffParams_t calcBackOff;

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 801237c:	4b31      	ldr	r3, [pc, #196]	; (8012444 <CalculateBackOff+0xd4>)
 801237e:	4a32      	ldr	r2, [pc, #200]	; (8012448 <CalculateBackOff+0xd8>)
 8012380:	589a      	ldr	r2, [r3, r2]
 8012382:	23ea      	movs	r3, #234	; 0xea
 8012384:	005b      	lsls	r3, r3, #1
 8012386:	5cd3      	ldrb	r3, [r2, r3]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d104      	bne.n	8012396 <CalculateBackOff+0x26>
    {
        calcBackOff.Joined = false;
 801238c:	230c      	movs	r3, #12
 801238e:	18fb      	adds	r3, r7, r3
 8012390:	2200      	movs	r2, #0
 8012392:	701a      	strb	r2, [r3, #0]
 8012394:	e003      	b.n	801239e <CalculateBackOff+0x2e>
    }
    else
    {
        calcBackOff.Joined = true;
 8012396:	230c      	movs	r3, #12
 8012398:	18fb      	adds	r3, r7, r3
 801239a:	2201      	movs	r2, #1
 801239c:	701a      	strb	r2, [r3, #0]
    }
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 801239e:	4b29      	ldr	r3, [pc, #164]	; (8012444 <CalculateBackOff+0xd4>)
 80123a0:	4a29      	ldr	r2, [pc, #164]	; (8012448 <CalculateBackOff+0xd8>)
 80123a2:	589a      	ldr	r2, [r3, r2]
 80123a4:	233e      	movs	r3, #62	; 0x3e
 80123a6:	33ff      	adds	r3, #255	; 0xff
 80123a8:	5cd2      	ldrb	r2, [r2, r3]
 80123aa:	240c      	movs	r4, #12
 80123ac:	193b      	adds	r3, r7, r4
 80123ae:	709a      	strb	r2, [r3, #2]
    calcBackOff.Channel = channel;
 80123b0:	193b      	adds	r3, r7, r4
 80123b2:	1dfa      	adds	r2, r7, #7
 80123b4:	7812      	ldrb	r2, [r2, #0]
 80123b6:	70da      	strb	r2, [r3, #3]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 80123b8:	4b22      	ldr	r3, [pc, #136]	; (8012444 <CalculateBackOff+0xd4>)
 80123ba:	4a23      	ldr	r2, [pc, #140]	; (8012448 <CalculateBackOff+0xd8>)
 80123bc:	589a      	ldr	r2, [r3, r2]
 80123be:	23e6      	movs	r3, #230	; 0xe6
 80123c0:	005b      	lsls	r3, r3, #1
 80123c2:	58d3      	ldr	r3, [r2, r3]
 80123c4:	0018      	movs	r0, r3
 80123c6:	f008 ff08 	bl	801b1da <TimerGetElapsedTime>
 80123ca:	0002      	movs	r2, r0
 80123cc:	193b      	adds	r3, r7, r4
 80123ce:	605a      	str	r2, [r3, #4]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80123d0:	4a1c      	ldr	r2, [pc, #112]	; (8012444 <CalculateBackOff+0xd4>)
 80123d2:	2383      	movs	r3, #131	; 0x83
 80123d4:	00db      	lsls	r3, r3, #3
 80123d6:	58d2      	ldr	r2, [r2, r3]
 80123d8:	193b      	adds	r3, r7, r4
 80123da:	609a      	str	r2, [r3, #8]
    calcBackOff.LastTxIsJoinRequest = false;
 80123dc:	193b      	adds	r3, r7, r4
 80123de:	2200      	movs	r2, #0
 80123e0:	705a      	strb	r2, [r3, #1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 80123e2:	4b18      	ldr	r3, [pc, #96]	; (8012444 <CalculateBackOff+0xd4>)
 80123e4:	4a19      	ldr	r2, [pc, #100]	; (801244c <CalculateBackOff+0xdc>)
 80123e6:	5c9b      	ldrb	r3, [r3, r2]
 80123e8:	2204      	movs	r2, #4
 80123ea:	4013      	ands	r3, r2
 80123ec:	b2db      	uxtb	r3, r3
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d008      	beq.n	8012404 <CalculateBackOff+0x94>
 80123f2:	2000      	movs	r0, #0
 80123f4:	f003 fa70 	bl	80158d8 <LoRaMacConfirmQueueIsCmdActive>
 80123f8:	1e03      	subs	r3, r0, #0
 80123fa:	d003      	beq.n	8012404 <CalculateBackOff+0x94>
    {
        calcBackOff.LastTxIsJoinRequest = true;
 80123fc:	230c      	movs	r3, #12
 80123fe:	18fb      	adds	r3, r7, r3
 8012400:	2201      	movs	r2, #1
 8012402:	705a      	strb	r2, [r3, #1]
    }

    // Update regional back-off
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 8012404:	4b0f      	ldr	r3, [pc, #60]	; (8012444 <CalculateBackOff+0xd4>)
 8012406:	4a10      	ldr	r2, [pc, #64]	; (8012448 <CalculateBackOff+0xd8>)
 8012408:	589b      	ldr	r3, [r3, r2]
 801240a:	781b      	ldrb	r3, [r3, #0]
 801240c:	220c      	movs	r2, #12
 801240e:	18ba      	adds	r2, r7, r2
 8012410:	0011      	movs	r1, r2
 8012412:	0018      	movs	r0, r3
 8012414:	f005 f9cd 	bl	80177b2 <RegionCalcBackOff>

    // Update aggregated time-off. This must be an assignment and no incremental
    // update as we do only calculate the time-off based on the last transmission
    MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8012418:	4b0a      	ldr	r3, [pc, #40]	; (8012444 <CalculateBackOff+0xd4>)
 801241a:	4a0b      	ldr	r2, [pc, #44]	; (8012448 <CalculateBackOff+0xd8>)
 801241c:	589a      	ldr	r2, [r3, r2]
 801241e:	23e1      	movs	r3, #225	; 0xe1
 8012420:	005b      	lsls	r3, r3, #1
 8012422:	5ad3      	ldrh	r3, [r2, r3]
 8012424:	3b01      	subs	r3, #1
 8012426:	4907      	ldr	r1, [pc, #28]	; (8012444 <CalculateBackOff+0xd4>)
 8012428:	2283      	movs	r2, #131	; 0x83
 801242a:	00d2      	lsls	r2, r2, #3
 801242c:	5889      	ldr	r1, [r1, r2]
 801242e:	4a05      	ldr	r2, [pc, #20]	; (8012444 <CalculateBackOff+0xd4>)
 8012430:	4805      	ldr	r0, [pc, #20]	; (8012448 <CalculateBackOff+0xd8>)
 8012432:	5812      	ldr	r2, [r2, r0]
 8012434:	4359      	muls	r1, r3
 8012436:	23e4      	movs	r3, #228	; 0xe4
 8012438:	005b      	lsls	r3, r3, #1
 801243a:	50d1      	str	r1, [r2, r3]
}
 801243c:	46c0      	nop			; (mov r8, r8)
 801243e:	46bd      	mov	sp, r7
 8012440:	b007      	add	sp, #28
 8012442:	bd90      	pop	{r4, r7, pc}
 8012444:	200008ec 	.word	0x200008ec
 8012448:	00000484 	.word	0x00000484
 801244c:	00000481 	.word	0x00000481

08012450 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b082      	sub	sp, #8
 8012454:	af00      	add	r7, sp, #0
 8012456:	1d3b      	adds	r3, r7, #4
 8012458:	7019      	strb	r1, [r3, #0]
 801245a:	0011      	movs	r1, r2
 801245c:	1dfb      	adds	r3, r7, #7
 801245e:	1c02      	adds	r2, r0, #0
 8012460:	701a      	strb	r2, [r3, #0]
 8012462:	1dbb      	adds	r3, r7, #6
 8012464:	1c0a      	adds	r2, r1, #0
 8012466:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8012468:	1dfb      	adds	r3, r7, #7
 801246a:	781b      	ldrb	r3, [r3, #0]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d003      	beq.n	8012478 <RemoveMacCommands+0x28>
 8012470:	1dfb      	adds	r3, r7, #7
 8012472:	781b      	ldrb	r3, [r3, #0]
 8012474:	2b01      	cmp	r3, #1
 8012476:	d10f      	bne.n	8012498 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8012478:	1dbb      	adds	r3, r7, #6
 801247a:	781b      	ldrb	r3, [r3, #0]
 801247c:	2b01      	cmp	r3, #1
 801247e:	d109      	bne.n	8012494 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 8012480:	1d3b      	adds	r3, r7, #4
 8012482:	781b      	ldrb	r3, [r3, #0]
 8012484:	2220      	movs	r2, #32
 8012486:	4013      	ands	r3, r2
 8012488:	b2db      	uxtb	r3, r3
 801248a:	2b00      	cmp	r3, #0
 801248c:	d004      	beq.n	8012498 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801248e:	f003 f80d 	bl	80154ac <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8012492:	e001      	b.n	8012498 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8012494:	f003 f80a 	bl	80154ac <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8012498:	46c0      	nop			; (mov r8, r8)
 801249a:	46bd      	mov	sp, r7
 801249c:	b002      	add	sp, #8
 801249e:	bd80      	pop	{r7, pc}

080124a0 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b082      	sub	sp, #8
 80124a4:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 80124a6:	4b72      	ldr	r3, [pc, #456]	; (8012670 <ResetMacParameters+0x1d0>)
 80124a8:	4a72      	ldr	r2, [pc, #456]	; (8012674 <ResetMacParameters+0x1d4>)
 80124aa:	589a      	ldr	r2, [r3, r2]
 80124ac:	23ea      	movs	r3, #234	; 0xea
 80124ae:	005b      	lsls	r3, r3, #1
 80124b0:	2100      	movs	r1, #0
 80124b2:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 80124b4:	4b6e      	ldr	r3, [pc, #440]	; (8012670 <ResetMacParameters+0x1d0>)
 80124b6:	4a6f      	ldr	r2, [pc, #444]	; (8012674 <ResetMacParameters+0x1d4>)
 80124b8:	589b      	ldr	r3, [r3, r2]
 80124ba:	22f4      	movs	r2, #244	; 0xf4
 80124bc:	2100      	movs	r1, #0
 80124be:	5099      	str	r1, [r3, r2]

    MacCtx.ChannelsNbTransCounter = 0;
 80124c0:	4a6b      	ldr	r2, [pc, #428]	; (8012670 <ResetMacParameters+0x1d0>)
 80124c2:	2382      	movs	r3, #130	; 0x82
 80124c4:	00db      	lsls	r3, r3, #3
 80124c6:	2100      	movs	r1, #0
 80124c8:	54d1      	strb	r1, [r2, r3]
    MacCtx.AckTimeoutRetries = 1;
 80124ca:	4b69      	ldr	r3, [pc, #420]	; (8012670 <ResetMacParameters+0x1d0>)
 80124cc:	4a6a      	ldr	r2, [pc, #424]	; (8012678 <ResetMacParameters+0x1d8>)
 80124ce:	2101      	movs	r1, #1
 80124d0:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1;
 80124d2:	4b67      	ldr	r3, [pc, #412]	; (8012670 <ResetMacParameters+0x1d0>)
 80124d4:	4a69      	ldr	r2, [pc, #420]	; (801267c <ResetMacParameters+0x1dc>)
 80124d6:	2101      	movs	r1, #1
 80124d8:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 80124da:	4b65      	ldr	r3, [pc, #404]	; (8012670 <ResetMacParameters+0x1d0>)
 80124dc:	4a68      	ldr	r2, [pc, #416]	; (8012680 <ResetMacParameters+0x1e0>)
 80124de:	2100      	movs	r1, #0
 80124e0:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
 80124e2:	4b63      	ldr	r3, [pc, #396]	; (8012670 <ResetMacParameters+0x1d0>)
 80124e4:	4a63      	ldr	r2, [pc, #396]	; (8012674 <ResetMacParameters+0x1d4>)
 80124e6:	589a      	ldr	r2, [r3, r2]
 80124e8:	239e      	movs	r3, #158	; 0x9e
 80124ea:	005b      	lsls	r3, r3, #1
 80124ec:	2100      	movs	r1, #0
 80124ee:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 80124f0:	4b5f      	ldr	r3, [pc, #380]	; (8012670 <ResetMacParameters+0x1d0>)
 80124f2:	4a60      	ldr	r2, [pc, #384]	; (8012674 <ResetMacParameters+0x1d4>)
 80124f4:	589a      	ldr	r2, [r3, r2]
 80124f6:	23e1      	movs	r3, #225	; 0xe1
 80124f8:	005b      	lsls	r3, r3, #1
 80124fa:	2101      	movs	r1, #1
 80124fc:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80124fe:	4b5c      	ldr	r3, [pc, #368]	; (8012670 <ResetMacParameters+0x1d0>)
 8012500:	4a5c      	ldr	r2, [pc, #368]	; (8012674 <ResetMacParameters+0x1d4>)
 8012502:	589a      	ldr	r2, [r3, r2]
 8012504:	4b5a      	ldr	r3, [pc, #360]	; (8012670 <ResetMacParameters+0x1d0>)
 8012506:	495b      	ldr	r1, [pc, #364]	; (8012674 <ResetMacParameters+0x1d4>)
 8012508:	585b      	ldr	r3, [r3, r1]
 801250a:	2104      	movs	r1, #4
 801250c:	5651      	ldrsb	r1, [r2, r1]
 801250e:	22f8      	movs	r2, #248	; 0xf8
 8012510:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8012512:	4b57      	ldr	r3, [pc, #348]	; (8012670 <ResetMacParameters+0x1d0>)
 8012514:	4a57      	ldr	r2, [pc, #348]	; (8012674 <ResetMacParameters+0x1d4>)
 8012516:	589a      	ldr	r2, [r3, r2]
 8012518:	4b55      	ldr	r3, [pc, #340]	; (8012670 <ResetMacParameters+0x1d0>)
 801251a:	4956      	ldr	r1, [pc, #344]	; (8012674 <ResetMacParameters+0x1d4>)
 801251c:	585b      	ldr	r3, [r3, r1]
 801251e:	2105      	movs	r1, #5
 8012520:	5651      	ldrsb	r1, [r2, r1]
 8012522:	22f9      	movs	r2, #249	; 0xf9
 8012524:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8012526:	4b52      	ldr	r3, [pc, #328]	; (8012670 <ResetMacParameters+0x1d0>)
 8012528:	4a52      	ldr	r2, [pc, #328]	; (8012674 <ResetMacParameters+0x1d4>)
 801252a:	589b      	ldr	r3, [r3, r2]
 801252c:	4a50      	ldr	r2, [pc, #320]	; (8012670 <ResetMacParameters+0x1d0>)
 801252e:	4951      	ldr	r1, [pc, #324]	; (8012674 <ResetMacParameters+0x1d4>)
 8012530:	5852      	ldr	r2, [r2, r1]
 8012532:	2125      	movs	r1, #37	; 0x25
 8012534:	5c59      	ldrb	r1, [r3, r1]
 8012536:	231a      	movs	r3, #26
 8012538:	33ff      	adds	r3, #255	; 0xff
 801253a:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 801253c:	4b4c      	ldr	r3, [pc, #304]	; (8012670 <ResetMacParameters+0x1d0>)
 801253e:	4a4d      	ldr	r2, [pc, #308]	; (8012674 <ResetMacParameters+0x1d4>)
 8012540:	589a      	ldr	r2, [r3, r2]
 8012542:	4b4b      	ldr	r3, [pc, #300]	; (8012670 <ResetMacParameters+0x1d0>)
 8012544:	494b      	ldr	r1, [pc, #300]	; (8012674 <ResetMacParameters+0x1d4>)
 8012546:	5859      	ldr	r1, [r3, r1]
 8012548:	238e      	movs	r3, #142	; 0x8e
 801254a:	005b      	lsls	r3, r3, #1
 801254c:	18cb      	adds	r3, r1, r3
 801254e:	3228      	adds	r2, #40	; 0x28
 8012550:	ca03      	ldmia	r2!, {r0, r1}
 8012552:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8012554:	4b46      	ldr	r3, [pc, #280]	; (8012670 <ResetMacParameters+0x1d0>)
 8012556:	4a47      	ldr	r2, [pc, #284]	; (8012674 <ResetMacParameters+0x1d4>)
 8012558:	589a      	ldr	r2, [r3, r2]
 801255a:	4b45      	ldr	r3, [pc, #276]	; (8012670 <ResetMacParameters+0x1d0>)
 801255c:	4945      	ldr	r1, [pc, #276]	; (8012674 <ResetMacParameters+0x1d4>)
 801255e:	5859      	ldr	r1, [r3, r1]
 8012560:	2392      	movs	r3, #146	; 0x92
 8012562:	005b      	lsls	r3, r3, #1
 8012564:	18cb      	adds	r3, r1, r3
 8012566:	3230      	adds	r2, #48	; 0x30
 8012568:	ca03      	ldmia	r2!, {r0, r1}
 801256a:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 801256c:	4b40      	ldr	r3, [pc, #256]	; (8012670 <ResetMacParameters+0x1d0>)
 801256e:	4a41      	ldr	r2, [pc, #260]	; (8012674 <ResetMacParameters+0x1d4>)
 8012570:	589b      	ldr	r3, [r3, r2]
 8012572:	4a3f      	ldr	r2, [pc, #252]	; (8012670 <ResetMacParameters+0x1d0>)
 8012574:	493f      	ldr	r1, [pc, #252]	; (8012674 <ResetMacParameters+0x1d4>)
 8012576:	5852      	ldr	r2, [r2, r1]
 8012578:	2138      	movs	r1, #56	; 0x38
 801257a:	5c59      	ldrb	r1, [r3, r1]
 801257c:	2396      	movs	r3, #150	; 0x96
 801257e:	005b      	lsls	r3, r3, #1
 8012580:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 8012582:	4b3b      	ldr	r3, [pc, #236]	; (8012670 <ResetMacParameters+0x1d0>)
 8012584:	4a3b      	ldr	r2, [pc, #236]	; (8012674 <ResetMacParameters+0x1d4>)
 8012586:	589b      	ldr	r3, [r3, r2]
 8012588:	4a39      	ldr	r2, [pc, #228]	; (8012670 <ResetMacParameters+0x1d0>)
 801258a:	493a      	ldr	r1, [pc, #232]	; (8012674 <ResetMacParameters+0x1d4>)
 801258c:	5852      	ldr	r2, [r2, r1]
 801258e:	2139      	movs	r1, #57	; 0x39
 8012590:	5c59      	ldrb	r1, [r3, r1]
 8012592:	232e      	movs	r3, #46	; 0x2e
 8012594:	33ff      	adds	r3, #255	; 0xff
 8012596:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8012598:	4b35      	ldr	r3, [pc, #212]	; (8012670 <ResetMacParameters+0x1d0>)
 801259a:	4a36      	ldr	r2, [pc, #216]	; (8012674 <ResetMacParameters+0x1d4>)
 801259c:	589b      	ldr	r3, [r3, r2]
 801259e:	4a34      	ldr	r2, [pc, #208]	; (8012670 <ResetMacParameters+0x1d0>)
 80125a0:	4934      	ldr	r1, [pc, #208]	; (8012674 <ResetMacParameters+0x1d4>)
 80125a2:	5852      	ldr	r2, [r2, r1]
 80125a4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80125a6:	2398      	movs	r3, #152	; 0x98
 80125a8:	005b      	lsls	r3, r3, #1
 80125aa:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80125ac:	4b30      	ldr	r3, [pc, #192]	; (8012670 <ResetMacParameters+0x1d0>)
 80125ae:	4a31      	ldr	r2, [pc, #196]	; (8012674 <ResetMacParameters+0x1d4>)
 80125b0:	589b      	ldr	r3, [r3, r2]
 80125b2:	4a2f      	ldr	r2, [pc, #188]	; (8012670 <ResetMacParameters+0x1d0>)
 80125b4:	492f      	ldr	r1, [pc, #188]	; (8012674 <ResetMacParameters+0x1d4>)
 80125b6:	5852      	ldr	r2, [r2, r1]
 80125b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80125ba:	239a      	movs	r3, #154	; 0x9a
 80125bc:	005b      	lsls	r3, r3, #1
 80125be:	50d1      	str	r1, [r2, r3]

    MacCtx.NodeAckRequested = false;
 80125c0:	4b2b      	ldr	r3, [pc, #172]	; (8012670 <ResetMacParameters+0x1d0>)
 80125c2:	4a30      	ldr	r2, [pc, #192]	; (8012684 <ResetMacParameters+0x1e4>)
 80125c4:	2100      	movs	r1, #0
 80125c6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 80125c8:	4b29      	ldr	r3, [pc, #164]	; (8012670 <ResetMacParameters+0x1d0>)
 80125ca:	4a2a      	ldr	r2, [pc, #168]	; (8012674 <ResetMacParameters+0x1d4>)
 80125cc:	589a      	ldr	r2, [r3, r2]
 80125ce:	23e0      	movs	r3, #224	; 0xe0
 80125d0:	005b      	lsls	r3, r3, #1
 80125d2:	2100      	movs	r1, #0
 80125d4:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 80125d6:	003b      	movs	r3, r7
 80125d8:	2201      	movs	r2, #1
 80125da:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 80125dc:	003b      	movs	r3, r7
 80125de:	2200      	movs	r2, #0
 80125e0:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80125e2:	4b23      	ldr	r3, [pc, #140]	; (8012670 <ResetMacParameters+0x1d0>)
 80125e4:	4a23      	ldr	r2, [pc, #140]	; (8012674 <ResetMacParameters+0x1d4>)
 80125e6:	589b      	ldr	r3, [r3, r2]
 80125e8:	781b      	ldrb	r3, [r3, #0]
 80125ea:	003a      	movs	r2, r7
 80125ec:	0011      	movs	r1, r2
 80125ee:	0018      	movs	r0, r3
 80125f0:	f004 ff7a 	bl	80174e8 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80125f4:	4b1e      	ldr	r3, [pc, #120]	; (8012670 <ResetMacParameters+0x1d0>)
 80125f6:	4a24      	ldr	r2, [pc, #144]	; (8012688 <ResetMacParameters+0x1e8>)
 80125f8:	2100      	movs	r1, #0
 80125fa:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 80125fc:	4b1c      	ldr	r3, [pc, #112]	; (8012670 <ResetMacParameters+0x1d0>)
 80125fe:	4a1d      	ldr	r2, [pc, #116]	; (8012674 <ResetMacParameters+0x1d4>)
 8012600:	589a      	ldr	r2, [r3, r2]
 8012602:	4b1b      	ldr	r3, [pc, #108]	; (8012670 <ResetMacParameters+0x1d0>)
 8012604:	4920      	ldr	r1, [pc, #128]	; (8012688 <ResetMacParameters+0x1e8>)
 8012606:	5c59      	ldrb	r1, [r3, r1]
 8012608:	239f      	movs	r3, #159	; 0x9f
 801260a:	005b      	lsls	r3, r3, #1
 801260c:	54d1      	strb	r1, [r2, r3]

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801260e:	4b18      	ldr	r3, [pc, #96]	; (8012670 <ResetMacParameters+0x1d0>)
 8012610:	4a1d      	ldr	r2, [pc, #116]	; (8012688 <ResetMacParameters+0x1e8>)
 8012612:	5c99      	ldrb	r1, [r3, r2]
 8012614:	4a16      	ldr	r2, [pc, #88]	; (8012670 <ResetMacParameters+0x1d0>)
 8012616:	23f3      	movs	r3, #243	; 0xf3
 8012618:	009b      	lsls	r3, r3, #2
 801261a:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 801261c:	4b14      	ldr	r3, [pc, #80]	; (8012670 <ResetMacParameters+0x1d0>)
 801261e:	4a15      	ldr	r2, [pc, #84]	; (8012674 <ResetMacParameters+0x1d4>)
 8012620:	589a      	ldr	r2, [r3, r2]
 8012622:	238e      	movs	r3, #142	; 0x8e
 8012624:	005b      	lsls	r3, r3, #1
 8012626:	58d1      	ldr	r1, [r2, r3]
 8012628:	4a11      	ldr	r2, [pc, #68]	; (8012670 <ResetMacParameters+0x1d0>)
 801262a:	23f4      	movs	r3, #244	; 0xf4
 801262c:	009b      	lsls	r3, r3, #2
 801262e:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8012630:	4b0f      	ldr	r3, [pc, #60]	; (8012670 <ResetMacParameters+0x1d0>)
 8012632:	4a10      	ldr	r2, [pc, #64]	; (8012674 <ResetMacParameters+0x1d4>)
 8012634:	589a      	ldr	r2, [r3, r2]
 8012636:	232e      	movs	r3, #46	; 0x2e
 8012638:	33ff      	adds	r3, #255	; 0xff
 801263a:	5cd1      	ldrb	r1, [r2, r3]
 801263c:	4a0c      	ldr	r2, [pc, #48]	; (8012670 <ResetMacParameters+0x1d0>)
 801263e:	23f7      	movs	r3, #247	; 0xf7
 8012640:	009b      	lsls	r3, r3, #2
 8012642:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8012644:	4b0a      	ldr	r3, [pc, #40]	; (8012670 <ResetMacParameters+0x1d0>)
 8012646:	4a0b      	ldr	r2, [pc, #44]	; (8012674 <ResetMacParameters+0x1d4>)
 8012648:	589a      	ldr	r2, [r3, r2]
 801264a:	2340      	movs	r3, #64	; 0x40
 801264c:	33ff      	adds	r3, #255	; 0xff
 801264e:	5cd1      	ldrb	r1, [r2, r3]
 8012650:	4b07      	ldr	r3, [pc, #28]	; (8012670 <ResetMacParameters+0x1d0>)
 8012652:	4a0e      	ldr	r2, [pc, #56]	; (801268c <ResetMacParameters+0x1ec>)
 8012654:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012656:	4b06      	ldr	r3, [pc, #24]	; (8012670 <ResetMacParameters+0x1d0>)
 8012658:	4a0d      	ldr	r2, [pc, #52]	; (8012690 <ResetMacParameters+0x1f0>)
 801265a:	2100      	movs	r1, #0
 801265c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801265e:	4b04      	ldr	r3, [pc, #16]	; (8012670 <ResetMacParameters+0x1d0>)
 8012660:	4a0c      	ldr	r2, [pc, #48]	; (8012694 <ResetMacParameters+0x1f4>)
 8012662:	2101      	movs	r1, #1
 8012664:	5499      	strb	r1, [r3, r2]
}
 8012666:	46c0      	nop			; (mov r8, r8)
 8012668:	46bd      	mov	sp, r7
 801266a:	b002      	add	sp, #8
 801266c:	bd80      	pop	{r7, pc}
 801266e:	46c0      	nop			; (mov r8, r8)
 8012670:	200008ec 	.word	0x200008ec
 8012674:	00000484 	.word	0x00000484
 8012678:	00000411 	.word	0x00000411
 801267c:	00000412 	.word	0x00000412
 8012680:	00000413 	.word	0x00000413
 8012684:	00000414 	.word	0x00000414
 8012688:	00000415 	.word	0x00000415
 801268c:	000003dd 	.word	0x000003dd
 8012690:	000003de 	.word	0x000003de
 8012694:	000003df 	.word	0x000003df

08012698 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	0018      	movs	r0, r3
 80126a6:	f008 fce9 	bl	801b07c <TimerStop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80126aa:	4b11      	ldr	r3, [pc, #68]	; (80126f0 <RxWindowSetup+0x58>)
 80126ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126ae:	4798      	blx	r3

    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80126b0:	4b10      	ldr	r3, [pc, #64]	; (80126f4 <RxWindowSetup+0x5c>)
 80126b2:	4a11      	ldr	r2, [pc, #68]	; (80126f8 <RxWindowSetup+0x60>)
 80126b4:	589b      	ldr	r3, [r3, r2]
 80126b6:	781b      	ldrb	r3, [r3, #0]
 80126b8:	4a10      	ldr	r2, [pc, #64]	; (80126fc <RxWindowSetup+0x64>)
 80126ba:	6839      	ldr	r1, [r7, #0]
 80126bc:	0018      	movs	r0, r3
 80126be:	f004 ffaa 	bl	8017616 <RegionRxConfig>
 80126c2:	1e03      	subs	r3, r0, #0
 80126c4:	d00f      	beq.n	80126e6 <RxWindowSetup+0x4e>
    {
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 80126c6:	4b0a      	ldr	r3, [pc, #40]	; (80126f0 <RxWindowSetup+0x58>)
 80126c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126ca:	4a0a      	ldr	r2, [pc, #40]	; (80126f4 <RxWindowSetup+0x5c>)
 80126cc:	490a      	ldr	r1, [pc, #40]	; (80126f8 <RxWindowSetup+0x60>)
 80126ce:	5851      	ldr	r1, [r2, r1]
 80126d0:	2282      	movs	r2, #130	; 0x82
 80126d2:	0052      	lsls	r2, r2, #1
 80126d4:	588a      	ldr	r2, [r1, r2]
 80126d6:	0010      	movs	r0, r2
 80126d8:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	7cd9      	ldrb	r1, [r3, #19]
 80126de:	4a05      	ldr	r2, [pc, #20]	; (80126f4 <RxWindowSetup+0x5c>)
 80126e0:	2390      	movs	r3, #144	; 0x90
 80126e2:	00db      	lsls	r3, r3, #3
 80126e4:	54d1      	strb	r1, [r2, r3]
    }
}
 80126e6:	46c0      	nop			; (mov r8, r8)
 80126e8:	46bd      	mov	sp, r7
 80126ea:	b002      	add	sp, #8
 80126ec:	bd80      	pop	{r7, pc}
 80126ee:	46c0      	nop			; (mov r8, r8)
 80126f0:	0801ca04 	.word	0x0801ca04
 80126f4:	200008ec 	.word	0x200008ec
 80126f8:	00000484 	.word	0x00000484
 80126fc:	20000d0c 	.word	0x20000d0c

08012700 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8012700:	b580      	push	{r7, lr}
 8012702:	af00      	add	r7, sp, #0
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012704:	4b10      	ldr	r3, [pc, #64]	; (8012748 <OpenContinuousRxCWindow+0x48>)
 8012706:	4a11      	ldr	r2, [pc, #68]	; (801274c <OpenContinuousRxCWindow+0x4c>)
 8012708:	2102      	movs	r1, #2
 801270a:	5499      	strb	r1, [r3, r2]
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801270c:	4b0e      	ldr	r3, [pc, #56]	; (8012748 <OpenContinuousRxCWindow+0x48>)
 801270e:	4a10      	ldr	r2, [pc, #64]	; (8012750 <OpenContinuousRxCWindow+0x50>)
 8012710:	2101      	movs	r1, #1
 8012712:	5499      	strb	r1, [r3, r2]

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012714:	4b0c      	ldr	r3, [pc, #48]	; (8012748 <OpenContinuousRxCWindow+0x48>)
 8012716:	4a0f      	ldr	r2, [pc, #60]	; (8012754 <OpenContinuousRxCWindow+0x54>)
 8012718:	589b      	ldr	r3, [r3, r2]
 801271a:	781b      	ldrb	r3, [r3, #0]
 801271c:	4a0e      	ldr	r2, [pc, #56]	; (8012758 <OpenContinuousRxCWindow+0x58>)
 801271e:	490f      	ldr	r1, [pc, #60]	; (801275c <OpenContinuousRxCWindow+0x5c>)
 8012720:	0018      	movs	r0, r3
 8012722:	f004 ff78 	bl	8017616 <RegionRxConfig>
 8012726:	1e03      	subs	r3, r0, #0
 8012728:	d00a      	beq.n	8012740 <OpenContinuousRxCWindow+0x40>
    {
        Radio.Rx( 0 ); // Continuous mode
 801272a:	4b0d      	ldr	r3, [pc, #52]	; (8012760 <OpenContinuousRxCWindow+0x60>)
 801272c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801272e:	2000      	movs	r0, #0
 8012730:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8012732:	4b05      	ldr	r3, [pc, #20]	; (8012748 <OpenContinuousRxCWindow+0x48>)
 8012734:	4a05      	ldr	r2, [pc, #20]	; (801274c <OpenContinuousRxCWindow+0x4c>)
 8012736:	5c99      	ldrb	r1, [r3, r2]
 8012738:	4a03      	ldr	r2, [pc, #12]	; (8012748 <OpenContinuousRxCWindow+0x48>)
 801273a:	2390      	movs	r3, #144	; 0x90
 801273c:	00db      	lsls	r3, r3, #3
 801273e:	54d1      	strb	r1, [r2, r3]
    }
}
 8012740:	46c0      	nop			; (mov r8, r8)
 8012742:	46bd      	mov	sp, r7
 8012744:	bd80      	pop	{r7, pc}
 8012746:	46c0      	nop			; (mov r8, r8)
 8012748:	200008ec 	.word	0x200008ec
 801274c:	000003f3 	.word	0x000003f3
 8012750:	000003f2 	.word	0x000003f2
 8012754:	00000484 	.word	0x00000484
 8012758:	20000d0c 	.word	0x20000d0c
 801275c:	20000ccc 	.word	0x20000ccc
 8012760:	0801ca04 	.word	0x0801ca04

08012764 <PrepareFrame>:

LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8012764:	b590      	push	{r4, r7, lr}
 8012766:	b089      	sub	sp, #36	; 0x24
 8012768:	af00      	add	r7, sp, #0
 801276a:	60f8      	str	r0, [r7, #12]
 801276c:	60b9      	str	r1, [r7, #8]
 801276e:	603b      	str	r3, [r7, #0]
 8012770:	1dfb      	adds	r3, r7, #7
 8012772:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 8012774:	4b9a      	ldr	r3, [pc, #616]	; (80129e0 <PrepareFrame+0x27c>)
 8012776:	2200      	movs	r2, #0
 8012778:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801277a:	4b99      	ldr	r3, [pc, #612]	; (80129e0 <PrepareFrame+0x27c>)
 801277c:	4a99      	ldr	r2, [pc, #612]	; (80129e4 <PrepareFrame+0x280>)
 801277e:	2100      	movs	r1, #0
 8012780:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 8012782:	2300      	movs	r3, #0
 8012784:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8012786:	2300      	movs	r3, #0
 8012788:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801278a:	231f      	movs	r3, #31
 801278c:	18fb      	adds	r3, r7, r3
 801278e:	2200      	movs	r2, #0
 8012790:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d103      	bne.n	80127a0 <PrepareFrame+0x3c>
    {
        fBufferSize = 0;
 8012798:	2330      	movs	r3, #48	; 0x30
 801279a:	18fb      	adds	r3, r7, r3
 801279c:	2200      	movs	r2, #0
 801279e:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80127a0:	2430      	movs	r4, #48	; 0x30
 80127a2:	193b      	adds	r3, r7, r4
 80127a4:	881a      	ldrh	r2, [r3, #0]
 80127a6:	6839      	ldr	r1, [r7, #0]
 80127a8:	4b8f      	ldr	r3, [pc, #572]	; (80129e8 <PrepareFrame+0x284>)
 80127aa:	0018      	movs	r0, r3
 80127ac:	f008 fede 	bl	801b56c <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80127b0:	193b      	adds	r3, r7, r4
 80127b2:	881b      	ldrh	r3, [r3, #0]
 80127b4:	b2d9      	uxtb	r1, r3
 80127b6:	4b8a      	ldr	r3, [pc, #552]	; (80129e0 <PrepareFrame+0x27c>)
 80127b8:	4a8c      	ldr	r2, [pc, #560]	; (80129ec <PrepareFrame+0x288>)
 80127ba:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	781a      	ldrb	r2, [r3, #0]
 80127c0:	4b87      	ldr	r3, [pc, #540]	; (80129e0 <PrepareFrame+0x27c>)
 80127c2:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	061b      	lsls	r3, r3, #24
 80127ca:	0f5b      	lsrs	r3, r3, #29
 80127cc:	b2db      	uxtb	r3, r3
 80127ce:	2b04      	cmp	r3, #4
 80127d0:	d005      	beq.n	80127de <PrepareFrame+0x7a>
 80127d2:	2b07      	cmp	r3, #7
 80127d4:	d100      	bne.n	80127d8 <PrepareFrame+0x74>
 80127d6:	e0df      	b.n	8012998 <PrepareFrame+0x234>
 80127d8:	2b02      	cmp	r3, #2
 80127da:	d004      	beq.n	80127e6 <PrepareFrame+0x82>
 80127dc:	e0f6      	b.n	80129cc <PrepareFrame+0x268>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80127de:	4b80      	ldr	r3, [pc, #512]	; (80129e0 <PrepareFrame+0x27c>)
 80127e0:	4a80      	ldr	r2, [pc, #512]	; (80129e4 <PrepareFrame+0x280>)
 80127e2:	2101      	movs	r1, #1
 80127e4:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80127e6:	4a7e      	ldr	r2, [pc, #504]	; (80129e0 <PrepareFrame+0x27c>)
 80127e8:	2382      	movs	r3, #130	; 0x82
 80127ea:	005b      	lsls	r3, r3, #1
 80127ec:	2104      	movs	r1, #4
 80127ee:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80127f0:	4a7b      	ldr	r2, [pc, #492]	; (80129e0 <PrepareFrame+0x27c>)
 80127f2:	2384      	movs	r3, #132	; 0x84
 80127f4:	005b      	lsls	r3, r3, #1
 80127f6:	497e      	ldr	r1, [pc, #504]	; (80129f0 <PrepareFrame+0x28c>)
 80127f8:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80127fa:	4a79      	ldr	r2, [pc, #484]	; (80129e0 <PrepareFrame+0x27c>)
 80127fc:	2386      	movs	r3, #134	; 0x86
 80127fe:	005b      	lsls	r3, r3, #1
 8012800:	21ff      	movs	r1, #255	; 0xff
 8012802:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	7819      	ldrb	r1, [r3, #0]
 8012808:	4a75      	ldr	r2, [pc, #468]	; (80129e0 <PrepareFrame+0x27c>)
 801280a:	230e      	movs	r3, #14
 801280c:	33ff      	adds	r3, #255	; 0xff
 801280e:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8012810:	4a73      	ldr	r2, [pc, #460]	; (80129e0 <PrepareFrame+0x27c>)
 8012812:	1df9      	adds	r1, r7, #7
 8012814:	2394      	movs	r3, #148	; 0x94
 8012816:	005b      	lsls	r3, r3, #1
 8012818:	7809      	ldrb	r1, [r1, #0]
 801281a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 801281c:	4b70      	ldr	r3, [pc, #448]	; (80129e0 <PrepareFrame+0x27c>)
 801281e:	4a75      	ldr	r2, [pc, #468]	; (80129f4 <PrepareFrame+0x290>)
 8012820:	589b      	ldr	r3, [r3, r2]
 8012822:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8012824:	4a6e      	ldr	r2, [pc, #440]	; (80129e0 <PrepareFrame+0x27c>)
 8012826:	2388      	movs	r3, #136	; 0x88
 8012828:	005b      	lsls	r3, r3, #1
 801282a:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	7819      	ldrb	r1, [r3, #0]
 8012830:	4a6b      	ldr	r2, [pc, #428]	; (80129e0 <PrepareFrame+0x27c>)
 8012832:	238a      	movs	r3, #138	; 0x8a
 8012834:	005b      	lsls	r3, r3, #1
 8012836:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8012838:	4b69      	ldr	r3, [pc, #420]	; (80129e0 <PrepareFrame+0x27c>)
 801283a:	4a6c      	ldr	r2, [pc, #432]	; (80129ec <PrepareFrame+0x288>)
 801283c:	5c99      	ldrb	r1, [r3, r2]
 801283e:	4a68      	ldr	r2, [pc, #416]	; (80129e0 <PrepareFrame+0x27c>)
 8012840:	2398      	movs	r3, #152	; 0x98
 8012842:	005b      	lsls	r3, r3, #1
 8012844:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8012846:	4a66      	ldr	r2, [pc, #408]	; (80129e0 <PrepareFrame+0x27c>)
 8012848:	2396      	movs	r3, #150	; 0x96
 801284a:	005b      	lsls	r3, r3, #1
 801284c:	4966      	ldr	r1, [pc, #408]	; (80129e8 <PrepareFrame+0x284>)
 801284e:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012850:	2318      	movs	r3, #24
 8012852:	18fb      	adds	r3, r7, r3
 8012854:	0018      	movs	r0, r3
 8012856:	f003 fd1d 	bl	8016294 <LoRaMacCryptoGetFCntUp>
 801285a:	1e03      	subs	r3, r0, #0
 801285c:	d001      	beq.n	8012862 <PrepareFrame+0xfe>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801285e:	2312      	movs	r3, #18
 8012860:	e0ba      	b.n	80129d8 <PrepareFrame+0x274>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8012862:	69bb      	ldr	r3, [r7, #24]
 8012864:	b299      	uxth	r1, r3
 8012866:	4a5e      	ldr	r2, [pc, #376]	; (80129e0 <PrepareFrame+0x27c>)
 8012868:	238b      	movs	r3, #139	; 0x8b
 801286a:	005b      	lsls	r3, r3, #1
 801286c:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 801286e:	4b5c      	ldr	r3, [pc, #368]	; (80129e0 <PrepareFrame+0x27c>)
 8012870:	4a61      	ldr	r2, [pc, #388]	; (80129f8 <PrepareFrame+0x294>)
 8012872:	2100      	movs	r1, #0
 8012874:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 8012876:	4a5a      	ldr	r2, [pc, #360]	; (80129e0 <PrepareFrame+0x27c>)
 8012878:	2388      	movs	r3, #136	; 0x88
 801287a:	00db      	lsls	r3, r3, #3
 801287c:	2100      	movs	r1, #0
 801287e:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8012880:	69b9      	ldr	r1, [r7, #24]
 8012882:	4a57      	ldr	r2, [pc, #348]	; (80129e0 <PrepareFrame+0x27c>)
 8012884:	2389      	movs	r3, #137	; 0x89
 8012886:	00db      	lsls	r3, r3, #3
 8012888:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801288a:	2314      	movs	r3, #20
 801288c:	18fb      	adds	r3, r7, r3
 801288e:	0018      	movs	r0, r3
 8012890:	f002 fe30 	bl	80154f4 <LoRaMacCommandsGetSizeSerializedCmds>
 8012894:	1e03      	subs	r3, r0, #0
 8012896:	d001      	beq.n	801289c <PrepareFrame+0x138>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012898:	2313      	movs	r3, #19
 801289a:	e09d      	b.n	80129d8 <PrepareFrame+0x274>
            }

            if( macCmdsSize > 0 )
 801289c:	697b      	ldr	r3, [r7, #20]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d100      	bne.n	80128a4 <PrepareFrame+0x140>
 80128a2:	e095      	b.n	80129d0 <PrepareFrame+0x26c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 80128a4:	4b4e      	ldr	r3, [pc, #312]	; (80129e0 <PrepareFrame+0x27c>)
 80128a6:	4a53      	ldr	r2, [pc, #332]	; (80129f4 <PrepareFrame+0x290>)
 80128a8:	589b      	ldr	r3, [r3, r2]
 80128aa:	22f9      	movs	r2, #249	; 0xf9
 80128ac:	569b      	ldrsb	r3, [r3, r2]
 80128ae:	221f      	movs	r2, #31
 80128b0:	18bc      	adds	r4, r7, r2
 80128b2:	0018      	movs	r0, r3
 80128b4:	f7fe fba4 	bl	8011000 <GetMaxAppPayloadWithoutFOptsLength>
 80128b8:	0003      	movs	r3, r0
 80128ba:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80128bc:	4b48      	ldr	r3, [pc, #288]	; (80129e0 <PrepareFrame+0x27c>)
 80128be:	4a4b      	ldr	r2, [pc, #300]	; (80129ec <PrepareFrame+0x288>)
 80128c0:	5c9b      	ldrb	r3, [r3, r2]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d024      	beq.n	8012910 <PrepareFrame+0x1ac>
 80128c6:	697b      	ldr	r3, [r7, #20]
 80128c8:	2b0f      	cmp	r3, #15
 80128ca:	d821      	bhi.n	8012910 <PrepareFrame+0x1ac>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80128cc:	4a4b      	ldr	r2, [pc, #300]	; (80129fc <PrepareFrame+0x298>)
 80128ce:	2314      	movs	r3, #20
 80128d0:	18fb      	adds	r3, r7, r3
 80128d2:	0019      	movs	r1, r3
 80128d4:	200f      	movs	r0, #15
 80128d6:	f002 fe23 	bl	8015520 <LoRaMacCommandsSerializeCmds>
 80128da:	1e03      	subs	r3, r0, #0
 80128dc:	d001      	beq.n	80128e2 <PrepareFrame+0x17e>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80128de:	2313      	movs	r3, #19
 80128e0:	e07a      	b.n	80129d8 <PrepareFrame+0x274>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	1c1a      	adds	r2, r3, #0
 80128e6:	230f      	movs	r3, #15
 80128e8:	4013      	ands	r3, r2
 80128ea:	b2da      	uxtb	r2, r3
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	210f      	movs	r1, #15
 80128f0:	400a      	ands	r2, r1
 80128f2:	0010      	movs	r0, r2
 80128f4:	781a      	ldrb	r2, [r3, #0]
 80128f6:	210f      	movs	r1, #15
 80128f8:	438a      	bics	r2, r1
 80128fa:	1c11      	adds	r1, r2, #0
 80128fc:	1c02      	adds	r2, r0, #0
 80128fe:	430a      	orrs	r2, r1
 8012900:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012902:	68bb      	ldr	r3, [r7, #8]
 8012904:	7819      	ldrb	r1, [r3, #0]
 8012906:	4a36      	ldr	r2, [pc, #216]	; (80129e0 <PrepareFrame+0x27c>)
 8012908:	238a      	movs	r3, #138	; 0x8a
 801290a:	005b      	lsls	r3, r3, #1
 801290c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801290e:	e05f      	b.n	80129d0 <PrepareFrame+0x26c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012910:	4b33      	ldr	r3, [pc, #204]	; (80129e0 <PrepareFrame+0x27c>)
 8012912:	4a36      	ldr	r2, [pc, #216]	; (80129ec <PrepareFrame+0x288>)
 8012914:	5c9b      	ldrb	r3, [r3, r2]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d016      	beq.n	8012948 <PrepareFrame+0x1e4>
 801291a:	697b      	ldr	r3, [r7, #20]
 801291c:	2b0f      	cmp	r3, #15
 801291e:	d913      	bls.n	8012948 <PrepareFrame+0x1e4>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012920:	231f      	movs	r3, #31
 8012922:	18fb      	adds	r3, r7, r3
 8012924:	7818      	ldrb	r0, [r3, #0]
 8012926:	4b2e      	ldr	r3, [pc, #184]	; (80129e0 <PrepareFrame+0x27c>)
 8012928:	4a32      	ldr	r2, [pc, #200]	; (80129f4 <PrepareFrame+0x290>)
 801292a:	589b      	ldr	r3, [r3, r2]
 801292c:	3341      	adds	r3, #65	; 0x41
 801292e:	33ff      	adds	r3, #255	; 0xff
 8012930:	001a      	movs	r2, r3
 8012932:	2314      	movs	r3, #20
 8012934:	18fb      	adds	r3, r7, r3
 8012936:	0019      	movs	r1, r3
 8012938:	f002 fdf2 	bl	8015520 <LoRaMacCommandsSerializeCmds>
 801293c:	1e03      	subs	r3, r0, #0
 801293e:	d001      	beq.n	8012944 <PrepareFrame+0x1e0>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012940:	2313      	movs	r3, #19
 8012942:	e049      	b.n	80129d8 <PrepareFrame+0x274>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8012944:	230a      	movs	r3, #10
 8012946:	e047      	b.n	80129d8 <PrepareFrame+0x274>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012948:	231f      	movs	r3, #31
 801294a:	18fb      	adds	r3, r7, r3
 801294c:	7818      	ldrb	r0, [r3, #0]
 801294e:	4b24      	ldr	r3, [pc, #144]	; (80129e0 <PrepareFrame+0x27c>)
 8012950:	4a28      	ldr	r2, [pc, #160]	; (80129f4 <PrepareFrame+0x290>)
 8012952:	589b      	ldr	r3, [r3, r2]
 8012954:	3341      	adds	r3, #65	; 0x41
 8012956:	33ff      	adds	r3, #255	; 0xff
 8012958:	001a      	movs	r2, r3
 801295a:	2314      	movs	r3, #20
 801295c:	18fb      	adds	r3, r7, r3
 801295e:	0019      	movs	r1, r3
 8012960:	f002 fdde 	bl	8015520 <LoRaMacCommandsSerializeCmds>
 8012964:	1e03      	subs	r3, r0, #0
 8012966:	d001      	beq.n	801296c <PrepareFrame+0x208>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012968:	2313      	movs	r3, #19
 801296a:	e035      	b.n	80129d8 <PrepareFrame+0x274>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 801296c:	4a1c      	ldr	r2, [pc, #112]	; (80129e0 <PrepareFrame+0x27c>)
 801296e:	2394      	movs	r3, #148	; 0x94
 8012970:	005b      	lsls	r3, r3, #1
 8012972:	2100      	movs	r1, #0
 8012974:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8012976:	4b1a      	ldr	r3, [pc, #104]	; (80129e0 <PrepareFrame+0x27c>)
 8012978:	4a1e      	ldr	r2, [pc, #120]	; (80129f4 <PrepareFrame+0x290>)
 801297a:	589b      	ldr	r3, [r3, r2]
 801297c:	3341      	adds	r3, #65	; 0x41
 801297e:	33ff      	adds	r3, #255	; 0xff
 8012980:	0019      	movs	r1, r3
 8012982:	4a17      	ldr	r2, [pc, #92]	; (80129e0 <PrepareFrame+0x27c>)
 8012984:	2396      	movs	r3, #150	; 0x96
 8012986:	005b      	lsls	r3, r3, #1
 8012988:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	b2d9      	uxtb	r1, r3
 801298e:	4a14      	ldr	r2, [pc, #80]	; (80129e0 <PrepareFrame+0x27c>)
 8012990:	2398      	movs	r3, #152	; 0x98
 8012992:	005b      	lsls	r3, r3, #1
 8012994:	54d1      	strb	r1, [r2, r3]
            break;
 8012996:	e01b      	b.n	80129d0 <PrepareFrame+0x26c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d01a      	beq.n	80129d4 <PrepareFrame+0x270>
 801299e:	4b10      	ldr	r3, [pc, #64]	; (80129e0 <PrepareFrame+0x27c>)
 80129a0:	4a12      	ldr	r2, [pc, #72]	; (80129ec <PrepareFrame+0x288>)
 80129a2:	5c9b      	ldrb	r3, [r3, r2]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d015      	beq.n	80129d4 <PrepareFrame+0x270>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80129a8:	4815      	ldr	r0, [pc, #84]	; (8012a00 <PrepareFrame+0x29c>)
 80129aa:	4b0d      	ldr	r3, [pc, #52]	; (80129e0 <PrepareFrame+0x27c>)
 80129ac:	4a0f      	ldr	r2, [pc, #60]	; (80129ec <PrepareFrame+0x288>)
 80129ae:	5c9b      	ldrb	r3, [r3, r2]
 80129b0:	b29a      	uxth	r2, r3
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	0019      	movs	r1, r3
 80129b6:	f008 fdd9 	bl	801b56c <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80129ba:	4b09      	ldr	r3, [pc, #36]	; (80129e0 <PrepareFrame+0x27c>)
 80129bc:	4a0b      	ldr	r2, [pc, #44]	; (80129ec <PrepareFrame+0x288>)
 80129be:	5c9b      	ldrb	r3, [r3, r2]
 80129c0:	b29b      	uxth	r3, r3
 80129c2:	3301      	adds	r3, #1
 80129c4:	b29a      	uxth	r2, r3
 80129c6:	4b06      	ldr	r3, [pc, #24]	; (80129e0 <PrepareFrame+0x27c>)
 80129c8:	801a      	strh	r2, [r3, #0]
            }
            break;
 80129ca:	e003      	b.n	80129d4 <PrepareFrame+0x270>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80129cc:	2302      	movs	r3, #2
 80129ce:	e003      	b.n	80129d8 <PrepareFrame+0x274>
            break;
 80129d0:	46c0      	nop			; (mov r8, r8)
 80129d2:	e000      	b.n	80129d6 <PrepareFrame+0x272>
            break;
 80129d4:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 80129d6:	2300      	movs	r3, #0
}
 80129d8:	0018      	movs	r0, r3
 80129da:	46bd      	mov	sp, r7
 80129dc:	b009      	add	sp, #36	; 0x24
 80129de:	bd90      	pop	{r4, r7, pc}
 80129e0:	200008ec 	.word	0x200008ec
 80129e4:	00000414 	.word	0x00000414
 80129e8:	20000a24 	.word	0x20000a24
 80129ec:	00000237 	.word	0x00000237
 80129f0:	200008ee 	.word	0x200008ee
 80129f4:	00000484 	.word	0x00000484
 80129f8:	00000441 	.word	0x00000441
 80129fc:	20000a04 	.word	0x20000a04
 8012a00:	200008ef 	.word	0x200008ef

08012a04 <SendFrameOnChannel>:

LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8012a04:	b590      	push	{r4, r7, lr}
 8012a06:	b089      	sub	sp, #36	; 0x24
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	0002      	movs	r2, r0
 8012a0c:	1dfb      	adds	r3, r7, #7
 8012a0e:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8012a10:	230b      	movs	r3, #11
 8012a12:	18fb      	adds	r3, r7, r3
 8012a14:	2200      	movs	r2, #0
 8012a16:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 8012a18:	210c      	movs	r1, #12
 8012a1a:	187b      	adds	r3, r7, r1
 8012a1c:	1dfa      	adds	r2, r7, #7
 8012a1e:	7812      	ldrb	r2, [r2, #0]
 8012a20:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012a22:	4b56      	ldr	r3, [pc, #344]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012a24:	4a56      	ldr	r2, [pc, #344]	; (8012b80 <SendFrameOnChannel+0x17c>)
 8012a26:	589b      	ldr	r3, [r3, r2]
 8012a28:	22f9      	movs	r2, #249	; 0xf9
 8012a2a:	569a      	ldrsb	r2, [r3, r2]
 8012a2c:	187b      	adds	r3, r7, r1
 8012a2e:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012a30:	4b52      	ldr	r3, [pc, #328]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012a32:	4a53      	ldr	r2, [pc, #332]	; (8012b80 <SendFrameOnChannel+0x17c>)
 8012a34:	589b      	ldr	r3, [r3, r2]
 8012a36:	22f8      	movs	r2, #248	; 0xf8
 8012a38:	569a      	ldrsb	r2, [r3, r2]
 8012a3a:	187b      	adds	r3, r7, r1
 8012a3c:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8012a3e:	4b4f      	ldr	r3, [pc, #316]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012a40:	4a4f      	ldr	r2, [pc, #316]	; (8012b80 <SendFrameOnChannel+0x17c>)
 8012a42:	589a      	ldr	r2, [r3, r2]
 8012a44:	2398      	movs	r3, #152	; 0x98
 8012a46:	005b      	lsls	r3, r3, #1
 8012a48:	58d2      	ldr	r2, [r2, r3]
 8012a4a:	187b      	adds	r3, r7, r1
 8012a4c:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8012a4e:	4b4b      	ldr	r3, [pc, #300]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012a50:	4a4b      	ldr	r2, [pc, #300]	; (8012b80 <SendFrameOnChannel+0x17c>)
 8012a52:	589a      	ldr	r2, [r3, r2]
 8012a54:	239a      	movs	r3, #154	; 0x9a
 8012a56:	005b      	lsls	r3, r3, #1
 8012a58:	58d2      	ldr	r2, [r2, r3]
 8012a5a:	187b      	adds	r3, r7, r1
 8012a5c:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8012a5e:	4b47      	ldr	r3, [pc, #284]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012a60:	881a      	ldrh	r2, [r3, #0]
 8012a62:	187b      	adds	r3, r7, r1
 8012a64:	819a      	strh	r2, [r3, #12]


    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8012a66:	f002 fa82 	bl	8014f6e <LoRaMacClassBIsBeaconExpected>
 8012a6a:	1e03      	subs	r3, r0, #0
 8012a6c:	d001      	beq.n	8012a72 <SendFrameOnChannel+0x6e>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8012a6e:	230e      	movs	r3, #14
 8012a70:	e07f      	b.n	8012b72 <SendFrameOnChannel+0x16e>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8012a72:	4b42      	ldr	r3, [pc, #264]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012a74:	4a42      	ldr	r2, [pc, #264]	; (8012b80 <SendFrameOnChannel+0x17c>)
 8012a76:	589b      	ldr	r3, [r3, r2]
 8012a78:	22f0      	movs	r2, #240	; 0xf0
 8012a7a:	5c9b      	ldrb	r3, [r3, r2]
 8012a7c:	2b01      	cmp	r3, #1
 8012a7e:	d10d      	bne.n	8012a9c <SendFrameOnChannel+0x98>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8012a80:	f002 fa7b 	bl	8014f7a <LoRaMacClassBIsPingExpected>
 8012a84:	1e03      	subs	r3, r0, #0
 8012a86:	d001      	beq.n	8012a8c <SendFrameOnChannel+0x88>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012a88:	230f      	movs	r3, #15
 8012a8a:	e072      	b.n	8012b72 <SendFrameOnChannel+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8012a8c:	f002 fa7b 	bl	8014f86 <LoRaMacClassBIsMulticastExpected>
 8012a90:	1e03      	subs	r3, r0, #0
 8012a92:	d001      	beq.n	8012a98 <SendFrameOnChannel+0x94>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012a94:	230f      	movs	r3, #15
 8012a96:	e06c      	b.n	8012b72 <SendFrameOnChannel+0x16e>
        }
        else
        {
            LoRaMacClassBStopRxSlots( );
 8012a98:	f002 fae8 	bl	801506c <LoRaMacClassBStopRxSlots>
        }
    }
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8012a9c:	4b37      	ldr	r3, [pc, #220]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012a9e:	4a38      	ldr	r2, [pc, #224]	; (8012b80 <SendFrameOnChannel+0x17c>)
 8012aa0:	589b      	ldr	r3, [r3, r2]
 8012aa2:	7818      	ldrb	r0, [r3, #0]
 8012aa4:	4b37      	ldr	r3, [pc, #220]	; (8012b84 <SendFrameOnChannel+0x180>)
 8012aa6:	240b      	movs	r4, #11
 8012aa8:	193a      	adds	r2, r7, r4
 8012aaa:	210c      	movs	r1, #12
 8012aac:	1879      	adds	r1, r7, r1
 8012aae:	f004 fdcc 	bl	801764a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012ab2:	4b32      	ldr	r3, [pc, #200]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012ab4:	4a34      	ldr	r2, [pc, #208]	; (8012b88 <SendFrameOnChannel+0x184>)
 8012ab6:	2101      	movs	r1, #1
 8012ab8:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012aba:	4b30      	ldr	r3, [pc, #192]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012abc:	4a30      	ldr	r2, [pc, #192]	; (8012b80 <SendFrameOnChannel+0x17c>)
 8012abe:	589b      	ldr	r3, [r3, r2]
 8012ac0:	22f9      	movs	r2, #249	; 0xf9
 8012ac2:	569b      	ldrsb	r3, [r3, r2]
 8012ac4:	b2d9      	uxtb	r1, r3
 8012ac6:	4b2d      	ldr	r3, [pc, #180]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012ac8:	4a30      	ldr	r2, [pc, #192]	; (8012b8c <SendFrameOnChannel+0x188>)
 8012aca:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 8012acc:	193b      	adds	r3, r7, r4
 8012ace:	2100      	movs	r1, #0
 8012ad0:	5659      	ldrsb	r1, [r3, r1]
 8012ad2:	4b2a      	ldr	r3, [pc, #168]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012ad4:	4a2e      	ldr	r2, [pc, #184]	; (8012b90 <SendFrameOnChannel+0x18c>)
 8012ad6:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 8012ad8:	1dfb      	adds	r3, r7, #7
 8012ada:	781a      	ldrb	r2, [r3, #0]
 8012adc:	4b27      	ldr	r3, [pc, #156]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012ade:	492d      	ldr	r1, [pc, #180]	; (8012b94 <SendFrameOnChannel+0x190>)
 8012ae0:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012ae2:	4a26      	ldr	r2, [pc, #152]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012ae4:	2383      	movs	r3, #131	; 0x83
 8012ae6:	00db      	lsls	r3, r3, #3
 8012ae8:	58d2      	ldr	r2, [r2, r3]
 8012aea:	4b24      	ldr	r3, [pc, #144]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012aec:	492a      	ldr	r1, [pc, #168]	; (8012b98 <SendFrameOnChannel+0x194>)
 8012aee:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012af0:	4a22      	ldr	r2, [pc, #136]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012af2:	2383      	movs	r3, #131	; 0x83
 8012af4:	00db      	lsls	r3, r3, #3
 8012af6:	58d2      	ldr	r2, [r2, r3]
 8012af8:	4b20      	ldr	r3, [pc, #128]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012afa:	4928      	ldr	r1, [pc, #160]	; (8012b9c <SendFrameOnChannel+0x198>)
 8012afc:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8012afe:	f002 fa48 	bl	8014f92 <LoRaMacClassBIsBeaconModeActive>
 8012b02:	1e03      	subs	r3, r0, #0
 8012b04:	d00d      	beq.n	8012b22 <SendFrameOnChannel+0x11e>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8012b06:	4a1d      	ldr	r2, [pc, #116]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012b08:	2383      	movs	r3, #131	; 0x83
 8012b0a:	00db      	lsls	r3, r3, #3
 8012b0c:	58d3      	ldr	r3, [r2, r3]
 8012b0e:	0018      	movs	r0, r3
 8012b10:	f002 faa3 	bl	801505a <LoRaMacClassBIsUplinkCollision>
 8012b14:	0003      	movs	r3, r0
 8012b16:	61fb      	str	r3, [r7, #28]

        if( collisionTime > 0 )
 8012b18:	69fb      	ldr	r3, [r7, #28]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d001      	beq.n	8012b22 <SendFrameOnChannel+0x11e>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8012b1e:	2310      	movs	r3, #16
 8012b20:	e027      	b.n	8012b72 <SendFrameOnChannel+0x16e>
        }
    }

    LoRaMacClassBHaltBeaconing( );
 8012b22:	f002 fa46 	bl	8014fb2 <LoRaMacClassBHaltBeaconing>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012b26:	4a15      	ldr	r2, [pc, #84]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012b28:	23d0      	movs	r3, #208	; 0xd0
 8012b2a:	009b      	lsls	r3, r3, #2
 8012b2c:	58d3      	ldr	r3, [r2, r3]
 8012b2e:	2202      	movs	r2, #2
 8012b30:	431a      	orrs	r2, r3
 8012b32:	0011      	movs	r1, r2
 8012b34:	4a11      	ldr	r2, [pc, #68]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012b36:	23d0      	movs	r3, #208	; 0xd0
 8012b38:	009b      	lsls	r3, r3, #2
 8012b3a:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 8012b3c:	4b0f      	ldr	r3, [pc, #60]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012b3e:	4a18      	ldr	r2, [pc, #96]	; (8012ba0 <SendFrameOnChannel+0x19c>)
 8012b40:	5c9b      	ldrb	r3, [r3, r2]
 8012b42:	2201      	movs	r2, #1
 8012b44:	4053      	eors	r3, r2
 8012b46:	b2db      	uxtb	r3, r3
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d009      	beq.n	8012b60 <SendFrameOnChannel+0x15c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8012b4c:	4a0b      	ldr	r2, [pc, #44]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012b4e:	2382      	movs	r3, #130	; 0x82
 8012b50:	00db      	lsls	r3, r3, #3
 8012b52:	5cd3      	ldrb	r3, [r2, r3]
 8012b54:	3301      	adds	r3, #1
 8012b56:	b2d9      	uxtb	r1, r3
 8012b58:	4a08      	ldr	r2, [pc, #32]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012b5a:	2382      	movs	r3, #130	; 0x82
 8012b5c:	00db      	lsls	r3, r3, #3
 8012b5e:	54d1      	strb	r1, [r2, r3]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8012b60:	4b10      	ldr	r3, [pc, #64]	; (8012ba4 <SendFrameOnChannel+0x1a0>)
 8012b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b64:	4a05      	ldr	r2, [pc, #20]	; (8012b7c <SendFrameOnChannel+0x178>)
 8012b66:	8812      	ldrh	r2, [r2, #0]
 8012b68:	b2d1      	uxtb	r1, r2
 8012b6a:	4a0f      	ldr	r2, [pc, #60]	; (8012ba8 <SendFrameOnChannel+0x1a4>)
 8012b6c:	0010      	movs	r0, r2
 8012b6e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8012b70:	2300      	movs	r3, #0
}
 8012b72:	0018      	movs	r0, r3
 8012b74:	46bd      	mov	sp, r7
 8012b76:	b009      	add	sp, #36	; 0x24
 8012b78:	bd90      	pop	{r4, r7, pc}
 8012b7a:	46c0      	nop			; (mov r8, r8)
 8012b7c:	200008ec 	.word	0x200008ec
 8012b80:	00000484 	.word	0x00000484
 8012b84:	20000d04 	.word	0x20000d04
 8012b88:	0000043d 	.word	0x0000043d
 8012b8c:	0000043e 	.word	0x0000043e
 8012b90:	0000043f 	.word	0x0000043f
 8012b94:	0000044c 	.word	0x0000044c
 8012b98:	00000444 	.word	0x00000444
 8012b9c:	00000454 	.word	0x00000454
 8012ba0:	00000414 	.word	0x00000414
 8012ba4:	0801ca04 	.word	0x0801ca04
 8012ba8:	200008ee 	.word	0x200008ee

08012bac <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b086      	sub	sp, #24
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	0002      	movs	r2, r0
 8012bb4:	1dbb      	adds	r3, r7, #6
 8012bb6:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8012bb8:	4b20      	ldr	r3, [pc, #128]	; (8012c3c <SetTxContinuousWave+0x90>)
 8012bba:	4a21      	ldr	r2, [pc, #132]	; (8012c40 <SetTxContinuousWave+0x94>)
 8012bbc:	5c9a      	ldrb	r2, [r3, r2]
 8012bbe:	2108      	movs	r1, #8
 8012bc0:	187b      	adds	r3, r7, r1
 8012bc2:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012bc4:	4b1d      	ldr	r3, [pc, #116]	; (8012c3c <SetTxContinuousWave+0x90>)
 8012bc6:	4a1f      	ldr	r2, [pc, #124]	; (8012c44 <SetTxContinuousWave+0x98>)
 8012bc8:	589b      	ldr	r3, [r3, r2]
 8012bca:	22f9      	movs	r2, #249	; 0xf9
 8012bcc:	569a      	ldrsb	r2, [r3, r2]
 8012bce:	187b      	adds	r3, r7, r1
 8012bd0:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012bd2:	4b1a      	ldr	r3, [pc, #104]	; (8012c3c <SetTxContinuousWave+0x90>)
 8012bd4:	4a1b      	ldr	r2, [pc, #108]	; (8012c44 <SetTxContinuousWave+0x98>)
 8012bd6:	589b      	ldr	r3, [r3, r2]
 8012bd8:	22f8      	movs	r2, #248	; 0xf8
 8012bda:	569a      	ldrsb	r2, [r3, r2]
 8012bdc:	187b      	adds	r3, r7, r1
 8012bde:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8012be0:	4b16      	ldr	r3, [pc, #88]	; (8012c3c <SetTxContinuousWave+0x90>)
 8012be2:	4a18      	ldr	r2, [pc, #96]	; (8012c44 <SetTxContinuousWave+0x98>)
 8012be4:	589a      	ldr	r2, [r3, r2]
 8012be6:	2398      	movs	r3, #152	; 0x98
 8012be8:	005b      	lsls	r3, r3, #1
 8012bea:	58d2      	ldr	r2, [r2, r3]
 8012bec:	187b      	adds	r3, r7, r1
 8012bee:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8012bf0:	4b12      	ldr	r3, [pc, #72]	; (8012c3c <SetTxContinuousWave+0x90>)
 8012bf2:	4a14      	ldr	r2, [pc, #80]	; (8012c44 <SetTxContinuousWave+0x98>)
 8012bf4:	589a      	ldr	r2, [r3, r2]
 8012bf6:	239a      	movs	r3, #154	; 0x9a
 8012bf8:	005b      	lsls	r3, r3, #1
 8012bfa:	58d2      	ldr	r2, [r2, r3]
 8012bfc:	187b      	adds	r3, r7, r1
 8012bfe:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 8012c00:	187b      	adds	r3, r7, r1
 8012c02:	1dba      	adds	r2, r7, #6
 8012c04:	8812      	ldrh	r2, [r2, #0]
 8012c06:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 8012c08:	4b0c      	ldr	r3, [pc, #48]	; (8012c3c <SetTxContinuousWave+0x90>)
 8012c0a:	4a0e      	ldr	r2, [pc, #56]	; (8012c44 <SetTxContinuousWave+0x98>)
 8012c0c:	589b      	ldr	r3, [r3, r2]
 8012c0e:	781b      	ldrb	r3, [r3, #0]
 8012c10:	187a      	adds	r2, r7, r1
 8012c12:	0011      	movs	r1, r2
 8012c14:	0018      	movs	r0, r3
 8012c16:	f004 fdfc 	bl	8017812 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012c1a:	4a08      	ldr	r2, [pc, #32]	; (8012c3c <SetTxContinuousWave+0x90>)
 8012c1c:	23d0      	movs	r3, #208	; 0xd0
 8012c1e:	009b      	lsls	r3, r3, #2
 8012c20:	58d3      	ldr	r3, [r2, r3]
 8012c22:	2202      	movs	r2, #2
 8012c24:	431a      	orrs	r2, r3
 8012c26:	0011      	movs	r1, r2
 8012c28:	4a04      	ldr	r2, [pc, #16]	; (8012c3c <SetTxContinuousWave+0x90>)
 8012c2a:	23d0      	movs	r3, #208	; 0xd0
 8012c2c:	009b      	lsls	r3, r3, #2
 8012c2e:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8012c30:	2300      	movs	r3, #0
}
 8012c32:	0018      	movs	r0, r3
 8012c34:	46bd      	mov	sp, r7
 8012c36:	b006      	add	sp, #24
 8012c38:	bd80      	pop	{r7, pc}
 8012c3a:	46c0      	nop			; (mov r8, r8)
 8012c3c:	200008ec 	.word	0x200008ec
 8012c40:	00000415 	.word	0x00000415
 8012c44:	00000484 	.word	0x00000484

08012c48 <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b082      	sub	sp, #8
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6039      	str	r1, [r7, #0]
 8012c50:	0011      	movs	r1, r2
 8012c52:	1dbb      	adds	r3, r7, #6
 8012c54:	1c02      	adds	r2, r0, #0
 8012c56:	801a      	strh	r2, [r3, #0]
 8012c58:	1d7b      	adds	r3, r7, #5
 8012c5a:	1c0a      	adds	r2, r1, #0
 8012c5c:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8012c5e:	4b0c      	ldr	r3, [pc, #48]	; (8012c90 <SetTxContinuousWave1+0x48>)
 8012c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c62:	1d7a      	adds	r2, r7, #5
 8012c64:	2100      	movs	r1, #0
 8012c66:	5651      	ldrsb	r1, [r2, r1]
 8012c68:	1dba      	adds	r2, r7, #6
 8012c6a:	8812      	ldrh	r2, [r2, #0]
 8012c6c:	6838      	ldr	r0, [r7, #0]
 8012c6e:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012c70:	4a08      	ldr	r2, [pc, #32]	; (8012c94 <SetTxContinuousWave1+0x4c>)
 8012c72:	23d0      	movs	r3, #208	; 0xd0
 8012c74:	009b      	lsls	r3, r3, #2
 8012c76:	58d3      	ldr	r3, [r2, r3]
 8012c78:	2202      	movs	r2, #2
 8012c7a:	431a      	orrs	r2, r3
 8012c7c:	0011      	movs	r1, r2
 8012c7e:	4a05      	ldr	r2, [pc, #20]	; (8012c94 <SetTxContinuousWave1+0x4c>)
 8012c80:	23d0      	movs	r3, #208	; 0xd0
 8012c82:	009b      	lsls	r3, r3, #2
 8012c84:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8012c86:	2300      	movs	r3, #0
}
 8012c88:	0018      	movs	r0, r3
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	b002      	add	sp, #8
 8012c8e:	bd80      	pop	{r7, pc}
 8012c90:	0801ca04 	.word	0x0801ca04
 8012c94:	200008ec 	.word	0x200008ec

08012c98 <GetCtxs>:

LoRaMacCtxs_t* GetCtxs( void )
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b082      	sub	sp, #8
 8012c9c:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 8012c9e:	4b20      	ldr	r3, [pc, #128]	; (8012d20 <GetCtxs+0x88>)
 8012ca0:	4a20      	ldr	r2, [pc, #128]	; (8012d24 <GetCtxs+0x8c>)
 8012ca2:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 8012ca4:	4b1e      	ldr	r3, [pc, #120]	; (8012d20 <GetCtxs+0x88>)
 8012ca6:	22ee      	movs	r2, #238	; 0xee
 8012ca8:	0052      	lsls	r2, r2, #1
 8012caa:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8012cac:	4b1e      	ldr	r3, [pc, #120]	; (8012d28 <GetCtxs+0x90>)
 8012cae:	0018      	movs	r0, r3
 8012cb0:	f003 fae2 	bl	8016278 <LoRaMacCryptoGetNvmCtx>
 8012cb4:	0002      	movs	r2, r0
 8012cb6:	4b1a      	ldr	r3, [pc, #104]	; (8012d20 <GetCtxs+0x88>)
 8012cb8:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 8012cba:	2300      	movs	r3, #0
 8012cbc:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8012cbe:	4b1b      	ldr	r3, [pc, #108]	; (8012d2c <GetCtxs+0x94>)
 8012cc0:	4a1b      	ldr	r2, [pc, #108]	; (8012d30 <GetCtxs+0x98>)
 8012cc2:	589b      	ldr	r3, [r3, r2]
 8012cc4:	781b      	ldrb	r3, [r3, #0]
 8012cc6:	1d3a      	adds	r2, r7, #4
 8012cc8:	0011      	movs	r1, r2
 8012cca:	0018      	movs	r0, r3
 8012ccc:	f004 fc21 	bl	8017512 <RegionGetNvmCtx>
 8012cd0:	0002      	movs	r2, r0
 8012cd2:	4b13      	ldr	r3, [pc, #76]	; (8012d20 <GetCtxs+0x88>)
 8012cd4:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 8012cd6:	687a      	ldr	r2, [r7, #4]
 8012cd8:	4b11      	ldr	r3, [pc, #68]	; (8012d20 <GetCtxs+0x88>)
 8012cda:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 8012cdc:	4b15      	ldr	r3, [pc, #84]	; (8012d34 <GetCtxs+0x9c>)
 8012cde:	0018      	movs	r0, r3
 8012ce0:	f7fc f9a0 	bl	800f024 <SecureElementGetNvmCtx>
 8012ce4:	0002      	movs	r2, r0
 8012ce6:	4b0e      	ldr	r3, [pc, #56]	; (8012d20 <GetCtxs+0x88>)
 8012ce8:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 8012cea:	4b13      	ldr	r3, [pc, #76]	; (8012d38 <GetCtxs+0xa0>)
 8012cec:	0018      	movs	r0, r3
 8012cee:	f002 fb1d 	bl	801532c <LoRaMacCommandsGetNvmCtx>
 8012cf2:	0002      	movs	r2, r0
 8012cf4:	4b0a      	ldr	r3, [pc, #40]	; (8012d20 <GetCtxs+0x88>)
 8012cf6:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 8012cf8:	4b10      	ldr	r3, [pc, #64]	; (8012d3c <GetCtxs+0xa4>)
 8012cfa:	0018      	movs	r0, r3
 8012cfc:	f002 f8e3 	bl	8014ec6 <LoRaMacClassBGetNvmCtx>
 8012d00:	0002      	movs	r2, r0
 8012d02:	4b07      	ldr	r3, [pc, #28]	; (8012d20 <GetCtxs+0x88>)
 8012d04:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 8012d06:	4b0e      	ldr	r3, [pc, #56]	; (8012d40 <GetCtxs+0xa8>)
 8012d08:	0018      	movs	r0, r3
 8012d0a:	f002 fd01 	bl	8015710 <LoRaMacConfirmQueueGetNvmCtx>
 8012d0e:	0002      	movs	r2, r0
 8012d10:	4b03      	ldr	r3, [pc, #12]	; (8012d20 <GetCtxs+0x88>)
 8012d12:	631a      	str	r2, [r3, #48]	; 0x30
    return &Contexts;
 8012d14:	4b02      	ldr	r3, [pc, #8]	; (8012d20 <GetCtxs+0x88>)
}
 8012d16:	0018      	movs	r0, r3
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	b002      	add	sp, #8
 8012d1c:	bd80      	pop	{r7, pc}
 8012d1e:	46c0      	nop			; (mov r8, r8)
 8012d20:	20001654 	.word	0x20001654
 8012d24:	20000d74 	.word	0x20000d74
 8012d28:	20001668 	.word	0x20001668
 8012d2c:	200008ec 	.word	0x200008ec
 8012d30:	00000484 	.word	0x00000484
 8012d34:	20001670 	.word	0x20001670
 8012d38:	20001678 	.word	0x20001678
 8012d3c:	20001680 	.word	0x20001680
 8012d40:	20001688 	.word	0x20001688

08012d44 <RestoreCtxs>:

LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b084      	sub	sp, #16
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d101      	bne.n	8012d56 <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012d52:	2303      	movs	r3, #3
 8012d54:	e05d      	b.n	8012e12 <RestoreCtxs+0xce>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8012d56:	4a31      	ldr	r2, [pc, #196]	; (8012e1c <RestoreCtxs+0xd8>)
 8012d58:	23d0      	movs	r3, #208	; 0xd0
 8012d5a:	009b      	lsls	r3, r3, #2
 8012d5c:	58d3      	ldr	r3, [r2, r3]
 8012d5e:	2b01      	cmp	r3, #1
 8012d60:	d001      	beq.n	8012d66 <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 8012d62:	2301      	movs	r3, #1
 8012d64:	e055      	b.n	8012e12 <RestoreCtxs+0xce>
    }

    if( contexts->MacNvmCtx != NULL )
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d008      	beq.n	8012d80 <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	6819      	ldr	r1, [r3, #0]
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	685b      	ldr	r3, [r3, #4]
 8012d76:	b29a      	uxth	r2, r3
 8012d78:	4b29      	ldr	r3, [pc, #164]	; (8012e20 <RestoreCtxs+0xdc>)
 8012d7a:	0018      	movs	r0, r3
 8012d7c:	f008 fbf6 	bl	801b56c <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 8012d80:	2108      	movs	r1, #8
 8012d82:	187b      	adds	r3, r7, r1
 8012d84:	2202      	movs	r2, #2
 8012d86:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	689a      	ldr	r2, [r3, #8]
 8012d8c:	187b      	adds	r3, r7, r1
 8012d8e:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012d90:	4b22      	ldr	r3, [pc, #136]	; (8012e1c <RestoreCtxs+0xd8>)
 8012d92:	4a24      	ldr	r2, [pc, #144]	; (8012e24 <RestoreCtxs+0xe0>)
 8012d94:	589b      	ldr	r3, [r3, r2]
 8012d96:	781b      	ldrb	r3, [r3, #0]
 8012d98:	187a      	adds	r2, r7, r1
 8012d9a:	0011      	movs	r1, r2
 8012d9c:	0018      	movs	r0, r3
 8012d9e:	f004 fba3 	bl	80174e8 <RegionInitDefaults>

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	699b      	ldr	r3, [r3, #24]
 8012da6:	0018      	movs	r0, r3
 8012da8:	f7fc f924 	bl	800eff4 <SecureElementRestoreNvmCtx>
 8012dac:	1e03      	subs	r3, r0, #0
 8012dae:	d001      	beq.n	8012db4 <RestoreCtxs+0x70>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012db0:	2311      	movs	r3, #17
 8012db2:	e02e      	b.n	8012e12 <RestoreCtxs+0xce>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	691b      	ldr	r3, [r3, #16]
 8012db8:	0018      	movs	r0, r3
 8012dba:	f003 fa47 	bl	801624c <LoRaMacCryptoRestoreNvmCtx>
 8012dbe:	1e03      	subs	r3, r0, #0
 8012dc0:	d001      	beq.n	8012dc6 <RestoreCtxs+0x82>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012dc2:	2311      	movs	r3, #17
 8012dc4:	e025      	b.n	8012e12 <RestoreCtxs+0xce>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	6a1b      	ldr	r3, [r3, #32]
 8012dca:	0018      	movs	r0, r3
 8012dcc:	f002 fa98 	bl	8015300 <LoRaMacCommandsRestoreNvmCtx>
 8012dd0:	1e03      	subs	r3, r0, #0
 8012dd2:	d001      	beq.n	8012dd8 <RestoreCtxs+0x94>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012dd4:	2313      	movs	r3, #19
 8012dd6:	e01c      	b.n	8012e12 <RestoreCtxs+0xce>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ddc:	0018      	movs	r0, r3
 8012dde:	f002 f869 	bl	8014eb4 <LoRaMacClassBRestoreNvmCtx>
 8012de2:	0003      	movs	r3, r0
 8012de4:	001a      	movs	r2, r3
 8012de6:	2301      	movs	r3, #1
 8012de8:	4053      	eors	r3, r2
 8012dea:	b2db      	uxtb	r3, r3
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d001      	beq.n	8012df4 <RestoreCtxs+0xb0>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 8012df0:	2314      	movs	r3, #20
 8012df2:	e00e      	b.n	8012e12 <RestoreCtxs+0xce>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012df8:	0018      	movs	r0, r3
 8012dfa:	f002 fc73 	bl	80156e4 <LoRaMacConfirmQueueRestoreNvmCtx>
 8012dfe:	0003      	movs	r3, r0
 8012e00:	001a      	movs	r2, r3
 8012e02:	2301      	movs	r3, #1
 8012e04:	4053      	eors	r3, r2
 8012e06:	b2db      	uxtb	r3, r3
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d001      	beq.n	8012e10 <RestoreCtxs+0xcc>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 8012e0c:	2315      	movs	r3, #21
 8012e0e:	e000      	b.n	8012e12 <RestoreCtxs+0xce>
    }

    return LORAMAC_STATUS_OK;
 8012e10:	2300      	movs	r3, #0
}
 8012e12:	0018      	movs	r0, r3
 8012e14:	46bd      	mov	sp, r7
 8012e16:	b004      	add	sp, #16
 8012e18:	bd80      	pop	{r7, pc}
 8012e1a:	46c0      	nop			; (mov r8, r8)
 8012e1c:	200008ec 	.word	0x200008ec
 8012e20:	20000d74 	.word	0x20000d74
 8012e24:	00000484 	.word	0x00000484

08012e28 <DetermineFrameType>:

LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b082      	sub	sp, #8
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
 8012e30:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d002      	beq.n	8012e3e <DetermineFrameType+0x16>
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d101      	bne.n	8012e42 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012e3e:	2303      	movs	r3, #3
 8012e40:	e03b      	b.n	8012eba <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	7b1b      	ldrb	r3, [r3, #12]
 8012e46:	220f      	movs	r2, #15
 8012e48:	4013      	ands	r3, r2
 8012e4a:	b2db      	uxtb	r3, r3
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d008      	beq.n	8012e62 <DetermineFrameType+0x3a>
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2220      	movs	r2, #32
 8012e54:	5c9b      	ldrb	r3, [r3, r2]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d003      	beq.n	8012e62 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8012e5a:	683b      	ldr	r3, [r7, #0]
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	701a      	strb	r2, [r3, #0]
 8012e60:	e02a      	b.n	8012eb8 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	2228      	movs	r2, #40	; 0x28
 8012e66:	5c9b      	ldrb	r3, [r3, r2]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d103      	bne.n	8012e74 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	2201      	movs	r2, #1
 8012e70:	701a      	strb	r2, [r3, #0]
 8012e72:	e021      	b.n	8012eb8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	7b1b      	ldrb	r3, [r3, #12]
 8012e78:	220f      	movs	r2, #15
 8012e7a:	4013      	ands	r3, r2
 8012e7c:	b2db      	uxtb	r3, r3
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d108      	bne.n	8012e94 <DetermineFrameType+0x6c>
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2220      	movs	r2, #32
 8012e86:	5c9b      	ldrb	r3, [r3, r2]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d103      	bne.n	8012e94 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	2202      	movs	r2, #2
 8012e90:	701a      	strb	r2, [r3, #0]
 8012e92:	e011      	b.n	8012eb8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	7b1b      	ldrb	r3, [r3, #12]
 8012e98:	220f      	movs	r2, #15
 8012e9a:	4013      	ands	r3, r2
 8012e9c:	b2db      	uxtb	r3, r3
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d108      	bne.n	8012eb4 <DetermineFrameType+0x8c>
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	2220      	movs	r2, #32
 8012ea6:	5c9b      	ldrb	r3, [r3, r2]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d003      	beq.n	8012eb4 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	2203      	movs	r2, #3
 8012eb0:	701a      	strb	r2, [r3, #0]
 8012eb2:	e001      	b.n	8012eb8 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8012eb4:	2317      	movs	r3, #23
 8012eb6:	e000      	b.n	8012eba <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8012eb8:	2300      	movs	r3, #0
}
 8012eba:	0018      	movs	r0, r3
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	b002      	add	sp, #8
 8012ec0:	bd80      	pop	{r7, pc}
	...

08012ec4 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8012ec8:	4a14      	ldr	r2, [pc, #80]	; (8012f1c <CheckRetransUnconfirmedUplink+0x58>)
 8012eca:	2382      	movs	r3, #130	; 0x82
 8012ecc:	00db      	lsls	r3, r3, #3
 8012ece:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8012ed0:	4b12      	ldr	r3, [pc, #72]	; (8012f1c <CheckRetransUnconfirmedUplink+0x58>)
 8012ed2:	4913      	ldr	r1, [pc, #76]	; (8012f20 <CheckRetransUnconfirmedUplink+0x5c>)
 8012ed4:	5859      	ldr	r1, [r3, r1]
 8012ed6:	238c      	movs	r3, #140	; 0x8c
 8012ed8:	005b      	lsls	r3, r3, #1
 8012eda:	5ccb      	ldrb	r3, [r1, r3]
    if( MacCtx.ChannelsNbTransCounter >=
 8012edc:	429a      	cmp	r2, r3
 8012ede:	d301      	bcc.n	8012ee4 <CheckRetransUnconfirmedUplink+0x20>
    {
        return true;
 8012ee0:	2301      	movs	r3, #1
 8012ee2:	e018      	b.n	8012f16 <CheckRetransUnconfirmedUplink+0x52>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012ee4:	4b0d      	ldr	r3, [pc, #52]	; (8012f1c <CheckRetransUnconfirmedUplink+0x58>)
 8012ee6:	4a0f      	ldr	r2, [pc, #60]	; (8012f24 <CheckRetransUnconfirmedUplink+0x60>)
 8012ee8:	5c9b      	ldrb	r3, [r3, r2]
 8012eea:	2202      	movs	r2, #2
 8012eec:	4013      	ands	r3, r2
 8012eee:	b2db      	uxtb	r3, r3
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d00f      	beq.n	8012f14 <CheckRetransUnconfirmedUplink+0x50>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8012ef4:	4b09      	ldr	r3, [pc, #36]	; (8012f1c <CheckRetransUnconfirmedUplink+0x58>)
 8012ef6:	4a0a      	ldr	r2, [pc, #40]	; (8012f20 <CheckRetransUnconfirmedUplink+0x5c>)
 8012ef8:	589b      	ldr	r3, [r3, r2]
 8012efa:	22f0      	movs	r2, #240	; 0xf0
 8012efc:	5c9b      	ldrb	r3, [r3, r2]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d101      	bne.n	8012f06 <CheckRetransUnconfirmedUplink+0x42>
        {
            return true;
 8012f02:	2301      	movs	r3, #1
 8012f04:	e007      	b.n	8012f16 <CheckRetransUnconfirmedUplink+0x52>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8012f06:	4b05      	ldr	r3, [pc, #20]	; (8012f1c <CheckRetransUnconfirmedUplink+0x58>)
 8012f08:	4a07      	ldr	r2, [pc, #28]	; (8012f28 <CheckRetransUnconfirmedUplink+0x64>)
 8012f0a:	5c9b      	ldrb	r3, [r3, r2]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d101      	bne.n	8012f14 <CheckRetransUnconfirmedUplink+0x50>
            {
                return true;
 8012f10:	2301      	movs	r3, #1
 8012f12:	e000      	b.n	8012f16 <CheckRetransUnconfirmedUplink+0x52>
            }
        }
    }
    return false;
 8012f14:	2300      	movs	r3, #0
}
 8012f16:	0018      	movs	r0, r3
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}
 8012f1c:	200008ec 	.word	0x200008ec
 8012f20:	00000484 	.word	0x00000484
 8012f24:	00000481 	.word	0x00000481
 8012f28:	0000042d 	.word	0x0000042d

08012f2c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012f30:	4b0e      	ldr	r3, [pc, #56]	; (8012f6c <CheckRetransConfirmedUplink+0x40>)
 8012f32:	4a0f      	ldr	r2, [pc, #60]	; (8012f70 <CheckRetransConfirmedUplink+0x44>)
 8012f34:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.AckTimeoutRetries )
 8012f36:	4b0d      	ldr	r3, [pc, #52]	; (8012f6c <CheckRetransConfirmedUplink+0x40>)
 8012f38:	490e      	ldr	r1, [pc, #56]	; (8012f74 <CheckRetransConfirmedUplink+0x48>)
 8012f3a:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d301      	bcc.n	8012f44 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8012f40:	2301      	movs	r3, #1
 8012f42:	e010      	b.n	8012f66 <CheckRetransConfirmedUplink+0x3a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012f44:	4b09      	ldr	r3, [pc, #36]	; (8012f6c <CheckRetransConfirmedUplink+0x40>)
 8012f46:	4a0c      	ldr	r2, [pc, #48]	; (8012f78 <CheckRetransConfirmedUplink+0x4c>)
 8012f48:	5c9b      	ldrb	r3, [r3, r2]
 8012f4a:	2202      	movs	r2, #2
 8012f4c:	4013      	ands	r3, r2
 8012f4e:	b2db      	uxtb	r3, r3
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d007      	beq.n	8012f64 <CheckRetransConfirmedUplink+0x38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8012f54:	4a05      	ldr	r2, [pc, #20]	; (8012f6c <CheckRetransConfirmedUplink+0x40>)
 8012f56:	2388      	movs	r3, #136	; 0x88
 8012f58:	00db      	lsls	r3, r3, #3
 8012f5a:	5cd3      	ldrb	r3, [r2, r3]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d001      	beq.n	8012f64 <CheckRetransConfirmedUplink+0x38>
        {
            return true;
 8012f60:	2301      	movs	r3, #1
 8012f62:	e000      	b.n	8012f66 <CheckRetransConfirmedUplink+0x3a>
        }
    }
    return false;
 8012f64:	2300      	movs	r3, #0
}
 8012f66:	0018      	movs	r0, r3
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}
 8012f6c:	200008ec 	.word	0x200008ec
 8012f70:	00000412 	.word	0x00000412
 8012f74:	00000411 	.word	0x00000411
 8012f78:	00000481 	.word	0x00000481

08012f7c <StopRetransmission>:

static bool StopRetransmission( void )
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012f80:	4b1e      	ldr	r3, [pc, #120]	; (8012ffc <StopRetransmission+0x80>)
 8012f82:	4a1f      	ldr	r2, [pc, #124]	; (8013000 <StopRetransmission+0x84>)
 8012f84:	5c9b      	ldrb	r3, [r3, r2]
 8012f86:	2202      	movs	r2, #2
 8012f88:	4013      	ands	r3, r2
 8012f8a:	b2db      	uxtb	r3, r3
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d009      	beq.n	8012fa4 <StopRetransmission+0x28>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8012f90:	4b1a      	ldr	r3, [pc, #104]	; (8012ffc <StopRetransmission+0x80>)
 8012f92:	4a1c      	ldr	r2, [pc, #112]	; (8013004 <StopRetransmission+0x88>)
 8012f94:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d013      	beq.n	8012fc2 <StopRetransmission+0x46>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
 8012f9a:	4b18      	ldr	r3, [pc, #96]	; (8012ffc <StopRetransmission+0x80>)
 8012f9c:	4a19      	ldr	r2, [pc, #100]	; (8013004 <StopRetransmission+0x88>)
 8012f9e:	5c9b      	ldrb	r3, [r3, r2]
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8012fa0:	2b01      	cmp	r3, #1
 8012fa2:	d00e      	beq.n	8012fc2 <StopRetransmission+0x46>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8012fa4:	4b15      	ldr	r3, [pc, #84]	; (8012ffc <StopRetransmission+0x80>)
 8012fa6:	4a18      	ldr	r2, [pc, #96]	; (8013008 <StopRetransmission+0x8c>)
 8012fa8:	589b      	ldr	r3, [r3, r2]
 8012faa:	22f2      	movs	r2, #242	; 0xf2
 8012fac:	5c9b      	ldrb	r3, [r3, r2]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d007      	beq.n	8012fc2 <StopRetransmission+0x46>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8012fb2:	4b12      	ldr	r3, [pc, #72]	; (8012ffc <StopRetransmission+0x80>)
 8012fb4:	4a14      	ldr	r2, [pc, #80]	; (8013008 <StopRetransmission+0x8c>)
 8012fb6:	589b      	ldr	r3, [r3, r2]
 8012fb8:	22f4      	movs	r2, #244	; 0xf4
 8012fba:	589a      	ldr	r2, [r3, r2]
 8012fbc:	3201      	adds	r2, #1
 8012fbe:	21f4      	movs	r1, #244	; 0xf4
 8012fc0:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8012fc2:	4a0e      	ldr	r2, [pc, #56]	; (8012ffc <StopRetransmission+0x80>)
 8012fc4:	2382      	movs	r3, #130	; 0x82
 8012fc6:	00db      	lsls	r3, r3, #3
 8012fc8:	2100      	movs	r1, #0
 8012fca:	54d1      	strb	r1, [r2, r3]
    MacCtx.NodeAckRequested = false;
 8012fcc:	4b0b      	ldr	r3, [pc, #44]	; (8012ffc <StopRetransmission+0x80>)
 8012fce:	4a0f      	ldr	r2, [pc, #60]	; (801300c <StopRetransmission+0x90>)
 8012fd0:	2100      	movs	r1, #0
 8012fd2:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 8012fd4:	4b09      	ldr	r3, [pc, #36]	; (8012ffc <StopRetransmission+0x80>)
 8012fd6:	4a0e      	ldr	r2, [pc, #56]	; (8013010 <StopRetransmission+0x94>)
 8012fd8:	2100      	movs	r1, #0
 8012fda:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012fdc:	4a07      	ldr	r2, [pc, #28]	; (8012ffc <StopRetransmission+0x80>)
 8012fde:	23d0      	movs	r3, #208	; 0xd0
 8012fe0:	009b      	lsls	r3, r3, #2
 8012fe2:	58d3      	ldr	r3, [r2, r3]
 8012fe4:	2202      	movs	r2, #2
 8012fe6:	4393      	bics	r3, r2
 8012fe8:	0019      	movs	r1, r3
 8012fea:	4a04      	ldr	r2, [pc, #16]	; (8012ffc <StopRetransmission+0x80>)
 8012fec:	23d0      	movs	r3, #208	; 0xd0
 8012fee:	009b      	lsls	r3, r3, #2
 8012ff0:	50d1      	str	r1, [r2, r3]

    return true;
 8012ff2:	2301      	movs	r3, #1
}
 8012ff4:	0018      	movs	r0, r3
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}
 8012ffa:	46c0      	nop			; (mov r8, r8)
 8012ffc:	200008ec 	.word	0x200008ec
 8013000:	00000481 	.word	0x00000481
 8013004:	0000042d 	.word	0x0000042d
 8013008:	00000484 	.word	0x00000484
 801300c:	00000414 	.word	0x00000414
 8013010:	00000413 	.word	0x00000413

08013014 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b082      	sub	sp, #8
 8013018:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 801301a:	4b21      	ldr	r3, [pc, #132]	; (80130a0 <AckTimeoutRetriesProcess+0x8c>)
 801301c:	4a21      	ldr	r2, [pc, #132]	; (80130a4 <AckTimeoutRetriesProcess+0x90>)
 801301e:	5c9a      	ldrb	r2, [r3, r2]
 8013020:	4b1f      	ldr	r3, [pc, #124]	; (80130a0 <AckTimeoutRetriesProcess+0x8c>)
 8013022:	4921      	ldr	r1, [pc, #132]	; (80130a8 <AckTimeoutRetriesProcess+0x94>)
 8013024:	5c5b      	ldrb	r3, [r3, r1]
 8013026:	429a      	cmp	r2, r3
 8013028:	d236      	bcs.n	8013098 <AckTimeoutRetriesProcess+0x84>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 801302a:	4b1d      	ldr	r3, [pc, #116]	; (80130a0 <AckTimeoutRetriesProcess+0x8c>)
 801302c:	4a1d      	ldr	r2, [pc, #116]	; (80130a4 <AckTimeoutRetriesProcess+0x90>)
 801302e:	5c9b      	ldrb	r3, [r3, r2]
 8013030:	3301      	adds	r3, #1
 8013032:	b2d9      	uxtb	r1, r3
 8013034:	4b1a      	ldr	r3, [pc, #104]	; (80130a0 <AckTimeoutRetriesProcess+0x8c>)
 8013036:	4a1b      	ldr	r2, [pc, #108]	; (80130a4 <AckTimeoutRetriesProcess+0x90>)
 8013038:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 801303a:	4b19      	ldr	r3, [pc, #100]	; (80130a0 <AckTimeoutRetriesProcess+0x8c>)
 801303c:	4a19      	ldr	r2, [pc, #100]	; (80130a4 <AckTimeoutRetriesProcess+0x90>)
 801303e:	5c9b      	ldrb	r3, [r3, r2]
 8013040:	2201      	movs	r2, #1
 8013042:	4013      	ands	r3, r2
 8013044:	b2db      	uxtb	r3, r3
 8013046:	2b00      	cmp	r3, #0
 8013048:	d026      	beq.n	8013098 <AckTimeoutRetriesProcess+0x84>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801304a:	1d3b      	adds	r3, r7, #4
 801304c:	2222      	movs	r2, #34	; 0x22
 801304e:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013050:	4b13      	ldr	r3, [pc, #76]	; (80130a0 <AckTimeoutRetriesProcess+0x8c>)
 8013052:	4a16      	ldr	r2, [pc, #88]	; (80130ac <AckTimeoutRetriesProcess+0x98>)
 8013054:	589a      	ldr	r2, [r3, r2]
 8013056:	2396      	movs	r3, #150	; 0x96
 8013058:	005b      	lsls	r3, r3, #1
 801305a:	5cd2      	ldrb	r2, [r2, r3]
 801305c:	1d3b      	adds	r3, r7, #4
 801305e:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8013060:	4b0f      	ldr	r3, [pc, #60]	; (80130a0 <AckTimeoutRetriesProcess+0x8c>)
 8013062:	4a12      	ldr	r2, [pc, #72]	; (80130ac <AckTimeoutRetriesProcess+0x98>)
 8013064:	589b      	ldr	r3, [r3, r2]
 8013066:	22f9      	movs	r2, #249	; 0xf9
 8013068:	569a      	ldrsb	r2, [r3, r2]
 801306a:	1d3b      	adds	r3, r7, #4
 801306c:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801306e:	4b0c      	ldr	r3, [pc, #48]	; (80130a0 <AckTimeoutRetriesProcess+0x8c>)
 8013070:	4a0e      	ldr	r2, [pc, #56]	; (80130ac <AckTimeoutRetriesProcess+0x98>)
 8013072:	589b      	ldr	r3, [r3, r2]
 8013074:	781b      	ldrb	r3, [r3, #0]
 8013076:	1d3a      	adds	r2, r7, #4
 8013078:	0011      	movs	r1, r2
 801307a:	0018      	movs	r0, r3
 801307c:	f004 f9f8 	bl	8017470 <RegionGetPhyParam>
 8013080:	0003      	movs	r3, r0
 8013082:	001a      	movs	r2, r3
 8013084:	003b      	movs	r3, r7
 8013086:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8013088:	003b      	movs	r3, r7
 801308a:	6819      	ldr	r1, [r3, #0]
 801308c:	4b04      	ldr	r3, [pc, #16]	; (80130a0 <AckTimeoutRetriesProcess+0x8c>)
 801308e:	4a07      	ldr	r2, [pc, #28]	; (80130ac <AckTimeoutRetriesProcess+0x98>)
 8013090:	589b      	ldr	r3, [r3, r2]
 8013092:	b249      	sxtb	r1, r1
 8013094:	22f9      	movs	r2, #249	; 0xf9
 8013096:	5499      	strb	r1, [r3, r2]
        }
    }
}
 8013098:	46c0      	nop			; (mov r8, r8)
 801309a:	46bd      	mov	sp, r7
 801309c:	b002      	add	sp, #8
 801309e:	bd80      	pop	{r7, pc}
 80130a0:	200008ec 	.word	0x200008ec
 80130a4:	00000412 	.word	0x00000412
 80130a8:	00000411 	.word	0x00000411
 80130ac:	00000484 	.word	0x00000484

080130b0 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b082      	sub	sp, #8
 80130b4:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 80130b6:	4a16      	ldr	r2, [pc, #88]	; (8013110 <AckTimeoutRetriesFinalize+0x60>)
 80130b8:	2388      	movs	r3, #136	; 0x88
 80130ba:	00db      	lsls	r3, r3, #3
 80130bc:	5cd3      	ldrb	r3, [r2, r3]
 80130be:	2201      	movs	r2, #1
 80130c0:	4053      	eors	r3, r2
 80130c2:	b2db      	uxtb	r3, r3
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d018      	beq.n	80130fa <AckTimeoutRetriesFinalize+0x4a>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 80130c8:	003b      	movs	r3, r7
 80130ca:	2201      	movs	r2, #1
 80130cc:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 80130ce:	4b11      	ldr	r3, [pc, #68]	; (8013114 <AckTimeoutRetriesFinalize+0x64>)
 80130d0:	689a      	ldr	r2, [r3, #8]
 80130d2:	003b      	movs	r3, r7
 80130d4:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80130d6:	4b0e      	ldr	r3, [pc, #56]	; (8013110 <AckTimeoutRetriesFinalize+0x60>)
 80130d8:	4a0f      	ldr	r2, [pc, #60]	; (8013118 <AckTimeoutRetriesFinalize+0x68>)
 80130da:	589b      	ldr	r3, [r3, r2]
 80130dc:	781b      	ldrb	r3, [r3, #0]
 80130de:	003a      	movs	r2, r7
 80130e0:	0011      	movs	r1, r2
 80130e2:	0018      	movs	r0, r3
 80130e4:	f004 fa00 	bl	80174e8 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 80130e8:	4b09      	ldr	r3, [pc, #36]	; (8013110 <AckTimeoutRetriesFinalize+0x60>)
 80130ea:	4a0c      	ldr	r2, [pc, #48]	; (801311c <AckTimeoutRetriesFinalize+0x6c>)
 80130ec:	2100      	movs	r1, #0
 80130ee:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 80130f0:	4a07      	ldr	r2, [pc, #28]	; (8013110 <AckTimeoutRetriesFinalize+0x60>)
 80130f2:	2388      	movs	r3, #136	; 0x88
 80130f4:	00db      	lsls	r3, r3, #3
 80130f6:	2100      	movs	r1, #0
 80130f8:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80130fa:	4b05      	ldr	r3, [pc, #20]	; (8013110 <AckTimeoutRetriesFinalize+0x60>)
 80130fc:	4a08      	ldr	r2, [pc, #32]	; (8013120 <AckTimeoutRetriesFinalize+0x70>)
 80130fe:	5c99      	ldrb	r1, [r3, r2]
 8013100:	4b03      	ldr	r3, [pc, #12]	; (8013110 <AckTimeoutRetriesFinalize+0x60>)
 8013102:	4a08      	ldr	r2, [pc, #32]	; (8013124 <AckTimeoutRetriesFinalize+0x74>)
 8013104:	5499      	strb	r1, [r3, r2]
}
 8013106:	46c0      	nop			; (mov r8, r8)
 8013108:	46bd      	mov	sp, r7
 801310a:	b002      	add	sp, #8
 801310c:	bd80      	pop	{r7, pc}
 801310e:	46c0      	nop			; (mov r8, r8)
 8013110:	200008ec 	.word	0x200008ec
 8013114:	20001654 	.word	0x20001654
 8013118:	00000484 	.word	0x00000484
 801311c:	00000414 	.word	0x00000414
 8013120:	00000412 	.word	0x00000412
 8013124:	00000441 	.word	0x00000441

08013128 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b082      	sub	sp, #8
 801312c:	af00      	add	r7, sp, #0
 801312e:	0002      	movs	r2, r0
 8013130:	1dfb      	adds	r3, r7, #7
 8013132:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8013134:	4a0c      	ldr	r2, [pc, #48]	; (8013168 <CallNvmCtxCallback+0x40>)
 8013136:	23d2      	movs	r3, #210	; 0xd2
 8013138:	009b      	lsls	r3, r3, #2
 801313a:	58d3      	ldr	r3, [r2, r3]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d00f      	beq.n	8013160 <CallNvmCtxCallback+0x38>
 8013140:	4a09      	ldr	r2, [pc, #36]	; (8013168 <CallNvmCtxCallback+0x40>)
 8013142:	23d2      	movs	r3, #210	; 0xd2
 8013144:	009b      	lsls	r3, r3, #2
 8013146:	58d3      	ldr	r3, [r2, r3]
 8013148:	689b      	ldr	r3, [r3, #8]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d008      	beq.n	8013160 <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 801314e:	4a06      	ldr	r2, [pc, #24]	; (8013168 <CallNvmCtxCallback+0x40>)
 8013150:	23d2      	movs	r3, #210	; 0xd2
 8013152:	009b      	lsls	r3, r3, #2
 8013154:	58d3      	ldr	r3, [r2, r3]
 8013156:	689b      	ldr	r3, [r3, #8]
 8013158:	1dfa      	adds	r2, r7, #7
 801315a:	7812      	ldrb	r2, [r2, #0]
 801315c:	0010      	movs	r0, r2
 801315e:	4798      	blx	r3
    }
}
 8013160:	46c0      	nop			; (mov r8, r8)
 8013162:	46bd      	mov	sp, r7
 8013164:	b002      	add	sp, #8
 8013166:	bd80      	pop	{r7, pc}
 8013168:	200008ec 	.word	0x200008ec

0801316c <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 801316c:	b580      	push	{r7, lr}
 801316e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8013170:	2000      	movs	r0, #0
 8013172:	f7ff ffd9 	bl	8013128 <CallNvmCtxCallback>
}
 8013176:	46c0      	nop			; (mov r8, r8)
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}

0801317c <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 801317c:	b580      	push	{r7, lr}
 801317e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8013180:	2001      	movs	r0, #1
 8013182:	f7ff ffd1 	bl	8013128 <CallNvmCtxCallback>
}
 8013186:	46c0      	nop			; (mov r8, r8)
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}

0801318c <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 801318c:	b580      	push	{r7, lr}
 801318e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8013190:	2002      	movs	r0, #2
 8013192:	f7ff ffc9 	bl	8013128 <CallNvmCtxCallback>
}
 8013196:	46c0      	nop			; (mov r8, r8)
 8013198:	46bd      	mov	sp, r7
 801319a:	bd80      	pop	{r7, pc}

0801319c <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 801319c:	b580      	push	{r7, lr}
 801319e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 80131a0:	2003      	movs	r0, #3
 80131a2:	f7ff ffc1 	bl	8013128 <CallNvmCtxCallback>
}
 80131a6:	46c0      	nop			; (mov r8, r8)
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}

080131ac <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 80131b0:	2004      	movs	r0, #4
 80131b2:	f7ff ffb9 	bl	8013128 <CallNvmCtxCallback>
}
 80131b6:	46c0      	nop			; (mov r8, r8)
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}

080131bc <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 80131c0:	2005      	movs	r0, #5
 80131c2:	f7ff ffb1 	bl	8013128 <CallNvmCtxCallback>
}
 80131c6:	46c0      	nop			; (mov r8, r8)
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}

080131cc <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 80131d0:	2006      	movs	r0, #6
 80131d2:	f7ff ffa9 	bl	8013128 <CallNvmCtxCallback>
}
 80131d6:	46c0      	nop			; (mov r8, r8)
 80131d8:	46bd      	mov	sp, r7
 80131da:	bd80      	pop	{r7, pc}

080131dc <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80131e0:	4b0a      	ldr	r3, [pc, #40]	; (801320c <IsRequestPending+0x30>)
 80131e2:	4a0b      	ldr	r2, [pc, #44]	; (8013210 <IsRequestPending+0x34>)
 80131e4:	5c9b      	ldrb	r3, [r3, r2]
 80131e6:	2204      	movs	r2, #4
 80131e8:	4013      	ands	r3, r2
 80131ea:	b2db      	uxtb	r3, r3
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d107      	bne.n	8013200 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80131f0:	4b06      	ldr	r3, [pc, #24]	; (801320c <IsRequestPending+0x30>)
 80131f2:	4a07      	ldr	r2, [pc, #28]	; (8013210 <IsRequestPending+0x34>)
 80131f4:	5c9b      	ldrb	r3, [r3, r2]
 80131f6:	2201      	movs	r2, #1
 80131f8:	4013      	ands	r3, r2
 80131fa:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d001      	beq.n	8013204 <IsRequestPending+0x28>
    {
        return 1;
 8013200:	2301      	movs	r3, #1
 8013202:	e000      	b.n	8013206 <IsRequestPending+0x2a>
    }
    return 0;
 8013204:	2300      	movs	r3, #0
}
 8013206:	0018      	movs	r0, r3
 8013208:	46bd      	mov	sp, r7
 801320a:	bd80      	pop	{r7, pc}
 801320c:	200008ec 	.word	0x200008ec
 8013210:	00000481 	.word	0x00000481

08013214 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8013214:	b5b0      	push	{r4, r5, r7, lr}
 8013216:	b094      	sub	sp, #80	; 0x50
 8013218:	af00      	add	r7, sp, #0
 801321a:	60f8      	str	r0, [r7, #12]
 801321c:	60b9      	str	r1, [r7, #8]
 801321e:	1dfb      	adds	r3, r7, #7
 8013220:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d002      	beq.n	801322e <LoRaMacInitialization+0x1a>
 8013228:	68bb      	ldr	r3, [r7, #8]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d101      	bne.n	8013232 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801322e:	2303      	movs	r3, #3
 8013230:	e360      	b.n	80138f4 <LoRaMacInitialization+0x6e0>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d00b      	beq.n	8013252 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801323e:	2b00      	cmp	r3, #0
 8013240:	d007      	beq.n	8013252 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8013246:	2b00      	cmp	r3, #0
 8013248:	d003      	beq.n	8013252 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801324e:	2b00      	cmp	r3, #0
 8013250:	d101      	bne.n	8013256 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013252:	2303      	movs	r3, #3
 8013254:	e34e      	b.n	80138f4 <LoRaMacInitialization+0x6e0>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8013256:	1dfb      	adds	r3, r7, #7
 8013258:	781b      	ldrb	r3, [r3, #0]
 801325a:	0018      	movs	r0, r3
 801325c:	f004 f8f7 	bl	801744e <RegionIsActive>
 8013260:	0003      	movs	r3, r0
 8013262:	001a      	movs	r2, r3
 8013264:	2301      	movs	r3, #1
 8013266:	4053      	eors	r3, r2
 8013268:	b2db      	uxtb	r3, r3
 801326a:	2b00      	cmp	r3, #0
 801326c:	d001      	beq.n	8013272 <LoRaMacInitialization+0x5e>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801326e:	2309      	movs	r3, #9
 8013270:	e340      	b.n	80138f4 <LoRaMacInitialization+0x6e0>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8013272:	4afd      	ldr	r2, [pc, #1012]	; (8013668 <LoRaMacInitialization+0x454>)
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	0011      	movs	r1, r2
 8013278:	0018      	movs	r0, r3
 801327a:	f002 fa03 	bl	8015684 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 801327e:	23ee      	movs	r3, #238	; 0xee
 8013280:	005a      	lsls	r2, r3, #1
 8013282:	4bfa      	ldr	r3, [pc, #1000]	; (801366c <LoRaMacInitialization+0x458>)
 8013284:	2100      	movs	r1, #0
 8013286:	0018      	movs	r0, r3
 8013288:	f008 f9ac 	bl	801b5e4 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 801328c:	2391      	movs	r3, #145	; 0x91
 801328e:	00da      	lsls	r2, r3, #3
 8013290:	4bf7      	ldr	r3, [pc, #988]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013292:	2100      	movs	r1, #0
 8013294:	0018      	movs	r0, r3
 8013296:	f008 f9a5 	bl	801b5e4 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 801329a:	4bf5      	ldr	r3, [pc, #980]	; (8013670 <LoRaMacInitialization+0x45c>)
 801329c:	49f5      	ldr	r1, [pc, #980]	; (8013674 <LoRaMacInitialization+0x460>)
 801329e:	4af3      	ldr	r2, [pc, #972]	; (801366c <LoRaMacInitialization+0x458>)
 80132a0:	505a      	str	r2, [r3, r1]

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 80132a2:	4bf3      	ldr	r3, [pc, #972]	; (8013670 <LoRaMacInitialization+0x45c>)
 80132a4:	4af4      	ldr	r2, [pc, #976]	; (8013678 <LoRaMacInitialization+0x464>)
 80132a6:	2101      	movs	r1, #1
 80132a8:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetries = 1;
 80132aa:	4bf1      	ldr	r3, [pc, #964]	; (8013670 <LoRaMacInitialization+0x45c>)
 80132ac:	4af3      	ldr	r2, [pc, #972]	; (801367c <LoRaMacInitialization+0x468>)
 80132ae:	2101      	movs	r1, #1
 80132b0:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 80132b2:	4bef      	ldr	r3, [pc, #956]	; (8013670 <LoRaMacInitialization+0x45c>)
 80132b4:	4aef      	ldr	r2, [pc, #956]	; (8013674 <LoRaMacInitialization+0x460>)
 80132b6:	589b      	ldr	r3, [r3, r2]
 80132b8:	1dfa      	adds	r2, r7, #7
 80132ba:	7812      	ldrb	r2, [r2, #0]
 80132bc:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 80132be:	4bec      	ldr	r3, [pc, #944]	; (8013670 <LoRaMacInitialization+0x45c>)
 80132c0:	4aec      	ldr	r2, [pc, #944]	; (8013674 <LoRaMacInitialization+0x460>)
 80132c2:	589b      	ldr	r3, [r3, r2]
 80132c4:	22f0      	movs	r2, #240	; 0xf0
 80132c6:	2100      	movs	r1, #0
 80132c8:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 80132ca:	4be9      	ldr	r3, [pc, #932]	; (8013670 <LoRaMacInitialization+0x45c>)
 80132cc:	4ae9      	ldr	r2, [pc, #932]	; (8013674 <LoRaMacInitialization+0x460>)
 80132ce:	589a      	ldr	r2, [r3, r2]
 80132d0:	2340      	movs	r3, #64	; 0x40
 80132d2:	33ff      	adds	r3, #255	; 0xff
 80132d4:	2100      	movs	r1, #0
 80132d6:	54d1      	strb	r1, [r2, r3]

    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
 80132d8:	211c      	movs	r1, #28
 80132da:	187b      	adds	r3, r7, r1
 80132dc:	2201      	movs	r2, #1
 80132de:	70da      	strb	r2, [r3, #3]
    lrWanVersion.Fields.Minor    = 0;
 80132e0:	187b      	adds	r3, r7, r1
 80132e2:	2200      	movs	r2, #0
 80132e4:	709a      	strb	r2, [r3, #2]
    lrWanVersion.Fields.Revision = 3;
 80132e6:	187b      	adds	r3, r7, r1
 80132e8:	2203      	movs	r2, #3
 80132ea:	705a      	strb	r2, [r3, #1]
    lrWanVersion.Fields.Rfu      = 0;
 80132ec:	187b      	adds	r3, r7, r1
 80132ee:	2200      	movs	r2, #0
 80132f0:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->Version = lrWanVersion;
 80132f2:	4bdf      	ldr	r3, [pc, #892]	; (8013670 <LoRaMacInitialization+0x45c>)
 80132f4:	4adf      	ldr	r2, [pc, #892]	; (8013674 <LoRaMacInitialization+0x460>)
 80132f6:	589a      	ldr	r2, [r3, r2]
 80132f8:	23e8      	movs	r3, #232	; 0xe8
 80132fa:	005b      	lsls	r3, r3, #1
 80132fc:	69f9      	ldr	r1, [r7, #28]
 80132fe:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8013300:	254c      	movs	r5, #76	; 0x4c
 8013302:	197b      	adds	r3, r7, r5
 8013304:	220f      	movs	r2, #15
 8013306:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013308:	4bd9      	ldr	r3, [pc, #868]	; (8013670 <LoRaMacInitialization+0x45c>)
 801330a:	4ada      	ldr	r2, [pc, #872]	; (8013674 <LoRaMacInitialization+0x460>)
 801330c:	589b      	ldr	r3, [r3, r2]
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	197a      	adds	r2, r7, r5
 8013312:	0011      	movs	r1, r2
 8013314:	0018      	movs	r0, r3
 8013316:	f004 f8ab 	bl	8017470 <RegionGetPhyParam>
 801331a:	0003      	movs	r3, r0
 801331c:	001a      	movs	r2, r3
 801331e:	2448      	movs	r4, #72	; 0x48
 8013320:	193b      	adds	r3, r7, r4
 8013322:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8013324:	193b      	adds	r3, r7, r4
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	4ad1      	ldr	r2, [pc, #836]	; (8013670 <LoRaMacInitialization+0x45c>)
 801332a:	49d2      	ldr	r1, [pc, #840]	; (8013674 <LoRaMacInitialization+0x460>)
 801332c:	5852      	ldr	r2, [r2, r1]
 801332e:	1e59      	subs	r1, r3, #1
 8013330:	418b      	sbcs	r3, r1
 8013332:	b2d9      	uxtb	r1, r3
 8013334:	233e      	movs	r3, #62	; 0x3e
 8013336:	33ff      	adds	r3, #255	; 0xff
 8013338:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 801333a:	197b      	adds	r3, r7, r5
 801333c:	220a      	movs	r2, #10
 801333e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013340:	4bcb      	ldr	r3, [pc, #812]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013342:	4acc      	ldr	r2, [pc, #816]	; (8013674 <LoRaMacInitialization+0x460>)
 8013344:	589b      	ldr	r3, [r3, r2]
 8013346:	781b      	ldrb	r3, [r3, #0]
 8013348:	197a      	adds	r2, r7, r5
 801334a:	0011      	movs	r1, r2
 801334c:	0018      	movs	r0, r3
 801334e:	f004 f88f 	bl	8017470 <RegionGetPhyParam>
 8013352:	0003      	movs	r3, r0
 8013354:	001a      	movs	r2, r3
 8013356:	193b      	adds	r3, r7, r4
 8013358:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 801335a:	193b      	adds	r3, r7, r4
 801335c:	6819      	ldr	r1, [r3, #0]
 801335e:	4bc4      	ldr	r3, [pc, #784]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013360:	4ac4      	ldr	r2, [pc, #784]	; (8013674 <LoRaMacInitialization+0x460>)
 8013362:	589b      	ldr	r3, [r3, r2]
 8013364:	b24a      	sxtb	r2, r1
 8013366:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 8013368:	197b      	adds	r3, r7, r5
 801336a:	2206      	movs	r2, #6
 801336c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801336e:	4bc0      	ldr	r3, [pc, #768]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013370:	4ac0      	ldr	r2, [pc, #768]	; (8013674 <LoRaMacInitialization+0x460>)
 8013372:	589b      	ldr	r3, [r3, r2]
 8013374:	781b      	ldrb	r3, [r3, #0]
 8013376:	197a      	adds	r2, r7, r5
 8013378:	0011      	movs	r1, r2
 801337a:	0018      	movs	r0, r3
 801337c:	f004 f878 	bl	8017470 <RegionGetPhyParam>
 8013380:	0003      	movs	r3, r0
 8013382:	001a      	movs	r2, r3
 8013384:	193b      	adds	r3, r7, r4
 8013386:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8013388:	193b      	adds	r3, r7, r4
 801338a:	6819      	ldr	r1, [r3, #0]
 801338c:	4bb8      	ldr	r3, [pc, #736]	; (8013670 <LoRaMacInitialization+0x45c>)
 801338e:	4ab9      	ldr	r2, [pc, #740]	; (8013674 <LoRaMacInitialization+0x460>)
 8013390:	589b      	ldr	r3, [r3, r2]
 8013392:	b24a      	sxtb	r2, r1
 8013394:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8013396:	197b      	adds	r3, r7, r5
 8013398:	2210      	movs	r2, #16
 801339a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801339c:	4bb4      	ldr	r3, [pc, #720]	; (8013670 <LoRaMacInitialization+0x45c>)
 801339e:	4ab5      	ldr	r2, [pc, #724]	; (8013674 <LoRaMacInitialization+0x460>)
 80133a0:	589b      	ldr	r3, [r3, r2]
 80133a2:	781b      	ldrb	r3, [r3, #0]
 80133a4:	197a      	adds	r2, r7, r5
 80133a6:	0011      	movs	r1, r2
 80133a8:	0018      	movs	r0, r3
 80133aa:	f004 f861 	bl	8017470 <RegionGetPhyParam>
 80133ae:	0003      	movs	r3, r0
 80133b0:	001a      	movs	r2, r3
 80133b2:	193b      	adds	r3, r7, r4
 80133b4:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80133b6:	4bae      	ldr	r3, [pc, #696]	; (8013670 <LoRaMacInitialization+0x45c>)
 80133b8:	4aae      	ldr	r2, [pc, #696]	; (8013674 <LoRaMacInitialization+0x460>)
 80133ba:	589b      	ldr	r3, [r3, r2]
 80133bc:	193a      	adds	r2, r7, r4
 80133be:	6812      	ldr	r2, [r2, #0]
 80133c0:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80133c2:	197b      	adds	r3, r7, r5
 80133c4:	2211      	movs	r2, #17
 80133c6:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80133c8:	4ba9      	ldr	r3, [pc, #676]	; (8013670 <LoRaMacInitialization+0x45c>)
 80133ca:	4aaa      	ldr	r2, [pc, #680]	; (8013674 <LoRaMacInitialization+0x460>)
 80133cc:	589b      	ldr	r3, [r3, r2]
 80133ce:	781b      	ldrb	r3, [r3, #0]
 80133d0:	197a      	adds	r2, r7, r5
 80133d2:	0011      	movs	r1, r2
 80133d4:	0018      	movs	r0, r3
 80133d6:	f004 f84b 	bl	8017470 <RegionGetPhyParam>
 80133da:	0003      	movs	r3, r0
 80133dc:	001a      	movs	r2, r3
 80133de:	193b      	adds	r3, r7, r4
 80133e0:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80133e2:	4ba3      	ldr	r3, [pc, #652]	; (8013670 <LoRaMacInitialization+0x45c>)
 80133e4:	4aa3      	ldr	r2, [pc, #652]	; (8013674 <LoRaMacInitialization+0x460>)
 80133e6:	589b      	ldr	r3, [r3, r2]
 80133e8:	193a      	adds	r2, r7, r4
 80133ea:	6812      	ldr	r2, [r2, #0]
 80133ec:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80133ee:	197b      	adds	r3, r7, r5
 80133f0:	2212      	movs	r2, #18
 80133f2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80133f4:	4b9e      	ldr	r3, [pc, #632]	; (8013670 <LoRaMacInitialization+0x45c>)
 80133f6:	4a9f      	ldr	r2, [pc, #636]	; (8013674 <LoRaMacInitialization+0x460>)
 80133f8:	589b      	ldr	r3, [r3, r2]
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	197a      	adds	r2, r7, r5
 80133fe:	0011      	movs	r1, r2
 8013400:	0018      	movs	r0, r3
 8013402:	f004 f835 	bl	8017470 <RegionGetPhyParam>
 8013406:	0003      	movs	r3, r0
 8013408:	001a      	movs	r2, r3
 801340a:	193b      	adds	r3, r7, r4
 801340c:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 801340e:	4b98      	ldr	r3, [pc, #608]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013410:	4a98      	ldr	r2, [pc, #608]	; (8013674 <LoRaMacInitialization+0x460>)
 8013412:	589b      	ldr	r3, [r3, r2]
 8013414:	193a      	adds	r2, r7, r4
 8013416:	6812      	ldr	r2, [r2, #0]
 8013418:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801341a:	197b      	adds	r3, r7, r5
 801341c:	2213      	movs	r2, #19
 801341e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013420:	4b93      	ldr	r3, [pc, #588]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013422:	4a94      	ldr	r2, [pc, #592]	; (8013674 <LoRaMacInitialization+0x460>)
 8013424:	589b      	ldr	r3, [r3, r2]
 8013426:	781b      	ldrb	r3, [r3, #0]
 8013428:	197a      	adds	r2, r7, r5
 801342a:	0011      	movs	r1, r2
 801342c:	0018      	movs	r0, r3
 801342e:	f004 f81f 	bl	8017470 <RegionGetPhyParam>
 8013432:	0003      	movs	r3, r0
 8013434:	001a      	movs	r2, r3
 8013436:	193b      	adds	r3, r7, r4
 8013438:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801343a:	4b8d      	ldr	r3, [pc, #564]	; (8013670 <LoRaMacInitialization+0x45c>)
 801343c:	4a8d      	ldr	r2, [pc, #564]	; (8013674 <LoRaMacInitialization+0x460>)
 801343e:	589b      	ldr	r3, [r3, r2]
 8013440:	193a      	adds	r2, r7, r4
 8013442:	6812      	ldr	r2, [r2, #0]
 8013444:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8013446:	197b      	adds	r3, r7, r5
 8013448:	2214      	movs	r2, #20
 801344a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801344c:	4b88      	ldr	r3, [pc, #544]	; (8013670 <LoRaMacInitialization+0x45c>)
 801344e:	4a89      	ldr	r2, [pc, #548]	; (8013674 <LoRaMacInitialization+0x460>)
 8013450:	589b      	ldr	r3, [r3, r2]
 8013452:	781b      	ldrb	r3, [r3, #0]
 8013454:	197a      	adds	r2, r7, r5
 8013456:	0011      	movs	r1, r2
 8013458:	0018      	movs	r0, r3
 801345a:	f004 f809 	bl	8017470 <RegionGetPhyParam>
 801345e:	0003      	movs	r3, r0
 8013460:	001a      	movs	r2, r3
 8013462:	193b      	adds	r3, r7, r4
 8013464:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8013466:	4b82      	ldr	r3, [pc, #520]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013468:	4a82      	ldr	r2, [pc, #520]	; (8013674 <LoRaMacInitialization+0x460>)
 801346a:	589b      	ldr	r3, [r3, r2]
 801346c:	193a      	adds	r2, r7, r4
 801346e:	6812      	ldr	r2, [r2, #0]
 8013470:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8013472:	197b      	adds	r3, r7, r5
 8013474:	2217      	movs	r2, #23
 8013476:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013478:	4b7d      	ldr	r3, [pc, #500]	; (8013670 <LoRaMacInitialization+0x45c>)
 801347a:	4a7e      	ldr	r2, [pc, #504]	; (8013674 <LoRaMacInitialization+0x460>)
 801347c:	589b      	ldr	r3, [r3, r2]
 801347e:	781b      	ldrb	r3, [r3, #0]
 8013480:	197a      	adds	r2, r7, r5
 8013482:	0011      	movs	r1, r2
 8013484:	0018      	movs	r0, r3
 8013486:	f003 fff3 	bl	8017470 <RegionGetPhyParam>
 801348a:	0003      	movs	r3, r0
 801348c:	001a      	movs	r2, r3
 801348e:	193b      	adds	r3, r7, r4
 8013490:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8013492:	193b      	adds	r3, r7, r4
 8013494:	6819      	ldr	r1, [r3, #0]
 8013496:	4b76      	ldr	r3, [pc, #472]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013498:	4a76      	ldr	r2, [pc, #472]	; (8013674 <LoRaMacInitialization+0x460>)
 801349a:	589b      	ldr	r3, [r3, r2]
 801349c:	b2c9      	uxtb	r1, r1
 801349e:	2225      	movs	r2, #37	; 0x25
 80134a0:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80134a2:	197b      	adds	r3, r7, r5
 80134a4:	2218      	movs	r2, #24
 80134a6:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80134a8:	4b71      	ldr	r3, [pc, #452]	; (8013670 <LoRaMacInitialization+0x45c>)
 80134aa:	4a72      	ldr	r2, [pc, #456]	; (8013674 <LoRaMacInitialization+0x460>)
 80134ac:	589b      	ldr	r3, [r3, r2]
 80134ae:	781b      	ldrb	r3, [r3, #0]
 80134b0:	197a      	adds	r2, r7, r5
 80134b2:	0011      	movs	r1, r2
 80134b4:	0018      	movs	r0, r3
 80134b6:	f003 ffdb 	bl	8017470 <RegionGetPhyParam>
 80134ba:	0003      	movs	r3, r0
 80134bc:	001a      	movs	r2, r3
 80134be:	193b      	adds	r3, r7, r4
 80134c0:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80134c2:	4b6b      	ldr	r3, [pc, #428]	; (8013670 <LoRaMacInitialization+0x45c>)
 80134c4:	4a6b      	ldr	r2, [pc, #428]	; (8013674 <LoRaMacInitialization+0x460>)
 80134c6:	589b      	ldr	r3, [r3, r2]
 80134c8:	193a      	adds	r2, r7, r4
 80134ca:	6812      	ldr	r2, [r2, #0]
 80134cc:	629a      	str	r2, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80134ce:	4b68      	ldr	r3, [pc, #416]	; (8013670 <LoRaMacInitialization+0x45c>)
 80134d0:	4a68      	ldr	r2, [pc, #416]	; (8013674 <LoRaMacInitialization+0x460>)
 80134d2:	589b      	ldr	r3, [r3, r2]
 80134d4:	193a      	adds	r2, r7, r4
 80134d6:	6812      	ldr	r2, [r2, #0]
 80134d8:	631a      	str	r2, [r3, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80134da:	197b      	adds	r3, r7, r5
 80134dc:	2219      	movs	r2, #25
 80134de:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80134e0:	4b63      	ldr	r3, [pc, #396]	; (8013670 <LoRaMacInitialization+0x45c>)
 80134e2:	4a64      	ldr	r2, [pc, #400]	; (8013674 <LoRaMacInitialization+0x460>)
 80134e4:	589b      	ldr	r3, [r3, r2]
 80134e6:	781b      	ldrb	r3, [r3, #0]
 80134e8:	197a      	adds	r2, r7, r5
 80134ea:	0011      	movs	r1, r2
 80134ec:	0018      	movs	r0, r3
 80134ee:	f003 ffbf 	bl	8017470 <RegionGetPhyParam>
 80134f2:	0003      	movs	r3, r0
 80134f4:	001a      	movs	r2, r3
 80134f6:	193b      	adds	r3, r7, r4
 80134f8:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80134fa:	193b      	adds	r3, r7, r4
 80134fc:	6819      	ldr	r1, [r3, #0]
 80134fe:	4b5c      	ldr	r3, [pc, #368]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013500:	4a5c      	ldr	r2, [pc, #368]	; (8013674 <LoRaMacInitialization+0x460>)
 8013502:	589b      	ldr	r3, [r3, r2]
 8013504:	b2c9      	uxtb	r1, r1
 8013506:	222c      	movs	r2, #44	; 0x2c
 8013508:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801350a:	193b      	adds	r3, r7, r4
 801350c:	6819      	ldr	r1, [r3, #0]
 801350e:	4b58      	ldr	r3, [pc, #352]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013510:	4a58      	ldr	r2, [pc, #352]	; (8013674 <LoRaMacInitialization+0x460>)
 8013512:	589b      	ldr	r3, [r3, r2]
 8013514:	b2c9      	uxtb	r1, r1
 8013516:	2234      	movs	r2, #52	; 0x34
 8013518:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 801351a:	197b      	adds	r3, r7, r5
 801351c:	221e      	movs	r2, #30
 801351e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013520:	4b53      	ldr	r3, [pc, #332]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013522:	4a54      	ldr	r2, [pc, #336]	; (8013674 <LoRaMacInitialization+0x460>)
 8013524:	589b      	ldr	r3, [r3, r2]
 8013526:	781b      	ldrb	r3, [r3, #0]
 8013528:	197a      	adds	r2, r7, r5
 801352a:	0011      	movs	r1, r2
 801352c:	0018      	movs	r0, r3
 801352e:	f003 ff9f 	bl	8017470 <RegionGetPhyParam>
 8013532:	0003      	movs	r3, r0
 8013534:	001a      	movs	r2, r3
 8013536:	193b      	adds	r3, r7, r4
 8013538:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 801353a:	193b      	adds	r3, r7, r4
 801353c:	6819      	ldr	r1, [r3, #0]
 801353e:	4b4c      	ldr	r3, [pc, #304]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013540:	4a4c      	ldr	r2, [pc, #304]	; (8013674 <LoRaMacInitialization+0x460>)
 8013542:	589b      	ldr	r3, [r3, r2]
 8013544:	b2c9      	uxtb	r1, r1
 8013546:	2238      	movs	r2, #56	; 0x38
 8013548:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801354a:	197b      	adds	r3, r7, r5
 801354c:	221f      	movs	r2, #31
 801354e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013550:	4b47      	ldr	r3, [pc, #284]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013552:	4a48      	ldr	r2, [pc, #288]	; (8013674 <LoRaMacInitialization+0x460>)
 8013554:	589b      	ldr	r3, [r3, r2]
 8013556:	781b      	ldrb	r3, [r3, #0]
 8013558:	197a      	adds	r2, r7, r5
 801355a:	0011      	movs	r1, r2
 801355c:	0018      	movs	r0, r3
 801355e:	f003 ff87 	bl	8017470 <RegionGetPhyParam>
 8013562:	0003      	movs	r3, r0
 8013564:	001a      	movs	r2, r3
 8013566:	193b      	adds	r3, r7, r4
 8013568:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 801356a:	193b      	adds	r3, r7, r4
 801356c:	6819      	ldr	r1, [r3, #0]
 801356e:	4b40      	ldr	r3, [pc, #256]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013570:	4a40      	ldr	r2, [pc, #256]	; (8013674 <LoRaMacInitialization+0x460>)
 8013572:	589b      	ldr	r3, [r3, r2]
 8013574:	b2c9      	uxtb	r1, r1
 8013576:	2239      	movs	r2, #57	; 0x39
 8013578:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 801357a:	197b      	adds	r3, r7, r5
 801357c:	2220      	movs	r2, #32
 801357e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013580:	4b3b      	ldr	r3, [pc, #236]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013582:	4a3c      	ldr	r2, [pc, #240]	; (8013674 <LoRaMacInitialization+0x460>)
 8013584:	589b      	ldr	r3, [r3, r2]
 8013586:	781b      	ldrb	r3, [r3, #0]
 8013588:	197a      	adds	r2, r7, r5
 801358a:	0011      	movs	r1, r2
 801358c:	0018      	movs	r0, r3
 801358e:	f003 ff6f 	bl	8017470 <RegionGetPhyParam>
 8013592:	0003      	movs	r3, r0
 8013594:	001a      	movs	r2, r3
 8013596:	193b      	adds	r3, r7, r4
 8013598:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 801359a:	4b35      	ldr	r3, [pc, #212]	; (8013670 <LoRaMacInitialization+0x45c>)
 801359c:	4a35      	ldr	r2, [pc, #212]	; (8013674 <LoRaMacInitialization+0x460>)
 801359e:	589b      	ldr	r3, [r3, r2]
 80135a0:	193a      	adds	r2, r7, r4
 80135a2:	6812      	ldr	r2, [r2, #0]
 80135a4:	63da      	str	r2, [r3, #60]	; 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80135a6:	197b      	adds	r3, r7, r5
 80135a8:	2221      	movs	r2, #33	; 0x21
 80135aa:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80135ac:	4b30      	ldr	r3, [pc, #192]	; (8013670 <LoRaMacInitialization+0x45c>)
 80135ae:	4a31      	ldr	r2, [pc, #196]	; (8013674 <LoRaMacInitialization+0x460>)
 80135b0:	589b      	ldr	r3, [r3, r2]
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	197a      	adds	r2, r7, r5
 80135b6:	0011      	movs	r1, r2
 80135b8:	0018      	movs	r0, r3
 80135ba:	f003 ff59 	bl	8017470 <RegionGetPhyParam>
 80135be:	0003      	movs	r3, r0
 80135c0:	001a      	movs	r2, r3
 80135c2:	193b      	adds	r3, r7, r4
 80135c4:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 80135c6:	4b2a      	ldr	r3, [pc, #168]	; (8013670 <LoRaMacInitialization+0x45c>)
 80135c8:	4a2a      	ldr	r2, [pc, #168]	; (8013674 <LoRaMacInitialization+0x460>)
 80135ca:	589b      	ldr	r3, [r3, r2]
 80135cc:	193a      	adds	r2, r7, r4
 80135ce:	6812      	ldr	r2, [r2, #0]
 80135d0:	641a      	str	r2, [r3, #64]	; 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80135d2:	197b      	adds	r3, r7, r5
 80135d4:	220b      	movs	r2, #11
 80135d6:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80135d8:	4b25      	ldr	r3, [pc, #148]	; (8013670 <LoRaMacInitialization+0x45c>)
 80135da:	4a26      	ldr	r2, [pc, #152]	; (8013674 <LoRaMacInitialization+0x460>)
 80135dc:	589b      	ldr	r3, [r3, r2]
 80135de:	781b      	ldrb	r3, [r3, #0]
 80135e0:	197a      	adds	r2, r7, r5
 80135e2:	0011      	movs	r1, r2
 80135e4:	0018      	movs	r0, r3
 80135e6:	f003 ff43 	bl	8017470 <RegionGetPhyParam>
 80135ea:	0003      	movs	r3, r0
 80135ec:	001a      	movs	r2, r3
 80135ee:	193b      	adds	r3, r7, r4
 80135f0:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckLimit = phyParam.Value;
 80135f2:	193b      	adds	r3, r7, r4
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	b299      	uxth	r1, r3
 80135f8:	4a1d      	ldr	r2, [pc, #116]	; (8013670 <LoRaMacInitialization+0x45c>)
 80135fa:	23fd      	movs	r3, #253	; 0xfd
 80135fc:	009b      	lsls	r3, r3, #2
 80135fe:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8013600:	197b      	adds	r3, r7, r5
 8013602:	220c      	movs	r2, #12
 8013604:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013606:	4b1a      	ldr	r3, [pc, #104]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013608:	4a1a      	ldr	r2, [pc, #104]	; (8013674 <LoRaMacInitialization+0x460>)
 801360a:	589b      	ldr	r3, [r3, r2]
 801360c:	781b      	ldrb	r3, [r3, #0]
 801360e:	197a      	adds	r2, r7, r5
 8013610:	0011      	movs	r1, r2
 8013612:	0018      	movs	r0, r3
 8013614:	f003 ff2c 	bl	8017470 <RegionGetPhyParam>
 8013618:	0003      	movs	r3, r0
 801361a:	001a      	movs	r2, r3
 801361c:	193b      	adds	r3, r7, r4
 801361e:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckDelay = phyParam.Value;
 8013620:	193b      	adds	r3, r7, r4
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	b299      	uxth	r1, r3
 8013626:	4b12      	ldr	r3, [pc, #72]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013628:	4a15      	ldr	r2, [pc, #84]	; (8013680 <LoRaMacInitialization+0x46c>)
 801362a:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 801362c:	4b10      	ldr	r3, [pc, #64]	; (8013670 <LoRaMacInitialization+0x45c>)
 801362e:	4a11      	ldr	r2, [pc, #68]	; (8013674 <LoRaMacInitialization+0x460>)
 8013630:	589b      	ldr	r3, [r3, r2]
 8013632:	2224      	movs	r2, #36	; 0x24
 8013634:	2101      	movs	r1, #1
 8013636:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
 8013638:	4b0d      	ldr	r3, [pc, #52]	; (8013670 <LoRaMacInitialization+0x45c>)
 801363a:	4a0e      	ldr	r2, [pc, #56]	; (8013674 <LoRaMacInitialization+0x460>)
 801363c:	589b      	ldr	r3, [r3, r2]
 801363e:	2214      	movs	r2, #20
 8013640:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8013642:	4b0b      	ldr	r3, [pc, #44]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013644:	4a0b      	ldr	r2, [pc, #44]	; (8013674 <LoRaMacInitialization+0x460>)
 8013646:	589b      	ldr	r3, [r3, r2]
 8013648:	2206      	movs	r2, #6
 801364a:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 801364c:	4b08      	ldr	r3, [pc, #32]	; (8013670 <LoRaMacInitialization+0x45c>)
 801364e:	4a09      	ldr	r2, [pc, #36]	; (8013674 <LoRaMacInitialization+0x460>)
 8013650:	589b      	ldr	r3, [r3, r2]
 8013652:	4a07      	ldr	r2, [pc, #28]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013654:	4907      	ldr	r1, [pc, #28]	; (8013674 <LoRaMacInitialization+0x460>)
 8013656:	5852      	ldr	r2, [r2, r1]
 8013658:	689b      	ldr	r3, [r3, #8]
 801365a:	21fc      	movs	r1, #252	; 0xfc
 801365c:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 801365e:	4b04      	ldr	r3, [pc, #16]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013660:	4a04      	ldr	r2, [pc, #16]	; (8013674 <LoRaMacInitialization+0x460>)
 8013662:	589b      	ldr	r3, [r3, r2]
 8013664:	4a02      	ldr	r2, [pc, #8]	; (8013670 <LoRaMacInitialization+0x45c>)
 8013666:	e00d      	b.n	8013684 <LoRaMacInitialization+0x470>
 8013668:	080131cd 	.word	0x080131cd
 801366c:	20000d74 	.word	0x20000d74
 8013670:	200008ec 	.word	0x200008ec
 8013674:	00000484 	.word	0x00000484
 8013678:	00000412 	.word	0x00000412
 801367c:	00000411 	.word	0x00000411
 8013680:	000003f6 	.word	0x000003f6
 8013684:	499d      	ldr	r1, [pc, #628]	; (80138fc <LoRaMacInitialization+0x6e8>)
 8013686:	5852      	ldr	r2, [r2, r1]
 8013688:	7b19      	ldrb	r1, [r3, #12]
 801368a:	2380      	movs	r3, #128	; 0x80
 801368c:	005b      	lsls	r3, r3, #1
 801368e:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 8013690:	4b9b      	ldr	r3, [pc, #620]	; (8013900 <LoRaMacInitialization+0x6ec>)
 8013692:	4a9a      	ldr	r2, [pc, #616]	; (80138fc <LoRaMacInitialization+0x6e8>)
 8013694:	589b      	ldr	r3, [r3, r2]
 8013696:	4a9a      	ldr	r2, [pc, #616]	; (8013900 <LoRaMacInitialization+0x6ec>)
 8013698:	4998      	ldr	r1, [pc, #608]	; (80138fc <LoRaMacInitialization+0x6e8>)
 801369a:	5852      	ldr	r2, [r2, r1]
 801369c:	6919      	ldr	r1, [r3, #16]
 801369e:	2382      	movs	r3, #130	; 0x82
 80136a0:	005b      	lsls	r3, r3, #1
 80136a2:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 80136a4:	4b96      	ldr	r3, [pc, #600]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80136a6:	4a95      	ldr	r2, [pc, #596]	; (80138fc <LoRaMacInitialization+0x6e8>)
 80136a8:	589b      	ldr	r3, [r3, r2]
 80136aa:	4a95      	ldr	r2, [pc, #596]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80136ac:	4993      	ldr	r1, [pc, #588]	; (80138fc <LoRaMacInitialization+0x6e8>)
 80136ae:	5852      	ldr	r2, [r2, r1]
 80136b0:	6959      	ldr	r1, [r3, #20]
 80136b2:	2384      	movs	r3, #132	; 0x84
 80136b4:	005b      	lsls	r3, r3, #1
 80136b6:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 80136b8:	4b91      	ldr	r3, [pc, #580]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80136ba:	4a90      	ldr	r2, [pc, #576]	; (80138fc <LoRaMacInitialization+0x6e8>)
 80136bc:	589b      	ldr	r3, [r3, r2]
 80136be:	4a90      	ldr	r2, [pc, #576]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80136c0:	498e      	ldr	r1, [pc, #568]	; (80138fc <LoRaMacInitialization+0x6e8>)
 80136c2:	5852      	ldr	r2, [r2, r1]
 80136c4:	6999      	ldr	r1, [r3, #24]
 80136c6:	2386      	movs	r3, #134	; 0x86
 80136c8:	005b      	lsls	r3, r3, #1
 80136ca:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 80136cc:	4b8c      	ldr	r3, [pc, #560]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80136ce:	4a8b      	ldr	r2, [pc, #556]	; (80138fc <LoRaMacInitialization+0x6e8>)
 80136d0:	589b      	ldr	r3, [r3, r2]
 80136d2:	4a8b      	ldr	r2, [pc, #556]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80136d4:	4989      	ldr	r1, [pc, #548]	; (80138fc <LoRaMacInitialization+0x6e8>)
 80136d6:	5852      	ldr	r2, [r2, r1]
 80136d8:	69d9      	ldr	r1, [r3, #28]
 80136da:	2388      	movs	r3, #136	; 0x88
 80136dc:	005b      	lsls	r3, r3, #1
 80136de:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 80136e0:	4b87      	ldr	r3, [pc, #540]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80136e2:	4a86      	ldr	r2, [pc, #536]	; (80138fc <LoRaMacInitialization+0x6e8>)
 80136e4:	589b      	ldr	r3, [r3, r2]
 80136e6:	4a86      	ldr	r2, [pc, #536]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80136e8:	4984      	ldr	r1, [pc, #528]	; (80138fc <LoRaMacInitialization+0x6e8>)
 80136ea:	5852      	ldr	r2, [r2, r1]
 80136ec:	6a19      	ldr	r1, [r3, #32]
 80136ee:	238a      	movs	r3, #138	; 0x8a
 80136f0:	005b      	lsls	r3, r3, #1
 80136f2:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 80136f4:	4b82      	ldr	r3, [pc, #520]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80136f6:	4a81      	ldr	r2, [pc, #516]	; (80138fc <LoRaMacInitialization+0x6e8>)
 80136f8:	589b      	ldr	r3, [r3, r2]
 80136fa:	4a81      	ldr	r2, [pc, #516]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80136fc:	497f      	ldr	r1, [pc, #508]	; (80138fc <LoRaMacInitialization+0x6e8>)
 80136fe:	5852      	ldr	r2, [r2, r1]
 8013700:	2124      	movs	r1, #36	; 0x24
 8013702:	5c59      	ldrb	r1, [r3, r1]
 8013704:	238c      	movs	r3, #140	; 0x8c
 8013706:	005b      	lsls	r3, r3, #1
 8013708:	54d1      	strb	r1, [r2, r3]

    ResetMacParameters( );
 801370a:	f7fe fec9 	bl	80124a0 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 801370e:	4b7c      	ldr	r3, [pc, #496]	; (8013900 <LoRaMacInitialization+0x6ec>)
 8013710:	4a7a      	ldr	r2, [pc, #488]	; (80138fc <LoRaMacInitialization+0x6e8>)
 8013712:	589b      	ldr	r3, [r3, r2]
 8013714:	22f1      	movs	r2, #241	; 0xf1
 8013716:	2101      	movs	r1, #1
 8013718:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 801371a:	4a79      	ldr	r2, [pc, #484]	; (8013900 <LoRaMacInitialization+0x6ec>)
 801371c:	23d1      	movs	r3, #209	; 0xd1
 801371e:	009b      	lsls	r3, r3, #2
 8013720:	68f9      	ldr	r1, [r7, #12]
 8013722:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 8013724:	4a76      	ldr	r2, [pc, #472]	; (8013900 <LoRaMacInitialization+0x6ec>)
 8013726:	23d2      	movs	r3, #210	; 0xd2
 8013728:	009b      	lsls	r3, r3, #2
 801372a:	68b9      	ldr	r1, [r7, #8]
 801372c:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 801372e:	4b74      	ldr	r3, [pc, #464]	; (8013900 <LoRaMacInitialization+0x6ec>)
 8013730:	4a74      	ldr	r2, [pc, #464]	; (8013904 <LoRaMacInitialization+0x6f0>)
 8013732:	2100      	movs	r1, #0
 8013734:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 8013736:	4a72      	ldr	r2, [pc, #456]	; (8013900 <LoRaMacInitialization+0x6ec>)
 8013738:	23d0      	movs	r3, #208	; 0xd0
 801373a:	009b      	lsls	r3, r3, #2
 801373c:	2101      	movs	r1, #1
 801373e:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8013740:	4b6f      	ldr	r3, [pc, #444]	; (8013900 <LoRaMacInitialization+0x6ec>)
 8013742:	4a6e      	ldr	r2, [pc, #440]	; (80138fc <LoRaMacInitialization+0x6e8>)
 8013744:	589a      	ldr	r2, [r3, r2]
 8013746:	23e2      	movs	r3, #226	; 0xe2
 8013748:	005b      	lsls	r3, r3, #1
 801374a:	2100      	movs	r1, #0
 801374c:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 801374e:	4b6c      	ldr	r3, [pc, #432]	; (8013900 <LoRaMacInitialization+0x6ec>)
 8013750:	4a6a      	ldr	r2, [pc, #424]	; (80138fc <LoRaMacInitialization+0x6e8>)
 8013752:	589a      	ldr	r2, [r3, r2]
 8013754:	23e4      	movs	r3, #228	; 0xe4
 8013756:	005b      	lsls	r3, r3, #1
 8013758:	2100      	movs	r1, #0
 801375a:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 801375c:	4a6a      	ldr	r2, [pc, #424]	; (8013908 <LoRaMacInitialization+0x6f4>)
 801375e:	4b6b      	ldr	r3, [pc, #428]	; (801390c <LoRaMacInitialization+0x6f8>)
 8013760:	0011      	movs	r1, r2
 8013762:	0018      	movs	r0, r3
 8013764:	f007 fb93 	bl	801ae8e <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8013768:	4a69      	ldr	r2, [pc, #420]	; (8013910 <LoRaMacInitialization+0x6fc>)
 801376a:	4b6a      	ldr	r3, [pc, #424]	; (8013914 <LoRaMacInitialization+0x700>)
 801376c:	0011      	movs	r1, r2
 801376e:	0018      	movs	r0, r3
 8013770:	f007 fb8d 	bl	801ae8e <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8013774:	4a68      	ldr	r2, [pc, #416]	; (8013918 <LoRaMacInitialization+0x704>)
 8013776:	4b69      	ldr	r3, [pc, #420]	; (801391c <LoRaMacInitialization+0x708>)
 8013778:	0011      	movs	r1, r2
 801377a:	0018      	movs	r0, r3
 801377c:	f007 fb87 	bl	801ae8e <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8013780:	4a67      	ldr	r2, [pc, #412]	; (8013920 <LoRaMacInitialization+0x70c>)
 8013782:	4b68      	ldr	r3, [pc, #416]	; (8013924 <LoRaMacInitialization+0x710>)
 8013784:	0011      	movs	r1, r2
 8013786:	0018      	movs	r0, r3
 8013788:	f007 fb81 	bl	801ae8e <TimerInit>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = TimerGetCurrentTime( );
 801378c:	4b5c      	ldr	r3, [pc, #368]	; (8013900 <LoRaMacInitialization+0x6ec>)
 801378e:	4a5b      	ldr	r2, [pc, #364]	; (80138fc <LoRaMacInitialization+0x6e8>)
 8013790:	589c      	ldr	r4, [r3, r2]
 8013792:	f007 fd12 	bl	801b1ba <TimerGetCurrentTime>
 8013796:	0002      	movs	r2, r0
 8013798:	23e6      	movs	r3, #230	; 0xe6
 801379a:	005b      	lsls	r3, r3, #1
 801379c:	50e2      	str	r2, [r4, r3]

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801379e:	4a58      	ldr	r2, [pc, #352]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80137a0:	23d3      	movs	r3, #211	; 0xd3
 80137a2:	009b      	lsls	r3, r3, #2
 80137a4:	4960      	ldr	r1, [pc, #384]	; (8013928 <LoRaMacInitialization+0x714>)
 80137a6:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80137a8:	4a55      	ldr	r2, [pc, #340]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80137aa:	23d5      	movs	r3, #213	; 0xd5
 80137ac:	009b      	lsls	r3, r3, #2
 80137ae:	495f      	ldr	r1, [pc, #380]	; (801392c <LoRaMacInitialization+0x718>)
 80137b0:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80137b2:	4a53      	ldr	r2, [pc, #332]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80137b4:	23d7      	movs	r3, #215	; 0xd7
 80137b6:	009b      	lsls	r3, r3, #2
 80137b8:	495d      	ldr	r1, [pc, #372]	; (8013930 <LoRaMacInitialization+0x71c>)
 80137ba:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80137bc:	4a50      	ldr	r2, [pc, #320]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80137be:	23d4      	movs	r3, #212	; 0xd4
 80137c0:	009b      	lsls	r3, r3, #2
 80137c2:	495c      	ldr	r1, [pc, #368]	; (8013934 <LoRaMacInitialization+0x720>)
 80137c4:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80137c6:	4a4e      	ldr	r2, [pc, #312]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80137c8:	23d6      	movs	r3, #214	; 0xd6
 80137ca:	009b      	lsls	r3, r3, #2
 80137cc:	495a      	ldr	r1, [pc, #360]	; (8013938 <LoRaMacInitialization+0x724>)
 80137ce:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 80137d0:	4b5a      	ldr	r3, [pc, #360]	; (801393c <LoRaMacInitialization+0x728>)
 80137d2:	689b      	ldr	r3, [r3, #8]
 80137d4:	4a5a      	ldr	r2, [pc, #360]	; (8013940 <LoRaMacInitialization+0x72c>)
 80137d6:	0010      	movs	r0, r2
 80137d8:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
 80137da:	2114      	movs	r1, #20
 80137dc:	187b      	adds	r3, r7, r1
 80137de:	2200      	movs	r2, #0
 80137e0:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 80137e2:	187b      	adds	r3, r7, r1
 80137e4:	2200      	movs	r2, #0
 80137e6:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80137e8:	4b45      	ldr	r3, [pc, #276]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80137ea:	4a44      	ldr	r2, [pc, #272]	; (80138fc <LoRaMacInitialization+0x6e8>)
 80137ec:	589b      	ldr	r3, [r3, r2]
 80137ee:	781b      	ldrb	r3, [r3, #0]
 80137f0:	187a      	adds	r2, r7, r1
 80137f2:	0011      	movs	r1, r2
 80137f4:	0018      	movs	r0, r3
 80137f6:	f003 fe77 	bl	80174e8 <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 80137fa:	4b52      	ldr	r3, [pc, #328]	; (8013944 <LoRaMacInitialization+0x730>)
 80137fc:	0018      	movs	r0, r3
 80137fe:	f7fb fa39 	bl	800ec74 <SecureElementInit>
 8013802:	1e03      	subs	r3, r0, #0
 8013804:	d001      	beq.n	801380a <LoRaMacInitialization+0x5f6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013806:	2311      	movs	r3, #17
 8013808:	e074      	b.n	80138f4 <LoRaMacInitialization+0x6e0>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 801380a:	4b4f      	ldr	r3, [pc, #316]	; (8013948 <LoRaMacInitialization+0x734>)
 801380c:	0018      	movs	r0, r3
 801380e:	f002 fcd7 	bl	80161c0 <LoRaMacCryptoInit>
 8013812:	1e03      	subs	r3, r0, #0
 8013814:	d001      	beq.n	801381a <LoRaMacInitialization+0x606>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013816:	2311      	movs	r3, #17
 8013818:	e06c      	b.n	80138f4 <LoRaMacInitialization+0x6e0>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 801381a:	4b4c      	ldr	r3, [pc, #304]	; (801394c <LoRaMacInitialization+0x738>)
 801381c:	0018      	movs	r0, r3
 801381e:	f001 fd55 	bl	80152cc <LoRaMacCommandsInit>
 8013822:	1e03      	subs	r3, r0, #0
 8013824:	d001      	beq.n	801382a <LoRaMacInitialization+0x616>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013826:	2313      	movs	r3, #19
 8013828:	e064      	b.n	80138f4 <LoRaMacInitialization+0x6e0>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 801382a:	4b35      	ldr	r3, [pc, #212]	; (8013900 <LoRaMacInitialization+0x6ec>)
 801382c:	4a33      	ldr	r2, [pc, #204]	; (80138fc <LoRaMacInitialization+0x6e8>)
 801382e:	589b      	ldr	r3, [r3, r2]
 8013830:	3350      	adds	r3, #80	; 0x50
 8013832:	0018      	movs	r0, r3
 8013834:	f002 fdde 	bl	80163f4 <LoRaMacCryptoSetMulticastReference>
 8013838:	1e03      	subs	r3, r0, #0
 801383a:	d001      	beq.n	8013840 <LoRaMacInitialization+0x62c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801383c:	2311      	movs	r3, #17
 801383e:	e059      	b.n	80138f4 <LoRaMacInitialization+0x6e0>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8013840:	4b3e      	ldr	r3, [pc, #248]	; (801393c <LoRaMacInitialization+0x728>)
 8013842:	69db      	ldr	r3, [r3, #28]
 8013844:	4798      	blx	r3
 8013846:	0003      	movs	r3, r0
 8013848:	0018      	movs	r0, r3
 801384a:	f007 fe6b 	bl	801b524 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 801384e:	4b3b      	ldr	r3, [pc, #236]	; (801393c <LoRaMacInitialization+0x728>)
 8013850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013852:	4a2b      	ldr	r2, [pc, #172]	; (8013900 <LoRaMacInitialization+0x6ec>)
 8013854:	4929      	ldr	r1, [pc, #164]	; (80138fc <LoRaMacInitialization+0x6e8>)
 8013856:	5852      	ldr	r2, [r2, r1]
 8013858:	21f1      	movs	r1, #241	; 0xf1
 801385a:	5c52      	ldrb	r2, [r2, r1]
 801385c:	0010      	movs	r0, r2
 801385e:	4798      	blx	r3
    Radio.Sleep( );
 8013860:	4b36      	ldr	r3, [pc, #216]	; (801393c <LoRaMacInitialization+0x728>)
 8013862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013864:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8013866:	2140      	movs	r1, #64	; 0x40
 8013868:	187b      	adds	r3, r7, r1
 801386a:	2200      	movs	r2, #0
 801386c:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 801386e:	187b      	adds	r3, r7, r1
 8013870:	2200      	movs	r2, #0
 8013872:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d008      	beq.n	801388c <LoRaMacInitialization+0x678>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 801387a:	68bb      	ldr	r3, [r7, #8]
 801387c:	685a      	ldr	r2, [r3, #4]
 801387e:	2140      	movs	r1, #64	; 0x40
 8013880:	187b      	adds	r3, r7, r1
 8013882:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 8013884:	68bb      	ldr	r3, [r7, #8]
 8013886:	68da      	ldr	r2, [r3, #12]
 8013888:	187b      	adds	r3, r7, r1
 801388a:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801388c:	2120      	movs	r1, #32
 801388e:	187b      	adds	r3, r7, r1
 8013890:	4a2f      	ldr	r2, [pc, #188]	; (8013950 <LoRaMacInitialization+0x73c>)
 8013892:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8013894:	187b      	adds	r3, r7, r1
 8013896:	4a2f      	ldr	r2, [pc, #188]	; (8013954 <LoRaMacInitialization+0x740>)
 8013898:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 801389a:	187b      	adds	r3, r7, r1
 801389c:	4a2e      	ldr	r2, [pc, #184]	; (8013958 <LoRaMacInitialization+0x744>)
 801389e:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80138a0:	187b      	adds	r3, r7, r1
 80138a2:	4a2e      	ldr	r2, [pc, #184]	; (801395c <LoRaMacInitialization+0x748>)
 80138a4:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 80138a6:	4b16      	ldr	r3, [pc, #88]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80138a8:	4a14      	ldr	r2, [pc, #80]	; (80138fc <LoRaMacInitialization+0x6e8>)
 80138aa:	589b      	ldr	r3, [r3, r2]
 80138ac:	334c      	adds	r3, #76	; 0x4c
 80138ae:	001a      	movs	r2, r3
 80138b0:	187b      	adds	r3, r7, r1
 80138b2:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 80138b4:	4b12      	ldr	r3, [pc, #72]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80138b6:	4a11      	ldr	r2, [pc, #68]	; (80138fc <LoRaMacInitialization+0x6e8>)
 80138b8:	589b      	ldr	r3, [r3, r2]
 80138ba:	001a      	movs	r2, r3
 80138bc:	187b      	adds	r3, r7, r1
 80138be:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 80138c0:	4b0f      	ldr	r3, [pc, #60]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80138c2:	4a0e      	ldr	r2, [pc, #56]	; (80138fc <LoRaMacInitialization+0x6e8>)
 80138c4:	589b      	ldr	r3, [r3, r2]
 80138c6:	33f8      	adds	r3, #248	; 0xf8
 80138c8:	001a      	movs	r2, r3
 80138ca:	187b      	adds	r3, r7, r1
 80138cc:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 80138ce:	4b0c      	ldr	r3, [pc, #48]	; (8013900 <LoRaMacInitialization+0x6ec>)
 80138d0:	4a0a      	ldr	r2, [pc, #40]	; (80138fc <LoRaMacInitialization+0x6e8>)
 80138d2:	589b      	ldr	r3, [r3, r2]
 80138d4:	3350      	adds	r3, #80	; 0x50
 80138d6:	001a      	movs	r2, r3
 80138d8:	0008      	movs	r0, r1
 80138da:	187b      	adds	r3, r7, r1
 80138dc:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 80138de:	4a20      	ldr	r2, [pc, #128]	; (8013960 <LoRaMacInitialization+0x74c>)
 80138e0:	2340      	movs	r3, #64	; 0x40
 80138e2:	18f9      	adds	r1, r7, r3
 80138e4:	183b      	adds	r3, r7, r0
 80138e6:	0018      	movs	r0, r3
 80138e8:	f001 fada 	bl	8014ea0 <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80138ec:	2001      	movs	r0, #1
 80138ee:	f7fc fe6d 	bl	80105cc <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80138f2:	2300      	movs	r3, #0
}
 80138f4:	0018      	movs	r0, r3
 80138f6:	46bd      	mov	sp, r7
 80138f8:	b014      	add	sp, #80	; 0x50
 80138fa:	bdb0      	pop	{r4, r5, r7, pc}
 80138fc:	00000484 	.word	0x00000484
 8013900:	200008ec 	.word	0x200008ec
 8013904:	00000481 	.word	0x00000481
 8013908:	08010a5d 	.word	0x08010a5d
 801390c:	20000c54 	.word	0x20000c54
 8013910:	08010ae9 	.word	0x08010ae9
 8013914:	20000c6c 	.word	0x20000c6c
 8013918:	08010b81 	.word	0x08010b81
 801391c:	20000c84 	.word	0x20000c84
 8013920:	08010c25 	.word	0x08010c25
 8013924:	20000ce4 	.word	0x20000ce4
 8013928:	0800f469 	.word	0x0800f469
 801392c:	0800f505 	.word	0x0800f505
 8013930:	0800f63d 	.word	0x0800f63d
 8013934:	0800f5c9 	.word	0x0800f5c9
 8013938:	0800f681 	.word	0x0800f681
 801393c:	0801ca04 	.word	0x0801ca04
 8013940:	20000c38 	.word	0x20000c38
 8013944:	0801319d 	.word	0x0801319d
 8013948:	0801318d 	.word	0x0801318d
 801394c:	080131ad 	.word	0x080131ad
 8013950:	20000d50 	.word	0x20000d50
 8013954:	20000d08 	.word	0x20000d08
 8013958:	20000d3c 	.word	0x20000d3c
 801395c:	20000d6d 	.word	0x20000d6d
 8013960:	080131bd 	.word	0x080131bd

08013964 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8013964:	b580      	push	{r7, lr}
 8013966:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8013968:	4a04      	ldr	r2, [pc, #16]	; (801397c <LoRaMacStart+0x18>)
 801396a:	23d0      	movs	r3, #208	; 0xd0
 801396c:	009b      	lsls	r3, r3, #2
 801396e:	2100      	movs	r1, #0
 8013970:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8013972:	2300      	movs	r3, #0
}
 8013974:	0018      	movs	r0, r3
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}
 801397a:	46c0      	nop			; (mov r8, r8)
 801397c:	200008ec 	.word	0x200008ec

08013980 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8013980:	b590      	push	{r4, r7, lr}
 8013982:	b08b      	sub	sp, #44	; 0x2c
 8013984:	af00      	add	r7, sp, #0
 8013986:	0002      	movs	r2, r0
 8013988:	6039      	str	r1, [r7, #0]
 801398a:	1dfb      	adds	r3, r7, #7
 801398c:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 801398e:	4b50      	ldr	r3, [pc, #320]	; (8013ad0 <LoRaMacQueryTxPossible+0x150>)
 8013990:	4a50      	ldr	r2, [pc, #320]	; (8013ad4 <LoRaMacQueryTxPossible+0x154>)
 8013992:	589b      	ldr	r3, [r3, r2]
 8013994:	22f4      	movs	r2, #244	; 0xf4
 8013996:	589b      	ldr	r3, [r3, r2]
 8013998:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 801399a:	4b4d      	ldr	r3, [pc, #308]	; (8013ad0 <LoRaMacQueryTxPossible+0x150>)
 801399c:	4a4d      	ldr	r2, [pc, #308]	; (8013ad4 <LoRaMacQueryTxPossible+0x154>)
 801399e:	589b      	ldr	r3, [r3, r2]
 80139a0:	2205      	movs	r2, #5
 80139a2:	569a      	ldrsb	r2, [r3, r2]
 80139a4:	230f      	movs	r3, #15
 80139a6:	18fb      	adds	r3, r7, r3
 80139a8:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80139aa:	4b49      	ldr	r3, [pc, #292]	; (8013ad0 <LoRaMacQueryTxPossible+0x150>)
 80139ac:	4a49      	ldr	r2, [pc, #292]	; (8013ad4 <LoRaMacQueryTxPossible+0x154>)
 80139ae:	589b      	ldr	r3, [r3, r2]
 80139b0:	2204      	movs	r2, #4
 80139b2:	569a      	ldrsb	r2, [r3, r2]
 80139b4:	230e      	movs	r3, #14
 80139b6:	18fb      	adds	r3, r7, r3
 80139b8:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 80139ba:	2300      	movs	r3, #0
 80139bc:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80139be:	683b      	ldr	r3, [r7, #0]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d101      	bne.n	80139c8 <LoRaMacQueryTxPossible+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80139c4:	2303      	movs	r3, #3
 80139c6:	e07e      	b.n	8013ac6 <LoRaMacQueryTxPossible+0x146>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 80139c8:	4b41      	ldr	r3, [pc, #260]	; (8013ad0 <LoRaMacQueryTxPossible+0x150>)
 80139ca:	4a42      	ldr	r2, [pc, #264]	; (8013ad4 <LoRaMacQueryTxPossible+0x154>)
 80139cc:	5899      	ldr	r1, [r3, r2]
 80139ce:	2014      	movs	r0, #20
 80139d0:	183b      	adds	r3, r7, r0
 80139d2:	22e8      	movs	r2, #232	; 0xe8
 80139d4:	0052      	lsls	r2, r2, #1
 80139d6:	588a      	ldr	r2, [r1, r2]
 80139d8:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 80139da:	183b      	adds	r3, r7, r0
 80139dc:	2200      	movs	r2, #0
 80139de:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 80139e0:	4b3b      	ldr	r3, [pc, #236]	; (8013ad0 <LoRaMacQueryTxPossible+0x150>)
 80139e2:	4a3c      	ldr	r2, [pc, #240]	; (8013ad4 <LoRaMacQueryTxPossible+0x154>)
 80139e4:	589b      	ldr	r3, [r3, r2]
 80139e6:	22f2      	movs	r2, #242	; 0xf2
 80139e8:	5c9a      	ldrb	r2, [r3, r2]
 80139ea:	183b      	adds	r3, r7, r0
 80139ec:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80139ee:	4b38      	ldr	r3, [pc, #224]	; (8013ad0 <LoRaMacQueryTxPossible+0x150>)
 80139f0:	4a38      	ldr	r2, [pc, #224]	; (8013ad4 <LoRaMacQueryTxPossible+0x154>)
 80139f2:	589b      	ldr	r3, [r3, r2]
 80139f4:	22f4      	movs	r2, #244	; 0xf4
 80139f6:	589a      	ldr	r2, [r3, r2]
 80139f8:	183b      	adds	r3, r7, r0
 80139fa:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80139fc:	4a34      	ldr	r2, [pc, #208]	; (8013ad0 <LoRaMacQueryTxPossible+0x150>)
 80139fe:	23fd      	movs	r3, #253	; 0xfd
 8013a00:	009b      	lsls	r3, r3, #2
 8013a02:	5ad2      	ldrh	r2, [r2, r3]
 8013a04:	183b      	adds	r3, r7, r0
 8013a06:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8013a08:	4b31      	ldr	r3, [pc, #196]	; (8013ad0 <LoRaMacQueryTxPossible+0x150>)
 8013a0a:	4a33      	ldr	r2, [pc, #204]	; (8013ad8 <LoRaMacQueryTxPossible+0x158>)
 8013a0c:	5a9a      	ldrh	r2, [r3, r2]
 8013a0e:	183b      	adds	r3, r7, r0
 8013a10:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8013a12:	4b2f      	ldr	r3, [pc, #188]	; (8013ad0 <LoRaMacQueryTxPossible+0x150>)
 8013a14:	4a2f      	ldr	r2, [pc, #188]	; (8013ad4 <LoRaMacQueryTxPossible+0x154>)
 8013a16:	589b      	ldr	r3, [r3, r2]
 8013a18:	22f9      	movs	r2, #249	; 0xf9
 8013a1a:	569a      	ldrsb	r2, [r3, r2]
 8013a1c:	183b      	adds	r3, r7, r0
 8013a1e:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8013a20:	4b2b      	ldr	r3, [pc, #172]	; (8013ad0 <LoRaMacQueryTxPossible+0x150>)
 8013a22:	4a2c      	ldr	r2, [pc, #176]	; (8013ad4 <LoRaMacQueryTxPossible+0x154>)
 8013a24:	589b      	ldr	r3, [r3, r2]
 8013a26:	22f8      	movs	r2, #248	; 0xf8
 8013a28:	569a      	ldrsb	r2, [r3, r2]
 8013a2a:	183b      	adds	r3, r7, r0
 8013a2c:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013a2e:	4b28      	ldr	r3, [pc, #160]	; (8013ad0 <LoRaMacQueryTxPossible+0x150>)
 8013a30:	4a28      	ldr	r2, [pc, #160]	; (8013ad4 <LoRaMacQueryTxPossible+0x154>)
 8013a32:	589a      	ldr	r2, [r3, r2]
 8013a34:	2396      	movs	r3, #150	; 0x96
 8013a36:	005b      	lsls	r3, r3, #1
 8013a38:	5cd2      	ldrb	r2, [r2, r3]
 8013a3a:	183b      	adds	r3, r7, r0
 8013a3c:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8013a3e:	4b24      	ldr	r3, [pc, #144]	; (8013ad0 <LoRaMacQueryTxPossible+0x150>)
 8013a40:	4a24      	ldr	r2, [pc, #144]	; (8013ad4 <LoRaMacQueryTxPossible+0x154>)
 8013a42:	589b      	ldr	r3, [r3, r2]
 8013a44:	781a      	ldrb	r2, [r3, #0]
 8013a46:	183b      	adds	r3, r7, r0
 8013a48:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8013a4a:	2310      	movs	r3, #16
 8013a4c:	18fb      	adds	r3, r7, r3
 8013a4e:	220e      	movs	r2, #14
 8013a50:	18ba      	adds	r2, r7, r2
 8013a52:	240f      	movs	r4, #15
 8013a54:	1939      	adds	r1, r7, r4
 8013a56:	1838      	adds	r0, r7, r0
 8013a58:	f001 fa0a 	bl	8014e70 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8013a5c:	193b      	adds	r3, r7, r4
 8013a5e:	781b      	ldrb	r3, [r3, #0]
 8013a60:	b25b      	sxtb	r3, r3
 8013a62:	0018      	movs	r0, r3
 8013a64:	f7fd facc 	bl	8011000 <GetMaxAppPayloadWithoutFOptsLength>
 8013a68:	0003      	movs	r3, r0
 8013a6a:	001a      	movs	r2, r3
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013a70:	2308      	movs	r3, #8
 8013a72:	18fb      	adds	r3, r7, r3
 8013a74:	0018      	movs	r0, r3
 8013a76:	f001 fd3d 	bl	80154f4 <LoRaMacCommandsGetSizeSerializedCmds>
 8013a7a:	1e03      	subs	r3, r0, #0
 8013a7c:	d001      	beq.n	8013a82 <LoRaMacQueryTxPossible+0x102>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013a7e:	2313      	movs	r3, #19
 8013a80:	e021      	b.n	8013ac6 <LoRaMacQueryTxPossible+0x146>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8013a82:	68bb      	ldr	r3, [r7, #8]
 8013a84:	2b0f      	cmp	r3, #15
 8013a86:	d81a      	bhi.n	8013abe <LoRaMacQueryTxPossible+0x13e>
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	785b      	ldrb	r3, [r3, #1]
 8013a8c:	001a      	movs	r2, r3
 8013a8e:	68bb      	ldr	r3, [r7, #8]
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d314      	bcc.n	8013abe <LoRaMacQueryTxPossible+0x13e>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	785a      	ldrb	r2, [r3, #1]
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	b2db      	uxtb	r3, r3
 8013a9c:	1ad3      	subs	r3, r2, r3
 8013a9e:	b2da      	uxtb	r2, r3
 8013aa0:	683b      	ldr	r3, [r7, #0]
 8013aa2:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8013aa4:	683b      	ldr	r3, [r7, #0]
 8013aa6:	785b      	ldrb	r3, [r3, #1]
 8013aa8:	0019      	movs	r1, r3
 8013aaa:	1dfb      	adds	r3, r7, #7
 8013aac:	781a      	ldrb	r2, [r3, #0]
 8013aae:	68bb      	ldr	r3, [r7, #8]
 8013ab0:	18d3      	adds	r3, r2, r3
 8013ab2:	4299      	cmp	r1, r3
 8013ab4:	d301      	bcc.n	8013aba <LoRaMacQueryTxPossible+0x13a>
        {
            return LORAMAC_STATUS_OK;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	e005      	b.n	8013ac6 <LoRaMacQueryTxPossible+0x146>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8013aba:	2308      	movs	r3, #8
 8013abc:	e003      	b.n	8013ac6 <LoRaMacQueryTxPossible+0x146>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8013ac4:	2308      	movs	r3, #8
    }
}
 8013ac6:	0018      	movs	r0, r3
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	b00b      	add	sp, #44	; 0x2c
 8013acc:	bd90      	pop	{r4, r7, pc}
 8013ace:	46c0      	nop			; (mov r8, r8)
 8013ad0:	200008ec 	.word	0x200008ec
 8013ad4:	00000484 	.word	0x00000484
 8013ad8:	000003f6 	.word	0x000003f6

08013adc <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8013adc:	b590      	push	{r4, r7, lr}
 8013ade:	b087      	sub	sp, #28
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013ae4:	2317      	movs	r3, #23
 8013ae6:	18fb      	adds	r3, r7, r3
 8013ae8:	2200      	movs	r2, #0
 8013aea:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d101      	bne.n	8013af6 <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013af2:	2303      	movs	r3, #3
 8013af4:	e143      	b.n	8013d7e <LoRaMacMibGetRequestConfirm+0x2a2>
    }

    switch( mibGet->Type )
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	781b      	ldrb	r3, [r3, #0]
 8013afa:	2b34      	cmp	r3, #52	; 0x34
 8013afc:	d900      	bls.n	8013b00 <LoRaMacMibGetRequestConfirm+0x24>
 8013afe:	e132      	b.n	8013d66 <LoRaMacMibGetRequestConfirm+0x28a>
 8013b00:	009a      	lsls	r2, r3, #2
 8013b02:	4ba1      	ldr	r3, [pc, #644]	; (8013d88 <LoRaMacMibGetRequestConfirm+0x2ac>)
 8013b04:	18d3      	adds	r3, r2, r3
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 8013b0a:	4ba0      	ldr	r3, [pc, #640]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013b0c:	4aa0      	ldr	r2, [pc, #640]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013b0e:	589b      	ldr	r3, [r3, r2]
 8013b10:	22f0      	movs	r2, #240	; 0xf0
 8013b12:	5c9a      	ldrb	r2, [r3, r2]
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	711a      	strb	r2, [r3, #4]
            break;
 8013b18:	e12e      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 8013b1a:	4b9c      	ldr	r3, [pc, #624]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013b1c:	4a9c      	ldr	r2, [pc, #624]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013b1e:	589a      	ldr	r2, [r3, r2]
 8013b20:	23ea      	movs	r3, #234	; 0xea
 8013b22:	005b      	lsls	r3, r3, #1
 8013b24:	5cd2      	ldrb	r2, [r2, r3]
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	711a      	strb	r2, [r3, #4]
            break;
 8013b2a:	e125      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8013b2c:	f7fb fc70 	bl	800f410 <SecureElementGetDevEui>
 8013b30:	0002      	movs	r2, r0
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	605a      	str	r2, [r3, #4]
            break;
 8013b36:	e11f      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8013b38:	f7fb fc8e 	bl	800f458 <SecureElementGetJoinEui>
 8013b3c:	0002      	movs	r2, r0
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	605a      	str	r2, [r3, #4]
            break;
 8013b42:	e119      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8013b44:	4b91      	ldr	r3, [pc, #580]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013b46:	4a92      	ldr	r2, [pc, #584]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013b48:	589b      	ldr	r3, [r3, r2]
 8013b4a:	22f2      	movs	r2, #242	; 0xf2
 8013b4c:	5c9a      	ldrb	r2, [r3, r2]
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	711a      	strb	r2, [r3, #4]
            break;
 8013b52:	e111      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 8013b54:	4b8d      	ldr	r3, [pc, #564]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013b56:	4a8e      	ldr	r2, [pc, #568]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013b58:	589b      	ldr	r3, [r3, r2]
 8013b5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	605a      	str	r2, [r3, #4]
            break;
 8013b60:	e10a      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 8013b62:	4b8a      	ldr	r3, [pc, #552]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013b64:	4a8a      	ldr	r2, [pc, #552]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013b66:	589b      	ldr	r3, [r3, r2]
 8013b68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	605a      	str	r2, [r3, #4]
            break;
 8013b6e:	e103      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 8013b70:	4b86      	ldr	r3, [pc, #536]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013b72:	4a87      	ldr	r2, [pc, #540]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013b74:	589b      	ldr	r3, [r3, r2]
 8013b76:	22f1      	movs	r2, #241	; 0xf1
 8013b78:	5c9a      	ldrb	r2, [r3, r2]
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	711a      	strb	r2, [r3, #4]
            break;
 8013b7e:	e0fb      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8013b80:	4b82      	ldr	r3, [pc, #520]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013b82:	4a83      	ldr	r2, [pc, #524]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013b84:	589a      	ldr	r2, [r3, r2]
 8013b86:	2340      	movs	r3, #64	; 0x40
 8013b88:	33ff      	adds	r3, #255	; 0xff
 8013b8a:	5cd2      	ldrb	r2, [r2, r3]
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	711a      	strb	r2, [r3, #4]
            break;
 8013b90:	e0f2      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8013b92:	2110      	movs	r1, #16
 8013b94:	187b      	adds	r3, r7, r1
 8013b96:	221d      	movs	r2, #29
 8013b98:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013b9a:	4b7c      	ldr	r3, [pc, #496]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013b9c:	4a7c      	ldr	r2, [pc, #496]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013b9e:	589b      	ldr	r3, [r3, r2]
 8013ba0:	781b      	ldrb	r3, [r3, #0]
 8013ba2:	187a      	adds	r2, r7, r1
 8013ba4:	0011      	movs	r1, r2
 8013ba6:	0018      	movs	r0, r3
 8013ba8:	f003 fc62 	bl	8017470 <RegionGetPhyParam>
 8013bac:	0003      	movs	r3, r0
 8013bae:	001a      	movs	r2, r3
 8013bb0:	210c      	movs	r1, #12
 8013bb2:	187b      	adds	r3, r7, r1
 8013bb4:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 8013bb6:	187b      	adds	r3, r7, r1
 8013bb8:	681a      	ldr	r2, [r3, #0]
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	605a      	str	r2, [r3, #4]
            break;
 8013bbe:	e0db      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8013bc0:	4b72      	ldr	r3, [pc, #456]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013bc2:	4a73      	ldr	r2, [pc, #460]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013bc4:	5899      	ldr	r1, [r3, r2]
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	228e      	movs	r2, #142	; 0x8e
 8013bca:	0052      	lsls	r2, r2, #1
 8013bcc:	3304      	adds	r3, #4
 8013bce:	188a      	adds	r2, r1, r2
 8013bd0:	ca03      	ldmia	r2!, {r0, r1}
 8013bd2:	c303      	stmia	r3!, {r0, r1}
            break;
 8013bd4:	e0d0      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8013bd6:	4b6d      	ldr	r3, [pc, #436]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013bd8:	4a6d      	ldr	r2, [pc, #436]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013bda:	589a      	ldr	r2, [r3, r2]
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	3304      	adds	r3, #4
 8013be0:	3228      	adds	r2, #40	; 0x28
 8013be2:	ca03      	ldmia	r2!, {r0, r1}
 8013be4:	c303      	stmia	r3!, {r0, r1}
            break;
 8013be6:	e0c7      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 8013be8:	4b68      	ldr	r3, [pc, #416]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013bea:	4a69      	ldr	r2, [pc, #420]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013bec:	5899      	ldr	r1, [r3, r2]
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2292      	movs	r2, #146	; 0x92
 8013bf2:	0052      	lsls	r2, r2, #1
 8013bf4:	3304      	adds	r3, #4
 8013bf6:	188a      	adds	r2, r1, r2
 8013bf8:	ca03      	ldmia	r2!, {r0, r1}
 8013bfa:	c303      	stmia	r3!, {r0, r1}
            break;
 8013bfc:	e0bc      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8013bfe:	4b63      	ldr	r3, [pc, #396]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013c00:	4a63      	ldr	r2, [pc, #396]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013c02:	589a      	ldr	r2, [r3, r2]
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	3304      	adds	r3, #4
 8013c08:	3230      	adds	r2, #48	; 0x30
 8013c0a:	ca03      	ldmia	r2!, {r0, r1}
 8013c0c:	c303      	stmia	r3!, {r0, r1}
            break;
 8013c0e:	e0b3      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8013c10:	2110      	movs	r1, #16
 8013c12:	187b      	adds	r3, r7, r1
 8013c14:	221b      	movs	r2, #27
 8013c16:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013c18:	4b5c      	ldr	r3, [pc, #368]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013c1a:	4a5d      	ldr	r2, [pc, #372]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013c1c:	589b      	ldr	r3, [r3, r2]
 8013c1e:	781b      	ldrb	r3, [r3, #0]
 8013c20:	187a      	adds	r2, r7, r1
 8013c22:	0011      	movs	r1, r2
 8013c24:	0018      	movs	r0, r3
 8013c26:	f003 fc23 	bl	8017470 <RegionGetPhyParam>
 8013c2a:	0003      	movs	r3, r0
 8013c2c:	001a      	movs	r2, r3
 8013c2e:	210c      	movs	r1, #12
 8013c30:	187b      	adds	r3, r7, r1
 8013c32:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8013c34:	187b      	adds	r3, r7, r1
 8013c36:	681a      	ldr	r2, [r3, #0]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	605a      	str	r2, [r3, #4]
            break;
 8013c3c:	e09c      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8013c3e:	2110      	movs	r1, #16
 8013c40:	187b      	adds	r3, r7, r1
 8013c42:	221a      	movs	r2, #26
 8013c44:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013c46:	4b51      	ldr	r3, [pc, #324]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013c48:	4a51      	ldr	r2, [pc, #324]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013c4a:	589b      	ldr	r3, [r3, r2]
 8013c4c:	781b      	ldrb	r3, [r3, #0]
 8013c4e:	187a      	adds	r2, r7, r1
 8013c50:	0011      	movs	r1, r2
 8013c52:	0018      	movs	r0, r3
 8013c54:	f003 fc0c 	bl	8017470 <RegionGetPhyParam>
 8013c58:	0003      	movs	r3, r0
 8013c5a:	001a      	movs	r2, r3
 8013c5c:	210c      	movs	r1, #12
 8013c5e:	187b      	adds	r3, r7, r1
 8013c60:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8013c62:	187b      	adds	r3, r7, r1
 8013c64:	681a      	ldr	r2, [r3, #0]
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	605a      	str	r2, [r3, #4]
            break;
 8013c6a:	e085      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8013c6c:	4b47      	ldr	r3, [pc, #284]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013c6e:	4a48      	ldr	r2, [pc, #288]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013c70:	589a      	ldr	r2, [r3, r2]
 8013c72:	238c      	movs	r3, #140	; 0x8c
 8013c74:	005b      	lsls	r3, r3, #1
 8013c76:	5cd2      	ldrb	r2, [r2, r3]
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	711a      	strb	r2, [r3, #4]
            break;
 8013c7c:	e07c      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 8013c7e:	4b43      	ldr	r3, [pc, #268]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013c80:	4a43      	ldr	r2, [pc, #268]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013c82:	589a      	ldr	r2, [r3, r2]
 8013c84:	2382      	movs	r3, #130	; 0x82
 8013c86:	005b      	lsls	r3, r3, #1
 8013c88:	58d2      	ldr	r2, [r2, r3]
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	605a      	str	r2, [r3, #4]
            break;
 8013c8e:	e073      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 8013c90:	4b3e      	ldr	r3, [pc, #248]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013c92:	4a3f      	ldr	r2, [pc, #252]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013c94:	589a      	ldr	r2, [r3, r2]
 8013c96:	2384      	movs	r3, #132	; 0x84
 8013c98:	005b      	lsls	r3, r3, #1
 8013c9a:	58d2      	ldr	r2, [r2, r3]
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	605a      	str	r2, [r3, #4]
            break;
 8013ca0:	e06a      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 8013ca2:	4b3a      	ldr	r3, [pc, #232]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013ca4:	4a3a      	ldr	r2, [pc, #232]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013ca6:	589a      	ldr	r2, [r3, r2]
 8013ca8:	2386      	movs	r3, #134	; 0x86
 8013caa:	005b      	lsls	r3, r3, #1
 8013cac:	58d2      	ldr	r2, [r2, r3]
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	605a      	str	r2, [r3, #4]
            break;
 8013cb2:	e061      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 8013cb4:	4b35      	ldr	r3, [pc, #212]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013cb6:	4a36      	ldr	r2, [pc, #216]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013cb8:	589a      	ldr	r2, [r3, r2]
 8013cba:	2388      	movs	r3, #136	; 0x88
 8013cbc:	005b      	lsls	r3, r3, #1
 8013cbe:	58d2      	ldr	r2, [r2, r3]
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	605a      	str	r2, [r3, #4]
            break;
 8013cc4:	e058      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 8013cc6:	4b31      	ldr	r3, [pc, #196]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013cc8:	4a31      	ldr	r2, [pc, #196]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013cca:	589a      	ldr	r2, [r3, r2]
 8013ccc:	238a      	movs	r3, #138	; 0x8a
 8013cce:	005b      	lsls	r3, r3, #1
 8013cd0:	58d2      	ldr	r2, [r2, r3]
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	605a      	str	r2, [r3, #4]
            break;
 8013cd6:	e04f      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8013cd8:	4b2c      	ldr	r3, [pc, #176]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013cda:	4a2d      	ldr	r2, [pc, #180]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013cdc:	589b      	ldr	r3, [r3, r2]
 8013cde:	2205      	movs	r2, #5
 8013ce0:	569a      	ldrsb	r2, [r3, r2]
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	711a      	strb	r2, [r3, #4]
            break;
 8013ce6:	e047      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8013ce8:	4b28      	ldr	r3, [pc, #160]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013cea:	4a29      	ldr	r2, [pc, #164]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013cec:	589b      	ldr	r3, [r3, r2]
 8013cee:	22f9      	movs	r2, #249	; 0xf9
 8013cf0:	569a      	ldrsb	r2, [r3, r2]
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	711a      	strb	r2, [r3, #4]
            break;
 8013cf6:	e03f      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8013cf8:	4b24      	ldr	r3, [pc, #144]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013cfa:	4a25      	ldr	r2, [pc, #148]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013cfc:	589b      	ldr	r3, [r3, r2]
 8013cfe:	2204      	movs	r2, #4
 8013d00:	569a      	ldrsb	r2, [r3, r2]
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	711a      	strb	r2, [r3, #4]
            break;
 8013d06:	e037      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8013d08:	4b20      	ldr	r3, [pc, #128]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013d0a:	4a21      	ldr	r2, [pc, #132]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013d0c:	589b      	ldr	r3, [r3, r2]
 8013d0e:	22f8      	movs	r2, #248	; 0xf8
 8013d10:	569a      	ldrsb	r2, [r3, r2]
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	711a      	strb	r2, [r3, #4]
            break;
 8013d16:	e02f      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 8013d18:	4b1c      	ldr	r3, [pc, #112]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013d1a:	4a1d      	ldr	r2, [pc, #116]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013d1c:	589b      	ldr	r3, [r3, r2]
 8013d1e:	22fc      	movs	r2, #252	; 0xfc
 8013d20:	589a      	ldr	r2, [r3, r2]
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	605a      	str	r2, [r3, #4]
            break;
 8013d26:	e027      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 8013d28:	4b18      	ldr	r3, [pc, #96]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013d2a:	4a19      	ldr	r2, [pc, #100]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013d2c:	589a      	ldr	r2, [r3, r2]
 8013d2e:	2380      	movs	r3, #128	; 0x80
 8013d30:	005b      	lsls	r3, r3, #1
 8013d32:	5cd2      	ldrb	r2, [r2, r3]
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	711a      	strb	r2, [r3, #4]
            break;
 8013d38:	e01e      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8013d3a:	4b14      	ldr	r3, [pc, #80]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013d3c:	4a14      	ldr	r2, [pc, #80]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013d3e:	589a      	ldr	r2, [r3, r2]
 8013d40:	239a      	movs	r3, #154	; 0x9a
 8013d42:	005b      	lsls	r3, r3, #1
 8013d44:	58d2      	ldr	r2, [r2, r3]
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	605a      	str	r2, [r3, #4]
            break;
 8013d4a:	e015      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 8013d4c:	f7fe ffa4 	bl	8012c98 <GetCtxs>
 8013d50:	0002      	movs	r2, r0
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	605a      	str	r2, [r3, #4]
            break;
 8013d56:	e00f      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8013d58:	4b0c      	ldr	r3, [pc, #48]	; (8013d8c <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013d5a:	4a0d      	ldr	r2, [pc, #52]	; (8013d90 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013d5c:	589b      	ldr	r3, [r3, r2]
 8013d5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	605a      	str	r2, [r3, #4]
            break;
 8013d64:	e008      	b.n	8013d78 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8013d66:	2317      	movs	r3, #23
 8013d68:	18fc      	adds	r4, r7, r3
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	0018      	movs	r0, r3
 8013d6e:	f001 f935 	bl	8014fdc <LoRaMacClassBMibGetRequestConfirm>
 8013d72:	0003      	movs	r3, r0
 8013d74:	7023      	strb	r3, [r4, #0]
            break;
 8013d76:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
 8013d78:	2317      	movs	r3, #23
 8013d7a:	18fb      	adds	r3, r7, r3
 8013d7c:	781b      	ldrb	r3, [r3, #0]
}
 8013d7e:	0018      	movs	r0, r3
 8013d80:	46bd      	mov	sp, r7
 8013d82:	b007      	add	sp, #28
 8013d84:	bd90      	pop	{r4, r7, pc}
 8013d86:	46c0      	nop			; (mov r8, r8)
 8013d88:	0801cf38 	.word	0x0801cf38
 8013d8c:	200008ec 	.word	0x200008ec
 8013d90:	00000484 	.word	0x00000484

08013d94 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8013d94:	b590      	push	{r4, r7, lr}
 8013d96:	b089      	sub	sp, #36	; 0x24
 8013d98:	af02      	add	r7, sp, #8
 8013d9a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013d9c:	2317      	movs	r3, #23
 8013d9e:	18fb      	adds	r3, r7, r3
 8013da0:	2200      	movs	r2, #0
 8013da2:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d102      	bne.n	8013db0 <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013daa:	2303      	movs	r3, #3
 8013dac:	f000 fce4 	bl	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8013db0:	4adc      	ldr	r2, [pc, #880]	; (8014124 <LoRaMacMibSetRequestConfirm+0x390>)
 8013db2:	23d0      	movs	r3, #208	; 0xd0
 8013db4:	009b      	lsls	r3, r3, #2
 8013db6:	58d3      	ldr	r3, [r2, r3]
 8013db8:	2202      	movs	r2, #2
 8013dba:	4013      	ands	r3, r2
 8013dbc:	d002      	beq.n	8013dc4 <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8013dbe:	2301      	movs	r3, #1
 8013dc0:	f000 fcda 	bl	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
    }

    switch( mibSet->Type )
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	781b      	ldrb	r3, [r3, #0]
 8013dc8:	2b35      	cmp	r3, #53	; 0x35
 8013dca:	d901      	bls.n	8013dd0 <LoRaMacMibSetRequestConfirm+0x3c>
 8013dcc:	f000 fc8d 	bl	80146ea <LoRaMacMibSetRequestConfirm+0x956>
 8013dd0:	009a      	lsls	r2, r3, #2
 8013dd2:	4bd5      	ldr	r3, [pc, #852]	; (8014128 <LoRaMacMibSetRequestConfirm+0x394>)
 8013dd4:	18d3      	adds	r3, r2, r3
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	791b      	ldrb	r3, [r3, #4]
 8013dde:	2217      	movs	r2, #23
 8013de0:	18bc      	adds	r4, r7, r2
 8013de2:	0018      	movs	r0, r3
 8013de4:	f7fc ffc2 	bl	8010d6c <SwitchClass>
 8013de8:	0003      	movs	r3, r0
 8013dea:	7023      	strb	r3, [r4, #0]
            break;
 8013dec:	f000 fcbd 	bl	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	791b      	ldrb	r3, [r3, #4]
 8013df4:	2b02      	cmp	r3, #2
 8013df6:	d009      	beq.n	8013e0c <LoRaMacMibSetRequestConfirm+0x78>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 8013df8:	4bca      	ldr	r3, [pc, #808]	; (8014124 <LoRaMacMibSetRequestConfirm+0x390>)
 8013dfa:	4acc      	ldr	r2, [pc, #816]	; (801412c <LoRaMacMibSetRequestConfirm+0x398>)
 8013dfc:	589a      	ldr	r2, [r3, r2]
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	7919      	ldrb	r1, [r3, #4]
 8013e02:	23ea      	movs	r3, #234	; 0xea
 8013e04:	005b      	lsls	r3, r3, #1
 8013e06:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013e08:	f000 fcaf 	bl	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e0c:	2317      	movs	r3, #23
 8013e0e:	18fb      	adds	r3, r7, r3
 8013e10:	2203      	movs	r2, #3
 8013e12:	701a      	strb	r2, [r3, #0]
            break;
 8013e14:	f000 fca9 	bl	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	685b      	ldr	r3, [r3, #4]
 8013e1c:	0018      	movs	r0, r3
 8013e1e:	f7fb fadb 	bl	800f3d8 <SecureElementSetDevEui>
 8013e22:	1e03      	subs	r3, r0, #0
 8013e24:	d101      	bne.n	8013e2a <LoRaMacMibSetRequestConfirm+0x96>
 8013e26:	f000 fc69 	bl	80146fc <LoRaMacMibSetRequestConfirm+0x968>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e2a:	2317      	movs	r3, #23
 8013e2c:	18fb      	adds	r3, r7, r3
 8013e2e:	2203      	movs	r2, #3
 8013e30:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013e32:	f000 fc63 	bl	80146fc <LoRaMacMibSetRequestConfirm+0x968>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	685b      	ldr	r3, [r3, #4]
 8013e3a:	0018      	movs	r0, r3
 8013e3c:	f7fb faf0 	bl	800f420 <SecureElementSetJoinEui>
 8013e40:	1e03      	subs	r3, r0, #0
 8013e42:	d101      	bne.n	8013e48 <LoRaMacMibSetRequestConfirm+0xb4>
 8013e44:	f000 fc5c 	bl	8014700 <LoRaMacMibSetRequestConfirm+0x96c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e48:	2317      	movs	r3, #23
 8013e4a:	18fb      	adds	r3, r7, r3
 8013e4c:	2203      	movs	r2, #3
 8013e4e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013e50:	f000 fc56 	bl	8014700 <LoRaMacMibSetRequestConfirm+0x96c>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 8013e54:	4bb3      	ldr	r3, [pc, #716]	; (8014124 <LoRaMacMibSetRequestConfirm+0x390>)
 8013e56:	4ab5      	ldr	r2, [pc, #724]	; (801412c <LoRaMacMibSetRequestConfirm+0x398>)
 8013e58:	589b      	ldr	r3, [r3, r2]
 8013e5a:	687a      	ldr	r2, [r7, #4]
 8013e5c:	7911      	ldrb	r1, [r2, #4]
 8013e5e:	22f2      	movs	r2, #242	; 0xf2
 8013e60:	5499      	strb	r1, [r3, r2]
            break;
 8013e62:	f000 fc82 	bl	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 8013e66:	4baf      	ldr	r3, [pc, #700]	; (8014124 <LoRaMacMibSetRequestConfirm+0x390>)
 8013e68:	4ab0      	ldr	r2, [pc, #704]	; (801412c <LoRaMacMibSetRequestConfirm+0x398>)
 8013e6a:	589b      	ldr	r3, [r3, r2]
 8013e6c:	687a      	ldr	r2, [r7, #4]
 8013e6e:	6852      	ldr	r2, [r2, #4]
 8013e70:	649a      	str	r2, [r3, #72]	; 0x48
            break;
 8013e72:	f000 fc7a 	bl	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 8013e76:	4bab      	ldr	r3, [pc, #684]	; (8014124 <LoRaMacMibSetRequestConfirm+0x390>)
 8013e78:	4aac      	ldr	r2, [pc, #688]	; (801412c <LoRaMacMibSetRequestConfirm+0x398>)
 8013e7a:	589b      	ldr	r3, [r3, r2]
 8013e7c:	687a      	ldr	r2, [r7, #4]
 8013e7e:	6852      	ldr	r2, [r2, #4]
 8013e80:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8013e82:	f000 fc72 	bl	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_GEN_APP_KEY:
        {
            if( mibSet->Param.GenAppKey != NULL )
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	685b      	ldr	r3, [r3, #4]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d00c      	beq.n	8013ea8 <LoRaMacMibSetRequestConfirm+0x114>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( GEN_APP_KEY, mibSet->Param.GenAppKey ) )
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	685b      	ldr	r3, [r3, #4]
 8013e92:	0019      	movs	r1, r3
 8013e94:	2001      	movs	r0, #1
 8013e96:	f002 fad5 	bl	8016444 <LoRaMacCryptoSetKey>
 8013e9a:	1e03      	subs	r3, r0, #0
 8013e9c:	d101      	bne.n	8013ea2 <LoRaMacMibSetRequestConfirm+0x10e>
 8013e9e:	f000 fc31 	bl	8014704 <LoRaMacMibSetRequestConfirm+0x970>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013ea2:	2311      	movs	r3, #17
 8013ea4:	f000 fc68 	bl	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ea8:	2317      	movs	r3, #23
 8013eaa:	18fb      	adds	r3, r7, r3
 8013eac:	2203      	movs	r2, #3
 8013eae:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013eb0:	f000 fc28 	bl	8014704 <LoRaMacMibSetRequestConfirm+0x970>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	685b      	ldr	r3, [r3, #4]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d00c      	beq.n	8013ed6 <LoRaMacMibSetRequestConfirm+0x142>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	685b      	ldr	r3, [r3, #4]
 8013ec0:	0019      	movs	r1, r3
 8013ec2:	2000      	movs	r0, #0
 8013ec4:	f002 fabe 	bl	8016444 <LoRaMacCryptoSetKey>
 8013ec8:	1e03      	subs	r3, r0, #0
 8013eca:	d101      	bne.n	8013ed0 <LoRaMacMibSetRequestConfirm+0x13c>
 8013ecc:	f000 fc1c 	bl	8014708 <LoRaMacMibSetRequestConfirm+0x974>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013ed0:	2311      	movs	r3, #17
 8013ed2:	f000 fc51 	bl	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ed6:	2317      	movs	r3, #23
 8013ed8:	18fb      	adds	r3, r7, r3
 8013eda:	2203      	movs	r2, #3
 8013edc:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013ede:	f000 fc13 	bl	8014708 <LoRaMacMibSetRequestConfirm+0x974>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	685b      	ldr	r3, [r3, #4]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d00c      	beq.n	8013f04 <LoRaMacMibSetRequestConfirm+0x170>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	685b      	ldr	r3, [r3, #4]
 8013eee:	0019      	movs	r1, r3
 8013ef0:	2002      	movs	r0, #2
 8013ef2:	f002 faa7 	bl	8016444 <LoRaMacCryptoSetKey>
 8013ef6:	1e03      	subs	r3, r0, #0
 8013ef8:	d101      	bne.n	8013efe <LoRaMacMibSetRequestConfirm+0x16a>
 8013efa:	f000 fc07 	bl	801470c <LoRaMacMibSetRequestConfirm+0x978>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013efe:	2311      	movs	r3, #17
 8013f00:	f000 fc3a 	bl	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f04:	2317      	movs	r3, #23
 8013f06:	18fb      	adds	r3, r7, r3
 8013f08:	2203      	movs	r2, #3
 8013f0a:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013f0c:	f000 fbfe 	bl	801470c <LoRaMacMibSetRequestConfirm+0x978>
        }
        case MIB_J_S_INT_KEY:
        {
            if( mibSet->Param.JSIntKey != NULL )
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	685b      	ldr	r3, [r3, #4]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d00c      	beq.n	8013f32 <LoRaMacMibSetRequestConfirm+0x19e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	685b      	ldr	r3, [r3, #4]
 8013f1c:	0019      	movs	r1, r3
 8013f1e:	2003      	movs	r0, #3
 8013f20:	f002 fa90 	bl	8016444 <LoRaMacCryptoSetKey>
 8013f24:	1e03      	subs	r3, r0, #0
 8013f26:	d101      	bne.n	8013f2c <LoRaMacMibSetRequestConfirm+0x198>
 8013f28:	f000 fbf2 	bl	8014710 <LoRaMacMibSetRequestConfirm+0x97c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013f2c:	2311      	movs	r3, #17
 8013f2e:	f000 fc23 	bl	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f32:	2317      	movs	r3, #23
 8013f34:	18fb      	adds	r3, r7, r3
 8013f36:	2203      	movs	r2, #3
 8013f38:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013f3a:	f000 fbe9 	bl	8014710 <LoRaMacMibSetRequestConfirm+0x97c>
        }
        case MIB_J_S_ENC_KEY:
        {
            if( mibSet->Param.JSEncKey != NULL )
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	685b      	ldr	r3, [r3, #4]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d00c      	beq.n	8013f60 <LoRaMacMibSetRequestConfirm+0x1cc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	685b      	ldr	r3, [r3, #4]
 8013f4a:	0019      	movs	r1, r3
 8013f4c:	2004      	movs	r0, #4
 8013f4e:	f002 fa79 	bl	8016444 <LoRaMacCryptoSetKey>
 8013f52:	1e03      	subs	r3, r0, #0
 8013f54:	d101      	bne.n	8013f5a <LoRaMacMibSetRequestConfirm+0x1c6>
 8013f56:	f000 fbdd 	bl	8014714 <LoRaMacMibSetRequestConfirm+0x980>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013f5a:	2311      	movs	r3, #17
 8013f5c:	f000 fc0c 	bl	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f60:	2317      	movs	r3, #23
 8013f62:	18fb      	adds	r3, r7, r3
 8013f64:	2203      	movs	r2, #3
 8013f66:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013f68:	f000 fbd4 	bl	8014714 <LoRaMacMibSetRequestConfirm+0x980>
        }
        case MIB_F_NWK_S_INT_KEY:
        {
            if( mibSet->Param.FNwkSIntKey != NULL )
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d00c      	beq.n	8013f8e <LoRaMacMibSetRequestConfirm+0x1fa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	685b      	ldr	r3, [r3, #4]
 8013f78:	0019      	movs	r1, r3
 8013f7a:	2005      	movs	r0, #5
 8013f7c:	f002 fa62 	bl	8016444 <LoRaMacCryptoSetKey>
 8013f80:	1e03      	subs	r3, r0, #0
 8013f82:	d101      	bne.n	8013f88 <LoRaMacMibSetRequestConfirm+0x1f4>
 8013f84:	f000 fbc8 	bl	8014718 <LoRaMacMibSetRequestConfirm+0x984>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013f88:	2311      	movs	r3, #17
 8013f8a:	f000 fbf5 	bl	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f8e:	2317      	movs	r3, #23
 8013f90:	18fb      	adds	r3, r7, r3
 8013f92:	2203      	movs	r2, #3
 8013f94:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013f96:	f000 fbbf 	bl	8014718 <LoRaMacMibSetRequestConfirm+0x984>
        }
        case MIB_S_NWK_S_INT_KEY:
        {
            if( mibSet->Param.SNwkSIntKey != NULL )
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	685b      	ldr	r3, [r3, #4]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d00c      	beq.n	8013fbc <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	685b      	ldr	r3, [r3, #4]
 8013fa6:	0019      	movs	r1, r3
 8013fa8:	2006      	movs	r0, #6
 8013faa:	f002 fa4b 	bl	8016444 <LoRaMacCryptoSetKey>
 8013fae:	1e03      	subs	r3, r0, #0
 8013fb0:	d101      	bne.n	8013fb6 <LoRaMacMibSetRequestConfirm+0x222>
 8013fb2:	f000 fbb3 	bl	801471c <LoRaMacMibSetRequestConfirm+0x988>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013fb6:	2311      	movs	r3, #17
 8013fb8:	f000 fbde 	bl	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013fbc:	2317      	movs	r3, #23
 8013fbe:	18fb      	adds	r3, r7, r3
 8013fc0:	2203      	movs	r2, #3
 8013fc2:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013fc4:	f000 fbaa 	bl	801471c <LoRaMacMibSetRequestConfirm+0x988>
        }
        case MIB_NWK_S_ENC_KEY:
        {
            if( mibSet->Param.NwkSEncKey != NULL )
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	685b      	ldr	r3, [r3, #4]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d00c      	beq.n	8013fea <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	685b      	ldr	r3, [r3, #4]
 8013fd4:	0019      	movs	r1, r3
 8013fd6:	2007      	movs	r0, #7
 8013fd8:	f002 fa34 	bl	8016444 <LoRaMacCryptoSetKey>
 8013fdc:	1e03      	subs	r3, r0, #0
 8013fde:	d101      	bne.n	8013fe4 <LoRaMacMibSetRequestConfirm+0x250>
 8013fe0:	f000 fb9e 	bl	8014720 <LoRaMacMibSetRequestConfirm+0x98c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013fe4:	2311      	movs	r3, #17
 8013fe6:	f000 fbc7 	bl	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013fea:	2317      	movs	r3, #23
 8013fec:	18fb      	adds	r3, r7, r3
 8013fee:	2203      	movs	r2, #3
 8013ff0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013ff2:	f000 fb95 	bl	8014720 <LoRaMacMibSetRequestConfirm+0x98c>
        }
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	685b      	ldr	r3, [r3, #4]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d00c      	beq.n	8014018 <LoRaMacMibSetRequestConfirm+0x284>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	685b      	ldr	r3, [r3, #4]
 8014002:	0019      	movs	r1, r3
 8014004:	2008      	movs	r0, #8
 8014006:	f002 fa1d 	bl	8016444 <LoRaMacCryptoSetKey>
 801400a:	1e03      	subs	r3, r0, #0
 801400c:	d101      	bne.n	8014012 <LoRaMacMibSetRequestConfirm+0x27e>
 801400e:	f000 fb89 	bl	8014724 <LoRaMacMibSetRequestConfirm+0x990>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014012:	2311      	movs	r3, #17
 8014014:	f000 fbb0 	bl	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014018:	2317      	movs	r3, #23
 801401a:	18fb      	adds	r3, r7, r3
 801401c:	2203      	movs	r2, #3
 801401e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014020:	f000 fb80 	bl	8014724 <LoRaMacMibSetRequestConfirm+0x990>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	685b      	ldr	r3, [r3, #4]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d00c      	beq.n	8014046 <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	685b      	ldr	r3, [r3, #4]
 8014030:	0019      	movs	r1, r3
 8014032:	207f      	movs	r0, #127	; 0x7f
 8014034:	f002 fa06 	bl	8016444 <LoRaMacCryptoSetKey>
 8014038:	1e03      	subs	r3, r0, #0
 801403a:	d101      	bne.n	8014040 <LoRaMacMibSetRequestConfirm+0x2ac>
 801403c:	f000 fb74 	bl	8014728 <LoRaMacMibSetRequestConfirm+0x994>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014040:	2311      	movs	r3, #17
 8014042:	f000 fb99 	bl	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014046:	2317      	movs	r3, #23
 8014048:	18fb      	adds	r3, r7, r3
 801404a:	2203      	movs	r2, #3
 801404c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801404e:	f000 fb6b 	bl	8014728 <LoRaMacMibSetRequestConfirm+0x994>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	685b      	ldr	r3, [r3, #4]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d00c      	beq.n	8014074 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	685b      	ldr	r3, [r3, #4]
 801405e:	0019      	movs	r1, r3
 8014060:	2080      	movs	r0, #128	; 0x80
 8014062:	f002 f9ef 	bl	8016444 <LoRaMacCryptoSetKey>
 8014066:	1e03      	subs	r3, r0, #0
 8014068:	d101      	bne.n	801406e <LoRaMacMibSetRequestConfirm+0x2da>
 801406a:	f000 fb5f 	bl	801472c <LoRaMacMibSetRequestConfirm+0x998>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801406e:	2311      	movs	r3, #17
 8014070:	f000 fb82 	bl	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014074:	2317      	movs	r3, #23
 8014076:	18fb      	adds	r3, r7, r3
 8014078:	2203      	movs	r2, #3
 801407a:	701a      	strb	r2, [r3, #0]
            }
            break;
 801407c:	e356      	b.n	801472c <LoRaMacMibSetRequestConfirm+0x998>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	685b      	ldr	r3, [r3, #4]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d00b      	beq.n	801409e <LoRaMacMibSetRequestConfirm+0x30a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	685b      	ldr	r3, [r3, #4]
 801408a:	0019      	movs	r1, r3
 801408c:	2081      	movs	r0, #129	; 0x81
 801408e:	f002 f9d9 	bl	8016444 <LoRaMacCryptoSetKey>
 8014092:	1e03      	subs	r3, r0, #0
 8014094:	d100      	bne.n	8014098 <LoRaMacMibSetRequestConfirm+0x304>
 8014096:	e34b      	b.n	8014730 <LoRaMacMibSetRequestConfirm+0x99c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014098:	2311      	movs	r3, #17
 801409a:	f000 fb6d 	bl	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801409e:	2317      	movs	r3, #23
 80140a0:	18fb      	adds	r3, r7, r3
 80140a2:	2203      	movs	r2, #3
 80140a4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80140a6:	e343      	b.n	8014730 <LoRaMacMibSetRequestConfirm+0x99c>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	685b      	ldr	r3, [r3, #4]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d00b      	beq.n	80140c8 <LoRaMacMibSetRequestConfirm+0x334>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	685b      	ldr	r3, [r3, #4]
 80140b4:	0019      	movs	r1, r3
 80140b6:	2082      	movs	r0, #130	; 0x82
 80140b8:	f002 f9c4 	bl	8016444 <LoRaMacCryptoSetKey>
 80140bc:	1e03      	subs	r3, r0, #0
 80140be:	d100      	bne.n	80140c2 <LoRaMacMibSetRequestConfirm+0x32e>
 80140c0:	e338      	b.n	8014734 <LoRaMacMibSetRequestConfirm+0x9a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80140c2:	2311      	movs	r3, #17
 80140c4:	f000 fb58 	bl	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80140c8:	2317      	movs	r3, #23
 80140ca:	18fb      	adds	r3, r7, r3
 80140cc:	2203      	movs	r2, #3
 80140ce:	701a      	strb	r2, [r3, #0]
            }
            break;
 80140d0:	e330      	b.n	8014734 <LoRaMacMibSetRequestConfirm+0x9a0>
        }
        case MIB_MC_KEY_1:
        {
            if( mibSet->Param.McKey1 != NULL )
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	685b      	ldr	r3, [r3, #4]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d00a      	beq.n	80140f0 <LoRaMacMibSetRequestConfirm+0x35c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	685b      	ldr	r3, [r3, #4]
 80140de:	0019      	movs	r1, r3
 80140e0:	2083      	movs	r0, #131	; 0x83
 80140e2:	f002 f9af 	bl	8016444 <LoRaMacCryptoSetKey>
 80140e6:	1e03      	subs	r3, r0, #0
 80140e8:	d100      	bne.n	80140ec <LoRaMacMibSetRequestConfirm+0x358>
 80140ea:	e325      	b.n	8014738 <LoRaMacMibSetRequestConfirm+0x9a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80140ec:	2311      	movs	r3, #17
 80140ee:	e343      	b.n	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80140f0:	2317      	movs	r3, #23
 80140f2:	18fb      	adds	r3, r7, r3
 80140f4:	2203      	movs	r2, #3
 80140f6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80140f8:	e31e      	b.n	8014738 <LoRaMacMibSetRequestConfirm+0x9a4>
        }
        case MIB_MC_APP_S_KEY_1:
        {
            if( mibSet->Param.McAppSKey1 != NULL )
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	685b      	ldr	r3, [r3, #4]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d00a      	beq.n	8014118 <LoRaMacMibSetRequestConfirm+0x384>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	685b      	ldr	r3, [r3, #4]
 8014106:	0019      	movs	r1, r3
 8014108:	2084      	movs	r0, #132	; 0x84
 801410a:	f002 f99b 	bl	8016444 <LoRaMacCryptoSetKey>
 801410e:	1e03      	subs	r3, r0, #0
 8014110:	d100      	bne.n	8014114 <LoRaMacMibSetRequestConfirm+0x380>
 8014112:	e313      	b.n	801473c <LoRaMacMibSetRequestConfirm+0x9a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014114:	2311      	movs	r3, #17
 8014116:	e32f      	b.n	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014118:	2317      	movs	r3, #23
 801411a:	18fb      	adds	r3, r7, r3
 801411c:	2203      	movs	r2, #3
 801411e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014120:	e30c      	b.n	801473c <LoRaMacMibSetRequestConfirm+0x9a8>
 8014122:	46c0      	nop			; (mov r8, r8)
 8014124:	200008ec 	.word	0x200008ec
 8014128:	0801d00c 	.word	0x0801d00c
 801412c:	00000484 	.word	0x00000484
        }
        case MIB_MC_NWK_S_KEY_1:
        {
            if( mibSet->Param.McNwkSKey1 != NULL )
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	685b      	ldr	r3, [r3, #4]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d00a      	beq.n	801414e <LoRaMacMibSetRequestConfirm+0x3ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	685b      	ldr	r3, [r3, #4]
 801413c:	0019      	movs	r1, r3
 801413e:	2085      	movs	r0, #133	; 0x85
 8014140:	f002 f980 	bl	8016444 <LoRaMacCryptoSetKey>
 8014144:	1e03      	subs	r3, r0, #0
 8014146:	d100      	bne.n	801414a <LoRaMacMibSetRequestConfirm+0x3b6>
 8014148:	e2fa      	b.n	8014740 <LoRaMacMibSetRequestConfirm+0x9ac>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801414a:	2311      	movs	r3, #17
 801414c:	e314      	b.n	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801414e:	2317      	movs	r3, #23
 8014150:	18fb      	adds	r3, r7, r3
 8014152:	2203      	movs	r2, #3
 8014154:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014156:	e2f3      	b.n	8014740 <LoRaMacMibSetRequestConfirm+0x9ac>
        }
        case MIB_MC_KEY_2:
        {
            if( mibSet->Param.McKey2 != NULL )
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	685b      	ldr	r3, [r3, #4]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d00a      	beq.n	8014176 <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	685b      	ldr	r3, [r3, #4]
 8014164:	0019      	movs	r1, r3
 8014166:	2086      	movs	r0, #134	; 0x86
 8014168:	f002 f96c 	bl	8016444 <LoRaMacCryptoSetKey>
 801416c:	1e03      	subs	r3, r0, #0
 801416e:	d100      	bne.n	8014172 <LoRaMacMibSetRequestConfirm+0x3de>
 8014170:	e2e8      	b.n	8014744 <LoRaMacMibSetRequestConfirm+0x9b0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014172:	2311      	movs	r3, #17
 8014174:	e300      	b.n	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014176:	2317      	movs	r3, #23
 8014178:	18fb      	adds	r3, r7, r3
 801417a:	2203      	movs	r2, #3
 801417c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801417e:	e2e1      	b.n	8014744 <LoRaMacMibSetRequestConfirm+0x9b0>
        }
        case MIB_MC_APP_S_KEY_2:
        {
            if( mibSet->Param.McAppSKey2 != NULL )
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	685b      	ldr	r3, [r3, #4]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d00a      	beq.n	801419e <LoRaMacMibSetRequestConfirm+0x40a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	685b      	ldr	r3, [r3, #4]
 801418c:	0019      	movs	r1, r3
 801418e:	2087      	movs	r0, #135	; 0x87
 8014190:	f002 f958 	bl	8016444 <LoRaMacCryptoSetKey>
 8014194:	1e03      	subs	r3, r0, #0
 8014196:	d100      	bne.n	801419a <LoRaMacMibSetRequestConfirm+0x406>
 8014198:	e2d6      	b.n	8014748 <LoRaMacMibSetRequestConfirm+0x9b4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801419a:	2311      	movs	r3, #17
 801419c:	e2ec      	b.n	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801419e:	2317      	movs	r3, #23
 80141a0:	18fb      	adds	r3, r7, r3
 80141a2:	2203      	movs	r2, #3
 80141a4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80141a6:	e2cf      	b.n	8014748 <LoRaMacMibSetRequestConfirm+0x9b4>
        }
        case MIB_MC_NWK_S_KEY_2:
        {
            if( mibSet->Param.McNwkSKey2 != NULL )
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	685b      	ldr	r3, [r3, #4]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d00a      	beq.n	80141c6 <LoRaMacMibSetRequestConfirm+0x432>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	685b      	ldr	r3, [r3, #4]
 80141b4:	0019      	movs	r1, r3
 80141b6:	2088      	movs	r0, #136	; 0x88
 80141b8:	f002 f944 	bl	8016444 <LoRaMacCryptoSetKey>
 80141bc:	1e03      	subs	r3, r0, #0
 80141be:	d100      	bne.n	80141c2 <LoRaMacMibSetRequestConfirm+0x42e>
 80141c0:	e2c4      	b.n	801474c <LoRaMacMibSetRequestConfirm+0x9b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80141c2:	2311      	movs	r3, #17
 80141c4:	e2d8      	b.n	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80141c6:	2317      	movs	r3, #23
 80141c8:	18fb      	adds	r3, r7, r3
 80141ca:	2203      	movs	r2, #3
 80141cc:	701a      	strb	r2, [r3, #0]
            }
            break;
 80141ce:	e2bd      	b.n	801474c <LoRaMacMibSetRequestConfirm+0x9b8>
        }
        case MIB_MC_KEY_3:
        {
            if( mibSet->Param.McKey3 != NULL )
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	685b      	ldr	r3, [r3, #4]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d00a      	beq.n	80141ee <LoRaMacMibSetRequestConfirm+0x45a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	685b      	ldr	r3, [r3, #4]
 80141dc:	0019      	movs	r1, r3
 80141de:	2089      	movs	r0, #137	; 0x89
 80141e0:	f002 f930 	bl	8016444 <LoRaMacCryptoSetKey>
 80141e4:	1e03      	subs	r3, r0, #0
 80141e6:	d100      	bne.n	80141ea <LoRaMacMibSetRequestConfirm+0x456>
 80141e8:	e2b2      	b.n	8014750 <LoRaMacMibSetRequestConfirm+0x9bc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80141ea:	2311      	movs	r3, #17
 80141ec:	e2c4      	b.n	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80141ee:	2317      	movs	r3, #23
 80141f0:	18fb      	adds	r3, r7, r3
 80141f2:	2203      	movs	r2, #3
 80141f4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80141f6:	e2ab      	b.n	8014750 <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_MC_APP_S_KEY_3:
        {
            if( mibSet->Param.McAppSKey3 != NULL )
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	685b      	ldr	r3, [r3, #4]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d00a      	beq.n	8014216 <LoRaMacMibSetRequestConfirm+0x482>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	685b      	ldr	r3, [r3, #4]
 8014204:	0019      	movs	r1, r3
 8014206:	208a      	movs	r0, #138	; 0x8a
 8014208:	f002 f91c 	bl	8016444 <LoRaMacCryptoSetKey>
 801420c:	1e03      	subs	r3, r0, #0
 801420e:	d100      	bne.n	8014212 <LoRaMacMibSetRequestConfirm+0x47e>
 8014210:	e2a0      	b.n	8014754 <LoRaMacMibSetRequestConfirm+0x9c0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014212:	2311      	movs	r3, #17
 8014214:	e2b0      	b.n	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014216:	2317      	movs	r3, #23
 8014218:	18fb      	adds	r3, r7, r3
 801421a:	2203      	movs	r2, #3
 801421c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801421e:	e299      	b.n	8014754 <LoRaMacMibSetRequestConfirm+0x9c0>
        }
        case MIB_MC_NWK_S_KEY_3:
        {
            if( mibSet->Param.McNwkSKey3 != NULL )
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	685b      	ldr	r3, [r3, #4]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d00a      	beq.n	801423e <LoRaMacMibSetRequestConfirm+0x4aa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	685b      	ldr	r3, [r3, #4]
 801422c:	0019      	movs	r1, r3
 801422e:	208b      	movs	r0, #139	; 0x8b
 8014230:	f002 f908 	bl	8016444 <LoRaMacCryptoSetKey>
 8014234:	1e03      	subs	r3, r0, #0
 8014236:	d100      	bne.n	801423a <LoRaMacMibSetRequestConfirm+0x4a6>
 8014238:	e28e      	b.n	8014758 <LoRaMacMibSetRequestConfirm+0x9c4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801423a:	2311      	movs	r3, #17
 801423c:	e29c      	b.n	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801423e:	2317      	movs	r3, #23
 8014240:	18fb      	adds	r3, r7, r3
 8014242:	2203      	movs	r2, #3
 8014244:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014246:	e287      	b.n	8014758 <LoRaMacMibSetRequestConfirm+0x9c4>
        }
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014248:	4bd8      	ldr	r3, [pc, #864]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 801424a:	4ad9      	ldr	r2, [pc, #868]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801424c:	589b      	ldr	r3, [r3, r2]
 801424e:	687a      	ldr	r2, [r7, #4]
 8014250:	7911      	ldrb	r1, [r2, #4]
 8014252:	22f1      	movs	r2, #241	; 0xf1
 8014254:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8014256:	4bd7      	ldr	r3, [pc, #860]	; (80145b4 <LoRaMacMibSetRequestConfirm+0x820>)
 8014258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801425a:	4ad4      	ldr	r2, [pc, #848]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 801425c:	49d4      	ldr	r1, [pc, #848]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801425e:	5852      	ldr	r2, [r2, r1]
 8014260:	21f1      	movs	r1, #241	; 0xf1
 8014262:	5c52      	ldrb	r2, [r2, r1]
 8014264:	0010      	movs	r0, r2
 8014266:	4798      	blx	r3
            break;
 8014268:	e27f      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 801426a:	4bd0      	ldr	r3, [pc, #832]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 801426c:	4ad0      	ldr	r2, [pc, #832]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801426e:	589a      	ldr	r2, [r3, r2]
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	7919      	ldrb	r1, [r3, #4]
 8014274:	2340      	movs	r3, #64	; 0x40
 8014276:	33ff      	adds	r3, #255	; 0xff
 8014278:	54d1      	strb	r1, [r2, r3]
            break;
 801427a:	e276      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	7a1b      	ldrb	r3, [r3, #8]
 8014280:	b25a      	sxtb	r2, r3
 8014282:	2108      	movs	r1, #8
 8014284:	187b      	adds	r3, r7, r1
 8014286:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8014288:	4bc8      	ldr	r3, [pc, #800]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 801428a:	4ac9      	ldr	r2, [pc, #804]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801428c:	589a      	ldr	r2, [r3, r2]
 801428e:	232e      	movs	r3, #46	; 0x2e
 8014290:	33ff      	adds	r3, #255	; 0xff
 8014292:	5cd2      	ldrb	r2, [r2, r3]
 8014294:	187b      	adds	r3, r7, r1
 8014296:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8014298:	4bc4      	ldr	r3, [pc, #784]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 801429a:	4ac5      	ldr	r2, [pc, #788]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801429c:	589b      	ldr	r3, [r3, r2]
 801429e:	781b      	ldrb	r3, [r3, #0]
 80142a0:	1879      	adds	r1, r7, r1
 80142a2:	2207      	movs	r2, #7
 80142a4:	0018      	movs	r0, r3
 80142a6:	f003 f94a 	bl	801753e <RegionVerify>
 80142aa:	1e03      	subs	r3, r0, #0
 80142ac:	d00a      	beq.n	80142c4 <LoRaMacMibSetRequestConfirm+0x530>
            {
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80142ae:	4bbf      	ldr	r3, [pc, #764]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 80142b0:	4abf      	ldr	r2, [pc, #764]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80142b2:	5899      	ldr	r1, [r3, r2]
 80142b4:	238e      	movs	r3, #142	; 0x8e
 80142b6:	005b      	lsls	r3, r3, #1
 80142b8:	687a      	ldr	r2, [r7, #4]
 80142ba:	18cb      	adds	r3, r1, r3
 80142bc:	3204      	adds	r2, #4
 80142be:	ca03      	ldmia	r2!, {r0, r1}
 80142c0:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80142c2:	e252      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80142c4:	2317      	movs	r3, #23
 80142c6:	18fb      	adds	r3, r7, r3
 80142c8:	2203      	movs	r2, #3
 80142ca:	701a      	strb	r2, [r3, #0]
            break;
 80142cc:	e24d      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	7a1b      	ldrb	r3, [r3, #8]
 80142d2:	b25a      	sxtb	r2, r3
 80142d4:	2108      	movs	r1, #8
 80142d6:	187b      	adds	r3, r7, r1
 80142d8:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80142da:	4bb4      	ldr	r3, [pc, #720]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 80142dc:	4ab4      	ldr	r2, [pc, #720]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80142de:	589a      	ldr	r2, [r3, r2]
 80142e0:	232e      	movs	r3, #46	; 0x2e
 80142e2:	33ff      	adds	r3, #255	; 0xff
 80142e4:	5cd2      	ldrb	r2, [r2, r3]
 80142e6:	187b      	adds	r3, r7, r1
 80142e8:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80142ea:	4bb0      	ldr	r3, [pc, #704]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 80142ec:	4ab0      	ldr	r2, [pc, #704]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80142ee:	589b      	ldr	r3, [r3, r2]
 80142f0:	781b      	ldrb	r3, [r3, #0]
 80142f2:	1879      	adds	r1, r7, r1
 80142f4:	2207      	movs	r2, #7
 80142f6:	0018      	movs	r0, r3
 80142f8:	f003 f921 	bl	801753e <RegionVerify>
 80142fc:	1e03      	subs	r3, r0, #0
 80142fe:	d008      	beq.n	8014312 <LoRaMacMibSetRequestConfirm+0x57e>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8014300:	4baa      	ldr	r3, [pc, #680]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 8014302:	4aab      	ldr	r2, [pc, #684]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014304:	589b      	ldr	r3, [r3, r2]
 8014306:	687a      	ldr	r2, [r7, #4]
 8014308:	3328      	adds	r3, #40	; 0x28
 801430a:	3204      	adds	r2, #4
 801430c:	ca03      	ldmia	r2!, {r0, r1}
 801430e:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014310:	e22b      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014312:	2317      	movs	r3, #23
 8014314:	18fb      	adds	r3, r7, r3
 8014316:	2203      	movs	r2, #3
 8014318:	701a      	strb	r2, [r3, #0]
            break;
 801431a:	e226      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	7a1b      	ldrb	r3, [r3, #8]
 8014320:	b25a      	sxtb	r2, r3
 8014322:	2108      	movs	r1, #8
 8014324:	187b      	adds	r3, r7, r1
 8014326:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8014328:	4ba0      	ldr	r3, [pc, #640]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 801432a:	4aa1      	ldr	r2, [pc, #644]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801432c:	589a      	ldr	r2, [r3, r2]
 801432e:	232e      	movs	r3, #46	; 0x2e
 8014330:	33ff      	adds	r3, #255	; 0xff
 8014332:	5cd2      	ldrb	r2, [r2, r3]
 8014334:	187b      	adds	r3, r7, r1
 8014336:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8014338:	4b9c      	ldr	r3, [pc, #624]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 801433a:	4a9d      	ldr	r2, [pc, #628]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801433c:	589b      	ldr	r3, [r3, r2]
 801433e:	781b      	ldrb	r3, [r3, #0]
 8014340:	1879      	adds	r1, r7, r1
 8014342:	2207      	movs	r2, #7
 8014344:	0018      	movs	r0, r3
 8014346:	f003 f8fa 	bl	801753e <RegionVerify>
 801434a:	1e03      	subs	r3, r0, #0
 801434c:	d03c      	beq.n	80143c8 <LoRaMacMibSetRequestConfirm+0x634>
            {
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801434e:	4b97      	ldr	r3, [pc, #604]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 8014350:	4a97      	ldr	r2, [pc, #604]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014352:	5899      	ldr	r1, [r3, r2]
 8014354:	2392      	movs	r3, #146	; 0x92
 8014356:	005b      	lsls	r3, r3, #1
 8014358:	687a      	ldr	r2, [r7, #4]
 801435a:	18cb      	adds	r3, r1, r3
 801435c:	3204      	adds	r2, #4
 801435e:	ca03      	ldmia	r2!, {r0, r1}
 8014360:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8014362:	4b92      	ldr	r3, [pc, #584]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 8014364:	4a92      	ldr	r2, [pc, #584]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014366:	589b      	ldr	r3, [r3, r2]
 8014368:	22f0      	movs	r2, #240	; 0xf0
 801436a:	5c9b      	ldrb	r3, [r3, r2]
 801436c:	2b02      	cmp	r3, #2
 801436e:	d000      	beq.n	8014372 <LoRaMacMibSetRequestConfirm+0x5de>
 8014370:	e1f4      	b.n	801475c <LoRaMacMibSetRequestConfirm+0x9c8>
 8014372:	4b8e      	ldr	r3, [pc, #568]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 8014374:	4a8e      	ldr	r2, [pc, #568]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014376:	589a      	ldr	r2, [r3, r2]
 8014378:	23ea      	movs	r3, #234	; 0xea
 801437a:	005b      	lsls	r3, r3, #1
 801437c:	5cd3      	ldrb	r3, [r2, r3]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d100      	bne.n	8014384 <LoRaMacMibSetRequestConfirm+0x5f0>
 8014382:	e1eb      	b.n	801475c <LoRaMacMibSetRequestConfirm+0x9c8>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8014384:	4b8b      	ldr	r3, [pc, #556]	; (80145b4 <LoRaMacMibSetRequestConfirm+0x820>)
 8014386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014388:	4798      	blx	r3
                    // Compute RxC windows parameters
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801438a:	4b88      	ldr	r3, [pc, #544]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 801438c:	4a88      	ldr	r2, [pc, #544]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801438e:	589b      	ldr	r3, [r3, r2]
 8014390:	7818      	ldrb	r0, [r3, #0]
                                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8014392:	4b86      	ldr	r3, [pc, #536]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 8014394:	4a86      	ldr	r2, [pc, #536]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014396:	589a      	ldr	r2, [r3, r2]
 8014398:	2394      	movs	r3, #148	; 0x94
 801439a:	005b      	lsls	r3, r3, #1
 801439c:	5cd3      	ldrb	r3, [r2, r3]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801439e:	b259      	sxtb	r1, r3
                                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 80143a0:	4b82      	ldr	r3, [pc, #520]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 80143a2:	4a83      	ldr	r2, [pc, #524]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80143a4:	589a      	ldr	r2, [r3, r2]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80143a6:	2380      	movs	r3, #128	; 0x80
 80143a8:	005b      	lsls	r3, r3, #1
 80143aa:	5cd4      	ldrb	r4, [r2, r3]
                                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 80143ac:	4b7f      	ldr	r3, [pc, #508]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 80143ae:	4a80      	ldr	r2, [pc, #512]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80143b0:	589b      	ldr	r3, [r3, r2]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80143b2:	22fc      	movs	r2, #252	; 0xfc
 80143b4:	589a      	ldr	r2, [r3, r2]
 80143b6:	4b80      	ldr	r3, [pc, #512]	; (80145b8 <LoRaMacMibSetRequestConfirm+0x824>)
 80143b8:	9300      	str	r3, [sp, #0]
 80143ba:	0013      	movs	r3, r2
 80143bc:	0022      	movs	r2, r4
 80143be:	f003 f906 	bl	80175ce <RegionComputeRxWindowParameters>
                                                     &MacCtx.RxWindowCConfig );
                    OpenContinuousRxCWindow( );
 80143c2:	f7fe f99d 	bl	8012700 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80143c6:	e1c9      	b.n	801475c <LoRaMacMibSetRequestConfirm+0x9c8>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80143c8:	2317      	movs	r3, #23
 80143ca:	18fb      	adds	r3, r7, r3
 80143cc:	2203      	movs	r2, #3
 80143ce:	701a      	strb	r2, [r3, #0]
            break;
 80143d0:	e1c4      	b.n	801475c <LoRaMacMibSetRequestConfirm+0x9c8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	7a1b      	ldrb	r3, [r3, #8]
 80143d6:	b25a      	sxtb	r2, r3
 80143d8:	2108      	movs	r1, #8
 80143da:	187b      	adds	r3, r7, r1
 80143dc:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80143de:	4b73      	ldr	r3, [pc, #460]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 80143e0:	4a73      	ldr	r2, [pc, #460]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80143e2:	589a      	ldr	r2, [r3, r2]
 80143e4:	232e      	movs	r3, #46	; 0x2e
 80143e6:	33ff      	adds	r3, #255	; 0xff
 80143e8:	5cd2      	ldrb	r2, [r2, r3]
 80143ea:	187b      	adds	r3, r7, r1
 80143ec:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80143ee:	4b6f      	ldr	r3, [pc, #444]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 80143f0:	4a6f      	ldr	r2, [pc, #444]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80143f2:	589b      	ldr	r3, [r3, r2]
 80143f4:	781b      	ldrb	r3, [r3, #0]
 80143f6:	1879      	adds	r1, r7, r1
 80143f8:	2207      	movs	r2, #7
 80143fa:	0018      	movs	r0, r3
 80143fc:	f003 f89f 	bl	801753e <RegionVerify>
 8014400:	1e03      	subs	r3, r0, #0
 8014402:	d008      	beq.n	8014416 <LoRaMacMibSetRequestConfirm+0x682>
            {
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8014404:	4b69      	ldr	r3, [pc, #420]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 8014406:	4a6a      	ldr	r2, [pc, #424]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014408:	589b      	ldr	r3, [r3, r2]
 801440a:	687a      	ldr	r2, [r7, #4]
 801440c:	3330      	adds	r3, #48	; 0x30
 801440e:	3204      	adds	r2, #4
 8014410:	ca03      	ldmia	r2!, {r0, r1}
 8014412:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014414:	e1a9      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014416:	2317      	movs	r3, #23
 8014418:	18fb      	adds	r3, r7, r3
 801441a:	2203      	movs	r2, #3
 801441c:	701a      	strb	r2, [r3, #0]
            break;
 801441e:	e1a4      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	685a      	ldr	r2, [r3, #4]
 8014424:	210c      	movs	r1, #12
 8014426:	187b      	adds	r3, r7, r1
 8014428:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801442a:	187b      	adds	r3, r7, r1
 801442c:	2201      	movs	r2, #1
 801442e:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8014430:	4b5e      	ldr	r3, [pc, #376]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 8014432:	4a5f      	ldr	r2, [pc, #380]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014434:	589b      	ldr	r3, [r3, r2]
 8014436:	781b      	ldrb	r3, [r3, #0]
 8014438:	187a      	adds	r2, r7, r1
 801443a:	0011      	movs	r1, r2
 801443c:	0018      	movs	r0, r3
 801443e:	f003 f8b0 	bl	80175a2 <RegionChanMaskSet>
 8014442:	0003      	movs	r3, r0
 8014444:	001a      	movs	r2, r3
 8014446:	2301      	movs	r3, #1
 8014448:	4053      	eors	r3, r2
 801444a:	b2db      	uxtb	r3, r3
 801444c:	2b00      	cmp	r3, #0
 801444e:	d100      	bne.n	8014452 <LoRaMacMibSetRequestConfirm+0x6be>
 8014450:	e186      	b.n	8014760 <LoRaMacMibSetRequestConfirm+0x9cc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014452:	2317      	movs	r3, #23
 8014454:	18fb      	adds	r3, r7, r3
 8014456:	2203      	movs	r2, #3
 8014458:	701a      	strb	r2, [r3, #0]
            }
            break;
 801445a:	e181      	b.n	8014760 <LoRaMacMibSetRequestConfirm+0x9cc>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	685a      	ldr	r2, [r3, #4]
 8014460:	210c      	movs	r1, #12
 8014462:	187b      	adds	r3, r7, r1
 8014464:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8014466:	187b      	adds	r3, r7, r1
 8014468:	2200      	movs	r2, #0
 801446a:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 801446c:	4b4f      	ldr	r3, [pc, #316]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 801446e:	4a50      	ldr	r2, [pc, #320]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014470:	589b      	ldr	r3, [r3, r2]
 8014472:	781b      	ldrb	r3, [r3, #0]
 8014474:	187a      	adds	r2, r7, r1
 8014476:	0011      	movs	r1, r2
 8014478:	0018      	movs	r0, r3
 801447a:	f003 f892 	bl	80175a2 <RegionChanMaskSet>
 801447e:	0003      	movs	r3, r0
 8014480:	001a      	movs	r2, r3
 8014482:	2301      	movs	r3, #1
 8014484:	4053      	eors	r3, r2
 8014486:	b2db      	uxtb	r3, r3
 8014488:	2b00      	cmp	r3, #0
 801448a:	d100      	bne.n	801448e <LoRaMacMibSetRequestConfirm+0x6fa>
 801448c:	e16a      	b.n	8014764 <LoRaMacMibSetRequestConfirm+0x9d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801448e:	2317      	movs	r3, #23
 8014490:	18fb      	adds	r3, r7, r3
 8014492:	2203      	movs	r2, #3
 8014494:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014496:	e165      	b.n	8014764 <LoRaMacMibSetRequestConfirm+0x9d0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	791b      	ldrb	r3, [r3, #4]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d00c      	beq.n	80144ba <LoRaMacMibSetRequestConfirm+0x726>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80144a4:	2b0f      	cmp	r3, #15
 80144a6:	d808      	bhi.n	80144ba <LoRaMacMibSetRequestConfirm+0x726>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80144a8:	4b40      	ldr	r3, [pc, #256]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 80144aa:	4a41      	ldr	r2, [pc, #260]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80144ac:	589a      	ldr	r2, [r3, r2]
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	7919      	ldrb	r1, [r3, #4]
 80144b2:	238c      	movs	r3, #140	; 0x8c
 80144b4:	005b      	lsls	r3, r3, #1
 80144b6:	54d1      	strb	r1, [r2, r3]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80144b8:	e157      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80144ba:	2317      	movs	r3, #23
 80144bc:	18fb      	adds	r3, r7, r3
 80144be:	2203      	movs	r2, #3
 80144c0:	701a      	strb	r2, [r3, #0]
            break;
 80144c2:	e152      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80144c4:	4b39      	ldr	r3, [pc, #228]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 80144c6:	4a3a      	ldr	r2, [pc, #232]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80144c8:	589a      	ldr	r2, [r3, r2]
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	6859      	ldr	r1, [r3, #4]
 80144ce:	2382      	movs	r3, #130	; 0x82
 80144d0:	005b      	lsls	r3, r3, #1
 80144d2:	50d1      	str	r1, [r2, r3]
            break;
 80144d4:	e149      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80144d6:	4b35      	ldr	r3, [pc, #212]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 80144d8:	4a35      	ldr	r2, [pc, #212]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80144da:	589a      	ldr	r2, [r3, r2]
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	6859      	ldr	r1, [r3, #4]
 80144e0:	2384      	movs	r3, #132	; 0x84
 80144e2:	005b      	lsls	r3, r3, #1
 80144e4:	50d1      	str	r1, [r2, r3]
            break;
 80144e6:	e140      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80144e8:	4b30      	ldr	r3, [pc, #192]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 80144ea:	4a31      	ldr	r2, [pc, #196]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80144ec:	589a      	ldr	r2, [r3, r2]
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	6859      	ldr	r1, [r3, #4]
 80144f2:	2386      	movs	r3, #134	; 0x86
 80144f4:	005b      	lsls	r3, r3, #1
 80144f6:	50d1      	str	r1, [r2, r3]
            break;
 80144f8:	e137      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80144fa:	4b2c      	ldr	r3, [pc, #176]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 80144fc:	4a2c      	ldr	r2, [pc, #176]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80144fe:	589a      	ldr	r2, [r3, r2]
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	6859      	ldr	r1, [r3, #4]
 8014504:	2388      	movs	r3, #136	; 0x88
 8014506:	005b      	lsls	r3, r3, #1
 8014508:	50d1      	str	r1, [r2, r3]
            break;
 801450a:	e12e      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 801450c:	4b27      	ldr	r3, [pc, #156]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 801450e:	4a28      	ldr	r2, [pc, #160]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014510:	589a      	ldr	r2, [r3, r2]
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	6859      	ldr	r1, [r3, #4]
 8014516:	238a      	movs	r3, #138	; 0x8a
 8014518:	005b      	lsls	r3, r3, #1
 801451a:	50d1      	str	r1, [r2, r3]
            break;
 801451c:	e125      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	2204      	movs	r2, #4
 8014522:	569a      	ldrsb	r2, [r3, r2]
 8014524:	2108      	movs	r1, #8
 8014526:	187b      	adds	r3, r7, r1
 8014528:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 801452a:	4b20      	ldr	r3, [pc, #128]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 801452c:	4a20      	ldr	r2, [pc, #128]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801452e:	589b      	ldr	r3, [r3, r2]
 8014530:	781b      	ldrb	r3, [r3, #0]
 8014532:	1879      	adds	r1, r7, r1
 8014534:	2206      	movs	r2, #6
 8014536:	0018      	movs	r0, r3
 8014538:	f003 f801 	bl	801753e <RegionVerify>
 801453c:	1e03      	subs	r3, r0, #0
 801453e:	d008      	beq.n	8014552 <LoRaMacMibSetRequestConfirm+0x7be>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014540:	4b1a      	ldr	r3, [pc, #104]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 8014542:	4a1b      	ldr	r2, [pc, #108]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014544:	589b      	ldr	r3, [r3, r2]
 8014546:	2208      	movs	r2, #8
 8014548:	18ba      	adds	r2, r7, r2
 801454a:	7812      	ldrb	r2, [r2, #0]
 801454c:	b252      	sxtb	r2, r2
 801454e:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014550:	e10b      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014552:	2317      	movs	r3, #23
 8014554:	18fb      	adds	r3, r7, r3
 8014556:	2203      	movs	r2, #3
 8014558:	701a      	strb	r2, [r3, #0]
            break;
 801455a:	e106      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	2204      	movs	r2, #4
 8014560:	569a      	ldrsb	r2, [r3, r2]
 8014562:	2108      	movs	r1, #8
 8014564:	187b      	adds	r3, r7, r1
 8014566:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8014568:	4b10      	ldr	r3, [pc, #64]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 801456a:	4a11      	ldr	r2, [pc, #68]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801456c:	589a      	ldr	r2, [r3, r2]
 801456e:	2396      	movs	r3, #150	; 0x96
 8014570:	005b      	lsls	r3, r3, #1
 8014572:	5cd2      	ldrb	r2, [r2, r3]
 8014574:	187b      	adds	r3, r7, r1
 8014576:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8014578:	4b0c      	ldr	r3, [pc, #48]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 801457a:	4a0d      	ldr	r2, [pc, #52]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801457c:	589b      	ldr	r3, [r3, r2]
 801457e:	781b      	ldrb	r3, [r3, #0]
 8014580:	1879      	adds	r1, r7, r1
 8014582:	2205      	movs	r2, #5
 8014584:	0018      	movs	r0, r3
 8014586:	f002 ffda 	bl	801753e <RegionVerify>
 801458a:	1e03      	subs	r3, r0, #0
 801458c:	d009      	beq.n	80145a2 <LoRaMacMibSetRequestConfirm+0x80e>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 801458e:	4b07      	ldr	r3, [pc, #28]	; (80145ac <LoRaMacMibSetRequestConfirm+0x818>)
 8014590:	4a07      	ldr	r2, [pc, #28]	; (80145b0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8014592:	589b      	ldr	r3, [r3, r2]
 8014594:	2208      	movs	r2, #8
 8014596:	18ba      	adds	r2, r7, r2
 8014598:	2100      	movs	r1, #0
 801459a:	5651      	ldrsb	r1, [r2, r1]
 801459c:	22f9      	movs	r2, #249	; 0xf9
 801459e:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80145a0:	e0e3      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80145a2:	2317      	movs	r3, #23
 80145a4:	18fb      	adds	r3, r7, r3
 80145a6:	2203      	movs	r2, #3
 80145a8:	701a      	strb	r2, [r3, #0]
            break;
 80145aa:	e0de      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
 80145ac:	200008ec 	.word	0x200008ec
 80145b0:	00000484 	.word	0x00000484
 80145b4:	0801ca04 	.word	0x0801ca04
 80145b8:	20000ccc 	.word	0x20000ccc
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	2204      	movs	r2, #4
 80145c0:	569a      	ldrsb	r2, [r3, r2]
 80145c2:	2108      	movs	r1, #8
 80145c4:	187b      	adds	r3, r7, r1
 80145c6:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 80145c8:	4b6d      	ldr	r3, [pc, #436]	; (8014780 <LoRaMacMibSetRequestConfirm+0x9ec>)
 80145ca:	4a6e      	ldr	r2, [pc, #440]	; (8014784 <LoRaMacMibSetRequestConfirm+0x9f0>)
 80145cc:	589b      	ldr	r3, [r3, r2]
 80145ce:	781b      	ldrb	r3, [r3, #0]
 80145d0:	1879      	adds	r1, r7, r1
 80145d2:	220a      	movs	r2, #10
 80145d4:	0018      	movs	r0, r3
 80145d6:	f002 ffb2 	bl	801753e <RegionVerify>
 80145da:	1e03      	subs	r3, r0, #0
 80145dc:	d008      	beq.n	80145f0 <LoRaMacMibSetRequestConfirm+0x85c>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 80145de:	4b68      	ldr	r3, [pc, #416]	; (8014780 <LoRaMacMibSetRequestConfirm+0x9ec>)
 80145e0:	4a68      	ldr	r2, [pc, #416]	; (8014784 <LoRaMacMibSetRequestConfirm+0x9f0>)
 80145e2:	589b      	ldr	r3, [r3, r2]
 80145e4:	2208      	movs	r2, #8
 80145e6:	18ba      	adds	r2, r7, r2
 80145e8:	7812      	ldrb	r2, [r2, #0]
 80145ea:	b252      	sxtb	r2, r2
 80145ec:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80145ee:	e0bc      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80145f0:	2317      	movs	r3, #23
 80145f2:	18fb      	adds	r3, r7, r3
 80145f4:	2203      	movs	r2, #3
 80145f6:	701a      	strb	r2, [r3, #0]
            break;
 80145f8:	e0b7      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	2204      	movs	r2, #4
 80145fe:	569a      	ldrsb	r2, [r3, r2]
 8014600:	2108      	movs	r1, #8
 8014602:	187b      	adds	r3, r7, r1
 8014604:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 8014606:	4b5e      	ldr	r3, [pc, #376]	; (8014780 <LoRaMacMibSetRequestConfirm+0x9ec>)
 8014608:	4a5e      	ldr	r2, [pc, #376]	; (8014784 <LoRaMacMibSetRequestConfirm+0x9f0>)
 801460a:	589b      	ldr	r3, [r3, r2]
 801460c:	781b      	ldrb	r3, [r3, #0]
 801460e:	1879      	adds	r1, r7, r1
 8014610:	2209      	movs	r2, #9
 8014612:	0018      	movs	r0, r3
 8014614:	f002 ff93 	bl	801753e <RegionVerify>
 8014618:	1e03      	subs	r3, r0, #0
 801461a:	d009      	beq.n	8014630 <LoRaMacMibSetRequestConfirm+0x89c>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 801461c:	4b58      	ldr	r3, [pc, #352]	; (8014780 <LoRaMacMibSetRequestConfirm+0x9ec>)
 801461e:	4a59      	ldr	r2, [pc, #356]	; (8014784 <LoRaMacMibSetRequestConfirm+0x9f0>)
 8014620:	589b      	ldr	r3, [r3, r2]
 8014622:	2208      	movs	r2, #8
 8014624:	18ba      	adds	r2, r7, r2
 8014626:	2100      	movs	r1, #0
 8014628:	5651      	ldrsb	r1, [r2, r1]
 801462a:	22f8      	movs	r2, #248	; 0xf8
 801462c:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801462e:	e09c      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014630:	2317      	movs	r3, #23
 8014632:	18fb      	adds	r3, r7, r3
 8014634:	2203      	movs	r2, #3
 8014636:	701a      	strb	r2, [r3, #0]
            break;
 8014638:	e097      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801463a:	4b51      	ldr	r3, [pc, #324]	; (8014780 <LoRaMacMibSetRequestConfirm+0x9ec>)
 801463c:	4a51      	ldr	r2, [pc, #324]	; (8014784 <LoRaMacMibSetRequestConfirm+0x9f0>)
 801463e:	589b      	ldr	r3, [r3, r2]
 8014640:	687a      	ldr	r2, [r7, #4]
 8014642:	6852      	ldr	r2, [r2, #4]
 8014644:	609a      	str	r2, [r3, #8]
 8014646:	4a4e      	ldr	r2, [pc, #312]	; (8014780 <LoRaMacMibSetRequestConfirm+0x9ec>)
 8014648:	494e      	ldr	r1, [pc, #312]	; (8014784 <LoRaMacMibSetRequestConfirm+0x9f0>)
 801464a:	5852      	ldr	r2, [r2, r1]
 801464c:	689b      	ldr	r3, [r3, #8]
 801464e:	21fc      	movs	r1, #252	; 0xfc
 8014650:	5053      	str	r3, [r2, r1]
            break;
 8014652:	e08a      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8014654:	4b4a      	ldr	r3, [pc, #296]	; (8014780 <LoRaMacMibSetRequestConfirm+0x9ec>)
 8014656:	4a4b      	ldr	r2, [pc, #300]	; (8014784 <LoRaMacMibSetRequestConfirm+0x9f0>)
 8014658:	589b      	ldr	r3, [r3, r2]
 801465a:	687a      	ldr	r2, [r7, #4]
 801465c:	7912      	ldrb	r2, [r2, #4]
 801465e:	731a      	strb	r2, [r3, #12]
 8014660:	4a47      	ldr	r2, [pc, #284]	; (8014780 <LoRaMacMibSetRequestConfirm+0x9ec>)
 8014662:	4948      	ldr	r1, [pc, #288]	; (8014784 <LoRaMacMibSetRequestConfirm+0x9f0>)
 8014664:	5852      	ldr	r2, [r2, r1]
 8014666:	7b19      	ldrb	r1, [r3, #12]
 8014668:	2380      	movs	r3, #128	; 0x80
 801466a:	005b      	lsls	r3, r3, #1
 801466c:	54d1      	strb	r1, [r2, r3]
            break;
 801466e:	e07c      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8014670:	4b43      	ldr	r3, [pc, #268]	; (8014780 <LoRaMacMibSetRequestConfirm+0x9ec>)
 8014672:	4a44      	ldr	r2, [pc, #272]	; (8014784 <LoRaMacMibSetRequestConfirm+0x9f0>)
 8014674:	589a      	ldr	r2, [r3, r2]
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	6859      	ldr	r1, [r3, #4]
 801467a:	239a      	movs	r3, #154	; 0x9a
 801467c:	005b      	lsls	r3, r3, #1
 801467e:	50d1      	str	r1, [r2, r3]
            break;
 8014680:	e073      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8014682:	4b3f      	ldr	r3, [pc, #252]	; (8014780 <LoRaMacMibSetRequestConfirm+0x9ec>)
 8014684:	4a3f      	ldr	r2, [pc, #252]	; (8014784 <LoRaMacMibSetRequestConfirm+0x9f0>)
 8014686:	589b      	ldr	r3, [r3, r2]
 8014688:	687a      	ldr	r2, [r7, #4]
 801468a:	6852      	ldr	r2, [r2, #4]
 801468c:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 801468e:	e06c      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	685b      	ldr	r3, [r3, #4]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d009      	beq.n	80146ac <LoRaMacMibSetRequestConfirm+0x918>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	2217      	movs	r2, #23
 801469e:	18bc      	adds	r4, r7, r2
 80146a0:	0018      	movs	r0, r3
 80146a2:	f7fe fb4f 	bl	8012d44 <RestoreCtxs>
 80146a6:	0003      	movs	r3, r0
 80146a8:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80146aa:	e05e      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80146ac:	2317      	movs	r3, #23
 80146ae:	18fb      	adds	r3, r7, r3
 80146b0:	2203      	movs	r2, #3
 80146b2:	701a      	strb	r2, [r3, #0]
            break;
 80146b4:	e059      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	799b      	ldrb	r3, [r3, #6]
 80146ba:	2b01      	cmp	r3, #1
 80146bc:	d810      	bhi.n	80146e0 <LoRaMacMibSetRequestConfirm+0x94c>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 80146be:	4b30      	ldr	r3, [pc, #192]	; (8014780 <LoRaMacMibSetRequestConfirm+0x9ec>)
 80146c0:	4a30      	ldr	r2, [pc, #192]	; (8014784 <LoRaMacMibSetRequestConfirm+0x9f0>)
 80146c2:	5899      	ldr	r1, [r3, r2]
 80146c4:	23e8      	movs	r3, #232	; 0xe8
 80146c6:	005a      	lsls	r2, r3, #1
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	685b      	ldr	r3, [r3, #4]
 80146cc:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	0018      	movs	r0, r3
 80146d4:	f001 fdaa 	bl	801622c <LoRaMacCryptoSetLrWanVersion>
 80146d8:	1e03      	subs	r3, r0, #0
 80146da:	d045      	beq.n	8014768 <LoRaMacMibSetRequestConfirm+0x9d4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80146dc:	2311      	movs	r3, #17
 80146de:	e04b      	b.n	8014778 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80146e0:	2317      	movs	r3, #23
 80146e2:	18fb      	adds	r3, r7, r3
 80146e4:	2203      	movs	r2, #3
 80146e6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80146e8:	e03e      	b.n	8014768 <LoRaMacMibSetRequestConfirm+0x9d4>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80146ea:	2317      	movs	r3, #23
 80146ec:	18fc      	adds	r4, r7, r3
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	0018      	movs	r0, r3
 80146f2:	f000 fc7c 	bl	8014fee <LoRaMacMibClassBSetRequestConfirm>
 80146f6:	0003      	movs	r3, r0
 80146f8:	7023      	strb	r3, [r4, #0]
            break;
 80146fa:	e036      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 80146fc:	46c0      	nop			; (mov r8, r8)
 80146fe:	e034      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014700:	46c0      	nop			; (mov r8, r8)
 8014702:	e032      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014704:	46c0      	nop			; (mov r8, r8)
 8014706:	e030      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014708:	46c0      	nop			; (mov r8, r8)
 801470a:	e02e      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 801470c:	46c0      	nop			; (mov r8, r8)
 801470e:	e02c      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014710:	46c0      	nop			; (mov r8, r8)
 8014712:	e02a      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014714:	46c0      	nop			; (mov r8, r8)
 8014716:	e028      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014718:	46c0      	nop			; (mov r8, r8)
 801471a:	e026      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 801471c:	46c0      	nop			; (mov r8, r8)
 801471e:	e024      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014720:	46c0      	nop			; (mov r8, r8)
 8014722:	e022      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014724:	46c0      	nop			; (mov r8, r8)
 8014726:	e020      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014728:	46c0      	nop			; (mov r8, r8)
 801472a:	e01e      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 801472c:	46c0      	nop			; (mov r8, r8)
 801472e:	e01c      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014730:	46c0      	nop			; (mov r8, r8)
 8014732:	e01a      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014734:	46c0      	nop			; (mov r8, r8)
 8014736:	e018      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014738:	46c0      	nop			; (mov r8, r8)
 801473a:	e016      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 801473c:	46c0      	nop			; (mov r8, r8)
 801473e:	e014      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014740:	46c0      	nop			; (mov r8, r8)
 8014742:	e012      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014744:	46c0      	nop			; (mov r8, r8)
 8014746:	e010      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014748:	46c0      	nop			; (mov r8, r8)
 801474a:	e00e      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 801474c:	46c0      	nop			; (mov r8, r8)
 801474e:	e00c      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014750:	46c0      	nop			; (mov r8, r8)
 8014752:	e00a      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014754:	46c0      	nop			; (mov r8, r8)
 8014756:	e008      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014758:	46c0      	nop			; (mov r8, r8)
 801475a:	e006      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 801475c:	46c0      	nop			; (mov r8, r8)
 801475e:	e004      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014760:	46c0      	nop			; (mov r8, r8)
 8014762:	e002      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014764:	46c0      	nop			; (mov r8, r8)
 8014766:	e000      	b.n	801476a <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8014768:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 801476a:	f7fe fd07 	bl	801317c <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 801476e:	f7fe fcfd 	bl	801316c <EventMacNvmCtxChanged>
    return status;
 8014772:	2317      	movs	r3, #23
 8014774:	18fb      	adds	r3, r7, r3
 8014776:	781b      	ldrb	r3, [r3, #0]
}
 8014778:	0018      	movs	r0, r3
 801477a:	46bd      	mov	sp, r7
 801477c:	b007      	add	sp, #28
 801477e:	bd90      	pop	{r4, r7, pc}
 8014780:	200008ec 	.word	0x200008ec
 8014784:	00000484 	.word	0x00000484

08014788 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8014788:	b5b0      	push	{r4, r5, r7, lr}
 801478a:	b086      	sub	sp, #24
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014790:	2317      	movs	r3, #23
 8014792:	18fb      	adds	r3, r7, r3
 8014794:	2202      	movs	r2, #2
 8014796:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8014798:	210c      	movs	r1, #12
 801479a:	187b      	adds	r3, r7, r1
 801479c:	2200      	movs	r2, #0
 801479e:	701a      	strb	r2, [r3, #0]
 80147a0:	187b      	adds	r3, r7, r1
 80147a2:	2200      	movs	r2, #0
 80147a4:	705a      	strb	r2, [r3, #1]

    if( mlmeRequest == NULL )
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d101      	bne.n	80147b0 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80147ac:	2303      	movs	r3, #3
 80147ae:	e131      	b.n	8014a14 <LoRaMacMlmeRequest+0x28c>
    }
    if( LoRaMacIsBusy( ) == true )
 80147b0:	f7fb fef4 	bl	801059c <LoRaMacIsBusy>
 80147b4:	1e03      	subs	r3, r0, #0
 80147b6:	d001      	beq.n	80147bc <LoRaMacMlmeRequest+0x34>
    {
        return LORAMAC_STATUS_BUSY;
 80147b8:	2301      	movs	r3, #1
 80147ba:	e12b      	b.n	8014a14 <LoRaMacMlmeRequest+0x28c>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80147bc:	f001 f912 	bl	80159e4 <LoRaMacConfirmQueueIsFull>
 80147c0:	1e03      	subs	r3, r0, #0
 80147c2:	d001      	beq.n	80147c8 <LoRaMacMlmeRequest+0x40>
    {
        return LORAMAC_STATUS_BUSY;
 80147c4:	2301      	movs	r3, #1
 80147c6:	e125      	b.n	8014a14 <LoRaMacMlmeRequest+0x28c>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80147c8:	f001 f902 	bl	80159d0 <LoRaMacConfirmQueueGetCnt>
 80147cc:	1e03      	subs	r3, r0, #0
 80147ce:	d105      	bne.n	80147dc <LoRaMacMlmeRequest+0x54>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80147d0:	4b92      	ldr	r3, [pc, #584]	; (8014a1c <LoRaMacMlmeRequest+0x294>)
 80147d2:	2214      	movs	r2, #20
 80147d4:	2100      	movs	r1, #0
 80147d6:	0018      	movs	r0, r3
 80147d8:	f006 ff04 	bl	801b5e4 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80147dc:	4b90      	ldr	r3, [pc, #576]	; (8014a20 <LoRaMacMlmeRequest+0x298>)
 80147de:	4a91      	ldr	r2, [pc, #580]	; (8014a24 <LoRaMacMlmeRequest+0x29c>)
 80147e0:	2101      	movs	r1, #1
 80147e2:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80147e4:	4b8e      	ldr	r3, [pc, #568]	; (8014a20 <LoRaMacMlmeRequest+0x298>)
 80147e6:	4a90      	ldr	r2, [pc, #576]	; (8014a28 <LoRaMacMlmeRequest+0x2a0>)
 80147e8:	5c99      	ldrb	r1, [r3, r2]
 80147ea:	2004      	movs	r0, #4
 80147ec:	4301      	orrs	r1, r0
 80147ee:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	781a      	ldrb	r2, [r3, #0]
 80147f4:	2110      	movs	r1, #16
 80147f6:	187b      	adds	r3, r7, r1
 80147f8:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80147fa:	187b      	adds	r3, r7, r1
 80147fc:	2201      	movs	r2, #1
 80147fe:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 8014800:	187b      	adds	r3, r7, r1
 8014802:	2200      	movs	r2, #0
 8014804:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	781b      	ldrb	r3, [r3, #0]
 801480a:	2b0d      	cmp	r3, #13
 801480c:	d900      	bls.n	8014810 <LoRaMacMlmeRequest+0x88>
 801480e:	e0d8      	b.n	80149c2 <LoRaMacMlmeRequest+0x23a>
 8014810:	009a      	lsls	r2, r3, #2
 8014812:	4b86      	ldr	r3, [pc, #536]	; (8014a2c <LoRaMacMlmeRequest+0x2a4>)
 8014814:	18d3      	adds	r3, r2, r3
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 801481a:	4a81      	ldr	r2, [pc, #516]	; (8014a20 <LoRaMacMlmeRequest+0x298>)
 801481c:	23d0      	movs	r3, #208	; 0xd0
 801481e:	009b      	lsls	r3, r3, #2
 8014820:	58d3      	ldr	r3, [r2, r3]
 8014822:	2220      	movs	r2, #32
 8014824:	4013      	ands	r3, r2
 8014826:	d001      	beq.n	801482c <LoRaMacMlmeRequest+0xa4>
            {
                return LORAMAC_STATUS_BUSY;
 8014828:	2301      	movs	r3, #1
 801482a:	e0f3      	b.n	8014a14 <LoRaMacMlmeRequest+0x28c>
            }

            ResetMacParameters( );
 801482c:	f7fd fe38 	bl	80124a0 <ResetMacParameters>

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8014830:	4b7b      	ldr	r3, [pc, #492]	; (8014a20 <LoRaMacMlmeRequest+0x298>)
 8014832:	4a7f      	ldr	r2, [pc, #508]	; (8014a30 <LoRaMacMlmeRequest+0x2a8>)
 8014834:	589b      	ldr	r3, [r3, r2]
 8014836:	7818      	ldrb	r0, [r3, #0]
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	791b      	ldrb	r3, [r3, #4]
 801483c:	b259      	sxtb	r1, r3
 801483e:	4b78      	ldr	r3, [pc, #480]	; (8014a20 <LoRaMacMlmeRequest+0x298>)
 8014840:	4a7b      	ldr	r2, [pc, #492]	; (8014a30 <LoRaMacMlmeRequest+0x2a8>)
 8014842:	589c      	ldr	r4, [r3, r2]
 8014844:	2200      	movs	r2, #0
 8014846:	f002 ff91 	bl	801776c <RegionAlternateDr>
 801484a:	0003      	movs	r3, r0
 801484c:	001a      	movs	r2, r3
 801484e:	23f9      	movs	r3, #249	; 0xf9
 8014850:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8014852:	2310      	movs	r3, #16
 8014854:	18fb      	adds	r3, r7, r3
 8014856:	2207      	movs	r2, #7
 8014858:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ );
 801485a:	2517      	movs	r5, #23
 801485c:	197c      	adds	r4, r7, r5
 801485e:	20ff      	movs	r0, #255	; 0xff
 8014860:	f7fd fb44 	bl	8011eec <SendReJoinReq>
 8014864:	0003      	movs	r3, r0
 8014866:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 8014868:	197b      	adds	r3, r7, r5
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d100      	bne.n	8014872 <LoRaMacMlmeRequest+0xea>
 8014870:	e0a9      	b.n	80149c6 <LoRaMacMlmeRequest+0x23e>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8014872:	4b6b      	ldr	r3, [pc, #428]	; (8014a20 <LoRaMacMlmeRequest+0x298>)
 8014874:	4a6e      	ldr	r2, [pc, #440]	; (8014a30 <LoRaMacMlmeRequest+0x2a8>)
 8014876:	589b      	ldr	r3, [r3, r2]
 8014878:	7818      	ldrb	r0, [r3, #0]
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	791b      	ldrb	r3, [r3, #4]
 801487e:	b259      	sxtb	r1, r3
 8014880:	4b67      	ldr	r3, [pc, #412]	; (8014a20 <LoRaMacMlmeRequest+0x298>)
 8014882:	4a6b      	ldr	r2, [pc, #428]	; (8014a30 <LoRaMacMlmeRequest+0x2a8>)
 8014884:	589c      	ldr	r4, [r3, r2]
 8014886:	2201      	movs	r2, #1
 8014888:	f002 ff70 	bl	801776c <RegionAlternateDr>
 801488c:	0003      	movs	r3, r0
 801488e:	001a      	movs	r2, r3
 8014890:	23f9      	movs	r3, #249	; 0xf9
 8014892:	54e2      	strb	r2, [r4, r3]
            }
            break;
 8014894:	e097      	b.n	80149c6 <LoRaMacMlmeRequest+0x23e>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014896:	2317      	movs	r3, #23
 8014898:	18fb      	adds	r3, r7, r3
 801489a:	2200      	movs	r2, #0
 801489c:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801489e:	230c      	movs	r3, #12
 80148a0:	18fb      	adds	r3, r7, r3
 80148a2:	2200      	movs	r2, #0
 80148a4:	0019      	movs	r1, r3
 80148a6:	2002      	movs	r0, #2
 80148a8:	f000 fd4e 	bl	8015348 <LoRaMacCommandsAddCmd>
 80148ac:	1e03      	subs	r3, r0, #0
 80148ae:	d100      	bne.n	80148b2 <LoRaMacMlmeRequest+0x12a>
 80148b0:	e08b      	b.n	80149ca <LoRaMacMlmeRequest+0x242>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80148b2:	2317      	movs	r3, #23
 80148b4:	18fb      	adds	r3, r7, r3
 80148b6:	2213      	movs	r2, #19
 80148b8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80148ba:	e086      	b.n	80149ca <LoRaMacMlmeRequest+0x242>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	889b      	ldrh	r3, [r3, #4]
 80148c0:	2217      	movs	r2, #23
 80148c2:	18bc      	adds	r4, r7, r2
 80148c4:	0018      	movs	r0, r3
 80148c6:	f7fe f971 	bl	8012bac <SetTxContinuousWave>
 80148ca:	0003      	movs	r3, r0
 80148cc:	7023      	strb	r3, [r4, #0]
            break;
 80148ce:	e083      	b.n	80149d8 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	8898      	ldrh	r0, [r3, #4]
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	6899      	ldr	r1, [r3, #8]
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	7b1b      	ldrb	r3, [r3, #12]
 80148dc:	2217      	movs	r2, #23
 80148de:	18bc      	adds	r4, r7, r2
 80148e0:	001a      	movs	r2, r3
 80148e2:	f7fe f9b1 	bl	8012c48 <SetTxContinuousWave1>
 80148e6:	0003      	movs	r3, r0
 80148e8:	7023      	strb	r3, [r4, #0]
            break;
 80148ea:	e075      	b.n	80149d8 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80148ec:	2317      	movs	r3, #23
 80148ee:	18fb      	adds	r3, r7, r3
 80148f0:	2200      	movs	r2, #0
 80148f2:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80148f4:	230c      	movs	r3, #12
 80148f6:	18fb      	adds	r3, r7, r3
 80148f8:	2200      	movs	r2, #0
 80148fa:	0019      	movs	r1, r3
 80148fc:	200d      	movs	r0, #13
 80148fe:	f000 fd23 	bl	8015348 <LoRaMacCommandsAddCmd>
 8014902:	1e03      	subs	r3, r0, #0
 8014904:	d063      	beq.n	80149ce <LoRaMacMlmeRequest+0x246>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014906:	2317      	movs	r3, #23
 8014908:	18fb      	adds	r3, r7, r3
 801490a:	2213      	movs	r2, #19
 801490c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801490e:	e05e      	b.n	80149ce <LoRaMacMlmeRequest+0x246>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8014910:	4b43      	ldr	r3, [pc, #268]	; (8014a20 <LoRaMacMlmeRequest+0x298>)
 8014912:	4a47      	ldr	r2, [pc, #284]	; (8014a30 <LoRaMacMlmeRequest+0x2a8>)
 8014914:	589b      	ldr	r3, [r3, r2]
 8014916:	22f0      	movs	r2, #240	; 0xf0
 8014918:	5c9b      	ldrb	r3, [r3, r2]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d159      	bne.n	80149d2 <LoRaMacMlmeRequest+0x24a>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 801491e:	2416      	movs	r4, #22
 8014920:	193b      	adds	r3, r7, r4
 8014922:	687a      	ldr	r2, [r7, #4]
 8014924:	7912      	ldrb	r2, [r2, #4]
 8014926:	701a      	strb	r2, [r3, #0]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	791b      	ldrb	r3, [r3, #4]
 801492c:	075b      	lsls	r3, r3, #29
 801492e:	0f5b      	lsrs	r3, r3, #29
 8014930:	b2db      	uxtb	r3, r3
 8014932:	0018      	movs	r0, r3
 8014934:	f000 fb33 	bl	8014f9e <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8014938:	210c      	movs	r1, #12
 801493a:	187b      	adds	r3, r7, r1
 801493c:	193a      	adds	r2, r7, r4
 801493e:	7812      	ldrb	r2, [r2, #0]
 8014940:	701a      	strb	r2, [r3, #0]
                status = LORAMAC_STATUS_OK;
 8014942:	2317      	movs	r3, #23
 8014944:	18fb      	adds	r3, r7, r3
 8014946:	2200      	movs	r2, #0
 8014948:	701a      	strb	r2, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801494a:	187b      	adds	r3, r7, r1
 801494c:	2201      	movs	r2, #1
 801494e:	0019      	movs	r1, r3
 8014950:	2010      	movs	r0, #16
 8014952:	f000 fcf9 	bl	8015348 <LoRaMacCommandsAddCmd>
 8014956:	1e03      	subs	r3, r0, #0
 8014958:	d03b      	beq.n	80149d2 <LoRaMacMlmeRequest+0x24a>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801495a:	2317      	movs	r3, #23
 801495c:	18fb      	adds	r3, r7, r3
 801495e:	2213      	movs	r2, #19
 8014960:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 8014962:	e036      	b.n	80149d2 <LoRaMacMlmeRequest+0x24a>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014964:	2317      	movs	r3, #23
 8014966:	18fb      	adds	r3, r7, r3
 8014968:	2200      	movs	r2, #0
 801496a:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801496c:	230c      	movs	r3, #12
 801496e:	18fb      	adds	r3, r7, r3
 8014970:	2200      	movs	r2, #0
 8014972:	0019      	movs	r1, r3
 8014974:	2012      	movs	r0, #18
 8014976:	f000 fce7 	bl	8015348 <LoRaMacCommandsAddCmd>
 801497a:	1e03      	subs	r3, r0, #0
 801497c:	d02b      	beq.n	80149d6 <LoRaMacMlmeRequest+0x24e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801497e:	2317      	movs	r3, #23
 8014980:	18fb      	adds	r3, r7, r3
 8014982:	2213      	movs	r2, #19
 8014984:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014986:	e026      	b.n	80149d6 <LoRaMacMlmeRequest+0x24e>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8014988:	2310      	movs	r3, #16
 801498a:	18fb      	adds	r3, r7, r3
 801498c:	2201      	movs	r2, #1
 801498e:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8014990:	f000 fac3 	bl	8014f1a <LoRaMacClassBIsAcquisitionInProgress>
 8014994:	0003      	movs	r3, r0
 8014996:	001a      	movs	r2, r3
 8014998:	2301      	movs	r3, #1
 801499a:	4053      	eors	r3, r2
 801499c:	b2db      	uxtb	r3, r3
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d00a      	beq.n	80149b8 <LoRaMacMlmeRequest+0x230>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80149a2:	2000      	movs	r0, #0
 80149a4:	f000 fa9b 	bl	8014ede <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80149a8:	2000      	movs	r0, #0
 80149aa:	f000 fabc 	bl	8014f26 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80149ae:	2317      	movs	r3, #23
 80149b0:	18fb      	adds	r3, r7, r3
 80149b2:	2200      	movs	r2, #0
 80149b4:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80149b6:	e00f      	b.n	80149d8 <LoRaMacMlmeRequest+0x250>
                status = LORAMAC_STATUS_BUSY;
 80149b8:	2317      	movs	r3, #23
 80149ba:	18fb      	adds	r3, r7, r3
 80149bc:	2201      	movs	r2, #1
 80149be:	701a      	strb	r2, [r3, #0]
            break;
 80149c0:	e00a      	b.n	80149d8 <LoRaMacMlmeRequest+0x250>
        }
        default:
            break;
 80149c2:	46c0      	nop			; (mov r8, r8)
 80149c4:	e008      	b.n	80149d8 <LoRaMacMlmeRequest+0x250>
            break;
 80149c6:	46c0      	nop			; (mov r8, r8)
 80149c8:	e006      	b.n	80149d8 <LoRaMacMlmeRequest+0x250>
            break;
 80149ca:	46c0      	nop			; (mov r8, r8)
 80149cc:	e004      	b.n	80149d8 <LoRaMacMlmeRequest+0x250>
            break;
 80149ce:	46c0      	nop			; (mov r8, r8)
 80149d0:	e002      	b.n	80149d8 <LoRaMacMlmeRequest+0x250>
            break;
 80149d2:	46c0      	nop			; (mov r8, r8)
 80149d4:	e000      	b.n	80149d8 <LoRaMacMlmeRequest+0x250>
            break;
 80149d6:	46c0      	nop			; (mov r8, r8)
    }

    if( status != LORAMAC_STATUS_OK )
 80149d8:	2317      	movs	r3, #23
 80149da:	18fb      	adds	r3, r7, r3
 80149dc:	781b      	ldrb	r3, [r3, #0]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d00e      	beq.n	8014a00 <LoRaMacMlmeRequest+0x278>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80149e2:	f000 fff5 	bl	80159d0 <LoRaMacConfirmQueueGetCnt>
 80149e6:	1e03      	subs	r3, r0, #0
 80149e8:	d111      	bne.n	8014a0e <LoRaMacMlmeRequest+0x286>
        {
            MacCtx.NodeAckRequested = false;
 80149ea:	4b0d      	ldr	r3, [pc, #52]	; (8014a20 <LoRaMacMlmeRequest+0x298>)
 80149ec:	4a11      	ldr	r2, [pc, #68]	; (8014a34 <LoRaMacMlmeRequest+0x2ac>)
 80149ee:	2100      	movs	r1, #0
 80149f0:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80149f2:	4b0b      	ldr	r3, [pc, #44]	; (8014a20 <LoRaMacMlmeRequest+0x298>)
 80149f4:	4a0c      	ldr	r2, [pc, #48]	; (8014a28 <LoRaMacMlmeRequest+0x2a0>)
 80149f6:	5c99      	ldrb	r1, [r3, r2]
 80149f8:	2004      	movs	r0, #4
 80149fa:	4381      	bics	r1, r0
 80149fc:	5499      	strb	r1, [r3, r2]
 80149fe:	e006      	b.n	8014a0e <LoRaMacMlmeRequest+0x286>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8014a00:	2310      	movs	r3, #16
 8014a02:	18fb      	adds	r3, r7, r3
 8014a04:	0018      	movs	r0, r3
 8014a06:	f000 fe91 	bl	801572c <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 8014a0a:	f7fe fbaf 	bl	801316c <EventMacNvmCtxChanged>
    }
    return status;
 8014a0e:	2317      	movs	r3, #23
 8014a10:	18fb      	adds	r3, r7, r3
 8014a12:	781b      	ldrb	r3, [r3, #0]
}
 8014a14:	0018      	movs	r0, r3
 8014a16:	46bd      	mov	sp, r7
 8014a18:	b006      	add	sp, #24
 8014a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8014a1c:	20000d3c 	.word	0x20000d3c
 8014a20:	200008ec 	.word	0x200008ec
 8014a24:	00000451 	.word	0x00000451
 8014a28:	00000481 	.word	0x00000481
 8014a2c:	0801d0e4 	.word	0x0801d0e4
 8014a30:	00000484 	.word	0x00000484
 8014a34:	00000414 	.word	0x00000414

08014a38 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 8014a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a3a:	b08b      	sub	sp, #44	; 0x2c
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014a40:	2327      	movs	r3, #39	; 0x27
 8014a42:	18fb      	adds	r3, r7, r3
 8014a44:	2202      	movs	r2, #2
 8014a46:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8014a48:	2326      	movs	r3, #38	; 0x26
 8014a4a:	18fb      	adds	r3, r7, r3
 8014a4c:	2200      	movs	r2, #0
 8014a4e:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8014a50:	231d      	movs	r3, #29
 8014a52:	18fb      	adds	r3, r7, r3
 8014a54:	2200      	movs	r2, #0
 8014a56:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 8014a58:	231c      	movs	r3, #28
 8014a5a:	18fb      	adds	r3, r7, r3
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d101      	bne.n	8014a6a <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014a66:	2303      	movs	r3, #3
 8014a68:	e113      	b.n	8014c92 <LoRaMacMcpsRequest+0x25a>
    }
    if( LoRaMacIsBusy( ) == true )
 8014a6a:	f7fb fd97 	bl	801059c <LoRaMacIsBusy>
 8014a6e:	1e03      	subs	r3, r0, #0
 8014a70:	d001      	beq.n	8014a76 <LoRaMacMcpsRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8014a72:	2301      	movs	r3, #1
 8014a74:	e10d      	b.n	8014c92 <LoRaMacMcpsRequest+0x25a>
    }

    macHdr.Value = 0;
 8014a76:	2310      	movs	r3, #16
 8014a78:	18fb      	adds	r3, r7, r3
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8014a7e:	4b87      	ldr	r3, [pc, #540]	; (8014c9c <LoRaMacMcpsRequest+0x264>)
 8014a80:	2214      	movs	r2, #20
 8014a82:	2100      	movs	r1, #0
 8014a84:	0018      	movs	r0, r3
 8014a86:	f006 fdad 	bl	801b5e4 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014a8a:	4b85      	ldr	r3, [pc, #532]	; (8014ca0 <LoRaMacMcpsRequest+0x268>)
 8014a8c:	4a85      	ldr	r2, [pc, #532]	; (8014ca4 <LoRaMacMcpsRequest+0x26c>)
 8014a8e:	2101      	movs	r1, #1
 8014a90:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8014a92:	4b83      	ldr	r3, [pc, #524]	; (8014ca0 <LoRaMacMcpsRequest+0x268>)
 8014a94:	4a84      	ldr	r2, [pc, #528]	; (8014ca8 <LoRaMacMcpsRequest+0x270>)
 8014a96:	2101      	movs	r1, #1
 8014a98:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	781b      	ldrb	r3, [r3, #0]
 8014a9e:	2b01      	cmp	r3, #1
 8014aa0:	d028      	beq.n	8014af4 <LoRaMacMcpsRequest+0xbc>
 8014aa2:	2b03      	cmp	r3, #3
 8014aa4:	d053      	beq.n	8014b4e <LoRaMacMcpsRequest+0x116>
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d000      	beq.n	8014aac <LoRaMacMcpsRequest+0x74>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8014aaa:	e06d      	b.n	8014b88 <LoRaMacMcpsRequest+0x150>
            readyToSend = true;
 8014aac:	231c      	movs	r3, #28
 8014aae:	18fb      	adds	r3, r7, r3
 8014ab0:	2201      	movs	r2, #1
 8014ab2:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 8014ab4:	4b7a      	ldr	r3, [pc, #488]	; (8014ca0 <LoRaMacMcpsRequest+0x268>)
 8014ab6:	4a7d      	ldr	r2, [pc, #500]	; (8014cac <LoRaMacMcpsRequest+0x274>)
 8014ab8:	2101      	movs	r1, #1
 8014aba:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8014abc:	2310      	movs	r3, #16
 8014abe:	18fb      	adds	r3, r7, r3
 8014ac0:	781a      	ldrb	r2, [r3, #0]
 8014ac2:	211f      	movs	r1, #31
 8014ac4:	400a      	ands	r2, r1
 8014ac6:	1c11      	adds	r1, r2, #0
 8014ac8:	2240      	movs	r2, #64	; 0x40
 8014aca:	430a      	orrs	r2, r1
 8014acc:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8014ace:	2326      	movs	r3, #38	; 0x26
 8014ad0:	18fb      	adds	r3, r7, r3
 8014ad2:	687a      	ldr	r2, [r7, #4]
 8014ad4:	7912      	ldrb	r2, [r2, #4]
 8014ad6:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	689b      	ldr	r3, [r3, #8]
 8014adc:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8014ade:	231e      	movs	r3, #30
 8014ae0:	18fb      	adds	r3, r7, r3
 8014ae2:	687a      	ldr	r2, [r7, #4]
 8014ae4:	8992      	ldrh	r2, [r2, #12]
 8014ae6:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8014ae8:	231d      	movs	r3, #29
 8014aea:	18fb      	adds	r3, r7, r3
 8014aec:	687a      	ldr	r2, [r7, #4]
 8014aee:	7b92      	ldrb	r2, [r2, #14]
 8014af0:	701a      	strb	r2, [r3, #0]
            break;
 8014af2:	e049      	b.n	8014b88 <LoRaMacMcpsRequest+0x150>
            readyToSend = true;
 8014af4:	231c      	movs	r3, #28
 8014af6:	18fb      	adds	r3, r7, r3
 8014af8:	2201      	movs	r2, #1
 8014afa:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	7bdb      	ldrb	r3, [r3, #15]
 8014b00:	1c1a      	adds	r2, r3, #0
 8014b02:	b2d3      	uxtb	r3, r2
 8014b04:	2b08      	cmp	r3, #8
 8014b06:	d901      	bls.n	8014b0c <LoRaMacMcpsRequest+0xd4>
 8014b08:	2308      	movs	r3, #8
 8014b0a:	1c1a      	adds	r2, r3, #0
 8014b0c:	b2d1      	uxtb	r1, r2
 8014b0e:	4b64      	ldr	r3, [pc, #400]	; (8014ca0 <LoRaMacMcpsRequest+0x268>)
 8014b10:	4a66      	ldr	r2, [pc, #408]	; (8014cac <LoRaMacMcpsRequest+0x274>)
 8014b12:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8014b14:	2310      	movs	r3, #16
 8014b16:	18fb      	adds	r3, r7, r3
 8014b18:	781a      	ldrb	r2, [r3, #0]
 8014b1a:	211f      	movs	r1, #31
 8014b1c:	400a      	ands	r2, r1
 8014b1e:	1c11      	adds	r1, r2, #0
 8014b20:	2280      	movs	r2, #128	; 0x80
 8014b22:	4252      	negs	r2, r2
 8014b24:	430a      	orrs	r2, r1
 8014b26:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8014b28:	2326      	movs	r3, #38	; 0x26
 8014b2a:	18fb      	adds	r3, r7, r3
 8014b2c:	687a      	ldr	r2, [r7, #4]
 8014b2e:	7912      	ldrb	r2, [r2, #4]
 8014b30:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	689b      	ldr	r3, [r3, #8]
 8014b36:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8014b38:	231e      	movs	r3, #30
 8014b3a:	18fb      	adds	r3, r7, r3
 8014b3c:	687a      	ldr	r2, [r7, #4]
 8014b3e:	8992      	ldrh	r2, [r2, #12]
 8014b40:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8014b42:	231d      	movs	r3, #29
 8014b44:	18fb      	adds	r3, r7, r3
 8014b46:	687a      	ldr	r2, [r7, #4]
 8014b48:	7b92      	ldrb	r2, [r2, #14]
 8014b4a:	701a      	strb	r2, [r3, #0]
            break;
 8014b4c:	e01c      	b.n	8014b88 <LoRaMacMcpsRequest+0x150>
            readyToSend = true;
 8014b4e:	231c      	movs	r3, #28
 8014b50:	18fb      	adds	r3, r7, r3
 8014b52:	2201      	movs	r2, #1
 8014b54:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 8014b56:	4b52      	ldr	r3, [pc, #328]	; (8014ca0 <LoRaMacMcpsRequest+0x268>)
 8014b58:	4a54      	ldr	r2, [pc, #336]	; (8014cac <LoRaMacMcpsRequest+0x274>)
 8014b5a:	2101      	movs	r1, #1
 8014b5c:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8014b5e:	2310      	movs	r3, #16
 8014b60:	18fb      	adds	r3, r7, r3
 8014b62:	781a      	ldrb	r2, [r3, #0]
 8014b64:	2120      	movs	r1, #32
 8014b66:	4249      	negs	r1, r1
 8014b68:	430a      	orrs	r2, r1
 8014b6a:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	685b      	ldr	r3, [r3, #4]
 8014b70:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8014b72:	231e      	movs	r3, #30
 8014b74:	18fb      	adds	r3, r7, r3
 8014b76:	687a      	ldr	r2, [r7, #4]
 8014b78:	8912      	ldrh	r2, [r2, #8]
 8014b7a:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8014b7c:	231d      	movs	r3, #29
 8014b7e:	18fb      	adds	r3, r7, r3
 8014b80:	687a      	ldr	r2, [r7, #4]
 8014b82:	7a92      	ldrb	r2, [r2, #10]
 8014b84:	701a      	strb	r2, [r3, #0]
            break;
 8014b86:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8014b88:	2118      	movs	r1, #24
 8014b8a:	187b      	adds	r3, r7, r1
 8014b8c:	2202      	movs	r2, #2
 8014b8e:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8014b90:	4b43      	ldr	r3, [pc, #268]	; (8014ca0 <LoRaMacMcpsRequest+0x268>)
 8014b92:	4a47      	ldr	r2, [pc, #284]	; (8014cb0 <LoRaMacMcpsRequest+0x278>)
 8014b94:	589a      	ldr	r2, [r3, r2]
 8014b96:	2396      	movs	r3, #150	; 0x96
 8014b98:	005b      	lsls	r3, r3, #1
 8014b9a:	5cd2      	ldrb	r2, [r2, r3]
 8014b9c:	187b      	adds	r3, r7, r1
 8014b9e:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8014ba0:	4b3f      	ldr	r3, [pc, #252]	; (8014ca0 <LoRaMacMcpsRequest+0x268>)
 8014ba2:	4a43      	ldr	r2, [pc, #268]	; (8014cb0 <LoRaMacMcpsRequest+0x278>)
 8014ba4:	589b      	ldr	r3, [r3, r2]
 8014ba6:	781b      	ldrb	r3, [r3, #0]
 8014ba8:	187a      	adds	r2, r7, r1
 8014baa:	0011      	movs	r1, r2
 8014bac:	0018      	movs	r0, r3
 8014bae:	f002 fc5f 	bl	8017470 <RegionGetPhyParam>
 8014bb2:	0003      	movs	r3, r0
 8014bb4:	001a      	movs	r2, r3
 8014bb6:	2114      	movs	r1, #20
 8014bb8:	187b      	adds	r3, r7, r1
 8014bba:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8014bbc:	187b      	adds	r3, r7, r1
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	b259      	sxtb	r1, r3
 8014bc2:	231d      	movs	r3, #29
 8014bc4:	18fa      	adds	r2, r7, r3
 8014bc6:	18fb      	adds	r3, r7, r3
 8014bc8:	1c0c      	adds	r4, r1, #0
 8014bca:	781b      	ldrb	r3, [r3, #0]
 8014bcc:	b258      	sxtb	r0, r3
 8014bce:	b261      	sxtb	r1, r4
 8014bd0:	4288      	cmp	r0, r1
 8014bd2:	da00      	bge.n	8014bd6 <LoRaMacMcpsRequest+0x19e>
 8014bd4:	1c23      	adds	r3, r4, #0
 8014bd6:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 8014bd8:	231c      	movs	r3, #28
 8014bda:	18fb      	adds	r3, r7, r3
 8014bdc:	781b      	ldrb	r3, [r3, #0]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d052      	beq.n	8014c88 <LoRaMacMcpsRequest+0x250>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 8014be2:	4b2f      	ldr	r3, [pc, #188]	; (8014ca0 <LoRaMacMcpsRequest+0x268>)
 8014be4:	4a32      	ldr	r2, [pc, #200]	; (8014cb0 <LoRaMacMcpsRequest+0x278>)
 8014be6:	589b      	ldr	r3, [r3, r2]
 8014be8:	22f2      	movs	r2, #242	; 0xf2
 8014bea:	5c9b      	ldrb	r3, [r3, r2]
 8014bec:	2201      	movs	r2, #1
 8014bee:	4053      	eors	r3, r2
 8014bf0:	b2db      	uxtb	r3, r3
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d024      	beq.n	8014c40 <LoRaMacMcpsRequest+0x208>
        {
            verify.DatarateParams.Datarate = datarate;
 8014bf6:	210c      	movs	r1, #12
 8014bf8:	187b      	adds	r3, r7, r1
 8014bfa:	221d      	movs	r2, #29
 8014bfc:	18ba      	adds	r2, r7, r2
 8014bfe:	7812      	ldrb	r2, [r2, #0]
 8014c00:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8014c02:	4b27      	ldr	r3, [pc, #156]	; (8014ca0 <LoRaMacMcpsRequest+0x268>)
 8014c04:	4a2a      	ldr	r2, [pc, #168]	; (8014cb0 <LoRaMacMcpsRequest+0x278>)
 8014c06:	589a      	ldr	r2, [r3, r2]
 8014c08:	2396      	movs	r3, #150	; 0x96
 8014c0a:	005b      	lsls	r3, r3, #1
 8014c0c:	5cd2      	ldrb	r2, [r2, r3]
 8014c0e:	187b      	adds	r3, r7, r1
 8014c10:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8014c12:	4b23      	ldr	r3, [pc, #140]	; (8014ca0 <LoRaMacMcpsRequest+0x268>)
 8014c14:	4a26      	ldr	r2, [pc, #152]	; (8014cb0 <LoRaMacMcpsRequest+0x278>)
 8014c16:	589b      	ldr	r3, [r3, r2]
 8014c18:	781b      	ldrb	r3, [r3, #0]
 8014c1a:	1879      	adds	r1, r7, r1
 8014c1c:	2205      	movs	r2, #5
 8014c1e:	0018      	movs	r0, r3
 8014c20:	f002 fc8d 	bl	801753e <RegionVerify>
 8014c24:	1e03      	subs	r3, r0, #0
 8014c26:	d009      	beq.n	8014c3c <LoRaMacMcpsRequest+0x204>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014c28:	4b1d      	ldr	r3, [pc, #116]	; (8014ca0 <LoRaMacMcpsRequest+0x268>)
 8014c2a:	4a21      	ldr	r2, [pc, #132]	; (8014cb0 <LoRaMacMcpsRequest+0x278>)
 8014c2c:	589b      	ldr	r3, [r3, r2]
 8014c2e:	220c      	movs	r2, #12
 8014c30:	18ba      	adds	r2, r7, r2
 8014c32:	2100      	movs	r1, #0
 8014c34:	5651      	ldrsb	r1, [r2, r1]
 8014c36:	22f9      	movs	r2, #249	; 0xf9
 8014c38:	5499      	strb	r1, [r3, r2]
 8014c3a:	e001      	b.n	8014c40 <LoRaMacMcpsRequest+0x208>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8014c3c:	2303      	movs	r3, #3
 8014c3e:	e028      	b.n	8014c92 <LoRaMacMcpsRequest+0x25a>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 8014c40:	2627      	movs	r6, #39	; 0x27
 8014c42:	19bc      	adds	r4, r7, r6
 8014c44:	231e      	movs	r3, #30
 8014c46:	18fb      	adds	r3, r7, r3
 8014c48:	881d      	ldrh	r5, [r3, #0]
 8014c4a:	6a3a      	ldr	r2, [r7, #32]
 8014c4c:	2326      	movs	r3, #38	; 0x26
 8014c4e:	18fb      	adds	r3, r7, r3
 8014c50:	7819      	ldrb	r1, [r3, #0]
 8014c52:	2310      	movs	r3, #16
 8014c54:	18f8      	adds	r0, r7, r3
 8014c56:	002b      	movs	r3, r5
 8014c58:	f7fd f810 	bl	8011c7c <Send>
 8014c5c:	0003      	movs	r3, r0
 8014c5e:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 8014c60:	19bb      	adds	r3, r7, r6
 8014c62:	781b      	ldrb	r3, [r3, #0]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d10b      	bne.n	8014c80 <LoRaMacMcpsRequest+0x248>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	7819      	ldrb	r1, [r3, #0]
 8014c6c:	4b0c      	ldr	r3, [pc, #48]	; (8014ca0 <LoRaMacMcpsRequest+0x268>)
 8014c6e:	4a11      	ldr	r2, [pc, #68]	; (8014cb4 <LoRaMacMcpsRequest+0x27c>)
 8014c70:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8014c72:	4b0b      	ldr	r3, [pc, #44]	; (8014ca0 <LoRaMacMcpsRequest+0x268>)
 8014c74:	4a10      	ldr	r2, [pc, #64]	; (8014cb8 <LoRaMacMcpsRequest+0x280>)
 8014c76:	5c99      	ldrb	r1, [r3, r2]
 8014c78:	2001      	movs	r0, #1
 8014c7a:	4301      	orrs	r1, r0
 8014c7c:	5499      	strb	r1, [r3, r2]
 8014c7e:	e003      	b.n	8014c88 <LoRaMacMcpsRequest+0x250>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8014c80:	4b07      	ldr	r3, [pc, #28]	; (8014ca0 <LoRaMacMcpsRequest+0x268>)
 8014c82:	4a0e      	ldr	r2, [pc, #56]	; (8014cbc <LoRaMacMcpsRequest+0x284>)
 8014c84:	2100      	movs	r1, #0
 8014c86:	5499      	strb	r1, [r3, r2]
        }
    }

    EventMacNvmCtxChanged( );
 8014c88:	f7fe fa70 	bl	801316c <EventMacNvmCtxChanged>
    return status;
 8014c8c:	2327      	movs	r3, #39	; 0x27
 8014c8e:	18fb      	adds	r3, r7, r3
 8014c90:	781b      	ldrb	r3, [r3, #0]
}
 8014c92:	0018      	movs	r0, r3
 8014c94:	46bd      	mov	sp, r7
 8014c96:	b00b      	add	sp, #44	; 0x2c
 8014c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c9a:	46c0      	nop			; (mov r8, r8)
 8014c9c:	20000d28 	.word	0x20000d28
 8014ca0:	200008ec 	.word	0x200008ec
 8014ca4:	0000043d 	.word	0x0000043d
 8014ca8:	00000412 	.word	0x00000412
 8014cac:	00000411 	.word	0x00000411
 8014cb0:	00000484 	.word	0x00000484
 8014cb4:	0000043c 	.word	0x0000043c
 8014cb8:	00000481 	.word	0x00000481
 8014cbc:	00000414 	.word	0x00000414

08014cc0 <CalcNextV10X>:

#include "region/Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8014cc0:	b590      	push	{r4, r7, lr}
 8014cc2:	b08b      	sub	sp, #44	; 0x2c
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	60f8      	str	r0, [r7, #12]
 8014cc8:	60b9      	str	r1, [r7, #8]
 8014cca:	607a      	str	r2, [r7, #4]
 8014ccc:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8014cce:	2327      	movs	r3, #39	; 0x27
 8014cd0:	18fb      	adds	r3, r7, r3
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 8014cd6:	2326      	movs	r3, #38	; 0x26
 8014cd8:	18fb      	adds	r3, r7, r3
 8014cda:	68fa      	ldr	r2, [r7, #12]
 8014cdc:	7c12      	ldrb	r2, [r2, #16]
 8014cde:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 8014ce0:	2325      	movs	r3, #37	; 0x25
 8014ce2:	18fb      	adds	r3, r7, r3
 8014ce4:	68fa      	ldr	r2, [r7, #12]
 8014ce6:	7c52      	ldrb	r2, [r2, #17]
 8014ce8:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	689a      	ldr	r2, [r3, #8]
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	795b      	ldrb	r3, [r3, #5]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d100      	bne.n	8014cfc <CalcNextV10X+0x3c>
 8014cfa:	e0a8      	b.n	8014e4e <CalcNextV10X+0x18e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8014cfc:	2120      	movs	r1, #32
 8014cfe:	187b      	adds	r3, r7, r1
 8014d00:	2202      	movs	r2, #2
 8014d02:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	7c9a      	ldrb	r2, [r3, #18]
 8014d08:	187b      	adds	r3, r7, r1
 8014d0a:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	7cdb      	ldrb	r3, [r3, #19]
 8014d10:	187a      	adds	r2, r7, r1
 8014d12:	0011      	movs	r1, r2
 8014d14:	0018      	movs	r0, r3
 8014d16:	f002 fbab 	bl	8017470 <RegionGetPhyParam>
 8014d1a:	0003      	movs	r3, r0
 8014d1c:	001a      	movs	r2, r3
 8014d1e:	211c      	movs	r1, #28
 8014d20:	187b      	adds	r3, r7, r1
 8014d22:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 8014d24:	187b      	adds	r3, r7, r1
 8014d26:	681a      	ldr	r2, [r3, #0]
 8014d28:	2124      	movs	r1, #36	; 0x24
 8014d2a:	187b      	adds	r3, r7, r1
 8014d2c:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 8014d2e:	2026      	movs	r0, #38	; 0x26
 8014d30:	183a      	adds	r2, r7, r0
 8014d32:	187b      	adds	r3, r7, r1
 8014d34:	1839      	adds	r1, r7, r0
 8014d36:	780c      	ldrb	r4, [r1, #0]
 8014d38:	781b      	ldrb	r3, [r3, #0]
 8014d3a:	b258      	sxtb	r0, r3
 8014d3c:	b261      	sxtb	r1, r4
 8014d3e:	4288      	cmp	r0, r1
 8014d40:	da00      	bge.n	8014d44 <CalcNextV10X+0x84>
 8014d42:	1c23      	adds	r3, r4, #0
 8014d44:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 8014d46:	2326      	movs	r3, #38	; 0x26
 8014d48:	18fa      	adds	r2, r7, r3
 8014d4a:	2324      	movs	r3, #36	; 0x24
 8014d4c:	18fb      	adds	r3, r7, r3
 8014d4e:	7812      	ldrb	r2, [r2, #0]
 8014d50:	b252      	sxtb	r2, r2
 8014d52:	781b      	ldrb	r3, [r3, #0]
 8014d54:	b25b      	sxtb	r3, r3
 8014d56:	429a      	cmp	r2, r3
 8014d58:	d107      	bne.n	8014d6a <CalcNextV10X+0xaa>
        {
            *adrAckCounter = 0;
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	2200      	movs	r2, #0
 8014d5e:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8014d60:	2327      	movs	r3, #39	; 0x27
 8014d62:	18fb      	adds	r3, r7, r3
 8014d64:	2200      	movs	r2, #0
 8014d66:	701a      	strb	r2, [r3, #0]
 8014d68:	e071      	b.n	8014e4e <CalcNextV10X+0x18e>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	689b      	ldr	r3, [r3, #8]
 8014d6e:	68fa      	ldr	r2, [r7, #12]
 8014d70:	8992      	ldrh	r2, [r2, #12]
 8014d72:	4293      	cmp	r3, r2
 8014d74:	d304      	bcc.n	8014d80 <CalcNextV10X+0xc0>
            {
                adrAckReq = true;
 8014d76:	2327      	movs	r3, #39	; 0x27
 8014d78:	18fb      	adds	r3, r7, r3
 8014d7a:	2201      	movs	r2, #1
 8014d7c:	701a      	strb	r2, [r3, #0]
 8014d7e:	e003      	b.n	8014d88 <CalcNextV10X+0xc8>
            }
            else
            {
                adrAckReq = false;
 8014d80:	2327      	movs	r3, #39	; 0x27
 8014d82:	18fb      	adds	r3, r7, r3
 8014d84:	2200      	movs	r2, #0
 8014d86:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	689b      	ldr	r3, [r3, #8]
 8014d8c:	68fa      	ldr	r2, [r7, #12]
 8014d8e:	8992      	ldrh	r2, [r2, #12]
 8014d90:	0011      	movs	r1, r2
 8014d92:	68fa      	ldr	r2, [r7, #12]
 8014d94:	89d2      	ldrh	r2, [r2, #14]
 8014d96:	188a      	adds	r2, r1, r2
 8014d98:	4293      	cmp	r3, r2
 8014d9a:	d358      	bcc.n	8014e4e <CalcNextV10X+0x18e>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8014d9c:	2120      	movs	r1, #32
 8014d9e:	187b      	adds	r3, r7, r1
 8014da0:	2208      	movs	r2, #8
 8014da2:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	7cdb      	ldrb	r3, [r3, #19]
 8014da8:	187a      	adds	r2, r7, r1
 8014daa:	0011      	movs	r1, r2
 8014dac:	0018      	movs	r0, r3
 8014dae:	f002 fb5f 	bl	8017470 <RegionGetPhyParam>
 8014db2:	0003      	movs	r3, r0
 8014db4:	001a      	movs	r2, r3
 8014db6:	211c      	movs	r1, #28
 8014db8:	187b      	adds	r3, r7, r1
 8014dba:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 8014dbc:	187b      	adds	r3, r7, r1
 8014dbe:	681a      	ldr	r2, [r3, #0]
 8014dc0:	2325      	movs	r3, #37	; 0x25
 8014dc2:	18fb      	adds	r3, r7, r3
 8014dc4:	701a      	strb	r2, [r3, #0]

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	689a      	ldr	r2, [r3, #8]
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	89db      	ldrh	r3, [r3, #14]
 8014dce:	0019      	movs	r1, r3
 8014dd0:	0010      	movs	r0, r2
 8014dd2:	f7eb fa1f 	bl	8000214 <__aeabi_uidivmod>
 8014dd6:	000b      	movs	r3, r1
 8014dd8:	2b01      	cmp	r3, #1
 8014dda:	d138      	bne.n	8014e4e <CalcNextV10X+0x18e>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8014ddc:	2120      	movs	r1, #32
 8014dde:	187b      	adds	r3, r7, r1
 8014de0:	2222      	movs	r2, #34	; 0x22
 8014de2:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 8014de4:	187b      	adds	r3, r7, r1
 8014de6:	2426      	movs	r4, #38	; 0x26
 8014de8:	193a      	adds	r2, r7, r4
 8014dea:	7812      	ldrb	r2, [r2, #0]
 8014dec:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	7c9a      	ldrb	r2, [r3, #18]
 8014df2:	187b      	adds	r3, r7, r1
 8014df4:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	7cdb      	ldrb	r3, [r3, #19]
 8014dfa:	187a      	adds	r2, r7, r1
 8014dfc:	0011      	movs	r1, r2
 8014dfe:	0018      	movs	r0, r3
 8014e00:	f002 fb36 	bl	8017470 <RegionGetPhyParam>
 8014e04:	0003      	movs	r3, r0
 8014e06:	001a      	movs	r2, r3
 8014e08:	211c      	movs	r1, #28
 8014e0a:	187b      	adds	r3, r7, r1
 8014e0c:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 8014e0e:	187b      	adds	r3, r7, r1
 8014e10:	681a      	ldr	r2, [r3, #0]
 8014e12:	193b      	adds	r3, r7, r4
 8014e14:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 8014e16:	193a      	adds	r2, r7, r4
 8014e18:	2324      	movs	r3, #36	; 0x24
 8014e1a:	18fb      	adds	r3, r7, r3
 8014e1c:	7812      	ldrb	r2, [r2, #0]
 8014e1e:	b252      	sxtb	r2, r2
 8014e20:	781b      	ldrb	r3, [r3, #0]
 8014e22:	b25b      	sxtb	r3, r3
 8014e24:	429a      	cmp	r2, r3
 8014e26:	d112      	bne.n	8014e4e <CalcNextV10X+0x18e>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8014e28:	2327      	movs	r3, #39	; 0x27
 8014e2a:	18fb      	adds	r3, r7, r3
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	791b      	ldrb	r3, [r3, #4]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d00a      	beq.n	8014e4e <CalcNextV10X+0x18e>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 8014e38:	2114      	movs	r1, #20
 8014e3a:	187b      	adds	r3, r7, r1
 8014e3c:	2201      	movs	r2, #1
 8014e3e:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	7cdb      	ldrb	r3, [r3, #19]
 8014e44:	187a      	adds	r2, r7, r1
 8014e46:	0011      	movs	r1, r2
 8014e48:	0018      	movs	r0, r3
 8014e4a:	f002 fb4d 	bl	80174e8 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8014e4e:	68bb      	ldr	r3, [r7, #8]
 8014e50:	2226      	movs	r2, #38	; 0x26
 8014e52:	18ba      	adds	r2, r7, r2
 8014e54:	7812      	ldrb	r2, [r2, #0]
 8014e56:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	2225      	movs	r2, #37	; 0x25
 8014e5c:	18ba      	adds	r2, r7, r2
 8014e5e:	7812      	ldrb	r2, [r2, #0]
 8014e60:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8014e62:	2327      	movs	r3, #39	; 0x27
 8014e64:	18fb      	adds	r3, r7, r3
 8014e66:	781b      	ldrb	r3, [r3, #0]
}
 8014e68:	0018      	movs	r0, r3
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	b00b      	add	sp, #44	; 0x2c
 8014e6e:	bd90      	pop	{r4, r7, pc}

08014e70 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b084      	sub	sp, #16
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	60f8      	str	r0, [r7, #12]
 8014e78:	60b9      	str	r1, [r7, #8]
 8014e7a:	607a      	str	r2, [r7, #4]
 8014e7c:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	789b      	ldrb	r3, [r3, #2]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d107      	bne.n	8014e96 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8014e86:	683b      	ldr	r3, [r7, #0]
 8014e88:	687a      	ldr	r2, [r7, #4]
 8014e8a:	68b9      	ldr	r1, [r7, #8]
 8014e8c:	68f8      	ldr	r0, [r7, #12]
 8014e8e:	f7ff ff17 	bl	8014cc0 <CalcNextV10X>
 8014e92:	0003      	movs	r3, r0
 8014e94:	e000      	b.n	8014e98 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8014e96:	2300      	movs	r3, #0
}
 8014e98:	0018      	movs	r0, r3
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	b004      	add	sp, #16
 8014e9e:	bd80      	pop	{r7, pc}

08014ea0 <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmEvent classBNvmCtxChanged )
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b084      	sub	sp, #16
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	60f8      	str	r0, [r7, #12]
 8014ea8:	60b9      	str	r1, [r7, #8]
 8014eaa:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8014eac:	46c0      	nop			; (mov r8, r8)
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	b004      	add	sp, #16
 8014eb2:	bd80      	pop	{r7, pc}

08014eb4 <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b082      	sub	sp, #8
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 8014ebc:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 8014ebe:	0018      	movs	r0, r3
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	b002      	add	sp, #8
 8014ec4:	bd80      	pop	{r7, pc}

08014ec6 <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 8014ec6:	b580      	push	{r7, lr}
 8014ec8:	b082      	sub	sp, #8
 8014eca:	af00      	add	r7, sp, #0
 8014ecc:	6078      	str	r0, [r7, #4]
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	601a      	str	r2, [r3, #0]
    return NULL;
 8014ed4:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014ed6:	0018      	movs	r0, r3
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	b002      	add	sp, #8
 8014edc:	bd80      	pop	{r7, pc}

08014ede <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8014ede:	b580      	push	{r7, lr}
 8014ee0:	b082      	sub	sp, #8
 8014ee2:	af00      	add	r7, sp, #0
 8014ee4:	0002      	movs	r2, r0
 8014ee6:	1dfb      	adds	r3, r7, #7
 8014ee8:	701a      	strb	r2, [r3, #0]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014eea:	46c0      	nop			; (mov r8, r8)
 8014eec:	46bd      	mov	sp, r7
 8014eee:	b002      	add	sp, #8
 8014ef0:	bd80      	pop	{r7, pc}

08014ef2 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8014ef2:	b580      	push	{r7, lr}
 8014ef4:	b082      	sub	sp, #8
 8014ef6:	af00      	add	r7, sp, #0
 8014ef8:	0002      	movs	r2, r0
 8014efa:	1dfb      	adds	r3, r7, #7
 8014efc:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014efe:	46c0      	nop			; (mov r8, r8)
 8014f00:	46bd      	mov	sp, r7
 8014f02:	b002      	add	sp, #8
 8014f04:	bd80      	pop	{r7, pc}

08014f06 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014f06:	b580      	push	{r7, lr}
 8014f08:	b082      	sub	sp, #8
 8014f0a:	af00      	add	r7, sp, #0
 8014f0c:	0002      	movs	r2, r0
 8014f0e:	1dfb      	adds	r3, r7, #7
 8014f10:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014f12:	46c0      	nop			; (mov r8, r8)
 8014f14:	46bd      	mov	sp, r7
 8014f16:	b002      	add	sp, #8
 8014f18:	bd80      	pop	{r7, pc}

08014f1a <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8014f1a:	b580      	push	{r7, lr}
 8014f1c:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8014f1e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014f20:	0018      	movs	r0, r3
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd80      	pop	{r7, pc}

08014f26 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8014f26:	b580      	push	{r7, lr}
 8014f28:	b082      	sub	sp, #8
 8014f2a:	af00      	add	r7, sp, #0
 8014f2c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014f2e:	46c0      	nop			; (mov r8, r8)
 8014f30:	46bd      	mov	sp, r7
 8014f32:	b002      	add	sp, #8
 8014f34:	bd80      	pop	{r7, pc}

08014f36 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8014f36:	b580      	push	{r7, lr}
 8014f38:	b082      	sub	sp, #8
 8014f3a:	af00      	add	r7, sp, #0
 8014f3c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014f3e:	46c0      	nop			; (mov r8, r8)
 8014f40:	46bd      	mov	sp, r7
 8014f42:	b002      	add	sp, #8
 8014f44:	bd80      	pop	{r7, pc}

08014f46 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8014f46:	b580      	push	{r7, lr}
 8014f48:	b082      	sub	sp, #8
 8014f4a:	af00      	add	r7, sp, #0
 8014f4c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014f4e:	46c0      	nop			; (mov r8, r8)
 8014f50:	46bd      	mov	sp, r7
 8014f52:	b002      	add	sp, #8
 8014f54:	bd80      	pop	{r7, pc}

08014f56 <LoRaMacClassBRxBeacon>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8014f56:	b580      	push	{r7, lr}
 8014f58:	b082      	sub	sp, #8
 8014f5a:	af00      	add	r7, sp, #0
 8014f5c:	6078      	str	r0, [r7, #4]
 8014f5e:	000a      	movs	r2, r1
 8014f60:	1cbb      	adds	r3, r7, #2
 8014f62:	801a      	strh	r2, [r3, #0]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8014f64:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014f66:	0018      	movs	r0, r3
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	b002      	add	sp, #8
 8014f6c:	bd80      	pop	{r7, pc}

08014f6e <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8014f6e:	b580      	push	{r7, lr}
 8014f70:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014f72:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014f74:	0018      	movs	r0, r3
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}

08014f7a <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8014f7a:	b580      	push	{r7, lr}
 8014f7c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014f7e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014f80:	0018      	movs	r0, r3
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd80      	pop	{r7, pc}

08014f86 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8014f86:	b580      	push	{r7, lr}
 8014f88:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014f8a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014f8c:	0018      	movs	r0, r3
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd80      	pop	{r7, pc}

08014f92 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8014f92:	b580      	push	{r7, lr}
 8014f94:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014f96:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014f98:	0018      	movs	r0, r3
 8014f9a:	46bd      	mov	sp, r7
 8014f9c:	bd80      	pop	{r7, pc}

08014f9e <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8014f9e:	b580      	push	{r7, lr}
 8014fa0:	b082      	sub	sp, #8
 8014fa2:	af00      	add	r7, sp, #0
 8014fa4:	0002      	movs	r2, r0
 8014fa6:	1dfb      	adds	r3, r7, #7
 8014fa8:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8014faa:	46c0      	nop			; (mov r8, r8)
 8014fac:	46bd      	mov	sp, r7
 8014fae:	b002      	add	sp, #8
 8014fb0:	bd80      	pop	{r7, pc}

08014fb2 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8014fb2:	b580      	push	{r7, lr}
 8014fb4:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014fb6:	46c0      	nop			; (mov r8, r8)
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	bd80      	pop	{r7, pc}

08014fbc <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014fc0:	46c0      	nop			; (mov r8, r8)
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}

08014fc6 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8014fc6:	b580      	push	{r7, lr}
 8014fc8:	b082      	sub	sp, #8
 8014fca:	af00      	add	r7, sp, #0
 8014fcc:	0002      	movs	r2, r0
 8014fce:	1dfb      	adds	r3, r7, #7
 8014fd0:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014fd2:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8014fd4:	0018      	movs	r0, r3
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	b002      	add	sp, #8
 8014fda:	bd80      	pop	{r7, pc}

08014fdc <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b082      	sub	sp, #8
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014fe4:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8014fe6:	0018      	movs	r0, r3
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	b002      	add	sp, #8
 8014fec:	bd80      	pop	{r7, pc}

08014fee <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8014fee:	b580      	push	{r7, lr}
 8014ff0:	b082      	sub	sp, #8
 8014ff2:	af00      	add	r7, sp, #0
 8014ff4:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014ff6:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8014ff8:	0018      	movs	r0, r3
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	b002      	add	sp, #8
 8014ffe:	bd80      	pop	{r7, pc}

08015000 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8015000:	b580      	push	{r7, lr}
 8015002:	af00      	add	r7, sp, #0
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8015004:	46c0      	nop			; (mov r8, r8)
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}

0801500a <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801500a:	b580      	push	{r7, lr}
 801500c:	b082      	sub	sp, #8
 801500e:	af00      	add	r7, sp, #0
 8015010:	0002      	movs	r2, r0
 8015012:	6039      	str	r1, [r7, #0]
 8015014:	1dfb      	adds	r3, r7, #7
 8015016:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 8015018:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801501a:	0018      	movs	r0, r3
 801501c:	46bd      	mov	sp, r7
 801501e:	b002      	add	sp, #8
 8015020:	bd80      	pop	{r7, pc}

08015022 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8015022:	b580      	push	{r7, lr}
 8015024:	b082      	sub	sp, #8
 8015026:	af00      	add	r7, sp, #0
 8015028:	603a      	str	r2, [r7, #0]
 801502a:	1dbb      	adds	r3, r7, #6
 801502c:	1c02      	adds	r2, r0, #0
 801502e:	801a      	strh	r2, [r3, #0]
 8015030:	1d7b      	adds	r3, r7, #5
 8015032:	1c0a      	adds	r2, r1, #0
 8015034:	701a      	strb	r2, [r3, #0]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8015036:	46c0      	nop			; (mov r8, r8)
 8015038:	46bd      	mov	sp, r7
 801503a:	b002      	add	sp, #8
 801503c:	bd80      	pop	{r7, pc}

0801503e <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 801503e:	b580      	push	{r7, lr}
 8015040:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8015042:	46c0      	nop			; (mov r8, r8)
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}

08015048 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b082      	sub	sp, #8
 801504c:	af00      	add	r7, sp, #0
 801504e:	6078      	str	r0, [r7, #4]
        NvmContextChange( );
        return true;
    }
    return false;
#else
    return false;
 8015050:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8015052:	0018      	movs	r0, r3
 8015054:	46bd      	mov	sp, r7
 8015056:	b002      	add	sp, #8
 8015058:	bd80      	pop	{r7, pc}

0801505a <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801505a:	b580      	push	{r7, lr}
 801505c:	b082      	sub	sp, #8
 801505e:	af00      	add	r7, sp, #0
 8015060:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8015062:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8015064:	0018      	movs	r0, r3
 8015066:	46bd      	mov	sp, r7
 8015068:	b002      	add	sp, #8
 801506a:	bd80      	pop	{r7, pc}

0801506c <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 801506c:	b580      	push	{r7, lr}
 801506e:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8015070:	46c0      	nop			; (mov r8, r8)
 8015072:	46bd      	mov	sp, r7
 8015074:	bd80      	pop	{r7, pc}

08015076 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 8015076:	b580      	push	{r7, lr}
 8015078:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801507a:	46c0      	nop			; (mov r8, r8)
 801507c:	46bd      	mov	sp, r7
 801507e:	bd80      	pop	{r7, pc}

08015080 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b084      	sub	sp, #16
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801508c:	230e      	movs	r3, #14
 801508e:	18fb      	adds	r3, r7, r3
 8015090:	2200      	movs	r2, #0
 8015092:	801a      	strh	r2, [r3, #0]
 8015094:	e00f      	b.n	80150b6 <IsSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 8015096:	230e      	movs	r3, #14
 8015098:	18fb      	adds	r3, r7, r3
 801509a:	881b      	ldrh	r3, [r3, #0]
 801509c:	68ba      	ldr	r2, [r7, #8]
 801509e:	18d3      	adds	r3, r2, r3
 80150a0:	781b      	ldrb	r3, [r3, #0]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d001      	beq.n	80150aa <IsSlotFree+0x2a>
        {
            return false;
 80150a6:	2300      	movs	r3, #0
 80150a8:	e00b      	b.n	80150c2 <IsSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80150aa:	210e      	movs	r1, #14
 80150ac:	187b      	adds	r3, r7, r1
 80150ae:	881a      	ldrh	r2, [r3, #0]
 80150b0:	187b      	adds	r3, r7, r1
 80150b2:	3201      	adds	r2, #1
 80150b4:	801a      	strh	r2, [r3, #0]
 80150b6:	230e      	movs	r3, #14
 80150b8:	18fb      	adds	r3, r7, r3
 80150ba:	881b      	ldrh	r3, [r3, #0]
 80150bc:	2b0f      	cmp	r3, #15
 80150be:	d9ea      	bls.n	8015096 <IsSlotFree+0x16>
        }
    }
    return true;
 80150c0:	2301      	movs	r3, #1
}
 80150c2:	0018      	movs	r0, r3
 80150c4:	46bd      	mov	sp, r7
 80150c6:	b004      	add	sp, #16
 80150c8:	bd80      	pop	{r7, pc}
	...

080150cc <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b082      	sub	sp, #8
 80150d0:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 80150d2:	1dfb      	adds	r3, r7, #7
 80150d4:	2200      	movs	r2, #0
 80150d6:	701a      	strb	r2, [r3, #0]

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 80150d8:	e00a      	b.n	80150f0 <MallocNewMacCommandSlot+0x24>
    {
        itr++;
 80150da:	1dfb      	adds	r3, r7, #7
 80150dc:	781a      	ldrb	r2, [r3, #0]
 80150de:	1dfb      	adds	r3, r7, #7
 80150e0:	3201      	adds	r2, #1
 80150e2:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 80150e4:	1dfb      	adds	r3, r7, #7
 80150e6:	781b      	ldrb	r3, [r3, #0]
 80150e8:	2b0f      	cmp	r3, #15
 80150ea:	d101      	bne.n	80150f0 <MallocNewMacCommandSlot+0x24>
        {
            return 0;
 80150ec:	2300      	movs	r3, #0
 80150ee:	e017      	b.n	8015120 <MallocNewMacCommandSlot+0x54>
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 80150f0:	1dfb      	adds	r3, r7, #7
 80150f2:	781b      	ldrb	r3, [r3, #0]
 80150f4:	011b      	lsls	r3, r3, #4
 80150f6:	3308      	adds	r3, #8
 80150f8:	001a      	movs	r2, r3
 80150fa:	4b0b      	ldr	r3, [pc, #44]	; (8015128 <MallocNewMacCommandSlot+0x5c>)
 80150fc:	18d3      	adds	r3, r2, r3
 80150fe:	0018      	movs	r0, r3
 8015100:	f7ff ffbe 	bl	8015080 <IsSlotFree>
 8015104:	0003      	movs	r3, r0
 8015106:	001a      	movs	r2, r3
 8015108:	2301      	movs	r3, #1
 801510a:	4053      	eors	r3, r2
 801510c:	b2db      	uxtb	r3, r3
 801510e:	2b00      	cmp	r3, #0
 8015110:	d1e3      	bne.n	80150da <MallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 8015112:	1dfb      	adds	r3, r7, #7
 8015114:	781b      	ldrb	r3, [r3, #0]
 8015116:	011b      	lsls	r3, r3, #4
 8015118:	3308      	adds	r3, #8
 801511a:	001a      	movs	r2, r3
 801511c:	4b02      	ldr	r3, [pc, #8]	; (8015128 <MallocNewMacCommandSlot+0x5c>)
 801511e:	18d3      	adds	r3, r2, r3
}
 8015120:	0018      	movs	r0, r3
 8015122:	46bd      	mov	sp, r7
 8015124:	b002      	add	sp, #8
 8015126:	bd80      	pop	{r7, pc}
 8015128:	20000f58 	.word	0x20000f58

0801512c <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b082      	sub	sp, #8
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
    if( slot == 0 )
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d101      	bne.n	801513e <FreeMacCommandSlot+0x12>
    {
        return false;
 801513a:	2300      	movs	r3, #0
 801513c:	e006      	b.n	801514c <FreeMacCommandSlot+0x20>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	2210      	movs	r2, #16
 8015142:	2100      	movs	r1, #0
 8015144:	0018      	movs	r0, r3
 8015146:	f006 fa4d 	bl	801b5e4 <memset1>

    return true;
 801514a:	2301      	movs	r3, #1
}
 801514c:	0018      	movs	r0, r3
 801514e:	46bd      	mov	sp, r7
 8015150:	b002      	add	sp, #8
 8015152:	bd80      	pop	{r7, pc}

08015154 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b082      	sub	sp, #8
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
    if( list == 0 )
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d101      	bne.n	8015166 <LinkedListInit+0x12>
    {
        return false;
 8015162:	2300      	movs	r3, #0
 8015164:	e006      	b.n	8015174 <LinkedListInit+0x20>
    }

    list->First = 0;
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	2200      	movs	r2, #0
 801516a:	601a      	str	r2, [r3, #0]
    list->Last = 0;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	2200      	movs	r2, #0
 8015170:	605a      	str	r2, [r3, #4]

    return true;
 8015172:	2301      	movs	r3, #1
}
 8015174:	0018      	movs	r0, r3
 8015176:	46bd      	mov	sp, r7
 8015178:	b002      	add	sp, #8
 801517a:	bd80      	pop	{r7, pc}

0801517c <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b082      	sub	sp, #8
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
 8015184:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d104      	bne.n	8015196 <LinkedListAdd+0x1a>
 801518c:	683b      	ldr	r3, [r7, #0]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d101      	bne.n	8015196 <LinkedListAdd+0x1a>
    {
        return false;
 8015192:	2300      	movs	r3, #0
 8015194:	e015      	b.n	80151c2 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == 0 )
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d102      	bne.n	80151a4 <LinkedListAdd+0x28>
    {
        list->First = element;
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	683a      	ldr	r2, [r7, #0]
 80151a2:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	685b      	ldr	r3, [r3, #4]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d003      	beq.n	80151b4 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	685b      	ldr	r3, [r3, #4]
 80151b0:	683a      	ldr	r2, [r7, #0]
 80151b2:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = 0;
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	2200      	movs	r2, #0
 80151b8:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	683a      	ldr	r2, [r7, #0]
 80151be:	605a      	str	r2, [r3, #4]

    return true;
 80151c0:	2301      	movs	r3, #1
}
 80151c2:	0018      	movs	r0, r3
 80151c4:	46bd      	mov	sp, r7
 80151c6:	b002      	add	sp, #8
 80151c8:	bd80      	pop	{r7, pc}

080151ca <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80151ca:	b580      	push	{r7, lr}
 80151cc:	b084      	sub	sp, #16
 80151ce:	af00      	add	r7, sp, #0
 80151d0:	6078      	str	r0, [r7, #4]
 80151d2:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d104      	bne.n	80151e4 <LinkedListGetPrevious+0x1a>
 80151da:	683b      	ldr	r3, [r7, #0]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d101      	bne.n	80151e4 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80151e0:	2300      	movs	r3, #0
 80151e2:	e016      	b.n	8015212 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80151ea:	683a      	ldr	r2, [r7, #0]
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	429a      	cmp	r2, r3
 80151f0:	d00c      	beq.n	801520c <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80151f2:	e002      	b.n	80151fa <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d007      	beq.n	8015210 <LinkedListGetPrevious+0x46>
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	683a      	ldr	r2, [r7, #0]
 8015206:	429a      	cmp	r2, r3
 8015208:	d1f4      	bne.n	80151f4 <LinkedListGetPrevious+0x2a>
 801520a:	e001      	b.n	8015210 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801520c:	2300      	movs	r3, #0
 801520e:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8015210:	68fb      	ldr	r3, [r7, #12]
}
 8015212:	0018      	movs	r0, r3
 8015214:	46bd      	mov	sp, r7
 8015216:	b004      	add	sp, #16
 8015218:	bd80      	pop	{r7, pc}

0801521a <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801521a:	b580      	push	{r7, lr}
 801521c:	b084      	sub	sp, #16
 801521e:	af00      	add	r7, sp, #0
 8015220:	6078      	str	r0, [r7, #4]
 8015222:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d104      	bne.n	8015234 <LinkedListRemove+0x1a>
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d101      	bne.n	8015234 <LinkedListRemove+0x1a>
    {
        return false;
 8015230:	2300      	movs	r3, #0
 8015232:	e023      	b.n	801527c <LinkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015234:	683a      	ldr	r2, [r7, #0]
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	0011      	movs	r1, r2
 801523a:	0018      	movs	r0, r3
 801523c:	f7ff ffc5 	bl	80151ca <LinkedListGetPrevious>
 8015240:	0003      	movs	r3, r0
 8015242:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	683a      	ldr	r2, [r7, #0]
 801524a:	429a      	cmp	r2, r3
 801524c:	d103      	bne.n	8015256 <LinkedListRemove+0x3c>
    {
        list->First = element->Next;
 801524e:	683b      	ldr	r3, [r7, #0]
 8015250:	681a      	ldr	r2, [r3, #0]
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	685b      	ldr	r3, [r3, #4]
 801525a:	683a      	ldr	r2, [r7, #0]
 801525c:	429a      	cmp	r2, r3
 801525e:	d102      	bne.n	8015266 <LinkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	68fa      	ldr	r2, [r7, #12]
 8015264:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d003      	beq.n	8015274 <LinkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 801526c:	683b      	ldr	r3, [r7, #0]
 801526e:	681a      	ldr	r2, [r3, #0]
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8015274:	683b      	ldr	r3, [r7, #0]
 8015276:	2200      	movs	r2, #0
 8015278:	601a      	str	r2, [r3, #0]

    return true;
 801527a:	2301      	movs	r3, #1
}
 801527c:	0018      	movs	r0, r3
 801527e:	46bd      	mov	sp, r7
 8015280:	b004      	add	sp, #16
 8015282:	bd80      	pop	{r7, pc}

08015284 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b082      	sub	sp, #8
 8015288:	af00      	add	r7, sp, #0
 801528a:	0002      	movs	r2, r0
 801528c:	1dfb      	adds	r3, r7, #7
 801528e:	701a      	strb	r2, [r3, #0]
    switch( cid )
 8015290:	1dfb      	adds	r3, r7, #7
 8015292:	781b      	ldrb	r3, [r3, #0]
 8015294:	2b08      	cmp	r3, #8
 8015296:	d003      	beq.n	80152a0 <IsSticky+0x1c>
 8015298:	2b0a      	cmp	r3, #10
 801529a:	d001      	beq.n	80152a0 <IsSticky+0x1c>
 801529c:	2b05      	cmp	r3, #5
 801529e:	d101      	bne.n	80152a4 <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            return true;
 80152a0:	2301      	movs	r3, #1
 80152a2:	e000      	b.n	80152a6 <IsSticky+0x22>
        default:
            return false;
 80152a4:	2300      	movs	r3, #0
    }
}
 80152a6:	0018      	movs	r0, r3
 80152a8:	46bd      	mov	sp, r7
 80152aa:	b002      	add	sp, #8
 80152ac:	bd80      	pop	{r7, pc}
	...

080152b0 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 80152b4:	4b04      	ldr	r3, [pc, #16]	; (80152c8 <NvmCtxCallback+0x18>)
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d002      	beq.n	80152c2 <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 80152bc:	4b02      	ldr	r3, [pc, #8]	; (80152c8 <NvmCtxCallback+0x18>)
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	4798      	blx	r3
    }
}
 80152c2:	46c0      	nop			; (mov r8, r8)
 80152c4:	46bd      	mov	sp, r7
 80152c6:	bd80      	pop	{r7, pc}
 80152c8:	20000f54 	.word	0x20000f54

080152cc <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b082      	sub	sp, #8
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 80152d4:	4b08      	ldr	r3, [pc, #32]	; (80152f8 <LoRaMacCommandsInit+0x2c>)
 80152d6:	22fc      	movs	r2, #252	; 0xfc
 80152d8:	2100      	movs	r1, #0
 80152da:	0018      	movs	r0, r3
 80152dc:	f006 f982 	bl	801b5e4 <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 80152e0:	4b05      	ldr	r3, [pc, #20]	; (80152f8 <LoRaMacCommandsInit+0x2c>)
 80152e2:	0018      	movs	r0, r3
 80152e4:	f7ff ff36 	bl	8015154 <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 80152e8:	4b04      	ldr	r3, [pc, #16]	; (80152fc <LoRaMacCommandsInit+0x30>)
 80152ea:	687a      	ldr	r2, [r7, #4]
 80152ec:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 80152ee:	2300      	movs	r3, #0
}
 80152f0:	0018      	movs	r0, r3
 80152f2:	46bd      	mov	sp, r7
 80152f4:	b002      	add	sp, #8
 80152f6:	bd80      	pop	{r7, pc}
 80152f8:	20000f58 	.word	0x20000f58
 80152fc:	20000f54 	.word	0x20000f54

08015300 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b082      	sub	sp, #8
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d007      	beq.n	801531e <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 801530e:	6879      	ldr	r1, [r7, #4]
 8015310:	4b05      	ldr	r3, [pc, #20]	; (8015328 <LoRaMacCommandsRestoreNvmCtx+0x28>)
 8015312:	22fc      	movs	r2, #252	; 0xfc
 8015314:	0018      	movs	r0, r3
 8015316:	f006 f929 	bl	801b56c <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 801531a:	2300      	movs	r3, #0
 801531c:	e000      	b.n	8015320 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801531e:	2301      	movs	r3, #1
    }
}
 8015320:	0018      	movs	r0, r3
 8015322:	46bd      	mov	sp, r7
 8015324:	b002      	add	sp, #8
 8015326:	bd80      	pop	{r7, pc}
 8015328:	20000f58 	.word	0x20000f58

0801532c <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 801532c:	b580      	push	{r7, lr}
 801532e:	b082      	sub	sp, #8
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	22fc      	movs	r2, #252	; 0xfc
 8015338:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 801533a:	4b02      	ldr	r3, [pc, #8]	; (8015344 <LoRaMacCommandsGetNvmCtx+0x18>)
}
 801533c:	0018      	movs	r0, r3
 801533e:	46bd      	mov	sp, r7
 8015340:	b002      	add	sp, #8
 8015342:	bd80      	pop	{r7, pc}
 8015344:	20000f58 	.word	0x20000f58

08015348 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8015348:	b590      	push	{r4, r7, lr}
 801534a:	b087      	sub	sp, #28
 801534c:	af00      	add	r7, sp, #0
 801534e:	60b9      	str	r1, [r7, #8]
 8015350:	607a      	str	r2, [r7, #4]
 8015352:	230f      	movs	r3, #15
 8015354:	18fb      	adds	r3, r7, r3
 8015356:	1c02      	adds	r2, r0, #0
 8015358:	701a      	strb	r2, [r3, #0]
    if( payload == 0 )
 801535a:	68bb      	ldr	r3, [r7, #8]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d101      	bne.n	8015364 <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015360:	2301      	movs	r3, #1
 8015362:	e03c      	b.n	80153de <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8015364:	f7ff feb2 	bl	80150cc <MallocNewMacCommandSlot>
 8015368:	0003      	movs	r3, r0
 801536a:	617b      	str	r3, [r7, #20]

    if( newCmd == 0 )
 801536c:	697b      	ldr	r3, [r7, #20]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d101      	bne.n	8015376 <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8015372:	2302      	movs	r3, #2
 8015374:	e033      	b.n	80153de <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 8015376:	697a      	ldr	r2, [r7, #20]
 8015378:	4b1b      	ldr	r3, [pc, #108]	; (80153e8 <LoRaMacCommandsAddCmd+0xa0>)
 801537a:	0011      	movs	r1, r2
 801537c:	0018      	movs	r0, r3
 801537e:	f7ff fefd 	bl	801517c <LinkedListAdd>
 8015382:	0003      	movs	r3, r0
 8015384:	001a      	movs	r2, r3
 8015386:	2301      	movs	r3, #1
 8015388:	4053      	eors	r3, r2
 801538a:	b2db      	uxtb	r3, r3
 801538c:	2b00      	cmp	r3, #0
 801538e:	d001      	beq.n	8015394 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015390:	2305      	movs	r3, #5
 8015392:	e024      	b.n	80153de <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 8015394:	697b      	ldr	r3, [r7, #20]
 8015396:	240f      	movs	r4, #15
 8015398:	193a      	adds	r2, r7, r4
 801539a:	7812      	ldrb	r2, [r2, #0]
 801539c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801539e:	697b      	ldr	r3, [r7, #20]
 80153a0:	687a      	ldr	r2, [r7, #4]
 80153a2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80153a4:	697b      	ldr	r3, [r7, #20]
 80153a6:	3305      	adds	r3, #5
 80153a8:	687a      	ldr	r2, [r7, #4]
 80153aa:	b292      	uxth	r2, r2
 80153ac:	68b9      	ldr	r1, [r7, #8]
 80153ae:	0018      	movs	r0, r3
 80153b0:	f006 f8dc 	bl	801b56c <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80153b4:	193b      	adds	r3, r7, r4
 80153b6:	781b      	ldrb	r3, [r3, #0]
 80153b8:	0018      	movs	r0, r3
 80153ba:	f7ff ff63 	bl	8015284 <IsSticky>
 80153be:	0003      	movs	r3, r0
 80153c0:	001a      	movs	r2, r3
 80153c2:	697b      	ldr	r3, [r7, #20]
 80153c4:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80153c6:	4b08      	ldr	r3, [pc, #32]	; (80153e8 <LoRaMacCommandsAddCmd+0xa0>)
 80153c8:	22f8      	movs	r2, #248	; 0xf8
 80153ca:	589a      	ldr	r2, [r3, r2]
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	18d3      	adds	r3, r2, r3
 80153d0:	1c5a      	adds	r2, r3, #1
 80153d2:	4b05      	ldr	r3, [pc, #20]	; (80153e8 <LoRaMacCommandsAddCmd+0xa0>)
 80153d4:	21f8      	movs	r1, #248	; 0xf8
 80153d6:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 80153d8:	f7ff ff6a 	bl	80152b0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80153dc:	2300      	movs	r3, #0
}
 80153de:	0018      	movs	r0, r3
 80153e0:	46bd      	mov	sp, r7
 80153e2:	b007      	add	sp, #28
 80153e4:	bd90      	pop	{r4, r7, pc}
 80153e6:	46c0      	nop			; (mov r8, r8)
 80153e8:	20000f58 	.word	0x20000f58

080153ec <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b082      	sub	sp, #8
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d101      	bne.n	80153fe <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80153fa:	2301      	movs	r3, #1
 80153fc:	e028      	b.n	8015450 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 80153fe:	687a      	ldr	r2, [r7, #4]
 8015400:	4b15      	ldr	r3, [pc, #84]	; (8015458 <LoRaMacCommandsRemoveCmd+0x6c>)
 8015402:	0011      	movs	r1, r2
 8015404:	0018      	movs	r0, r3
 8015406:	f7ff ff08 	bl	801521a <LinkedListRemove>
 801540a:	0003      	movs	r3, r0
 801540c:	001a      	movs	r2, r3
 801540e:	2301      	movs	r3, #1
 8015410:	4053      	eors	r3, r2
 8015412:	b2db      	uxtb	r3, r3
 8015414:	2b00      	cmp	r3, #0
 8015416:	d001      	beq.n	801541c <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015418:	2303      	movs	r3, #3
 801541a:	e019      	b.n	8015450 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801541c:	4b0e      	ldr	r3, [pc, #56]	; (8015458 <LoRaMacCommandsRemoveCmd+0x6c>)
 801541e:	22f8      	movs	r2, #248	; 0xf8
 8015420:	589a      	ldr	r2, [r3, r2]
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	689b      	ldr	r3, [r3, #8]
 8015426:	1ad3      	subs	r3, r2, r3
 8015428:	1e5a      	subs	r2, r3, #1
 801542a:	4b0b      	ldr	r3, [pc, #44]	; (8015458 <LoRaMacCommandsRemoveCmd+0x6c>)
 801542c:	21f8      	movs	r1, #248	; 0xf8
 801542e:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	0018      	movs	r0, r3
 8015434:	f7ff fe7a 	bl	801512c <FreeMacCommandSlot>
 8015438:	0003      	movs	r3, r0
 801543a:	001a      	movs	r2, r3
 801543c:	2301      	movs	r3, #1
 801543e:	4053      	eors	r3, r2
 8015440:	b2db      	uxtb	r3, r3
 8015442:	2b00      	cmp	r3, #0
 8015444:	d001      	beq.n	801544a <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015446:	2305      	movs	r3, #5
 8015448:	e002      	b.n	8015450 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 801544a:	f7ff ff31 	bl	80152b0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 801544e:	2300      	movs	r3, #0
}
 8015450:	0018      	movs	r0, r3
 8015452:	46bd      	mov	sp, r7
 8015454:	b002      	add	sp, #8
 8015456:	bd80      	pop	{r7, pc}
 8015458:	20000f58 	.word	0x20000f58

0801545c <LoRaMacCommandsRemoveNoneStickyCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b082      	sub	sp, #8
 8015460:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8015462:	4b11      	ldr	r3, [pc, #68]	; (80154a8 <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015468:	e013      	b.n	8015492 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	7b1b      	ldrb	r3, [r3, #12]
 801546e:	2201      	movs	r2, #1
 8015470:	4053      	eors	r3, r2
 8015472:	b2db      	uxtb	r3, r3
 8015474:	2b00      	cmp	r3, #0
 8015476:	d009      	beq.n	801548c <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	0018      	movs	r0, r3
 8015482:	f7ff ffb3 	bl	80153ec <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8015486:	683b      	ldr	r3, [r7, #0]
 8015488:	607b      	str	r3, [r7, #4]
 801548a:	e002      	b.n	8015492 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d1e8      	bne.n	801546a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 8015498:	f7ff ff0a 	bl	80152b0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 801549c:	2300      	movs	r3, #0
}
 801549e:	0018      	movs	r0, r3
 80154a0:	46bd      	mov	sp, r7
 80154a2:	b002      	add	sp, #8
 80154a4:	bd80      	pop	{r7, pc}
 80154a6:	46c0      	nop			; (mov r8, r8)
 80154a8:	20000f58 	.word	0x20000f58

080154ac <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b082      	sub	sp, #8
 80154b0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 80154b2:	4b0f      	ldr	r3, [pc, #60]	; (80154f0 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>)
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80154b8:	e00f      	b.n	80154da <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	791b      	ldrb	r3, [r3, #4]
 80154c4:	0018      	movs	r0, r3
 80154c6:	f7ff fedd 	bl	8015284 <IsSticky>
 80154ca:	1e03      	subs	r3, r0, #0
 80154cc:	d003      	beq.n	80154d6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	0018      	movs	r0, r3
 80154d2:	f7ff ff8b 	bl	80153ec <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80154d6:	683b      	ldr	r3, [r7, #0]
 80154d8:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d1ec      	bne.n	80154ba <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 80154e0:	f7ff fee6 	bl	80152b0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80154e4:	2300      	movs	r3, #0
}
 80154e6:	0018      	movs	r0, r3
 80154e8:	46bd      	mov	sp, r7
 80154ea:	b002      	add	sp, #8
 80154ec:	bd80      	pop	{r7, pc}
 80154ee:	46c0      	nop			; (mov r8, r8)
 80154f0:	20000f58 	.word	0x20000f58

080154f4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b082      	sub	sp, #8
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d101      	bne.n	8015506 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015502:	2301      	movs	r3, #1
 8015504:	e005      	b.n	8015512 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 8015506:	4b05      	ldr	r3, [pc, #20]	; (801551c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015508:	22f8      	movs	r2, #248	; 0xf8
 801550a:	589a      	ldr	r2, [r3, r2]
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8015510:	2300      	movs	r3, #0
}
 8015512:	0018      	movs	r0, r3
 8015514:	46bd      	mov	sp, r7
 8015516:	b002      	add	sp, #8
 8015518:	bd80      	pop	{r7, pc}
 801551a:	46c0      	nop			; (mov r8, r8)
 801551c:	20000f58 	.word	0x20000f58

08015520 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8015520:	b590      	push	{r4, r7, lr}
 8015522:	b087      	sub	sp, #28
 8015524:	af00      	add	r7, sp, #0
 8015526:	60f8      	str	r0, [r7, #12]
 8015528:	60b9      	str	r1, [r7, #8]
 801552a:	607a      	str	r2, [r7, #4]
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d002      	beq.n	8015538 <LoRaMacCommandsSerializeCmds+0x18>
 8015532:	68bb      	ldr	r3, [r7, #8]
 8015534:	2b00      	cmp	r3, #0
 8015536:	d101      	bne.n	801553c <LoRaMacCommandsSerializeCmds+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015538:	2301      	movs	r3, #1
 801553a:	e03a      	b.n	80155b2 <LoRaMacCommandsSerializeCmds+0x92>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 801553c:	4b1f      	ldr	r3, [pc, #124]	; (80155bc <LoRaMacCommandsSerializeCmds+0x9c>)
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	617b      	str	r3, [r7, #20]
    uint8_t itr = 0;
 8015542:	2313      	movs	r3, #19
 8015544:	18fb      	adds	r3, r7, r3
 8015546:	2200      	movs	r2, #0
 8015548:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 801554a:	e02c      	b.n	80155a6 <LoRaMacCommandsSerializeCmds+0x86>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801554c:	2313      	movs	r3, #19
 801554e:	18fb      	adds	r3, r7, r3
 8015550:	781b      	ldrb	r3, [r3, #0]
 8015552:	68fa      	ldr	r2, [r7, #12]
 8015554:	1ad2      	subs	r2, r2, r3
 8015556:	697b      	ldr	r3, [r7, #20]
 8015558:	689b      	ldr	r3, [r3, #8]
 801555a:	3301      	adds	r3, #1
 801555c:	429a      	cmp	r2, r3
 801555e:	d326      	bcc.n	80155ae <LoRaMacCommandsSerializeCmds+0x8e>
        {
            buffer[itr++] = curElement->CID;
 8015560:	2413      	movs	r4, #19
 8015562:	193b      	adds	r3, r7, r4
 8015564:	781b      	ldrb	r3, [r3, #0]
 8015566:	193a      	adds	r2, r7, r4
 8015568:	1c59      	adds	r1, r3, #1
 801556a:	7011      	strb	r1, [r2, #0]
 801556c:	001a      	movs	r2, r3
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	189b      	adds	r3, r3, r2
 8015572:	697a      	ldr	r2, [r7, #20]
 8015574:	7912      	ldrb	r2, [r2, #4]
 8015576:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015578:	193b      	adds	r3, r7, r4
 801557a:	781b      	ldrb	r3, [r3, #0]
 801557c:	687a      	ldr	r2, [r7, #4]
 801557e:	18d0      	adds	r0, r2, r3
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	1d59      	adds	r1, r3, #5
 8015584:	697b      	ldr	r3, [r7, #20]
 8015586:	689b      	ldr	r3, [r3, #8]
 8015588:	b29b      	uxth	r3, r3
 801558a:	001a      	movs	r2, r3
 801558c:	f005 ffee 	bl	801b56c <memcpy1>
            itr = itr + curElement->PayloadSize;
 8015590:	697b      	ldr	r3, [r7, #20]
 8015592:	689b      	ldr	r3, [r3, #8]
 8015594:	b2d9      	uxtb	r1, r3
 8015596:	193b      	adds	r3, r7, r4
 8015598:	193a      	adds	r2, r7, r4
 801559a:	7812      	ldrb	r2, [r2, #0]
 801559c:	188a      	adds	r2, r1, r2
 801559e:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	617b      	str	r3, [r7, #20]
    while( curElement != NULL )
 80155a6:	697b      	ldr	r3, [r7, #20]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d1cf      	bne.n	801554c <LoRaMacCommandsSerializeCmds+0x2c>
 80155ac:	e000      	b.n	80155b0 <LoRaMacCommandsSerializeCmds+0x90>
            break;
 80155ae:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80155b0:	2300      	movs	r3, #0
}
 80155b2:	0018      	movs	r0, r3
 80155b4:	46bd      	mov	sp, r7
 80155b6:	b007      	add	sp, #28
 80155b8:	bd90      	pop	{r4, r7, pc}
 80155ba:	46c0      	nop			; (mov r8, r8)
 80155bc:	20000f58 	.word	0x20000f58

080155c0 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b084      	sub	sp, #16
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d101      	bne.n	80155d2 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80155ce:	2301      	movs	r3, #1
 80155d0:	e016      	b.n	8015600 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 80155d2:	4b0d      	ldr	r3, [pc, #52]	; (8015608 <LoRaMacCommandsStickyCmdsPending+0x48>)
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	2200      	movs	r2, #0
 80155dc:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80155de:	e00b      	b.n	80155f8 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	7b1b      	ldrb	r3, [r3, #12]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d004      	beq.n	80155f2 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	2201      	movs	r2, #1
 80155ec:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80155ee:	2300      	movs	r3, #0
 80155f0:	e006      	b.n	8015600 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d1f0      	bne.n	80155e0 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80155fe:	2300      	movs	r3, #0
}
 8015600:	0018      	movs	r0, r3
 8015602:	46bd      	mov	sp, r7
 8015604:	b004      	add	sp, #16
 8015606:	bd80      	pop	{r7, pc}
 8015608:	20000f58 	.word	0x20000f58

0801560c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801560c:	b580      	push	{r7, lr}
 801560e:	b082      	sub	sp, #8
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8015614:	4b08      	ldr	r3, [pc, #32]	; (8015638 <IncreaseBufferPointer+0x2c>)
 8015616:	691b      	ldr	r3, [r3, #16]
 8015618:	3310      	adds	r3, #16
 801561a:	687a      	ldr	r2, [r7, #4]
 801561c:	429a      	cmp	r2, r3
 801561e:	d103      	bne.n	8015628 <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8015620:	4b05      	ldr	r3, [pc, #20]	; (8015638 <IncreaseBufferPointer+0x2c>)
 8015622:	691b      	ldr	r3, [r3, #16]
 8015624:	607b      	str	r3, [r7, #4]
 8015626:	e002      	b.n	801562e <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	3304      	adds	r3, #4
 801562c:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 801562e:	687b      	ldr	r3, [r7, #4]
}
 8015630:	0018      	movs	r0, r3
 8015632:	46bd      	mov	sp, r7
 8015634:	b002      	add	sp, #8
 8015636:	bd80      	pop	{r7, pc}
 8015638:	2000106c 	.word	0x2000106c

0801563c <GetElement>:
    }
    return bufferPointer;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b086      	sub	sp, #24
 8015640:	af00      	add	r7, sp, #0
 8015642:	60b9      	str	r1, [r7, #8]
 8015644:	607a      	str	r2, [r7, #4]
 8015646:	230f      	movs	r3, #15
 8015648:	18fb      	adds	r3, r7, r3
 801564a:	1c02      	adds	r2, r0, #0
 801564c:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 801564e:	68bb      	ldr	r3, [r7, #8]
 8015650:	617b      	str	r3, [r7, #20]

    while( element != bufferEnd )
 8015652:	e00e      	b.n	8015672 <GetElement+0x36>
    {
        if( element->Request == request )
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	781b      	ldrb	r3, [r3, #0]
 8015658:	220f      	movs	r2, #15
 801565a:	18ba      	adds	r2, r7, r2
 801565c:	7812      	ldrb	r2, [r2, #0]
 801565e:	429a      	cmp	r2, r3
 8015660:	d101      	bne.n	8015666 <GetElement+0x2a>
        {
            // We have found the element
            return element;
 8015662:	697b      	ldr	r3, [r7, #20]
 8015664:	e00a      	b.n	801567c <GetElement+0x40>
        }
        else
        {
            element = IncreaseBufferPointer( element );
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	0018      	movs	r0, r3
 801566a:	f7ff ffcf 	bl	801560c <IncreaseBufferPointer>
 801566e:	0003      	movs	r3, r0
 8015670:	617b      	str	r3, [r7, #20]
    while( element != bufferEnd )
 8015672:	697a      	ldr	r2, [r7, #20]
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	429a      	cmp	r2, r3
 8015678:	d1ec      	bne.n	8015654 <GetElement+0x18>
        }
    }
    return NULL;
 801567a:	2300      	movs	r3, #0
}
 801567c:	0018      	movs	r0, r3
 801567e:	46bd      	mov	sp, r7
 8015680:	b006      	add	sp, #24
 8015682:	bd80      	pop	{r7, pc}

08015684 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b082      	sub	sp, #8
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
 801568c:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 801568e:	4b13      	ldr	r3, [pc, #76]	; (80156dc <LoRaMacConfirmQueueInit+0x58>)
 8015690:	687a      	ldr	r2, [r7, #4]
 8015692:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 8015694:	4b11      	ldr	r3, [pc, #68]	; (80156dc <LoRaMacConfirmQueueInit+0x58>)
 8015696:	4a12      	ldr	r2, [pc, #72]	; (80156e0 <LoRaMacConfirmQueueInit+0x5c>)
 8015698:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 801569a:	4b10      	ldr	r3, [pc, #64]	; (80156dc <LoRaMacConfirmQueueInit+0x58>)
 801569c:	691b      	ldr	r3, [r3, #16]
 801569e:	2200      	movs	r2, #0
 80156a0:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80156a2:	4b0e      	ldr	r3, [pc, #56]	; (80156dc <LoRaMacConfirmQueueInit+0x58>)
 80156a4:	691b      	ldr	r3, [r3, #16]
 80156a6:	001a      	movs	r2, r3
 80156a8:	4b0c      	ldr	r3, [pc, #48]	; (80156dc <LoRaMacConfirmQueueInit+0x58>)
 80156aa:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80156ac:	4b0b      	ldr	r3, [pc, #44]	; (80156dc <LoRaMacConfirmQueueInit+0x58>)
 80156ae:	691b      	ldr	r3, [r3, #16]
 80156b0:	001a      	movs	r2, r3
 80156b2:	4b0a      	ldr	r3, [pc, #40]	; (80156dc <LoRaMacConfirmQueueInit+0x58>)
 80156b4:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 80156b6:	4b09      	ldr	r3, [pc, #36]	; (80156dc <LoRaMacConfirmQueueInit+0x58>)
 80156b8:	691b      	ldr	r3, [r3, #16]
 80156ba:	2214      	movs	r2, #20
 80156bc:	21ff      	movs	r1, #255	; 0xff
 80156be:	0018      	movs	r0, r3
 80156c0:	f005 ff90 	bl	801b5e4 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80156c4:	4b05      	ldr	r3, [pc, #20]	; (80156dc <LoRaMacConfirmQueueInit+0x58>)
 80156c6:	691b      	ldr	r3, [r3, #16]
 80156c8:	2201      	movs	r2, #1
 80156ca:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 80156cc:	4b03      	ldr	r3, [pc, #12]	; (80156dc <LoRaMacConfirmQueueInit+0x58>)
 80156ce:	683a      	ldr	r2, [r7, #0]
 80156d0:	60da      	str	r2, [r3, #12]
}
 80156d2:	46c0      	nop			; (mov r8, r8)
 80156d4:	46bd      	mov	sp, r7
 80156d6:	b002      	add	sp, #8
 80156d8:	bd80      	pop	{r7, pc}
 80156da:	46c0      	nop			; (mov r8, r8)
 80156dc:	2000106c 	.word	0x2000106c
 80156e0:	20001054 	.word	0x20001054

080156e4 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b082      	sub	sp, #8
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d007      	beq.n	8015702 <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 80156f2:	6879      	ldr	r1, [r7, #4]
 80156f4:	4b05      	ldr	r3, [pc, #20]	; (801570c <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 80156f6:	2216      	movs	r2, #22
 80156f8:	0018      	movs	r0, r3
 80156fa:	f005 ff37 	bl	801b56c <memcpy1>
        return true;
 80156fe:	2301      	movs	r3, #1
 8015700:	e000      	b.n	8015704 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 8015702:	2300      	movs	r3, #0
    }
}
 8015704:	0018      	movs	r0, r3
 8015706:	46bd      	mov	sp, r7
 8015708:	b002      	add	sp, #8
 801570a:	bd80      	pop	{r7, pc}
 801570c:	20001054 	.word	0x20001054

08015710 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b082      	sub	sp, #8
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	2216      	movs	r2, #22
 801571c:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 801571e:	4b02      	ldr	r3, [pc, #8]	; (8015728 <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 8015720:	0018      	movs	r0, r3
 8015722:	46bd      	mov	sp, r7
 8015724:	b002      	add	sp, #8
 8015726:	bd80      	pop	{r7, pc}
 8015728:	20001054 	.word	0x20001054

0801572c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b082      	sub	sp, #8
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8015734:	4b16      	ldr	r3, [pc, #88]	; (8015790 <LoRaMacConfirmQueueAdd+0x64>)
 8015736:	691b      	ldr	r3, [r3, #16]
 8015738:	7d1b      	ldrb	r3, [r3, #20]
 801573a:	2b04      	cmp	r3, #4
 801573c:	d901      	bls.n	8015742 <LoRaMacConfirmQueueAdd+0x16>
    {
        // Protect the buffer against overwrites
        return false;
 801573e:	2300      	movs	r3, #0
 8015740:	e021      	b.n	8015786 <LoRaMacConfirmQueueAdd+0x5a>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8015742:	4b13      	ldr	r3, [pc, #76]	; (8015790 <LoRaMacConfirmQueueAdd+0x64>)
 8015744:	689b      	ldr	r3, [r3, #8]
 8015746:	687a      	ldr	r2, [r7, #4]
 8015748:	7812      	ldrb	r2, [r2, #0]
 801574a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 801574c:	4b10      	ldr	r3, [pc, #64]	; (8015790 <LoRaMacConfirmQueueAdd+0x64>)
 801574e:	689b      	ldr	r3, [r3, #8]
 8015750:	687a      	ldr	r2, [r7, #4]
 8015752:	7852      	ldrb	r2, [r2, #1]
 8015754:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8015756:	4b0e      	ldr	r3, [pc, #56]	; (8015790 <LoRaMacConfirmQueueAdd+0x64>)
 8015758:	689b      	ldr	r3, [r3, #8]
 801575a:	687a      	ldr	r2, [r7, #4]
 801575c:	78d2      	ldrb	r2, [r2, #3]
 801575e:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8015760:	4b0b      	ldr	r3, [pc, #44]	; (8015790 <LoRaMacConfirmQueueAdd+0x64>)
 8015762:	689b      	ldr	r3, [r3, #8]
 8015764:	2200      	movs	r2, #0
 8015766:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 8015768:	4b09      	ldr	r3, [pc, #36]	; (8015790 <LoRaMacConfirmQueueAdd+0x64>)
 801576a:	691b      	ldr	r3, [r3, #16]
 801576c:	7d1a      	ldrb	r2, [r3, #20]
 801576e:	3201      	adds	r2, #1
 8015770:	b2d2      	uxtb	r2, r2
 8015772:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8015774:	4b06      	ldr	r3, [pc, #24]	; (8015790 <LoRaMacConfirmQueueAdd+0x64>)
 8015776:	689b      	ldr	r3, [r3, #8]
 8015778:	0018      	movs	r0, r3
 801577a:	f7ff ff47 	bl	801560c <IncreaseBufferPointer>
 801577e:	0002      	movs	r2, r0
 8015780:	4b03      	ldr	r3, [pc, #12]	; (8015790 <LoRaMacConfirmQueueAdd+0x64>)
 8015782:	609a      	str	r2, [r3, #8]

    return true;
 8015784:	2301      	movs	r3, #1
}
 8015786:	0018      	movs	r0, r3
 8015788:	46bd      	mov	sp, r7
 801578a:	b002      	add	sp, #8
 801578c:	bd80      	pop	{r7, pc}
 801578e:	46c0      	nop			; (mov r8, r8)
 8015790:	2000106c 	.word	0x2000106c

08015794 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8015794:	b580      	push	{r7, lr}
 8015796:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 8015798:	4b0c      	ldr	r3, [pc, #48]	; (80157cc <LoRaMacConfirmQueueRemoveFirst+0x38>)
 801579a:	691b      	ldr	r3, [r3, #16]
 801579c:	7d1b      	ldrb	r3, [r3, #20]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d101      	bne.n	80157a6 <LoRaMacConfirmQueueRemoveFirst+0x12>
    {
        return false;
 80157a2:	2300      	movs	r3, #0
 80157a4:	e00e      	b.n	80157c4 <LoRaMacConfirmQueueRemoveFirst+0x30>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 80157a6:	4b09      	ldr	r3, [pc, #36]	; (80157cc <LoRaMacConfirmQueueRemoveFirst+0x38>)
 80157a8:	691b      	ldr	r3, [r3, #16]
 80157aa:	7d1a      	ldrb	r2, [r3, #20]
 80157ac:	3a01      	subs	r2, #1
 80157ae:	b2d2      	uxtb	r2, r2
 80157b0:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80157b2:	4b06      	ldr	r3, [pc, #24]	; (80157cc <LoRaMacConfirmQueueRemoveFirst+0x38>)
 80157b4:	685b      	ldr	r3, [r3, #4]
 80157b6:	0018      	movs	r0, r3
 80157b8:	f7ff ff28 	bl	801560c <IncreaseBufferPointer>
 80157bc:	0002      	movs	r2, r0
 80157be:	4b03      	ldr	r3, [pc, #12]	; (80157cc <LoRaMacConfirmQueueRemoveFirst+0x38>)
 80157c0:	605a      	str	r2, [r3, #4]

    return true;
 80157c2:	2301      	movs	r3, #1
}
 80157c4:	0018      	movs	r0, r3
 80157c6:	46bd      	mov	sp, r7
 80157c8:	bd80      	pop	{r7, pc}
 80157ca:	46c0      	nop			; (mov r8, r8)
 80157cc:	2000106c 	.word	0x2000106c

080157d0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b084      	sub	sp, #16
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	0002      	movs	r2, r0
 80157d8:	1dfb      	adds	r3, r7, #7
 80157da:	701a      	strb	r2, [r3, #0]
 80157dc:	1dbb      	adds	r3, r7, #6
 80157de:	1c0a      	adds	r2, r1, #0
 80157e0:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 80157e2:	2300      	movs	r3, #0
 80157e4:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 80157e6:	4b0f      	ldr	r3, [pc, #60]	; (8015824 <LoRaMacConfirmQueueSetStatus+0x54>)
 80157e8:	691b      	ldr	r3, [r3, #16]
 80157ea:	7d1b      	ldrb	r3, [r3, #20]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d014      	beq.n	801581a <LoRaMacConfirmQueueSetStatus+0x4a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80157f0:	4b0c      	ldr	r3, [pc, #48]	; (8015824 <LoRaMacConfirmQueueSetStatus+0x54>)
 80157f2:	6859      	ldr	r1, [r3, #4]
 80157f4:	4b0b      	ldr	r3, [pc, #44]	; (8015824 <LoRaMacConfirmQueueSetStatus+0x54>)
 80157f6:	689a      	ldr	r2, [r3, #8]
 80157f8:	1dbb      	adds	r3, r7, #6
 80157fa:	781b      	ldrb	r3, [r3, #0]
 80157fc:	0018      	movs	r0, r3
 80157fe:	f7ff ff1d 	bl	801563c <GetElement>
 8015802:	0003      	movs	r3, r0
 8015804:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d006      	beq.n	801581a <LoRaMacConfirmQueueSetStatus+0x4a>
        {
            element->Status = status;
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	1dfa      	adds	r2, r7, #7
 8015810:	7812      	ldrb	r2, [r2, #0]
 8015812:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	2201      	movs	r2, #1
 8015818:	709a      	strb	r2, [r3, #2]
        }
    }
}
 801581a:	46c0      	nop			; (mov r8, r8)
 801581c:	46bd      	mov	sp, r7
 801581e:	b004      	add	sp, #16
 8015820:	bd80      	pop	{r7, pc}
 8015822:	46c0      	nop			; (mov r8, r8)
 8015824:	2000106c 	.word	0x2000106c

08015828 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b084      	sub	sp, #16
 801582c:	af00      	add	r7, sp, #0
 801582e:	0002      	movs	r2, r0
 8015830:	1dfb      	adds	r3, r7, #7
 8015832:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 8015834:	2300      	movs	r3, #0
 8015836:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8015838:	4b0d      	ldr	r3, [pc, #52]	; (8015870 <LoRaMacConfirmQueueGetStatus+0x48>)
 801583a:	691b      	ldr	r3, [r3, #16]
 801583c:	7d1b      	ldrb	r3, [r3, #20]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d010      	beq.n	8015864 <LoRaMacConfirmQueueGetStatus+0x3c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015842:	4b0b      	ldr	r3, [pc, #44]	; (8015870 <LoRaMacConfirmQueueGetStatus+0x48>)
 8015844:	6859      	ldr	r1, [r3, #4]
 8015846:	4b0a      	ldr	r3, [pc, #40]	; (8015870 <LoRaMacConfirmQueueGetStatus+0x48>)
 8015848:	689a      	ldr	r2, [r3, #8]
 801584a:	1dfb      	adds	r3, r7, #7
 801584c:	781b      	ldrb	r3, [r3, #0]
 801584e:	0018      	movs	r0, r3
 8015850:	f7ff fef4 	bl	801563c <GetElement>
 8015854:	0003      	movs	r3, r0
 8015856:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d002      	beq.n	8015864 <LoRaMacConfirmQueueGetStatus+0x3c>
        {
            return element->Status;
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	785b      	ldrb	r3, [r3, #1]
 8015862:	e000      	b.n	8015866 <LoRaMacConfirmQueueGetStatus+0x3e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015864:	2301      	movs	r3, #1
}
 8015866:	0018      	movs	r0, r3
 8015868:	46bd      	mov	sp, r7
 801586a:	b004      	add	sp, #16
 801586c:	bd80      	pop	{r7, pc}
 801586e:	46c0      	nop			; (mov r8, r8)
 8015870:	2000106c 	.word	0x2000106c

08015874 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b084      	sub	sp, #16
 8015878:	af00      	add	r7, sp, #0
 801587a:	0002      	movs	r2, r0
 801587c:	1dfb      	adds	r3, r7, #7
 801587e:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8015880:	4b14      	ldr	r3, [pc, #80]	; (80158d4 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8015882:	685b      	ldr	r3, [r3, #4]
 8015884:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 8015886:	4b13      	ldr	r3, [pc, #76]	; (80158d4 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8015888:	691b      	ldr	r3, [r3, #16]
 801588a:	1dfa      	adds	r2, r7, #7
 801588c:	7812      	ldrb	r2, [r2, #0]
 801588e:	755a      	strb	r2, [r3, #21]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8015890:	4b10      	ldr	r3, [pc, #64]	; (80158d4 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8015892:	691b      	ldr	r3, [r3, #16]
 8015894:	7d1b      	ldrb	r3, [r3, #20]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d018      	beq.n	80158cc <LoRaMacConfirmQueueSetStatusCmn+0x58>
    {
        do
        {
            element->Status = status;
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	1dfa      	adds	r2, r7, #7
 801589e:	7812      	ldrb	r2, [r2, #0]
 80158a0:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	78db      	ldrb	r3, [r3, #3]
 80158a6:	2201      	movs	r2, #1
 80158a8:	4053      	eors	r3, r2
 80158aa:	b2db      	uxtb	r3, r3
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d002      	beq.n	80158b6 <LoRaMacConfirmQueueSetStatusCmn+0x42>
            {
                element->ReadyToHandle = true;
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	2201      	movs	r2, #1
 80158b4:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	0018      	movs	r0, r3
 80158ba:	f7ff fea7 	bl	801560c <IncreaseBufferPointer>
 80158be:	0003      	movs	r3, r0
 80158c0:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80158c2:	4b04      	ldr	r3, [pc, #16]	; (80158d4 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 80158c4:	689b      	ldr	r3, [r3, #8]
 80158c6:	68fa      	ldr	r2, [r7, #12]
 80158c8:	429a      	cmp	r2, r3
 80158ca:	d1e6      	bne.n	801589a <LoRaMacConfirmQueueSetStatusCmn+0x26>
    }
}
 80158cc:	46c0      	nop			; (mov r8, r8)
 80158ce:	46bd      	mov	sp, r7
 80158d0:	b004      	add	sp, #16
 80158d2:	bd80      	pop	{r7, pc}
 80158d4:	2000106c 	.word	0x2000106c

080158d8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b082      	sub	sp, #8
 80158dc:	af00      	add	r7, sp, #0
 80158de:	0002      	movs	r2, r0
 80158e0:	1dfb      	adds	r3, r7, #7
 80158e2:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80158e4:	4b08      	ldr	r3, [pc, #32]	; (8015908 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80158e6:	6859      	ldr	r1, [r3, #4]
 80158e8:	4b07      	ldr	r3, [pc, #28]	; (8015908 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80158ea:	689a      	ldr	r2, [r3, #8]
 80158ec:	1dfb      	adds	r3, r7, #7
 80158ee:	781b      	ldrb	r3, [r3, #0]
 80158f0:	0018      	movs	r0, r3
 80158f2:	f7ff fea3 	bl	801563c <GetElement>
 80158f6:	1e03      	subs	r3, r0, #0
 80158f8:	d001      	beq.n	80158fe <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 80158fa:	2301      	movs	r3, #1
 80158fc:	e000      	b.n	8015900 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 80158fe:	2300      	movs	r3, #0
}
 8015900:	0018      	movs	r0, r3
 8015902:	46bd      	mov	sp, r7
 8015904:	b002      	add	sp, #8
 8015906:	bd80      	pop	{r7, pc}
 8015908:	2000106c 	.word	0x2000106c

0801590c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b084      	sub	sp, #16
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8015914:	4b2d      	ldr	r3, [pc, #180]	; (80159cc <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015916:	691a      	ldr	r2, [r3, #16]
 8015918:	230e      	movs	r3, #14
 801591a:	18fb      	adds	r3, r7, r3
 801591c:	7d12      	ldrb	r2, [r2, #20]
 801591e:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 8015920:	230d      	movs	r3, #13
 8015922:	18fb      	adds	r3, r7, r3
 8015924:	2200      	movs	r2, #0
 8015926:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8015928:	230f      	movs	r3, #15
 801592a:	18fb      	adds	r3, r7, r3
 801592c:	2200      	movs	r2, #0
 801592e:	701a      	strb	r2, [r3, #0]
 8015930:	e03f      	b.n	80159b2 <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8015932:	4b26      	ldr	r3, [pc, #152]	; (80159cc <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015934:	685b      	ldr	r3, [r3, #4]
 8015936:	781a      	ldrb	r2, [r3, #0]
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 801593c:	4b23      	ldr	r3, [pc, #140]	; (80159cc <LoRaMacConfirmQueueHandleCb+0xc0>)
 801593e:	685b      	ldr	r3, [r3, #4]
 8015940:	785a      	ldrb	r2, [r3, #1]
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8015946:	4b21      	ldr	r3, [pc, #132]	; (80159cc <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015948:	685a      	ldr	r2, [r3, #4]
 801594a:	210d      	movs	r1, #13
 801594c:	187b      	adds	r3, r7, r1
 801594e:	7892      	ldrb	r2, [r2, #2]
 8015950:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 8015952:	187b      	adds	r3, r7, r1
 8015954:	781b      	ldrb	r3, [r3, #0]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d006      	beq.n	8015968 <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 801595a:	4b1c      	ldr	r3, [pc, #112]	; (80159cc <LoRaMacConfirmQueueHandleCb+0xc0>)
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	689b      	ldr	r3, [r3, #8]
 8015960:	687a      	ldr	r2, [r7, #4]
 8015962:	0010      	movs	r0, r2
 8015964:	4798      	blx	r3
 8015966:	e00f      	b.n	8015988 <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8015968:	4b18      	ldr	r3, [pc, #96]	; (80159cc <LoRaMacConfirmQueueHandleCb+0xc0>)
 801596a:	685b      	ldr	r3, [r3, #4]
 801596c:	781a      	ldrb	r2, [r3, #0]
 801596e:	2108      	movs	r1, #8
 8015970:	187b      	adds	r3, r7, r1
 8015972:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8015974:	4b15      	ldr	r3, [pc, #84]	; (80159cc <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015976:	685b      	ldr	r3, [r3, #4]
 8015978:	785a      	ldrb	r2, [r3, #1]
 801597a:	187b      	adds	r3, r7, r1
 801597c:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801597e:	4b13      	ldr	r3, [pc, #76]	; (80159cc <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015980:	685b      	ldr	r3, [r3, #4]
 8015982:	78da      	ldrb	r2, [r3, #3]
 8015984:	187b      	adds	r3, r7, r1
 8015986:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8015988:	f7ff ff04 	bl	8015794 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801598c:	230d      	movs	r3, #13
 801598e:	18fb      	adds	r3, r7, r3
 8015990:	781b      	ldrb	r3, [r3, #0]
 8015992:	2201      	movs	r2, #1
 8015994:	4053      	eors	r3, r2
 8015996:	b2db      	uxtb	r3, r3
 8015998:	2b00      	cmp	r3, #0
 801599a:	d004      	beq.n	80159a6 <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801599c:	2308      	movs	r3, #8
 801599e:	18fb      	adds	r3, r7, r3
 80159a0:	0018      	movs	r0, r3
 80159a2:	f7ff fec3 	bl	801572c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80159a6:	210f      	movs	r1, #15
 80159a8:	187b      	adds	r3, r7, r1
 80159aa:	781a      	ldrb	r2, [r3, #0]
 80159ac:	187b      	adds	r3, r7, r1
 80159ae:	3201      	adds	r2, #1
 80159b0:	701a      	strb	r2, [r3, #0]
 80159b2:	230f      	movs	r3, #15
 80159b4:	18fa      	adds	r2, r7, r3
 80159b6:	230e      	movs	r3, #14
 80159b8:	18fb      	adds	r3, r7, r3
 80159ba:	7812      	ldrb	r2, [r2, #0]
 80159bc:	781b      	ldrb	r3, [r3, #0]
 80159be:	429a      	cmp	r2, r3
 80159c0:	d3b7      	bcc.n	8015932 <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 80159c2:	46c0      	nop			; (mov r8, r8)
 80159c4:	46bd      	mov	sp, r7
 80159c6:	b004      	add	sp, #16
 80159c8:	bd80      	pop	{r7, pc}
 80159ca:	46c0      	nop			; (mov r8, r8)
 80159cc:	2000106c 	.word	0x2000106c

080159d0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 80159d4:	4b02      	ldr	r3, [pc, #8]	; (80159e0 <LoRaMacConfirmQueueGetCnt+0x10>)
 80159d6:	691b      	ldr	r3, [r3, #16]
 80159d8:	7d1b      	ldrb	r3, [r3, #20]
}
 80159da:	0018      	movs	r0, r3
 80159dc:	46bd      	mov	sp, r7
 80159de:	bd80      	pop	{r7, pc}
 80159e0:	2000106c 	.word	0x2000106c

080159e4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80159e4:	b580      	push	{r7, lr}
 80159e6:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80159e8:	4b05      	ldr	r3, [pc, #20]	; (8015a00 <LoRaMacConfirmQueueIsFull+0x1c>)
 80159ea:	691b      	ldr	r3, [r3, #16]
 80159ec:	7d1b      	ldrb	r3, [r3, #20]
 80159ee:	2b04      	cmp	r3, #4
 80159f0:	d901      	bls.n	80159f6 <LoRaMacConfirmQueueIsFull+0x12>
    {
        return true;
 80159f2:	2301      	movs	r3, #1
 80159f4:	e000      	b.n	80159f8 <LoRaMacConfirmQueueIsFull+0x14>
    }
    else
    {
        return false;
 80159f6:	2300      	movs	r3, #0
    }
}
 80159f8:	0018      	movs	r0, r3
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
 80159fe:	46c0      	nop			; (mov r8, r8)
 8015a00:	2000106c 	.word	0x2000106c

08015a04 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8015a04:	b590      	push	{r4, r7, lr}
 8015a06:	b08f      	sub	sp, #60	; 0x3c
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	60f8      	str	r0, [r7, #12]
 8015a0c:	0008      	movs	r0, r1
 8015a0e:	0011      	movs	r1, r2
 8015a10:	607b      	str	r3, [r7, #4]
 8015a12:	230a      	movs	r3, #10
 8015a14:	18fb      	adds	r3, r7, r3
 8015a16:	1c02      	adds	r2, r0, #0
 8015a18:	801a      	strh	r2, [r3, #0]
 8015a1a:	2309      	movs	r3, #9
 8015a1c:	18fb      	adds	r3, r7, r3
 8015a1e:	1c0a      	adds	r2, r1, #0
 8015a20:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d101      	bne.n	8015a2c <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015a28:	230a      	movs	r3, #10
 8015a2a:	e0ab      	b.n	8015b84 <PayloadEncrypt+0x180>
    }

    uint8_t bufferIndex = 0;
 8015a2c:	2337      	movs	r3, #55	; 0x37
 8015a2e:	18fb      	adds	r3, r7, r3
 8015a30:	2200      	movs	r2, #0
 8015a32:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 8015a34:	2334      	movs	r3, #52	; 0x34
 8015a36:	18fb      	adds	r3, r7, r3
 8015a38:	2201      	movs	r2, #1
 8015a3a:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 8015a3c:	2320      	movs	r3, #32
 8015a3e:	18fb      	adds	r3, r7, r3
 8015a40:	0018      	movs	r0, r3
 8015a42:	2310      	movs	r3, #16
 8015a44:	001a      	movs	r2, r3
 8015a46:	2100      	movs	r1, #0
 8015a48:	f005 fe14 	bl	801b674 <memset>
    uint8_t aBlock[16] = { 0 };
 8015a4c:	2110      	movs	r1, #16
 8015a4e:	000c      	movs	r4, r1
 8015a50:	187b      	adds	r3, r7, r1
 8015a52:	0018      	movs	r0, r3
 8015a54:	2310      	movs	r3, #16
 8015a56:	001a      	movs	r2, r3
 8015a58:	2100      	movs	r1, #0
 8015a5a:	f005 fe0b 	bl	801b674 <memset>

    aBlock[0] = 0x01;
 8015a5e:	0021      	movs	r1, r4
 8015a60:	187b      	adds	r3, r7, r1
 8015a62:	2201      	movs	r2, #1
 8015a64:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 8015a66:	187b      	adds	r3, r7, r1
 8015a68:	2240      	movs	r2, #64	; 0x40
 8015a6a:	2008      	movs	r0, #8
 8015a6c:	4684      	mov	ip, r0
 8015a6e:	44bc      	add	ip, r7
 8015a70:	4462      	add	r2, ip
 8015a72:	7812      	ldrb	r2, [r2, #0]
 8015a74:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	b2da      	uxtb	r2, r3
 8015a7a:	187b      	adds	r3, r7, r1
 8015a7c:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	0a1b      	lsrs	r3, r3, #8
 8015a82:	b2da      	uxtb	r2, r3
 8015a84:	187b      	adds	r3, r7, r1
 8015a86:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	0c1b      	lsrs	r3, r3, #16
 8015a8c:	b2da      	uxtb	r2, r3
 8015a8e:	187b      	adds	r3, r7, r1
 8015a90:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	0e1b      	lsrs	r3, r3, #24
 8015a96:	b2da      	uxtb	r2, r3
 8015a98:	187b      	adds	r3, r7, r1
 8015a9a:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 8015a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a9e:	b2da      	uxtb	r2, r3
 8015aa0:	187b      	adds	r3, r7, r1
 8015aa2:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015aa6:	0a1b      	lsrs	r3, r3, #8
 8015aa8:	b2da      	uxtb	r2, r3
 8015aaa:	187b      	adds	r3, r7, r1
 8015aac:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8015aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ab0:	0c1b      	lsrs	r3, r3, #16
 8015ab2:	b2da      	uxtb	r2, r3
 8015ab4:	187b      	adds	r3, r7, r1
 8015ab6:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015aba:	0e1b      	lsrs	r3, r3, #24
 8015abc:	b2da      	uxtb	r2, r3
 8015abe:	187b      	adds	r3, r7, r1
 8015ac0:	735a      	strb	r2, [r3, #13]

    while( size > 0 )
 8015ac2:	e058      	b.n	8015b76 <PayloadEncrypt+0x172>
    {
        aBlock[15] = ctr & 0xFF;
 8015ac4:	2134      	movs	r1, #52	; 0x34
 8015ac6:	187b      	adds	r3, r7, r1
 8015ac8:	881b      	ldrh	r3, [r3, #0]
 8015aca:	b2da      	uxtb	r2, r3
 8015acc:	2010      	movs	r0, #16
 8015ace:	183b      	adds	r3, r7, r0
 8015ad0:	73da      	strb	r2, [r3, #15]
        ctr++;
 8015ad2:	187b      	adds	r3, r7, r1
 8015ad4:	881a      	ldrh	r2, [r3, #0]
 8015ad6:	187b      	adds	r3, r7, r1
 8015ad8:	3201      	adds	r2, #1
 8015ada:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8015adc:	2320      	movs	r3, #32
 8015ade:	18f9      	adds	r1, r7, r3
 8015ae0:	2309      	movs	r3, #9
 8015ae2:	18fb      	adds	r3, r7, r3
 8015ae4:	781a      	ldrb	r2, [r3, #0]
 8015ae6:	1838      	adds	r0, r7, r0
 8015ae8:	000b      	movs	r3, r1
 8015aea:	2110      	movs	r1, #16
 8015aec:	f7f9 fb96 	bl	800f21c <SecureElementAesEncrypt>
 8015af0:	1e03      	subs	r3, r0, #0
 8015af2:	d001      	beq.n	8015af8 <PayloadEncrypt+0xf4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015af4:	230f      	movs	r3, #15
 8015af6:	e045      	b.n	8015b84 <PayloadEncrypt+0x180>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015af8:	2333      	movs	r3, #51	; 0x33
 8015afa:	18fb      	adds	r3, r7, r3
 8015afc:	2200      	movs	r2, #0
 8015afe:	701a      	strb	r2, [r3, #0]
 8015b00:	e01f      	b.n	8015b42 <PayloadEncrypt+0x13e>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8015b02:	2037      	movs	r0, #55	; 0x37
 8015b04:	183b      	adds	r3, r7, r0
 8015b06:	781a      	ldrb	r2, [r3, #0]
 8015b08:	2433      	movs	r4, #51	; 0x33
 8015b0a:	193b      	adds	r3, r7, r4
 8015b0c:	781b      	ldrb	r3, [r3, #0]
 8015b0e:	18d3      	adds	r3, r2, r3
 8015b10:	001a      	movs	r2, r3
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	189b      	adds	r3, r3, r2
 8015b16:	7819      	ldrb	r1, [r3, #0]
 8015b18:	193b      	adds	r3, r7, r4
 8015b1a:	781b      	ldrb	r3, [r3, #0]
 8015b1c:	2220      	movs	r2, #32
 8015b1e:	18ba      	adds	r2, r7, r2
 8015b20:	5cd2      	ldrb	r2, [r2, r3]
 8015b22:	183b      	adds	r3, r7, r0
 8015b24:	7818      	ldrb	r0, [r3, #0]
 8015b26:	193b      	adds	r3, r7, r4
 8015b28:	781b      	ldrb	r3, [r3, #0]
 8015b2a:	18c3      	adds	r3, r0, r3
 8015b2c:	0018      	movs	r0, r3
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	181b      	adds	r3, r3, r0
 8015b32:	404a      	eors	r2, r1
 8015b34:	b2d2      	uxtb	r2, r2
 8015b36:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015b38:	193b      	adds	r3, r7, r4
 8015b3a:	781a      	ldrb	r2, [r3, #0]
 8015b3c:	193b      	adds	r3, r7, r4
 8015b3e:	3201      	adds	r2, #1
 8015b40:	701a      	strb	r2, [r3, #0]
 8015b42:	2333      	movs	r3, #51	; 0x33
 8015b44:	18fb      	adds	r3, r7, r3
 8015b46:	781a      	ldrb	r2, [r3, #0]
 8015b48:	230a      	movs	r3, #10
 8015b4a:	18fb      	adds	r3, r7, r3
 8015b4c:	881b      	ldrh	r3, [r3, #0]
 8015b4e:	b219      	sxth	r1, r3
 8015b50:	2910      	cmp	r1, #16
 8015b52:	dd00      	ble.n	8015b56 <PayloadEncrypt+0x152>
 8015b54:	2310      	movs	r3, #16
 8015b56:	b21b      	sxth	r3, r3
 8015b58:	429a      	cmp	r2, r3
 8015b5a:	dbd2      	blt.n	8015b02 <PayloadEncrypt+0xfe>
        }
        size -= 16;
 8015b5c:	210a      	movs	r1, #10
 8015b5e:	187b      	adds	r3, r7, r1
 8015b60:	881b      	ldrh	r3, [r3, #0]
 8015b62:	3b10      	subs	r3, #16
 8015b64:	b29a      	uxth	r2, r3
 8015b66:	187b      	adds	r3, r7, r1
 8015b68:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 8015b6a:	2237      	movs	r2, #55	; 0x37
 8015b6c:	18bb      	adds	r3, r7, r2
 8015b6e:	18ba      	adds	r2, r7, r2
 8015b70:	7812      	ldrb	r2, [r2, #0]
 8015b72:	3210      	adds	r2, #16
 8015b74:	701a      	strb	r2, [r3, #0]
    while( size > 0 )
 8015b76:	230a      	movs	r3, #10
 8015b78:	18fb      	adds	r3, r7, r3
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	5e9b      	ldrsh	r3, [r3, r2]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	dca0      	bgt.n	8015ac4 <PayloadEncrypt+0xc0>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015b82:	2300      	movs	r3, #0
}
 8015b84:	0018      	movs	r0, r3
 8015b86:	46bd      	mov	sp, r7
 8015b88:	b00f      	add	sp, #60	; 0x3c
 8015b8a:	bd90      	pop	{r4, r7, pc}

08015b8c <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8015b8c:	b5b0      	push	{r4, r5, r7, lr}
 8015b8e:	b084      	sub	sp, #16
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	0005      	movs	r5, r0
 8015b94:	000c      	movs	r4, r1
 8015b96:	0010      	movs	r0, r2
 8015b98:	0019      	movs	r1, r3
 8015b9a:	1dbb      	adds	r3, r7, #6
 8015b9c:	1c2a      	adds	r2, r5, #0
 8015b9e:	801a      	strh	r2, [r3, #0]
 8015ba0:	1d7b      	adds	r3, r7, #5
 8015ba2:	1c22      	adds	r2, r4, #0
 8015ba4:	701a      	strb	r2, [r3, #0]
 8015ba6:	1d3b      	adds	r3, r7, #4
 8015ba8:	1c02      	adds	r2, r0, #0
 8015baa:	701a      	strb	r2, [r3, #0]
 8015bac:	1cfb      	adds	r3, r7, #3
 8015bae:	1c0a      	adds	r2, r1, #0
 8015bb0:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 8015bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d101      	bne.n	8015bbc <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015bb8:	230a      	movs	r3, #10
 8015bba:	e070      	b.n	8015c9e <PrepareB0+0x112>
    }

    b0[0] = 0x49;
 8015bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bbe:	2249      	movs	r2, #73	; 0x49
 8015bc0:	701a      	strb	r2, [r3, #0]

    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 8015bc2:	1d3b      	adds	r3, r7, #4
 8015bc4:	781b      	ldrb	r3, [r3, #0]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d01b      	beq.n	8015c02 <PrepareB0+0x76>
 8015bca:	1cfb      	adds	r3, r7, #3
 8015bcc:	781b      	ldrb	r3, [r3, #0]
 8015bce:	2b01      	cmp	r3, #1
 8015bd0:	d117      	bne.n	8015c02 <PrepareB0+0x76>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink or downlink frame that is being acknowledged
        uint16_t confFCnt = 0;
 8015bd2:	210e      	movs	r1, #14
 8015bd4:	187b      	adds	r3, r7, r1
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	801a      	strh	r2, [r3, #0]

        confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntList.FCntUp % 65536 );
 8015bda:	4b33      	ldr	r3, [pc, #204]	; (8015ca8 <PrepareB0+0x11c>)
 8015bdc:	685b      	ldr	r3, [r3, #4]
 8015bde:	68da      	ldr	r2, [r3, #12]
 8015be0:	187b      	adds	r3, r7, r1
 8015be2:	801a      	strh	r2, [r3, #0]

        b0[1] = confFCnt & 0xFF;
 8015be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015be6:	3301      	adds	r3, #1
 8015be8:	187a      	adds	r2, r7, r1
 8015bea:	8812      	ldrh	r2, [r2, #0]
 8015bec:	b2d2      	uxtb	r2, r2
 8015bee:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 8015bf0:	187b      	adds	r3, r7, r1
 8015bf2:	881b      	ldrh	r3, [r3, #0]
 8015bf4:	0a1b      	lsrs	r3, r3, #8
 8015bf6:	b29a      	uxth	r2, r3
 8015bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bfa:	3302      	adds	r3, #2
 8015bfc:	b2d2      	uxtb	r2, r2
 8015bfe:	701a      	strb	r2, [r3, #0]
    {
 8015c00:	e007      	b.n	8015c12 <PrepareB0+0x86>
    }
    else
    {
        b0[1] = 0x00;
 8015c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c04:	3301      	adds	r3, #1
 8015c06:	2200      	movs	r2, #0
 8015c08:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8015c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c0c:	3302      	adds	r3, #2
 8015c0e:	2200      	movs	r2, #0
 8015c10:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8015c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c14:	3303      	adds	r3, #3
 8015c16:	2200      	movs	r2, #0
 8015c18:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8015c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c1c:	3304      	adds	r3, #4
 8015c1e:	2200      	movs	r2, #0
 8015c20:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8015c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c24:	3305      	adds	r3, #5
 8015c26:	1cfa      	adds	r2, r7, #3
 8015c28:	7812      	ldrb	r2, [r2, #0]
 8015c2a:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8015c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c2e:	3306      	adds	r3, #6
 8015c30:	6a3a      	ldr	r2, [r7, #32]
 8015c32:	b2d2      	uxtb	r2, r2
 8015c34:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8015c36:	6a3b      	ldr	r3, [r7, #32]
 8015c38:	0a1a      	lsrs	r2, r3, #8
 8015c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c3c:	3307      	adds	r3, #7
 8015c3e:	b2d2      	uxtb	r2, r2
 8015c40:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8015c42:	6a3b      	ldr	r3, [r7, #32]
 8015c44:	0c1a      	lsrs	r2, r3, #16
 8015c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c48:	3308      	adds	r3, #8
 8015c4a:	b2d2      	uxtb	r2, r2
 8015c4c:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8015c4e:	6a3b      	ldr	r3, [r7, #32]
 8015c50:	0e1a      	lsrs	r2, r3, #24
 8015c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c54:	3309      	adds	r3, #9
 8015c56:	b2d2      	uxtb	r2, r2
 8015c58:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8015c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c5c:	330a      	adds	r3, #10
 8015c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c60:	b2d2      	uxtb	r2, r2
 8015c62:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8015c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c66:	0a1a      	lsrs	r2, r3, #8
 8015c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c6a:	330b      	adds	r3, #11
 8015c6c:	b2d2      	uxtb	r2, r2
 8015c6e:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8015c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c72:	0c1a      	lsrs	r2, r3, #16
 8015c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c76:	330c      	adds	r3, #12
 8015c78:	b2d2      	uxtb	r2, r2
 8015c7a:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8015c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c7e:	0e1a      	lsrs	r2, r3, #24
 8015c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c82:	330d      	adds	r3, #13
 8015c84:	b2d2      	uxtb	r2, r2
 8015c86:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8015c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c8a:	330e      	adds	r3, #14
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8015c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c92:	330f      	adds	r3, #15
 8015c94:	1dba      	adds	r2, r7, #6
 8015c96:	8812      	ldrh	r2, [r2, #0]
 8015c98:	b2d2      	uxtb	r2, r2
 8015c9a:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015c9c:	2300      	movs	r3, #0
}
 8015c9e:	0018      	movs	r0, r3
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	b004      	add	sp, #16
 8015ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8015ca6:	46c0      	nop			; (mov r8, r8)
 8015ca8:	20001080 	.word	0x20001080

08015cac <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8015cac:	b5b0      	push	{r4, r5, r7, lr}
 8015cae:	b08a      	sub	sp, #40	; 0x28
 8015cb0:	af04      	add	r7, sp, #16
 8015cb2:	6078      	str	r0, [r7, #4]
 8015cb4:	000c      	movs	r4, r1
 8015cb6:	0010      	movs	r0, r2
 8015cb8:	0019      	movs	r1, r3
 8015cba:	1cbb      	adds	r3, r7, #2
 8015cbc:	1c22      	adds	r2, r4, #0
 8015cbe:	801a      	strh	r2, [r3, #0]
 8015cc0:	1c7b      	adds	r3, r7, #1
 8015cc2:	1c02      	adds	r2, r0, #0
 8015cc4:	701a      	strb	r2, [r3, #0]
 8015cc6:	003b      	movs	r3, r7
 8015cc8:	1c0a      	adds	r2, r1, #0
 8015cca:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d002      	beq.n	8015cd8 <ComputeCmacB0+0x2c>
 8015cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d101      	bne.n	8015cdc <ComputeCmacB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015cd8:	230a      	movs	r3, #10
 8015cda:	e02a      	b.n	8015d32 <ComputeCmacB0+0x86>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015cdc:	1cbb      	adds	r3, r7, #2
 8015cde:	881a      	ldrh	r2, [r3, #0]
 8015ce0:	2380      	movs	r3, #128	; 0x80
 8015ce2:	005b      	lsls	r3, r3, #1
 8015ce4:	429a      	cmp	r2, r3
 8015ce6:	d901      	bls.n	8015cec <ComputeCmacB0+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015ce8:	230e      	movs	r3, #14
 8015cea:	e022      	b.n	8015d32 <ComputeCmacB0+0x86>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015cec:	2328      	movs	r3, #40	; 0x28
 8015cee:	18fb      	adds	r3, r7, r3
 8015cf0:	781c      	ldrb	r4, [r3, #0]
 8015cf2:	003b      	movs	r3, r7
 8015cf4:	781a      	ldrb	r2, [r3, #0]
 8015cf6:	1c7b      	adds	r3, r7, #1
 8015cf8:	7819      	ldrb	r1, [r3, #0]
 8015cfa:	1cbb      	adds	r3, r7, #2
 8015cfc:	8818      	ldrh	r0, [r3, #0]
 8015cfe:	2508      	movs	r5, #8
 8015d00:	197b      	adds	r3, r7, r5
 8015d02:	9302      	str	r3, [sp, #8]
 8015d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d06:	9301      	str	r3, [sp, #4]
 8015d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d0a:	9300      	str	r3, [sp, #0]
 8015d0c:	0023      	movs	r3, r4
 8015d0e:	f7ff ff3d 	bl	8015b8c <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8015d12:	1c7b      	adds	r3, r7, #1
 8015d14:	781c      	ldrb	r4, [r3, #0]
 8015d16:	1cbb      	adds	r3, r7, #2
 8015d18:	881a      	ldrh	r2, [r3, #0]
 8015d1a:	6879      	ldr	r1, [r7, #4]
 8015d1c:	1978      	adds	r0, r7, r5
 8015d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d20:	9300      	str	r3, [sp, #0]
 8015d22:	0023      	movs	r3, r4
 8015d24:	f7f9 fa16 	bl	800f154 <SecureElementComputeAesCmac>
 8015d28:	1e03      	subs	r3, r0, #0
 8015d2a:	d001      	beq.n	8015d30 <ComputeCmacB0+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015d2c:	230f      	movs	r3, #15
 8015d2e:	e000      	b.n	8015d32 <ComputeCmacB0+0x86>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015d30:	2300      	movs	r3, #0
}
 8015d32:	0018      	movs	r0, r3
 8015d34:	46bd      	mov	sp, r7
 8015d36:	b006      	add	sp, #24
 8015d38:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015d3c <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8015d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d3e:	b0cd      	sub	sp, #308	; 0x134
 8015d40:	af04      	add	r7, sp, #16
 8015d42:	6078      	str	r0, [r7, #4]
 8015d44:	000c      	movs	r4, r1
 8015d46:	0010      	movs	r0, r2
 8015d48:	0019      	movs	r1, r3
 8015d4a:	4b52      	ldr	r3, [pc, #328]	; (8015e94 <VerifyCmacB0+0x158>)
 8015d4c:	2290      	movs	r2, #144	; 0x90
 8015d4e:	0052      	lsls	r2, r2, #1
 8015d50:	4694      	mov	ip, r2
 8015d52:	44bc      	add	ip, r7
 8015d54:	4463      	add	r3, ip
 8015d56:	1c22      	adds	r2, r4, #0
 8015d58:	801a      	strh	r2, [r3, #0]
 8015d5a:	4b4f      	ldr	r3, [pc, #316]	; (8015e98 <VerifyCmacB0+0x15c>)
 8015d5c:	2290      	movs	r2, #144	; 0x90
 8015d5e:	0052      	lsls	r2, r2, #1
 8015d60:	4694      	mov	ip, r2
 8015d62:	44bc      	add	ip, r7
 8015d64:	4463      	add	r3, ip
 8015d66:	1c02      	adds	r2, r0, #0
 8015d68:	701a      	strb	r2, [r3, #0]
 8015d6a:	4b4c      	ldr	r3, [pc, #304]	; (8015e9c <VerifyCmacB0+0x160>)
 8015d6c:	2290      	movs	r2, #144	; 0x90
 8015d6e:	0052      	lsls	r2, r2, #1
 8015d70:	4694      	mov	ip, r2
 8015d72:	44bc      	add	ip, r7
 8015d74:	4463      	add	r3, ip
 8015d76:	1c0a      	adds	r2, r1, #0
 8015d78:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d101      	bne.n	8015d84 <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015d80:	230a      	movs	r3, #10
 8015d82:	e083      	b.n	8015e8c <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015d84:	4b43      	ldr	r3, [pc, #268]	; (8015e94 <VerifyCmacB0+0x158>)
 8015d86:	2290      	movs	r2, #144	; 0x90
 8015d88:	0052      	lsls	r2, r2, #1
 8015d8a:	4694      	mov	ip, r2
 8015d8c:	44bc      	add	ip, r7
 8015d8e:	4463      	add	r3, ip
 8015d90:	881a      	ldrh	r2, [r3, #0]
 8015d92:	2380      	movs	r3, #128	; 0x80
 8015d94:	005b      	lsls	r3, r3, #1
 8015d96:	429a      	cmp	r2, r3
 8015d98:	d901      	bls.n	8015d9e <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015d9a:	230e      	movs	r3, #14
 8015d9c:	e076      	b.n	8015e8c <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8015d9e:	2388      	movs	r3, #136	; 0x88
 8015da0:	005a      	lsls	r2, r3, #1
 8015da2:	250c      	movs	r5, #12
 8015da4:	197b      	adds	r3, r7, r5
 8015da6:	2100      	movs	r1, #0
 8015da8:	0018      	movs	r0, r3
 8015daa:	f005 fc1b 	bl	801b5e4 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015dae:	2398      	movs	r3, #152	; 0x98
 8015db0:	005b      	lsls	r3, r3, #1
 8015db2:	2208      	movs	r2, #8
 8015db4:	4694      	mov	ip, r2
 8015db6:	44bc      	add	ip, r7
 8015db8:	4463      	add	r3, ip
 8015dba:	781c      	ldrb	r4, [r3, #0]
 8015dbc:	4b37      	ldr	r3, [pc, #220]	; (8015e9c <VerifyCmacB0+0x160>)
 8015dbe:	2290      	movs	r2, #144	; 0x90
 8015dc0:	0052      	lsls	r2, r2, #1
 8015dc2:	4694      	mov	ip, r2
 8015dc4:	44bc      	add	ip, r7
 8015dc6:	4463      	add	r3, ip
 8015dc8:	781a      	ldrb	r2, [r3, #0]
 8015dca:	4b33      	ldr	r3, [pc, #204]	; (8015e98 <VerifyCmacB0+0x15c>)
 8015dcc:	2190      	movs	r1, #144	; 0x90
 8015dce:	0049      	lsls	r1, r1, #1
 8015dd0:	468c      	mov	ip, r1
 8015dd2:	44bc      	add	ip, r7
 8015dd4:	4463      	add	r3, ip
 8015dd6:	7819      	ldrb	r1, [r3, #0]
 8015dd8:	4b2e      	ldr	r3, [pc, #184]	; (8015e94 <VerifyCmacB0+0x158>)
 8015dda:	2090      	movs	r0, #144	; 0x90
 8015ddc:	0040      	lsls	r0, r0, #1
 8015dde:	4684      	mov	ip, r0
 8015de0:	44bc      	add	ip, r7
 8015de2:	4463      	add	r3, ip
 8015de4:	8818      	ldrh	r0, [r3, #0]
 8015de6:	197b      	adds	r3, r7, r5
 8015de8:	9302      	str	r3, [sp, #8]
 8015dea:	239c      	movs	r3, #156	; 0x9c
 8015dec:	005b      	lsls	r3, r3, #1
 8015dee:	2608      	movs	r6, #8
 8015df0:	46b4      	mov	ip, r6
 8015df2:	44bc      	add	ip, r7
 8015df4:	4463      	add	r3, ip
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	9301      	str	r3, [sp, #4]
 8015dfa:	239a      	movs	r3, #154	; 0x9a
 8015dfc:	005b      	lsls	r3, r3, #1
 8015dfe:	2608      	movs	r6, #8
 8015e00:	46b4      	mov	ip, r6
 8015e02:	44bc      	add	ip, r7
 8015e04:	4463      	add	r3, ip
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	9300      	str	r3, [sp, #0]
 8015e0a:	0023      	movs	r3, r4
 8015e0c:	f7ff febe 	bl	8015b8c <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8015e10:	197b      	adds	r3, r7, r5
 8015e12:	3310      	adds	r3, #16
 8015e14:	4a1f      	ldr	r2, [pc, #124]	; (8015e94 <VerifyCmacB0+0x158>)
 8015e16:	2190      	movs	r1, #144	; 0x90
 8015e18:	0049      	lsls	r1, r1, #1
 8015e1a:	468c      	mov	ip, r1
 8015e1c:	44bc      	add	ip, r7
 8015e1e:	4462      	add	r2, ip
 8015e20:	8812      	ldrh	r2, [r2, #0]
 8015e22:	6879      	ldr	r1, [r7, #4]
 8015e24:	0018      	movs	r0, r3
 8015e26:	f005 fba1 	bl	801b56c <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8015e2a:	2620      	movs	r6, #32
 8015e2c:	36ff      	adds	r6, #255	; 0xff
 8015e2e:	19bb      	adds	r3, r7, r6
 8015e30:	2206      	movs	r2, #6
 8015e32:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8015e34:	4b17      	ldr	r3, [pc, #92]	; (8015e94 <VerifyCmacB0+0x158>)
 8015e36:	2290      	movs	r2, #144	; 0x90
 8015e38:	0052      	lsls	r2, r2, #1
 8015e3a:	4694      	mov	ip, r2
 8015e3c:	44bc      	add	ip, r7
 8015e3e:	4463      	add	r3, ip
 8015e40:	881b      	ldrh	r3, [r3, #0]
 8015e42:	3310      	adds	r3, #16
 8015e44:	b299      	uxth	r1, r3
 8015e46:	19bc      	adds	r4, r7, r6
 8015e48:	4b13      	ldr	r3, [pc, #76]	; (8015e98 <VerifyCmacB0+0x15c>)
 8015e4a:	2290      	movs	r2, #144	; 0x90
 8015e4c:	0052      	lsls	r2, r2, #1
 8015e4e:	4694      	mov	ip, r2
 8015e50:	44bc      	add	ip, r7
 8015e52:	4463      	add	r3, ip
 8015e54:	781b      	ldrb	r3, [r3, #0]
 8015e56:	229e      	movs	r2, #158	; 0x9e
 8015e58:	0052      	lsls	r2, r2, #1
 8015e5a:	2008      	movs	r0, #8
 8015e5c:	4684      	mov	ip, r0
 8015e5e:	44bc      	add	ip, r7
 8015e60:	4462      	add	r2, ip
 8015e62:	6812      	ldr	r2, [r2, #0]
 8015e64:	1978      	adds	r0, r7, r5
 8015e66:	f7f9 f996 	bl	800f196 <SecureElementVerifyAesCmac>
 8015e6a:	0003      	movs	r3, r0
 8015e6c:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8015e6e:	19bb      	adds	r3, r7, r6
 8015e70:	781b      	ldrb	r3, [r3, #0]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d101      	bne.n	8015e7a <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8015e76:	2300      	movs	r3, #0
 8015e78:	e008      	b.n	8015e8c <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8015e7a:	2320      	movs	r3, #32
 8015e7c:	33ff      	adds	r3, #255	; 0xff
 8015e7e:	18fb      	adds	r3, r7, r3
 8015e80:	781b      	ldrb	r3, [r3, #0]
 8015e82:	2b01      	cmp	r3, #1
 8015e84:	d101      	bne.n	8015e8a <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8015e86:	2301      	movs	r3, #1
 8015e88:	e000      	b.n	8015e8c <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015e8a:	230f      	movs	r3, #15
}
 8015e8c:	0018      	movs	r0, r3
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	b049      	add	sp, #292	; 0x124
 8015e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e94:	fffffee2 	.word	0xfffffee2
 8015e98:	fffffee1 	.word	0xfffffee1
 8015e9c:	fffffee0 	.word	0xfffffee0

08015ea0 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8015ea0:	b580      	push	{r7, lr}
 8015ea2:	b084      	sub	sp, #16
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	0002      	movs	r2, r0
 8015ea8:	6039      	str	r1, [r7, #0]
 8015eaa:	1dfb      	adds	r3, r7, #7
 8015eac:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015eae:	230f      	movs	r3, #15
 8015eb0:	18fb      	adds	r3, r7, r3
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	701a      	strb	r2, [r3, #0]
 8015eb6:	e019      	b.n	8015eec <GetKeyAddrItem+0x4c>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8015eb8:	230f      	movs	r3, #15
 8015eba:	18fb      	adds	r3, r7, r3
 8015ebc:	781a      	ldrb	r2, [r3, #0]
 8015ebe:	4b10      	ldr	r3, [pc, #64]	; (8015f00 <GetKeyAddrItem+0x60>)
 8015ec0:	0092      	lsls	r2, r2, #2
 8015ec2:	5cd3      	ldrb	r3, [r2, r3]
 8015ec4:	1dfa      	adds	r2, r7, #7
 8015ec6:	7812      	ldrb	r2, [r2, #0]
 8015ec8:	429a      	cmp	r2, r3
 8015eca:	d109      	bne.n	8015ee0 <GetKeyAddrItem+0x40>
        {
            *item = &( KeyAddrList[i] );
 8015ecc:	230f      	movs	r3, #15
 8015ece:	18fb      	adds	r3, r7, r3
 8015ed0:	781b      	ldrb	r3, [r3, #0]
 8015ed2:	009a      	lsls	r2, r3, #2
 8015ed4:	4b0a      	ldr	r3, [pc, #40]	; (8015f00 <GetKeyAddrItem+0x60>)
 8015ed6:	18d2      	adds	r2, r2, r3
 8015ed8:	683b      	ldr	r3, [r7, #0]
 8015eda:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8015edc:	2300      	movs	r3, #0
 8015ede:	e00b      	b.n	8015ef8 <GetKeyAddrItem+0x58>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015ee0:	210f      	movs	r1, #15
 8015ee2:	187b      	adds	r3, r7, r1
 8015ee4:	781a      	ldrb	r2, [r3, #0]
 8015ee6:	187b      	adds	r3, r7, r1
 8015ee8:	3201      	adds	r2, #1
 8015eea:	701a      	strb	r2, [r3, #0]
 8015eec:	230f      	movs	r3, #15
 8015eee:	18fb      	adds	r3, r7, r3
 8015ef0:	781b      	ldrb	r3, [r3, #0]
 8015ef2:	2b04      	cmp	r3, #4
 8015ef4:	d9e0      	bls.n	8015eb8 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8015ef6:	230c      	movs	r3, #12
}
 8015ef8:	0018      	movs	r0, r3
 8015efa:	46bd      	mov	sp, r7
 8015efc:	b004      	add	sp, #16
 8015efe:	bd80      	pop	{r7, pc}
 8015f00:	20000074 	.word	0x20000074

08015f04 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 8015f04:	b590      	push	{r4, r7, lr}
 8015f06:	b089      	sub	sp, #36	; 0x24
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	60b9      	str	r1, [r7, #8]
 8015f0c:	607a      	str	r2, [r7, #4]
 8015f0e:	603b      	str	r3, [r7, #0]
 8015f10:	230f      	movs	r3, #15
 8015f12:	18fb      	adds	r3, r7, r3
 8015f14:	1c02      	adds	r2, r0, #0
 8015f16:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 8015f18:	68bb      	ldr	r3, [r7, #8]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d005      	beq.n	8015f2a <DeriveSessionKey10x+0x26>
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d002      	beq.n	8015f2a <DeriveSessionKey10x+0x26>
 8015f24:	683b      	ldr	r3, [r7, #0]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d101      	bne.n	8015f2e <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015f2a:	230a      	movs	r3, #10
 8015f2c:	e043      	b.n	8015fb6 <DeriveSessionKey10x+0xb2>
    }

    uint8_t compBase[16] = { 0 };
 8015f2e:	2310      	movs	r3, #16
 8015f30:	18fb      	adds	r3, r7, r3
 8015f32:	0018      	movs	r0, r3
 8015f34:	2310      	movs	r3, #16
 8015f36:	001a      	movs	r2, r3
 8015f38:	2100      	movs	r1, #0
 8015f3a:	f005 fb9b 	bl	801b674 <memset>

    switch( keyID )
 8015f3e:	230f      	movs	r3, #15
 8015f40:	18fb      	adds	r3, r7, r3
 8015f42:	781b      	ldrb	r3, [r3, #0]
 8015f44:	2b05      	cmp	r3, #5
 8015f46:	db0e      	blt.n	8015f66 <DeriveSessionKey10x+0x62>
 8015f48:	2b07      	cmp	r3, #7
 8015f4a:	dd02      	ble.n	8015f52 <DeriveSessionKey10x+0x4e>
 8015f4c:	2b08      	cmp	r3, #8
 8015f4e:	d005      	beq.n	8015f5c <DeriveSessionKey10x+0x58>
 8015f50:	e009      	b.n	8015f66 <DeriveSessionKey10x+0x62>
    {
        case F_NWK_S_INT_KEY:
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
            compBase[0] = 0x01;
 8015f52:	2310      	movs	r3, #16
 8015f54:	18fb      	adds	r3, r7, r3
 8015f56:	2201      	movs	r2, #1
 8015f58:	701a      	strb	r2, [r3, #0]
            break;
 8015f5a:	e006      	b.n	8015f6a <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8015f5c:	2310      	movs	r3, #16
 8015f5e:	18fb      	adds	r3, r7, r3
 8015f60:	2202      	movs	r2, #2
 8015f62:	701a      	strb	r2, [r3, #0]
            break;
 8015f64:	e001      	b.n	8015f6a <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015f66:	230b      	movs	r3, #11
 8015f68:	e025      	b.n	8015fb6 <DeriveSessionKey10x+0xb2>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 8015f6a:	2410      	movs	r4, #16
 8015f6c:	193b      	adds	r3, r7, r4
 8015f6e:	3301      	adds	r3, #1
 8015f70:	68b9      	ldr	r1, [r7, #8]
 8015f72:	2203      	movs	r2, #3
 8015f74:	0018      	movs	r0, r3
 8015f76:	f005 faf9 	bl	801b56c <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 8015f7a:	193b      	adds	r3, r7, r4
 8015f7c:	3304      	adds	r3, #4
 8015f7e:	6879      	ldr	r1, [r7, #4]
 8015f80:	2203      	movs	r2, #3
 8015f82:	0018      	movs	r0, r3
 8015f84:	f005 faf2 	bl	801b56c <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8015f88:	193b      	adds	r3, r7, r4
 8015f8a:	3307      	adds	r3, #7
 8015f8c:	6839      	ldr	r1, [r7, #0]
 8015f8e:	2202      	movs	r2, #2
 8015f90:	0018      	movs	r0, r3
 8015f92:	f005 faeb 	bl	801b56c <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015f96:	4b0a      	ldr	r3, [pc, #40]	; (8015fc0 <DeriveSessionKey10x+0xbc>)
 8015f98:	685b      	ldr	r3, [r3, #4]
 8015f9a:	220f      	movs	r2, #15
 8015f9c:	18ba      	adds	r2, r7, r2
 8015f9e:	7812      	ldrb	r2, [r2, #0]
 8015fa0:	1939      	adds	r1, r7, r4
 8015fa2:	6818      	ldr	r0, [r3, #0]
 8015fa4:	0013      	movs	r3, r2
 8015fa6:	2202      	movs	r2, #2
 8015fa8:	f7f9 f9a2 	bl	800f2f0 <SecureElementDeriveAndStoreKey>
 8015fac:	1e03      	subs	r3, r0, #0
 8015fae:	d001      	beq.n	8015fb4 <DeriveSessionKey10x+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015fb0:	230f      	movs	r3, #15
 8015fb2:	e000      	b.n	8015fb6 <DeriveSessionKey10x+0xb2>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015fb4:	2300      	movs	r3, #0
}
 8015fb6:	0018      	movs	r0, r3
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	b009      	add	sp, #36	; 0x24
 8015fbc:	bd90      	pop	{r4, r7, pc}
 8015fbe:	46c0      	nop			; (mov r8, r8)
 8015fc0:	20001080 	.word	0x20001080

08015fc4 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b082      	sub	sp, #8
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	0002      	movs	r2, r0
 8015fcc:	6039      	str	r1, [r7, #0]
 8015fce:	1dfb      	adds	r3, r7, #7
 8015fd0:	701a      	strb	r2, [r3, #0]
    if( lastDown == NULL )
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d101      	bne.n	8015fdc <GetLastFcntDown+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015fd8:	230a      	movs	r3, #10
 8015fda:	e047      	b.n	801606c <GetLastFcntDown+0xa8>
    }
    switch( fCntID )
 8015fdc:	1dfb      	adds	r3, r7, #7
 8015fde:	781b      	ldrb	r3, [r3, #0]
 8015fe0:	2b07      	cmp	r3, #7
 8015fe2:	d840      	bhi.n	8016066 <GetLastFcntDown+0xa2>
 8015fe4:	009a      	lsls	r2, r3, #2
 8015fe6:	4b23      	ldr	r3, [pc, #140]	; (8016074 <GetLastFcntDown+0xb0>)
 8015fe8:	18d3      	adds	r3, r2, r3
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8015fee:	4b22      	ldr	r3, [pc, #136]	; (8016078 <GetLastFcntDown+0xb4>)
 8015ff0:	685b      	ldr	r3, [r3, #4]
 8015ff2:	691a      	ldr	r2, [r3, #16]
 8015ff4:	683b      	ldr	r3, [r7, #0]
 8015ff6:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8015ff8:	4b1f      	ldr	r3, [pc, #124]	; (8016078 <GetLastFcntDown+0xb4>)
 8015ffa:	685a      	ldr	r2, [r3, #4]
 8015ffc:	4b1e      	ldr	r3, [pc, #120]	; (8016078 <GetLastFcntDown+0xb4>)
 8015ffe:	685b      	ldr	r3, [r3, #4]
 8016000:	3210      	adds	r2, #16
 8016002:	631a      	str	r2, [r3, #48]	; 0x30
            break;
 8016004:	e031      	b.n	801606a <GetLastFcntDown+0xa6>
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8016006:	4b1c      	ldr	r3, [pc, #112]	; (8016078 <GetLastFcntDown+0xb4>)
 8016008:	685b      	ldr	r3, [r3, #4]
 801600a:	695a      	ldr	r2, [r3, #20]
 801600c:	683b      	ldr	r3, [r7, #0]
 801600e:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8016010:	4b19      	ldr	r3, [pc, #100]	; (8016078 <GetLastFcntDown+0xb4>)
 8016012:	685a      	ldr	r2, [r3, #4]
 8016014:	4b18      	ldr	r3, [pc, #96]	; (8016078 <GetLastFcntDown+0xb4>)
 8016016:	685b      	ldr	r3, [r3, #4]
 8016018:	3214      	adds	r2, #20
 801601a:	631a      	str	r2, [r3, #48]	; 0x30
            break;
 801601c:	e025      	b.n	801606a <GetLastFcntDown+0xa6>
        case FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 801601e:	4b16      	ldr	r3, [pc, #88]	; (8016078 <GetLastFcntDown+0xb4>)
 8016020:	685b      	ldr	r3, [r3, #4]
 8016022:	699a      	ldr	r2, [r3, #24]
 8016024:	683b      	ldr	r3, [r7, #0]
 8016026:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8016028:	4b13      	ldr	r3, [pc, #76]	; (8016078 <GetLastFcntDown+0xb4>)
 801602a:	685a      	ldr	r2, [r3, #4]
 801602c:	4b12      	ldr	r3, [pc, #72]	; (8016078 <GetLastFcntDown+0xb4>)
 801602e:	685b      	ldr	r3, [r3, #4]
 8016030:	3218      	adds	r2, #24
 8016032:	631a      	str	r2, [r3, #48]	; 0x30
            break;
 8016034:	e019      	b.n	801606a <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8016036:	4b10      	ldr	r3, [pc, #64]	; (8016078 <GetLastFcntDown+0xb4>)
 8016038:	685b      	ldr	r3, [r3, #4]
 801603a:	69da      	ldr	r2, [r3, #28]
 801603c:	683b      	ldr	r3, [r7, #0]
 801603e:	601a      	str	r2, [r3, #0]
            break;
 8016040:	e013      	b.n	801606a <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_1:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 8016042:	4b0d      	ldr	r3, [pc, #52]	; (8016078 <GetLastFcntDown+0xb4>)
 8016044:	685b      	ldr	r3, [r3, #4]
 8016046:	6a1a      	ldr	r2, [r3, #32]
 8016048:	683b      	ldr	r3, [r7, #0]
 801604a:	601a      	str	r2, [r3, #0]
            break;
 801604c:	e00d      	b.n	801606a <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_2:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 801604e:	4b0a      	ldr	r3, [pc, #40]	; (8016078 <GetLastFcntDown+0xb4>)
 8016050:	685b      	ldr	r3, [r3, #4]
 8016052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016054:	683b      	ldr	r3, [r7, #0]
 8016056:	601a      	str	r2, [r3, #0]
            break;
 8016058:	e007      	b.n	801606a <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 801605a:	4b07      	ldr	r3, [pc, #28]	; (8016078 <GetLastFcntDown+0xb4>)
 801605c:	685b      	ldr	r3, [r3, #4]
 801605e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016060:	683b      	ldr	r3, [r7, #0]
 8016062:	601a      	str	r2, [r3, #0]
            break;
 8016064:	e001      	b.n	801606a <GetLastFcntDown+0xa6>
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8016066:	2305      	movs	r3, #5
 8016068:	e000      	b.n	801606c <GetLastFcntDown+0xa8>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801606a:	2300      	movs	r3, #0
}
 801606c:	0018      	movs	r0, r3
 801606e:	46bd      	mov	sp, r7
 8016070:	b002      	add	sp, #8
 8016072:	bd80      	pop	{r7, pc}
 8016074:	0801d11c 	.word	0x0801d11c
 8016078:	20001080 	.word	0x20001080

0801607c <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b084      	sub	sp, #16
 8016080:	af00      	add	r7, sp, #0
 8016082:	0002      	movs	r2, r0
 8016084:	6039      	str	r1, [r7, #0]
 8016086:	1dfb      	adds	r3, r7, #7
 8016088:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 801608a:	2300      	movs	r3, #0
 801608c:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 801608e:	230c      	movs	r3, #12
 8016090:	18fa      	adds	r2, r7, r3
 8016092:	1dfb      	adds	r3, r7, #7
 8016094:	781b      	ldrb	r3, [r3, #0]
 8016096:	0011      	movs	r1, r2
 8016098:	0018      	movs	r0, r3
 801609a:	f7ff ff93 	bl	8015fc4 <GetLastFcntDown>
 801609e:	1e03      	subs	r3, r0, #0
 80160a0:	d001      	beq.n	80160a6 <CheckFCntDown+0x2a>
    {
        return false;
 80160a2:	2300      	movs	r3, #0
 80160a4:	e009      	b.n	80160ba <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	683a      	ldr	r2, [r7, #0]
 80160aa:	429a      	cmp	r2, r3
 80160ac:	d802      	bhi.n	80160b4 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 80160ae:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80160b0:	3301      	adds	r3, #1
 80160b2:	d101      	bne.n	80160b8 <CheckFCntDown+0x3c>
    {
        return true;
 80160b4:	2301      	movs	r3, #1
 80160b6:	e000      	b.n	80160ba <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80160b8:	2300      	movs	r3, #0
    }
}
 80160ba:	0018      	movs	r0, r3
 80160bc:	46bd      	mov	sp, r7
 80160be:	b004      	add	sp, #16
 80160c0:	bd80      	pop	{r7, pc}
	...

080160c4 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b082      	sub	sp, #8
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	0002      	movs	r2, r0
 80160cc:	6039      	str	r1, [r7, #0]
 80160ce:	1dfb      	adds	r3, r7, #7
 80160d0:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 80160d2:	1dfb      	adds	r3, r7, #7
 80160d4:	781b      	ldrb	r3, [r3, #0]
 80160d6:	2b07      	cmp	r3, #7
 80160d8:	d827      	bhi.n	801612a <UpdateFCntDown+0x66>
 80160da:	009a      	lsls	r2, r3, #2
 80160dc:	4b17      	ldr	r3, [pc, #92]	; (801613c <UpdateFCntDown+0x78>)
 80160de:	18d3      	adds	r3, r2, r3
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 80160e4:	4b16      	ldr	r3, [pc, #88]	; (8016140 <UpdateFCntDown+0x7c>)
 80160e6:	685b      	ldr	r3, [r3, #4]
 80160e8:	683a      	ldr	r2, [r7, #0]
 80160ea:	611a      	str	r2, [r3, #16]
            break;
 80160ec:	e01e      	b.n	801612c <UpdateFCntDown+0x68>
        case A_FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 80160ee:	4b14      	ldr	r3, [pc, #80]	; (8016140 <UpdateFCntDown+0x7c>)
 80160f0:	685b      	ldr	r3, [r3, #4]
 80160f2:	683a      	ldr	r2, [r7, #0]
 80160f4:	615a      	str	r2, [r3, #20]
            break;
 80160f6:	e019      	b.n	801612c <UpdateFCntDown+0x68>
        case FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 80160f8:	4b11      	ldr	r3, [pc, #68]	; (8016140 <UpdateFCntDown+0x7c>)
 80160fa:	685b      	ldr	r3, [r3, #4]
 80160fc:	683a      	ldr	r2, [r7, #0]
 80160fe:	619a      	str	r2, [r3, #24]
            break;
 8016100:	e014      	b.n	801612c <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_0:
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 8016102:	4b0f      	ldr	r3, [pc, #60]	; (8016140 <UpdateFCntDown+0x7c>)
 8016104:	685b      	ldr	r3, [r3, #4]
 8016106:	683a      	ldr	r2, [r7, #0]
 8016108:	61da      	str	r2, [r3, #28]
            break;
 801610a:	e00f      	b.n	801612c <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_1:
            CryptoCtx.NvmCtx->FCntList.McFCntDown1 = currentDown;
 801610c:	4b0c      	ldr	r3, [pc, #48]	; (8016140 <UpdateFCntDown+0x7c>)
 801610e:	685b      	ldr	r3, [r3, #4]
 8016110:	683a      	ldr	r2, [r7, #0]
 8016112:	621a      	str	r2, [r3, #32]
            break;
 8016114:	e00a      	b.n	801612c <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_2:
            CryptoCtx.NvmCtx->FCntList.McFCntDown2 = currentDown;
 8016116:	4b0a      	ldr	r3, [pc, #40]	; (8016140 <UpdateFCntDown+0x7c>)
 8016118:	685b      	ldr	r3, [r3, #4]
 801611a:	683a      	ldr	r2, [r7, #0]
 801611c:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 801611e:	e005      	b.n	801612c <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 8016120:	4b07      	ldr	r3, [pc, #28]	; (8016140 <UpdateFCntDown+0x7c>)
 8016122:	685b      	ldr	r3, [r3, #4]
 8016124:	683a      	ldr	r2, [r7, #0]
 8016126:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8016128:	e000      	b.n	801612c <UpdateFCntDown+0x68>
        default:
            break;
 801612a:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 801612c:	4b04      	ldr	r3, [pc, #16]	; (8016140 <UpdateFCntDown+0x7c>)
 801612e:	689b      	ldr	r3, [r3, #8]
 8016130:	4798      	blx	r3
}
 8016132:	46c0      	nop			; (mov r8, r8)
 8016134:	46bd      	mov	sp, r7
 8016136:	b002      	add	sp, #8
 8016138:	bd80      	pop	{r7, pc}
 801613a:	46c0      	nop			; (mov r8, r8)
 801613c:	0801d13c 	.word	0x0801d13c
 8016140:	20001080 	.word	0x20001080

08016144 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8016144:	b580      	push	{r7, lr}
 8016146:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8016148:	4b19      	ldr	r3, [pc, #100]	; (80161b0 <ResetFCnts+0x6c>)
 801614a:	685b      	ldr	r3, [r3, #4]
 801614c:	2200      	movs	r2, #0
 801614e:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016150:	4b17      	ldr	r3, [pc, #92]	; (80161b0 <ResetFCnts+0x6c>)
 8016152:	685b      	ldr	r3, [r3, #4]
 8016154:	2201      	movs	r2, #1
 8016156:	4252      	negs	r2, r2
 8016158:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801615a:	4b15      	ldr	r3, [pc, #84]	; (80161b0 <ResetFCnts+0x6c>)
 801615c:	685b      	ldr	r3, [r3, #4]
 801615e:	2201      	movs	r2, #1
 8016160:	4252      	negs	r2, r2
 8016162:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8016164:	4b12      	ldr	r3, [pc, #72]	; (80161b0 <ResetFCnts+0x6c>)
 8016166:	685b      	ldr	r3, [r3, #4]
 8016168:	2201      	movs	r2, #1
 801616a:	4252      	negs	r2, r2
 801616c:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 801616e:	4b10      	ldr	r3, [pc, #64]	; (80161b0 <ResetFCnts+0x6c>)
 8016170:	685a      	ldr	r2, [r3, #4]
 8016172:	4b0f      	ldr	r3, [pc, #60]	; (80161b0 <ResetFCnts+0x6c>)
 8016174:	685b      	ldr	r3, [r3, #4]
 8016176:	3218      	adds	r2, #24
 8016178:	631a      	str	r2, [r3, #48]	; 0x30

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 801617a:	4b0d      	ldr	r3, [pc, #52]	; (80161b0 <ResetFCnts+0x6c>)
 801617c:	685b      	ldr	r3, [r3, #4]
 801617e:	2201      	movs	r2, #1
 8016180:	4252      	negs	r2, r2
 8016182:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 8016184:	4b0a      	ldr	r3, [pc, #40]	; (80161b0 <ResetFCnts+0x6c>)
 8016186:	685b      	ldr	r3, [r3, #4]
 8016188:	2201      	movs	r2, #1
 801618a:	4252      	negs	r2, r2
 801618c:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 801618e:	4b08      	ldr	r3, [pc, #32]	; (80161b0 <ResetFCnts+0x6c>)
 8016190:	685b      	ldr	r3, [r3, #4]
 8016192:	2201      	movs	r2, #1
 8016194:	4252      	negs	r2, r2
 8016196:	625a      	str	r2, [r3, #36]	; 0x24
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 8016198:	4b05      	ldr	r3, [pc, #20]	; (80161b0 <ResetFCnts+0x6c>)
 801619a:	685b      	ldr	r3, [r3, #4]
 801619c:	2201      	movs	r2, #1
 801619e:	4252      	negs	r2, r2
 80161a0:	629a      	str	r2, [r3, #40]	; 0x28

    CryptoCtx.EventCryptoNvmCtxChanged( );
 80161a2:	4b03      	ldr	r3, [pc, #12]	; (80161b0 <ResetFCnts+0x6c>)
 80161a4:	689b      	ldr	r3, [r3, #8]
 80161a6:	4798      	blx	r3
}
 80161a8:	46c0      	nop			; (mov r8, r8)
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}
 80161ae:	46c0      	nop			; (mov r8, r8)
 80161b0:	20001080 	.word	0x20001080

080161b4 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	af00      	add	r7, sp, #0
    return;
 80161b8:	46c0      	nop			; (mov r8, r8)
}
 80161ba:	46bd      	mov	sp, r7
 80161bc:	bd80      	pop	{r7, pc}
	...

080161c0 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b082      	sub	sp, #8
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	6078      	str	r0, [r7, #4]
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 80161c8:	4b15      	ldr	r3, [pc, #84]	; (8016220 <LoRaMacCryptoInit+0x60>)
 80161ca:	4a16      	ldr	r2, [pc, #88]	; (8016224 <LoRaMacCryptoInit+0x64>)
 80161cc:	605a      	str	r2, [r3, #4]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d003      	beq.n	80161dc <LoRaMacCryptoInit+0x1c>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 80161d4:	4b12      	ldr	r3, [pc, #72]	; (8016220 <LoRaMacCryptoInit+0x60>)
 80161d6:	687a      	ldr	r2, [r7, #4]
 80161d8:	609a      	str	r2, [r3, #8]
 80161da:	e002      	b.n	80161e2 <LoRaMacCryptoInit+0x22>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 80161dc:	4b10      	ldr	r3, [pc, #64]	; (8016220 <LoRaMacCryptoInit+0x60>)
 80161de:	4a12      	ldr	r2, [pc, #72]	; (8016228 <LoRaMacCryptoInit+0x68>)
 80161e0:	609a      	str	r2, [r3, #8]
    }

    // Initialize with default
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 80161e2:	4b0f      	ldr	r3, [pc, #60]	; (8016220 <LoRaMacCryptoInit+0x60>)
 80161e4:	685b      	ldr	r3, [r3, #4]
 80161e6:	2234      	movs	r2, #52	; 0x34
 80161e8:	2100      	movs	r1, #0
 80161ea:	0018      	movs	r0, r3
 80161ec:	f005 f9fa 	bl	801b5e4 <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 80161f0:	4b0b      	ldr	r3, [pc, #44]	; (8016220 <LoRaMacCryptoInit+0x60>)
 80161f2:	685b      	ldr	r3, [r3, #4]
 80161f4:	2201      	movs	r2, #1
 80161f6:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 80161f8:	4b09      	ldr	r3, [pc, #36]	; (8016220 <LoRaMacCryptoInit+0x60>)
 80161fa:	685b      	ldr	r3, [r3, #4]
 80161fc:	2201      	movs	r2, #1
 80161fe:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 1;
 8016200:	4b07      	ldr	r3, [pc, #28]	; (8016220 <LoRaMacCryptoInit+0x60>)
 8016202:	685b      	ldr	r3, [r3, #4]
 8016204:	2201      	movs	r2, #1
 8016206:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Rfu = 0;
 8016208:	4b05      	ldr	r3, [pc, #20]	; (8016220 <LoRaMacCryptoInit+0x60>)
 801620a:	685b      	ldr	r3, [r3, #4]
 801620c:	2200      	movs	r2, #0
 801620e:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8016210:	f7ff ff98 	bl	8016144 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8016214:	2300      	movs	r3, #0
}
 8016216:	0018      	movs	r0, r3
 8016218:	46bd      	mov	sp, r7
 801621a:	b002      	add	sp, #8
 801621c:	bd80      	pop	{r7, pc}
 801621e:	46c0      	nop			; (mov r8, r8)
 8016220:	20001080 	.word	0x20001080
 8016224:	2000108c 	.word	0x2000108c
 8016228:	080161b5 	.word	0x080161b5

0801622c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 801622c:	b580      	push	{r7, lr}
 801622e:	b082      	sub	sp, #8
 8016230:	af00      	add	r7, sp, #0
 8016232:	6078      	str	r0, [r7, #4]
    CryptoCtx.NvmCtx->LrWanVersion = version;
 8016234:	4b04      	ldr	r3, [pc, #16]	; (8016248 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8016236:	685b      	ldr	r3, [r3, #4]
 8016238:	687a      	ldr	r2, [r7, #4]
 801623a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801623c:	2300      	movs	r3, #0
}
 801623e:	0018      	movs	r0, r3
 8016240:	46bd      	mov	sp, r7
 8016242:	b002      	add	sp, #8
 8016244:	bd80      	pop	{r7, pc}
 8016246:	46c0      	nop			; (mov r8, r8)
 8016248:	20001080 	.word	0x20001080

0801624c <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 801624c:	b580      	push	{r7, lr}
 801624e:	b082      	sub	sp, #8
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d007      	beq.n	801626a <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 801625a:	6879      	ldr	r1, [r7, #4]
 801625c:	4b05      	ldr	r3, [pc, #20]	; (8016274 <LoRaMacCryptoRestoreNvmCtx+0x28>)
 801625e:	2234      	movs	r2, #52	; 0x34
 8016260:	0018      	movs	r0, r3
 8016262:	f005 f983 	bl	801b56c <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 8016266:	2300      	movs	r3, #0
 8016268:	e000      	b.n	801626c <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801626a:	230a      	movs	r3, #10
    }
}
 801626c:	0018      	movs	r0, r3
 801626e:	46bd      	mov	sp, r7
 8016270:	b002      	add	sp, #8
 8016272:	bd80      	pop	{r7, pc}
 8016274:	2000108c 	.word	0x2000108c

08016278 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b082      	sub	sp, #8
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	2234      	movs	r2, #52	; 0x34
 8016284:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 8016286:	4b02      	ldr	r3, [pc, #8]	; (8016290 <LoRaMacCryptoGetNvmCtx+0x18>)
}
 8016288:	0018      	movs	r0, r3
 801628a:	46bd      	mov	sp, r7
 801628c:	b002      	add	sp, #8
 801628e:	bd80      	pop	{r7, pc}
 8016290:	2000108c 	.word	0x2000108c

08016294 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b082      	sub	sp, #8
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d101      	bne.n	80162a6 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80162a2:	230a      	movs	r3, #10
 80162a4:	e006      	b.n	80162b4 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 80162a6:	4b05      	ldr	r3, [pc, #20]	; (80162bc <LoRaMacCryptoGetFCntUp+0x28>)
 80162a8:	685b      	ldr	r3, [r3, #4]
 80162aa:	68db      	ldr	r3, [r3, #12]
 80162ac:	1c5a      	adds	r2, r3, #1
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80162b2:	2300      	movs	r3, #0
}
 80162b4:	0018      	movs	r0, r3
 80162b6:	46bd      	mov	sp, r7
 80162b8:	b002      	add	sp, #8
 80162ba:	bd80      	pop	{r7, pc}
 80162bc:	20001080 	.word	0x20001080

080162c0 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 80162c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162c2:	b08d      	sub	sp, #52	; 0x34
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	61ba      	str	r2, [r7, #24]
 80162c8:	617b      	str	r3, [r7, #20]
 80162ca:	230f      	movs	r3, #15
 80162cc:	2210      	movs	r2, #16
 80162ce:	4694      	mov	ip, r2
 80162d0:	44bc      	add	ip, r7
 80162d2:	4463      	add	r3, ip
 80162d4:	1c02      	adds	r2, r0, #0
 80162d6:	701a      	strb	r2, [r3, #0]
 80162d8:	230c      	movs	r3, #12
 80162da:	2210      	movs	r2, #16
 80162dc:	4694      	mov	ip, r2
 80162de:	44bc      	add	ip, r7
 80162e0:	4463      	add	r3, ip
 80162e2:	1c0a      	adds	r2, r1, #0
 80162e4:	801a      	strh	r2, [r3, #0]
    uint32_t lastDown = 0;
 80162e6:	2300      	movs	r3, #0
 80162e8:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t fCntDiff = 0;
 80162ea:	2300      	movs	r3, #0
 80162ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80162ee:	231b      	movs	r3, #27
 80162f0:	2210      	movs	r2, #16
 80162f2:	4694      	mov	ip, r2
 80162f4:	44bc      	add	ip, r7
 80162f6:	4463      	add	r3, ip
 80162f8:	2213      	movs	r2, #19
 80162fa:	701a      	strb	r2, [r3, #0]

    if( currentDown == NULL )
 80162fc:	697b      	ldr	r3, [r7, #20]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d101      	bne.n	8016306 <LoRaMacCryptoGetFCntDown+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016302:	230a      	movs	r3, #10
 8016304:	e06f      	b.n	80163e6 <LoRaMacCryptoGetFCntDown+0x126>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016306:	231b      	movs	r3, #27
 8016308:	2010      	movs	r0, #16
 801630a:	183a      	adds	r2, r7, r0
 801630c:	18d4      	adds	r4, r2, r3
 801630e:	2214      	movs	r2, #20
 8016310:	2310      	movs	r3, #16
 8016312:	469c      	mov	ip, r3
 8016314:	44bc      	add	ip, r7
 8016316:	4462      	add	r2, ip
 8016318:	210f      	movs	r1, #15
 801631a:	183b      	adds	r3, r7, r0
 801631c:	185b      	adds	r3, r3, r1
 801631e:	781b      	ldrb	r3, [r3, #0]
 8016320:	0011      	movs	r1, r2
 8016322:	0018      	movs	r0, r3
 8016324:	f7ff fe4e 	bl	8015fc4 <GetLastFcntDown>
 8016328:	0003      	movs	r3, r0
 801632a:	7023      	strb	r3, [r4, #0]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801632c:	231b      	movs	r3, #27
 801632e:	2210      	movs	r2, #16
 8016330:	4694      	mov	ip, r2
 8016332:	44bc      	add	ip, r7
 8016334:	4463      	add	r3, ip
 8016336:	781b      	ldrb	r3, [r3, #0]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d006      	beq.n	801634a <LoRaMacCryptoGetFCntDown+0x8a>
    {
        return cryptoStatus;
 801633c:	231b      	movs	r3, #27
 801633e:	2210      	movs	r2, #16
 8016340:	4694      	mov	ip, r2
 8016342:	44bc      	add	ip, r7
 8016344:	4463      	add	r3, ip
 8016346:	781b      	ldrb	r3, [r3, #0]
 8016348:	e04d      	b.n	80163e6 <LoRaMacCryptoGetFCntDown+0x126>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 801634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801634c:	3301      	adds	r3, #1
 801634e:	d103      	bne.n	8016358 <LoRaMacCryptoGetFCntDown+0x98>
    {
         *currentDown = frameFcnt;
 8016350:	697b      	ldr	r3, [r7, #20]
 8016352:	69ba      	ldr	r2, [r7, #24]
 8016354:	601a      	str	r2, [r3, #0]
 8016356:	e020      	b.n	801639a <LoRaMacCryptoGetFCntDown+0xda>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801635a:	041b      	lsls	r3, r3, #16
 801635c:	0c1b      	lsrs	r3, r3, #16
 801635e:	69ba      	ldr	r2, [r7, #24]
 8016360:	1ad3      	subs	r3, r2, r3
 8016362:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( fCntDiff > 0 )
 8016364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016366:	2b00      	cmp	r3, #0
 8016368:	dd05      	ble.n	8016376 <LoRaMacCryptoGetFCntDown+0xb6>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 801636a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801636c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801636e:	18d2      	adds	r2, r2, r3
 8016370:	697b      	ldr	r3, [r7, #20]
 8016372:	601a      	str	r2, [r3, #0]
 8016374:	e011      	b.n	801639a <LoRaMacCryptoGetFCntDown+0xda>
        }
        else if( fCntDiff == 0 )
 8016376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016378:	2b00      	cmp	r3, #0
 801637a:	d104      	bne.n	8016386 <LoRaMacCryptoGetFCntDown+0xc6>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801637c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801637e:	697b      	ldr	r3, [r7, #20]
 8016380:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8016382:	2307      	movs	r3, #7
 8016384:	e02f      	b.n	80163e6 <LoRaMacCryptoGetFCntDown+0x126>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8016386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016388:	0c1b      	lsrs	r3, r3, #16
 801638a:	041a      	lsls	r2, r3, #16
 801638c:	69bb      	ldr	r3, [r7, #24]
 801638e:	18d3      	adds	r3, r2, r3
 8016390:	2280      	movs	r2, #128	; 0x80
 8016392:	0252      	lsls	r2, r2, #9
 8016394:	189a      	adds	r2, r3, r2
 8016396:	697b      	ldr	r3, [r7, #20]
 8016398:	601a      	str	r2, [r3, #0]
        }
    }


    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 801639a:	4b15      	ldr	r3, [pc, #84]	; (80163f0 <LoRaMacCryptoGetFCntDown+0x130>)
 801639c:	685b      	ldr	r3, [r3, #4]
 801639e:	789b      	ldrb	r3, [r3, #2]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d11f      	bne.n	80163e4 <LoRaMacCryptoGetFCntDown+0x124>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 80163a4:	697b      	ldr	r3, [r7, #20]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	60bb      	str	r3, [r7, #8]
 80163aa:	2300      	movs	r3, #0
 80163ac:	60fb      	str	r3, [r7, #12]
 80163ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163b0:	603b      	str	r3, [r7, #0]
 80163b2:	2300      	movs	r3, #0
 80163b4:	607b      	str	r3, [r7, #4]
 80163b6:	68bb      	ldr	r3, [r7, #8]
 80163b8:	68fc      	ldr	r4, [r7, #12]
 80163ba:	6839      	ldr	r1, [r7, #0]
 80163bc:	687a      	ldr	r2, [r7, #4]
 80163be:	1a5b      	subs	r3, r3, r1
 80163c0:	4194      	sbcs	r4, r2
 80163c2:	220c      	movs	r2, #12
 80163c4:	2110      	movs	r1, #16
 80163c6:	468c      	mov	ip, r1
 80163c8:	44bc      	add	ip, r7
 80163ca:	4462      	add	r2, ip
 80163cc:	8812      	ldrh	r2, [r2, #0]
 80163ce:	b292      	uxth	r2, r2
 80163d0:	0015      	movs	r5, r2
 80163d2:	2200      	movs	r2, #0
 80163d4:	0016      	movs	r6, r2
 80163d6:	42a6      	cmp	r6, r4
 80163d8:	dc04      	bgt.n	80163e4 <LoRaMacCryptoGetFCntDown+0x124>
 80163da:	d101      	bne.n	80163e0 <LoRaMacCryptoGetFCntDown+0x120>
 80163dc:	429d      	cmp	r5, r3
 80163de:	d801      	bhi.n	80163e4 <LoRaMacCryptoGetFCntDown+0x124>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 80163e0:	2308      	movs	r3, #8
 80163e2:	e000      	b.n	80163e6 <LoRaMacCryptoGetFCntDown+0x126>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80163e4:	2300      	movs	r3, #0
}
 80163e6:	0018      	movs	r0, r3
 80163e8:	46bd      	mov	sp, r7
 80163ea:	b00d      	add	sp, #52	; 0x34
 80163ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163ee:	46c0      	nop			; (mov r8, r8)
 80163f0:	20001080 	.word	0x20001080

080163f4 <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b082      	sub	sp, #8
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d101      	bne.n	8016406 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016402:	230a      	movs	r3, #10
 8016404:	e018      	b.n	8016438 <LoRaMacCryptoSetMulticastReference+0x44>
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8016406:	4b0e      	ldr	r3, [pc, #56]	; (8016440 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8016408:	685b      	ldr	r3, [r3, #4]
 801640a:	331c      	adds	r3, #28
 801640c:	001a      	movs	r2, r3
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	61da      	str	r2, [r3, #28]
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 8016412:	4b0b      	ldr	r3, [pc, #44]	; (8016440 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8016414:	685a      	ldr	r2, [r3, #4]
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	3328      	adds	r3, #40	; 0x28
 801641a:	3220      	adds	r2, #32
 801641c:	61da      	str	r2, [r3, #28]
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 801641e:	4b08      	ldr	r3, [pc, #32]	; (8016440 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8016420:	685a      	ldr	r2, [r3, #4]
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	3350      	adds	r3, #80	; 0x50
 8016426:	3224      	adds	r2, #36	; 0x24
 8016428:	61da      	str	r2, [r3, #28]
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 801642a:	4b05      	ldr	r3, [pc, #20]	; (8016440 <LoRaMacCryptoSetMulticastReference+0x4c>)
 801642c:	685a      	ldr	r2, [r3, #4]
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	3378      	adds	r3, #120	; 0x78
 8016432:	3228      	adds	r2, #40	; 0x28
 8016434:	61da      	str	r2, [r3, #28]

    return LORAMAC_CRYPTO_SUCCESS;
 8016436:	2300      	movs	r3, #0
}
 8016438:	0018      	movs	r0, r3
 801643a:	46bd      	mov	sp, r7
 801643c:	b002      	add	sp, #8
 801643e:	bd80      	pop	{r7, pc}
 8016440:	20001080 	.word	0x20001080

08016444 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b082      	sub	sp, #8
 8016448:	af00      	add	r7, sp, #0
 801644a:	0002      	movs	r2, r0
 801644c:	6039      	str	r1, [r7, #0]
 801644e:	1dfb      	adds	r3, r7, #7
 8016450:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016452:	683a      	ldr	r2, [r7, #0]
 8016454:	1dfb      	adds	r3, r7, #7
 8016456:	781b      	ldrb	r3, [r3, #0]
 8016458:	0011      	movs	r1, r2
 801645a:	0018      	movs	r0, r3
 801645c:	f7f8 fdf2 	bl	800f044 <SecureElementSetKey>
 8016460:	1e03      	subs	r3, r0, #0
 8016462:	d001      	beq.n	8016468 <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016464:	230f      	movs	r3, #15
 8016466:	e018      	b.n	801649a <LoRaMacCryptoSetKey+0x56>
    }
    if( ( keyID == GEN_APP_KEY ) || ( keyID == APP_KEY ) )
 8016468:	1dfb      	adds	r3, r7, #7
 801646a:	781b      	ldrb	r3, [r3, #0]
 801646c:	2b01      	cmp	r3, #1
 801646e:	d003      	beq.n	8016478 <LoRaMacCryptoSetKey+0x34>
 8016470:	1dfb      	adds	r3, r7, #7
 8016472:	781b      	ldrb	r3, [r3, #0]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d10f      	bne.n	8016498 <LoRaMacCryptoSetKey+0x54>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8016478:	1dfb      	adds	r3, r7, #7
 801647a:	781b      	ldrb	r3, [r3, #0]
 801647c:	0018      	movs	r0, r3
 801647e:	f000 fbb3 	bl	8016be8 <LoRaMacCryptoDeriveMcRootKey>
 8016482:	1e03      	subs	r3, r0, #0
 8016484:	d001      	beq.n	801648a <LoRaMacCryptoSetKey+0x46>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016486:	230f      	movs	r3, #15
 8016488:	e007      	b.n	801649a <LoRaMacCryptoSetKey+0x56>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801648a:	2009      	movs	r0, #9
 801648c:	f000 fbec 	bl	8016c68 <LoRaMacCryptoDeriveMcKEKey>
 8016490:	1e03      	subs	r3, r0, #0
 8016492:	d001      	beq.n	8016498 <LoRaMacCryptoSetKey+0x54>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016494:	230f      	movs	r3, #15
 8016496:	e000      	b.n	801649a <LoRaMacCryptoSetKey+0x56>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016498:	2300      	movs	r3, #0
}
 801649a:	0018      	movs	r0, r3
 801649c:	46bd      	mov	sp, r7
 801649e:	b002      	add	sp, #8
 80164a0:	bd80      	pop	{r7, pc}
	...

080164a4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b086      	sub	sp, #24
 80164a8:	af02      	add	r7, sp, #8
 80164aa:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d101      	bne.n	80164b6 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80164b2:	230a      	movs	r3, #10
 80164b4:	e039      	b.n	801652a <LoRaMacCryptoPrepareJoinRequest+0x86>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80164b6:	230f      	movs	r3, #15
 80164b8:	18fb      	adds	r3, r7, r3
 80164ba:	2202      	movs	r2, #2
 80164bc:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80164be:	2300      	movs	r3, #0
 80164c0:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 80164c2:	2308      	movs	r3, #8
 80164c4:	18fb      	adds	r3, r7, r3
 80164c6:	0018      	movs	r0, r3
 80164c8:	f7f8 ff70 	bl	800f3ac <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 80164cc:	68ba      	ldr	r2, [r7, #8]
 80164ce:	4b19      	ldr	r3, [pc, #100]	; (8016534 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 80164d0:	685b      	ldr	r3, [r3, #4]
 80164d2:	b292      	uxth	r2, r2
 80164d4:	809a      	strh	r2, [r3, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80164d6:	4b17      	ldr	r3, [pc, #92]	; (8016534 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 80164d8:	689b      	ldr	r3, [r3, #8]
 80164da:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 80164dc:	4b15      	ldr	r3, [pc, #84]	; (8016534 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 80164de:	685b      	ldr	r3, [r3, #4]
 80164e0:	889a      	ldrh	r2, [r3, #4]
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	0018      	movs	r0, r3
 80164ea:	f000 fde8 	bl	80170be <LoRaMacSerializerJoinRequest>
 80164ee:	1e03      	subs	r3, r0, #0
 80164f0:	d001      	beq.n	80164f6 <LoRaMacCryptoPrepareJoinRequest+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80164f2:	2311      	movs	r3, #17
 80164f4:	e019      	b.n	801652a <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	6819      	ldr	r1, [r3, #0]
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	3318      	adds	r3, #24
 80164fe:	220f      	movs	r2, #15
 8016500:	18ba      	adds	r2, r7, r2
 8016502:	7812      	ldrb	r2, [r2, #0]
 8016504:	9300      	str	r3, [sp, #0]
 8016506:	0013      	movs	r3, r2
 8016508:	2213      	movs	r2, #19
 801650a:	2000      	movs	r0, #0
 801650c:	f7f8 fe22 	bl	800f154 <SecureElementComputeAesCmac>
 8016510:	1e03      	subs	r3, r0, #0
 8016512:	d001      	beq.n	8016518 <LoRaMacCryptoPrepareJoinRequest+0x74>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016514:	230f      	movs	r3, #15
 8016516:	e008      	b.n	801652a <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	0018      	movs	r0, r3
 801651c:	f000 fdcf 	bl	80170be <LoRaMacSerializerJoinRequest>
 8016520:	1e03      	subs	r3, r0, #0
 8016522:	d001      	beq.n	8016528 <LoRaMacCryptoPrepareJoinRequest+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016524:	2311      	movs	r3, #17
 8016526:	e000      	b.n	801652a <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016528:	2300      	movs	r3, #0
}
 801652a:	0018      	movs	r0, r3
 801652c:	46bd      	mov	sp, r7
 801652e:	b004      	add	sp, #16
 8016530:	bd80      	pop	{r7, pc}
 8016532:	46c0      	nop			; (mov r8, r8)
 8016534:	20001080 	.word	0x20001080

08016538 <LoRaMacCryptoHandleJoinAccept>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016538:	b5b0      	push	{r4, r5, r7, lr}
 801653a:	b0ca      	sub	sp, #296	; 0x128
 801653c:	af00      	add	r7, sp, #0
 801653e:	60b9      	str	r1, [r7, #8]
 8016540:	607a      	str	r2, [r7, #4]
 8016542:	4bdb      	ldr	r3, [pc, #876]	; (80168b0 <LoRaMacCryptoHandleJoinAccept+0x378>)
 8016544:	2294      	movs	r2, #148	; 0x94
 8016546:	0052      	lsls	r2, r2, #1
 8016548:	4694      	mov	ip, r2
 801654a:	44bc      	add	ip, r7
 801654c:	4463      	add	r3, ip
 801654e:	1c02      	adds	r2, r0, #0
 8016550:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d002      	beq.n	801655e <LoRaMacCryptoHandleJoinAccept+0x26>
 8016558:	68bb      	ldr	r3, [r7, #8]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d101      	bne.n	8016562 <LoRaMacCryptoHandleJoinAccept+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801655e:	230a      	movs	r3, #10
 8016560:	e1df      	b.n	8016922 <LoRaMacCryptoHandleJoinAccept+0x3ea>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016562:	2392      	movs	r3, #146	; 0x92
 8016564:	005b      	lsls	r3, r3, #1
 8016566:	18fb      	adds	r3, r7, r3
 8016568:	2213      	movs	r2, #19
 801656a:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID;
    KeyIdentifier_t encryptionKeyID;
    uint8_t micComputationOffset = 0;
 801656c:	2326      	movs	r3, #38	; 0x26
 801656e:	33ff      	adds	r3, #255	; 0xff
 8016570:	18fb      	adds	r3, r7, r3
 8016572:	2200      	movs	r2, #0
 8016574:	701a      	strb	r2, [r3, #0]
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
#endif

    // Determine decryption key and DevNonce for key derivation
    if( joinReqType == JOIN_REQ )
 8016576:	4bce      	ldr	r3, [pc, #824]	; (80168b0 <LoRaMacCryptoHandleJoinAccept+0x378>)
 8016578:	2294      	movs	r2, #148	; 0x94
 801657a:	0052      	lsls	r2, r2, #1
 801657c:	4694      	mov	ip, r2
 801657e:	44bc      	add	ip, r7
 8016580:	4463      	add	r3, ip
 8016582:	781b      	ldrb	r3, [r3, #0]
 8016584:	2bff      	cmp	r3, #255	; 0xff
 8016586:	d109      	bne.n	801659c <LoRaMacCryptoHandleJoinAccept+0x64>
    {
        encryptionKeyID = NWK_KEY;
 8016588:	2393      	movs	r3, #147	; 0x93
 801658a:	005b      	lsls	r3, r3, #1
 801658c:	18fb      	adds	r3, r7, r3
 801658e:	2202      	movs	r2, #2
 8016590:	701a      	strb	r2, [r3, #0]
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 8016592:	2326      	movs	r3, #38	; 0x26
 8016594:	33ff      	adds	r3, #255	; 0xff
 8016596:	18fb      	adds	r3, r7, r3
 8016598:	220c      	movs	r2, #12
 801659a:	701a      	strb	r2, [r3, #0]
        }
    }
#endif
    // Decrypt header, skip MHDR
    uint8_t procBuffer[CRYPTO_MAXMESSAGE_SIZE + CRYPTO_MIC_COMPUTATION_OFFSET];
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	791b      	ldrb	r3, [r3, #4]
 80165a0:	b29a      	uxth	r2, r3
 80165a2:	2426      	movs	r4, #38	; 0x26
 80165a4:	34ff      	adds	r4, #255	; 0xff
 80165a6:	193b      	adds	r3, r7, r4
 80165a8:	781b      	ldrb	r3, [r3, #0]
 80165aa:	b29b      	uxth	r3, r3
 80165ac:	18d3      	adds	r3, r2, r3
 80165ae:	b29a      	uxth	r2, r3
 80165b0:	2510      	movs	r5, #16
 80165b2:	197b      	adds	r3, r7, r5
 80165b4:	2100      	movs	r1, #0
 80165b6:	0018      	movs	r0, r3
 80165b8:	f005 f814 	bl	801b5e4 <memset1>

    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	1c58      	adds	r0, r3, #1
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	791b      	ldrb	r3, [r3, #4]
 80165c6:	b29b      	uxth	r3, r3
 80165c8:	3b01      	subs	r3, #1
 80165ca:	b299      	uxth	r1, r3
 80165cc:	193b      	adds	r3, r7, r4
 80165ce:	781b      	ldrb	r3, [r3, #0]
 80165d0:	197a      	adds	r2, r7, r5
 80165d2:	18d4      	adds	r4, r2, r3
 80165d4:	2393      	movs	r3, #147	; 0x93
 80165d6:	005b      	lsls	r3, r3, #1
 80165d8:	18fb      	adds	r3, r7, r3
 80165da:	781a      	ldrb	r2, [r3, #0]
 80165dc:	0023      	movs	r3, r4
 80165de:	f7f8 fe1d 	bl	800f21c <SecureElementAesEncrypt>
 80165e2:	1e03      	subs	r3, r0, #0
 80165e4:	d001      	beq.n	80165ea <LoRaMacCryptoHandleJoinAccept+0xb2>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80165e6:	230f      	movs	r3, #15
 80165e8:	e19b      	b.n	8016922 <LoRaMacCryptoHandleJoinAccept+0x3ea>
    }
    // Copy the result to an offset location to keep space for additional information which have to be added in case of 1.1 and later
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	1c58      	adds	r0, r3, #1
 80165f0:	2326      	movs	r3, #38	; 0x26
 80165f2:	33ff      	adds	r3, #255	; 0xff
 80165f4:	18fb      	adds	r3, r7, r3
 80165f6:	781b      	ldrb	r3, [r3, #0]
 80165f8:	2210      	movs	r2, #16
 80165fa:	18ba      	adds	r2, r7, r2
 80165fc:	18d1      	adds	r1, r2, r3
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	791b      	ldrb	r3, [r3, #4]
 8016602:	b29b      	uxth	r3, r3
 8016604:	3b01      	subs	r3, #1
 8016606:	b29b      	uxth	r3, r3
 8016608:	001a      	movs	r2, r3
 801660a:	f004 ffaf 	bl	801b56c <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	0018      	movs	r0, r3
 8016612:	f000 fb51 	bl	8016cb8 <LoRaMacParserJoinAccept>
 8016616:	1e03      	subs	r3, r0, #0
 8016618:	d001      	beq.n	801661e <LoRaMacCryptoHandleJoinAccept+0xe6>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801661a:	2310      	movs	r3, #16
 801661c:	e181      	b.n	8016922 <LoRaMacCryptoHandleJoinAccept+0x3ea>
    }

    // Is it a LoRaWAN 1.1.0 or later ?
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	7c1b      	ldrb	r3, [r3, #16]
 8016622:	227f      	movs	r2, #127	; 0x7f
 8016624:	4393      	bics	r3, r2
 8016626:	b2db      	uxtb	r3, r3
 8016628:	2b00      	cmp	r3, #0
 801662a:	d009      	beq.n	8016640 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 801662c:	4ba1      	ldr	r3, [pc, #644]	; (80168b4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 801662e:	685b      	ldr	r3, [r3, #4]
 8016630:	2201      	movs	r2, #1
 8016632:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 8016634:	2328      	movs	r3, #40	; 0x28
 8016636:	33ff      	adds	r3, #255	; 0xff
 8016638:	18fb      	adds	r3, r7, r3
 801663a:	2203      	movs	r2, #3
 801663c:	701a      	strb	r2, [r3, #0]
 801663e:	e008      	b.n	8016652 <LoRaMacCryptoHandleJoinAccept+0x11a>
    }
    else
    {
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 0;
 8016640:	4b9c      	ldr	r3, [pc, #624]	; (80168b4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8016642:	685b      	ldr	r3, [r3, #4]
 8016644:	2200      	movs	r2, #0
 8016646:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = NWK_KEY;
 8016648:	2328      	movs	r3, #40	; 0x28
 801664a:	33ff      	adds	r3, #255	; 0xff
 801664c:	18fb      	adds	r3, r7, r3
 801664e:	2202      	movs	r2, #2
 8016650:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8016652:	4b98      	ldr	r3, [pc, #608]	; (80168b4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8016654:	685b      	ldr	r3, [r3, #4]
 8016656:	789b      	ldrb	r3, [r3, #2]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d113      	bne.n	8016684 <LoRaMacCryptoHandleJoinAccept+0x14c>
    {
        // For legacy mode :
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)
        if( SecureElementVerifyAesCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	6818      	ldr	r0, [r3, #0]
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	791b      	ldrb	r3, [r3, #4]
 8016664:	b29b      	uxth	r3, r3
 8016666:	3b04      	subs	r3, #4
 8016668:	b299      	uxth	r1, r3
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801666e:	2328      	movs	r3, #40	; 0x28
 8016670:	33ff      	adds	r3, #255	; 0xff
 8016672:	18fb      	adds	r3, r7, r3
 8016674:	781b      	ldrb	r3, [r3, #0]
 8016676:	f7f8 fd8e 	bl	800f196 <SecureElementVerifyAesCmac>
 801667a:	1e03      	subs	r3, r0, #0
 801667c:	d100      	bne.n	8016680 <LoRaMacCryptoHandleJoinAccept+0x148>
 801667e:	e0a9      	b.n	80167d4 <LoRaMacCryptoHandleJoinAccept+0x29c>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016680:	230f      	movs	r3, #15
 8016682:	e14e      	b.n	8016922 <LoRaMacCryptoHandleJoinAccept+0x3ea>
    {
        // For 1.1 and later:
        //   cmac = aes128_cmac(JSIntKey, JoinReqType | JoinEUI | DevNonce | MHDR | JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)

        // Prepare the msg for integrity check (adding JoinReqType, JoinEUI and DevNonce)
        uint16_t bufItr = 0;
 8016684:	2091      	movs	r0, #145	; 0x91
 8016686:	0040      	lsls	r0, r0, #1
 8016688:	183b      	adds	r3, r7, r0
 801668a:	2200      	movs	r2, #0
 801668c:	801a      	strh	r2, [r3, #0]
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 801668e:	183b      	adds	r3, r7, r0
 8016690:	881b      	ldrh	r3, [r3, #0]
 8016692:	183a      	adds	r2, r7, r0
 8016694:	1c59      	adds	r1, r3, #1
 8016696:	8011      	strh	r1, [r2, #0]
 8016698:	0019      	movs	r1, r3
 801669a:	4b87      	ldr	r3, [pc, #540]	; (80168b8 <LoRaMacCryptoHandleJoinAccept+0x380>)
 801669c:	2294      	movs	r2, #148	; 0x94
 801669e:	0052      	lsls	r2, r2, #1
 80166a0:	4694      	mov	ip, r2
 80166a2:	44bc      	add	ip, r7
 80166a4:	4463      	add	r3, ip
 80166a6:	4a82      	ldr	r2, [pc, #520]	; (80168b0 <LoRaMacCryptoHandleJoinAccept+0x378>)
 80166a8:	2494      	movs	r4, #148	; 0x94
 80166aa:	0064      	lsls	r4, r4, #1
 80166ac:	46a4      	mov	ip, r4
 80166ae:	44bc      	add	ip, r7
 80166b0:	4462      	add	r2, ip
 80166b2:	7812      	ldrb	r2, [r2, #0]
 80166b4:	545a      	strb	r2, [r3, r1]

        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80166b6:	0004      	movs	r4, r0
 80166b8:	183b      	adds	r3, r7, r0
 80166ba:	881b      	ldrh	r3, [r3, #0]
 80166bc:	2510      	movs	r5, #16
 80166be:	197a      	adds	r2, r7, r5
 80166c0:	18d3      	adds	r3, r2, r3
 80166c2:	68b9      	ldr	r1, [r7, #8]
 80166c4:	2208      	movs	r2, #8
 80166c6:	0018      	movs	r0, r3
 80166c8:	f004 ff6b 	bl	801b5a2 <memcpyr>
        bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80166cc:	0020      	movs	r0, r4
 80166ce:	183b      	adds	r3, r7, r0
 80166d0:	183a      	adds	r2, r7, r0
 80166d2:	8812      	ldrh	r2, [r2, #0]
 80166d4:	3208      	adds	r2, #8
 80166d6:	801a      	strh	r2, [r3, #0]

        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 80166d8:	4b76      	ldr	r3, [pc, #472]	; (80168b4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 80166da:	685b      	ldr	r3, [r3, #4]
 80166dc:	8899      	ldrh	r1, [r3, #4]
 80166de:	183b      	adds	r3, r7, r0
 80166e0:	881b      	ldrh	r3, [r3, #0]
 80166e2:	0004      	movs	r4, r0
 80166e4:	183a      	adds	r2, r7, r0
 80166e6:	1c58      	adds	r0, r3, #1
 80166e8:	8010      	strh	r0, [r2, #0]
 80166ea:	001a      	movs	r2, r3
 80166ec:	b2c9      	uxtb	r1, r1
 80166ee:	4b72      	ldr	r3, [pc, #456]	; (80168b8 <LoRaMacCryptoHandleJoinAccept+0x380>)
 80166f0:	2094      	movs	r0, #148	; 0x94
 80166f2:	0040      	lsls	r0, r0, #1
 80166f4:	4684      	mov	ip, r0
 80166f6:	44bc      	add	ip, r7
 80166f8:	4463      	add	r3, ip
 80166fa:	5499      	strb	r1, [r3, r2]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 80166fc:	4b6d      	ldr	r3, [pc, #436]	; (80168b4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 80166fe:	685b      	ldr	r3, [r3, #4]
 8016700:	889b      	ldrh	r3, [r3, #4]
 8016702:	0a1b      	lsrs	r3, r3, #8
 8016704:	b299      	uxth	r1, r3
 8016706:	193b      	adds	r3, r7, r4
 8016708:	881b      	ldrh	r3, [r3, #0]
 801670a:	193a      	adds	r2, r7, r4
 801670c:	1c58      	adds	r0, r3, #1
 801670e:	8010      	strh	r0, [r2, #0]
 8016710:	001a      	movs	r2, r3
 8016712:	b2c9      	uxtb	r1, r1
 8016714:	4b68      	ldr	r3, [pc, #416]	; (80168b8 <LoRaMacCryptoHandleJoinAccept+0x380>)
 8016716:	2094      	movs	r0, #148	; 0x94
 8016718:	0040      	lsls	r0, r0, #1
 801671a:	4684      	mov	ip, r0
 801671c:	44bc      	add	ip, r7
 801671e:	4463      	add	r3, ip
 8016720:	5499      	strb	r1, [r3, r2]

        procBuffer[bufItr++] = macMsg->MHDR.Value;
 8016722:	193b      	adds	r3, r7, r4
 8016724:	881b      	ldrh	r3, [r3, #0]
 8016726:	193a      	adds	r2, r7, r4
 8016728:	1c59      	adds	r1, r3, #1
 801672a:	8011      	strh	r1, [r2, #0]
 801672c:	001a      	movs	r2, r3
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	7959      	ldrb	r1, [r3, #5]
 8016732:	4b61      	ldr	r3, [pc, #388]	; (80168b8 <LoRaMacCryptoHandleJoinAccept+0x380>)
 8016734:	2094      	movs	r0, #148	; 0x94
 8016736:	0040      	lsls	r0, r0, #1
 8016738:	4684      	mov	ip, r0
 801673a:	44bc      	add	ip, r7
 801673c:	4463      	add	r3, ip
 801673e:	5499      	strb	r1, [r3, r2]

        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	791b      	ldrb	r3, [r3, #4]
 8016744:	b29a      	uxth	r2, r3
 8016746:	2326      	movs	r3, #38	; 0x26
 8016748:	33ff      	adds	r3, #255	; 0xff
 801674a:	18fb      	adds	r3, r7, r3
 801674c:	781b      	ldrb	r3, [r3, #0]
 801674e:	b29b      	uxth	r3, r3
 8016750:	18d3      	adds	r3, r2, r3
 8016752:	b29b      	uxth	r3, r3
 8016754:	3b05      	subs	r3, #5
 8016756:	b299      	uxth	r1, r3
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801675c:	2328      	movs	r3, #40	; 0x28
 801675e:	33ff      	adds	r3, #255	; 0xff
 8016760:	18fb      	adds	r3, r7, r3
 8016762:	781b      	ldrb	r3, [r3, #0]
 8016764:	1978      	adds	r0, r7, r5
 8016766:	f7f8 fd16 	bl	800f196 <SecureElementVerifyAesCmac>
 801676a:	1e03      	subs	r3, r0, #0
 801676c:	d001      	beq.n	8016772 <LoRaMacCryptoHandleJoinAccept+0x23a>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801676e:	230f      	movs	r3, #15
 8016770:	e0d7      	b.n	8016922 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }

        // Check if the JoinNonce is greater as the previous one
        uint32_t currentJoinNonce = 0;
 8016772:	2300      	movs	r3, #0
 8016774:	228e      	movs	r2, #142	; 0x8e
 8016776:	0052      	lsls	r2, r2, #1
 8016778:	18b9      	adds	r1, r7, r2
 801677a:	600b      	str	r3, [r1, #0]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	799b      	ldrb	r3, [r3, #6]
 8016780:	18b9      	adds	r1, r7, r2
 8016782:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	79db      	ldrb	r3, [r3, #7]
 8016788:	021b      	lsls	r3, r3, #8
 801678a:	0011      	movs	r1, r2
 801678c:	18ba      	adds	r2, r7, r2
 801678e:	6812      	ldr	r2, [r2, #0]
 8016790:	4313      	orrs	r3, r2
 8016792:	000a      	movs	r2, r1
 8016794:	18b9      	adds	r1, r7, r2
 8016796:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	7a1b      	ldrb	r3, [r3, #8]
 801679c:	041b      	lsls	r3, r3, #16
 801679e:	0011      	movs	r1, r2
 80167a0:	18ba      	adds	r2, r7, r2
 80167a2:	6812      	ldr	r2, [r2, #0]
 80167a4:	4313      	orrs	r3, r2
 80167a6:	000a      	movs	r2, r1
 80167a8:	18b9      	adds	r1, r7, r2
 80167aa:	600b      	str	r3, [r1, #0]

        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 80167ac:	4b41      	ldr	r3, [pc, #260]	; (80168b4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 80167ae:	685b      	ldr	r3, [r3, #4]
 80167b0:	689b      	ldr	r3, [r3, #8]
 80167b2:	18ba      	adds	r2, r7, r2
 80167b4:	6812      	ldr	r2, [r2, #0]
 80167b6:	429a      	cmp	r2, r3
 80167b8:	d90a      	bls.n	80167d0 <LoRaMacCryptoHandleJoinAccept+0x298>
        {
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 80167ba:	4b3e      	ldr	r3, [pc, #248]	; (80168b4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 80167bc:	685b      	ldr	r3, [r3, #4]
 80167be:	228e      	movs	r2, #142	; 0x8e
 80167c0:	0052      	lsls	r2, r2, #1
 80167c2:	18ba      	adds	r2, r7, r2
 80167c4:	6812      	ldr	r2, [r2, #0]
 80167c6:	609a      	str	r2, [r3, #8]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 80167c8:	4b3a      	ldr	r3, [pc, #232]	; (80168b4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 80167ca:	689b      	ldr	r3, [r3, #8]
 80167cc:	4798      	blx	r3
 80167ce:	e001      	b.n	80167d4 <LoRaMacCryptoHandleJoinAccept+0x29c>
        }
        else
        {
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 80167d0:	2303      	movs	r3, #3
 80167d2:	e0a6      	b.n	8016922 <LoRaMacCryptoHandleJoinAccept+0x3ea>
    }
    else
#endif
    {
        // prior LoRaWAN 1.1.0
        retval = LoRaMacCryptoDeriveMcRootKey( GEN_APP_KEY );
 80167d4:	2592      	movs	r5, #146	; 0x92
 80167d6:	006d      	lsls	r5, r5, #1
 80167d8:	197c      	adds	r4, r7, r5
 80167da:	2001      	movs	r0, #1
 80167dc:	f000 fa04 	bl	8016be8 <LoRaMacCryptoDeriveMcRootKey>
 80167e0:	0003      	movs	r3, r0
 80167e2:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80167e4:	197b      	adds	r3, r7, r5
 80167e6:	781b      	ldrb	r3, [r3, #0]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d004      	beq.n	80167f6 <LoRaMacCryptoHandleJoinAccept+0x2be>
        {
            return retval;
 80167ec:	2392      	movs	r3, #146	; 0x92
 80167ee:	005b      	lsls	r3, r3, #1
 80167f0:	18fb      	adds	r3, r7, r3
 80167f2:	781b      	ldrb	r3, [r3, #0]
 80167f4:	e095      	b.n	8016922 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }

        retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80167f6:	2592      	movs	r5, #146	; 0x92
 80167f8:	006d      	lsls	r5, r5, #1
 80167fa:	197c      	adds	r4, r7, r5
 80167fc:	2009      	movs	r0, #9
 80167fe:	f000 fa33 	bl	8016c68 <LoRaMacCryptoDeriveMcKEKey>
 8016802:	0003      	movs	r3, r0
 8016804:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016806:	197b      	adds	r3, r7, r5
 8016808:	781b      	ldrb	r3, [r3, #0]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d004      	beq.n	8016818 <LoRaMacCryptoHandleJoinAccept+0x2e0>
        {
            return retval;
 801680e:	2392      	movs	r3, #146	; 0x92
 8016810:	005b      	lsls	r3, r3, #1
 8016812:	18fb      	adds	r3, r7, r3
 8016814:	781b      	ldrb	r3, [r3, #0]
 8016816:	e084      	b.n	8016922 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }

        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	1d99      	adds	r1, r3, #6
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	3309      	adds	r3, #9
 8016820:	001a      	movs	r2, r3
 8016822:	4b24      	ldr	r3, [pc, #144]	; (80168b4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8016824:	685b      	ldr	r3, [r3, #4]
 8016826:	3304      	adds	r3, #4
 8016828:	2592      	movs	r5, #146	; 0x92
 801682a:	006d      	lsls	r5, r5, #1
 801682c:	197c      	adds	r4, r7, r5
 801682e:	2008      	movs	r0, #8
 8016830:	f7ff fb68 	bl	8015f04 <DeriveSessionKey10x>
 8016834:	0003      	movs	r3, r0
 8016836:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016838:	197b      	adds	r3, r7, r5
 801683a:	781b      	ldrb	r3, [r3, #0]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d004      	beq.n	801684a <LoRaMacCryptoHandleJoinAccept+0x312>
        {
            return retval;
 8016840:	2392      	movs	r3, #146	; 0x92
 8016842:	005b      	lsls	r3, r3, #1
 8016844:	18fb      	adds	r3, r7, r3
 8016846:	781b      	ldrb	r3, [r3, #0]
 8016848:	e06b      	b.n	8016922 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }

        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	1d99      	adds	r1, r3, #6
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	3309      	adds	r3, #9
 8016852:	001a      	movs	r2, r3
 8016854:	4b17      	ldr	r3, [pc, #92]	; (80168b4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8016856:	685b      	ldr	r3, [r3, #4]
 8016858:	3304      	adds	r3, #4
 801685a:	2592      	movs	r5, #146	; 0x92
 801685c:	006d      	lsls	r5, r5, #1
 801685e:	197c      	adds	r4, r7, r5
 8016860:	2007      	movs	r0, #7
 8016862:	f7ff fb4f 	bl	8015f04 <DeriveSessionKey10x>
 8016866:	0003      	movs	r3, r0
 8016868:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801686a:	197b      	adds	r3, r7, r5
 801686c:	781b      	ldrb	r3, [r3, #0]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d004      	beq.n	801687c <LoRaMacCryptoHandleJoinAccept+0x344>
        {
            return retval;
 8016872:	2392      	movs	r3, #146	; 0x92
 8016874:	005b      	lsls	r3, r3, #1
 8016876:	18fb      	adds	r3, r7, r3
 8016878:	781b      	ldrb	r3, [r3, #0]
 801687a:	e052      	b.n	8016922 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }

        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	1d99      	adds	r1, r3, #6
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	3309      	adds	r3, #9
 8016884:	001a      	movs	r2, r3
 8016886:	4b0b      	ldr	r3, [pc, #44]	; (80168b4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8016888:	685b      	ldr	r3, [r3, #4]
 801688a:	3304      	adds	r3, #4
 801688c:	2592      	movs	r5, #146	; 0x92
 801688e:	006d      	lsls	r5, r5, #1
 8016890:	197c      	adds	r4, r7, r5
 8016892:	2005      	movs	r0, #5
 8016894:	f7ff fb36 	bl	8015f04 <DeriveSessionKey10x>
 8016898:	0003      	movs	r3, r0
 801689a:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801689c:	197b      	adds	r3, r7, r5
 801689e:	781b      	ldrb	r3, [r3, #0]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d00b      	beq.n	80168bc <LoRaMacCryptoHandleJoinAccept+0x384>
        {
            return retval;
 80168a4:	2392      	movs	r3, #146	; 0x92
 80168a6:	005b      	lsls	r3, r3, #1
 80168a8:	18fb      	adds	r3, r7, r3
 80168aa:	781b      	ldrb	r3, [r3, #0]
 80168ac:	e039      	b.n	8016922 <LoRaMacCryptoHandleJoinAccept+0x3ea>
 80168ae:	46c0      	nop			; (mov r8, r8)
 80168b0:	fffffee7 	.word	0xfffffee7
 80168b4:	20001080 	.word	0x20001080
 80168b8:	fffffee8 	.word	0xfffffee8
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	1d99      	adds	r1, r3, #6
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	3309      	adds	r3, #9
 80168c4:	001a      	movs	r2, r3
 80168c6:	4b19      	ldr	r3, [pc, #100]	; (801692c <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 80168c8:	685b      	ldr	r3, [r3, #4]
 80168ca:	3304      	adds	r3, #4
 80168cc:	2592      	movs	r5, #146	; 0x92
 80168ce:	006d      	lsls	r5, r5, #1
 80168d0:	197c      	adds	r4, r7, r5
 80168d2:	2006      	movs	r0, #6
 80168d4:	f7ff fb16 	bl	8015f04 <DeriveSessionKey10x>
 80168d8:	0003      	movs	r3, r0
 80168da:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80168dc:	197b      	adds	r3, r7, r5
 80168de:	781b      	ldrb	r3, [r3, #0]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d004      	beq.n	80168ee <LoRaMacCryptoHandleJoinAccept+0x3b6>
        {
            return retval;
 80168e4:	2392      	movs	r3, #146	; 0x92
 80168e6:	005b      	lsls	r3, r3, #1
 80168e8:	18fb      	adds	r3, r7, r3
 80168ea:	781b      	ldrb	r3, [r3, #0]
 80168ec:	e019      	b.n	8016922 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }
    }

    // Join-Accept is successfully processed, reset frame counters
    CryptoCtx.RJcount0 = 0;
 80168ee:	4b0f      	ldr	r3, [pc, #60]	; (801692c <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 80168f0:	2200      	movs	r2, #0
 80168f2:	801a      	strh	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 80168f4:	4b0d      	ldr	r3, [pc, #52]	; (801692c <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 80168f6:	685b      	ldr	r3, [r3, #4]
 80168f8:	2200      	movs	r2, #0
 80168fa:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80168fc:	4b0b      	ldr	r3, [pc, #44]	; (801692c <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 80168fe:	685b      	ldr	r3, [r3, #4]
 8016900:	2201      	movs	r2, #1
 8016902:	4252      	negs	r2, r2
 8016904:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016906:	4b09      	ldr	r3, [pc, #36]	; (801692c <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 8016908:	685b      	ldr	r3, [r3, #4]
 801690a:	2201      	movs	r2, #1
 801690c:	4252      	negs	r2, r2
 801690e:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016910:	4b06      	ldr	r3, [pc, #24]	; (801692c <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 8016912:	685b      	ldr	r3, [r3, #4]
 8016914:	2201      	movs	r2, #1
 8016916:	4252      	negs	r2, r2
 8016918:	615a      	str	r2, [r3, #20]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 801691a:	4b04      	ldr	r3, [pc, #16]	; (801692c <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 801691c:	689b      	ldr	r3, [r3, #8]
 801691e:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8016920:	2300      	movs	r3, #0
}
 8016922:	0018      	movs	r0, r3
 8016924:	46bd      	mov	sp, r7
 8016926:	b04a      	add	sp, #296	; 0x128
 8016928:	bdb0      	pop	{r4, r5, r7, pc}
 801692a:	46c0      	nop			; (mov r8, r8)
 801692c:	20001080 	.word	0x20001080

08016930 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016932:	b08b      	sub	sp, #44	; 0x2c
 8016934:	af04      	add	r7, sp, #16
 8016936:	60f8      	str	r0, [r7, #12]
 8016938:	0008      	movs	r0, r1
 801693a:	0011      	movs	r1, r2
 801693c:	607b      	str	r3, [r7, #4]
 801693e:	230b      	movs	r3, #11
 8016940:	18fb      	adds	r3, r7, r3
 8016942:	1c02      	adds	r2, r0, #0
 8016944:	701a      	strb	r2, [r3, #0]
 8016946:	230a      	movs	r3, #10
 8016948:	18fb      	adds	r3, r7, r3
 801694a:	1c0a      	adds	r2, r1, #0
 801694c:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801694e:	2316      	movs	r3, #22
 8016950:	18fb      	adds	r3, r7, r3
 8016952:	2213      	movs	r2, #19
 8016954:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016956:	2317      	movs	r3, #23
 8016958:	18fb      	adds	r3, r7, r3
 801695a:	2208      	movs	r2, #8
 801695c:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d101      	bne.n	8016968 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016964:	230a      	movs	r3, #10
 8016966:	e06d      	b.n	8016a44 <LoRaMacCryptoSecureMessage+0x114>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 8016968:	4b38      	ldr	r3, [pc, #224]	; (8016a4c <LoRaMacCryptoSecureMessage+0x11c>)
 801696a:	685b      	ldr	r3, [r3, #4]
 801696c:	68db      	ldr	r3, [r3, #12]
 801696e:	68fa      	ldr	r2, [r7, #12]
 8016970:	429a      	cmp	r2, r3
 8016972:	d201      	bcs.n	8016978 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016974:	2306      	movs	r3, #6
 8016976:	e065      	b.n	8016a44 <LoRaMacCryptoSecureMessage+0x114>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2220      	movs	r2, #32
 801697c:	5c9b      	ldrb	r3, [r3, r2]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d103      	bne.n	801698a <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8016982:	2317      	movs	r3, #23
 8016984:	18fb      	adds	r3, r7, r3
 8016986:	2207      	movs	r2, #7
 8016988:	701a      	strb	r2, [r3, #0]
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 801698a:	4b30      	ldr	r3, [pc, #192]	; (8016a4c <LoRaMacCryptoSecureMessage+0x11c>)
 801698c:	685b      	ldr	r3, [r3, #4]
 801698e:	68db      	ldr	r3, [r3, #12]
 8016990:	68fa      	ldr	r2, [r7, #12]
 8016992:	429a      	cmp	r2, r3
 8016994:	d91d      	bls.n	80169d2 <LoRaMacCryptoSecureMessage+0xa2>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	2228      	movs	r2, #40	; 0x28
 801699e:	5c9b      	ldrb	r3, [r3, r2]
 80169a0:	b219      	sxth	r1, r3
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	689d      	ldr	r5, [r3, #8]
 80169a6:	2616      	movs	r6, #22
 80169a8:	19bc      	adds	r4, r7, r6
 80169aa:	2317      	movs	r3, #23
 80169ac:	18fb      	adds	r3, r7, r3
 80169ae:	781a      	ldrb	r2, [r3, #0]
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	9301      	str	r3, [sp, #4]
 80169b4:	2300      	movs	r3, #0
 80169b6:	9300      	str	r3, [sp, #0]
 80169b8:	002b      	movs	r3, r5
 80169ba:	f7ff f823 	bl	8015a04 <PayloadEncrypt>
 80169be:	0003      	movs	r3, r0
 80169c0:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80169c2:	19bb      	adds	r3, r7, r6
 80169c4:	781b      	ldrb	r3, [r3, #0]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d003      	beq.n	80169d2 <LoRaMacCryptoSecureMessage+0xa2>
        {
            return retval;
 80169ca:	2316      	movs	r3, #22
 80169cc:	18fb      	adds	r3, r7, r3
 80169ce:	781b      	ldrb	r3, [r3, #0]
 80169d0:	e038      	b.n	8016a44 <LoRaMacCryptoSecureMessage+0x114>
                return retval;
            }
        }
#endif
    }
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 80169d2:	4b1e      	ldr	r3, [pc, #120]	; (8016a4c <LoRaMacCryptoSecureMessage+0x11c>)
 80169d4:	685b      	ldr	r3, [r3, #4]
 80169d6:	68fa      	ldr	r2, [r7, #12]
 80169d8:	60da      	str	r2, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80169da:	4b1c      	ldr	r3, [pc, #112]	; (8016a4c <LoRaMacCryptoSecureMessage+0x11c>)
 80169dc:	689b      	ldr	r3, [r3, #8]
 80169de:	4798      	blx	r3

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	0018      	movs	r0, r3
 80169e4:	f000 fc06 	bl	80171f4 <LoRaMacSerializerData>
 80169e8:	1e03      	subs	r3, r0, #0
 80169ea:	d001      	beq.n	80169f0 <LoRaMacCryptoSecureMessage+0xc0>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80169ec:	2311      	movs	r3, #17
 80169ee:	e029      	b.n	8016a44 <LoRaMacCryptoSecureMessage+0x114>
    else
#endif
    {
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	6818      	ldr	r0, [r3, #0]
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	791b      	ldrb	r3, [r3, #4]
 80169f8:	b29b      	uxth	r3, r3
 80169fa:	3b04      	subs	r3, #4
 80169fc:	b299      	uxth	r1, r3
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	689b      	ldr	r3, [r3, #8]
 8016a02:	687a      	ldr	r2, [r7, #4]
 8016a04:	322c      	adds	r2, #44	; 0x2c
 8016a06:	2516      	movs	r5, #22
 8016a08:	197c      	adds	r4, r7, r5
 8016a0a:	9203      	str	r2, [sp, #12]
 8016a0c:	68fa      	ldr	r2, [r7, #12]
 8016a0e:	9202      	str	r2, [sp, #8]
 8016a10:	9301      	str	r3, [sp, #4]
 8016a12:	2300      	movs	r3, #0
 8016a14:	9300      	str	r3, [sp, #0]
 8016a16:	2300      	movs	r3, #0
 8016a18:	2207      	movs	r2, #7
 8016a1a:	f7ff f947 	bl	8015cac <ComputeCmacB0>
 8016a1e:	0003      	movs	r3, r0
 8016a20:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016a22:	197b      	adds	r3, r7, r5
 8016a24:	781b      	ldrb	r3, [r3, #0]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d003      	beq.n	8016a32 <LoRaMacCryptoSecureMessage+0x102>
        {
            return retval;
 8016a2a:	2316      	movs	r3, #22
 8016a2c:	18fb      	adds	r3, r7, r3
 8016a2e:	781b      	ldrb	r3, [r3, #0]
 8016a30:	e008      	b.n	8016a44 <LoRaMacCryptoSecureMessage+0x114>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	0018      	movs	r0, r3
 8016a36:	f000 fbdd 	bl	80171f4 <LoRaMacSerializerData>
 8016a3a:	1e03      	subs	r3, r0, #0
 8016a3c:	d001      	beq.n	8016a42 <LoRaMacCryptoSecureMessage+0x112>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016a3e:	2311      	movs	r3, #17
 8016a40:	e000      	b.n	8016a44 <LoRaMacCryptoSecureMessage+0x114>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016a42:	2300      	movs	r3, #0
}
 8016a44:	0018      	movs	r0, r3
 8016a46:	46bd      	mov	sp, r7
 8016a48:	b007      	add	sp, #28
 8016a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a4c:	20001080 	.word	0x20001080

08016a50 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a52:	b08b      	sub	sp, #44	; 0x2c
 8016a54:	af04      	add	r7, sp, #16
 8016a56:	60b9      	str	r1, [r7, #8]
 8016a58:	0011      	movs	r1, r2
 8016a5a:	607b      	str	r3, [r7, #4]
 8016a5c:	230f      	movs	r3, #15
 8016a5e:	18fb      	adds	r3, r7, r3
 8016a60:	1c02      	adds	r2, r0, #0
 8016a62:	701a      	strb	r2, [r3, #0]
 8016a64:	230e      	movs	r3, #14
 8016a66:	18fb      	adds	r3, r7, r3
 8016a68:	1c0a      	adds	r2, r1, #0
 8016a6a:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 8016a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d101      	bne.n	8016a76 <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016a72:	230a      	movs	r3, #10
 8016a74:	e0b2      	b.n	8016bdc <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016a76:	687a      	ldr	r2, [r7, #4]
 8016a78:	230e      	movs	r3, #14
 8016a7a:	18fb      	adds	r3, r7, r3
 8016a7c:	781b      	ldrb	r3, [r3, #0]
 8016a7e:	0011      	movs	r1, r2
 8016a80:	0018      	movs	r0, r3
 8016a82:	f7ff fafb 	bl	801607c <CheckFCntDown>
 8016a86:	0003      	movs	r3, r0
 8016a88:	001a      	movs	r2, r3
 8016a8a:	2301      	movs	r3, #1
 8016a8c:	4053      	eors	r3, r2
 8016a8e:	b2db      	uxtb	r3, r3
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d001      	beq.n	8016a98 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016a94:	2306      	movs	r3, #6
 8016a96:	e0a1      	b.n	8016bdc <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016a98:	2315      	movs	r3, #21
 8016a9a:	18fb      	adds	r3, r7, r3
 8016a9c:	2213      	movs	r2, #19
 8016a9e:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016aa0:	2317      	movs	r3, #23
 8016aa2:	18fb      	adds	r3, r7, r3
 8016aa4:	2208      	movs	r2, #8
 8016aa6:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
 8016aa8:	2314      	movs	r3, #20
 8016aaa:	18fb      	adds	r3, r7, r3
 8016aac:	2206      	movs	r2, #6
 8016aae:	701a      	strb	r2, [r3, #0]
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ab2:	0018      	movs	r0, r3
 8016ab4:	f000 f9f1 	bl	8016e9a <LoRaMacParserData>
 8016ab8:	1e03      	subs	r3, r0, #0
 8016aba:	d001      	beq.n	8016ac0 <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016abc:	2310      	movs	r3, #16
 8016abe:	e08d      	b.n	8016bdc <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016ac0:	2515      	movs	r5, #21
 8016ac2:	197c      	adds	r4, r7, r5
 8016ac4:	2310      	movs	r3, #16
 8016ac6:	18fa      	adds	r2, r7, r3
 8016ac8:	230f      	movs	r3, #15
 8016aca:	18fb      	adds	r3, r7, r3
 8016acc:	781b      	ldrb	r3, [r3, #0]
 8016ace:	0011      	movs	r1, r2
 8016ad0:	0018      	movs	r0, r3
 8016ad2:	f7ff f9e5 	bl	8015ea0 <GetKeyAddrItem>
 8016ad6:	0003      	movs	r3, r0
 8016ad8:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016ada:	197b      	adds	r3, r7, r5
 8016adc:	781b      	ldrb	r3, [r3, #0]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d003      	beq.n	8016aea <LoRaMacCryptoUnsecureMessage+0x9a>
    {
        return retval;
 8016ae2:	2315      	movs	r3, #21
 8016ae4:	18fb      	adds	r3, r7, r3
 8016ae6:	781b      	ldrb	r3, [r3, #0]
 8016ae8:	e078      	b.n	8016bdc <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8016aea:	693a      	ldr	r2, [r7, #16]
 8016aec:	2317      	movs	r3, #23
 8016aee:	18fb      	adds	r3, r7, r3
 8016af0:	7852      	ldrb	r2, [r2, #1]
 8016af2:	701a      	strb	r2, [r3, #0]
    micComputationKeyID = curItem->NwkSkey;
 8016af4:	693a      	ldr	r2, [r7, #16]
 8016af6:	2314      	movs	r3, #20
 8016af8:	18fb      	adds	r3, r7, r3
 8016afa:	7892      	ldrb	r2, [r2, #2]
 8016afc:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8016afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b00:	689b      	ldr	r3, [r3, #8]
 8016b02:	68ba      	ldr	r2, [r7, #8]
 8016b04:	429a      	cmp	r2, r3
 8016b06:	d001      	beq.n	8016b0c <LoRaMacCryptoUnsecureMessage+0xbc>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8016b08:	2302      	movs	r3, #2
 8016b0a:	e067      	b.n	8016bdc <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8016b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b0e:	7b1b      	ldrb	r3, [r3, #12]
 8016b10:	069b      	lsls	r3, r3, #26
 8016b12:	0fdb      	lsrs	r3, r3, #31
 8016b14:	b2db      	uxtb	r3, r3
 8016b16:	001a      	movs	r2, r3
 8016b18:	2316      	movs	r3, #22
 8016b1a:	18fb      	adds	r3, r7, r3
 8016b1c:	1e51      	subs	r1, r2, #1
 8016b1e:	418a      	sbcs	r2, r1
 8016b20:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8016b22:	4b30      	ldr	r3, [pc, #192]	; (8016be4 <LoRaMacCryptoUnsecureMessage+0x194>)
 8016b24:	685b      	ldr	r3, [r3, #4]
 8016b26:	789b      	ldrb	r3, [r3, #2]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d103      	bne.n	8016b34 <LoRaMacCryptoUnsecureMessage+0xe4>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8016b2c:	2316      	movs	r3, #22
 8016b2e:	18fb      	adds	r3, r7, r3
 8016b30:	2200      	movs	r2, #0
 8016b32:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8016b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b36:	6818      	ldr	r0, [r3, #0]
 8016b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b3a:	791b      	ldrb	r3, [r3, #4]
 8016b3c:	b29b      	uxth	r3, r3
 8016b3e:	3b04      	subs	r3, #4
 8016b40:	b299      	uxth	r1, r3
 8016b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b46:	2615      	movs	r6, #21
 8016b48:	19bc      	adds	r4, r7, r6
 8016b4a:	2216      	movs	r2, #22
 8016b4c:	18ba      	adds	r2, r7, r2
 8016b4e:	7815      	ldrb	r5, [r2, #0]
 8016b50:	2214      	movs	r2, #20
 8016b52:	18ba      	adds	r2, r7, r2
 8016b54:	7812      	ldrb	r2, [r2, #0]
 8016b56:	9303      	str	r3, [sp, #12]
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	9302      	str	r3, [sp, #8]
 8016b5c:	68bb      	ldr	r3, [r7, #8]
 8016b5e:	9301      	str	r3, [sp, #4]
 8016b60:	2301      	movs	r3, #1
 8016b62:	9300      	str	r3, [sp, #0]
 8016b64:	002b      	movs	r3, r5
 8016b66:	f7ff f8e9 	bl	8015d3c <VerifyCmacB0>
 8016b6a:	0003      	movs	r3, r0
 8016b6c:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016b6e:	19bb      	adds	r3, r7, r6
 8016b70:	781b      	ldrb	r3, [r3, #0]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d003      	beq.n	8016b7e <LoRaMacCryptoUnsecureMessage+0x12e>
    {
        return retval;
 8016b76:	2315      	movs	r3, #21
 8016b78:	18fb      	adds	r3, r7, r3
 8016b7a:	781b      	ldrb	r3, [r3, #0]
 8016b7c:	e02e      	b.n	8016bdc <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8016b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b80:	2220      	movs	r2, #32
 8016b82:	5c9b      	ldrb	r3, [r3, r2]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d103      	bne.n	8016b90 <LoRaMacCryptoUnsecureMessage+0x140>
    {
        // Use network session encryption key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8016b88:	2317      	movs	r3, #23
 8016b8a:	18fb      	adds	r3, r7, r3
 8016b8c:	2207      	movs	r2, #7
 8016b8e:	701a      	strb	r2, [r3, #0]
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8016b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b92:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b96:	2228      	movs	r2, #40	; 0x28
 8016b98:	5c9b      	ldrb	r3, [r3, r2]
 8016b9a:	b219      	sxth	r1, r3
 8016b9c:	2615      	movs	r6, #21
 8016b9e:	19bc      	adds	r4, r7, r6
 8016ba0:	68bd      	ldr	r5, [r7, #8]
 8016ba2:	2317      	movs	r3, #23
 8016ba4:	18fb      	adds	r3, r7, r3
 8016ba6:	781a      	ldrb	r2, [r3, #0]
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	9301      	str	r3, [sp, #4]
 8016bac:	2301      	movs	r3, #1
 8016bae:	9300      	str	r3, [sp, #0]
 8016bb0:	002b      	movs	r3, r5
 8016bb2:	f7fe ff27 	bl	8015a04 <PayloadEncrypt>
 8016bb6:	0003      	movs	r3, r0
 8016bb8:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016bba:	19bb      	adds	r3, r7, r6
 8016bbc:	781b      	ldrb	r3, [r3, #0]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d003      	beq.n	8016bca <LoRaMacCryptoUnsecureMessage+0x17a>
    {
        return retval;
 8016bc2:	2315      	movs	r3, #21
 8016bc4:	18fb      	adds	r3, r7, r3
 8016bc6:	781b      	ldrb	r3, [r3, #0]
 8016bc8:	e008      	b.n	8016bdc <LoRaMacCryptoUnsecureMessage+0x18c>
            return retval;
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8016bca:	687a      	ldr	r2, [r7, #4]
 8016bcc:	230e      	movs	r3, #14
 8016bce:	18fb      	adds	r3, r7, r3
 8016bd0:	781b      	ldrb	r3, [r3, #0]
 8016bd2:	0011      	movs	r1, r2
 8016bd4:	0018      	movs	r0, r3
 8016bd6:	f7ff fa75 	bl	80160c4 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8016bda:	2300      	movs	r3, #0
}
 8016bdc:	0018      	movs	r0, r3
 8016bde:	46bd      	mov	sp, r7
 8016be0:	b007      	add	sp, #28
 8016be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016be4:	20001080 	.word	0x20001080

08016be8 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b086      	sub	sp, #24
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	0002      	movs	r2, r0
 8016bf0:	1dfb      	adds	r3, r7, #7
 8016bf2:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than GenAppKey for LoRaWAN 1.0.x or AppKey for LoRaWAN 1.1 or later
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 8016bf4:	1dfb      	adds	r3, r7, #7
 8016bf6:	781b      	ldrb	r3, [r3, #0]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d104      	bne.n	8016c06 <LoRaMacCryptoDeriveMcRootKey+0x1e>
 8016bfc:	4b19      	ldr	r3, [pc, #100]	; (8016c64 <LoRaMacCryptoDeriveMcRootKey+0x7c>)
 8016bfe:	685b      	ldr	r3, [r3, #4]
 8016c00:	789b      	ldrb	r3, [r3, #2]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d008      	beq.n	8016c18 <LoRaMacCryptoDeriveMcRootKey+0x30>
 8016c06:	1dfb      	adds	r3, r7, #7
 8016c08:	781b      	ldrb	r3, [r3, #0]
 8016c0a:	2b01      	cmp	r3, #1
 8016c0c:	d106      	bne.n	8016c1c <LoRaMacCryptoDeriveMcRootKey+0x34>
        ( ( keyID == GEN_APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 ) ) )
 8016c0e:	4b15      	ldr	r3, [pc, #84]	; (8016c64 <LoRaMacCryptoDeriveMcRootKey+0x7c>)
 8016c10:	685b      	ldr	r3, [r3, #4]
 8016c12:	789b      	ldrb	r3, [r3, #2]
 8016c14:	2b01      	cmp	r3, #1
 8016c16:	d101      	bne.n	8016c1c <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016c18:	230b      	movs	r3, #11
 8016c1a:	e01f      	b.n	8016c5c <LoRaMacCryptoDeriveMcRootKey+0x74>
    }
    uint8_t compBase[16] = { 0 };
 8016c1c:	2308      	movs	r3, #8
 8016c1e:	18fb      	adds	r3, r7, r3
 8016c20:	0018      	movs	r0, r3
 8016c22:	2310      	movs	r3, #16
 8016c24:	001a      	movs	r2, r3
 8016c26:	2100      	movs	r1, #0
 8016c28:	f004 fd24 	bl	801b674 <memset>

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 8016c2c:	4b0d      	ldr	r3, [pc, #52]	; (8016c64 <LoRaMacCryptoDeriveMcRootKey+0x7c>)
 8016c2e:	685b      	ldr	r3, [r3, #4]
 8016c30:	789b      	ldrb	r3, [r3, #2]
 8016c32:	2b01      	cmp	r3, #1
 8016c34:	d103      	bne.n	8016c3e <LoRaMacCryptoDeriveMcRootKey+0x56>
    {
        compBase[0] = 0x20;
 8016c36:	2308      	movs	r3, #8
 8016c38:	18fb      	adds	r3, r7, r3
 8016c3a:	2220      	movs	r2, #32
 8016c3c:	701a      	strb	r2, [r3, #0]
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8016c3e:	4b09      	ldr	r3, [pc, #36]	; (8016c64 <LoRaMacCryptoDeriveMcRootKey+0x7c>)
 8016c40:	685b      	ldr	r3, [r3, #4]
 8016c42:	1dfa      	adds	r2, r7, #7
 8016c44:	7812      	ldrb	r2, [r2, #0]
 8016c46:	2108      	movs	r1, #8
 8016c48:	1879      	adds	r1, r7, r1
 8016c4a:	6818      	ldr	r0, [r3, #0]
 8016c4c:	2309      	movs	r3, #9
 8016c4e:	f7f8 fb4f 	bl	800f2f0 <SecureElementDeriveAndStoreKey>
 8016c52:	1e03      	subs	r3, r0, #0
 8016c54:	d001      	beq.n	8016c5a <LoRaMacCryptoDeriveMcRootKey+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c56:	230f      	movs	r3, #15
 8016c58:	e000      	b.n	8016c5c <LoRaMacCryptoDeriveMcRootKey+0x74>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016c5a:	2300      	movs	r3, #0
}
 8016c5c:	0018      	movs	r0, r3
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	b006      	add	sp, #24
 8016c62:	bd80      	pop	{r7, pc}
 8016c64:	20001080 	.word	0x20001080

08016c68 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8016c68:	b590      	push	{r4, r7, lr}
 8016c6a:	b087      	sub	sp, #28
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	0002      	movs	r2, r0
 8016c70:	1dfb      	adds	r3, r7, #7
 8016c72:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8016c74:	1dfb      	adds	r3, r7, #7
 8016c76:	781b      	ldrb	r3, [r3, #0]
 8016c78:	2b09      	cmp	r3, #9
 8016c7a:	d001      	beq.n	8016c80 <LoRaMacCryptoDeriveMcKEKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016c7c:	230b      	movs	r3, #11
 8016c7e:	e015      	b.n	8016cac <LoRaMacCryptoDeriveMcKEKey+0x44>
    }
    uint8_t compBase[16] = { 0 };
 8016c80:	2408      	movs	r4, #8
 8016c82:	193b      	adds	r3, r7, r4
 8016c84:	0018      	movs	r0, r3
 8016c86:	2310      	movs	r3, #16
 8016c88:	001a      	movs	r2, r3
 8016c8a:	2100      	movs	r1, #0
 8016c8c:	f004 fcf2 	bl	801b674 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8016c90:	4b08      	ldr	r3, [pc, #32]	; (8016cb4 <LoRaMacCryptoDeriveMcKEKey+0x4c>)
 8016c92:	685b      	ldr	r3, [r3, #4]
 8016c94:	1dfa      	adds	r2, r7, #7
 8016c96:	7812      	ldrb	r2, [r2, #0]
 8016c98:	1939      	adds	r1, r7, r4
 8016c9a:	6818      	ldr	r0, [r3, #0]
 8016c9c:	237f      	movs	r3, #127	; 0x7f
 8016c9e:	f7f8 fb27 	bl	800f2f0 <SecureElementDeriveAndStoreKey>
 8016ca2:	1e03      	subs	r3, r0, #0
 8016ca4:	d001      	beq.n	8016caa <LoRaMacCryptoDeriveMcKEKey+0x42>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016ca6:	230f      	movs	r3, #15
 8016ca8:	e000      	b.n	8016cac <LoRaMacCryptoDeriveMcKEKey+0x44>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016caa:	2300      	movs	r3, #0
}
 8016cac:	0018      	movs	r0, r3
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	b007      	add	sp, #28
 8016cb2:	bd90      	pop	{r4, r7, pc}
 8016cb4:	20001080 	.word	0x20001080

08016cb8 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8016cb8:	b590      	push	{r4, r7, lr}
 8016cba:	b085      	sub	sp, #20
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d003      	beq.n	8016cce <LoRaMacParserJoinAccept+0x16>
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d101      	bne.n	8016cd2 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016cce:	2302      	movs	r3, #2
 8016cd0:	e0df      	b.n	8016e92 <LoRaMacParserJoinAccept+0x1da>
    }

    uint16_t bufItr = 0;
 8016cd2:	240e      	movs	r4, #14
 8016cd4:	193b      	adds	r3, r7, r4
 8016cd6:	2200      	movs	r2, #0
 8016cd8:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	681a      	ldr	r2, [r3, #0]
 8016cde:	193b      	adds	r3, r7, r4
 8016ce0:	881b      	ldrh	r3, [r3, #0]
 8016ce2:	1939      	adds	r1, r7, r4
 8016ce4:	1c58      	adds	r0, r3, #1
 8016ce6:	8008      	strh	r0, [r1, #0]
 8016ce8:	18d3      	adds	r3, r2, r3
 8016cea:	781a      	ldrb	r2, [r3, #0]
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	1d98      	adds	r0, r3, #6
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	681a      	ldr	r2, [r3, #0]
 8016cf8:	193b      	adds	r3, r7, r4
 8016cfa:	881b      	ldrh	r3, [r3, #0]
 8016cfc:	18d3      	adds	r3, r2, r3
 8016cfe:	2203      	movs	r2, #3
 8016d00:	0019      	movs	r1, r3
 8016d02:	f004 fc33 	bl	801b56c <memcpy1>
    bufItr = bufItr + 3;
 8016d06:	193b      	adds	r3, r7, r4
 8016d08:	193a      	adds	r2, r7, r4
 8016d0a:	8812      	ldrh	r2, [r2, #0]
 8016d0c:	3203      	adds	r2, #3
 8016d0e:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	3309      	adds	r3, #9
 8016d14:	0018      	movs	r0, r3
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	681a      	ldr	r2, [r3, #0]
 8016d1a:	193b      	adds	r3, r7, r4
 8016d1c:	881b      	ldrh	r3, [r3, #0]
 8016d1e:	18d3      	adds	r3, r2, r3
 8016d20:	2203      	movs	r2, #3
 8016d22:	0019      	movs	r1, r3
 8016d24:	f004 fc22 	bl	801b56c <memcpy1>
    bufItr = bufItr + 3;
 8016d28:	193b      	adds	r3, r7, r4
 8016d2a:	193a      	adds	r2, r7, r4
 8016d2c:	8812      	ldrh	r2, [r2, #0]
 8016d2e:	3203      	adds	r2, #3
 8016d30:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	681a      	ldr	r2, [r3, #0]
 8016d36:	193b      	adds	r3, r7, r4
 8016d38:	881b      	ldrh	r3, [r3, #0]
 8016d3a:	1939      	adds	r1, r7, r4
 8016d3c:	1c58      	adds	r0, r3, #1
 8016d3e:	8008      	strh	r0, [r1, #0]
 8016d40:	18d3      	adds	r3, r2, r3
 8016d42:	781b      	ldrb	r3, [r3, #0]
 8016d44:	001a      	movs	r2, r3
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	681a      	ldr	r2, [r3, #0]
 8016d4e:	193b      	adds	r3, r7, r4
 8016d50:	881b      	ldrh	r3, [r3, #0]
 8016d52:	1939      	adds	r1, r7, r4
 8016d54:	1c58      	adds	r0, r3, #1
 8016d56:	8008      	strh	r0, [r1, #0]
 8016d58:	18d3      	adds	r3, r2, r3
 8016d5a:	781b      	ldrb	r3, [r3, #0]
 8016d5c:	021a      	lsls	r2, r3, #8
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	68db      	ldr	r3, [r3, #12]
 8016d62:	431a      	orrs	r2, r3
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	681a      	ldr	r2, [r3, #0]
 8016d6c:	193b      	adds	r3, r7, r4
 8016d6e:	881b      	ldrh	r3, [r3, #0]
 8016d70:	1939      	adds	r1, r7, r4
 8016d72:	1c58      	adds	r0, r3, #1
 8016d74:	8008      	strh	r0, [r1, #0]
 8016d76:	18d3      	adds	r3, r2, r3
 8016d78:	781b      	ldrb	r3, [r3, #0]
 8016d7a:	041a      	lsls	r2, r3, #16
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	68db      	ldr	r3, [r3, #12]
 8016d80:	431a      	orrs	r2, r3
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	681a      	ldr	r2, [r3, #0]
 8016d8a:	193b      	adds	r3, r7, r4
 8016d8c:	881b      	ldrh	r3, [r3, #0]
 8016d8e:	1939      	adds	r1, r7, r4
 8016d90:	1c58      	adds	r0, r3, #1
 8016d92:	8008      	strh	r0, [r1, #0]
 8016d94:	18d3      	adds	r3, r2, r3
 8016d96:	781b      	ldrb	r3, [r3, #0]
 8016d98:	061a      	lsls	r2, r3, #24
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	68db      	ldr	r3, [r3, #12]
 8016d9e:	431a      	orrs	r2, r3
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	681a      	ldr	r2, [r3, #0]
 8016da8:	193b      	adds	r3, r7, r4
 8016daa:	881b      	ldrh	r3, [r3, #0]
 8016dac:	1939      	adds	r1, r7, r4
 8016dae:	1c58      	adds	r0, r3, #1
 8016db0:	8008      	strh	r0, [r1, #0]
 8016db2:	18d3      	adds	r3, r2, r3
 8016db4:	781a      	ldrb	r2, [r3, #0]
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	681a      	ldr	r2, [r3, #0]
 8016dbe:	193b      	adds	r3, r7, r4
 8016dc0:	881b      	ldrh	r3, [r3, #0]
 8016dc2:	1939      	adds	r1, r7, r4
 8016dc4:	1c58      	adds	r0, r3, #1
 8016dc6:	8008      	strh	r0, [r1, #0]
 8016dc8:	18d3      	adds	r3, r2, r3
 8016dca:	781a      	ldrb	r2, [r3, #0]
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	791b      	ldrb	r3, [r3, #4]
 8016dd4:	1f1a      	subs	r2, r3, #4
 8016dd6:	193b      	adds	r3, r7, r4
 8016dd8:	881b      	ldrh	r3, [r3, #0]
 8016dda:	1ad3      	subs	r3, r2, r3
 8016ddc:	2b10      	cmp	r3, #16
 8016dde:	d112      	bne.n	8016e06 <LoRaMacParserJoinAccept+0x14e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	3312      	adds	r3, #18
 8016de4:	0018      	movs	r0, r3
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	681a      	ldr	r2, [r3, #0]
 8016dea:	240e      	movs	r4, #14
 8016dec:	193b      	adds	r3, r7, r4
 8016dee:	881b      	ldrh	r3, [r3, #0]
 8016df0:	18d3      	adds	r3, r2, r3
 8016df2:	2210      	movs	r2, #16
 8016df4:	0019      	movs	r1, r3
 8016df6:	f004 fbb9 	bl	801b56c <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 8016dfa:	193b      	adds	r3, r7, r4
 8016dfc:	193a      	adds	r2, r7, r4
 8016dfe:	8812      	ldrh	r2, [r2, #0]
 8016e00:	3210      	adds	r2, #16
 8016e02:	801a      	strh	r2, [r3, #0]
 8016e04:	e00a      	b.n	8016e1c <LoRaMacParserJoinAccept+0x164>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	791b      	ldrb	r3, [r3, #4]
 8016e0a:	1f1a      	subs	r2, r3, #4
 8016e0c:	230e      	movs	r3, #14
 8016e0e:	18fb      	adds	r3, r7, r3
 8016e10:	881b      	ldrh	r3, [r3, #0]
 8016e12:	1ad3      	subs	r3, r2, r3
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	dd01      	ble.n	8016e1c <LoRaMacParserJoinAccept+0x164>
    {
        return LORAMAC_PARSER_FAIL;
 8016e18:	2301      	movs	r3, #1
 8016e1a:	e03a      	b.n	8016e92 <LoRaMacParserJoinAccept+0x1da>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	681a      	ldr	r2, [r3, #0]
 8016e20:	240e      	movs	r4, #14
 8016e22:	193b      	adds	r3, r7, r4
 8016e24:	881b      	ldrh	r3, [r3, #0]
 8016e26:	1939      	adds	r1, r7, r4
 8016e28:	1c58      	adds	r0, r3, #1
 8016e2a:	8008      	strh	r0, [r1, #0]
 8016e2c:	18d3      	adds	r3, r2, r3
 8016e2e:	781b      	ldrb	r3, [r3, #0]
 8016e30:	001a      	movs	r2, r3
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	681a      	ldr	r2, [r3, #0]
 8016e3a:	193b      	adds	r3, r7, r4
 8016e3c:	881b      	ldrh	r3, [r3, #0]
 8016e3e:	1939      	adds	r1, r7, r4
 8016e40:	1c58      	adds	r0, r3, #1
 8016e42:	8008      	strh	r0, [r1, #0]
 8016e44:	18d3      	adds	r3, r2, r3
 8016e46:	781b      	ldrb	r3, [r3, #0]
 8016e48:	021a      	lsls	r2, r3, #8
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e4e:	431a      	orrs	r2, r3
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	681a      	ldr	r2, [r3, #0]
 8016e58:	193b      	adds	r3, r7, r4
 8016e5a:	881b      	ldrh	r3, [r3, #0]
 8016e5c:	1939      	adds	r1, r7, r4
 8016e5e:	1c58      	adds	r0, r3, #1
 8016e60:	8008      	strh	r0, [r1, #0]
 8016e62:	18d3      	adds	r3, r2, r3
 8016e64:	781b      	ldrb	r3, [r3, #0]
 8016e66:	041a      	lsls	r2, r3, #16
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e6c:	431a      	orrs	r2, r3
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	681a      	ldr	r2, [r3, #0]
 8016e76:	193b      	adds	r3, r7, r4
 8016e78:	881b      	ldrh	r3, [r3, #0]
 8016e7a:	1939      	adds	r1, r7, r4
 8016e7c:	1c58      	adds	r0, r3, #1
 8016e7e:	8008      	strh	r0, [r1, #0]
 8016e80:	18d3      	adds	r3, r2, r3
 8016e82:	781b      	ldrb	r3, [r3, #0]
 8016e84:	061a      	lsls	r2, r3, #24
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e8a:	431a      	orrs	r2, r3
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8016e90:	2300      	movs	r3, #0
}
 8016e92:	0018      	movs	r0, r3
 8016e94:	46bd      	mov	sp, r7
 8016e96:	b005      	add	sp, #20
 8016e98:	bd90      	pop	{r4, r7, pc}

08016e9a <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8016e9a:	b590      	push	{r4, r7, lr}
 8016e9c:	b085      	sub	sp, #20
 8016e9e:	af00      	add	r7, sp, #0
 8016ea0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d003      	beq.n	8016eb0 <LoRaMacParserData+0x16>
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d101      	bne.n	8016eb4 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016eb0:	2302      	movs	r3, #2
 8016eb2:	e100      	b.n	80170b6 <LoRaMacParserData+0x21c>
    }

    uint16_t bufItr = 0;
 8016eb4:	240e      	movs	r4, #14
 8016eb6:	193b      	adds	r3, r7, r4
 8016eb8:	2200      	movs	r2, #0
 8016eba:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	681a      	ldr	r2, [r3, #0]
 8016ec0:	193b      	adds	r3, r7, r4
 8016ec2:	881b      	ldrh	r3, [r3, #0]
 8016ec4:	1939      	adds	r1, r7, r4
 8016ec6:	1c58      	adds	r0, r3, #1
 8016ec8:	8008      	strh	r0, [r1, #0]
 8016eca:	18d3      	adds	r3, r2, r3
 8016ecc:	781a      	ldrb	r2, [r3, #0]
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	681a      	ldr	r2, [r3, #0]
 8016ed6:	193b      	adds	r3, r7, r4
 8016ed8:	881b      	ldrh	r3, [r3, #0]
 8016eda:	1939      	adds	r1, r7, r4
 8016edc:	1c58      	adds	r0, r3, #1
 8016ede:	8008      	strh	r0, [r1, #0]
 8016ee0:	18d3      	adds	r3, r2, r3
 8016ee2:	781b      	ldrb	r3, [r3, #0]
 8016ee4:	001a      	movs	r2, r3
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	681a      	ldr	r2, [r3, #0]
 8016eee:	193b      	adds	r3, r7, r4
 8016ef0:	881b      	ldrh	r3, [r3, #0]
 8016ef2:	1939      	adds	r1, r7, r4
 8016ef4:	1c58      	adds	r0, r3, #1
 8016ef6:	8008      	strh	r0, [r1, #0]
 8016ef8:	18d3      	adds	r3, r2, r3
 8016efa:	781b      	ldrb	r3, [r3, #0]
 8016efc:	021a      	lsls	r2, r3, #8
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	689b      	ldr	r3, [r3, #8]
 8016f02:	431a      	orrs	r2, r3
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	681a      	ldr	r2, [r3, #0]
 8016f0c:	193b      	adds	r3, r7, r4
 8016f0e:	881b      	ldrh	r3, [r3, #0]
 8016f10:	1939      	adds	r1, r7, r4
 8016f12:	1c58      	adds	r0, r3, #1
 8016f14:	8008      	strh	r0, [r1, #0]
 8016f16:	18d3      	adds	r3, r2, r3
 8016f18:	781b      	ldrb	r3, [r3, #0]
 8016f1a:	041a      	lsls	r2, r3, #16
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	689b      	ldr	r3, [r3, #8]
 8016f20:	431a      	orrs	r2, r3
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	681a      	ldr	r2, [r3, #0]
 8016f2a:	193b      	adds	r3, r7, r4
 8016f2c:	881b      	ldrh	r3, [r3, #0]
 8016f2e:	1939      	adds	r1, r7, r4
 8016f30:	1c58      	adds	r0, r3, #1
 8016f32:	8008      	strh	r0, [r1, #0]
 8016f34:	18d3      	adds	r3, r2, r3
 8016f36:	781b      	ldrb	r3, [r3, #0]
 8016f38:	061a      	lsls	r2, r3, #24
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	689b      	ldr	r3, [r3, #8]
 8016f3e:	431a      	orrs	r2, r3
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	681a      	ldr	r2, [r3, #0]
 8016f48:	193b      	adds	r3, r7, r4
 8016f4a:	881b      	ldrh	r3, [r3, #0]
 8016f4c:	1939      	adds	r1, r7, r4
 8016f4e:	1c58      	adds	r0, r3, #1
 8016f50:	8008      	strh	r0, [r1, #0]
 8016f52:	18d3      	adds	r3, r2, r3
 8016f54:	781a      	ldrb	r2, [r3, #0]
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	681a      	ldr	r2, [r3, #0]
 8016f5e:	193b      	adds	r3, r7, r4
 8016f60:	881b      	ldrh	r3, [r3, #0]
 8016f62:	1939      	adds	r1, r7, r4
 8016f64:	1c58      	adds	r0, r3, #1
 8016f66:	8008      	strh	r0, [r1, #0]
 8016f68:	18d3      	adds	r3, r2, r3
 8016f6a:	781b      	ldrb	r3, [r3, #0]
 8016f6c:	b29a      	uxth	r2, r3
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	681a      	ldr	r2, [r3, #0]
 8016f76:	193b      	adds	r3, r7, r4
 8016f78:	881b      	ldrh	r3, [r3, #0]
 8016f7a:	1939      	adds	r1, r7, r4
 8016f7c:	1c58      	adds	r0, r3, #1
 8016f7e:	8008      	strh	r0, [r1, #0]
 8016f80:	18d3      	adds	r3, r2, r3
 8016f82:	781b      	ldrb	r3, [r3, #0]
 8016f84:	0219      	lsls	r1, r3, #8
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	89db      	ldrh	r3, [r3, #14]
 8016f8a:	b21a      	sxth	r2, r3
 8016f8c:	b20b      	sxth	r3, r1
 8016f8e:	4313      	orrs	r3, r2
 8016f90:	b21b      	sxth	r3, r3
 8016f92:	b29a      	uxth	r2, r3
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	3310      	adds	r3, #16
 8016f9c:	0018      	movs	r0, r3
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	681a      	ldr	r2, [r3, #0]
 8016fa2:	193b      	adds	r3, r7, r4
 8016fa4:	881b      	ldrh	r3, [r3, #0]
 8016fa6:	18d1      	adds	r1, r2, r3
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	7b1b      	ldrb	r3, [r3, #12]
 8016fac:	071b      	lsls	r3, r3, #28
 8016fae:	0f1b      	lsrs	r3, r3, #28
 8016fb0:	b2db      	uxtb	r3, r3
 8016fb2:	b29b      	uxth	r3, r3
 8016fb4:	001a      	movs	r2, r3
 8016fb6:	f004 fad9 	bl	801b56c <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	7b1b      	ldrb	r3, [r3, #12]
 8016fbe:	071b      	lsls	r3, r3, #28
 8016fc0:	0f1b      	lsrs	r3, r3, #28
 8016fc2:	b2db      	uxtb	r3, r3
 8016fc4:	b299      	uxth	r1, r3
 8016fc6:	193b      	adds	r3, r7, r4
 8016fc8:	193a      	adds	r2, r7, r4
 8016fca:	8812      	ldrh	r2, [r2, #0]
 8016fcc:	188a      	adds	r2, r1, r2
 8016fce:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	2220      	movs	r2, #32
 8016fd4:	2100      	movs	r1, #0
 8016fd6:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	2228      	movs	r2, #40	; 0x28
 8016fdc:	2100      	movs	r1, #0
 8016fde:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	791b      	ldrb	r3, [r3, #4]
 8016fe4:	001a      	movs	r2, r3
 8016fe6:	193b      	adds	r3, r7, r4
 8016fe8:	881b      	ldrh	r3, [r3, #0]
 8016fea:	1ad3      	subs	r3, r2, r3
 8016fec:	3b04      	subs	r3, #4
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	dd2f      	ble.n	8017052 <LoRaMacParserData+0x1b8>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	681a      	ldr	r2, [r3, #0]
 8016ff6:	240e      	movs	r4, #14
 8016ff8:	193b      	adds	r3, r7, r4
 8016ffa:	881b      	ldrh	r3, [r3, #0]
 8016ffc:	1939      	adds	r1, r7, r4
 8016ffe:	1c58      	adds	r0, r3, #1
 8017000:	8008      	strh	r0, [r1, #0]
 8017002:	18d3      	adds	r3, r2, r3
 8017004:	7819      	ldrb	r1, [r3, #0]
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	2220      	movs	r2, #32
 801700a:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	791a      	ldrb	r2, [r3, #4]
 8017010:	193b      	adds	r3, r7, r4
 8017012:	881b      	ldrh	r3, [r3, #0]
 8017014:	b2db      	uxtb	r3, r3
 8017016:	1ad3      	subs	r3, r2, r3
 8017018:	b2db      	uxtb	r3, r3
 801701a:	3b04      	subs	r3, #4
 801701c:	b2d9      	uxtb	r1, r3
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	2228      	movs	r2, #40	; 0x28
 8017022:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	681a      	ldr	r2, [r3, #0]
 801702c:	193b      	adds	r3, r7, r4
 801702e:	881b      	ldrh	r3, [r3, #0]
 8017030:	18d1      	adds	r1, r2, r3
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	2228      	movs	r2, #40	; 0x28
 8017036:	5c9b      	ldrb	r3, [r3, r2]
 8017038:	b29b      	uxth	r3, r3
 801703a:	001a      	movs	r2, r3
 801703c:	f004 fa96 	bl	801b56c <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	2228      	movs	r2, #40	; 0x28
 8017044:	5c9b      	ldrb	r3, [r3, r2]
 8017046:	b299      	uxth	r1, r3
 8017048:	193b      	adds	r3, r7, r4
 801704a:	193a      	adds	r2, r7, r4
 801704c:	8812      	ldrh	r2, [r2, #0]
 801704e:	188a      	adds	r2, r1, r2
 8017050:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	681a      	ldr	r2, [r3, #0]
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	791b      	ldrb	r3, [r3, #4]
 801705a:	3b04      	subs	r3, #4
 801705c:	18d3      	adds	r3, r2, r3
 801705e:	781b      	ldrb	r3, [r3, #0]
 8017060:	001a      	movs	r2, r3
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	6819      	ldr	r1, [r3, #0]
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	791b      	ldrb	r3, [r3, #4]
 8017072:	3b03      	subs	r3, #3
 8017074:	18cb      	adds	r3, r1, r3
 8017076:	781b      	ldrb	r3, [r3, #0]
 8017078:	021b      	lsls	r3, r3, #8
 801707a:	431a      	orrs	r2, r3
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	6819      	ldr	r1, [r3, #0]
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	791b      	ldrb	r3, [r3, #4]
 801708c:	3b02      	subs	r3, #2
 801708e:	18cb      	adds	r3, r1, r3
 8017090:	781b      	ldrb	r3, [r3, #0]
 8017092:	041b      	lsls	r3, r3, #16
 8017094:	431a      	orrs	r2, r3
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	6819      	ldr	r1, [r3, #0]
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	791b      	ldrb	r3, [r3, #4]
 80170a6:	3b01      	subs	r3, #1
 80170a8:	18cb      	adds	r3, r1, r3
 80170aa:	781b      	ldrb	r3, [r3, #0]
 80170ac:	061b      	lsls	r3, r3, #24
 80170ae:	431a      	orrs	r2, r3
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80170b4:	2300      	movs	r3, #0
}
 80170b6:	0018      	movs	r0, r3
 80170b8:	46bd      	mov	sp, r7
 80170ba:	b005      	add	sp, #20
 80170bc:	bd90      	pop	{r4, r7, pc}

080170be <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80170be:	b5b0      	push	{r4, r5, r7, lr}
 80170c0:	b084      	sub	sp, #16
 80170c2:	af00      	add	r7, sp, #0
 80170c4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d003      	beq.n	80170d4 <LoRaMacSerializerJoinRequest+0x16>
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d101      	bne.n	80170d8 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80170d4:	2301      	movs	r3, #1
 80170d6:	e089      	b.n	80171ec <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 80170d8:	230e      	movs	r3, #14
 80170da:	18fb      	adds	r3, r7, r3
 80170dc:	2200      	movs	r2, #0
 80170de:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	791b      	ldrb	r3, [r3, #4]
 80170e4:	2b16      	cmp	r3, #22
 80170e6:	d801      	bhi.n	80170ec <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80170e8:	2302      	movs	r3, #2
 80170ea:	e07f      	b.n	80171ec <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	681a      	ldr	r2, [r3, #0]
 80170f0:	240e      	movs	r4, #14
 80170f2:	193b      	adds	r3, r7, r4
 80170f4:	881b      	ldrh	r3, [r3, #0]
 80170f6:	1939      	adds	r1, r7, r4
 80170f8:	1c58      	adds	r0, r3, #1
 80170fa:	8008      	strh	r0, [r1, #0]
 80170fc:	18d3      	adds	r3, r2, r3
 80170fe:	687a      	ldr	r2, [r7, #4]
 8017100:	7952      	ldrb	r2, [r2, #5]
 8017102:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	681a      	ldr	r2, [r3, #0]
 8017108:	193b      	adds	r3, r7, r4
 801710a:	881b      	ldrh	r3, [r3, #0]
 801710c:	18d0      	adds	r0, r2, r3
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	3306      	adds	r3, #6
 8017112:	2208      	movs	r2, #8
 8017114:	0019      	movs	r1, r3
 8017116:	f004 fa44 	bl	801b5a2 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801711a:	193b      	adds	r3, r7, r4
 801711c:	193a      	adds	r2, r7, r4
 801711e:	8812      	ldrh	r2, [r2, #0]
 8017120:	3208      	adds	r2, #8
 8017122:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	681a      	ldr	r2, [r3, #0]
 8017128:	193b      	adds	r3, r7, r4
 801712a:	881b      	ldrh	r3, [r3, #0]
 801712c:	18d0      	adds	r0, r2, r3
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	330e      	adds	r3, #14
 8017132:	2208      	movs	r2, #8
 8017134:	0019      	movs	r1, r3
 8017136:	f004 fa34 	bl	801b5a2 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 801713a:	193b      	adds	r3, r7, r4
 801713c:	0025      	movs	r5, r4
 801713e:	193a      	adds	r2, r7, r4
 8017140:	8812      	ldrh	r2, [r2, #0]
 8017142:	3208      	adds	r2, #8
 8017144:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	8ad8      	ldrh	r0, [r3, #22]
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	681a      	ldr	r2, [r3, #0]
 801714e:	197b      	adds	r3, r7, r5
 8017150:	881b      	ldrh	r3, [r3, #0]
 8017152:	1979      	adds	r1, r7, r5
 8017154:	1c5c      	adds	r4, r3, #1
 8017156:	800c      	strh	r4, [r1, #0]
 8017158:	18d3      	adds	r3, r2, r3
 801715a:	b2c2      	uxtb	r2, r0
 801715c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	8adb      	ldrh	r3, [r3, #22]
 8017162:	0a1b      	lsrs	r3, r3, #8
 8017164:	b298      	uxth	r0, r3
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	681a      	ldr	r2, [r3, #0]
 801716a:	197b      	adds	r3, r7, r5
 801716c:	881b      	ldrh	r3, [r3, #0]
 801716e:	1979      	adds	r1, r7, r5
 8017170:	1c5c      	adds	r4, r3, #1
 8017172:	800c      	strh	r4, [r1, #0]
 8017174:	18d3      	adds	r3, r2, r3
 8017176:	b2c2      	uxtb	r2, r0
 8017178:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	6998      	ldr	r0, [r3, #24]
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	681a      	ldr	r2, [r3, #0]
 8017182:	197b      	adds	r3, r7, r5
 8017184:	881b      	ldrh	r3, [r3, #0]
 8017186:	1979      	adds	r1, r7, r5
 8017188:	1c5c      	adds	r4, r3, #1
 801718a:	800c      	strh	r4, [r1, #0]
 801718c:	18d3      	adds	r3, r2, r3
 801718e:	b2c2      	uxtb	r2, r0
 8017190:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	699b      	ldr	r3, [r3, #24]
 8017196:	0a18      	lsrs	r0, r3, #8
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	681a      	ldr	r2, [r3, #0]
 801719c:	197b      	adds	r3, r7, r5
 801719e:	881b      	ldrh	r3, [r3, #0]
 80171a0:	1979      	adds	r1, r7, r5
 80171a2:	1c5c      	adds	r4, r3, #1
 80171a4:	800c      	strh	r4, [r1, #0]
 80171a6:	18d3      	adds	r3, r2, r3
 80171a8:	b2c2      	uxtb	r2, r0
 80171aa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	699b      	ldr	r3, [r3, #24]
 80171b0:	0c18      	lsrs	r0, r3, #16
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	681a      	ldr	r2, [r3, #0]
 80171b6:	197b      	adds	r3, r7, r5
 80171b8:	881b      	ldrh	r3, [r3, #0]
 80171ba:	1979      	adds	r1, r7, r5
 80171bc:	1c5c      	adds	r4, r3, #1
 80171be:	800c      	strh	r4, [r1, #0]
 80171c0:	18d3      	adds	r3, r2, r3
 80171c2:	b2c2      	uxtb	r2, r0
 80171c4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	699b      	ldr	r3, [r3, #24]
 80171ca:	0e18      	lsrs	r0, r3, #24
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	681a      	ldr	r2, [r3, #0]
 80171d0:	197b      	adds	r3, r7, r5
 80171d2:	881b      	ldrh	r3, [r3, #0]
 80171d4:	1979      	adds	r1, r7, r5
 80171d6:	1c5c      	adds	r4, r3, #1
 80171d8:	800c      	strh	r4, [r1, #0]
 80171da:	18d3      	adds	r3, r2, r3
 80171dc:	b2c2      	uxtb	r2, r0
 80171de:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80171e0:	197b      	adds	r3, r7, r5
 80171e2:	881b      	ldrh	r3, [r3, #0]
 80171e4:	b2da      	uxtb	r2, r3
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80171ea:	2300      	movs	r3, #0
}
 80171ec:	0018      	movs	r0, r3
 80171ee:	46bd      	mov	sp, r7
 80171f0:	b004      	add	sp, #16
 80171f2:	bdb0      	pop	{r4, r5, r7, pc}

080171f4 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80171f4:	b5b0      	push	{r4, r5, r7, lr}
 80171f6:	b084      	sub	sp, #16
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d003      	beq.n	801720a <LoRaMacSerializerData+0x16>
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	2b00      	cmp	r3, #0
 8017208:	d101      	bne.n	801720e <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801720a:	2301      	movs	r3, #1
 801720c:	e11b      	b.n	8017446 <LoRaMacSerializerData+0x252>
    }

    uint16_t bufItr = 0;
 801720e:	230e      	movs	r3, #14
 8017210:	18fb      	adds	r3, r7, r3
 8017212:	2200      	movs	r2, #0
 8017214:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8017216:	200c      	movs	r0, #12
 8017218:	183b      	adds	r3, r7, r0
 801721a:	2208      	movs	r2, #8
 801721c:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	7b1b      	ldrb	r3, [r3, #12]
 8017222:	071b      	lsls	r3, r3, #28
 8017224:	0f1b      	lsrs	r3, r3, #28
 8017226:	b2db      	uxtb	r3, r3
 8017228:	b299      	uxth	r1, r3
 801722a:	183b      	adds	r3, r7, r0
 801722c:	183a      	adds	r2, r7, r0
 801722e:	8812      	ldrh	r2, [r2, #0]
 8017230:	188a      	adds	r2, r1, r2
 8017232:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	2228      	movs	r2, #40	; 0x28
 8017238:	5c9b      	ldrb	r3, [r3, r2]
 801723a:	2b00      	cmp	r3, #0
 801723c:	d005      	beq.n	801724a <LoRaMacSerializerData+0x56>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801723e:	220c      	movs	r2, #12
 8017240:	18bb      	adds	r3, r7, r2
 8017242:	18ba      	adds	r2, r7, r2
 8017244:	8812      	ldrh	r2, [r2, #0]
 8017246:	3201      	adds	r2, #1
 8017248:	801a      	strh	r2, [r3, #0]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	2228      	movs	r2, #40	; 0x28
 801724e:	5c9b      	ldrb	r3, [r3, r2]
 8017250:	b299      	uxth	r1, r3
 8017252:	200c      	movs	r0, #12
 8017254:	183b      	adds	r3, r7, r0
 8017256:	183a      	adds	r2, r7, r0
 8017258:	8812      	ldrh	r2, [r2, #0]
 801725a:	188a      	adds	r2, r1, r2
 801725c:	801a      	strh	r2, [r3, #0]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 801725e:	0001      	movs	r1, r0
 8017260:	187b      	adds	r3, r7, r1
 8017262:	187a      	adds	r2, r7, r1
 8017264:	8812      	ldrh	r2, [r2, #0]
 8017266:	3204      	adds	r2, #4
 8017268:	801a      	strh	r2, [r3, #0]

    if( macMsg->BufSize < computedBufSize )
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	791b      	ldrb	r3, [r3, #4]
 801726e:	b29b      	uxth	r3, r3
 8017270:	187a      	adds	r2, r7, r1
 8017272:	8812      	ldrh	r2, [r2, #0]
 8017274:	429a      	cmp	r2, r3
 8017276:	d901      	bls.n	801727c <LoRaMacSerializerData+0x88>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017278:	2302      	movs	r3, #2
 801727a:	e0e4      	b.n	8017446 <LoRaMacSerializerData+0x252>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	681a      	ldr	r2, [r3, #0]
 8017280:	250e      	movs	r5, #14
 8017282:	197b      	adds	r3, r7, r5
 8017284:	881b      	ldrh	r3, [r3, #0]
 8017286:	1979      	adds	r1, r7, r5
 8017288:	1c58      	adds	r0, r3, #1
 801728a:	8008      	strh	r0, [r1, #0]
 801728c:	18d3      	adds	r3, r2, r3
 801728e:	687a      	ldr	r2, [r7, #4]
 8017290:	7952      	ldrb	r2, [r2, #5]
 8017292:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	6898      	ldr	r0, [r3, #8]
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	681a      	ldr	r2, [r3, #0]
 801729c:	197b      	adds	r3, r7, r5
 801729e:	881b      	ldrh	r3, [r3, #0]
 80172a0:	1979      	adds	r1, r7, r5
 80172a2:	1c5c      	adds	r4, r3, #1
 80172a4:	800c      	strh	r4, [r1, #0]
 80172a6:	18d3      	adds	r3, r2, r3
 80172a8:	b2c2      	uxtb	r2, r0
 80172aa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	689b      	ldr	r3, [r3, #8]
 80172b0:	0a18      	lsrs	r0, r3, #8
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	681a      	ldr	r2, [r3, #0]
 80172b6:	197b      	adds	r3, r7, r5
 80172b8:	881b      	ldrh	r3, [r3, #0]
 80172ba:	1979      	adds	r1, r7, r5
 80172bc:	1c5c      	adds	r4, r3, #1
 80172be:	800c      	strh	r4, [r1, #0]
 80172c0:	18d3      	adds	r3, r2, r3
 80172c2:	b2c2      	uxtb	r2, r0
 80172c4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	689b      	ldr	r3, [r3, #8]
 80172ca:	0c18      	lsrs	r0, r3, #16
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	681a      	ldr	r2, [r3, #0]
 80172d0:	197b      	adds	r3, r7, r5
 80172d2:	881b      	ldrh	r3, [r3, #0]
 80172d4:	1979      	adds	r1, r7, r5
 80172d6:	1c5c      	adds	r4, r3, #1
 80172d8:	800c      	strh	r4, [r1, #0]
 80172da:	18d3      	adds	r3, r2, r3
 80172dc:	b2c2      	uxtb	r2, r0
 80172de:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	689b      	ldr	r3, [r3, #8]
 80172e4:	0e18      	lsrs	r0, r3, #24
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	681a      	ldr	r2, [r3, #0]
 80172ea:	197b      	adds	r3, r7, r5
 80172ec:	881b      	ldrh	r3, [r3, #0]
 80172ee:	1979      	adds	r1, r7, r5
 80172f0:	1c5c      	adds	r4, r3, #1
 80172f2:	800c      	strh	r4, [r1, #0]
 80172f4:	18d3      	adds	r3, r2, r3
 80172f6:	b2c2      	uxtb	r2, r0
 80172f8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	681a      	ldr	r2, [r3, #0]
 80172fe:	197b      	adds	r3, r7, r5
 8017300:	881b      	ldrh	r3, [r3, #0]
 8017302:	1979      	adds	r1, r7, r5
 8017304:	1c58      	adds	r0, r3, #1
 8017306:	8008      	strh	r0, [r1, #0]
 8017308:	18d3      	adds	r3, r2, r3
 801730a:	687a      	ldr	r2, [r7, #4]
 801730c:	7b12      	ldrb	r2, [r2, #12]
 801730e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	89d8      	ldrh	r0, [r3, #14]
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	681a      	ldr	r2, [r3, #0]
 8017318:	197b      	adds	r3, r7, r5
 801731a:	881b      	ldrh	r3, [r3, #0]
 801731c:	1979      	adds	r1, r7, r5
 801731e:	1c5c      	adds	r4, r3, #1
 8017320:	800c      	strh	r4, [r1, #0]
 8017322:	18d3      	adds	r3, r2, r3
 8017324:	b2c2      	uxtb	r2, r0
 8017326:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	89db      	ldrh	r3, [r3, #14]
 801732c:	0a1b      	lsrs	r3, r3, #8
 801732e:	b298      	uxth	r0, r3
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	681a      	ldr	r2, [r3, #0]
 8017334:	197b      	adds	r3, r7, r5
 8017336:	881b      	ldrh	r3, [r3, #0]
 8017338:	1979      	adds	r1, r7, r5
 801733a:	1c5c      	adds	r4, r3, #1
 801733c:	800c      	strh	r4, [r1, #0]
 801733e:	18d3      	adds	r3, r2, r3
 8017340:	b2c2      	uxtb	r2, r0
 8017342:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	681a      	ldr	r2, [r3, #0]
 8017348:	002c      	movs	r4, r5
 801734a:	197b      	adds	r3, r7, r5
 801734c:	881b      	ldrh	r3, [r3, #0]
 801734e:	18d0      	adds	r0, r2, r3
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	3310      	adds	r3, #16
 8017354:	0019      	movs	r1, r3
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	7b1b      	ldrb	r3, [r3, #12]
 801735a:	071b      	lsls	r3, r3, #28
 801735c:	0f1b      	lsrs	r3, r3, #28
 801735e:	b2db      	uxtb	r3, r3
 8017360:	b29b      	uxth	r3, r3
 8017362:	001a      	movs	r2, r3
 8017364:	f004 f902 	bl	801b56c <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	7b1b      	ldrb	r3, [r3, #12]
 801736c:	071b      	lsls	r3, r3, #28
 801736e:	0f1b      	lsrs	r3, r3, #28
 8017370:	b2db      	uxtb	r3, r3
 8017372:	b299      	uxth	r1, r3
 8017374:	193b      	adds	r3, r7, r4
 8017376:	193a      	adds	r2, r7, r4
 8017378:	8812      	ldrh	r2, [r2, #0]
 801737a:	188a      	adds	r2, r1, r2
 801737c:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	2228      	movs	r2, #40	; 0x28
 8017382:	5c9b      	ldrb	r3, [r3, r2]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d00c      	beq.n	80173a2 <LoRaMacSerializerData+0x1ae>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681a      	ldr	r2, [r3, #0]
 801738c:	210e      	movs	r1, #14
 801738e:	187b      	adds	r3, r7, r1
 8017390:	881b      	ldrh	r3, [r3, #0]
 8017392:	1879      	adds	r1, r7, r1
 8017394:	1c58      	adds	r0, r3, #1
 8017396:	8008      	strh	r0, [r1, #0]
 8017398:	18d3      	adds	r3, r2, r3
 801739a:	687a      	ldr	r2, [r7, #4]
 801739c:	2120      	movs	r1, #32
 801739e:	5c52      	ldrb	r2, [r2, r1]
 80173a0:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	681a      	ldr	r2, [r3, #0]
 80173a6:	240e      	movs	r4, #14
 80173a8:	193b      	adds	r3, r7, r4
 80173aa:	881b      	ldrh	r3, [r3, #0]
 80173ac:	18d0      	adds	r0, r2, r3
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	2228      	movs	r2, #40	; 0x28
 80173b6:	5c9b      	ldrb	r3, [r3, r2]
 80173b8:	b29b      	uxth	r3, r3
 80173ba:	001a      	movs	r2, r3
 80173bc:	f004 f8d6 	bl	801b56c <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	2228      	movs	r2, #40	; 0x28
 80173c4:	5c9b      	ldrb	r3, [r3, r2]
 80173c6:	b299      	uxth	r1, r3
 80173c8:	193b      	adds	r3, r7, r4
 80173ca:	193a      	adds	r2, r7, r4
 80173cc:	8812      	ldrh	r2, [r2, #0]
 80173ce:	188a      	adds	r2, r1, r2
 80173d0:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	681a      	ldr	r2, [r3, #0]
 80173da:	193b      	adds	r3, r7, r4
 80173dc:	881b      	ldrh	r3, [r3, #0]
 80173de:	0025      	movs	r5, r4
 80173e0:	1939      	adds	r1, r7, r4
 80173e2:	1c5c      	adds	r4, r3, #1
 80173e4:	800c      	strh	r4, [r1, #0]
 80173e6:	18d3      	adds	r3, r2, r3
 80173e8:	b2c2      	uxtb	r2, r0
 80173ea:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173f0:	0a18      	lsrs	r0, r3, #8
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	681a      	ldr	r2, [r3, #0]
 80173f6:	197b      	adds	r3, r7, r5
 80173f8:	881b      	ldrh	r3, [r3, #0]
 80173fa:	1979      	adds	r1, r7, r5
 80173fc:	1c5c      	adds	r4, r3, #1
 80173fe:	800c      	strh	r4, [r1, #0]
 8017400:	18d3      	adds	r3, r2, r3
 8017402:	b2c2      	uxtb	r2, r0
 8017404:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801740a:	0c18      	lsrs	r0, r3, #16
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	681a      	ldr	r2, [r3, #0]
 8017410:	197b      	adds	r3, r7, r5
 8017412:	881b      	ldrh	r3, [r3, #0]
 8017414:	1979      	adds	r1, r7, r5
 8017416:	1c5c      	adds	r4, r3, #1
 8017418:	800c      	strh	r4, [r1, #0]
 801741a:	18d3      	adds	r3, r2, r3
 801741c:	b2c2      	uxtb	r2, r0
 801741e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017424:	0e18      	lsrs	r0, r3, #24
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	681a      	ldr	r2, [r3, #0]
 801742a:	197b      	adds	r3, r7, r5
 801742c:	881b      	ldrh	r3, [r3, #0]
 801742e:	1979      	adds	r1, r7, r5
 8017430:	1c5c      	adds	r4, r3, #1
 8017432:	800c      	strh	r4, [r1, #0]
 8017434:	18d3      	adds	r3, r2, r3
 8017436:	b2c2      	uxtb	r2, r0
 8017438:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801743a:	197b      	adds	r3, r7, r5
 801743c:	881b      	ldrh	r3, [r3, #0]
 801743e:	b2da      	uxtb	r2, r3
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017444:	2300      	movs	r3, #0
}
 8017446:	0018      	movs	r0, r3
 8017448:	46bd      	mov	sp, r7
 801744a:	b004      	add	sp, #16
 801744c:	bdb0      	pop	{r4, r5, r7, pc}

0801744e <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 801744e:	b580      	push	{r7, lr}
 8017450:	b082      	sub	sp, #8
 8017452:	af00      	add	r7, sp, #0
 8017454:	0002      	movs	r2, r0
 8017456:	1dfb      	adds	r3, r7, #7
 8017458:	701a      	strb	r2, [r3, #0]
    switch( region )
 801745a:	1dfb      	adds	r3, r7, #7
 801745c:	781b      	ldrb	r3, [r3, #0]
 801745e:	2b07      	cmp	r3, #7
 8017460:	d101      	bne.n	8017466 <RegionIsActive+0x18>
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
 8017462:	2301      	movs	r3, #1
 8017464:	e000      	b.n	8017468 <RegionIsActive+0x1a>
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8017466:	2300      	movs	r3, #0
        }
    }
}
 8017468:	0018      	movs	r0, r3
 801746a:	46bd      	mov	sp, r7
 801746c:	b002      	add	sp, #8
 801746e:	bd80      	pop	{r7, pc}

08017470 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8017470:	b580      	push	{r7, lr}
 8017472:	b084      	sub	sp, #16
 8017474:	af00      	add	r7, sp, #0
 8017476:	0002      	movs	r2, r0
 8017478:	6039      	str	r1, [r7, #0]
 801747a:	1dfb      	adds	r3, r7, #7
 801747c:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 801747e:	2308      	movs	r3, #8
 8017480:	18fb      	adds	r3, r7, r3
 8017482:	2200      	movs	r2, #0
 8017484:	601a      	str	r2, [r3, #0]
    switch( region )
 8017486:	1dfb      	adds	r3, r7, #7
 8017488:	781b      	ldrb	r3, [r3, #0]
 801748a:	2b07      	cmp	r3, #7
 801748c:	d109      	bne.n	80174a2 <RegionGetPhyParam+0x32>
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
 801748e:	683b      	ldr	r3, [r7, #0]
 8017490:	0018      	movs	r0, r3
 8017492:	f001 f8cd 	bl	8018630 <RegionIN865GetPhyParam>
 8017496:	0003      	movs	r3, r0
 8017498:	001a      	movs	r2, r3
 801749a:	230c      	movs	r3, #12
 801749c:	18fb      	adds	r3, r7, r3
 801749e:	601a      	str	r2, [r3, #0]
 80174a0:	e005      	b.n	80174ae <RegionGetPhyParam+0x3e>
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80174a2:	230c      	movs	r3, #12
 80174a4:	18fb      	adds	r3, r7, r3
 80174a6:	2208      	movs	r2, #8
 80174a8:	18ba      	adds	r2, r7, r2
 80174aa:	6812      	ldr	r2, [r2, #0]
 80174ac:	601a      	str	r2, [r3, #0]
 80174ae:	230c      	movs	r3, #12
 80174b0:	18fb      	adds	r3, r7, r3
 80174b2:	2200      	movs	r2, #0
 80174b4:	681a      	ldr	r2, [r3, #0]
 80174b6:	0013      	movs	r3, r2
        }
    }
}
 80174b8:	0018      	movs	r0, r3
 80174ba:	46bd      	mov	sp, r7
 80174bc:	b004      	add	sp, #16
 80174be:	bd80      	pop	{r7, pc}

080174c0 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80174c0:	b580      	push	{r7, lr}
 80174c2:	b082      	sub	sp, #8
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	0002      	movs	r2, r0
 80174c8:	6039      	str	r1, [r7, #0]
 80174ca:	1dfb      	adds	r3, r7, #7
 80174cc:	701a      	strb	r2, [r3, #0]
    switch( region )
 80174ce:	1dfb      	adds	r3, r7, #7
 80174d0:	781b      	ldrb	r3, [r3, #0]
 80174d2:	2b07      	cmp	r3, #7
 80174d4:	d000      	beq.n	80174d8 <RegionSetBandTxDone+0x18>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80174d6:	e004      	b.n	80174e2 <RegionSetBandTxDone+0x22>
        IN865_SET_BAND_TX_DONE( );
 80174d8:	683b      	ldr	r3, [r7, #0]
 80174da:	0018      	movs	r0, r3
 80174dc:	f001 f9ac 	bl	8018838 <RegionIN865SetBandTxDone>
 80174e0:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80174e2:	46bd      	mov	sp, r7
 80174e4:	b002      	add	sp, #8
 80174e6:	bd80      	pop	{r7, pc}

080174e8 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b082      	sub	sp, #8
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	0002      	movs	r2, r0
 80174f0:	6039      	str	r1, [r7, #0]
 80174f2:	1dfb      	adds	r3, r7, #7
 80174f4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80174f6:	1dfb      	adds	r3, r7, #7
 80174f8:	781b      	ldrb	r3, [r3, #0]
 80174fa:	2b07      	cmp	r3, #7
 80174fc:	d000      	beq.n	8017500 <RegionInitDefaults+0x18>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80174fe:	e004      	b.n	801750a <RegionInitDefaults+0x22>
        IN865_INIT_DEFAULTS( );
 8017500:	683b      	ldr	r3, [r7, #0]
 8017502:	0018      	movs	r0, r3
 8017504:	f001 f9b8 	bl	8018878 <RegionIN865InitDefaults>
 8017508:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801750a:	46c0      	nop			; (mov r8, r8)
 801750c:	46bd      	mov	sp, r7
 801750e:	b002      	add	sp, #8
 8017510:	bd80      	pop	{r7, pc}

08017512 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8017512:	b580      	push	{r7, lr}
 8017514:	b082      	sub	sp, #8
 8017516:	af00      	add	r7, sp, #0
 8017518:	0002      	movs	r2, r0
 801751a:	6039      	str	r1, [r7, #0]
 801751c:	1dfb      	adds	r3, r7, #7
 801751e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017520:	1dfb      	adds	r3, r7, #7
 8017522:	781b      	ldrb	r3, [r3, #0]
 8017524:	2b07      	cmp	r3, #7
 8017526:	d105      	bne.n	8017534 <RegionGetNvmCtx+0x22>
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
        KR920_GET_NVM_CTX( );
        IN865_GET_NVM_CTX( );
 8017528:	683b      	ldr	r3, [r7, #0]
 801752a:	0018      	movs	r0, r3
 801752c:	f001 fa1a 	bl	8018964 <RegionIN865GetNvmCtx>
 8017530:	0003      	movs	r3, r0
 8017532:	e000      	b.n	8017536 <RegionGetNvmCtx+0x24>
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 8017534:	2300      	movs	r3, #0
        }
    }
}
 8017536:	0018      	movs	r0, r3
 8017538:	46bd      	mov	sp, r7
 801753a:	b002      	add	sp, #8
 801753c:	bd80      	pop	{r7, pc}

0801753e <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801753e:	b580      	push	{r7, lr}
 8017540:	b082      	sub	sp, #8
 8017542:	af00      	add	r7, sp, #0
 8017544:	6039      	str	r1, [r7, #0]
 8017546:	0011      	movs	r1, r2
 8017548:	1dfb      	adds	r3, r7, #7
 801754a:	1c02      	adds	r2, r0, #0
 801754c:	701a      	strb	r2, [r3, #0]
 801754e:	1dbb      	adds	r3, r7, #6
 8017550:	1c0a      	adds	r2, r1, #0
 8017552:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017554:	1dfb      	adds	r3, r7, #7
 8017556:	781b      	ldrb	r3, [r3, #0]
 8017558:	2b07      	cmp	r3, #7
 801755a:	d108      	bne.n	801756e <RegionVerify+0x30>
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
        KR920_VERIFY( );
        IN865_VERIFY( );
 801755c:	1dbb      	adds	r3, r7, #6
 801755e:	781a      	ldrb	r2, [r3, #0]
 8017560:	683b      	ldr	r3, [r7, #0]
 8017562:	0011      	movs	r1, r2
 8017564:	0018      	movs	r0, r3
 8017566:	f001 fa0b 	bl	8018980 <RegionIN865Verify>
 801756a:	0003      	movs	r3, r0
 801756c:	e000      	b.n	8017570 <RegionVerify+0x32>
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 801756e:	2300      	movs	r3, #0
        }
    }
}
 8017570:	0018      	movs	r0, r3
 8017572:	46bd      	mov	sp, r7
 8017574:	b002      	add	sp, #8
 8017576:	bd80      	pop	{r7, pc}

08017578 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8017578:	b580      	push	{r7, lr}
 801757a:	b082      	sub	sp, #8
 801757c:	af00      	add	r7, sp, #0
 801757e:	0002      	movs	r2, r0
 8017580:	6039      	str	r1, [r7, #0]
 8017582:	1dfb      	adds	r3, r7, #7
 8017584:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017586:	1dfb      	adds	r3, r7, #7
 8017588:	781b      	ldrb	r3, [r3, #0]
 801758a:	2b07      	cmp	r3, #7
 801758c:	d000      	beq.n	8017590 <RegionApplyCFList+0x18>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801758e:	e004      	b.n	801759a <RegionApplyCFList+0x22>
        IN865_APPLY_CF_LIST( );
 8017590:	683b      	ldr	r3, [r7, #0]
 8017592:	0018      	movs	r0, r3
 8017594:	f001 fa56 	bl	8018a44 <RegionIN865ApplyCFList>
 8017598:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801759a:	46c0      	nop			; (mov r8, r8)
 801759c:	46bd      	mov	sp, r7
 801759e:	b002      	add	sp, #8
 80175a0:	bd80      	pop	{r7, pc}

080175a2 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80175a2:	b580      	push	{r7, lr}
 80175a4:	b082      	sub	sp, #8
 80175a6:	af00      	add	r7, sp, #0
 80175a8:	0002      	movs	r2, r0
 80175aa:	6039      	str	r1, [r7, #0]
 80175ac:	1dfb      	adds	r3, r7, #7
 80175ae:	701a      	strb	r2, [r3, #0]
    switch( region )
 80175b0:	1dfb      	adds	r3, r7, #7
 80175b2:	781b      	ldrb	r3, [r3, #0]
 80175b4:	2b07      	cmp	r3, #7
 80175b6:	d105      	bne.n	80175c4 <RegionChanMaskSet+0x22>
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
 80175b8:	683b      	ldr	r3, [r7, #0]
 80175ba:	0018      	movs	r0, r3
 80175bc:	f001 fad4 	bl	8018b68 <RegionIN865ChanMaskSet>
 80175c0:	0003      	movs	r3, r0
 80175c2:	e000      	b.n	80175c6 <RegionChanMaskSet+0x24>
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80175c4:	2300      	movs	r3, #0
        }
    }
}
 80175c6:	0018      	movs	r0, r3
 80175c8:	46bd      	mov	sp, r7
 80175ca:	b002      	add	sp, #8
 80175cc:	bd80      	pop	{r7, pc}

080175ce <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80175ce:	b590      	push	{r4, r7, lr}
 80175d0:	b083      	sub	sp, #12
 80175d2:	af00      	add	r7, sp, #0
 80175d4:	0004      	movs	r4, r0
 80175d6:	0008      	movs	r0, r1
 80175d8:	0011      	movs	r1, r2
 80175da:	603b      	str	r3, [r7, #0]
 80175dc:	1dfb      	adds	r3, r7, #7
 80175de:	1c22      	adds	r2, r4, #0
 80175e0:	701a      	strb	r2, [r3, #0]
 80175e2:	1dbb      	adds	r3, r7, #6
 80175e4:	1c02      	adds	r2, r0, #0
 80175e6:	701a      	strb	r2, [r3, #0]
 80175e8:	1d7b      	adds	r3, r7, #5
 80175ea:	1c0a      	adds	r2, r1, #0
 80175ec:	701a      	strb	r2, [r3, #0]
    switch( region )
 80175ee:	1dfb      	adds	r3, r7, #7
 80175f0:	781b      	ldrb	r3, [r3, #0]
 80175f2:	2b07      	cmp	r3, #7
 80175f4:	d000      	beq.n	80175f8 <RegionComputeRxWindowParameters+0x2a>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80175f6:	e00a      	b.n	801760e <RegionComputeRxWindowParameters+0x40>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
 80175f8:	69bc      	ldr	r4, [r7, #24]
 80175fa:	683a      	ldr	r2, [r7, #0]
 80175fc:	1d7b      	adds	r3, r7, #5
 80175fe:	7819      	ldrb	r1, [r3, #0]
 8017600:	1dbb      	adds	r3, r7, #6
 8017602:	2000      	movs	r0, #0
 8017604:	5618      	ldrsb	r0, [r3, r0]
 8017606:	0023      	movs	r3, r4
 8017608:	f001 fad4 	bl	8018bb4 <RegionIN865ComputeRxWindowParameters>
 801760c:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801760e:	46c0      	nop			; (mov r8, r8)
 8017610:	46bd      	mov	sp, r7
 8017612:	b003      	add	sp, #12
 8017614:	bd90      	pop	{r4, r7, pc}

08017616 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017616:	b580      	push	{r7, lr}
 8017618:	b084      	sub	sp, #16
 801761a:	af00      	add	r7, sp, #0
 801761c:	60b9      	str	r1, [r7, #8]
 801761e:	607a      	str	r2, [r7, #4]
 8017620:	210f      	movs	r1, #15
 8017622:	187b      	adds	r3, r7, r1
 8017624:	1c02      	adds	r2, r0, #0
 8017626:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017628:	187b      	adds	r3, r7, r1
 801762a:	781b      	ldrb	r3, [r3, #0]
 801762c:	2b07      	cmp	r3, #7
 801762e:	d107      	bne.n	8017640 <RegionRxConfig+0x2a>
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
 8017630:	687a      	ldr	r2, [r7, #4]
 8017632:	68bb      	ldr	r3, [r7, #8]
 8017634:	0011      	movs	r1, r2
 8017636:	0018      	movs	r0, r3
 8017638:	f001 fb26 	bl	8018c88 <RegionIN865RxConfig>
 801763c:	0003      	movs	r3, r0
 801763e:	e000      	b.n	8017642 <RegionRxConfig+0x2c>
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8017640:	2300      	movs	r3, #0
        }
    }
}
 8017642:	0018      	movs	r0, r3
 8017644:	46bd      	mov	sp, r7
 8017646:	b004      	add	sp, #16
 8017648:	bd80      	pop	{r7, pc}

0801764a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801764a:	b580      	push	{r7, lr}
 801764c:	b084      	sub	sp, #16
 801764e:	af00      	add	r7, sp, #0
 8017650:	60b9      	str	r1, [r7, #8]
 8017652:	607a      	str	r2, [r7, #4]
 8017654:	603b      	str	r3, [r7, #0]
 8017656:	210f      	movs	r1, #15
 8017658:	187b      	adds	r3, r7, r1
 801765a:	1c02      	adds	r2, r0, #0
 801765c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801765e:	187b      	adds	r3, r7, r1
 8017660:	781b      	ldrb	r3, [r3, #0]
 8017662:	2b07      	cmp	r3, #7
 8017664:	d107      	bne.n	8017676 <RegionTxConfig+0x2c>
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
 8017666:	683a      	ldr	r2, [r7, #0]
 8017668:	6879      	ldr	r1, [r7, #4]
 801766a:	68bb      	ldr	r3, [r7, #8]
 801766c:	0018      	movs	r0, r3
 801766e:	f001 fbf7 	bl	8018e60 <RegionIN865TxConfig>
 8017672:	0003      	movs	r3, r0
 8017674:	e000      	b.n	8017678 <RegionTxConfig+0x2e>
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8017676:	2300      	movs	r3, #0
        }
    }
}
 8017678:	0018      	movs	r0, r3
 801767a:	46bd      	mov	sp, r7
 801767c:	b004      	add	sp, #16
 801767e:	bd80      	pop	{r7, pc}

08017680 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017680:	b590      	push	{r4, r7, lr}
 8017682:	b087      	sub	sp, #28
 8017684:	af02      	add	r7, sp, #8
 8017686:	60b9      	str	r1, [r7, #8]
 8017688:	607a      	str	r2, [r7, #4]
 801768a:	603b      	str	r3, [r7, #0]
 801768c:	210f      	movs	r1, #15
 801768e:	187b      	adds	r3, r7, r1
 8017690:	1c02      	adds	r2, r0, #0
 8017692:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017694:	187b      	adds	r3, r7, r1
 8017696:	781b      	ldrb	r3, [r3, #0]
 8017698:	2b07      	cmp	r3, #7
 801769a:	d10a      	bne.n	80176b2 <RegionLinkAdrReq+0x32>
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
 801769c:	6a3c      	ldr	r4, [r7, #32]
 801769e:	683a      	ldr	r2, [r7, #0]
 80176a0:	6879      	ldr	r1, [r7, #4]
 80176a2:	68b8      	ldr	r0, [r7, #8]
 80176a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176a6:	9300      	str	r3, [sp, #0]
 80176a8:	0023      	movs	r3, r4
 80176aa:	f001 fcb1 	bl	8019010 <RegionIN865LinkAdrReq>
 80176ae:	0003      	movs	r3, r0
 80176b0:	e000      	b.n	80176b4 <RegionLinkAdrReq+0x34>
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80176b2:	2300      	movs	r3, #0
        }
    }
}
 80176b4:	0018      	movs	r0, r3
 80176b6:	46bd      	mov	sp, r7
 80176b8:	b005      	add	sp, #20
 80176ba:	bd90      	pop	{r4, r7, pc}

080176bc <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80176bc:	b580      	push	{r7, lr}
 80176be:	b082      	sub	sp, #8
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	0002      	movs	r2, r0
 80176c4:	6039      	str	r1, [r7, #0]
 80176c6:	1dfb      	adds	r3, r7, #7
 80176c8:	701a      	strb	r2, [r3, #0]
    switch( region )
 80176ca:	1dfb      	adds	r3, r7, #7
 80176cc:	781b      	ldrb	r3, [r3, #0]
 80176ce:	2b07      	cmp	r3, #7
 80176d0:	d105      	bne.n	80176de <RegionRxParamSetupReq+0x22>
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
 80176d2:	683b      	ldr	r3, [r7, #0]
 80176d4:	0018      	movs	r0, r3
 80176d6:	f001 fdfd 	bl	80192d4 <RegionIN865RxParamSetupReq>
 80176da:	0003      	movs	r3, r0
 80176dc:	e000      	b.n	80176e0 <RegionRxParamSetupReq+0x24>
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80176de:	2300      	movs	r3, #0
        }
    }
}
 80176e0:	0018      	movs	r0, r3
 80176e2:	46bd      	mov	sp, r7
 80176e4:	b002      	add	sp, #8
 80176e6:	bd80      	pop	{r7, pc}

080176e8 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b082      	sub	sp, #8
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	0002      	movs	r2, r0
 80176f0:	6039      	str	r1, [r7, #0]
 80176f2:	1dfb      	adds	r3, r7, #7
 80176f4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80176f6:	1dfb      	adds	r3, r7, #7
 80176f8:	781b      	ldrb	r3, [r3, #0]
 80176fa:	2b07      	cmp	r3, #7
 80176fc:	d105      	bne.n	801770a <RegionNewChannelReq+0x22>
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
 80176fe:	683b      	ldr	r3, [r7, #0]
 8017700:	0018      	movs	r0, r3
 8017702:	f001 fe2b 	bl	801935c <RegionIN865NewChannelReq>
 8017706:	0003      	movs	r3, r0
 8017708:	e000      	b.n	801770c <RegionNewChannelReq+0x24>
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801770a:	2300      	movs	r3, #0
        }
    }
}
 801770c:	0018      	movs	r0, r3
 801770e:	46bd      	mov	sp, r7
 8017710:	b002      	add	sp, #8
 8017712:	bd80      	pop	{r7, pc}

08017714 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8017714:	b580      	push	{r7, lr}
 8017716:	b082      	sub	sp, #8
 8017718:	af00      	add	r7, sp, #0
 801771a:	0002      	movs	r2, r0
 801771c:	6039      	str	r1, [r7, #0]
 801771e:	1dfb      	adds	r3, r7, #7
 8017720:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017722:	1dfb      	adds	r3, r7, #7
 8017724:	781b      	ldrb	r3, [r3, #0]
 8017726:	2b07      	cmp	r3, #7
 8017728:	d105      	bne.n	8017736 <RegionTxParamSetupReq+0x22>
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
 801772a:	683b      	ldr	r3, [r7, #0]
 801772c:	0018      	movs	r0, r3
 801772e:	f001 fe7f 	bl	8019430 <RegionIN865TxParamSetupReq>
 8017732:	0003      	movs	r3, r0
 8017734:	e000      	b.n	8017738 <RegionTxParamSetupReq+0x24>
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017736:	2300      	movs	r3, #0
        }
    }
}
 8017738:	0018      	movs	r0, r3
 801773a:	46bd      	mov	sp, r7
 801773c:	b002      	add	sp, #8
 801773e:	bd80      	pop	{r7, pc}

08017740 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8017740:	b580      	push	{r7, lr}
 8017742:	b082      	sub	sp, #8
 8017744:	af00      	add	r7, sp, #0
 8017746:	0002      	movs	r2, r0
 8017748:	6039      	str	r1, [r7, #0]
 801774a:	1dfb      	adds	r3, r7, #7
 801774c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801774e:	1dfb      	adds	r3, r7, #7
 8017750:	781b      	ldrb	r3, [r3, #0]
 8017752:	2b07      	cmp	r3, #7
 8017754:	d105      	bne.n	8017762 <RegionDlChannelReq+0x22>
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
 8017756:	683b      	ldr	r3, [r7, #0]
 8017758:	0018      	movs	r0, r3
 801775a:	f001 fe73 	bl	8019444 <RegionIN865DlChannelReq>
 801775e:	0003      	movs	r3, r0
 8017760:	e000      	b.n	8017764 <RegionDlChannelReq+0x24>
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017762:	2300      	movs	r3, #0
        }
    }
}
 8017764:	0018      	movs	r0, r3
 8017766:	46bd      	mov	sp, r7
 8017768:	b002      	add	sp, #8
 801776a:	bd80      	pop	{r7, pc}

0801776c <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801776c:	b590      	push	{r4, r7, lr}
 801776e:	b083      	sub	sp, #12
 8017770:	af00      	add	r7, sp, #0
 8017772:	0004      	movs	r4, r0
 8017774:	0008      	movs	r0, r1
 8017776:	0011      	movs	r1, r2
 8017778:	1dfb      	adds	r3, r7, #7
 801777a:	1c22      	adds	r2, r4, #0
 801777c:	701a      	strb	r2, [r3, #0]
 801777e:	1dbb      	adds	r3, r7, #6
 8017780:	1c02      	adds	r2, r0, #0
 8017782:	701a      	strb	r2, [r3, #0]
 8017784:	1d7b      	adds	r3, r7, #5
 8017786:	1c0a      	adds	r2, r1, #0
 8017788:	701a      	strb	r2, [r3, #0]
    switch( region )
 801778a:	1dfb      	adds	r3, r7, #7
 801778c:	781b      	ldrb	r3, [r3, #0]
 801778e:	2b07      	cmp	r3, #7
 8017790:	d10a      	bne.n	80177a8 <RegionAlternateDr+0x3c>
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
 8017792:	1d7b      	adds	r3, r7, #5
 8017794:	781a      	ldrb	r2, [r3, #0]
 8017796:	1dbb      	adds	r3, r7, #6
 8017798:	781b      	ldrb	r3, [r3, #0]
 801779a:	b25b      	sxtb	r3, r3
 801779c:	0011      	movs	r1, r2
 801779e:	0018      	movs	r0, r3
 80177a0:	f001 fe98 	bl	80194d4 <RegionIN865AlternateDr>
 80177a4:	0003      	movs	r3, r0
 80177a6:	e000      	b.n	80177aa <RegionAlternateDr+0x3e>
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80177a8:	2300      	movs	r3, #0
        }
    }
}
 80177aa:	0018      	movs	r0, r3
 80177ac:	46bd      	mov	sp, r7
 80177ae:	b003      	add	sp, #12
 80177b0:	bd90      	pop	{r4, r7, pc}

080177b2 <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 80177b2:	b580      	push	{r7, lr}
 80177b4:	b082      	sub	sp, #8
 80177b6:	af00      	add	r7, sp, #0
 80177b8:	0002      	movs	r2, r0
 80177ba:	6039      	str	r1, [r7, #0]
 80177bc:	1dfb      	adds	r3, r7, #7
 80177be:	701a      	strb	r2, [r3, #0]
    switch( region )
 80177c0:	1dfb      	adds	r3, r7, #7
 80177c2:	781b      	ldrb	r3, [r3, #0]
 80177c4:	2b07      	cmp	r3, #7
 80177c6:	d000      	beq.n	80177ca <RegionCalcBackOff+0x18>
        IN865_CALC_BACKOFF( );
        US915_CALC_BACKOFF( );
        RU864_CALC_BACKOFF( );
        default:
        {
            break;
 80177c8:	e004      	b.n	80177d4 <RegionCalcBackOff+0x22>
        IN865_CALC_BACKOFF( );
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	0018      	movs	r0, r3
 80177ce:	f001 fe91 	bl	80194f4 <RegionIN865CalcBackOff>
 80177d2:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80177d4:	46c0      	nop			; (mov r8, r8)
 80177d6:	46bd      	mov	sp, r7
 80177d8:	b002      	add	sp, #8
 80177da:	bd80      	pop	{r7, pc}

080177dc <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b084      	sub	sp, #16
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	60b9      	str	r1, [r7, #8]
 80177e4:	607a      	str	r2, [r7, #4]
 80177e6:	603b      	str	r3, [r7, #0]
 80177e8:	210f      	movs	r1, #15
 80177ea:	187b      	adds	r3, r7, r1
 80177ec:	1c02      	adds	r2, r0, #0
 80177ee:	701a      	strb	r2, [r3, #0]
    switch( region )
 80177f0:	187b      	adds	r3, r7, r1
 80177f2:	781b      	ldrb	r3, [r3, #0]
 80177f4:	2b07      	cmp	r3, #7
 80177f6:	d107      	bne.n	8017808 <RegionNextChannel+0x2c>
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
 80177f8:	69bb      	ldr	r3, [r7, #24]
 80177fa:	683a      	ldr	r2, [r7, #0]
 80177fc:	6879      	ldr	r1, [r7, #4]
 80177fe:	68b8      	ldr	r0, [r7, #8]
 8017800:	f001 fea8 	bl	8019554 <RegionIN865NextChannel>
 8017804:	0003      	movs	r3, r0
 8017806:	e000      	b.n	801780a <RegionNextChannel+0x2e>
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017808:	2309      	movs	r3, #9
        }
    }
}
 801780a:	0018      	movs	r0, r3
 801780c:	46bd      	mov	sp, r7
 801780e:	b004      	add	sp, #16
 8017810:	bd80      	pop	{r7, pc}

08017812 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8017812:	b580      	push	{r7, lr}
 8017814:	b082      	sub	sp, #8
 8017816:	af00      	add	r7, sp, #0
 8017818:	0002      	movs	r2, r0
 801781a:	6039      	str	r1, [r7, #0]
 801781c:	1dfb      	adds	r3, r7, #7
 801781e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017820:	1dfb      	adds	r3, r7, #7
 8017822:	781b      	ldrb	r3, [r3, #0]
 8017824:	2b07      	cmp	r3, #7
 8017826:	d000      	beq.n	801782a <RegionSetContinuousWave+0x18>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8017828:	e004      	b.n	8017834 <RegionSetContinuousWave+0x22>
        IN865_SET_CONTINUOUS_WAVE( );
 801782a:	683b      	ldr	r3, [r7, #0]
 801782c:	0018      	movs	r0, r3
 801782e:	f002 f81d 	bl	801986c <RegionIN865SetContinuousWave>
 8017832:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8017834:	46c0      	nop			; (mov r8, r8)
 8017836:	46bd      	mov	sp, r7
 8017838:	b002      	add	sp, #8
 801783a:	bd80      	pop	{r7, pc}

0801783c <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801783c:	b5b0      	push	{r4, r5, r7, lr}
 801783e:	b082      	sub	sp, #8
 8017840:	af00      	add	r7, sp, #0
 8017842:	0005      	movs	r5, r0
 8017844:	000c      	movs	r4, r1
 8017846:	0010      	movs	r0, r2
 8017848:	0019      	movs	r1, r3
 801784a:	1dfb      	adds	r3, r7, #7
 801784c:	1c2a      	adds	r2, r5, #0
 801784e:	701a      	strb	r2, [r3, #0]
 8017850:	1dbb      	adds	r3, r7, #6
 8017852:	1c22      	adds	r2, r4, #0
 8017854:	701a      	strb	r2, [r3, #0]
 8017856:	1d7b      	adds	r3, r7, #5
 8017858:	1c02      	adds	r2, r0, #0
 801785a:	701a      	strb	r2, [r3, #0]
 801785c:	1d3b      	adds	r3, r7, #4
 801785e:	1c0a      	adds	r2, r1, #0
 8017860:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017862:	1dfb      	adds	r3, r7, #7
 8017864:	781b      	ldrb	r3, [r3, #0]
 8017866:	2b07      	cmp	r3, #7
 8017868:	d10c      	bne.n	8017884 <RegionApplyDrOffset+0x48>
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
 801786a:	1d3b      	adds	r3, r7, #4
 801786c:	2200      	movs	r2, #0
 801786e:	569a      	ldrsb	r2, [r3, r2]
 8017870:	1d7b      	adds	r3, r7, #5
 8017872:	2100      	movs	r1, #0
 8017874:	5659      	ldrsb	r1, [r3, r1]
 8017876:	1dbb      	adds	r3, r7, #6
 8017878:	781b      	ldrb	r3, [r3, #0]
 801787a:	0018      	movs	r0, r3
 801787c:	f002 f84a 	bl	8019914 <RegionIN865ApplyDrOffset>
 8017880:	0003      	movs	r3, r0
 8017882:	e001      	b.n	8017888 <RegionApplyDrOffset+0x4c>
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017884:	1d7b      	adds	r3, r7, #5
 8017886:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 8017888:	0018      	movs	r0, r3
 801788a:	46bd      	mov	sp, r7
 801788c:	b002      	add	sp, #8
 801788e:	bdb0      	pop	{r4, r5, r7, pc}

08017890 <CountChannels>:
#define BACKOFF_DC_1_HOUR       100
#define BACKOFF_DC_10_HOURS     1000
#define BACKOFF_DC_24_HOURS     10000

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8017890:	b580      	push	{r7, lr}
 8017892:	b084      	sub	sp, #16
 8017894:	af00      	add	r7, sp, #0
 8017896:	0002      	movs	r2, r0
 8017898:	1dbb      	adds	r3, r7, #6
 801789a:	801a      	strh	r2, [r3, #0]
 801789c:	1d7b      	adds	r3, r7, #5
 801789e:	1c0a      	adds	r2, r1, #0
 80178a0:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 80178a2:	230f      	movs	r3, #15
 80178a4:	18fb      	adds	r3, r7, r3
 80178a6:	2200      	movs	r2, #0
 80178a8:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 80178aa:	230e      	movs	r3, #14
 80178ac:	18fb      	adds	r3, r7, r3
 80178ae:	2200      	movs	r2, #0
 80178b0:	701a      	strb	r2, [r3, #0]
 80178b2:	e01b      	b.n	80178ec <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80178b4:	1dbb      	adds	r3, r7, #6
 80178b6:	881b      	ldrh	r3, [r3, #0]
 80178b8:	200e      	movs	r0, #14
 80178ba:	183a      	adds	r2, r7, r0
 80178bc:	7812      	ldrb	r2, [r2, #0]
 80178be:	2101      	movs	r1, #1
 80178c0:	4091      	lsls	r1, r2
 80178c2:	000a      	movs	r2, r1
 80178c4:	401a      	ands	r2, r3
 80178c6:	183b      	adds	r3, r7, r0
 80178c8:	781b      	ldrb	r3, [r3, #0]
 80178ca:	2101      	movs	r1, #1
 80178cc:	4099      	lsls	r1, r3
 80178ce:	000b      	movs	r3, r1
 80178d0:	429a      	cmp	r2, r3
 80178d2:	d105      	bne.n	80178e0 <CountChannels+0x50>
        {
            nbActiveBits++;
 80178d4:	210f      	movs	r1, #15
 80178d6:	187b      	adds	r3, r7, r1
 80178d8:	781a      	ldrb	r2, [r3, #0]
 80178da:	187b      	adds	r3, r7, r1
 80178dc:	3201      	adds	r2, #1
 80178de:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 80178e0:	210e      	movs	r1, #14
 80178e2:	187b      	adds	r3, r7, r1
 80178e4:	781a      	ldrb	r2, [r3, #0]
 80178e6:	187b      	adds	r3, r7, r1
 80178e8:	3201      	adds	r2, #1
 80178ea:	701a      	strb	r2, [r3, #0]
 80178ec:	230e      	movs	r3, #14
 80178ee:	18fa      	adds	r2, r7, r3
 80178f0:	1d7b      	adds	r3, r7, #5
 80178f2:	7812      	ldrb	r2, [r2, #0]
 80178f4:	781b      	ldrb	r3, [r3, #0]
 80178f6:	429a      	cmp	r2, r3
 80178f8:	d3dc      	bcc.n	80178b4 <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 80178fa:	230f      	movs	r3, #15
 80178fc:	18fb      	adds	r3, r7, r3
 80178fe:	781b      	ldrb	r3, [r3, #0]
}
 8017900:	0018      	movs	r0, r3
 8017902:	46bd      	mov	sp, r7
 8017904:	b004      	add	sp, #16
 8017906:	bd80      	pop	{r7, pc}

08017908 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
 8017908:	b580      	push	{r7, lr}
 801790a:	b084      	sub	sp, #16
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
    uint16_t dutyCycle = 0;
 8017910:	230e      	movs	r3, #14
 8017912:	18fb      	adds	r3, r7, r3
 8017914:	2200      	movs	r2, #0
 8017916:	801a      	strh	r2, [r3, #0]

    if( elapsedTime < 3600000 )
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	4a0e      	ldr	r2, [pc, #56]	; (8017954 <RegionCommonGetJoinDc+0x4c>)
 801791c:	4293      	cmp	r3, r2
 801791e:	d804      	bhi.n	801792a <RegionCommonGetJoinDc+0x22>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 8017920:	230e      	movs	r3, #14
 8017922:	18fb      	adds	r3, r7, r3
 8017924:	2264      	movs	r2, #100	; 0x64
 8017926:	801a      	strh	r2, [r3, #0]
 8017928:	e00d      	b.n	8017946 <RegionCommonGetJoinDc+0x3e>
    }
    else if( elapsedTime < ( 3600000 + 36000000 ) )
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	4a0a      	ldr	r2, [pc, #40]	; (8017958 <RegionCommonGetJoinDc+0x50>)
 801792e:	4293      	cmp	r3, r2
 8017930:	d805      	bhi.n	801793e <RegionCommonGetJoinDc+0x36>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 8017932:	230e      	movs	r3, #14
 8017934:	18fb      	adds	r3, r7, r3
 8017936:	22fa      	movs	r2, #250	; 0xfa
 8017938:	0092      	lsls	r2, r2, #2
 801793a:	801a      	strh	r2, [r3, #0]
 801793c:	e003      	b.n	8017946 <RegionCommonGetJoinDc+0x3e>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 801793e:	230e      	movs	r3, #14
 8017940:	18fb      	adds	r3, r7, r3
 8017942:	4a06      	ldr	r2, [pc, #24]	; (801795c <RegionCommonGetJoinDc+0x54>)
 8017944:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 8017946:	230e      	movs	r3, #14
 8017948:	18fb      	adds	r3, r7, r3
 801794a:	881b      	ldrh	r3, [r3, #0]
}
 801794c:	0018      	movs	r0, r3
 801794e:	46bd      	mov	sp, r7
 8017950:	b004      	add	sp, #16
 8017952:	bd80      	pop	{r7, pc}
 8017954:	0036ee7f 	.word	0x0036ee7f
 8017958:	025c3f7f 	.word	0x025c3f7f
 801795c:	00002710 	.word	0x00002710

08017960 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8017960:	b590      	push	{r4, r7, lr}
 8017962:	b085      	sub	sp, #20
 8017964:	af00      	add	r7, sp, #0
 8017966:	0004      	movs	r4, r0
 8017968:	6039      	str	r1, [r7, #0]
 801796a:	0010      	movs	r0, r2
 801796c:	0019      	movs	r1, r3
 801796e:	1dfb      	adds	r3, r7, #7
 8017970:	1c22      	adds	r2, r4, #0
 8017972:	701a      	strb	r2, [r3, #0]
 8017974:	1dbb      	adds	r3, r7, #6
 8017976:	1c02      	adds	r2, r0, #0
 8017978:	701a      	strb	r2, [r3, #0]
 801797a:	1d7b      	adds	r3, r7, #5
 801797c:	1c0a      	adds	r2, r1, #0
 801797e:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8017980:	2320      	movs	r3, #32
 8017982:	18fb      	adds	r3, r7, r3
 8017984:	2200      	movs	r2, #0
 8017986:	569a      	ldrsb	r2, [r3, r2]
 8017988:	1d7b      	adds	r3, r7, #5
 801798a:	2100      	movs	r1, #0
 801798c:	5659      	ldrsb	r1, [r3, r1]
 801798e:	1dbb      	adds	r3, r7, #6
 8017990:	781b      	ldrb	r3, [r3, #0]
 8017992:	b25b      	sxtb	r3, r3
 8017994:	0018      	movs	r0, r3
 8017996:	f000 f87d 	bl	8017a94 <RegionCommonValueInRange>
 801799a:	1e03      	subs	r3, r0, #0
 801799c:	d101      	bne.n	80179a2 <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 801799e:	2300      	movs	r3, #0
 80179a0:	e074      	b.n	8017a8c <RegionCommonChanVerifyDr+0x12c>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80179a2:	230f      	movs	r3, #15
 80179a4:	18fb      	adds	r3, r7, r3
 80179a6:	2200      	movs	r2, #0
 80179a8:	701a      	strb	r2, [r3, #0]
 80179aa:	230e      	movs	r3, #14
 80179ac:	18fb      	adds	r3, r7, r3
 80179ae:	2200      	movs	r2, #0
 80179b0:	701a      	strb	r2, [r3, #0]
 80179b2:	e063      	b.n	8017a7c <RegionCommonChanVerifyDr+0x11c>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80179b4:	230d      	movs	r3, #13
 80179b6:	18fb      	adds	r3, r7, r3
 80179b8:	2200      	movs	r2, #0
 80179ba:	701a      	strb	r2, [r3, #0]
 80179bc:	e04d      	b.n	8017a5a <RegionCommonChanVerifyDr+0xfa>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80179be:	230e      	movs	r3, #14
 80179c0:	18fb      	adds	r3, r7, r3
 80179c2:	781b      	ldrb	r3, [r3, #0]
 80179c4:	005b      	lsls	r3, r3, #1
 80179c6:	683a      	ldr	r2, [r7, #0]
 80179c8:	18d3      	adds	r3, r2, r3
 80179ca:	881b      	ldrh	r3, [r3, #0]
 80179cc:	001a      	movs	r2, r3
 80179ce:	230d      	movs	r3, #13
 80179d0:	18fb      	adds	r3, r7, r3
 80179d2:	781b      	ldrb	r3, [r3, #0]
 80179d4:	411a      	asrs	r2, r3
 80179d6:	0013      	movs	r3, r2
 80179d8:	2201      	movs	r2, #1
 80179da:	4013      	ands	r3, r2
 80179dc:	d037      	beq.n	8017a4e <RegionCommonChanVerifyDr+0xee>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80179de:	200f      	movs	r0, #15
 80179e0:	183b      	adds	r3, r7, r0
 80179e2:	781a      	ldrb	r2, [r3, #0]
 80179e4:	240d      	movs	r4, #13
 80179e6:	193b      	adds	r3, r7, r4
 80179e8:	781b      	ldrb	r3, [r3, #0]
 80179ea:	18d3      	adds	r3, r2, r3
 80179ec:	001a      	movs	r2, r3
 80179ee:	0013      	movs	r3, r2
 80179f0:	005b      	lsls	r3, r3, #1
 80179f2:	189b      	adds	r3, r3, r2
 80179f4:	009b      	lsls	r3, r3, #2
 80179f6:	001a      	movs	r2, r3
 80179f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179fa:	189b      	adds	r3, r3, r2
 80179fc:	7a1b      	ldrb	r3, [r3, #8]
 80179fe:	011b      	lsls	r3, r3, #4
 8017a00:	b25b      	sxtb	r3, r3
 8017a02:	111b      	asrs	r3, r3, #4
 8017a04:	b25b      	sxtb	r3, r3
 8017a06:	001a      	movs	r2, r3
 8017a08:	230f      	movs	r3, #15
 8017a0a:	4013      	ands	r3, r2
 8017a0c:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8017a0e:	183b      	adds	r3, r7, r0
 8017a10:	781a      	ldrb	r2, [r3, #0]
 8017a12:	193b      	adds	r3, r7, r4
 8017a14:	781b      	ldrb	r3, [r3, #0]
 8017a16:	18d3      	adds	r3, r2, r3
 8017a18:	001a      	movs	r2, r3
 8017a1a:	0013      	movs	r3, r2
 8017a1c:	005b      	lsls	r3, r3, #1
 8017a1e:	189b      	adds	r3, r3, r2
 8017a20:	009b      	lsls	r3, r3, #2
 8017a22:	001a      	movs	r2, r3
 8017a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a26:	189b      	adds	r3, r3, r2
 8017a28:	7a1b      	ldrb	r3, [r3, #8]
 8017a2a:	b25b      	sxtb	r3, r3
 8017a2c:	111b      	asrs	r3, r3, #4
 8017a2e:	b25b      	sxtb	r3, r3
 8017a30:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017a32:	230f      	movs	r3, #15
 8017a34:	4013      	ands	r3, r2
 8017a36:	b25a      	sxtb	r2, r3
 8017a38:	1dbb      	adds	r3, r7, #6
 8017a3a:	781b      	ldrb	r3, [r3, #0]
 8017a3c:	b25b      	sxtb	r3, r3
 8017a3e:	0018      	movs	r0, r3
 8017a40:	f000 f828 	bl	8017a94 <RegionCommonValueInRange>
 8017a44:	0003      	movs	r3, r0
 8017a46:	2b01      	cmp	r3, #1
 8017a48:	d101      	bne.n	8017a4e <RegionCommonChanVerifyDr+0xee>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8017a4a:	2301      	movs	r3, #1
 8017a4c:	e01e      	b.n	8017a8c <RegionCommonChanVerifyDr+0x12c>
        for( uint8_t j = 0; j < 16; j++ )
 8017a4e:	210d      	movs	r1, #13
 8017a50:	187b      	adds	r3, r7, r1
 8017a52:	781a      	ldrb	r2, [r3, #0]
 8017a54:	187b      	adds	r3, r7, r1
 8017a56:	3201      	adds	r2, #1
 8017a58:	701a      	strb	r2, [r3, #0]
 8017a5a:	230d      	movs	r3, #13
 8017a5c:	18fb      	adds	r3, r7, r3
 8017a5e:	781b      	ldrb	r3, [r3, #0]
 8017a60:	2b0f      	cmp	r3, #15
 8017a62:	d9ac      	bls.n	80179be <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017a64:	220f      	movs	r2, #15
 8017a66:	18bb      	adds	r3, r7, r2
 8017a68:	18ba      	adds	r2, r7, r2
 8017a6a:	7812      	ldrb	r2, [r2, #0]
 8017a6c:	3210      	adds	r2, #16
 8017a6e:	701a      	strb	r2, [r3, #0]
 8017a70:	210e      	movs	r1, #14
 8017a72:	187b      	adds	r3, r7, r1
 8017a74:	781a      	ldrb	r2, [r3, #0]
 8017a76:	187b      	adds	r3, r7, r1
 8017a78:	3201      	adds	r2, #1
 8017a7a:	701a      	strb	r2, [r3, #0]
 8017a7c:	230f      	movs	r3, #15
 8017a7e:	18fa      	adds	r2, r7, r3
 8017a80:	1dfb      	adds	r3, r7, #7
 8017a82:	7812      	ldrb	r2, [r2, #0]
 8017a84:	781b      	ldrb	r3, [r3, #0]
 8017a86:	429a      	cmp	r2, r3
 8017a88:	d394      	bcc.n	80179b4 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 8017a8a:	2300      	movs	r3, #0
}
 8017a8c:	0018      	movs	r0, r3
 8017a8e:	46bd      	mov	sp, r7
 8017a90:	b005      	add	sp, #20
 8017a92:	bd90      	pop	{r4, r7, pc}

08017a94 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8017a94:	b590      	push	{r4, r7, lr}
 8017a96:	b083      	sub	sp, #12
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	0004      	movs	r4, r0
 8017a9c:	0008      	movs	r0, r1
 8017a9e:	0011      	movs	r1, r2
 8017aa0:	1dfb      	adds	r3, r7, #7
 8017aa2:	1c22      	adds	r2, r4, #0
 8017aa4:	701a      	strb	r2, [r3, #0]
 8017aa6:	1dbb      	adds	r3, r7, #6
 8017aa8:	1c02      	adds	r2, r0, #0
 8017aaa:	701a      	strb	r2, [r3, #0]
 8017aac:	1d7b      	adds	r3, r7, #5
 8017aae:	1c0a      	adds	r2, r1, #0
 8017ab0:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 8017ab2:	1dfa      	adds	r2, r7, #7
 8017ab4:	1dbb      	adds	r3, r7, #6
 8017ab6:	7812      	ldrb	r2, [r2, #0]
 8017ab8:	b252      	sxtb	r2, r2
 8017aba:	781b      	ldrb	r3, [r3, #0]
 8017abc:	b25b      	sxtb	r3, r3
 8017abe:	429a      	cmp	r2, r3
 8017ac0:	db09      	blt.n	8017ad6 <RegionCommonValueInRange+0x42>
 8017ac2:	1dfa      	adds	r2, r7, #7
 8017ac4:	1d7b      	adds	r3, r7, #5
 8017ac6:	7812      	ldrb	r2, [r2, #0]
 8017ac8:	b252      	sxtb	r2, r2
 8017aca:	781b      	ldrb	r3, [r3, #0]
 8017acc:	b25b      	sxtb	r3, r3
 8017ace:	429a      	cmp	r2, r3
 8017ad0:	dc01      	bgt.n	8017ad6 <RegionCommonValueInRange+0x42>
    {
        return 1;
 8017ad2:	2301      	movs	r3, #1
 8017ad4:	e000      	b.n	8017ad8 <RegionCommonValueInRange+0x44>
    }
    return 0;
 8017ad6:	2300      	movs	r3, #0
}
 8017ad8:	0018      	movs	r0, r3
 8017ada:	46bd      	mov	sp, r7
 8017adc:	b003      	add	sp, #12
 8017ade:	bd90      	pop	{r4, r7, pc}

08017ae0 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8017ae0:	b580      	push	{r7, lr}
 8017ae2:	b084      	sub	sp, #16
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	6078      	str	r0, [r7, #4]
 8017ae8:	0008      	movs	r0, r1
 8017aea:	0011      	movs	r1, r2
 8017aec:	1cfb      	adds	r3, r7, #3
 8017aee:	1c02      	adds	r2, r0, #0
 8017af0:	701a      	strb	r2, [r3, #0]
 8017af2:	1cbb      	adds	r3, r7, #2
 8017af4:	1c0a      	adds	r2, r1, #0
 8017af6:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 8017af8:	210f      	movs	r1, #15
 8017afa:	187b      	adds	r3, r7, r1
 8017afc:	1cfa      	adds	r2, r7, #3
 8017afe:	7812      	ldrb	r2, [r2, #0]
 8017b00:	0912      	lsrs	r2, r2, #4
 8017b02:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8017b04:	1cbb      	adds	r3, r7, #2
 8017b06:	781b      	ldrb	r3, [r3, #0]
 8017b08:	091b      	lsrs	r3, r3, #4
 8017b0a:	b2db      	uxtb	r3, r3
 8017b0c:	187a      	adds	r2, r7, r1
 8017b0e:	7812      	ldrb	r2, [r2, #0]
 8017b10:	429a      	cmp	r2, r3
 8017b12:	d805      	bhi.n	8017b20 <RegionCommonChanDisable+0x40>
 8017b14:	1cfa      	adds	r2, r7, #3
 8017b16:	1cbb      	adds	r3, r7, #2
 8017b18:	7812      	ldrb	r2, [r2, #0]
 8017b1a:	781b      	ldrb	r3, [r3, #0]
 8017b1c:	429a      	cmp	r2, r3
 8017b1e:	d301      	bcc.n	8017b24 <RegionCommonChanDisable+0x44>
    {
        return false;
 8017b20:	2300      	movs	r3, #0
 8017b22:	e01b      	b.n	8017b5c <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8017b24:	200f      	movs	r0, #15
 8017b26:	183b      	adds	r3, r7, r0
 8017b28:	781b      	ldrb	r3, [r3, #0]
 8017b2a:	005b      	lsls	r3, r3, #1
 8017b2c:	687a      	ldr	r2, [r7, #4]
 8017b2e:	18d3      	adds	r3, r2, r3
 8017b30:	881b      	ldrh	r3, [r3, #0]
 8017b32:	b21b      	sxth	r3, r3
 8017b34:	1cfa      	adds	r2, r7, #3
 8017b36:	7812      	ldrb	r2, [r2, #0]
 8017b38:	210f      	movs	r1, #15
 8017b3a:	400a      	ands	r2, r1
 8017b3c:	2101      	movs	r1, #1
 8017b3e:	4091      	lsls	r1, r2
 8017b40:	000a      	movs	r2, r1
 8017b42:	b212      	sxth	r2, r2
 8017b44:	43d2      	mvns	r2, r2
 8017b46:	b212      	sxth	r2, r2
 8017b48:	4013      	ands	r3, r2
 8017b4a:	b219      	sxth	r1, r3
 8017b4c:	183b      	adds	r3, r7, r0
 8017b4e:	781b      	ldrb	r3, [r3, #0]
 8017b50:	005b      	lsls	r3, r3, #1
 8017b52:	687a      	ldr	r2, [r7, #4]
 8017b54:	18d3      	adds	r3, r2, r3
 8017b56:	b28a      	uxth	r2, r1
 8017b58:	801a      	strh	r2, [r3, #0]

    return true;
 8017b5a:	2301      	movs	r3, #1
}
 8017b5c:	0018      	movs	r0, r3
 8017b5e:	46bd      	mov	sp, r7
 8017b60:	b004      	add	sp, #16
 8017b62:	bd80      	pop	{r7, pc}

08017b64 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8017b64:	b590      	push	{r4, r7, lr}
 8017b66:	b085      	sub	sp, #20
 8017b68:	af00      	add	r7, sp, #0
 8017b6a:	6078      	str	r0, [r7, #4]
 8017b6c:	0008      	movs	r0, r1
 8017b6e:	0011      	movs	r1, r2
 8017b70:	1cfb      	adds	r3, r7, #3
 8017b72:	1c02      	adds	r2, r0, #0
 8017b74:	701a      	strb	r2, [r3, #0]
 8017b76:	1cbb      	adds	r3, r7, #2
 8017b78:	1c0a      	adds	r2, r1, #0
 8017b7a:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 8017b7c:	230f      	movs	r3, #15
 8017b7e:	18fb      	adds	r3, r7, r3
 8017b80:	2200      	movs	r2, #0
 8017b82:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d101      	bne.n	8017b8e <RegionCommonCountChannels+0x2a>
    {
        return 0;
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	e027      	b.n	8017bde <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017b8e:	230e      	movs	r3, #14
 8017b90:	18fb      	adds	r3, r7, r3
 8017b92:	1cfa      	adds	r2, r7, #3
 8017b94:	7812      	ldrb	r2, [r2, #0]
 8017b96:	701a      	strb	r2, [r3, #0]
 8017b98:	e017      	b.n	8017bca <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017b9a:	240e      	movs	r4, #14
 8017b9c:	193b      	adds	r3, r7, r4
 8017b9e:	781b      	ldrb	r3, [r3, #0]
 8017ba0:	005b      	lsls	r3, r3, #1
 8017ba2:	687a      	ldr	r2, [r7, #4]
 8017ba4:	18d3      	adds	r3, r2, r3
 8017ba6:	881b      	ldrh	r3, [r3, #0]
 8017ba8:	2110      	movs	r1, #16
 8017baa:	0018      	movs	r0, r3
 8017bac:	f7ff fe70 	bl	8017890 <CountChannels>
 8017bb0:	0003      	movs	r3, r0
 8017bb2:	0019      	movs	r1, r3
 8017bb4:	220f      	movs	r2, #15
 8017bb6:	18bb      	adds	r3, r7, r2
 8017bb8:	18ba      	adds	r2, r7, r2
 8017bba:	7812      	ldrb	r2, [r2, #0]
 8017bbc:	188a      	adds	r2, r1, r2
 8017bbe:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017bc0:	193b      	adds	r3, r7, r4
 8017bc2:	781a      	ldrb	r2, [r3, #0]
 8017bc4:	193b      	adds	r3, r7, r4
 8017bc6:	3201      	adds	r2, #1
 8017bc8:	701a      	strb	r2, [r3, #0]
 8017bca:	230e      	movs	r3, #14
 8017bcc:	18fa      	adds	r2, r7, r3
 8017bce:	1cbb      	adds	r3, r7, #2
 8017bd0:	7812      	ldrb	r2, [r2, #0]
 8017bd2:	781b      	ldrb	r3, [r3, #0]
 8017bd4:	429a      	cmp	r2, r3
 8017bd6:	d3e0      	bcc.n	8017b9a <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 8017bd8:	230f      	movs	r3, #15
 8017bda:	18fb      	adds	r3, r7, r3
 8017bdc:	781b      	ldrb	r3, [r3, #0]
}
 8017bde:	0018      	movs	r0, r3
 8017be0:	46bd      	mov	sp, r7
 8017be2:	b005      	add	sp, #20
 8017be4:	bd90      	pop	{r4, r7, pc}

08017be6 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017be6:	b580      	push	{r7, lr}
 8017be8:	b086      	sub	sp, #24
 8017bea:	af00      	add	r7, sp, #0
 8017bec:	60f8      	str	r0, [r7, #12]
 8017bee:	60b9      	str	r1, [r7, #8]
 8017bf0:	1dfb      	adds	r3, r7, #7
 8017bf2:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017bf4:	68fb      	ldr	r3, [r7, #12]
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d020      	beq.n	8017c3c <RegionCommonChanMaskCopy+0x56>
 8017bfa:	68bb      	ldr	r3, [r7, #8]
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	d01d      	beq.n	8017c3c <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 8017c00:	2317      	movs	r3, #23
 8017c02:	18fb      	adds	r3, r7, r3
 8017c04:	2200      	movs	r2, #0
 8017c06:	701a      	strb	r2, [r3, #0]
 8017c08:	e011      	b.n	8017c2e <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017c0a:	2017      	movs	r0, #23
 8017c0c:	183b      	adds	r3, r7, r0
 8017c0e:	781b      	ldrb	r3, [r3, #0]
 8017c10:	005b      	lsls	r3, r3, #1
 8017c12:	68ba      	ldr	r2, [r7, #8]
 8017c14:	18d2      	adds	r2, r2, r3
 8017c16:	183b      	adds	r3, r7, r0
 8017c18:	781b      	ldrb	r3, [r3, #0]
 8017c1a:	005b      	lsls	r3, r3, #1
 8017c1c:	68f9      	ldr	r1, [r7, #12]
 8017c1e:	18cb      	adds	r3, r1, r3
 8017c20:	8812      	ldrh	r2, [r2, #0]
 8017c22:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8017c24:	183b      	adds	r3, r7, r0
 8017c26:	781a      	ldrb	r2, [r3, #0]
 8017c28:	183b      	adds	r3, r7, r0
 8017c2a:	3201      	adds	r2, #1
 8017c2c:	701a      	strb	r2, [r3, #0]
 8017c2e:	2317      	movs	r3, #23
 8017c30:	18fa      	adds	r2, r7, r3
 8017c32:	1dfb      	adds	r3, r7, #7
 8017c34:	7812      	ldrb	r2, [r2, #0]
 8017c36:	781b      	ldrb	r3, [r3, #0]
 8017c38:	429a      	cmp	r2, r3
 8017c3a:	d3e6      	bcc.n	8017c0a <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 8017c3c:	46c0      	nop			; (mov r8, r8)
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	b006      	add	sp, #24
 8017c42:	bd80      	pop	{r7, pc}

08017c44 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b084      	sub	sp, #16
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	60b9      	str	r1, [r7, #8]
 8017c4c:	607a      	str	r2, [r7, #4]
 8017c4e:	210f      	movs	r1, #15
 8017c50:	187b      	adds	r3, r7, r1
 8017c52:	1c02      	adds	r2, r0, #0
 8017c54:	701a      	strb	r2, [r3, #0]
    if( joined == true )
 8017c56:	187b      	adds	r3, r7, r1
 8017c58:	781b      	ldrb	r3, [r3, #0]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d003      	beq.n	8017c66 <RegionCommonSetBandTxDone+0x22>
    {
        band->LastTxDoneTime = lastTxDone;
 8017c5e:	68bb      	ldr	r3, [r7, #8]
 8017c60:	687a      	ldr	r2, [r7, #4]
 8017c62:	609a      	str	r2, [r3, #8]
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 8017c64:	e005      	b.n	8017c72 <RegionCommonSetBandTxDone+0x2e>
        band->LastTxDoneTime = lastTxDone;
 8017c66:	68bb      	ldr	r3, [r7, #8]
 8017c68:	687a      	ldr	r2, [r7, #4]
 8017c6a:	609a      	str	r2, [r3, #8]
        band->LastJoinTxDoneTime = lastTxDone;
 8017c6c:	68bb      	ldr	r3, [r7, #8]
 8017c6e:	687a      	ldr	r2, [r7, #4]
 8017c70:	605a      	str	r2, [r3, #4]
}
 8017c72:	46c0      	nop			; (mov r8, r8)
 8017c74:	46bd      	mov	sp, r7
 8017c76:	b004      	add	sp, #16
 8017c78:	bd80      	pop	{r7, pc}

08017c7a <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 8017c7a:	b590      	push	{r4, r7, lr}
 8017c7c:	b089      	sub	sp, #36	; 0x24
 8017c7e:	af00      	add	r7, sp, #0
 8017c80:	0004      	movs	r4, r0
 8017c82:	0008      	movs	r0, r1
 8017c84:	603a      	str	r2, [r7, #0]
 8017c86:	0019      	movs	r1, r3
 8017c88:	1dfb      	adds	r3, r7, #7
 8017c8a:	1c22      	adds	r2, r4, #0
 8017c8c:	701a      	strb	r2, [r3, #0]
 8017c8e:	1dbb      	adds	r3, r7, #6
 8017c90:	1c02      	adds	r2, r0, #0
 8017c92:	701a      	strb	r2, [r3, #0]
 8017c94:	1d7b      	adds	r3, r7, #5
 8017c96:	1c0a      	adds	r2, r1, #0
 8017c98:	701a      	strb	r2, [r3, #0]
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 8017c9a:	2301      	movs	r3, #1
 8017c9c:	425b      	negs	r3, r3
 8017c9e:	61fb      	str	r3, [r7, #28]

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 8017ca0:	231b      	movs	r3, #27
 8017ca2:	18fb      	adds	r3, r7, r3
 8017ca4:	2200      	movs	r2, #0
 8017ca6:	701a      	strb	r2, [r3, #0]
 8017ca8:	e09c      	b.n	8017de4 <RegionCommonUpdateBandTimeOff+0x16a>
    {
        if( joined == false )
 8017caa:	1dfb      	adds	r3, r7, #7
 8017cac:	781b      	ldrb	r3, [r3, #0]
 8017cae:	2201      	movs	r2, #1
 8017cb0:	4053      	eors	r3, r2
 8017cb2:	b2db      	uxtb	r3, r3
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d04c      	beq.n	8017d52 <RegionCommonUpdateBandTimeOff+0xd8>
        {
            TimerTime_t elapsedJoin = TimerGetElapsedTime( bands[i].LastJoinTxDoneTime );
 8017cb8:	241b      	movs	r4, #27
 8017cba:	193b      	adds	r3, r7, r4
 8017cbc:	781b      	ldrb	r3, [r3, #0]
 8017cbe:	011b      	lsls	r3, r3, #4
 8017cc0:	683a      	ldr	r2, [r7, #0]
 8017cc2:	18d3      	adds	r3, r2, r3
 8017cc4:	685b      	ldr	r3, [r3, #4]
 8017cc6:	0018      	movs	r0, r3
 8017cc8:	f003 fa87 	bl	801b1da <TimerGetElapsedTime>
 8017ccc:	0003      	movs	r3, r0
 8017cce:	613b      	str	r3, [r7, #16]
            TimerTime_t elapsedTx = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 8017cd0:	193b      	adds	r3, r7, r4
 8017cd2:	781b      	ldrb	r3, [r3, #0]
 8017cd4:	011b      	lsls	r3, r3, #4
 8017cd6:	683a      	ldr	r2, [r7, #0]
 8017cd8:	18d3      	adds	r3, r2, r3
 8017cda:	689b      	ldr	r3, [r3, #8]
 8017cdc:	0018      	movs	r0, r3
 8017cde:	f003 fa7c 	bl	801b1da <TimerGetElapsedTime>
 8017ce2:	0003      	movs	r3, r0
 8017ce4:	60fb      	str	r3, [r7, #12]
            TimerTime_t txDoneTime =  MAX( elapsedJoin,
 8017ce6:	1dbb      	adds	r3, r7, #6
 8017ce8:	781b      	ldrb	r3, [r3, #0]
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d001      	beq.n	8017cf2 <RegionCommonUpdateBandTimeOff+0x78>
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	e000      	b.n	8017cf4 <RegionCommonUpdateBandTimeOff+0x7a>
 8017cf2:	2300      	movs	r3, #0
 8017cf4:	693a      	ldr	r2, [r7, #16]
 8017cf6:	4293      	cmp	r3, r2
 8017cf8:	d200      	bcs.n	8017cfc <RegionCommonUpdateBandTimeOff+0x82>
 8017cfa:	0013      	movs	r3, r2
 8017cfc:	60bb      	str	r3, [r7, #8]
                                        ( dutyCycle == true ) ? elapsedTx : 0 );

            if( bands[i].TimeOff <= txDoneTime )
 8017cfe:	231b      	movs	r3, #27
 8017d00:	18fb      	adds	r3, r7, r3
 8017d02:	781b      	ldrb	r3, [r3, #0]
 8017d04:	011b      	lsls	r3, r3, #4
 8017d06:	683a      	ldr	r2, [r7, #0]
 8017d08:	18d3      	adds	r3, r2, r3
 8017d0a:	68db      	ldr	r3, [r3, #12]
 8017d0c:	68ba      	ldr	r2, [r7, #8]
 8017d0e:	429a      	cmp	r2, r3
 8017d10:	d307      	bcc.n	8017d22 <RegionCommonUpdateBandTimeOff+0xa8>
            {
                bands[i].TimeOff = 0;
 8017d12:	231b      	movs	r3, #27
 8017d14:	18fb      	adds	r3, r7, r3
 8017d16:	781b      	ldrb	r3, [r3, #0]
 8017d18:	011b      	lsls	r3, r3, #4
 8017d1a:	683a      	ldr	r2, [r7, #0]
 8017d1c:	18d3      	adds	r3, r2, r3
 8017d1e:	2200      	movs	r2, #0
 8017d20:	60da      	str	r2, [r3, #12]
            }
            if( bands[i].TimeOff != 0 )
 8017d22:	231b      	movs	r3, #27
 8017d24:	18fb      	adds	r3, r7, r3
 8017d26:	781b      	ldrb	r3, [r3, #0]
 8017d28:	011b      	lsls	r3, r3, #4
 8017d2a:	683a      	ldr	r2, [r7, #0]
 8017d2c:	18d3      	adds	r3, r2, r3
 8017d2e:	68db      	ldr	r3, [r3, #12]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d051      	beq.n	8017dd8 <RegionCommonUpdateBandTimeOff+0x15e>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 8017d34:	231b      	movs	r3, #27
 8017d36:	18fb      	adds	r3, r7, r3
 8017d38:	781b      	ldrb	r3, [r3, #0]
 8017d3a:	011b      	lsls	r3, r3, #4
 8017d3c:	683a      	ldr	r2, [r7, #0]
 8017d3e:	18d3      	adds	r3, r2, r3
 8017d40:	68da      	ldr	r2, [r3, #12]
 8017d42:	68bb      	ldr	r3, [r7, #8]
 8017d44:	1ad2      	subs	r2, r2, r3
 8017d46:	69fb      	ldr	r3, [r7, #28]
 8017d48:	4293      	cmp	r3, r2
 8017d4a:	d900      	bls.n	8017d4e <RegionCommonUpdateBandTimeOff+0xd4>
 8017d4c:	0013      	movs	r3, r2
 8017d4e:	61fb      	str	r3, [r7, #28]
 8017d50:	e042      	b.n	8017dd8 <RegionCommonUpdateBandTimeOff+0x15e>
            }
        }
        else
        {
            if( dutyCycle == true )
 8017d52:	1dbb      	adds	r3, r7, #6
 8017d54:	781b      	ldrb	r3, [r3, #0]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d034      	beq.n	8017dc4 <RegionCommonUpdateBandTimeOff+0x14a>
            {
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 8017d5a:	241b      	movs	r4, #27
 8017d5c:	193b      	adds	r3, r7, r4
 8017d5e:	781b      	ldrb	r3, [r3, #0]
 8017d60:	011b      	lsls	r3, r3, #4
 8017d62:	683a      	ldr	r2, [r7, #0]
 8017d64:	18d3      	adds	r3, r2, r3
 8017d66:	689b      	ldr	r3, [r3, #8]
 8017d68:	0018      	movs	r0, r3
 8017d6a:	f003 fa36 	bl	801b1da <TimerGetElapsedTime>
 8017d6e:	0003      	movs	r3, r0
 8017d70:	617b      	str	r3, [r7, #20]
                if( bands[i].TimeOff <= elapsed )
 8017d72:	193b      	adds	r3, r7, r4
 8017d74:	781b      	ldrb	r3, [r3, #0]
 8017d76:	011b      	lsls	r3, r3, #4
 8017d78:	683a      	ldr	r2, [r7, #0]
 8017d7a:	18d3      	adds	r3, r2, r3
 8017d7c:	68db      	ldr	r3, [r3, #12]
 8017d7e:	697a      	ldr	r2, [r7, #20]
 8017d80:	429a      	cmp	r2, r3
 8017d82:	d307      	bcc.n	8017d94 <RegionCommonUpdateBandTimeOff+0x11a>
                {
                    bands[i].TimeOff = 0;
 8017d84:	231b      	movs	r3, #27
 8017d86:	18fb      	adds	r3, r7, r3
 8017d88:	781b      	ldrb	r3, [r3, #0]
 8017d8a:	011b      	lsls	r3, r3, #4
 8017d8c:	683a      	ldr	r2, [r7, #0]
 8017d8e:	18d3      	adds	r3, r2, r3
 8017d90:	2200      	movs	r2, #0
 8017d92:	60da      	str	r2, [r3, #12]
                }
                if( bands[i].TimeOff != 0 )
 8017d94:	231b      	movs	r3, #27
 8017d96:	18fb      	adds	r3, r7, r3
 8017d98:	781b      	ldrb	r3, [r3, #0]
 8017d9a:	011b      	lsls	r3, r3, #4
 8017d9c:	683a      	ldr	r2, [r7, #0]
 8017d9e:	18d3      	adds	r3, r2, r3
 8017da0:	68db      	ldr	r3, [r3, #12]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d018      	beq.n	8017dd8 <RegionCommonUpdateBandTimeOff+0x15e>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - elapsed, nextTxDelay );
 8017da6:	231b      	movs	r3, #27
 8017da8:	18fb      	adds	r3, r7, r3
 8017daa:	781b      	ldrb	r3, [r3, #0]
 8017dac:	011b      	lsls	r3, r3, #4
 8017dae:	683a      	ldr	r2, [r7, #0]
 8017db0:	18d3      	adds	r3, r2, r3
 8017db2:	68da      	ldr	r2, [r3, #12]
 8017db4:	697b      	ldr	r3, [r7, #20]
 8017db6:	1ad2      	subs	r2, r2, r3
 8017db8:	69fb      	ldr	r3, [r7, #28]
 8017dba:	4293      	cmp	r3, r2
 8017dbc:	d900      	bls.n	8017dc0 <RegionCommonUpdateBandTimeOff+0x146>
 8017dbe:	0013      	movs	r3, r2
 8017dc0:	61fb      	str	r3, [r7, #28]
 8017dc2:	e009      	b.n	8017dd8 <RegionCommonUpdateBandTimeOff+0x15e>
                }
            }
            else
            {
                nextTxDelay = 0;
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	61fb      	str	r3, [r7, #28]
                bands[i].TimeOff = 0;
 8017dc8:	231b      	movs	r3, #27
 8017dca:	18fb      	adds	r3, r7, r3
 8017dcc:	781b      	ldrb	r3, [r3, #0]
 8017dce:	011b      	lsls	r3, r3, #4
 8017dd0:	683a      	ldr	r2, [r7, #0]
 8017dd2:	18d3      	adds	r3, r2, r3
 8017dd4:	2200      	movs	r2, #0
 8017dd6:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 8017dd8:	211b      	movs	r1, #27
 8017dda:	187b      	adds	r3, r7, r1
 8017ddc:	781a      	ldrb	r2, [r3, #0]
 8017dde:	187b      	adds	r3, r7, r1
 8017de0:	3201      	adds	r2, #1
 8017de2:	701a      	strb	r2, [r3, #0]
 8017de4:	231b      	movs	r3, #27
 8017de6:	18fa      	adds	r2, r7, r3
 8017de8:	1d7b      	adds	r3, r7, #5
 8017dea:	7812      	ldrb	r2, [r2, #0]
 8017dec:	781b      	ldrb	r3, [r3, #0]
 8017dee:	429a      	cmp	r2, r3
 8017df0:	d200      	bcs.n	8017df4 <RegionCommonUpdateBandTimeOff+0x17a>
 8017df2:	e75a      	b.n	8017caa <RegionCommonUpdateBandTimeOff+0x30>
            }
        }
    }

    return ( nextTxDelay == TIMERTIME_T_MAX ) ? 0 : nextTxDelay;
 8017df4:	69fb      	ldr	r3, [r7, #28]
 8017df6:	3301      	adds	r3, #1
 8017df8:	d001      	beq.n	8017dfe <RegionCommonUpdateBandTimeOff+0x184>
 8017dfa:	69fb      	ldr	r3, [r7, #28]
 8017dfc:	e000      	b.n	8017e00 <RegionCommonUpdateBandTimeOff+0x186>
 8017dfe:	2300      	movs	r3, #0
}
 8017e00:	0018      	movs	r0, r3
 8017e02:	46bd      	mov	sp, r7
 8017e04:	b009      	add	sp, #36	; 0x24
 8017e06:	bd90      	pop	{r4, r7, pc}

08017e08 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	b084      	sub	sp, #16
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	6078      	str	r0, [r7, #4]
 8017e10:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8017e12:	230f      	movs	r3, #15
 8017e14:	18fb      	adds	r3, r7, r3
 8017e16:	2200      	movs	r2, #0
 8017e18:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	781b      	ldrb	r3, [r3, #0]
 8017e1e:	2b03      	cmp	r3, #3
 8017e20:	d141      	bne.n	8017ea6 <RegionCommonParseLinkAdrReq+0x9e>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	3301      	adds	r3, #1
 8017e26:	781b      	ldrb	r3, [r3, #0]
 8017e28:	b25a      	sxtb	r2, r3
 8017e2a:	683b      	ldr	r3, [r7, #0]
 8017e2c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8017e2e:	683b      	ldr	r3, [r7, #0]
 8017e30:	785b      	ldrb	r3, [r3, #1]
 8017e32:	b25b      	sxtb	r3, r3
 8017e34:	220f      	movs	r2, #15
 8017e36:	4013      	ands	r3, r2
 8017e38:	b25a      	sxtb	r2, r3
 8017e3a:	683b      	ldr	r3, [r7, #0]
 8017e3c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8017e3e:	683b      	ldr	r3, [r7, #0]
 8017e40:	785b      	ldrb	r3, [r3, #1]
 8017e42:	b25b      	sxtb	r3, r3
 8017e44:	b2db      	uxtb	r3, r3
 8017e46:	091b      	lsrs	r3, r3, #4
 8017e48:	b2db      	uxtb	r3, r3
 8017e4a:	b25a      	sxtb	r2, r3
 8017e4c:	683b      	ldr	r3, [r7, #0]
 8017e4e:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	3302      	adds	r3, #2
 8017e54:	781b      	ldrb	r3, [r3, #0]
 8017e56:	b29a      	uxth	r2, r3
 8017e58:	683b      	ldr	r3, [r7, #0]
 8017e5a:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017e5c:	683b      	ldr	r3, [r7, #0]
 8017e5e:	889b      	ldrh	r3, [r3, #4]
 8017e60:	b21a      	sxth	r2, r3
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	3303      	adds	r3, #3
 8017e66:	781b      	ldrb	r3, [r3, #0]
 8017e68:	021b      	lsls	r3, r3, #8
 8017e6a:	b21b      	sxth	r3, r3
 8017e6c:	4313      	orrs	r3, r2
 8017e6e:	b21b      	sxth	r3, r3
 8017e70:	b29a      	uxth	r2, r3
 8017e72:	683b      	ldr	r3, [r7, #0]
 8017e74:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	791a      	ldrb	r2, [r3, #4]
 8017e7a:	683b      	ldr	r3, [r7, #0]
 8017e7c:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8017e7e:	683b      	ldr	r3, [r7, #0]
 8017e80:	781b      	ldrb	r3, [r3, #0]
 8017e82:	091b      	lsrs	r3, r3, #4
 8017e84:	b2db      	uxtb	r3, r3
 8017e86:	2207      	movs	r2, #7
 8017e88:	4013      	ands	r3, r2
 8017e8a:	b2da      	uxtb	r2, r3
 8017e8c:	683b      	ldr	r3, [r7, #0]
 8017e8e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017e90:	683b      	ldr	r3, [r7, #0]
 8017e92:	781b      	ldrb	r3, [r3, #0]
 8017e94:	220f      	movs	r2, #15
 8017e96:	4013      	ands	r3, r2
 8017e98:	b2da      	uxtb	r2, r3
 8017e9a:	683b      	ldr	r3, [r7, #0]
 8017e9c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017e9e:	230f      	movs	r3, #15
 8017ea0:	18fb      	adds	r3, r7, r3
 8017ea2:	2205      	movs	r2, #5
 8017ea4:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 8017ea6:	230f      	movs	r3, #15
 8017ea8:	18fb      	adds	r3, r7, r3
 8017eaa:	781b      	ldrb	r3, [r3, #0]
}
 8017eac:	0018      	movs	r0, r3
 8017eae:	46bd      	mov	sp, r7
 8017eb0:	b004      	add	sp, #16
 8017eb2:	bd80      	pop	{r7, pc}

08017eb4 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017eb4:	b5b0      	push	{r4, r5, r7, lr}
 8017eb6:	b088      	sub	sp, #32
 8017eb8:	af02      	add	r7, sp, #8
 8017eba:	60f8      	str	r0, [r7, #12]
 8017ebc:	60b9      	str	r1, [r7, #8]
 8017ebe:	607a      	str	r2, [r7, #4]
 8017ec0:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017ec2:	2317      	movs	r3, #23
 8017ec4:	18fb      	adds	r3, r7, r3
 8017ec6:	68fa      	ldr	r2, [r7, #12]
 8017ec8:	7912      	ldrb	r2, [r2, #4]
 8017eca:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 8017ecc:	2316      	movs	r3, #22
 8017ece:	18fb      	adds	r3, r7, r3
 8017ed0:	68fa      	ldr	r2, [r7, #12]
 8017ed2:	7992      	ldrb	r2, [r2, #6]
 8017ed4:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 8017ed6:	2315      	movs	r3, #21
 8017ed8:	18fb      	adds	r3, r7, r3
 8017eda:	68fa      	ldr	r2, [r7, #12]
 8017edc:	79d2      	ldrb	r2, [r2, #7]
 8017ede:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	7a1a      	ldrb	r2, [r3, #8]
 8017ee4:	2314      	movs	r3, #20
 8017ee6:	18fb      	adds	r3, r7, r3
 8017ee8:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	795b      	ldrb	r3, [r3, #5]
 8017eee:	2201      	movs	r2, #1
 8017ef0:	4053      	eors	r3, r2
 8017ef2:	b2db      	uxtb	r3, r3
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d00e      	beq.n	8017f16 <RegionCommonLinkAdrReqVerifyParams+0x62>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8017ef8:	2314      	movs	r3, #20
 8017efa:	18fb      	adds	r3, r7, r3
 8017efc:	68fa      	ldr	r2, [r7, #12]
 8017efe:	7ad2      	ldrb	r2, [r2, #11]
 8017f00:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 8017f02:	2316      	movs	r3, #22
 8017f04:	18fb      	adds	r3, r7, r3
 8017f06:	68fa      	ldr	r2, [r7, #12]
 8017f08:	7a52      	ldrb	r2, [r2, #9]
 8017f0a:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 8017f0c:	2315      	movs	r3, #21
 8017f0e:	18fb      	adds	r3, r7, r3
 8017f10:	68fa      	ldr	r2, [r7, #12]
 8017f12:	7a92      	ldrb	r2, [r2, #10]
 8017f14:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 8017f16:	2317      	movs	r3, #23
 8017f18:	18fb      	adds	r3, r7, r3
 8017f1a:	781b      	ldrb	r3, [r3, #0]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d049      	beq.n	8017fb4 <RegionCommonLinkAdrReqVerifyParams+0x100>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	7b18      	ldrb	r0, [r3, #12]
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	691c      	ldr	r4, [r3, #16]
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	2514      	movs	r5, #20
 8017f2c:	575d      	ldrsb	r5, [r3, r5]
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	2215      	movs	r2, #21
 8017f32:	569a      	ldrsb	r2, [r3, r2]
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	699b      	ldr	r3, [r3, #24]
 8017f38:	2116      	movs	r1, #22
 8017f3a:	1879      	adds	r1, r7, r1
 8017f3c:	7809      	ldrb	r1, [r1, #0]
 8017f3e:	b249      	sxtb	r1, r1
 8017f40:	9301      	str	r3, [sp, #4]
 8017f42:	9200      	str	r2, [sp, #0]
 8017f44:	002b      	movs	r3, r5
 8017f46:	000a      	movs	r2, r1
 8017f48:	0021      	movs	r1, r4
 8017f4a:	f7ff fd09 	bl	8017960 <RegionCommonChanVerifyDr>
 8017f4e:	0003      	movs	r3, r0
 8017f50:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8017f52:	2301      	movs	r3, #1
 8017f54:	4053      	eors	r3, r2
 8017f56:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d006      	beq.n	8017f6a <RegionCommonLinkAdrReqVerifyParams+0xb6>
        {
            status &= 0xFD; // Datarate KO
 8017f5c:	2217      	movs	r2, #23
 8017f5e:	18bb      	adds	r3, r7, r2
 8017f60:	18ba      	adds	r2, r7, r2
 8017f62:	7812      	ldrb	r2, [r2, #0]
 8017f64:	2102      	movs	r1, #2
 8017f66:	438a      	bics	r2, r1
 8017f68:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	211d      	movs	r1, #29
 8017f6e:	5659      	ldrsb	r1, [r3, r1]
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	221c      	movs	r2, #28
 8017f74:	569a      	ldrsb	r2, [r3, r2]
 8017f76:	2315      	movs	r3, #21
 8017f78:	18fb      	adds	r3, r7, r3
 8017f7a:	781b      	ldrb	r3, [r3, #0]
 8017f7c:	b25b      	sxtb	r3, r3
 8017f7e:	0018      	movs	r0, r3
 8017f80:	f7ff fd88 	bl	8017a94 <RegionCommonValueInRange>
 8017f84:	1e03      	subs	r3, r0, #0
 8017f86:	d115      	bne.n	8017fb4 <RegionCommonLinkAdrReqVerifyParams+0x100>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	7f5b      	ldrb	r3, [r3, #29]
 8017f8c:	b25b      	sxtb	r3, r3
 8017f8e:	2215      	movs	r2, #21
 8017f90:	18ba      	adds	r2, r7, r2
 8017f92:	7812      	ldrb	r2, [r2, #0]
 8017f94:	b252      	sxtb	r2, r2
 8017f96:	429a      	cmp	r2, r3
 8017f98:	da05      	bge.n	8017fa6 <RegionCommonLinkAdrReqVerifyParams+0xf2>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8017f9a:	2315      	movs	r3, #21
 8017f9c:	18fb      	adds	r3, r7, r3
 8017f9e:	68fa      	ldr	r2, [r7, #12]
 8017fa0:	7f52      	ldrb	r2, [r2, #29]
 8017fa2:	701a      	strb	r2, [r3, #0]
 8017fa4:	e006      	b.n	8017fb4 <RegionCommonLinkAdrReqVerifyParams+0x100>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8017fa6:	2217      	movs	r2, #23
 8017fa8:	18bb      	adds	r3, r7, r2
 8017faa:	18ba      	adds	r2, r7, r2
 8017fac:	7812      	ldrb	r2, [r2, #0]
 8017fae:	2104      	movs	r1, #4
 8017fb0:	438a      	bics	r2, r1
 8017fb2:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017fb4:	2317      	movs	r3, #23
 8017fb6:	18fb      	adds	r3, r7, r3
 8017fb8:	781b      	ldrb	r3, [r3, #0]
 8017fba:	2b07      	cmp	r3, #7
 8017fbc:	d109      	bne.n	8017fd2 <RegionCommonLinkAdrReqVerifyParams+0x11e>
    {
        if( nbRepetitions == 0 )
 8017fbe:	2314      	movs	r3, #20
 8017fc0:	18fb      	adds	r3, r7, r3
 8017fc2:	781b      	ldrb	r3, [r3, #0]
 8017fc4:	b25b      	sxtb	r3, r3
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d103      	bne.n	8017fd2 <RegionCommonLinkAdrReqVerifyParams+0x11e>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8017fca:	2314      	movs	r3, #20
 8017fcc:	18fb      	adds	r3, r7, r3
 8017fce:	2201      	movs	r2, #1
 8017fd0:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 8017fd2:	68bb      	ldr	r3, [r7, #8]
 8017fd4:	2216      	movs	r2, #22
 8017fd6:	18ba      	adds	r2, r7, r2
 8017fd8:	7812      	ldrb	r2, [r2, #0]
 8017fda:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	2215      	movs	r2, #21
 8017fe0:	18ba      	adds	r2, r7, r2
 8017fe2:	7812      	ldrb	r2, [r2, #0]
 8017fe4:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017fe6:	2314      	movs	r3, #20
 8017fe8:	18fb      	adds	r3, r7, r3
 8017fea:	781a      	ldrb	r2, [r3, #0]
 8017fec:	683b      	ldr	r3, [r7, #0]
 8017fee:	701a      	strb	r2, [r3, #0]

    return status;
 8017ff0:	2317      	movs	r3, #23
 8017ff2:	18fb      	adds	r3, r7, r3
 8017ff4:	781b      	ldrb	r3, [r3, #0]
}
 8017ff6:	0018      	movs	r0, r3
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	b006      	add	sp, #24
 8017ffc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018000 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8018000:	b5b0      	push	{r4, r5, r7, lr}
 8018002:	b082      	sub	sp, #8
 8018004:	af00      	add	r7, sp, #0
 8018006:	0002      	movs	r2, r0
 8018008:	6039      	str	r1, [r7, #0]
 801800a:	1dfb      	adds	r3, r7, #7
 801800c:	701a      	strb	r2, [r3, #0]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 801800e:	1dfb      	adds	r3, r7, #7
 8018010:	781b      	ldrb	r3, [r3, #0]
 8018012:	2201      	movs	r2, #1
 8018014:	409a      	lsls	r2, r3
 8018016:	0013      	movs	r3, r2
 8018018:	0018      	movs	r0, r3
 801801a:	f7ea fe73 	bl	8002d04 <__aeabi_i2d>
 801801e:	0004      	movs	r4, r0
 8018020:	000d      	movs	r5, r1
 8018022:	6838      	ldr	r0, [r7, #0]
 8018024:	f7ea fea8 	bl	8002d78 <__aeabi_ui2d>
 8018028:	0002      	movs	r2, r0
 801802a:	000b      	movs	r3, r1
 801802c:	0020      	movs	r0, r4
 801802e:	0029      	movs	r1, r5
 8018030:	f7e9 fc6e 	bl	8001910 <__aeabi_ddiv>
 8018034:	0003      	movs	r3, r0
 8018036:	000c      	movs	r4, r1
 8018038:	0018      	movs	r0, r3
 801803a:	0021      	movs	r1, r4
 801803c:	2200      	movs	r2, #0
 801803e:	4b05      	ldr	r3, [pc, #20]	; (8018054 <RegionCommonComputeSymbolTimeLoRa+0x54>)
 8018040:	f7ea f870 	bl	8002124 <__aeabi_dmul>
 8018044:	0003      	movs	r3, r0
 8018046:	000c      	movs	r4, r1
}
 8018048:	0018      	movs	r0, r3
 801804a:	0021      	movs	r1, r4
 801804c:	46bd      	mov	sp, r7
 801804e:	b002      	add	sp, #8
 8018050:	bdb0      	pop	{r4, r5, r7, pc}
 8018052:	46c0      	nop			; (mov r8, r8)
 8018054:	408f4000 	.word	0x408f4000

08018058 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 8018058:	b590      	push	{r4, r7, lr}
 801805a:	b083      	sub	sp, #12
 801805c:	af00      	add	r7, sp, #0
 801805e:	0002      	movs	r2, r0
 8018060:	1dfb      	adds	r3, r7, #7
 8018062:	701a      	strb	r2, [r3, #0]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 8018064:	1dfb      	adds	r3, r7, #7
 8018066:	781b      	ldrb	r3, [r3, #0]
 8018068:	0018      	movs	r0, r3
 801806a:	f7ea fe85 	bl	8002d78 <__aeabi_ui2d>
 801806e:	0003      	movs	r3, r0
 8018070:	000c      	movs	r4, r1
 8018072:	001a      	movs	r2, r3
 8018074:	0023      	movs	r3, r4
 8018076:	2000      	movs	r0, #0
 8018078:	4904      	ldr	r1, [pc, #16]	; (801808c <RegionCommonComputeSymbolTimeFsk+0x34>)
 801807a:	f7e9 fc49 	bl	8001910 <__aeabi_ddiv>
 801807e:	0003      	movs	r3, r0
 8018080:	000c      	movs	r4, r1
}
 8018082:	0018      	movs	r0, r3
 8018084:	0021      	movs	r1, r4
 8018086:	46bd      	mov	sp, r7
 8018088:	b003      	add	sp, #12
 801808a:	bd90      	pop	{r4, r7, pc}
 801808c:	40200000 	.word	0x40200000

08018090 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 8018090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018092:	b085      	sub	sp, #20
 8018094:	af00      	add	r7, sp, #0
 8018096:	60b8      	str	r0, [r7, #8]
 8018098:	60f9      	str	r1, [r7, #12]
 801809a:	603b      	str	r3, [r7, #0]
 801809c:	1dfb      	adds	r3, r7, #7
 801809e:	701a      	strb	r2, [r3, #0]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 80180a0:	1dfb      	adds	r3, r7, #7
 80180a2:	781c      	ldrb	r4, [r3, #0]
 80180a4:	1dfb      	adds	r3, r7, #7
 80180a6:	781b      	ldrb	r3, [r3, #0]
 80180a8:	3b04      	subs	r3, #4
 80180aa:	005b      	lsls	r3, r3, #1
 80180ac:	0018      	movs	r0, r3
 80180ae:	f7ea fe29 	bl	8002d04 <__aeabi_i2d>
 80180b2:	68ba      	ldr	r2, [r7, #8]
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	f7ea f835 	bl	8002124 <__aeabi_dmul>
 80180ba:	0002      	movs	r2, r0
 80180bc:	000b      	movs	r3, r1
 80180be:	0015      	movs	r5, r2
 80180c0:	001e      	movs	r6, r3
 80180c2:	683b      	ldr	r3, [r7, #0]
 80180c4:	005b      	lsls	r3, r3, #1
 80180c6:	0018      	movs	r0, r3
 80180c8:	f7ea fe56 	bl	8002d78 <__aeabi_ui2d>
 80180cc:	0002      	movs	r2, r0
 80180ce:	000b      	movs	r3, r1
 80180d0:	0028      	movs	r0, r5
 80180d2:	0031      	movs	r1, r6
 80180d4:	f7e9 f900 	bl	80012d8 <__aeabi_dadd>
 80180d8:	0002      	movs	r2, r0
 80180da:	000b      	movs	r3, r1
 80180dc:	0010      	movs	r0, r2
 80180de:	0019      	movs	r1, r3
 80180e0:	68ba      	ldr	r2, [r7, #8]
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	f7e9 fc14 	bl	8001910 <__aeabi_ddiv>
 80180e8:	0002      	movs	r2, r0
 80180ea:	000b      	movs	r3, r1
 80180ec:	0010      	movs	r0, r2
 80180ee:	0019      	movs	r1, r3
 80180f0:	f003 fee8 	bl	801bec4 <ceil>
 80180f4:	0002      	movs	r2, r0
 80180f6:	000b      	movs	r3, r1
 80180f8:	0010      	movs	r0, r2
 80180fa:	0019      	movs	r1, r3
 80180fc:	f7e8 fa78 	bl	80005f0 <__aeabi_d2uiz>
 8018100:	0002      	movs	r2, r0
 8018102:	0023      	movs	r3, r4
 8018104:	4293      	cmp	r3, r2
 8018106:	d200      	bcs.n	801810a <RegionCommonComputeRxWindowParameters+0x7a>
 8018108:	0013      	movs	r3, r2
 801810a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801810c:	6013      	str	r3, [r2, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 801810e:	2200      	movs	r2, #0
 8018110:	4b20      	ldr	r3, [pc, #128]	; (8018194 <RegionCommonComputeRxWindowParameters+0x104>)
 8018112:	68b8      	ldr	r0, [r7, #8]
 8018114:	68f9      	ldr	r1, [r7, #12]
 8018116:	f7ea f805 	bl	8002124 <__aeabi_dmul>
 801811a:	0003      	movs	r3, r0
 801811c:	000c      	movs	r4, r1
 801811e:	0025      	movs	r5, r4
 8018120:	001c      	movs	r4, r3
 8018122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	0018      	movs	r0, r3
 8018128:	f7ea fe26 	bl	8002d78 <__aeabi_ui2d>
 801812c:	68ba      	ldr	r2, [r7, #8]
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	f7e9 fff8 	bl	8002124 <__aeabi_dmul>
 8018134:	0002      	movs	r2, r0
 8018136:	000b      	movs	r3, r1
 8018138:	0010      	movs	r0, r2
 801813a:	0019      	movs	r1, r3
 801813c:	2200      	movs	r2, #0
 801813e:	2380      	movs	r3, #128	; 0x80
 8018140:	05db      	lsls	r3, r3, #23
 8018142:	f7e9 fbe5 	bl	8001910 <__aeabi_ddiv>
 8018146:	0002      	movs	r2, r0
 8018148:	000b      	movs	r3, r1
 801814a:	0020      	movs	r0, r4
 801814c:	0029      	movs	r1, r5
 801814e:	f7ea fa5b 	bl	8002608 <__aeabi_dsub>
 8018152:	0003      	movs	r3, r0
 8018154:	000c      	movs	r4, r1
 8018156:	0025      	movs	r5, r4
 8018158:	001c      	movs	r4, r3
 801815a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801815c:	f7ea fe0c 	bl	8002d78 <__aeabi_ui2d>
 8018160:	0002      	movs	r2, r0
 8018162:	000b      	movs	r3, r1
 8018164:	0020      	movs	r0, r4
 8018166:	0029      	movs	r1, r5
 8018168:	f7ea fa4e 	bl	8002608 <__aeabi_dsub>
 801816c:	0003      	movs	r3, r0
 801816e:	000c      	movs	r4, r1
 8018170:	0018      	movs	r0, r3
 8018172:	0021      	movs	r1, r4
 8018174:	f003 fea6 	bl	801bec4 <ceil>
 8018178:	0003      	movs	r3, r0
 801817a:	000c      	movs	r4, r1
 801817c:	0018      	movs	r0, r3
 801817e:	0021      	movs	r1, r4
 8018180:	f7ea fd8a 	bl	8002c98 <__aeabi_d2iz>
 8018184:	0002      	movs	r2, r0
 8018186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018188:	601a      	str	r2, [r3, #0]
}
 801818a:	46c0      	nop			; (mov r8, r8)
 801818c:	46bd      	mov	sp, r7
 801818e:	b005      	add	sp, #20
 8018190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018192:	46c0      	nop			; (mov r8, r8)
 8018194:	40100000 	.word	0x40100000

08018198 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8018198:	b5b0      	push	{r4, r5, r7, lr}
 801819a:	b086      	sub	sp, #24
 801819c:	af00      	add	r7, sp, #0
 801819e:	60b9      	str	r1, [r7, #8]
 80181a0:	607a      	str	r2, [r7, #4]
 80181a2:	210f      	movs	r1, #15
 80181a4:	187b      	adds	r3, r7, r1
 80181a6:	1c02      	adds	r2, r0, #0
 80181a8:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
 80181aa:	2517      	movs	r5, #23
 80181ac:	197b      	adds	r3, r7, r5
 80181ae:	2200      	movs	r2, #0
 80181b0:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80181b2:	187b      	adds	r3, r7, r1
 80181b4:	781b      	ldrb	r3, [r3, #0]
 80181b6:	b25b      	sxtb	r3, r3
 80181b8:	005b      	lsls	r3, r3, #1
 80181ba:	0018      	movs	r0, r3
 80181bc:	f7e9 f84c 	bl	8001258 <__aeabi_ui2f>
 80181c0:	1c03      	adds	r3, r0, #0
 80181c2:	1c19      	adds	r1, r3, #0
 80181c4:	68b8      	ldr	r0, [r7, #8]
 80181c6:	f7e8 fe19 	bl	8000dfc <__aeabi_fsub>
 80181ca:	1c03      	adds	r3, r0, #0
 80181cc:	6879      	ldr	r1, [r7, #4]
 80181ce:	1c18      	adds	r0, r3, #0
 80181d0:	f7e8 fe14 	bl	8000dfc <__aeabi_fsub>
 80181d4:	1c03      	adds	r3, r0, #0
 80181d6:	1c18      	adds	r0, r3, #0
 80181d8:	f7ea fe00 	bl	8002ddc <__aeabi_f2d>
 80181dc:	0003      	movs	r3, r0
 80181de:	000c      	movs	r4, r1
 80181e0:	0018      	movs	r0, r3
 80181e2:	0021      	movs	r1, r4
 80181e4:	f003 fef0 	bl	801bfc8 <floor>
 80181e8:	0002      	movs	r2, r0
 80181ea:	000b      	movs	r3, r1
 80181ec:	197c      	adds	r4, r7, r5
 80181ee:	0010      	movs	r0, r2
 80181f0:	0019      	movs	r1, r3
 80181f2:	f7ea fd51 	bl	8002c98 <__aeabi_d2iz>
 80181f6:	0003      	movs	r3, r0
 80181f8:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 80181fa:	197b      	adds	r3, r7, r5
 80181fc:	781b      	ldrb	r3, [r3, #0]
 80181fe:	b25b      	sxtb	r3, r3
}
 8018200:	0018      	movs	r0, r3
 8018202:	46bd      	mov	sp, r7
 8018204:	b006      	add	sp, #24
 8018206:	bdb0      	pop	{r4, r5, r7, pc}

08018208 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 8018208:	b5b0      	push	{r4, r5, r7, lr}
 801820a:	b084      	sub	sp, #16
 801820c:	af00      	add	r7, sp, #0
 801820e:	6078      	str	r0, [r7, #4]
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	681a      	ldr	r2, [r3, #0]
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	7adb      	ldrb	r3, [r3, #11]
 8018218:	0019      	movs	r1, r3
 801821a:	000b      	movs	r3, r1
 801821c:	005b      	lsls	r3, r3, #1
 801821e:	185b      	adds	r3, r3, r1
 8018220:	009b      	lsls	r3, r3, #2
 8018222:	18d2      	adds	r2, r2, r3
 8018224:	210f      	movs	r1, #15
 8018226:	187b      	adds	r3, r7, r1
 8018228:	7a52      	ldrb	r2, [r2, #9]
 801822a:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	685a      	ldr	r2, [r3, #4]
 8018230:	187b      	adds	r3, r7, r1
 8018232:	781b      	ldrb	r3, [r3, #0]
 8018234:	011b      	lsls	r3, r3, #4
 8018236:	18d2      	adds	r2, r2, r3
 8018238:	230c      	movs	r3, #12
 801823a:	18fb      	adds	r3, r7, r3
 801823c:	8812      	ldrh	r2, [r2, #0]
 801823e:	801a      	strh	r2, [r3, #0]
    uint16_t joinDutyCycle = 0;
 8018240:	230a      	movs	r3, #10
 8018242:	18fb      	adds	r3, r7, r3
 8018244:	2200      	movs	r2, #0
 8018246:	801a      	strh	r2, [r3, #0]

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	685a      	ldr	r2, [r3, #4]
 801824c:	187b      	adds	r3, r7, r1
 801824e:	781b      	ldrb	r3, [r3, #0]
 8018250:	011b      	lsls	r3, r3, #4
 8018252:	18d3      	adds	r3, r2, r3
 8018254:	2200      	movs	r2, #0
 8018256:	60da      	str	r2, [r3, #12]

    if( calcBackOffParams->Joined == false )
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	7a5b      	ldrb	r3, [r3, #9]
 801825c:	2201      	movs	r2, #1
 801825e:	4053      	eors	r3, r2
 8018260:	b2db      	uxtb	r3, r3
 8018262:	2b00      	cmp	r3, #0
 8018264:	d03c      	beq.n	80182e0 <RegionCommonCalcBackOff+0xd8>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	68db      	ldr	r3, [r3, #12]
 801826a:	250a      	movs	r5, #10
 801826c:	197c      	adds	r4, r7, r5
 801826e:	0018      	movs	r0, r3
 8018270:	f7ff fb4a 	bl	8017908 <RegionCommonGetJoinDc>
 8018274:	0003      	movs	r3, r0
 8018276:	8023      	strh	r3, [r4, #0]
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8018278:	210c      	movs	r1, #12
 801827a:	187a      	adds	r2, r7, r1
 801827c:	197b      	adds	r3, r7, r5
 801827e:	1879      	adds	r1, r7, r1
 8018280:	880c      	ldrh	r4, [r1, #0]
 8018282:	881b      	ldrh	r3, [r3, #0]
 8018284:	b298      	uxth	r0, r3
 8018286:	b2a1      	uxth	r1, r4
 8018288:	4288      	cmp	r0, r1
 801828a:	d200      	bcs.n	801828e <RegionCommonCalcBackOff+0x86>
 801828c:	1c23      	adds	r3, r4, #0
 801828e:	8013      	strh	r3, [r2, #0]
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	7a9b      	ldrb	r3, [r3, #10]
 8018294:	2201      	movs	r2, #1
 8018296:	4053      	eors	r3, r2
 8018298:	b2db      	uxtb	r3, r3
 801829a:	2b00      	cmp	r3, #0
 801829c:	d010      	beq.n	80182c0 <RegionCommonCalcBackOff+0xb8>
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	7a1b      	ldrb	r3, [r3, #8]
 80182a2:	2201      	movs	r2, #1
 80182a4:	4053      	eors	r3, r2
 80182a6:	b2db      	uxtb	r3, r3
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d009      	beq.n	80182c0 <RegionCommonCalcBackOff+0xb8>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	685a      	ldr	r2, [r3, #4]
 80182b0:	230f      	movs	r3, #15
 80182b2:	18fb      	adds	r3, r7, r3
 80182b4:	781b      	ldrb	r3, [r3, #0]
 80182b6:	011b      	lsls	r3, r3, #4
 80182b8:	18d3      	adds	r3, r2, r3
 80182ba:	2200      	movs	r2, #0
 80182bc:	60da      	str	r2, [r3, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 80182be:	e02c      	b.n	801831a <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 80182c0:	230c      	movs	r3, #12
 80182c2:	18fb      	adds	r3, r7, r3
 80182c4:	881b      	ldrh	r3, [r3, #0]
 80182c6:	1e5a      	subs	r2, r3, #1
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	6919      	ldr	r1, [r3, #16]
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	6858      	ldr	r0, [r3, #4]
 80182d0:	230f      	movs	r3, #15
 80182d2:	18fb      	adds	r3, r7, r3
 80182d4:	781b      	ldrb	r3, [r3, #0]
 80182d6:	011b      	lsls	r3, r3, #4
 80182d8:	18c3      	adds	r3, r0, r3
 80182da:	434a      	muls	r2, r1
 80182dc:	60da      	str	r2, [r3, #12]
}
 80182de:	e01c      	b.n	801831a <RegionCommonCalcBackOff+0x112>
        if( calcBackOffParams->DutyCycleEnabled == true )
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	7a9b      	ldrb	r3, [r3, #10]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d00f      	beq.n	8018308 <RegionCommonCalcBackOff+0x100>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 80182e8:	230c      	movs	r3, #12
 80182ea:	18fb      	adds	r3, r7, r3
 80182ec:	881b      	ldrh	r3, [r3, #0]
 80182ee:	1e5a      	subs	r2, r3, #1
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	6919      	ldr	r1, [r3, #16]
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	6858      	ldr	r0, [r3, #4]
 80182f8:	230f      	movs	r3, #15
 80182fa:	18fb      	adds	r3, r7, r3
 80182fc:	781b      	ldrb	r3, [r3, #0]
 80182fe:	011b      	lsls	r3, r3, #4
 8018300:	18c3      	adds	r3, r0, r3
 8018302:	434a      	muls	r2, r1
 8018304:	60da      	str	r2, [r3, #12]
}
 8018306:	e008      	b.n	801831a <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	685a      	ldr	r2, [r3, #4]
 801830c:	230f      	movs	r3, #15
 801830e:	18fb      	adds	r3, r7, r3
 8018310:	781b      	ldrb	r3, [r3, #0]
 8018312:	011b      	lsls	r3, r3, #4
 8018314:	18d3      	adds	r3, r2, r3
 8018316:	2200      	movs	r2, #0
 8018318:	60da      	str	r2, [r3, #12]
}
 801831a:	46c0      	nop			; (mov r8, r8)
 801831c:	46bd      	mov	sp, r7
 801831e:	b004      	add	sp, #16
 8018320:	bdb0      	pop	{r4, r5, r7, pc}

08018322 <GetNextLowerTxDr>:
 */
static RegionIN865NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8018322:	b580      	push	{r7, lr}
 8018324:	b084      	sub	sp, #16
 8018326:	af00      	add	r7, sp, #0
 8018328:	0002      	movs	r2, r0
 801832a:	1dfb      	adds	r3, r7, #7
 801832c:	701a      	strb	r2, [r3, #0]
 801832e:	1dbb      	adds	r3, r7, #6
 8018330:	1c0a      	adds	r2, r1, #0
 8018332:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8018334:	230f      	movs	r3, #15
 8018336:	18fb      	adds	r3, r7, r3
 8018338:	2200      	movs	r2, #0
 801833a:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 801833c:	1dfa      	adds	r2, r7, #7
 801833e:	1dbb      	adds	r3, r7, #6
 8018340:	7812      	ldrb	r2, [r2, #0]
 8018342:	b252      	sxtb	r2, r2
 8018344:	781b      	ldrb	r3, [r3, #0]
 8018346:	b25b      	sxtb	r3, r3
 8018348:	429a      	cmp	r2, r3
 801834a:	d105      	bne.n	8018358 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 801834c:	230f      	movs	r3, #15
 801834e:	18fb      	adds	r3, r7, r3
 8018350:	1dba      	adds	r2, r7, #6
 8018352:	7812      	ldrb	r2, [r2, #0]
 8018354:	701a      	strb	r2, [r3, #0]
 8018356:	e00f      	b.n	8018378 <GetNextLowerTxDr+0x56>
    }
    else if( dr == DR_7 )
 8018358:	1dfb      	adds	r3, r7, #7
 801835a:	781b      	ldrb	r3, [r3, #0]
 801835c:	b25b      	sxtb	r3, r3
 801835e:	2b07      	cmp	r3, #7
 8018360:	d104      	bne.n	801836c <GetNextLowerTxDr+0x4a>
    {
        nextLowerDr = DR_5;
 8018362:	230f      	movs	r3, #15
 8018364:	18fb      	adds	r3, r7, r3
 8018366:	2205      	movs	r2, #5
 8018368:	701a      	strb	r2, [r3, #0]
 801836a:	e005      	b.n	8018378 <GetNextLowerTxDr+0x56>
    }
    else
    {
        nextLowerDr = dr - 1;
 801836c:	1dfb      	adds	r3, r7, #7
 801836e:	781a      	ldrb	r2, [r3, #0]
 8018370:	230f      	movs	r3, #15
 8018372:	18fb      	adds	r3, r7, r3
 8018374:	3a01      	subs	r2, #1
 8018376:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8018378:	230f      	movs	r3, #15
 801837a:	18fb      	adds	r3, r7, r3
 801837c:	781b      	ldrb	r3, [r3, #0]
 801837e:	b25b      	sxtb	r3, r3
}
 8018380:	0018      	movs	r0, r3
 8018382:	46bd      	mov	sp, r7
 8018384:	b004      	add	sp, #16
 8018386:	bd80      	pop	{r7, pc}

08018388 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8018388:	b580      	push	{r7, lr}
 801838a:	b082      	sub	sp, #8
 801838c:	af00      	add	r7, sp, #0
 801838e:	6078      	str	r0, [r7, #4]
    switch( BandwidthsIN865[drIndex] )
 8018390:	4b09      	ldr	r3, [pc, #36]	; (80183b8 <GetBandwidth+0x30>)
 8018392:	687a      	ldr	r2, [r7, #4]
 8018394:	0092      	lsls	r2, r2, #2
 8018396:	58d3      	ldr	r3, [r2, r3]
 8018398:	4a08      	ldr	r2, [pc, #32]	; (80183bc <GetBandwidth+0x34>)
 801839a:	4293      	cmp	r3, r2
 801839c:	d004      	beq.n	80183a8 <GetBandwidth+0x20>
 801839e:	4a08      	ldr	r2, [pc, #32]	; (80183c0 <GetBandwidth+0x38>)
 80183a0:	4293      	cmp	r3, r2
 80183a2:	d003      	beq.n	80183ac <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 80183a4:	2300      	movs	r3, #0
 80183a6:	e002      	b.n	80183ae <GetBandwidth+0x26>
        case 250000:
            return 1;
 80183a8:	2301      	movs	r3, #1
 80183aa:	e000      	b.n	80183ae <GetBandwidth+0x26>
        case 500000:
            return 2;
 80183ac:	2302      	movs	r3, #2
    }
}
 80183ae:	0018      	movs	r0, r3
 80183b0:	46bd      	mov	sp, r7
 80183b2:	b002      	add	sp, #8
 80183b4:	bd80      	pop	{r7, pc}
 80183b6:	46c0      	nop			; (mov r8, r8)
 80183b8:	0801d164 	.word	0x0801d164
 80183bc:	0003d090 	.word	0x0003d090
 80183c0:	0007a120 	.word	0x0007a120

080183c4 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80183c4:	b590      	push	{r4, r7, lr}
 80183c6:	b085      	sub	sp, #20
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	0004      	movs	r4, r0
 80183cc:	0008      	movs	r0, r1
 80183ce:	0011      	movs	r1, r2
 80183d0:	603b      	str	r3, [r7, #0]
 80183d2:	1dfb      	adds	r3, r7, #7
 80183d4:	1c22      	adds	r2, r4, #0
 80183d6:	701a      	strb	r2, [r3, #0]
 80183d8:	1dbb      	adds	r3, r7, #6
 80183da:	1c02      	adds	r2, r0, #0
 80183dc:	701a      	strb	r2, [r3, #0]
 80183de:	1d7b      	adds	r3, r7, #5
 80183e0:	1c0a      	adds	r2, r1, #0
 80183e2:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 80183e4:	210f      	movs	r1, #15
 80183e6:	187b      	adds	r3, r7, r1
 80183e8:	1dfa      	adds	r2, r7, #7
 80183ea:	7812      	ldrb	r2, [r2, #0]
 80183ec:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 80183ee:	187a      	adds	r2, r7, r1
 80183f0:	1dbb      	adds	r3, r7, #6
 80183f2:	1df9      	adds	r1, r7, #7
 80183f4:	780c      	ldrb	r4, [r1, #0]
 80183f6:	781b      	ldrb	r3, [r3, #0]
 80183f8:	b258      	sxtb	r0, r3
 80183fa:	b261      	sxtb	r1, r4
 80183fc:	4288      	cmp	r0, r1
 80183fe:	da00      	bge.n	8018402 <LimitTxPower+0x3e>
 8018400:	1c23      	adds	r3, r4, #0
 8018402:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8018404:	230f      	movs	r3, #15
 8018406:	18fb      	adds	r3, r7, r3
 8018408:	781b      	ldrb	r3, [r3, #0]
 801840a:	b25b      	sxtb	r3, r3
}
 801840c:	0018      	movs	r0, r3
 801840e:	46bd      	mov	sp, r7
 8018410:	b005      	add	sp, #20
 8018412:	bd90      	pop	{r4, r7, pc}

08018414 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8018414:	b580      	push	{r7, lr}
 8018416:	b082      	sub	sp, #8
 8018418:	af00      	add	r7, sp, #0
 801841a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801841c:	4b0e      	ldr	r3, [pc, #56]	; (8018458 <VerifyRfFreq+0x44>)
 801841e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018420:	687a      	ldr	r2, [r7, #4]
 8018422:	0010      	movs	r0, r2
 8018424:	4798      	blx	r3
 8018426:	0003      	movs	r3, r0
 8018428:	001a      	movs	r2, r3
 801842a:	2301      	movs	r3, #1
 801842c:	4053      	eors	r3, r2
 801842e:	b2db      	uxtb	r3, r3
 8018430:	2b00      	cmp	r3, #0
 8018432:	d001      	beq.n	8018438 <VerifyRfFreq+0x24>
    {
        return false;
 8018434:	2300      	movs	r3, #0
 8018436:	e00a      	b.n	801844e <VerifyRfFreq+0x3a>
    }

    if( ( freq < 865000000 ) || ( freq > 867000000 ) )
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	4a08      	ldr	r2, [pc, #32]	; (801845c <VerifyRfFreq+0x48>)
 801843c:	4293      	cmp	r3, r2
 801843e:	d903      	bls.n	8018448 <VerifyRfFreq+0x34>
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	4a07      	ldr	r2, [pc, #28]	; (8018460 <VerifyRfFreq+0x4c>)
 8018444:	4293      	cmp	r3, r2
 8018446:	d901      	bls.n	801844c <VerifyRfFreq+0x38>
    {
        return false;
 8018448:	2300      	movs	r3, #0
 801844a:	e000      	b.n	801844e <VerifyRfFreq+0x3a>
    }
    return true;
 801844c:	2301      	movs	r3, #1
}
 801844e:	0018      	movs	r0, r3
 8018450:	46bd      	mov	sp, r7
 8018452:	b002      	add	sp, #8
 8018454:	bd80      	pop	{r7, pc}
 8018456:	46c0      	nop			; (mov r8, r8)
 8018458:	0801ca04 	.word	0x0801ca04
 801845c:	338eda3f 	.word	0x338eda3f
 8018460:	33ad5ec0 	.word	0x33ad5ec0

08018464 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 8018464:	b5b0      	push	{r4, r5, r7, lr}
 8018466:	b086      	sub	sp, #24
 8018468:	af00      	add	r7, sp, #0
 801846a:	60ba      	str	r2, [r7, #8]
 801846c:	607b      	str	r3, [r7, #4]
 801846e:	230f      	movs	r3, #15
 8018470:	18fb      	adds	r3, r7, r3
 8018472:	1c02      	adds	r2, r0, #0
 8018474:	701a      	strb	r2, [r3, #0]
 8018476:	230e      	movs	r3, #14
 8018478:	18fb      	adds	r3, r7, r3
 801847a:	1c0a      	adds	r2, r1, #0
 801847c:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 801847e:	2317      	movs	r3, #23
 8018480:	18fb      	adds	r3, r7, r3
 8018482:	2200      	movs	r2, #0
 8018484:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 8018486:	2316      	movs	r3, #22
 8018488:	18fb      	adds	r3, r7, r3
 801848a:	2200      	movs	r2, #0
 801848c:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < IN865_MAX_NB_CHANNELS; i += 16, k++ )
 801848e:	2315      	movs	r3, #21
 8018490:	18fb      	adds	r3, r7, r3
 8018492:	2200      	movs	r2, #0
 8018494:	701a      	strb	r2, [r3, #0]
 8018496:	2314      	movs	r3, #20
 8018498:	18fb      	adds	r3, r7, r3
 801849a:	2200      	movs	r2, #0
 801849c:	701a      	strb	r2, [r3, #0]
 801849e:	e0b4      	b.n	801860a <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80184a0:	2313      	movs	r3, #19
 80184a2:	18fb      	adds	r3, r7, r3
 80184a4:	2200      	movs	r2, #0
 80184a6:	701a      	strb	r2, [r3, #0]
 80184a8:	e09d      	b.n	80185e6 <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 80184aa:	2314      	movs	r3, #20
 80184ac:	18fb      	adds	r3, r7, r3
 80184ae:	781b      	ldrb	r3, [r3, #0]
 80184b0:	005b      	lsls	r3, r3, #1
 80184b2:	68ba      	ldr	r2, [r7, #8]
 80184b4:	18d3      	adds	r3, r2, r3
 80184b6:	881b      	ldrh	r3, [r3, #0]
 80184b8:	001a      	movs	r2, r3
 80184ba:	2313      	movs	r3, #19
 80184bc:	18fb      	adds	r3, r7, r3
 80184be:	781b      	ldrb	r3, [r3, #0]
 80184c0:	411a      	asrs	r2, r3
 80184c2:	0013      	movs	r3, r2
 80184c4:	2201      	movs	r2, #1
 80184c6:	4013      	ands	r3, r2
 80184c8:	d100      	bne.n	80184cc <CountNbOfEnabledChannels+0x68>
 80184ca:	e086      	b.n	80185da <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 80184cc:	2315      	movs	r3, #21
 80184ce:	18fb      	adds	r3, r7, r3
 80184d0:	781a      	ldrb	r2, [r3, #0]
 80184d2:	2313      	movs	r3, #19
 80184d4:	18fb      	adds	r3, r7, r3
 80184d6:	781b      	ldrb	r3, [r3, #0]
 80184d8:	18d3      	adds	r3, r2, r3
 80184da:	001a      	movs	r2, r3
 80184dc:	0013      	movs	r3, r2
 80184de:	005b      	lsls	r3, r3, #1
 80184e0:	189b      	adds	r3, r3, r2
 80184e2:	009b      	lsls	r3, r3, #2
 80184e4:	001a      	movs	r2, r3
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	189b      	adds	r3, r3, r2
 80184ea:	681b      	ldr	r3, [r3, #0]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d06f      	beq.n	80185d0 <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 80184f0:	230f      	movs	r3, #15
 80184f2:	18fb      	adds	r3, r7, r3
 80184f4:	781b      	ldrb	r3, [r3, #0]
 80184f6:	2201      	movs	r2, #1
 80184f8:	4053      	eors	r3, r2
 80184fa:	b2db      	uxtb	r3, r3
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d008      	beq.n	8018512 <CountNbOfEnabledChannels+0xae>
                {
                    if( ( IN865_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8018500:	2313      	movs	r3, #19
 8018502:	18fb      	adds	r3, r7, r3
 8018504:	781b      	ldrb	r3, [r3, #0]
 8018506:	2207      	movs	r2, #7
 8018508:	411a      	asrs	r2, r3
 801850a:	0013      	movs	r3, r2
 801850c:	2201      	movs	r2, #1
 801850e:	4013      	ands	r3, r2
 8018510:	d060      	beq.n	80185d4 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8018512:	230e      	movs	r3, #14
 8018514:	18fb      	adds	r3, r7, r3
 8018516:	2000      	movs	r0, #0
 8018518:	5618      	ldrsb	r0, [r3, r0]
 801851a:	2415      	movs	r4, #21
 801851c:	193b      	adds	r3, r7, r4
 801851e:	781a      	ldrb	r2, [r3, #0]
 8018520:	2513      	movs	r5, #19
 8018522:	197b      	adds	r3, r7, r5
 8018524:	781b      	ldrb	r3, [r3, #0]
 8018526:	18d3      	adds	r3, r2, r3
 8018528:	001a      	movs	r2, r3
 801852a:	0013      	movs	r3, r2
 801852c:	005b      	lsls	r3, r3, #1
 801852e:	189b      	adds	r3, r3, r2
 8018530:	009b      	lsls	r3, r3, #2
 8018532:	001a      	movs	r2, r3
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	189b      	adds	r3, r3, r2
 8018538:	7a1b      	ldrb	r3, [r3, #8]
 801853a:	011b      	lsls	r3, r3, #4
 801853c:	b25b      	sxtb	r3, r3
 801853e:	111b      	asrs	r3, r3, #4
 8018540:	b25b      	sxtb	r3, r3
 8018542:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8018544:	193b      	adds	r3, r7, r4
 8018546:	781a      	ldrb	r2, [r3, #0]
 8018548:	197b      	adds	r3, r7, r5
 801854a:	781b      	ldrb	r3, [r3, #0]
 801854c:	18d3      	adds	r3, r2, r3
 801854e:	001a      	movs	r2, r3
 8018550:	0013      	movs	r3, r2
 8018552:	005b      	lsls	r3, r3, #1
 8018554:	189b      	adds	r3, r3, r2
 8018556:	009b      	lsls	r3, r3, #2
 8018558:	001a      	movs	r2, r3
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	189b      	adds	r3, r3, r2
 801855e:	7a1b      	ldrb	r3, [r3, #8]
 8018560:	b25b      	sxtb	r3, r3
 8018562:	111b      	asrs	r3, r3, #4
 8018564:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8018566:	001a      	movs	r2, r3
 8018568:	f7ff fa94 	bl	8017a94 <RegionCommonValueInRange>
 801856c:	1e03      	subs	r3, r0, #0
 801856e:	d033      	beq.n	80185d8 <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 8018570:	2315      	movs	r3, #21
 8018572:	18fb      	adds	r3, r7, r3
 8018574:	781a      	ldrb	r2, [r3, #0]
 8018576:	2313      	movs	r3, #19
 8018578:	18fb      	adds	r3, r7, r3
 801857a:	781b      	ldrb	r3, [r3, #0]
 801857c:	18d3      	adds	r3, r2, r3
 801857e:	001a      	movs	r2, r3
 8018580:	0013      	movs	r3, r2
 8018582:	005b      	lsls	r3, r3, #1
 8018584:	189b      	adds	r3, r3, r2
 8018586:	009b      	lsls	r3, r3, #2
 8018588:	001a      	movs	r2, r3
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	189b      	adds	r3, r3, r2
 801858e:	7a5b      	ldrb	r3, [r3, #9]
 8018590:	011b      	lsls	r3, r3, #4
 8018592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018594:	18d3      	adds	r3, r2, r3
 8018596:	68db      	ldr	r3, [r3, #12]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d006      	beq.n	80185aa <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 801859c:	2116      	movs	r1, #22
 801859e:	187b      	adds	r3, r7, r1
 80185a0:	781a      	ldrb	r2, [r3, #0]
 80185a2:	187b      	adds	r3, r7, r1
 80185a4:	3201      	adds	r2, #1
 80185a6:	701a      	strb	r2, [r3, #0]
                    continue;
 80185a8:	e017      	b.n	80185da <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 80185aa:	2217      	movs	r2, #23
 80185ac:	18bb      	adds	r3, r7, r2
 80185ae:	781b      	ldrb	r3, [r3, #0]
 80185b0:	18ba      	adds	r2, r7, r2
 80185b2:	1c59      	adds	r1, r3, #1
 80185b4:	7011      	strb	r1, [r2, #0]
 80185b6:	001a      	movs	r2, r3
 80185b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185ba:	189b      	adds	r3, r3, r2
 80185bc:	2215      	movs	r2, #21
 80185be:	18b9      	adds	r1, r7, r2
 80185c0:	2213      	movs	r2, #19
 80185c2:	18ba      	adds	r2, r7, r2
 80185c4:	7809      	ldrb	r1, [r1, #0]
 80185c6:	7812      	ldrb	r2, [r2, #0]
 80185c8:	188a      	adds	r2, r1, r2
 80185ca:	b2d2      	uxtb	r2, r2
 80185cc:	701a      	strb	r2, [r3, #0]
 80185ce:	e004      	b.n	80185da <CountNbOfEnabledChannels+0x176>
                    continue;
 80185d0:	46c0      	nop			; (mov r8, r8)
 80185d2:	e002      	b.n	80185da <CountNbOfEnabledChannels+0x176>
                        continue;
 80185d4:	46c0      	nop			; (mov r8, r8)
 80185d6:	e000      	b.n	80185da <CountNbOfEnabledChannels+0x176>
                    continue;
 80185d8:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 80185da:	2113      	movs	r1, #19
 80185dc:	187b      	adds	r3, r7, r1
 80185de:	781a      	ldrb	r2, [r3, #0]
 80185e0:	187b      	adds	r3, r7, r1
 80185e2:	3201      	adds	r2, #1
 80185e4:	701a      	strb	r2, [r3, #0]
 80185e6:	2313      	movs	r3, #19
 80185e8:	18fb      	adds	r3, r7, r3
 80185ea:	781b      	ldrb	r3, [r3, #0]
 80185ec:	2b0f      	cmp	r3, #15
 80185ee:	d800      	bhi.n	80185f2 <CountNbOfEnabledChannels+0x18e>
 80185f0:	e75b      	b.n	80184aa <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < IN865_MAX_NB_CHANNELS; i += 16, k++ )
 80185f2:	2215      	movs	r2, #21
 80185f4:	18bb      	adds	r3, r7, r2
 80185f6:	18ba      	adds	r2, r7, r2
 80185f8:	7812      	ldrb	r2, [r2, #0]
 80185fa:	3210      	adds	r2, #16
 80185fc:	701a      	strb	r2, [r3, #0]
 80185fe:	2114      	movs	r1, #20
 8018600:	187b      	adds	r3, r7, r1
 8018602:	781a      	ldrb	r2, [r3, #0]
 8018604:	187b      	adds	r3, r7, r1
 8018606:	3201      	adds	r2, #1
 8018608:	701a      	strb	r2, [r3, #0]
 801860a:	2315      	movs	r3, #21
 801860c:	18fb      	adds	r3, r7, r3
 801860e:	781b      	ldrb	r3, [r3, #0]
 8018610:	2b0f      	cmp	r3, #15
 8018612:	d800      	bhi.n	8018616 <CountNbOfEnabledChannels+0x1b2>
 8018614:	e744      	b.n	80184a0 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 8018616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018618:	2216      	movs	r2, #22
 801861a:	18ba      	adds	r2, r7, r2
 801861c:	7812      	ldrb	r2, [r2, #0]
 801861e:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8018620:	2317      	movs	r3, #23
 8018622:	18fb      	adds	r3, r7, r3
 8018624:	781b      	ldrb	r3, [r3, #0]
}
 8018626:	0018      	movs	r0, r3
 8018628:	46bd      	mov	sp, r7
 801862a:	b006      	add	sp, #24
 801862c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018630 <RegionIN865GetPhyParam>:

PhyParam_t RegionIN865GetPhyParam( GetPhyParams_t* getPhy )
{
 8018630:	b580      	push	{r7, lr}
 8018632:	b084      	sub	sp, #16
 8018634:	af00      	add	r7, sp, #0
 8018636:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018638:	2308      	movs	r3, #8
 801863a:	18fb      	adds	r3, r7, r3
 801863c:	2200      	movs	r2, #0
 801863e:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	781b      	ldrb	r3, [r3, #0]
 8018644:	2b35      	cmp	r3, #53	; 0x35
 8018646:	d900      	bls.n	801864a <RegionIN865GetPhyParam+0x1a>
 8018648:	e0cd      	b.n	80187e6 <RegionIN865GetPhyParam+0x1b6>
 801864a:	009a      	lsls	r2, r3, #2
 801864c:	4b6d      	ldr	r3, [pc, #436]	; (8018804 <RegionIN865GetPhyParam+0x1d4>)
 801864e:	18d3      	adds	r3, r2, r3
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = IN865_RX_MIN_DATARATE;
 8018654:	2308      	movs	r3, #8
 8018656:	18fb      	adds	r3, r7, r3
 8018658:	2200      	movs	r2, #0
 801865a:	601a      	str	r2, [r3, #0]
            break;
 801865c:	e0c4      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = IN865_TX_MIN_DATARATE;
 801865e:	2308      	movs	r3, #8
 8018660:	18fb      	adds	r3, r7, r3
 8018662:	2200      	movs	r2, #0
 8018664:	601a      	str	r2, [r3, #0]
            break;
 8018666:	e0bf      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = IN865_DEFAULT_DATARATE;
 8018668:	2308      	movs	r3, #8
 801866a:	18fb      	adds	r3, r7, r3
 801866c:	2200      	movs	r2, #0
 801866e:	601a      	str	r2, [r3, #0]
            break;
 8018670:	e0ba      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, IN865_TX_MIN_DATARATE );
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	785b      	ldrb	r3, [r3, #1]
 8018676:	b25b      	sxtb	r3, r3
 8018678:	2100      	movs	r1, #0
 801867a:	0018      	movs	r0, r3
 801867c:	f7ff fe51 	bl	8018322 <GetNextLowerTxDr>
 8018680:	0003      	movs	r3, r0
 8018682:	001a      	movs	r2, r3
 8018684:	2308      	movs	r3, #8
 8018686:	18fb      	adds	r3, r7, r3
 8018688:	601a      	str	r2, [r3, #0]
            break;
 801868a:	e0ad      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = IN865_MAX_TX_POWER;
 801868c:	2308      	movs	r3, #8
 801868e:	18fb      	adds	r3, r7, r3
 8018690:	2200      	movs	r2, #0
 8018692:	601a      	str	r2, [r3, #0]
            break;
 8018694:	e0a8      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = IN865_DEFAULT_TX_POWER;
 8018696:	2308      	movs	r3, #8
 8018698:	18fb      	adds	r3, r7, r3
 801869a:	2200      	movs	r2, #0
 801869c:	601a      	str	r2, [r3, #0]
            break;
 801869e:	e0a3      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = IN865_ADR_ACK_LIMIT;
 80186a0:	2308      	movs	r3, #8
 80186a2:	18fb      	adds	r3, r7, r3
 80186a4:	2240      	movs	r2, #64	; 0x40
 80186a6:	601a      	str	r2, [r3, #0]
            break;
 80186a8:	e09e      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = IN865_ADR_ACK_DELAY;
 80186aa:	2308      	movs	r3, #8
 80186ac:	18fb      	adds	r3, r7, r3
 80186ae:	2220      	movs	r2, #32
 80186b0:	601a      	str	r2, [r3, #0]
            break;
 80186b2:	e099      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateIN865[getPhy->Datarate];
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	785b      	ldrb	r3, [r3, #1]
 80186b8:	b25b      	sxtb	r3, r3
 80186ba:	001a      	movs	r2, r3
 80186bc:	4b52      	ldr	r3, [pc, #328]	; (8018808 <RegionIN865GetPhyParam+0x1d8>)
 80186be:	5c9b      	ldrb	r3, [r3, r2]
 80186c0:	001a      	movs	r2, r3
 80186c2:	2308      	movs	r3, #8
 80186c4:	18fb      	adds	r3, r7, r3
 80186c6:	601a      	str	r2, [r3, #0]
            break;
 80186c8:	e08e      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterIN865[getPhy->Datarate];
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	785b      	ldrb	r3, [r3, #1]
 80186ce:	b25b      	sxtb	r3, r3
 80186d0:	001a      	movs	r2, r3
 80186d2:	4b4e      	ldr	r3, [pc, #312]	; (801880c <RegionIN865GetPhyParam+0x1dc>)
 80186d4:	5c9b      	ldrb	r3, [r3, r2]
 80186d6:	001a      	movs	r2, r3
 80186d8:	2308      	movs	r3, #8
 80186da:	18fb      	adds	r3, r7, r3
 80186dc:	601a      	str	r2, [r3, #0]
            break;
 80186de:	e083      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = IN865_DUTY_CYCLE_ENABLED;
 80186e0:	2308      	movs	r3, #8
 80186e2:	18fb      	adds	r3, r7, r3
 80186e4:	2201      	movs	r2, #1
 80186e6:	601a      	str	r2, [r3, #0]
            break;
 80186e8:	e07e      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = IN865_MAX_RX_WINDOW;
 80186ea:	2308      	movs	r3, #8
 80186ec:	18fb      	adds	r3, r7, r3
 80186ee:	4a48      	ldr	r2, [pc, #288]	; (8018810 <RegionIN865GetPhyParam+0x1e0>)
 80186f0:	601a      	str	r2, [r3, #0]
            break;
 80186f2:	e079      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = IN865_RECEIVE_DELAY1;
 80186f4:	2308      	movs	r3, #8
 80186f6:	18fb      	adds	r3, r7, r3
 80186f8:	22fa      	movs	r2, #250	; 0xfa
 80186fa:	0092      	lsls	r2, r2, #2
 80186fc:	601a      	str	r2, [r3, #0]
            break;
 80186fe:	e073      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = IN865_RECEIVE_DELAY2;
 8018700:	2308      	movs	r3, #8
 8018702:	18fb      	adds	r3, r7, r3
 8018704:	22fa      	movs	r2, #250	; 0xfa
 8018706:	00d2      	lsls	r2, r2, #3
 8018708:	601a      	str	r2, [r3, #0]
            break;
 801870a:	e06d      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = IN865_JOIN_ACCEPT_DELAY1;
 801870c:	2308      	movs	r3, #8
 801870e:	18fb      	adds	r3, r7, r3
 8018710:	4a40      	ldr	r2, [pc, #256]	; (8018814 <RegionIN865GetPhyParam+0x1e4>)
 8018712:	601a      	str	r2, [r3, #0]
            break;
 8018714:	e068      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = IN865_JOIN_ACCEPT_DELAY2;
 8018716:	2308      	movs	r3, #8
 8018718:	18fb      	adds	r3, r7, r3
 801871a:	4a3f      	ldr	r2, [pc, #252]	; (8018818 <RegionIN865GetPhyParam+0x1e8>)
 801871c:	601a      	str	r2, [r3, #0]
            break;
 801871e:	e063      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = IN865_MAX_FCNT_GAP;
 8018720:	2308      	movs	r3, #8
 8018722:	18fb      	adds	r3, r7, r3
 8018724:	2280      	movs	r2, #128	; 0x80
 8018726:	01d2      	lsls	r2, r2, #7
 8018728:	601a      	str	r2, [r3, #0]
            break;
 801872a:	e05d      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( IN865_ACKTIMEOUT + randr( -IN865_ACK_TIMEOUT_RND, IN865_ACK_TIMEOUT_RND ) );
 801872c:	23fa      	movs	r3, #250	; 0xfa
 801872e:	009b      	lsls	r3, r3, #2
 8018730:	4a3a      	ldr	r2, [pc, #232]	; (801881c <RegionIN865GetPhyParam+0x1ec>)
 8018732:	0019      	movs	r1, r3
 8018734:	0010      	movs	r0, r2
 8018736:	f002 ff03 	bl	801b540 <randr>
 801873a:	0003      	movs	r3, r0
 801873c:	22fa      	movs	r2, #250	; 0xfa
 801873e:	00d2      	lsls	r2, r2, #3
 8018740:	4694      	mov	ip, r2
 8018742:	4463      	add	r3, ip
 8018744:	001a      	movs	r2, r3
 8018746:	2308      	movs	r3, #8
 8018748:	18fb      	adds	r3, r7, r3
 801874a:	601a      	str	r2, [r3, #0]
            break;
 801874c:	e04c      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = IN865_DEFAULT_RX1_DR_OFFSET;
 801874e:	2308      	movs	r3, #8
 8018750:	18fb      	adds	r3, r7, r3
 8018752:	2200      	movs	r2, #0
 8018754:	601a      	str	r2, [r3, #0]
            break;
 8018756:	e047      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = IN865_RX_WND_2_FREQ;
 8018758:	2308      	movs	r3, #8
 801875a:	18fb      	adds	r3, r7, r3
 801875c:	4a30      	ldr	r2, [pc, #192]	; (8018820 <RegionIN865GetPhyParam+0x1f0>)
 801875e:	601a      	str	r2, [r3, #0]
            break;
 8018760:	e042      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = IN865_RX_WND_2_DR;
 8018762:	2308      	movs	r3, #8
 8018764:	18fb      	adds	r3, r7, r3
 8018766:	2202      	movs	r2, #2
 8018768:	601a      	str	r2, [r3, #0]
            break;
 801876a:	e03d      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 801876c:	2308      	movs	r3, #8
 801876e:	18fb      	adds	r3, r7, r3
 8018770:	4a2c      	ldr	r2, [pc, #176]	; (8018824 <RegionIN865GetPhyParam+0x1f4>)
 8018772:	601a      	str	r2, [r3, #0]
            break;
 8018774:	e038      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8018776:	2308      	movs	r3, #8
 8018778:	18fb      	adds	r3, r7, r3
 801877a:	4a2b      	ldr	r2, [pc, #172]	; (8018828 <RegionIN865GetPhyParam+0x1f8>)
 801877c:	601a      	str	r2, [r3, #0]
            break;
 801877e:	e033      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = IN865_MAX_NB_CHANNELS;
 8018780:	2308      	movs	r3, #8
 8018782:	18fb      	adds	r3, r7, r3
 8018784:	2210      	movs	r2, #16
 8018786:	601a      	str	r2, [r3, #0]
            break;
 8018788:	e02e      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 801878a:	2308      	movs	r3, #8
 801878c:	18fb      	adds	r3, r7, r3
 801878e:	4a27      	ldr	r2, [pc, #156]	; (801882c <RegionIN865GetPhyParam+0x1fc>)
 8018790:	601a      	str	r2, [r3, #0]
            break;
 8018792:	e029      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8018794:	2308      	movs	r3, #8
 8018796:	18fb      	adds	r3, r7, r3
 8018798:	2200      	movs	r2, #0
 801879a:	601a      	str	r2, [r3, #0]
            break;
 801879c:	e024      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = IN865_DEFAULT_MAX_EIRP;
 801879e:	2308      	movs	r3, #8
 80187a0:	18fb      	adds	r3, r7, r3
 80187a2:	4a23      	ldr	r2, [pc, #140]	; (8018830 <RegionIN865GetPhyParam+0x200>)
 80187a4:	601a      	str	r2, [r3, #0]
            break;
 80187a6:	e01f      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = IN865_DEFAULT_ANTENNA_GAIN;
 80187a8:	2308      	movs	r3, #8
 80187aa:	18fb      	adds	r3, r7, r3
 80187ac:	4a21      	ldr	r2, [pc, #132]	; (8018834 <RegionIN865GetPhyParam+0x204>)
 80187ae:	601a      	str	r2, [r3, #0]
            break;
 80187b0:	e01a      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = IN865_BEACON_CHANNEL_FREQ;
 80187b2:	2308      	movs	r3, #8
 80187b4:	18fb      	adds	r3, r7, r3
 80187b6:	4a1a      	ldr	r2, [pc, #104]	; (8018820 <RegionIN865GetPhyParam+0x1f0>)
 80187b8:	601a      	str	r2, [r3, #0]
            break;
 80187ba:	e015      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = IN865_BEACON_SIZE;
 80187bc:	2108      	movs	r1, #8
 80187be:	187b      	adds	r3, r7, r1
 80187c0:	2213      	movs	r2, #19
 80187c2:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = IN865_RFU1_SIZE;
 80187c4:	187b      	adds	r3, r7, r1
 80187c6:	2201      	movs	r2, #1
 80187c8:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = IN865_RFU2_SIZE;
 80187ca:	187b      	adds	r3, r7, r1
 80187cc:	2203      	movs	r2, #3
 80187ce:	709a      	strb	r2, [r3, #2]
            break;
 80187d0:	e00a      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = IN865_BEACON_CHANNEL_DR;
 80187d2:	2308      	movs	r3, #8
 80187d4:	18fb      	adds	r3, r7, r3
 80187d6:	2204      	movs	r2, #4
 80187d8:	601a      	str	r2, [r3, #0]
            break;
 80187da:	e005      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = IN865_PING_SLOT_CHANNEL_DR;
 80187dc:	2308      	movs	r3, #8
 80187de:	18fb      	adds	r3, r7, r3
 80187e0:	2204      	movs	r2, #4
 80187e2:	601a      	str	r2, [r3, #0]
            break;
 80187e4:	e000      	b.n	80187e8 <RegionIN865GetPhyParam+0x1b8>
        }
        default:
        {
            break;
 80187e6:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 80187e8:	210c      	movs	r1, #12
 80187ea:	187b      	adds	r3, r7, r1
 80187ec:	2208      	movs	r2, #8
 80187ee:	18ba      	adds	r2, r7, r2
 80187f0:	6812      	ldr	r2, [r2, #0]
 80187f2:	601a      	str	r2, [r3, #0]
 80187f4:	187b      	adds	r3, r7, r1
 80187f6:	2200      	movs	r2, #0
 80187f8:	681a      	ldr	r2, [r3, #0]
 80187fa:	0013      	movs	r3, r2
}
 80187fc:	0018      	movs	r0, r3
 80187fe:	46bd      	mov	sp, r7
 8018800:	b004      	add	sp, #16
 8018802:	bd80      	pop	{r7, pc}
 8018804:	0801d19c 	.word	0x0801d19c
 8018808:	0801d184 	.word	0x0801d184
 801880c:	0801d18c 	.word	0x0801d18c
 8018810:	00000bb8 	.word	0x00000bb8
 8018814:	00001388 	.word	0x00001388
 8018818:	00001770 	.word	0x00001770
 801881c:	fffffc18 	.word	0xfffffc18
 8018820:	33a680f0 	.word	0x33a680f0
 8018824:	20001190 	.word	0x20001190
 8018828:	20001192 	.word	0x20001192
 801882c:	200010c0 	.word	0x200010c0
 8018830:	41f00000 	.word	0x41f00000
 8018834:	4009999a 	.word	0x4009999a

08018838 <RegionIN865SetBandTxDone>:

void RegionIN865SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018838:	b580      	push	{r7, lr}
 801883a:	b082      	sub	sp, #8
 801883c:	af00      	add	r7, sp, #0
 801883e:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	7858      	ldrb	r0, [r3, #1]
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	781b      	ldrb	r3, [r3, #0]
 8018848:	0019      	movs	r1, r3
 801884a:	4a0a      	ldr	r2, [pc, #40]	; (8018874 <RegionIN865SetBandTxDone+0x3c>)
 801884c:	000b      	movs	r3, r1
 801884e:	005b      	lsls	r3, r3, #1
 8018850:	185b      	adds	r3, r3, r1
 8018852:	009b      	lsls	r3, r3, #2
 8018854:	18d3      	adds	r3, r2, r3
 8018856:	3309      	adds	r3, #9
 8018858:	781b      	ldrb	r3, [r3, #0]
 801885a:	330c      	adds	r3, #12
 801885c:	011a      	lsls	r2, r3, #4
 801885e:	4b05      	ldr	r3, [pc, #20]	; (8018874 <RegionIN865SetBandTxDone+0x3c>)
 8018860:	18d1      	adds	r1, r2, r3
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	685b      	ldr	r3, [r3, #4]
 8018866:	001a      	movs	r2, r3
 8018868:	f7ff f9ec 	bl	8017c44 <RegionCommonSetBandTxDone>
}
 801886c:	46c0      	nop			; (mov r8, r8)
 801886e:	46bd      	mov	sp, r7
 8018870:	b002      	add	sp, #8
 8018872:	bd80      	pop	{r7, pc}
 8018874:	200010c0 	.word	0x200010c0

08018878 <RegionIN865InitDefaults>:

void RegionIN865InitDefaults( InitDefaultsParams_t* params )
{
 8018878:	b590      	push	{r4, r7, lr}
 801887a:	b087      	sub	sp, #28
 801887c:	af00      	add	r7, sp, #0
 801887e:	6078      	str	r0, [r7, #4]
    Band_t bands[IN865_MAX_NB_BANDS] =
 8018880:	2108      	movs	r1, #8
 8018882:	187b      	adds	r3, r7, r1
 8018884:	2201      	movs	r2, #1
 8018886:	801a      	strh	r2, [r3, #0]
 8018888:	187b      	adds	r3, r7, r1
 801888a:	2200      	movs	r2, #0
 801888c:	709a      	strb	r2, [r3, #2]
 801888e:	187b      	adds	r3, r7, r1
 8018890:	2200      	movs	r2, #0
 8018892:	605a      	str	r2, [r3, #4]
 8018894:	187b      	adds	r3, r7, r1
 8018896:	2200      	movs	r2, #0
 8018898:	609a      	str	r2, [r3, #8]
 801889a:	187b      	adds	r3, r7, r1
 801889c:	2200      	movs	r2, #0
 801889e:	60da      	str	r2, [r3, #12]
    {
        IN865_BAND0
    };

    switch( params->Type )
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	791b      	ldrb	r3, [r3, #4]
 80188a4:	2b01      	cmp	r3, #1
 80188a6:	d030      	beq.n	801890a <RegionIN865InitDefaults+0x92>
 80188a8:	2b02      	cmp	r3, #2
 80188aa:	d022      	beq.n	80188f2 <RegionIN865InitDefaults+0x7a>
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d000      	beq.n	80188b2 <RegionIN865InitDefaults+0x3a>
            NvmCtx.Channels[2] = ( ChannelParams_t ) IN865_LC3;
            break;
        }
        default:
        {
            break;
 80188b0:	e046      	b.n	8018940 <RegionIN865InitDefaults+0xc8>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * IN865_MAX_NB_BANDS );
 80188b2:	2308      	movs	r3, #8
 80188b4:	18f9      	adds	r1, r7, r3
 80188b6:	4b24      	ldr	r3, [pc, #144]	; (8018948 <RegionIN865InitDefaults+0xd0>)
 80188b8:	2210      	movs	r2, #16
 80188ba:	0018      	movs	r0, r3
 80188bc:	f002 fe56 	bl	801b56c <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) IN865_LC1;
 80188c0:	4b22      	ldr	r3, [pc, #136]	; (801894c <RegionIN865InitDefaults+0xd4>)
 80188c2:	4a23      	ldr	r2, [pc, #140]	; (8018950 <RegionIN865InitDefaults+0xd8>)
 80188c4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80188c6:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) IN865_LC2;
 80188c8:	4b20      	ldr	r3, [pc, #128]	; (801894c <RegionIN865InitDefaults+0xd4>)
 80188ca:	4a22      	ldr	r2, [pc, #136]	; (8018954 <RegionIN865InitDefaults+0xdc>)
 80188cc:	330c      	adds	r3, #12
 80188ce:	ca13      	ldmia	r2!, {r0, r1, r4}
 80188d0:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) IN865_LC3;
 80188d2:	4b1e      	ldr	r3, [pc, #120]	; (801894c <RegionIN865InitDefaults+0xd4>)
 80188d4:	4a20      	ldr	r2, [pc, #128]	; (8018958 <RegionIN865InitDefaults+0xe0>)
 80188d6:	3318      	adds	r3, #24
 80188d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80188da:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80188dc:	4b1b      	ldr	r3, [pc, #108]	; (801894c <RegionIN865InitDefaults+0xd4>)
 80188de:	22d2      	movs	r2, #210	; 0xd2
 80188e0:	2107      	movs	r1, #7
 80188e2:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 80188e4:	491d      	ldr	r1, [pc, #116]	; (801895c <RegionIN865InitDefaults+0xe4>)
 80188e6:	4b1e      	ldr	r3, [pc, #120]	; (8018960 <RegionIN865InitDefaults+0xe8>)
 80188e8:	2201      	movs	r2, #1
 80188ea:	0018      	movs	r0, r3
 80188ec:	f7ff f97b 	bl	8017be6 <RegionCommonChanMaskCopy>
            break;
 80188f0:	e026      	b.n	8018940 <RegionIN865InitDefaults+0xc8>
            if( params->NvmCtx != 0 )
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d021      	beq.n	801893e <RegionIN865InitDefaults+0xc6>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	6819      	ldr	r1, [r3, #0]
 80188fe:	4b13      	ldr	r3, [pc, #76]	; (801894c <RegionIN865InitDefaults+0xd4>)
 8018900:	22d4      	movs	r2, #212	; 0xd4
 8018902:	0018      	movs	r0, r3
 8018904:	f002 fe32 	bl	801b56c <memcpy1>
            break;
 8018908:	e019      	b.n	801893e <RegionIN865InitDefaults+0xc6>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 801890a:	4b10      	ldr	r3, [pc, #64]	; (801894c <RegionIN865InitDefaults+0xd4>)
 801890c:	22d0      	movs	r2, #208	; 0xd0
 801890e:	5a9a      	ldrh	r2, [r3, r2]
 8018910:	4b0e      	ldr	r3, [pc, #56]	; (801894c <RegionIN865InitDefaults+0xd4>)
 8018912:	21d2      	movs	r1, #210	; 0xd2
 8018914:	5a5b      	ldrh	r3, [r3, r1]
 8018916:	4313      	orrs	r3, r2
 8018918:	b299      	uxth	r1, r3
 801891a:	4b0c      	ldr	r3, [pc, #48]	; (801894c <RegionIN865InitDefaults+0xd4>)
 801891c:	22d0      	movs	r2, #208	; 0xd0
 801891e:	5299      	strh	r1, [r3, r2]
            NvmCtx.Channels[0] = ( ChannelParams_t ) IN865_LC1;
 8018920:	4b0a      	ldr	r3, [pc, #40]	; (801894c <RegionIN865InitDefaults+0xd4>)
 8018922:	4a0b      	ldr	r2, [pc, #44]	; (8018950 <RegionIN865InitDefaults+0xd8>)
 8018924:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018926:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) IN865_LC2;
 8018928:	4b08      	ldr	r3, [pc, #32]	; (801894c <RegionIN865InitDefaults+0xd4>)
 801892a:	4a0a      	ldr	r2, [pc, #40]	; (8018954 <RegionIN865InitDefaults+0xdc>)
 801892c:	330c      	adds	r3, #12
 801892e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018930:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) IN865_LC3;
 8018932:	4b06      	ldr	r3, [pc, #24]	; (801894c <RegionIN865InitDefaults+0xd4>)
 8018934:	4a08      	ldr	r2, [pc, #32]	; (8018958 <RegionIN865InitDefaults+0xe0>)
 8018936:	3318      	adds	r3, #24
 8018938:	ca13      	ldmia	r2!, {r0, r1, r4}
 801893a:	c313      	stmia	r3!, {r0, r1, r4}
            break;
 801893c:	e000      	b.n	8018940 <RegionIN865InitDefaults+0xc8>
            break;
 801893e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8018940:	46c0      	nop			; (mov r8, r8)
 8018942:	46bd      	mov	sp, r7
 8018944:	b007      	add	sp, #28
 8018946:	bd90      	pop	{r4, r7, pc}
 8018948:	20001180 	.word	0x20001180
 801894c:	200010c0 	.word	0x200010c0
 8018950:	0801c2f4 	.word	0x0801c2f4
 8018954:	0801c300 	.word	0x0801c300
 8018958:	0801c30c 	.word	0x0801c30c
 801895c:	20001192 	.word	0x20001192
 8018960:	20001190 	.word	0x20001190

08018964 <RegionIN865GetNvmCtx>:

void* RegionIN865GetNvmCtx( GetNvmCtxParams_t* params )
{
 8018964:	b580      	push	{r7, lr}
 8018966:	b082      	sub	sp, #8
 8018968:	af00      	add	r7, sp, #0
 801896a:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionIN865NvmCtx_t );
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	22d4      	movs	r2, #212	; 0xd4
 8018970:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8018972:	4b02      	ldr	r3, [pc, #8]	; (801897c <RegionIN865GetNvmCtx+0x18>)
}
 8018974:	0018      	movs	r0, r3
 8018976:	46bd      	mov	sp, r7
 8018978:	b002      	add	sp, #8
 801897a:	bd80      	pop	{r7, pc}
 801897c:	200010c0 	.word	0x200010c0

08018980 <RegionIN865Verify>:

bool RegionIN865Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018980:	b580      	push	{r7, lr}
 8018982:	b082      	sub	sp, #8
 8018984:	af00      	add	r7, sp, #0
 8018986:	6078      	str	r0, [r7, #4]
 8018988:	000a      	movs	r2, r1
 801898a:	1cfb      	adds	r3, r7, #3
 801898c:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 801898e:	1cfb      	adds	r3, r7, #3
 8018990:	781b      	ldrb	r3, [r3, #0]
 8018992:	2b0f      	cmp	r3, #15
 8018994:	d84f      	bhi.n	8018a36 <RegionIN865Verify+0xb6>
 8018996:	009a      	lsls	r2, r3, #2
 8018998:	4b29      	ldr	r3, [pc, #164]	; (8018a40 <RegionIN865Verify+0xc0>)
 801899a:	18d3      	adds	r3, r2, r3
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	469f      	mov	pc, r3
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	0018      	movs	r0, r3
 80189a6:	f7ff fd35 	bl	8018414 <VerifyRfFreq>
 80189aa:	0003      	movs	r3, r0
 80189ac:	e044      	b.n	8018a38 <RegionIN865Verify+0xb8>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	781b      	ldrb	r3, [r3, #0]
 80189b2:	b25b      	sxtb	r3, r3
 80189b4:	2b06      	cmp	r3, #6
 80189b6:	d101      	bne.n	80189bc <RegionIN865Verify+0x3c>
            {// DR_6 is not supported by this region
                return false;
 80189b8:	2300      	movs	r3, #0
 80189ba:	e03d      	b.n	8018a38 <RegionIN865Verify+0xb8>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE );
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	781b      	ldrb	r3, [r3, #0]
 80189c0:	b25b      	sxtb	r3, r3
 80189c2:	2207      	movs	r2, #7
 80189c4:	2100      	movs	r1, #0
 80189c6:	0018      	movs	r0, r3
 80189c8:	f7ff f864 	bl	8017a94 <RegionCommonValueInRange>
 80189cc:	0003      	movs	r3, r0
 80189ce:	1e5a      	subs	r2, r3, #1
 80189d0:	4193      	sbcs	r3, r2
 80189d2:	b2db      	uxtb	r3, r3
 80189d4:	e030      	b.n	8018a38 <RegionIN865Verify+0xb8>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	781b      	ldrb	r3, [r3, #0]
 80189da:	b25b      	sxtb	r3, r3
 80189dc:	2205      	movs	r2, #5
 80189de:	2100      	movs	r1, #0
 80189e0:	0018      	movs	r0, r3
 80189e2:	f7ff f857 	bl	8017a94 <RegionCommonValueInRange>
 80189e6:	0003      	movs	r3, r0
 80189e8:	1e5a      	subs	r2, r3, #1
 80189ea:	4193      	sbcs	r3, r2
 80189ec:	b2db      	uxtb	r3, r3
 80189ee:	e023      	b.n	8018a38 <RegionIN865Verify+0xb8>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	781b      	ldrb	r3, [r3, #0]
 80189f4:	b25b      	sxtb	r3, r3
 80189f6:	2b06      	cmp	r3, #6
 80189f8:	d101      	bne.n	80189fe <RegionIN865Verify+0x7e>
            {// DR_6 is not supported by this region
                return false;
 80189fa:	2300      	movs	r3, #0
 80189fc:	e01c      	b.n	8018a38 <RegionIN865Verify+0xb8>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE );
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	781b      	ldrb	r3, [r3, #0]
 8018a02:	b25b      	sxtb	r3, r3
 8018a04:	2207      	movs	r2, #7
 8018a06:	2100      	movs	r1, #0
 8018a08:	0018      	movs	r0, r3
 8018a0a:	f7ff f843 	bl	8017a94 <RegionCommonValueInRange>
 8018a0e:	0003      	movs	r3, r0
 8018a10:	1e5a      	subs	r2, r3, #1
 8018a12:	4193      	sbcs	r3, r2
 8018a14:	b2db      	uxtb	r3, r3
 8018a16:	e00f      	b.n	8018a38 <RegionIN865Verify+0xb8>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, IN865_MAX_TX_POWER, IN865_MIN_TX_POWER );
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	781b      	ldrb	r3, [r3, #0]
 8018a1c:	b25b      	sxtb	r3, r3
 8018a1e:	220a      	movs	r2, #10
 8018a20:	2100      	movs	r1, #0
 8018a22:	0018      	movs	r0, r3
 8018a24:	f7ff f836 	bl	8017a94 <RegionCommonValueInRange>
 8018a28:	0003      	movs	r3, r0
 8018a2a:	1e5a      	subs	r2, r3, #1
 8018a2c:	4193      	sbcs	r3, r2
 8018a2e:	b2db      	uxtb	r3, r3
 8018a30:	e002      	b.n	8018a38 <RegionIN865Verify+0xb8>
        }
        case PHY_DUTY_CYCLE:
        {
            return IN865_DUTY_CYCLE_ENABLED;
 8018a32:	2301      	movs	r3, #1
 8018a34:	e000      	b.n	8018a38 <RegionIN865Verify+0xb8>
        }
        default:
            return false;
 8018a36:	2300      	movs	r3, #0
    }
}
 8018a38:	0018      	movs	r0, r3
 8018a3a:	46bd      	mov	sp, r7
 8018a3c:	b002      	add	sp, #8
 8018a3e:	bd80      	pop	{r7, pc}
 8018a40:	0801d274 	.word	0x0801d274

08018a44 <RegionIN865ApplyCFList>:

void RegionIN865ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018a44:	b590      	push	{r4, r7, lr}
 8018a46:	b08b      	sub	sp, #44	; 0x2c
 8018a48:	af00      	add	r7, sp, #0
 8018a4a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8018a4c:	2318      	movs	r3, #24
 8018a4e:	18fb      	adds	r3, r7, r3
 8018a50:	2250      	movs	r2, #80	; 0x50
 8018a52:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	791b      	ldrb	r3, [r3, #4]
 8018a58:	2b10      	cmp	r3, #16
 8018a5a:	d000      	beq.n	8018a5e <RegionIN865ApplyCFList+0x1a>
 8018a5c:	e07d      	b.n	8018b5a <RegionIN865ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	330f      	adds	r3, #15
 8018a64:	781b      	ldrb	r3, [r3, #0]
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d000      	beq.n	8018a6c <RegionIN865ApplyCFList+0x28>
 8018a6a:	e078      	b.n	8018b5e <RegionIN865ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018a6c:	2327      	movs	r3, #39	; 0x27
 8018a6e:	18fb      	adds	r3, r7, r3
 8018a70:	2200      	movs	r2, #0
 8018a72:	701a      	strb	r2, [r3, #0]
 8018a74:	2326      	movs	r3, #38	; 0x26
 8018a76:	18fb      	adds	r3, r7, r3
 8018a78:	2203      	movs	r2, #3
 8018a7a:	701a      	strb	r2, [r3, #0]
 8018a7c:	e067      	b.n	8018b4e <RegionIN865ApplyCFList+0x10a>
    {
        if( chanIdx < ( IN865_NUMB_CHANNELS_CF_LIST + IN865_NUMB_DEFAULT_CHANNELS ) )
 8018a7e:	2326      	movs	r3, #38	; 0x26
 8018a80:	18fb      	adds	r3, r7, r3
 8018a82:	781b      	ldrb	r3, [r3, #0]
 8018a84:	2b07      	cmp	r3, #7
 8018a86:	d82e      	bhi.n	8018ae6 <RegionIN865ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	681a      	ldr	r2, [r3, #0]
 8018a8c:	2427      	movs	r4, #39	; 0x27
 8018a8e:	193b      	adds	r3, r7, r4
 8018a90:	781b      	ldrb	r3, [r3, #0]
 8018a92:	18d3      	adds	r3, r2, r3
 8018a94:	781b      	ldrb	r3, [r3, #0]
 8018a96:	001a      	movs	r2, r3
 8018a98:	2018      	movs	r0, #24
 8018a9a:	183b      	adds	r3, r7, r0
 8018a9c:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8018a9e:	183b      	adds	r3, r7, r0
 8018aa0:	681a      	ldr	r2, [r3, #0]
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	6819      	ldr	r1, [r3, #0]
 8018aa6:	193b      	adds	r3, r7, r4
 8018aa8:	781b      	ldrb	r3, [r3, #0]
 8018aaa:	3301      	adds	r3, #1
 8018aac:	18cb      	adds	r3, r1, r3
 8018aae:	781b      	ldrb	r3, [r3, #0]
 8018ab0:	021b      	lsls	r3, r3, #8
 8018ab2:	431a      	orrs	r2, r3
 8018ab4:	183b      	adds	r3, r7, r0
 8018ab6:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8018ab8:	183b      	adds	r3, r7, r0
 8018aba:	681a      	ldr	r2, [r3, #0]
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	6819      	ldr	r1, [r3, #0]
 8018ac0:	193b      	adds	r3, r7, r4
 8018ac2:	781b      	ldrb	r3, [r3, #0]
 8018ac4:	3302      	adds	r3, #2
 8018ac6:	18cb      	adds	r3, r1, r3
 8018ac8:	781b      	ldrb	r3, [r3, #0]
 8018aca:	041b      	lsls	r3, r3, #16
 8018acc:	431a      	orrs	r2, r3
 8018ace:	183b      	adds	r3, r7, r0
 8018ad0:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 8018ad2:	183b      	adds	r3, r7, r0
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	2264      	movs	r2, #100	; 0x64
 8018ad8:	435a      	muls	r2, r3
 8018ada:	183b      	adds	r3, r7, r0
 8018adc:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8018ade:	183b      	adds	r3, r7, r0
 8018ae0:	2200      	movs	r2, #0
 8018ae2:	605a      	str	r2, [r3, #4]
 8018ae4:	e009      	b.n	8018afa <RegionIN865ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 8018ae6:	2118      	movs	r1, #24
 8018ae8:	187b      	adds	r3, r7, r1
 8018aea:	2200      	movs	r2, #0
 8018aec:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 8018aee:	187b      	adds	r3, r7, r1
 8018af0:	2200      	movs	r2, #0
 8018af2:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8018af4:	187b      	adds	r3, r7, r1
 8018af6:	2200      	movs	r2, #0
 8018af8:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8018afa:	2318      	movs	r3, #24
 8018afc:	18fb      	adds	r3, r7, r3
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d00e      	beq.n	8018b22 <RegionIN865ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 8018b04:	2110      	movs	r1, #16
 8018b06:	187b      	adds	r3, r7, r1
 8018b08:	2218      	movs	r2, #24
 8018b0a:	18ba      	adds	r2, r7, r2
 8018b0c:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8018b0e:	187b      	adds	r3, r7, r1
 8018b10:	2226      	movs	r2, #38	; 0x26
 8018b12:	18ba      	adds	r2, r7, r2
 8018b14:	7812      	ldrb	r2, [r2, #0]
 8018b16:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionIN865ChannelAdd( &channelAdd );
 8018b18:	187b      	adds	r3, r7, r1
 8018b1a:	0018      	movs	r0, r3
 8018b1c:	f000 fdbe 	bl	801969c <RegionIN865ChannelAdd>
 8018b20:	e009      	b.n	8018b36 <RegionIN865ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8018b22:	210c      	movs	r1, #12
 8018b24:	187b      	adds	r3, r7, r1
 8018b26:	2226      	movs	r2, #38	; 0x26
 8018b28:	18ba      	adds	r2, r7, r2
 8018b2a:	7812      	ldrb	r2, [r2, #0]
 8018b2c:	701a      	strb	r2, [r3, #0]

            RegionIN865ChannelsRemove( &channelRemove );
 8018b2e:	187b      	adds	r3, r7, r1
 8018b30:	0018      	movs	r0, r3
 8018b32:	f000 fe6d 	bl	8019810 <RegionIN865ChannelsRemove>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018b36:	2227      	movs	r2, #39	; 0x27
 8018b38:	18bb      	adds	r3, r7, r2
 8018b3a:	18ba      	adds	r2, r7, r2
 8018b3c:	7812      	ldrb	r2, [r2, #0]
 8018b3e:	3203      	adds	r2, #3
 8018b40:	701a      	strb	r2, [r3, #0]
 8018b42:	2126      	movs	r1, #38	; 0x26
 8018b44:	187b      	adds	r3, r7, r1
 8018b46:	781a      	ldrb	r2, [r3, #0]
 8018b48:	187b      	adds	r3, r7, r1
 8018b4a:	3201      	adds	r2, #1
 8018b4c:	701a      	strb	r2, [r3, #0]
 8018b4e:	2326      	movs	r3, #38	; 0x26
 8018b50:	18fb      	adds	r3, r7, r3
 8018b52:	781b      	ldrb	r3, [r3, #0]
 8018b54:	2b0f      	cmp	r3, #15
 8018b56:	d992      	bls.n	8018a7e <RegionIN865ApplyCFList+0x3a>
 8018b58:	e002      	b.n	8018b60 <RegionIN865ApplyCFList+0x11c>
        return;
 8018b5a:	46c0      	nop			; (mov r8, r8)
 8018b5c:	e000      	b.n	8018b60 <RegionIN865ApplyCFList+0x11c>
        return;
 8018b5e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8018b60:	46bd      	mov	sp, r7
 8018b62:	b00b      	add	sp, #44	; 0x2c
 8018b64:	bd90      	pop	{r4, r7, pc}
	...

08018b68 <RegionIN865ChanMaskSet>:

bool RegionIN865ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018b68:	b580      	push	{r7, lr}
 8018b6a:	b082      	sub	sp, #8
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	791b      	ldrb	r3, [r3, #4]
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d002      	beq.n	8018b7e <RegionIN865ChanMaskSet+0x16>
 8018b78:	2b01      	cmp	r3, #1
 8018b7a:	d008      	beq.n	8018b8e <RegionIN865ChanMaskSet+0x26>
 8018b7c:	e00f      	b.n	8018b9e <RegionIN865ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	6819      	ldr	r1, [r3, #0]
 8018b82:	4b0a      	ldr	r3, [pc, #40]	; (8018bac <RegionIN865ChanMaskSet+0x44>)
 8018b84:	2201      	movs	r2, #1
 8018b86:	0018      	movs	r0, r3
 8018b88:	f7ff f82d 	bl	8017be6 <RegionCommonChanMaskCopy>
            break;
 8018b8c:	e009      	b.n	8018ba2 <RegionIN865ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	6819      	ldr	r1, [r3, #0]
 8018b92:	4b07      	ldr	r3, [pc, #28]	; (8018bb0 <RegionIN865ChanMaskSet+0x48>)
 8018b94:	2201      	movs	r2, #1
 8018b96:	0018      	movs	r0, r3
 8018b98:	f7ff f825 	bl	8017be6 <RegionCommonChanMaskCopy>
            break;
 8018b9c:	e001      	b.n	8018ba2 <RegionIN865ChanMaskSet+0x3a>
        }
        default:
            return false;
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	e000      	b.n	8018ba4 <RegionIN865ChanMaskSet+0x3c>
    }
    return true;
 8018ba2:	2301      	movs	r3, #1
}
 8018ba4:	0018      	movs	r0, r3
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	b002      	add	sp, #8
 8018baa:	bd80      	pop	{r7, pc}
 8018bac:	20001190 	.word	0x20001190
 8018bb0:	20001192 	.word	0x20001192

08018bb4 <RegionIN865ComputeRxWindowParameters>:

void RegionIN865ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bb6:	b08b      	sub	sp, #44	; 0x2c
 8018bb8:	af04      	add	r7, sp, #16
 8018bba:	60ba      	str	r2, [r7, #8]
 8018bbc:	607b      	str	r3, [r7, #4]
 8018bbe:	250f      	movs	r5, #15
 8018bc0:	197b      	adds	r3, r7, r5
 8018bc2:	1c02      	adds	r2, r0, #0
 8018bc4:	701a      	strb	r2, [r3, #0]
 8018bc6:	230e      	movs	r3, #14
 8018bc8:	18fb      	adds	r3, r7, r3
 8018bca:	1c0a      	adds	r2, r1, #0
 8018bcc:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 8018bce:	2300      	movs	r3, #0
 8018bd0:	2400      	movs	r4, #0
 8018bd2:	613b      	str	r3, [r7, #16]
 8018bd4:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, IN865_RX_MAX_DATARATE );
 8018bd6:	197b      	adds	r3, r7, r5
 8018bd8:	781b      	ldrb	r3, [r3, #0]
 8018bda:	b25a      	sxtb	r2, r3
 8018bdc:	2a07      	cmp	r2, #7
 8018bde:	dd00      	ble.n	8018be2 <RegionIN865ComputeRxWindowParameters+0x2e>
 8018be0:	2307      	movs	r3, #7
 8018be2:	b25a      	sxtb	r2, r3
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	785b      	ldrb	r3, [r3, #1]
 8018bec:	b25b      	sxtb	r3, r3
 8018bee:	0018      	movs	r0, r3
 8018bf0:	f7ff fbca 	bl	8018388 <GetBandwidth>
 8018bf4:	0003      	movs	r3, r0
 8018bf6:	b2da      	uxtb	r2, r3
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	785b      	ldrb	r3, [r3, #1]
 8018c00:	b25b      	sxtb	r3, r3
 8018c02:	2b07      	cmp	r3, #7
 8018c04:	d10d      	bne.n	8018c22 <RegionIN865ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	785b      	ldrb	r3, [r3, #1]
 8018c0a:	b25b      	sxtb	r3, r3
 8018c0c:	001a      	movs	r2, r3
 8018c0e:	4b1b      	ldr	r3, [pc, #108]	; (8018c7c <RegionIN865ComputeRxWindowParameters+0xc8>)
 8018c10:	5c9b      	ldrb	r3, [r3, r2]
 8018c12:	0018      	movs	r0, r3
 8018c14:	f7ff fa20 	bl	8018058 <RegionCommonComputeSymbolTimeFsk>
 8018c18:	0003      	movs	r3, r0
 8018c1a:	000c      	movs	r4, r1
 8018c1c:	613b      	str	r3, [r7, #16]
 8018c1e:	617c      	str	r4, [r7, #20]
 8018c20:	e013      	b.n	8018c4a <RegionIN865ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesIN865[rxConfigParams->Datarate], BandwidthsIN865[rxConfigParams->Datarate] );
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	785b      	ldrb	r3, [r3, #1]
 8018c26:	b25b      	sxtb	r3, r3
 8018c28:	001a      	movs	r2, r3
 8018c2a:	4b14      	ldr	r3, [pc, #80]	; (8018c7c <RegionIN865ComputeRxWindowParameters+0xc8>)
 8018c2c:	5c98      	ldrb	r0, [r3, r2]
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	785b      	ldrb	r3, [r3, #1]
 8018c32:	b25b      	sxtb	r3, r3
 8018c34:	001a      	movs	r2, r3
 8018c36:	4b12      	ldr	r3, [pc, #72]	; (8018c80 <RegionIN865ComputeRxWindowParameters+0xcc>)
 8018c38:	0092      	lsls	r2, r2, #2
 8018c3a:	58d3      	ldr	r3, [r2, r3]
 8018c3c:	0019      	movs	r1, r3
 8018c3e:	f7ff f9df 	bl	8018000 <RegionCommonComputeSymbolTimeLoRa>
 8018c42:	0003      	movs	r3, r0
 8018c44:	000c      	movs	r4, r1
 8018c46:	613b      	str	r3, [r7, #16]
 8018c48:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018c4a:	4b0e      	ldr	r3, [pc, #56]	; (8018c84 <RegionIN865ComputeRxWindowParameters+0xd0>)
 8018c4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018c4e:	4798      	blx	r3
 8018c50:	0006      	movs	r6, r0
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	3308      	adds	r3, #8
 8018c56:	687a      	ldr	r2, [r7, #4]
 8018c58:	320c      	adds	r2, #12
 8018c5a:	68bd      	ldr	r5, [r7, #8]
 8018c5c:	210e      	movs	r1, #14
 8018c5e:	1879      	adds	r1, r7, r1
 8018c60:	780c      	ldrb	r4, [r1, #0]
 8018c62:	6938      	ldr	r0, [r7, #16]
 8018c64:	6979      	ldr	r1, [r7, #20]
 8018c66:	9202      	str	r2, [sp, #8]
 8018c68:	9301      	str	r3, [sp, #4]
 8018c6a:	9600      	str	r6, [sp, #0]
 8018c6c:	002b      	movs	r3, r5
 8018c6e:	0022      	movs	r2, r4
 8018c70:	f7ff fa0e 	bl	8018090 <RegionCommonComputeRxWindowParameters>
}
 8018c74:	46c0      	nop			; (mov r8, r8)
 8018c76:	46bd      	mov	sp, r7
 8018c78:	b007      	add	sp, #28
 8018c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c7c:	0801d15c 	.word	0x0801d15c
 8018c80:	0801d164 	.word	0x0801d164
 8018c84:	0801ca04 	.word	0x0801ca04

08018c88 <RegionIN865RxConfig>:

bool RegionIN865RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c8a:	b091      	sub	sp, #68	; 0x44
 8018c8c:	af0a      	add	r7, sp, #40	; 0x28
 8018c8e:	6078      	str	r0, [r7, #4]
 8018c90:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8018c92:	230f      	movs	r3, #15
 8018c94:	18fb      	adds	r3, r7, r3
 8018c96:	687a      	ldr	r2, [r7, #4]
 8018c98:	7852      	ldrb	r2, [r2, #1]
 8018c9a:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8018c9c:	2316      	movs	r3, #22
 8018c9e:	18fb      	adds	r3, r7, r3
 8018ca0:	2200      	movs	r2, #0
 8018ca2:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8018ca4:	230e      	movs	r3, #14
 8018ca6:	18fb      	adds	r3, r7, r3
 8018ca8:	2200      	movs	r2, #0
 8018caa:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	685b      	ldr	r3, [r3, #4]
 8018cb0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8018cb2:	4b64      	ldr	r3, [pc, #400]	; (8018e44 <RegionIN865RxConfig+0x1bc>)
 8018cb4:	68db      	ldr	r3, [r3, #12]
 8018cb6:	4798      	blx	r3
 8018cb8:	1e03      	subs	r3, r0, #0
 8018cba:	d001      	beq.n	8018cc0 <RegionIN865RxConfig+0x38>
    {
        return false;
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	e0bc      	b.n	8018e3a <RegionIN865RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	7cdb      	ldrb	r3, [r3, #19]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d122      	bne.n	8018d0e <RegionIN865RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	781b      	ldrb	r3, [r3, #0]
 8018ccc:	0019      	movs	r1, r3
 8018cce:	4a5e      	ldr	r2, [pc, #376]	; (8018e48 <RegionIN865RxConfig+0x1c0>)
 8018cd0:	000b      	movs	r3, r1
 8018cd2:	005b      	lsls	r3, r3, #1
 8018cd4:	185b      	adds	r3, r3, r1
 8018cd6:	009b      	lsls	r3, r3, #2
 8018cd8:	589b      	ldr	r3, [r3, r2]
 8018cda:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	781b      	ldrb	r3, [r3, #0]
 8018ce0:	0019      	movs	r1, r3
 8018ce2:	4a59      	ldr	r2, [pc, #356]	; (8018e48 <RegionIN865RxConfig+0x1c0>)
 8018ce4:	000b      	movs	r3, r1
 8018ce6:	005b      	lsls	r3, r3, #1
 8018ce8:	185b      	adds	r3, r3, r1
 8018cea:	009b      	lsls	r3, r3, #2
 8018cec:	18d3      	adds	r3, r2, r3
 8018cee:	3304      	adds	r3, #4
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d00b      	beq.n	8018d0e <RegionIN865RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	781b      	ldrb	r3, [r3, #0]
 8018cfa:	0019      	movs	r1, r3
 8018cfc:	4a52      	ldr	r2, [pc, #328]	; (8018e48 <RegionIN865RxConfig+0x1c0>)
 8018cfe:	000b      	movs	r3, r1
 8018d00:	005b      	lsls	r3, r3, #1
 8018d02:	185b      	adds	r3, r3, r1
 8018d04:	009b      	lsls	r3, r3, #2
 8018d06:	18d3      	adds	r3, r2, r3
 8018d08:	3304      	adds	r3, #4
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesIN865[dr];
 8018d0e:	240f      	movs	r4, #15
 8018d10:	193b      	adds	r3, r7, r4
 8018d12:	781b      	ldrb	r3, [r3, #0]
 8018d14:	b25b      	sxtb	r3, r3
 8018d16:	4a4d      	ldr	r2, [pc, #308]	; (8018e4c <RegionIN865RxConfig+0x1c4>)
 8018d18:	5cd2      	ldrb	r2, [r2, r3]
 8018d1a:	230e      	movs	r3, #14
 8018d1c:	18fb      	adds	r3, r7, r3
 8018d1e:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8018d20:	4b48      	ldr	r3, [pc, #288]	; (8018e44 <RegionIN865RxConfig+0x1bc>)
 8018d22:	695b      	ldr	r3, [r3, #20]
 8018d24:	693a      	ldr	r2, [r7, #16]
 8018d26:	0010      	movs	r0, r2
 8018d28:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8018d2a:	193b      	adds	r3, r7, r4
 8018d2c:	781b      	ldrb	r3, [r3, #0]
 8018d2e:	b25b      	sxtb	r3, r3
 8018d30:	2b07      	cmp	r3, #7
 8018d32:	d12f      	bne.n	8018d94 <RegionIN865RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 8018d34:	2117      	movs	r1, #23
 8018d36:	187b      	adds	r3, r7, r1
 8018d38:	2200      	movs	r2, #0
 8018d3a:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8018d3c:	4b41      	ldr	r3, [pc, #260]	; (8018e44 <RegionIN865RxConfig+0x1bc>)
 8018d3e:	6a1c      	ldr	r4, [r3, #32]
 8018d40:	230e      	movs	r3, #14
 8018d42:	18fb      	adds	r3, r7, r3
 8018d44:	2200      	movs	r2, #0
 8018d46:	569a      	ldrsb	r2, [r3, r2]
 8018d48:	0013      	movs	r3, r2
 8018d4a:	015b      	lsls	r3, r3, #5
 8018d4c:	1a9b      	subs	r3, r3, r2
 8018d4e:	009b      	lsls	r3, r3, #2
 8018d50:	189b      	adds	r3, r3, r2
 8018d52:	00db      	lsls	r3, r3, #3
 8018d54:	001e      	movs	r6, r3
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	689b      	ldr	r3, [r3, #8]
 8018d5a:	b29b      	uxth	r3, r3
 8018d5c:	687a      	ldr	r2, [r7, #4]
 8018d5e:	7c92      	ldrb	r2, [r2, #18]
 8018d60:	4d3b      	ldr	r5, [pc, #236]	; (8018e50 <RegionIN865RxConfig+0x1c8>)
 8018d62:	1879      	adds	r1, r7, r1
 8018d64:	7808      	ldrb	r0, [r1, #0]
 8018d66:	9209      	str	r2, [sp, #36]	; 0x24
 8018d68:	2200      	movs	r2, #0
 8018d6a:	9208      	str	r2, [sp, #32]
 8018d6c:	2200      	movs	r2, #0
 8018d6e:	9207      	str	r2, [sp, #28]
 8018d70:	2200      	movs	r2, #0
 8018d72:	9206      	str	r2, [sp, #24]
 8018d74:	2201      	movs	r2, #1
 8018d76:	9205      	str	r2, [sp, #20]
 8018d78:	2200      	movs	r2, #0
 8018d7a:	9204      	str	r2, [sp, #16]
 8018d7c:	2200      	movs	r2, #0
 8018d7e:	9203      	str	r2, [sp, #12]
 8018d80:	9302      	str	r3, [sp, #8]
 8018d82:	2305      	movs	r3, #5
 8018d84:	9301      	str	r3, [sp, #4]
 8018d86:	4b33      	ldr	r3, [pc, #204]	; (8018e54 <RegionIN865RxConfig+0x1cc>)
 8018d88:	9300      	str	r3, [sp, #0]
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	0032      	movs	r2, r6
 8018d8e:	0029      	movs	r1, r5
 8018d90:	47a0      	blx	r4
 8018d92:	e029      	b.n	8018de8 <RegionIN865RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 8018d94:	2117      	movs	r1, #23
 8018d96:	187b      	adds	r3, r7, r1
 8018d98:	2201      	movs	r2, #1
 8018d9a:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8018d9c:	4b29      	ldr	r3, [pc, #164]	; (8018e44 <RegionIN865RxConfig+0x1bc>)
 8018d9e:	6a1c      	ldr	r4, [r3, #32]
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	789b      	ldrb	r3, [r3, #2]
 8018da4:	001e      	movs	r6, r3
 8018da6:	230e      	movs	r3, #14
 8018da8:	18fb      	adds	r3, r7, r3
 8018daa:	2500      	movs	r5, #0
 8018dac:	575d      	ldrsb	r5, [r3, r5]
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	689b      	ldr	r3, [r3, #8]
 8018db2:	b29b      	uxth	r3, r3
 8018db4:	687a      	ldr	r2, [r7, #4]
 8018db6:	7c92      	ldrb	r2, [r2, #18]
 8018db8:	1879      	adds	r1, r7, r1
 8018dba:	7808      	ldrb	r0, [r1, #0]
 8018dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8018dbe:	2201      	movs	r2, #1
 8018dc0:	9208      	str	r2, [sp, #32]
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	9207      	str	r2, [sp, #28]
 8018dc6:	2200      	movs	r2, #0
 8018dc8:	9206      	str	r2, [sp, #24]
 8018dca:	2200      	movs	r2, #0
 8018dcc:	9205      	str	r2, [sp, #20]
 8018dce:	2200      	movs	r2, #0
 8018dd0:	9204      	str	r2, [sp, #16]
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	9203      	str	r2, [sp, #12]
 8018dd6:	9302      	str	r3, [sp, #8]
 8018dd8:	2308      	movs	r3, #8
 8018dda:	9301      	str	r3, [sp, #4]
 8018ddc:	2300      	movs	r3, #0
 8018dde:	9300      	str	r3, [sp, #0]
 8018de0:	2301      	movs	r3, #1
 8018de2:	002a      	movs	r2, r5
 8018de4:	0031      	movs	r1, r6
 8018de6:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	7c5b      	ldrb	r3, [r3, #17]
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d009      	beq.n	8018e04 <RegionIN865RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterIN865[dr];
 8018df0:	230f      	movs	r3, #15
 8018df2:	18fb      	adds	r3, r7, r3
 8018df4:	2200      	movs	r2, #0
 8018df6:	569a      	ldrsb	r2, [r3, r2]
 8018df8:	2316      	movs	r3, #22
 8018dfa:	18fb      	adds	r3, r7, r3
 8018dfc:	4916      	ldr	r1, [pc, #88]	; (8018e58 <RegionIN865RxConfig+0x1d0>)
 8018dfe:	5c8a      	ldrb	r2, [r1, r2]
 8018e00:	701a      	strb	r2, [r3, #0]
 8018e02:	e008      	b.n	8018e16 <RegionIN865RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateIN865[dr];
 8018e04:	230f      	movs	r3, #15
 8018e06:	18fb      	adds	r3, r7, r3
 8018e08:	2200      	movs	r2, #0
 8018e0a:	569a      	ldrsb	r2, [r3, r2]
 8018e0c:	2316      	movs	r3, #22
 8018e0e:	18fb      	adds	r3, r7, r3
 8018e10:	4912      	ldr	r1, [pc, #72]	; (8018e5c <RegionIN865RxConfig+0x1d4>)
 8018e12:	5c8a      	ldrb	r2, [r1, r2]
 8018e14:	701a      	strb	r2, [r3, #0]
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8018e16:	4b0b      	ldr	r3, [pc, #44]	; (8018e44 <RegionIN865RxConfig+0x1bc>)
 8018e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e1a:	2216      	movs	r2, #22
 8018e1c:	18ba      	adds	r2, r7, r2
 8018e1e:	7812      	ldrb	r2, [r2, #0]
 8018e20:	320d      	adds	r2, #13
 8018e22:	b2d1      	uxtb	r1, r2
 8018e24:	2217      	movs	r2, #23
 8018e26:	18ba      	adds	r2, r7, r2
 8018e28:	7812      	ldrb	r2, [r2, #0]
 8018e2a:	0010      	movs	r0, r2
 8018e2c:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 8018e2e:	683b      	ldr	r3, [r7, #0]
 8018e30:	220f      	movs	r2, #15
 8018e32:	18ba      	adds	r2, r7, r2
 8018e34:	7812      	ldrb	r2, [r2, #0]
 8018e36:	701a      	strb	r2, [r3, #0]
    return true;
 8018e38:	2301      	movs	r3, #1
}
 8018e3a:	0018      	movs	r0, r3
 8018e3c:	46bd      	mov	sp, r7
 8018e3e:	b007      	add	sp, #28
 8018e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e42:	46c0      	nop			; (mov r8, r8)
 8018e44:	0801ca04 	.word	0x0801ca04
 8018e48:	200010c0 	.word	0x200010c0
 8018e4c:	0801d15c 	.word	0x0801d15c
 8018e50:	0000c350 	.word	0x0000c350
 8018e54:	00014585 	.word	0x00014585
 8018e58:	0801d18c 	.word	0x0801d18c
 8018e5c:	0801d184 	.word	0x0801d184

08018e60 <RegionIN865TxConfig>:

bool RegionIN865TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e62:	b093      	sub	sp, #76	; 0x4c
 8018e64:	af0a      	add	r7, sp, #40	; 0x28
 8018e66:	60f8      	str	r0, [r7, #12]
 8018e68:	60b9      	str	r1, [r7, #8]
 8018e6a:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesIN865[txConfig->Datarate];
 8018e6c:	68fb      	ldr	r3, [r7, #12]
 8018e6e:	785b      	ldrb	r3, [r3, #1]
 8018e70:	b25b      	sxtb	r3, r3
 8018e72:	001a      	movs	r2, r3
 8018e74:	4b61      	ldr	r3, [pc, #388]	; (8018ffc <RegionIN865TxConfig+0x19c>)
 8018e76:	5c9a      	ldrb	r2, [r3, r2]
 8018e78:	231e      	movs	r3, #30
 8018e7a:	18fb      	adds	r3, r7, r3
 8018e7c:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	2002      	movs	r0, #2
 8018e82:	5618      	ldrsb	r0, [r3, r0]
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	781b      	ldrb	r3, [r3, #0]
 8018e88:	0019      	movs	r1, r3
 8018e8a:	4a5d      	ldr	r2, [pc, #372]	; (8019000 <RegionIN865TxConfig+0x1a0>)
 8018e8c:	000b      	movs	r3, r1
 8018e8e:	005b      	lsls	r3, r3, #1
 8018e90:	185b      	adds	r3, r3, r1
 8018e92:	009b      	lsls	r3, r3, #2
 8018e94:	18d3      	adds	r3, r2, r3
 8018e96:	3309      	adds	r3, #9
 8018e98:	781b      	ldrb	r3, [r3, #0]
 8018e9a:	4a59      	ldr	r2, [pc, #356]	; (8019000 <RegionIN865TxConfig+0x1a0>)
 8018e9c:	330c      	adds	r3, #12
 8018e9e:	011b      	lsls	r3, r3, #4
 8018ea0:	18d3      	adds	r3, r2, r3
 8018ea2:	3302      	adds	r3, #2
 8018ea4:	2100      	movs	r1, #0
 8018ea6:	5659      	ldrsb	r1, [r3, r1]
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	2201      	movs	r2, #1
 8018eac:	569a      	ldrsb	r2, [r3, r2]
 8018eae:	251d      	movs	r5, #29
 8018eb0:	197c      	adds	r4, r7, r5
 8018eb2:	4b54      	ldr	r3, [pc, #336]	; (8019004 <RegionIN865TxConfig+0x1a4>)
 8018eb4:	f7ff fa86 	bl	80183c4 <LimitTxPower>
 8018eb8:	0003      	movs	r3, r0
 8018eba:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	785b      	ldrb	r3, [r3, #1]
 8018ec0:	b25b      	sxtb	r3, r3
 8018ec2:	0018      	movs	r0, r3
 8018ec4:	f7ff fa60 	bl	8018388 <GetBandwidth>
 8018ec8:	0003      	movs	r3, r0
 8018eca:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 8018ecc:	2017      	movs	r0, #23
 8018ece:	183b      	adds	r3, r7, r0
 8018ed0:	2200      	movs	r2, #0
 8018ed2:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	6859      	ldr	r1, [r3, #4]
 8018ed8:	68fb      	ldr	r3, [r7, #12]
 8018eda:	689a      	ldr	r2, [r3, #8]
 8018edc:	183c      	adds	r4, r7, r0
 8018ede:	197b      	adds	r3, r7, r5
 8018ee0:	781b      	ldrb	r3, [r3, #0]
 8018ee2:	b25b      	sxtb	r3, r3
 8018ee4:	0018      	movs	r0, r3
 8018ee6:	f7ff f957 	bl	8018198 <RegionCommonComputeTxPower>
 8018eea:	0003      	movs	r3, r0
 8018eec:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8018eee:	4b46      	ldr	r3, [pc, #280]	; (8019008 <RegionIN865TxConfig+0x1a8>)
 8018ef0:	695a      	ldr	r2, [r3, #20]
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	781b      	ldrb	r3, [r3, #0]
 8018ef6:	0018      	movs	r0, r3
 8018ef8:	4941      	ldr	r1, [pc, #260]	; (8019000 <RegionIN865TxConfig+0x1a0>)
 8018efa:	0003      	movs	r3, r0
 8018efc:	005b      	lsls	r3, r3, #1
 8018efe:	181b      	adds	r3, r3, r0
 8018f00:	009b      	lsls	r3, r3, #2
 8018f02:	585b      	ldr	r3, [r3, r1]
 8018f04:	0018      	movs	r0, r3
 8018f06:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	785b      	ldrb	r3, [r3, #1]
 8018f0c:	b25b      	sxtb	r3, r3
 8018f0e:	2b07      	cmp	r3, #7
 8018f10:	d12e      	bne.n	8018f70 <RegionIN865TxConfig+0x110>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8018f12:	201f      	movs	r0, #31
 8018f14:	183b      	adds	r3, r7, r0
 8018f16:	2200      	movs	r2, #0
 8018f18:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8018f1a:	4b3b      	ldr	r3, [pc, #236]	; (8019008 <RegionIN865TxConfig+0x1a8>)
 8018f1c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018f1e:	231e      	movs	r3, #30
 8018f20:	18fb      	adds	r3, r7, r3
 8018f22:	2200      	movs	r2, #0
 8018f24:	569a      	ldrsb	r2, [r3, r2]
 8018f26:	0013      	movs	r3, r2
 8018f28:	015b      	lsls	r3, r3, #5
 8018f2a:	1a9b      	subs	r3, r3, r2
 8018f2c:	009b      	lsls	r3, r3, #2
 8018f2e:	189b      	adds	r3, r3, r2
 8018f30:	00db      	lsls	r3, r3, #3
 8018f32:	001d      	movs	r5, r3
 8018f34:	69ba      	ldr	r2, [r7, #24]
 8018f36:	4e35      	ldr	r6, [pc, #212]	; (801900c <RegionIN865TxConfig+0x1ac>)
 8018f38:	2317      	movs	r3, #23
 8018f3a:	18fb      	adds	r3, r7, r3
 8018f3c:	2100      	movs	r1, #0
 8018f3e:	5659      	ldrsb	r1, [r3, r1]
 8018f40:	183b      	adds	r3, r7, r0
 8018f42:	7818      	ldrb	r0, [r3, #0]
 8018f44:	23fa      	movs	r3, #250	; 0xfa
 8018f46:	011b      	lsls	r3, r3, #4
 8018f48:	9308      	str	r3, [sp, #32]
 8018f4a:	2300      	movs	r3, #0
 8018f4c:	9307      	str	r3, [sp, #28]
 8018f4e:	2300      	movs	r3, #0
 8018f50:	9306      	str	r3, [sp, #24]
 8018f52:	2300      	movs	r3, #0
 8018f54:	9305      	str	r3, [sp, #20]
 8018f56:	2301      	movs	r3, #1
 8018f58:	9304      	str	r3, [sp, #16]
 8018f5a:	2300      	movs	r3, #0
 8018f5c:	9303      	str	r3, [sp, #12]
 8018f5e:	2305      	movs	r3, #5
 8018f60:	9302      	str	r3, [sp, #8]
 8018f62:	2300      	movs	r3, #0
 8018f64:	9301      	str	r3, [sp, #4]
 8018f66:	9500      	str	r5, [sp, #0]
 8018f68:	0013      	movs	r3, r2
 8018f6a:	0032      	movs	r2, r6
 8018f6c:	47a0      	blx	r4
 8018f6e:	e025      	b.n	8018fbc <RegionIN865TxConfig+0x15c>
    }
    else
    {
        modem = MODEM_LORA;
 8018f70:	201f      	movs	r0, #31
 8018f72:	183b      	adds	r3, r7, r0
 8018f74:	2201      	movs	r2, #1
 8018f76:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018f78:	4b23      	ldr	r3, [pc, #140]	; (8019008 <RegionIN865TxConfig+0x1a8>)
 8018f7a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018f7c:	231e      	movs	r3, #30
 8018f7e:	18fb      	adds	r3, r7, r3
 8018f80:	781b      	ldrb	r3, [r3, #0]
 8018f82:	b25b      	sxtb	r3, r3
 8018f84:	69bd      	ldr	r5, [r7, #24]
 8018f86:	2217      	movs	r2, #23
 8018f88:	18ba      	adds	r2, r7, r2
 8018f8a:	2100      	movs	r1, #0
 8018f8c:	5651      	ldrsb	r1, [r2, r1]
 8018f8e:	183a      	adds	r2, r7, r0
 8018f90:	7810      	ldrb	r0, [r2, #0]
 8018f92:	22fa      	movs	r2, #250	; 0xfa
 8018f94:	0112      	lsls	r2, r2, #4
 8018f96:	9208      	str	r2, [sp, #32]
 8018f98:	2200      	movs	r2, #0
 8018f9a:	9207      	str	r2, [sp, #28]
 8018f9c:	2200      	movs	r2, #0
 8018f9e:	9206      	str	r2, [sp, #24]
 8018fa0:	2200      	movs	r2, #0
 8018fa2:	9205      	str	r2, [sp, #20]
 8018fa4:	2201      	movs	r2, #1
 8018fa6:	9204      	str	r2, [sp, #16]
 8018fa8:	2200      	movs	r2, #0
 8018faa:	9203      	str	r2, [sp, #12]
 8018fac:	2208      	movs	r2, #8
 8018fae:	9202      	str	r2, [sp, #8]
 8018fb0:	2201      	movs	r2, #1
 8018fb2:	9201      	str	r2, [sp, #4]
 8018fb4:	9300      	str	r3, [sp, #0]
 8018fb6:	002b      	movs	r3, r5
 8018fb8:	2200      	movs	r2, #0
 8018fba:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8018fbc:	4b12      	ldr	r3, [pc, #72]	; (8019008 <RegionIN865TxConfig+0x1a8>)
 8018fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018fc0:	68fa      	ldr	r2, [r7, #12]
 8018fc2:	8992      	ldrh	r2, [r2, #12]
 8018fc4:	b2d1      	uxtb	r1, r2
 8018fc6:	241f      	movs	r4, #31
 8018fc8:	193a      	adds	r2, r7, r4
 8018fca:	7812      	ldrb	r2, [r2, #0]
 8018fcc:	0010      	movs	r0, r2
 8018fce:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 8018fd0:	4b0d      	ldr	r3, [pc, #52]	; (8019008 <RegionIN865TxConfig+0x1a8>)
 8018fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fd4:	68fa      	ldr	r2, [r7, #12]
 8018fd6:	8992      	ldrh	r2, [r2, #12]
 8018fd8:	b2d1      	uxtb	r1, r2
 8018fda:	193a      	adds	r2, r7, r4
 8018fdc:	7812      	ldrb	r2, [r2, #0]
 8018fde:	0010      	movs	r0, r2
 8018fe0:	4798      	blx	r3
 8018fe2:	0002      	movs	r2, r0
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8018fe8:	68bb      	ldr	r3, [r7, #8]
 8018fea:	221d      	movs	r2, #29
 8018fec:	18ba      	adds	r2, r7, r2
 8018fee:	7812      	ldrb	r2, [r2, #0]
 8018ff0:	701a      	strb	r2, [r3, #0]
    return true;
 8018ff2:	2301      	movs	r3, #1
}
 8018ff4:	0018      	movs	r0, r3
 8018ff6:	46bd      	mov	sp, r7
 8018ff8:	b009      	add	sp, #36	; 0x24
 8018ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ffc:	0801d15c 	.word	0x0801d15c
 8019000:	200010c0 	.word	0x200010c0
 8019004:	20001190 	.word	0x20001190
 8019008:	0801ca04 	.word	0x0801ca04
 801900c:	000061a8 	.word	0x000061a8

08019010 <RegionIN865LinkAdrReq>:

uint8_t RegionIN865LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019010:	b5b0      	push	{r4, r5, r7, lr}
 8019012:	b092      	sub	sp, #72	; 0x48
 8019014:	af00      	add	r7, sp, #0
 8019016:	60f8      	str	r0, [r7, #12]
 8019018:	60b9      	str	r1, [r7, #8]
 801901a:	607a      	str	r2, [r7, #4]
 801901c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801901e:	2347      	movs	r3, #71	; 0x47
 8019020:	18fb      	adds	r3, r7, r3
 8019022:	2207      	movs	r2, #7
 8019024:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 8019026:	2344      	movs	r3, #68	; 0x44
 8019028:	18fb      	adds	r3, r7, r3
 801902a:	2200      	movs	r2, #0
 801902c:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 801902e:	2346      	movs	r3, #70	; 0x46
 8019030:	18fb      	adds	r3, r7, r3
 8019032:	2200      	movs	r2, #0
 8019034:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8019036:	233a      	movs	r3, #58	; 0x3a
 8019038:	18fb      	adds	r3, r7, r3
 801903a:	2200      	movs	r2, #0
 801903c:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801903e:	e09e      	b.n	801917e <RegionIN865LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8019040:	68fb      	ldr	r3, [r7, #12]
 8019042:	685a      	ldr	r2, [r3, #4]
 8019044:	2346      	movs	r3, #70	; 0x46
 8019046:	18fb      	adds	r3, r7, r3
 8019048:	781b      	ldrb	r3, [r3, #0]
 801904a:	18d3      	adds	r3, r2, r3
 801904c:	2544      	movs	r5, #68	; 0x44
 801904e:	197c      	adds	r4, r7, r5
 8019050:	223c      	movs	r2, #60	; 0x3c
 8019052:	18ba      	adds	r2, r7, r2
 8019054:	0011      	movs	r1, r2
 8019056:	0018      	movs	r0, r3
 8019058:	f7fe fed6 	bl	8017e08 <RegionCommonParseLinkAdrReq>
 801905c:	0003      	movs	r3, r0
 801905e:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8019060:	197b      	adds	r3, r7, r5
 8019062:	781b      	ldrb	r3, [r3, #0]
 8019064:	2b00      	cmp	r3, #0
 8019066:	d100      	bne.n	801906a <RegionIN865LinkAdrReq+0x5a>
 8019068:	e092      	b.n	8019190 <RegionIN865LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801906a:	2246      	movs	r2, #70	; 0x46
 801906c:	18bb      	adds	r3, r7, r2
 801906e:	18b9      	adds	r1, r7, r2
 8019070:	2244      	movs	r2, #68	; 0x44
 8019072:	18ba      	adds	r2, r7, r2
 8019074:	7809      	ldrb	r1, [r1, #0]
 8019076:	7812      	ldrb	r2, [r2, #0]
 8019078:	188a      	adds	r2, r1, r2
 801907a:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801907c:	2347      	movs	r3, #71	; 0x47
 801907e:	18fb      	adds	r3, r7, r3
 8019080:	2207      	movs	r2, #7
 8019082:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8019084:	213c      	movs	r1, #60	; 0x3c
 8019086:	187b      	adds	r3, r7, r1
 8019088:	889a      	ldrh	r2, [r3, #4]
 801908a:	233a      	movs	r3, #58	; 0x3a
 801908c:	18fb      	adds	r3, r7, r3
 801908e:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8019090:	187b      	adds	r3, r7, r1
 8019092:	78db      	ldrb	r3, [r3, #3]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d10c      	bne.n	80190b2 <RegionIN865LinkAdrReq+0xa2>
 8019098:	233a      	movs	r3, #58	; 0x3a
 801909a:	18fb      	adds	r3, r7, r3
 801909c:	881b      	ldrh	r3, [r3, #0]
 801909e:	2b00      	cmp	r3, #0
 80190a0:	d107      	bne.n	80190b2 <RegionIN865LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 80190a2:	2247      	movs	r2, #71	; 0x47
 80190a4:	18bb      	adds	r3, r7, r2
 80190a6:	18ba      	adds	r2, r7, r2
 80190a8:	7812      	ldrb	r2, [r2, #0]
 80190aa:	2101      	movs	r1, #1
 80190ac:	438a      	bics	r2, r1
 80190ae:	701a      	strb	r2, [r3, #0]
 80190b0:	e065      	b.n	801917e <RegionIN865LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80190b2:	233c      	movs	r3, #60	; 0x3c
 80190b4:	18fb      	adds	r3, r7, r3
 80190b6:	78db      	ldrb	r3, [r3, #3]
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d004      	beq.n	80190c6 <RegionIN865LinkAdrReq+0xb6>
 80190bc:	233c      	movs	r3, #60	; 0x3c
 80190be:	18fb      	adds	r3, r7, r3
 80190c0:	78db      	ldrb	r3, [r3, #3]
 80190c2:	2b05      	cmp	r3, #5
 80190c4:	d904      	bls.n	80190d0 <RegionIN865LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80190c6:	233c      	movs	r3, #60	; 0x3c
 80190c8:	18fb      	adds	r3, r7, r3
 80190ca:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80190cc:	2b06      	cmp	r3, #6
 80190ce:	d907      	bls.n	80190e0 <RegionIN865LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80190d0:	2247      	movs	r2, #71	; 0x47
 80190d2:	18bb      	adds	r3, r7, r2
 80190d4:	18ba      	adds	r2, r7, r2
 80190d6:	7812      	ldrb	r2, [r2, #0]
 80190d8:	2101      	movs	r1, #1
 80190da:	438a      	bics	r2, r1
 80190dc:	701a      	strb	r2, [r3, #0]
 80190de:	e04e      	b.n	801917e <RegionIN865LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 80190e0:	2345      	movs	r3, #69	; 0x45
 80190e2:	18fb      	adds	r3, r7, r3
 80190e4:	2200      	movs	r2, #0
 80190e6:	701a      	strb	r2, [r3, #0]
 80190e8:	e044      	b.n	8019174 <RegionIN865LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80190ea:	233c      	movs	r3, #60	; 0x3c
 80190ec:	18fb      	adds	r3, r7, r3
 80190ee:	78db      	ldrb	r3, [r3, #3]
 80190f0:	2b06      	cmp	r3, #6
 80190f2:	d11b      	bne.n	801912c <RegionIN865LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 80190f4:	2345      	movs	r3, #69	; 0x45
 80190f6:	18fb      	adds	r3, r7, r3
 80190f8:	781a      	ldrb	r2, [r3, #0]
 80190fa:	4974      	ldr	r1, [pc, #464]	; (80192cc <RegionIN865LinkAdrReq+0x2bc>)
 80190fc:	0013      	movs	r3, r2
 80190fe:	005b      	lsls	r3, r3, #1
 8019100:	189b      	adds	r3, r3, r2
 8019102:	009b      	lsls	r3, r3, #2
 8019104:	585b      	ldr	r3, [r3, r1]
 8019106:	2b00      	cmp	r3, #0
 8019108:	d02e      	beq.n	8019168 <RegionIN865LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 801910a:	2345      	movs	r3, #69	; 0x45
 801910c:	18fb      	adds	r3, r7, r3
 801910e:	781b      	ldrb	r3, [r3, #0]
 8019110:	2201      	movs	r2, #1
 8019112:	409a      	lsls	r2, r3
 8019114:	0013      	movs	r3, r2
 8019116:	b21a      	sxth	r2, r3
 8019118:	213a      	movs	r1, #58	; 0x3a
 801911a:	187b      	adds	r3, r7, r1
 801911c:	881b      	ldrh	r3, [r3, #0]
 801911e:	b21b      	sxth	r3, r3
 8019120:	4313      	orrs	r3, r2
 8019122:	b21b      	sxth	r3, r3
 8019124:	b29a      	uxth	r2, r3
 8019126:	187b      	adds	r3, r7, r1
 8019128:	801a      	strh	r2, [r3, #0]
 801912a:	e01d      	b.n	8019168 <RegionIN865LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801912c:	233a      	movs	r3, #58	; 0x3a
 801912e:	18fb      	adds	r3, r7, r3
 8019130:	881b      	ldrh	r3, [r3, #0]
 8019132:	001a      	movs	r2, r3
 8019134:	2345      	movs	r3, #69	; 0x45
 8019136:	18fb      	adds	r3, r7, r3
 8019138:	781b      	ldrb	r3, [r3, #0]
 801913a:	411a      	asrs	r2, r3
 801913c:	0013      	movs	r3, r2
 801913e:	2201      	movs	r2, #1
 8019140:	4013      	ands	r3, r2
 8019142:	d011      	beq.n	8019168 <RegionIN865LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8019144:	2345      	movs	r3, #69	; 0x45
 8019146:	18fb      	adds	r3, r7, r3
 8019148:	781a      	ldrb	r2, [r3, #0]
 801914a:	4960      	ldr	r1, [pc, #384]	; (80192cc <RegionIN865LinkAdrReq+0x2bc>)
 801914c:	0013      	movs	r3, r2
 801914e:	005b      	lsls	r3, r3, #1
 8019150:	189b      	adds	r3, r3, r2
 8019152:	009b      	lsls	r3, r3, #2
 8019154:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019156:	2b00      	cmp	r3, #0
 8019158:	d106      	bne.n	8019168 <RegionIN865LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801915a:	2247      	movs	r2, #71	; 0x47
 801915c:	18bb      	adds	r3, r7, r2
 801915e:	18ba      	adds	r2, r7, r2
 8019160:	7812      	ldrb	r2, [r2, #0]
 8019162:	2101      	movs	r1, #1
 8019164:	438a      	bics	r2, r1
 8019166:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 8019168:	2145      	movs	r1, #69	; 0x45
 801916a:	187b      	adds	r3, r7, r1
 801916c:	781a      	ldrb	r2, [r3, #0]
 801916e:	187b      	adds	r3, r7, r1
 8019170:	3201      	adds	r2, #1
 8019172:	701a      	strb	r2, [r3, #0]
 8019174:	2345      	movs	r3, #69	; 0x45
 8019176:	18fb      	adds	r3, r7, r3
 8019178:	781b      	ldrb	r3, [r3, #0]
 801917a:	2b0f      	cmp	r3, #15
 801917c:	d9b5      	bls.n	80190ea <RegionIN865LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	7a1b      	ldrb	r3, [r3, #8]
 8019182:	2246      	movs	r2, #70	; 0x46
 8019184:	18ba      	adds	r2, r7, r2
 8019186:	7812      	ldrb	r2, [r2, #0]
 8019188:	429a      	cmp	r2, r3
 801918a:	d200      	bcs.n	801918e <RegionIN865LinkAdrReq+0x17e>
 801918c:	e758      	b.n	8019040 <RegionIN865LinkAdrReq+0x30>
 801918e:	e000      	b.n	8019192 <RegionIN865LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 8019190:	46c0      	nop			; (mov r8, r8)
                }
            }
        }
    }

    if( linkAdrParams.Datarate != DR_6 )
 8019192:	233c      	movs	r3, #60	; 0x3c
 8019194:	18fb      	adds	r3, r7, r3
 8019196:	785b      	ldrb	r3, [r3, #1]
 8019198:	b25b      	sxtb	r3, r3
 801919a:	2b06      	cmp	r3, #6
 801919c:	d063      	beq.n	8019266 <RegionIN865LinkAdrReq+0x256>
    {
        // Get the minimum possible datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801919e:	2134      	movs	r1, #52	; 0x34
 80191a0:	187b      	adds	r3, r7, r1
 80191a2:	2202      	movs	r2, #2
 80191a4:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	7a5a      	ldrb	r2, [r3, #9]
 80191aa:	187b      	adds	r3, r7, r1
 80191ac:	709a      	strb	r2, [r3, #2]
        phyParam = RegionIN865GetPhyParam( &getPhy );
 80191ae:	187b      	adds	r3, r7, r1
 80191b0:	0018      	movs	r0, r3
 80191b2:	f7ff fa3d 	bl	8018630 <RegionIN865GetPhyParam>
 80191b6:	0003      	movs	r3, r0
 80191b8:	001a      	movs	r2, r3
 80191ba:	2030      	movs	r0, #48	; 0x30
 80191bc:	183b      	adds	r3, r7, r0
 80191be:	601a      	str	r2, [r3, #0]

        linkAdrVerifyParams.Status = status;
 80191c0:	2110      	movs	r1, #16
 80191c2:	187b      	adds	r3, r7, r1
 80191c4:	2447      	movs	r4, #71	; 0x47
 80191c6:	193a      	adds	r2, r7, r4
 80191c8:	7812      	ldrb	r2, [r2, #0]
 80191ca:	711a      	strb	r2, [r3, #4]
        linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	7a9a      	ldrb	r2, [r3, #10]
 80191d0:	187b      	adds	r3, r7, r1
 80191d2:	715a      	strb	r2, [r3, #5]
        linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80191d4:	253c      	movs	r5, #60	; 0x3c
 80191d6:	197b      	adds	r3, r7, r5
 80191d8:	2201      	movs	r2, #1
 80191da:	569a      	ldrsb	r2, [r3, r2]
 80191dc:	187b      	adds	r3, r7, r1
 80191de:	719a      	strb	r2, [r3, #6]
        linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80191e0:	197b      	adds	r3, r7, r5
 80191e2:	2202      	movs	r2, #2
 80191e4:	569a      	ldrsb	r2, [r3, r2]
 80191e6:	187b      	adds	r3, r7, r1
 80191e8:	71da      	strb	r2, [r3, #7]
        linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80191ea:	197b      	adds	r3, r7, r5
 80191ec:	781a      	ldrb	r2, [r3, #0]
 80191ee:	187b      	adds	r3, r7, r1
 80191f0:	721a      	strb	r2, [r3, #8]
        linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	220b      	movs	r2, #11
 80191f6:	569a      	ldrsb	r2, [r3, r2]
 80191f8:	187b      	adds	r3, r7, r1
 80191fa:	725a      	strb	r2, [r3, #9]
        linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	220c      	movs	r2, #12
 8019200:	569a      	ldrsb	r2, [r3, r2]
 8019202:	187b      	adds	r3, r7, r1
 8019204:	729a      	strb	r2, [r3, #10]
        linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	7b5b      	ldrb	r3, [r3, #13]
 801920a:	b25a      	sxtb	r2, r3
 801920c:	187b      	adds	r3, r7, r1
 801920e:	72da      	strb	r2, [r3, #11]
        linkAdrVerifyParams.NbChannels = IN865_MAX_NB_CHANNELS;
 8019210:	187b      	adds	r3, r7, r1
 8019212:	2210      	movs	r2, #16
 8019214:	731a      	strb	r2, [r3, #12]
        linkAdrVerifyParams.ChannelsMask = &chMask;
 8019216:	187b      	adds	r3, r7, r1
 8019218:	223a      	movs	r2, #58	; 0x3a
 801921a:	18ba      	adds	r2, r7, r2
 801921c:	611a      	str	r2, [r3, #16]
        linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801921e:	183b      	adds	r3, r7, r0
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	b25a      	sxtb	r2, r3
 8019224:	0008      	movs	r0, r1
 8019226:	183b      	adds	r3, r7, r0
 8019228:	751a      	strb	r2, [r3, #20]
        linkAdrVerifyParams.MaxDatarate = IN865_TX_MAX_DATARATE;
 801922a:	183b      	adds	r3, r7, r0
 801922c:	2207      	movs	r2, #7
 801922e:	755a      	strb	r2, [r3, #21]
        linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8019230:	183b      	adds	r3, r7, r0
 8019232:	4a26      	ldr	r2, [pc, #152]	; (80192cc <RegionIN865LinkAdrReq+0x2bc>)
 8019234:	619a      	str	r2, [r3, #24]
        linkAdrVerifyParams.MinTxPower = IN865_MIN_TX_POWER;
 8019236:	183b      	adds	r3, r7, r0
 8019238:	220a      	movs	r2, #10
 801923a:	771a      	strb	r2, [r3, #28]
        linkAdrVerifyParams.MaxTxPower = IN865_MAX_TX_POWER;
 801923c:	183b      	adds	r3, r7, r0
 801923e:	2200      	movs	r2, #0
 8019240:	775a      	strb	r2, [r3, #29]
        linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019242:	183b      	adds	r3, r7, r0
 8019244:	68fa      	ldr	r2, [r7, #12]
 8019246:	6812      	ldr	r2, [r2, #0]
 8019248:	601a      	str	r2, [r3, #0]

        // Verify the parameters and update, if necessary
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801924a:	193c      	adds	r4, r7, r4
 801924c:	0029      	movs	r1, r5
 801924e:	187d      	adds	r5, r7, r1
 8019250:	187b      	adds	r3, r7, r1
 8019252:	1c9a      	adds	r2, r3, #2
 8019254:	187b      	adds	r3, r7, r1
 8019256:	1c59      	adds	r1, r3, #1
 8019258:	1838      	adds	r0, r7, r0
 801925a:	002b      	movs	r3, r5
 801925c:	f7fe fe2a 	bl	8017eb4 <RegionCommonLinkAdrReqVerifyParams>
 8019260:	0003      	movs	r3, r0
 8019262:	7023      	strb	r3, [r4, #0]
 8019264:	e006      	b.n	8019274 <RegionIN865LinkAdrReq+0x264>
    }
    else
    {// DR_6 is not supported by this region
        status &= 0xFD; // Datarate KO
 8019266:	2247      	movs	r2, #71	; 0x47
 8019268:	18bb      	adds	r3, r7, r2
 801926a:	18ba      	adds	r2, r7, r2
 801926c:	7812      	ldrb	r2, [r2, #0]
 801926e:	2102      	movs	r1, #2
 8019270:	438a      	bics	r2, r1
 8019272:	701a      	strb	r2, [r3, #0]
    }

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019274:	2347      	movs	r3, #71	; 0x47
 8019276:	18fb      	adds	r3, r7, r3
 8019278:	781b      	ldrb	r3, [r3, #0]
 801927a:	2b07      	cmp	r3, #7
 801927c:	d10b      	bne.n	8019296 <RegionIN865LinkAdrReq+0x286>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 801927e:	4b14      	ldr	r3, [pc, #80]	; (80192d0 <RegionIN865LinkAdrReq+0x2c0>)
 8019280:	2202      	movs	r2, #2
 8019282:	2100      	movs	r1, #0
 8019284:	0018      	movs	r0, r3
 8019286:	f002 f9ad 	bl	801b5e4 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 801928a:	233a      	movs	r3, #58	; 0x3a
 801928c:	18fb      	adds	r3, r7, r3
 801928e:	8819      	ldrh	r1, [r3, #0]
 8019290:	4b0e      	ldr	r3, [pc, #56]	; (80192cc <RegionIN865LinkAdrReq+0x2bc>)
 8019292:	22d0      	movs	r2, #208	; 0xd0
 8019294:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019296:	213c      	movs	r1, #60	; 0x3c
 8019298:	187b      	adds	r3, r7, r1
 801929a:	2201      	movs	r2, #1
 801929c:	569a      	ldrsb	r2, [r3, r2]
 801929e:	68bb      	ldr	r3, [r7, #8]
 80192a0:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80192a2:	187b      	adds	r3, r7, r1
 80192a4:	2202      	movs	r2, #2
 80192a6:	569a      	ldrsb	r2, [r3, r2]
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80192ac:	187b      	adds	r3, r7, r1
 80192ae:	781a      	ldrb	r2, [r3, #0]
 80192b0:	683b      	ldr	r3, [r7, #0]
 80192b2:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80192b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80192b6:	2246      	movs	r2, #70	; 0x46
 80192b8:	18ba      	adds	r2, r7, r2
 80192ba:	7812      	ldrb	r2, [r2, #0]
 80192bc:	701a      	strb	r2, [r3, #0]

    return status;
 80192be:	2347      	movs	r3, #71	; 0x47
 80192c0:	18fb      	adds	r3, r7, r3
 80192c2:	781b      	ldrb	r3, [r3, #0]
}
 80192c4:	0018      	movs	r0, r3
 80192c6:	46bd      	mov	sp, r7
 80192c8:	b012      	add	sp, #72	; 0x48
 80192ca:	bdb0      	pop	{r4, r5, r7, pc}
 80192cc:	200010c0 	.word	0x200010c0
 80192d0:	20001190 	.word	0x20001190

080192d4 <RegionIN865RxParamSetupReq>:

uint8_t RegionIN865RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80192d4:	b580      	push	{r7, lr}
 80192d6:	b084      	sub	sp, #16
 80192d8:	af00      	add	r7, sp, #0
 80192da:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80192dc:	230f      	movs	r3, #15
 80192de:	18fb      	adds	r3, r7, r3
 80192e0:	2207      	movs	r2, #7
 80192e2:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	685b      	ldr	r3, [r3, #4]
 80192e8:	0018      	movs	r0, r3
 80192ea:	f7ff f893 	bl	8018414 <VerifyRfFreq>
 80192ee:	0003      	movs	r3, r0
 80192f0:	001a      	movs	r2, r3
 80192f2:	2301      	movs	r3, #1
 80192f4:	4053      	eors	r3, r2
 80192f6:	b2db      	uxtb	r3, r3
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d006      	beq.n	801930a <RegionIN865RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 80192fc:	220f      	movs	r2, #15
 80192fe:	18bb      	adds	r3, r7, r2
 8019300:	18ba      	adds	r2, r7, r2
 8019302:	7812      	ldrb	r2, [r2, #0]
 8019304:	2101      	movs	r1, #1
 8019306:	438a      	bics	r2, r1
 8019308:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false )
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	781b      	ldrb	r3, [r3, #0]
 801930e:	b25b      	sxtb	r3, r3
 8019310:	2207      	movs	r2, #7
 8019312:	2100      	movs	r1, #0
 8019314:	0018      	movs	r0, r3
 8019316:	f7fe fbbd 	bl	8017a94 <RegionCommonValueInRange>
 801931a:	1e03      	subs	r3, r0, #0
 801931c:	d106      	bne.n	801932c <RegionIN865RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 801931e:	220f      	movs	r2, #15
 8019320:	18bb      	adds	r3, r7, r2
 8019322:	18ba      	adds	r2, r7, r2
 8019324:	7812      	ldrb	r2, [r2, #0]
 8019326:	2102      	movs	r1, #2
 8019328:	438a      	bics	r2, r1
 801932a:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, IN865_MIN_RX1_DR_OFFSET, IN865_MAX_RX1_DR_OFFSET ) == false )
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	785b      	ldrb	r3, [r3, #1]
 8019330:	b25b      	sxtb	r3, r3
 8019332:	2207      	movs	r2, #7
 8019334:	2100      	movs	r1, #0
 8019336:	0018      	movs	r0, r3
 8019338:	f7fe fbac 	bl	8017a94 <RegionCommonValueInRange>
 801933c:	1e03      	subs	r3, r0, #0
 801933e:	d106      	bne.n	801934e <RegionIN865RxParamSetupReq+0x7a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019340:	220f      	movs	r2, #15
 8019342:	18bb      	adds	r3, r7, r2
 8019344:	18ba      	adds	r2, r7, r2
 8019346:	7812      	ldrb	r2, [r2, #0]
 8019348:	2104      	movs	r1, #4
 801934a:	438a      	bics	r2, r1
 801934c:	701a      	strb	r2, [r3, #0]
    }

    return status;
 801934e:	230f      	movs	r3, #15
 8019350:	18fb      	adds	r3, r7, r3
 8019352:	781b      	ldrb	r3, [r3, #0]
}
 8019354:	0018      	movs	r0, r3
 8019356:	46bd      	mov	sp, r7
 8019358:	b004      	add	sp, #16
 801935a:	bd80      	pop	{r7, pc}

0801935c <RegionIN865NewChannelReq>:

uint8_t RegionIN865NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801935c:	b580      	push	{r7, lr}
 801935e:	b086      	sub	sp, #24
 8019360:	af00      	add	r7, sp, #0
 8019362:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019364:	2317      	movs	r3, #23
 8019366:	18fb      	adds	r3, r7, r3
 8019368:	2203      	movs	r2, #3
 801936a:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	681b      	ldr	r3, [r3, #0]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d119      	bne.n	80193aa <RegionIN865NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	791b      	ldrb	r3, [r3, #4]
 801937a:	b25b      	sxtb	r3, r3
 801937c:	b2da      	uxtb	r2, r3
 801937e:	2108      	movs	r1, #8
 8019380:	187b      	adds	r3, r7, r1
 8019382:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionIN865ChannelsRemove( &channelRemove ) == false )
 8019384:	187b      	adds	r3, r7, r1
 8019386:	0018      	movs	r0, r3
 8019388:	f000 fa42 	bl	8019810 <RegionIN865ChannelsRemove>
 801938c:	0003      	movs	r3, r0
 801938e:	001a      	movs	r2, r3
 8019390:	2301      	movs	r3, #1
 8019392:	4053      	eors	r3, r2
 8019394:	b2db      	uxtb	r3, r3
 8019396:	2b00      	cmp	r3, #0
 8019398:	d043      	beq.n	8019422 <RegionIN865NewChannelReq+0xc6>
        {
            status &= 0xFC;
 801939a:	2217      	movs	r2, #23
 801939c:	18bb      	adds	r3, r7, r2
 801939e:	18ba      	adds	r2, r7, r2
 80193a0:	7812      	ldrb	r2, [r2, #0]
 80193a2:	2103      	movs	r1, #3
 80193a4:	438a      	bics	r2, r1
 80193a6:	701a      	strb	r2, [r3, #0]
 80193a8:	e03b      	b.n	8019422 <RegionIN865NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	681a      	ldr	r2, [r3, #0]
 80193ae:	210c      	movs	r1, #12
 80193b0:	187b      	adds	r3, r7, r1
 80193b2:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	791b      	ldrb	r3, [r3, #4]
 80193b8:	b25b      	sxtb	r3, r3
 80193ba:	b2da      	uxtb	r2, r3
 80193bc:	187b      	adds	r3, r7, r1
 80193be:	711a      	strb	r2, [r3, #4]

        switch( RegionIN865ChannelAdd( &channelAdd ) )
 80193c0:	187b      	adds	r3, r7, r1
 80193c2:	0018      	movs	r0, r3
 80193c4:	f000 f96a 	bl	801969c <RegionIN865ChannelAdd>
 80193c8:	0003      	movs	r3, r0
 80193ca:	2b04      	cmp	r3, #4
 80193cc:	d008      	beq.n	80193e0 <RegionIN865NewChannelReq+0x84>
 80193ce:	dc02      	bgt.n	80193d6 <RegionIN865NewChannelReq+0x7a>
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d025      	beq.n	8019420 <RegionIN865NewChannelReq+0xc4>
 80193d4:	e01c      	b.n	8019410 <RegionIN865NewChannelReq+0xb4>
 80193d6:	2b05      	cmp	r3, #5
 80193d8:	d00a      	beq.n	80193f0 <RegionIN865NewChannelReq+0x94>
 80193da:	2b06      	cmp	r3, #6
 80193dc:	d010      	beq.n	8019400 <RegionIN865NewChannelReq+0xa4>
 80193de:	e017      	b.n	8019410 <RegionIN865NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80193e0:	2217      	movs	r2, #23
 80193e2:	18bb      	adds	r3, r7, r2
 80193e4:	18ba      	adds	r2, r7, r2
 80193e6:	7812      	ldrb	r2, [r2, #0]
 80193e8:	2101      	movs	r1, #1
 80193ea:	438a      	bics	r2, r1
 80193ec:	701a      	strb	r2, [r3, #0]
                break;
 80193ee:	e018      	b.n	8019422 <RegionIN865NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80193f0:	2217      	movs	r2, #23
 80193f2:	18bb      	adds	r3, r7, r2
 80193f4:	18ba      	adds	r2, r7, r2
 80193f6:	7812      	ldrb	r2, [r2, #0]
 80193f8:	2102      	movs	r1, #2
 80193fa:	438a      	bics	r2, r1
 80193fc:	701a      	strb	r2, [r3, #0]
                break;
 80193fe:	e010      	b.n	8019422 <RegionIN865NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8019400:	2217      	movs	r2, #23
 8019402:	18bb      	adds	r3, r7, r2
 8019404:	18ba      	adds	r2, r7, r2
 8019406:	7812      	ldrb	r2, [r2, #0]
 8019408:	2103      	movs	r1, #3
 801940a:	438a      	bics	r2, r1
 801940c:	701a      	strb	r2, [r3, #0]
                break;
 801940e:	e008      	b.n	8019422 <RegionIN865NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 8019410:	2217      	movs	r2, #23
 8019412:	18bb      	adds	r3, r7, r2
 8019414:	18ba      	adds	r2, r7, r2
 8019416:	7812      	ldrb	r2, [r2, #0]
 8019418:	2103      	movs	r1, #3
 801941a:	438a      	bics	r2, r1
 801941c:	701a      	strb	r2, [r3, #0]
                break;
 801941e:	e000      	b.n	8019422 <RegionIN865NewChannelReq+0xc6>
                break;
 8019420:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8019422:	2317      	movs	r3, #23
 8019424:	18fb      	adds	r3, r7, r3
 8019426:	781b      	ldrb	r3, [r3, #0]
}
 8019428:	0018      	movs	r0, r3
 801942a:	46bd      	mov	sp, r7
 801942c:	b006      	add	sp, #24
 801942e:	bd80      	pop	{r7, pc}

08019430 <RegionIN865TxParamSetupReq>:

int8_t RegionIN865TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b082      	sub	sp, #8
 8019434:	af00      	add	r7, sp, #0
 8019436:	6078      	str	r0, [r7, #4]
    return -1;
 8019438:	2301      	movs	r3, #1
 801943a:	425b      	negs	r3, r3
}
 801943c:	0018      	movs	r0, r3
 801943e:	46bd      	mov	sp, r7
 8019440:	b002      	add	sp, #8
 8019442:	bd80      	pop	{r7, pc}

08019444 <RegionIN865DlChannelReq>:

uint8_t RegionIN865DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019444:	b580      	push	{r7, lr}
 8019446:	b084      	sub	sp, #16
 8019448:	af00      	add	r7, sp, #0
 801944a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801944c:	230f      	movs	r3, #15
 801944e:	18fb      	adds	r3, r7, r3
 8019450:	2203      	movs	r2, #3
 8019452:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	685b      	ldr	r3, [r3, #4]
 8019458:	0018      	movs	r0, r3
 801945a:	f7fe ffdb 	bl	8018414 <VerifyRfFreq>
 801945e:	0003      	movs	r3, r0
 8019460:	001a      	movs	r2, r3
 8019462:	2301      	movs	r3, #1
 8019464:	4053      	eors	r3, r2
 8019466:	b2db      	uxtb	r3, r3
 8019468:	2b00      	cmp	r3, #0
 801946a:	d006      	beq.n	801947a <RegionIN865DlChannelReq+0x36>
    {
        status &= 0xFE;
 801946c:	220f      	movs	r2, #15
 801946e:	18bb      	adds	r3, r7, r2
 8019470:	18ba      	adds	r2, r7, r2
 8019472:	7812      	ldrb	r2, [r2, #0]
 8019474:	2101      	movs	r1, #1
 8019476:	438a      	bics	r2, r1
 8019478:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	781b      	ldrb	r3, [r3, #0]
 801947e:	0019      	movs	r1, r3
 8019480:	4a13      	ldr	r2, [pc, #76]	; (80194d0 <RegionIN865DlChannelReq+0x8c>)
 8019482:	000b      	movs	r3, r1
 8019484:	005b      	lsls	r3, r3, #1
 8019486:	185b      	adds	r3, r3, r1
 8019488:	009b      	lsls	r3, r3, #2
 801948a:	589b      	ldr	r3, [r3, r2]
 801948c:	2b00      	cmp	r3, #0
 801948e:	d106      	bne.n	801949e <RegionIN865DlChannelReq+0x5a>
    {
        status &= 0xFD;
 8019490:	220f      	movs	r2, #15
 8019492:	18bb      	adds	r3, r7, r2
 8019494:	18ba      	adds	r2, r7, r2
 8019496:	7812      	ldrb	r2, [r2, #0]
 8019498:	2102      	movs	r1, #2
 801949a:	438a      	bics	r2, r1
 801949c:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801949e:	230f      	movs	r3, #15
 80194a0:	18fb      	adds	r3, r7, r3
 80194a2:	781b      	ldrb	r3, [r3, #0]
 80194a4:	2b03      	cmp	r3, #3
 80194a6:	d10c      	bne.n	80194c2 <RegionIN865DlChannelReq+0x7e>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	781b      	ldrb	r3, [r3, #0]
 80194ac:	0018      	movs	r0, r3
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	685a      	ldr	r2, [r3, #4]
 80194b2:	4907      	ldr	r1, [pc, #28]	; (80194d0 <RegionIN865DlChannelReq+0x8c>)
 80194b4:	0003      	movs	r3, r0
 80194b6:	005b      	lsls	r3, r3, #1
 80194b8:	181b      	adds	r3, r3, r0
 80194ba:	009b      	lsls	r3, r3, #2
 80194bc:	18cb      	adds	r3, r1, r3
 80194be:	3304      	adds	r3, #4
 80194c0:	601a      	str	r2, [r3, #0]
    }

    return status;
 80194c2:	230f      	movs	r3, #15
 80194c4:	18fb      	adds	r3, r7, r3
 80194c6:	781b      	ldrb	r3, [r3, #0]
}
 80194c8:	0018      	movs	r0, r3
 80194ca:	46bd      	mov	sp, r7
 80194cc:	b004      	add	sp, #16
 80194ce:	bd80      	pop	{r7, pc}
 80194d0:	200010c0 	.word	0x200010c0

080194d4 <RegionIN865AlternateDr>:

int8_t RegionIN865AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80194d4:	b580      	push	{r7, lr}
 80194d6:	b082      	sub	sp, #8
 80194d8:	af00      	add	r7, sp, #0
 80194da:	0002      	movs	r2, r0
 80194dc:	1dfb      	adds	r3, r7, #7
 80194de:	701a      	strb	r2, [r3, #0]
 80194e0:	1dbb      	adds	r3, r7, #6
 80194e2:	1c0a      	adds	r2, r1, #0
 80194e4:	701a      	strb	r2, [r3, #0]
    return currentDr;
 80194e6:	1dfb      	adds	r3, r7, #7
 80194e8:	781b      	ldrb	r3, [r3, #0]
 80194ea:	b25b      	sxtb	r3, r3
}
 80194ec:	0018      	movs	r0, r3
 80194ee:	46bd      	mov	sp, r7
 80194f0:	b002      	add	sp, #8
 80194f2:	bd80      	pop	{r7, pc}

080194f4 <RegionIN865CalcBackOff>:

void RegionIN865CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 80194f4:	b580      	push	{r7, lr}
 80194f6:	b088      	sub	sp, #32
 80194f8:	af00      	add	r7, sp, #0
 80194fa:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 80194fc:	210c      	movs	r1, #12
 80194fe:	187b      	adds	r3, r7, r1
 8019500:	4a12      	ldr	r2, [pc, #72]	; (801954c <RegionIN865CalcBackOff+0x58>)
 8019502:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8019504:	187b      	adds	r3, r7, r1
 8019506:	4a12      	ldr	r2, [pc, #72]	; (8019550 <RegionIN865CalcBackOff+0x5c>)
 8019508:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	785a      	ldrb	r2, [r3, #1]
 801950e:	187b      	adds	r3, r7, r1
 8019510:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	781a      	ldrb	r2, [r3, #0]
 8019516:	187b      	adds	r3, r7, r1
 8019518:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	789a      	ldrb	r2, [r3, #2]
 801951e:	187b      	adds	r3, r7, r1
 8019520:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	78da      	ldrb	r2, [r3, #3]
 8019526:	187b      	adds	r3, r7, r1
 8019528:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	685a      	ldr	r2, [r3, #4]
 801952e:	187b      	adds	r3, r7, r1
 8019530:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	689a      	ldr	r2, [r3, #8]
 8019536:	187b      	adds	r3, r7, r1
 8019538:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 801953a:	187b      	adds	r3, r7, r1
 801953c:	0018      	movs	r0, r3
 801953e:	f7fe fe63 	bl	8018208 <RegionCommonCalcBackOff>
}
 8019542:	46c0      	nop			; (mov r8, r8)
 8019544:	46bd      	mov	sp, r7
 8019546:	b008      	add	sp, #32
 8019548:	bd80      	pop	{r7, pc}
 801954a:	46c0      	nop			; (mov r8, r8)
 801954c:	200010c0 	.word	0x200010c0
 8019550:	20001180 	.word	0x20001180

08019554 <RegionIN865NextChannel>:

LoRaMacStatus_t RegionIN865NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019554:	b5b0      	push	{r4, r5, r7, lr}
 8019556:	b090      	sub	sp, #64	; 0x40
 8019558:	af04      	add	r7, sp, #16
 801955a:	60f8      	str	r0, [r7, #12]
 801955c:	60b9      	str	r1, [r7, #8]
 801955e:	607a      	str	r2, [r7, #4]
 8019560:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8019562:	232f      	movs	r3, #47	; 0x2f
 8019564:	18fb      	adds	r3, r7, r3
 8019566:	2200      	movs	r2, #0
 8019568:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 801956a:	2323      	movs	r3, #35	; 0x23
 801956c:	18fb      	adds	r3, r7, r3
 801956e:	2200      	movs	r2, #0
 8019570:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[IN865_MAX_NB_CHANNELS] = { 0 };
 8019572:	2310      	movs	r3, #16
 8019574:	18fb      	adds	r3, r7, r3
 8019576:	0018      	movs	r0, r3
 8019578:	2310      	movs	r3, #16
 801957a:	001a      	movs	r2, r3
 801957c:	2100      	movs	r1, #0
 801957e:	f002 f879 	bl	801b674 <memset>
    TimerTime_t nextTxDelay = 0;
 8019582:	2300      	movs	r3, #0
 8019584:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 8019586:	4b42      	ldr	r3, [pc, #264]	; (8019690 <RegionIN865NextChannel+0x13c>)
 8019588:	2201      	movs	r2, #1
 801958a:	2100      	movs	r1, #0
 801958c:	0018      	movs	r0, r3
 801958e:	f7fe fae9 	bl	8017b64 <RegionCommonCountChannels>
 8019592:	1e03      	subs	r3, r0, #0
 8019594:	d108      	bne.n	80195a8 <RegionIN865NextChannel+0x54>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019596:	4b3f      	ldr	r3, [pc, #252]	; (8019694 <RegionIN865NextChannel+0x140>)
 8019598:	22d0      	movs	r2, #208	; 0xd0
 801959a:	5a9b      	ldrh	r3, [r3, r2]
 801959c:	2207      	movs	r2, #7
 801959e:	4313      	orrs	r3, r2
 80195a0:	b299      	uxth	r1, r3
 80195a2:	4b3c      	ldr	r3, [pc, #240]	; (8019694 <RegionIN865NextChannel+0x140>)
 80195a4:	22d0      	movs	r2, #208	; 0xd0
 80195a6:	5299      	strh	r1, [r3, r2]
    }

    TimerTime_t elapsed = TimerGetElapsedTime( nextChanParams->LastAggrTx );
 80195a8:	68fb      	ldr	r3, [r7, #12]
 80195aa:	685b      	ldr	r3, [r3, #4]
 80195ac:	0018      	movs	r0, r3
 80195ae:	f001 fe14 	bl	801b1da <TimerGetElapsedTime>
 80195b2:	0003      	movs	r3, r0
 80195b4:	627b      	str	r3, [r7, #36]	; 0x24
    if( ( nextChanParams->LastAggrTx == 0 ) || ( nextChanParams->AggrTimeOff <= elapsed ) )
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	685b      	ldr	r3, [r3, #4]
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	d004      	beq.n	80195c8 <RegionIN865NextChannel+0x74>
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80195c4:	429a      	cmp	r2, r3
 80195c6:	d324      	bcc.n	8019612 <RegionIN865NextChannel+0xbe>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80195c8:	683b      	ldr	r3, [r7, #0]
 80195ca:	2200      	movs	r2, #0
 80195cc:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, IN865_MAX_NB_BANDS );
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	7a58      	ldrb	r0, [r3, #9]
 80195d2:	68fb      	ldr	r3, [r7, #12]
 80195d4:	7a99      	ldrb	r1, [r3, #10]
 80195d6:	4a30      	ldr	r2, [pc, #192]	; (8019698 <RegionIN865NextChannel+0x144>)
 80195d8:	2301      	movs	r3, #1
 80195da:	f7fe fb4e 	bl	8017c7a <RegionCommonUpdateBandTimeOff>
 80195de:	0003      	movs	r3, r0
 80195e0:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	7a58      	ldrb	r0, [r3, #9]
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	7a1b      	ldrb	r3, [r3, #8]
 80195ea:	b25b      	sxtb	r3, r3
 80195ec:	b2d9      	uxtb	r1, r3
 80195ee:	232f      	movs	r3, #47	; 0x2f
 80195f0:	18fc      	adds	r4, r7, r3
 80195f2:	4d28      	ldr	r5, [pc, #160]	; (8019694 <RegionIN865NextChannel+0x140>)
 80195f4:	4a26      	ldr	r2, [pc, #152]	; (8019690 <RegionIN865NextChannel+0x13c>)
 80195f6:	2323      	movs	r3, #35	; 0x23
 80195f8:	18fb      	adds	r3, r7, r3
 80195fa:	9302      	str	r3, [sp, #8]
 80195fc:	2310      	movs	r3, #16
 80195fe:	18fb      	adds	r3, r7, r3
 8019600:	9301      	str	r3, [sp, #4]
 8019602:	4b25      	ldr	r3, [pc, #148]	; (8019698 <RegionIN865NextChannel+0x144>)
 8019604:	9300      	str	r3, [sp, #0]
 8019606:	002b      	movs	r3, r5
 8019608:	f7fe ff2c 	bl	8018464 <CountNbOfEnabledChannels>
 801960c:	0003      	movs	r3, r0
 801960e:	7023      	strb	r3, [r4, #0]
 8019610:	e00b      	b.n	801962a <RegionIN865NextChannel+0xd6>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8019612:	2123      	movs	r1, #35	; 0x23
 8019614:	187b      	adds	r3, r7, r1
 8019616:	781b      	ldrb	r3, [r3, #0]
 8019618:	3301      	adds	r3, #1
 801961a:	b2da      	uxtb	r2, r3
 801961c:	187b      	adds	r3, r7, r1
 801961e:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	681a      	ldr	r2, [r3, #0]
 8019624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019626:	1ad3      	subs	r3, r2, r3
 8019628:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 801962a:	232f      	movs	r3, #47	; 0x2f
 801962c:	18fb      	adds	r3, r7, r3
 801962e:	781b      	ldrb	r3, [r3, #0]
 8019630:	2b00      	cmp	r3, #0
 8019632:	d012      	beq.n	801965a <RegionIN865NextChannel+0x106>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019634:	232f      	movs	r3, #47	; 0x2f
 8019636:	18fb      	adds	r3, r7, r3
 8019638:	781b      	ldrb	r3, [r3, #0]
 801963a:	3b01      	subs	r3, #1
 801963c:	0019      	movs	r1, r3
 801963e:	2000      	movs	r0, #0
 8019640:	f001 ff7e 	bl	801b540 <randr>
 8019644:	0002      	movs	r2, r0
 8019646:	2310      	movs	r3, #16
 8019648:	18fb      	adds	r3, r7, r3
 801964a:	5c9a      	ldrb	r2, [r3, r2]
 801964c:	68bb      	ldr	r3, [r7, #8]
 801964e:	701a      	strb	r2, [r3, #0]

        *time = 0;
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	2200      	movs	r2, #0
 8019654:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8019656:	2300      	movs	r3, #0
 8019658:	e016      	b.n	8019688 <RegionIN865NextChannel+0x134>
    }
    else
    {
        if( delayTx > 0 )
 801965a:	2323      	movs	r3, #35	; 0x23
 801965c:	18fb      	adds	r3, r7, r3
 801965e:	781b      	ldrb	r3, [r3, #0]
 8019660:	2b00      	cmp	r3, #0
 8019662:	d004      	beq.n	801966e <RegionIN865NextChannel+0x11a>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019668:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 801966a:	230b      	movs	r3, #11
 801966c:	e00c      	b.n	8019688 <RegionIN865NextChannel+0x134>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801966e:	4b09      	ldr	r3, [pc, #36]	; (8019694 <RegionIN865NextChannel+0x140>)
 8019670:	22d0      	movs	r2, #208	; 0xd0
 8019672:	5a9b      	ldrh	r3, [r3, r2]
 8019674:	2207      	movs	r2, #7
 8019676:	4313      	orrs	r3, r2
 8019678:	b299      	uxth	r1, r3
 801967a:	4b06      	ldr	r3, [pc, #24]	; (8019694 <RegionIN865NextChannel+0x140>)
 801967c:	22d0      	movs	r2, #208	; 0xd0
 801967e:	5299      	strh	r1, [r3, r2]
        *time = 0;
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	2200      	movs	r2, #0
 8019684:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8019686:	230c      	movs	r3, #12
    }
}
 8019688:	0018      	movs	r0, r3
 801968a:	46bd      	mov	sp, r7
 801968c:	b00c      	add	sp, #48	; 0x30
 801968e:	bdb0      	pop	{r4, r5, r7, pc}
 8019690:	20001190 	.word	0x20001190
 8019694:	200010c0 	.word	0x200010c0
 8019698:	20001180 	.word	0x20001180

0801969c <RegionIN865ChannelAdd>:

LoRaMacStatus_t RegionIN865ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801969c:	b590      	push	{r4, r7, lr}
 801969e:	b085      	sub	sp, #20
 80196a0:	af00      	add	r7, sp, #0
 80196a2:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 80196a4:	230f      	movs	r3, #15
 80196a6:	18fb      	adds	r3, r7, r3
 80196a8:	2200      	movs	r2, #0
 80196aa:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 80196ac:	230e      	movs	r3, #14
 80196ae:	18fb      	adds	r3, r7, r3
 80196b0:	2200      	movs	r2, #0
 80196b2:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 80196b4:	210d      	movs	r1, #13
 80196b6:	187b      	adds	r3, r7, r1
 80196b8:	687a      	ldr	r2, [r7, #4]
 80196ba:	7912      	ldrb	r2, [r2, #4]
 80196bc:	701a      	strb	r2, [r3, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 80196be:	187b      	adds	r3, r7, r1
 80196c0:	781b      	ldrb	r3, [r3, #0]
 80196c2:	2b02      	cmp	r3, #2
 80196c4:	d801      	bhi.n	80196ca <RegionIN865ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80196c6:	2306      	movs	r3, #6
 80196c8:	e09c      	b.n	8019804 <RegionIN865ChannelAdd+0x168>
    }

    if( id >= IN865_MAX_NB_CHANNELS )
 80196ca:	230d      	movs	r3, #13
 80196cc:	18fb      	adds	r3, r7, r3
 80196ce:	781b      	ldrb	r3, [r3, #0]
 80196d0:	2b0f      	cmp	r3, #15
 80196d2:	d901      	bls.n	80196d8 <RegionIN865ChannelAdd+0x3c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80196d4:	2303      	movs	r3, #3
 80196d6:	e095      	b.n	8019804 <RegionIN865ChannelAdd+0x168>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	7a1b      	ldrb	r3, [r3, #8]
 80196de:	011b      	lsls	r3, r3, #4
 80196e0:	b25b      	sxtb	r3, r3
 80196e2:	111b      	asrs	r3, r3, #4
 80196e4:	b25b      	sxtb	r3, r3
 80196e6:	2207      	movs	r2, #7
 80196e8:	2100      	movs	r1, #0
 80196ea:	0018      	movs	r0, r3
 80196ec:	f7fe f9d2 	bl	8017a94 <RegionCommonValueInRange>
 80196f0:	1e03      	subs	r3, r0, #0
 80196f2:	d103      	bne.n	80196fc <RegionIN865ChannelAdd+0x60>
    {
        drInvalid = true;
 80196f4:	230f      	movs	r3, #15
 80196f6:	18fb      	adds	r3, r7, r3
 80196f8:	2201      	movs	r2, #1
 80196fa:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	7a1b      	ldrb	r3, [r3, #8]
 8019702:	b25b      	sxtb	r3, r3
 8019704:	111b      	asrs	r3, r3, #4
 8019706:	b25b      	sxtb	r3, r3
 8019708:	2207      	movs	r2, #7
 801970a:	2100      	movs	r1, #0
 801970c:	0018      	movs	r0, r3
 801970e:	f7fe f9c1 	bl	8017a94 <RegionCommonValueInRange>
 8019712:	1e03      	subs	r3, r0, #0
 8019714:	d103      	bne.n	801971e <RegionIN865ChannelAdd+0x82>
    {
        drInvalid = true;
 8019716:	230f      	movs	r3, #15
 8019718:	18fb      	adds	r3, r7, r3
 801971a:	2201      	movs	r2, #1
 801971c:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	7a1b      	ldrb	r3, [r3, #8]
 8019724:	011b      	lsls	r3, r3, #4
 8019726:	b25b      	sxtb	r3, r3
 8019728:	111b      	asrs	r3, r3, #4
 801972a:	b25a      	sxtb	r2, r3
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	681b      	ldr	r3, [r3, #0]
 8019730:	7a1b      	ldrb	r3, [r3, #8]
 8019732:	b25b      	sxtb	r3, r3
 8019734:	111b      	asrs	r3, r3, #4
 8019736:	b25b      	sxtb	r3, r3
 8019738:	429a      	cmp	r2, r3
 801973a:	dd03      	ble.n	8019744 <RegionIN865ChannelAdd+0xa8>
    {
        drInvalid = true;
 801973c:	230f      	movs	r3, #15
 801973e:	18fb      	adds	r3, r7, r3
 8019740:	2201      	movs	r2, #1
 8019742:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8019744:	230e      	movs	r3, #14
 8019746:	18fb      	adds	r3, r7, r3
 8019748:	781b      	ldrb	r3, [r3, #0]
 801974a:	2201      	movs	r2, #1
 801974c:	4053      	eors	r3, r2
 801974e:	b2db      	uxtb	r3, r3
 8019750:	2b00      	cmp	r3, #0
 8019752:	d010      	beq.n	8019776 <RegionIN865ChannelAdd+0xda>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	0018      	movs	r0, r3
 801975c:	f7fe fe5a 	bl	8018414 <VerifyRfFreq>
 8019760:	0003      	movs	r3, r0
 8019762:	001a      	movs	r2, r3
 8019764:	2301      	movs	r3, #1
 8019766:	4053      	eors	r3, r2
 8019768:	b2db      	uxtb	r3, r3
 801976a:	2b00      	cmp	r3, #0
 801976c:	d003      	beq.n	8019776 <RegionIN865ChannelAdd+0xda>
        {
            freqInvalid = true;
 801976e:	230e      	movs	r3, #14
 8019770:	18fb      	adds	r3, r7, r3
 8019772:	2201      	movs	r2, #1
 8019774:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019776:	230f      	movs	r3, #15
 8019778:	18fb      	adds	r3, r7, r3
 801977a:	781b      	ldrb	r3, [r3, #0]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d006      	beq.n	801978e <RegionIN865ChannelAdd+0xf2>
 8019780:	230e      	movs	r3, #14
 8019782:	18fb      	adds	r3, r7, r3
 8019784:	781b      	ldrb	r3, [r3, #0]
 8019786:	2b00      	cmp	r3, #0
 8019788:	d001      	beq.n	801978e <RegionIN865ChannelAdd+0xf2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801978a:	2306      	movs	r3, #6
 801978c:	e03a      	b.n	8019804 <RegionIN865ChannelAdd+0x168>
    }
    if( drInvalid == true )
 801978e:	230f      	movs	r3, #15
 8019790:	18fb      	adds	r3, r7, r3
 8019792:	781b      	ldrb	r3, [r3, #0]
 8019794:	2b00      	cmp	r3, #0
 8019796:	d001      	beq.n	801979c <RegionIN865ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019798:	2305      	movs	r3, #5
 801979a:	e033      	b.n	8019804 <RegionIN865ChannelAdd+0x168>
    }
    if( freqInvalid == true )
 801979c:	230e      	movs	r3, #14
 801979e:	18fb      	adds	r3, r7, r3
 80197a0:	781b      	ldrb	r3, [r3, #0]
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d001      	beq.n	80197aa <RegionIN865ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80197a6:	2304      	movs	r3, #4
 80197a8:	e02c      	b.n	8019804 <RegionIN865ChannelAdd+0x168>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 80197aa:	200d      	movs	r0, #13
 80197ac:	0004      	movs	r4, r0
 80197ae:	183b      	adds	r3, r7, r0
 80197b0:	781a      	ldrb	r2, [r3, #0]
 80197b2:	0013      	movs	r3, r2
 80197b4:	005b      	lsls	r3, r3, #1
 80197b6:	189b      	adds	r3, r3, r2
 80197b8:	009b      	lsls	r3, r3, #2
 80197ba:	4a14      	ldr	r2, [pc, #80]	; (801980c <RegionIN865ChannelAdd+0x170>)
 80197bc:	1898      	adds	r0, r3, r2
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	220c      	movs	r2, #12
 80197c4:	0019      	movs	r1, r3
 80197c6:	f001 fed1 	bl	801b56c <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 80197ca:	0020      	movs	r0, r4
 80197cc:	183b      	adds	r3, r7, r0
 80197ce:	781a      	ldrb	r2, [r3, #0]
 80197d0:	490e      	ldr	r1, [pc, #56]	; (801980c <RegionIN865ChannelAdd+0x170>)
 80197d2:	0013      	movs	r3, r2
 80197d4:	005b      	lsls	r3, r3, #1
 80197d6:	189b      	adds	r3, r3, r2
 80197d8:	009b      	lsls	r3, r3, #2
 80197da:	18cb      	adds	r3, r1, r3
 80197dc:	3309      	adds	r3, #9
 80197de:	2200      	movs	r2, #0
 80197e0:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 80197e2:	4b0a      	ldr	r3, [pc, #40]	; (801980c <RegionIN865ChannelAdd+0x170>)
 80197e4:	22d0      	movs	r2, #208	; 0xd0
 80197e6:	5a9b      	ldrh	r3, [r3, r2]
 80197e8:	b21a      	sxth	r2, r3
 80197ea:	183b      	adds	r3, r7, r0
 80197ec:	781b      	ldrb	r3, [r3, #0]
 80197ee:	2101      	movs	r1, #1
 80197f0:	4099      	lsls	r1, r3
 80197f2:	000b      	movs	r3, r1
 80197f4:	b21b      	sxth	r3, r3
 80197f6:	4313      	orrs	r3, r2
 80197f8:	b21b      	sxth	r3, r3
 80197fa:	b299      	uxth	r1, r3
 80197fc:	4b03      	ldr	r3, [pc, #12]	; (801980c <RegionIN865ChannelAdd+0x170>)
 80197fe:	22d0      	movs	r2, #208	; 0xd0
 8019800:	5299      	strh	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
 8019802:	2300      	movs	r3, #0
}
 8019804:	0018      	movs	r0, r3
 8019806:	46bd      	mov	sp, r7
 8019808:	b005      	add	sp, #20
 801980a:	bd90      	pop	{r4, r7, pc}
 801980c:	200010c0 	.word	0x200010c0

08019810 <RegionIN865ChannelsRemove>:

bool RegionIN865ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019810:	b590      	push	{r4, r7, lr}
 8019812:	b085      	sub	sp, #20
 8019814:	af00      	add	r7, sp, #0
 8019816:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8019818:	210f      	movs	r1, #15
 801981a:	187b      	adds	r3, r7, r1
 801981c:	687a      	ldr	r2, [r7, #4]
 801981e:	7812      	ldrb	r2, [r2, #0]
 8019820:	701a      	strb	r2, [r3, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 8019822:	187b      	adds	r3, r7, r1
 8019824:	781b      	ldrb	r3, [r3, #0]
 8019826:	2b02      	cmp	r3, #2
 8019828:	d801      	bhi.n	801982e <RegionIN865ChannelsRemove+0x1e>
    {
        return false;
 801982a:	2300      	movs	r3, #0
 801982c:	e015      	b.n	801985a <RegionIN865ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801982e:	240f      	movs	r4, #15
 8019830:	193b      	adds	r3, r7, r4
 8019832:	781a      	ldrb	r2, [r3, #0]
 8019834:	490b      	ldr	r1, [pc, #44]	; (8019864 <RegionIN865ChannelsRemove+0x54>)
 8019836:	0013      	movs	r3, r2
 8019838:	005b      	lsls	r3, r3, #1
 801983a:	189b      	adds	r3, r3, r2
 801983c:	009b      	lsls	r3, r3, #2
 801983e:	18cb      	adds	r3, r1, r3
 8019840:	220c      	movs	r2, #12
 8019842:	2100      	movs	r1, #0
 8019844:	0018      	movs	r0, r3
 8019846:	f001 ff15 	bl	801b674 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, IN865_MAX_NB_CHANNELS );
 801984a:	193b      	adds	r3, r7, r4
 801984c:	7819      	ldrb	r1, [r3, #0]
 801984e:	4b06      	ldr	r3, [pc, #24]	; (8019868 <RegionIN865ChannelsRemove+0x58>)
 8019850:	2210      	movs	r2, #16
 8019852:	0018      	movs	r0, r3
 8019854:	f7fe f944 	bl	8017ae0 <RegionCommonChanDisable>
 8019858:	0003      	movs	r3, r0
}
 801985a:	0018      	movs	r0, r3
 801985c:	46bd      	mov	sp, r7
 801985e:	b005      	add	sp, #20
 8019860:	bd90      	pop	{r4, r7, pc}
 8019862:	46c0      	nop			; (mov r8, r8)
 8019864:	200010c0 	.word	0x200010c0
 8019868:	20001190 	.word	0x20001190

0801986c <RegionIN865SetContinuousWave>:

void RegionIN865SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801986c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801986e:	b085      	sub	sp, #20
 8019870:	af00      	add	r7, sp, #0
 8019872:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	2002      	movs	r0, #2
 8019878:	5618      	ldrsb	r0, [r3, r0]
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	781b      	ldrb	r3, [r3, #0]
 801987e:	0019      	movs	r1, r3
 8019880:	4a21      	ldr	r2, [pc, #132]	; (8019908 <RegionIN865SetContinuousWave+0x9c>)
 8019882:	000b      	movs	r3, r1
 8019884:	005b      	lsls	r3, r3, #1
 8019886:	185b      	adds	r3, r3, r1
 8019888:	009b      	lsls	r3, r3, #2
 801988a:	18d3      	adds	r3, r2, r3
 801988c:	3309      	adds	r3, #9
 801988e:	781b      	ldrb	r3, [r3, #0]
 8019890:	4a1d      	ldr	r2, [pc, #116]	; (8019908 <RegionIN865SetContinuousWave+0x9c>)
 8019892:	330c      	adds	r3, #12
 8019894:	011b      	lsls	r3, r3, #4
 8019896:	18d3      	adds	r3, r2, r3
 8019898:	3302      	adds	r3, #2
 801989a:	2100      	movs	r1, #0
 801989c:	5659      	ldrsb	r1, [r3, r1]
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	2201      	movs	r2, #1
 80198a2:	569a      	ldrsb	r2, [r3, r2]
 80198a4:	260f      	movs	r6, #15
 80198a6:	19bc      	adds	r4, r7, r6
 80198a8:	4b18      	ldr	r3, [pc, #96]	; (801990c <RegionIN865SetContinuousWave+0xa0>)
 80198aa:	f7fe fd8b 	bl	80183c4 <LimitTxPower>
 80198ae:	0003      	movs	r3, r0
 80198b0:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 80198b2:	200e      	movs	r0, #14
 80198b4:	183b      	adds	r3, r7, r0
 80198b6:	2200      	movs	r2, #0
 80198b8:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	781b      	ldrb	r3, [r3, #0]
 80198be:	0019      	movs	r1, r3
 80198c0:	4a11      	ldr	r2, [pc, #68]	; (8019908 <RegionIN865SetContinuousWave+0x9c>)
 80198c2:	000b      	movs	r3, r1
 80198c4:	005b      	lsls	r3, r3, #1
 80198c6:	185b      	adds	r3, r3, r1
 80198c8:	009b      	lsls	r3, r3, #2
 80198ca:	589b      	ldr	r3, [r3, r2]
 80198cc:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	6859      	ldr	r1, [r3, #4]
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	689a      	ldr	r2, [r3, #8]
 80198d6:	0005      	movs	r5, r0
 80198d8:	183c      	adds	r4, r7, r0
 80198da:	19bb      	adds	r3, r7, r6
 80198dc:	781b      	ldrb	r3, [r3, #0]
 80198de:	b25b      	sxtb	r3, r3
 80198e0:	0018      	movs	r0, r3
 80198e2:	f7fe fc59 	bl	8018198 <RegionCommonComputeTxPower>
 80198e6:	0003      	movs	r3, r0
 80198e8:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80198ea:	4b09      	ldr	r3, [pc, #36]	; (8019910 <RegionIN865SetContinuousWave+0xa4>)
 80198ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80198ee:	687a      	ldr	r2, [r7, #4]
 80198f0:	8994      	ldrh	r4, [r2, #12]
 80198f2:	0028      	movs	r0, r5
 80198f4:	183a      	adds	r2, r7, r0
 80198f6:	2100      	movs	r1, #0
 80198f8:	5651      	ldrsb	r1, [r2, r1]
 80198fa:	68b8      	ldr	r0, [r7, #8]
 80198fc:	0022      	movs	r2, r4
 80198fe:	4798      	blx	r3
}
 8019900:	46c0      	nop			; (mov r8, r8)
 8019902:	46bd      	mov	sp, r7
 8019904:	b005      	add	sp, #20
 8019906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019908:	200010c0 	.word	0x200010c0
 801990c:	20001190 	.word	0x20001190
 8019910:	0801ca04 	.word	0x0801ca04

08019914 <RegionIN865ApplyDrOffset>:

uint8_t RegionIN865ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019914:	b590      	push	{r4, r7, lr}
 8019916:	b083      	sub	sp, #12
 8019918:	af00      	add	r7, sp, #0
 801991a:	0004      	movs	r4, r0
 801991c:	0008      	movs	r0, r1
 801991e:	0011      	movs	r1, r2
 8019920:	1dfb      	adds	r3, r7, #7
 8019922:	1c22      	adds	r2, r4, #0
 8019924:	701a      	strb	r2, [r3, #0]
 8019926:	1dbb      	adds	r3, r7, #6
 8019928:	1c02      	adds	r2, r0, #0
 801992a:	701a      	strb	r2, [r3, #0]
 801992c:	1d7b      	adds	r3, r7, #5
 801992e:	1c0a      	adds	r2, r1, #0
 8019930:	701a      	strb	r2, [r3, #0]
    // Apply offset formula
    return MIN( DR_5, MAX( DR_0, dr - EffectiveRx1DrOffsetIN865[drOffset] ) );
 8019932:	1dbb      	adds	r3, r7, #6
 8019934:	781b      	ldrb	r3, [r3, #0]
 8019936:	b25b      	sxtb	r3, r3
 8019938:	1d7a      	adds	r2, r7, #5
 801993a:	7812      	ldrb	r2, [r2, #0]
 801993c:	b252      	sxtb	r2, r2
 801993e:	490b      	ldr	r1, [pc, #44]	; (801996c <RegionIN865ApplyDrOffset+0x58>)
 8019940:	568a      	ldrsb	r2, [r1, r2]
 8019942:	1a9b      	subs	r3, r3, r2
 8019944:	2b05      	cmp	r3, #5
 8019946:	dc0c      	bgt.n	8019962 <RegionIN865ApplyDrOffset+0x4e>
 8019948:	1dbb      	adds	r3, r7, #6
 801994a:	781b      	ldrb	r3, [r3, #0]
 801994c:	b25b      	sxtb	r3, r3
 801994e:	1d7a      	adds	r2, r7, #5
 8019950:	7812      	ldrb	r2, [r2, #0]
 8019952:	b252      	sxtb	r2, r2
 8019954:	4905      	ldr	r1, [pc, #20]	; (801996c <RegionIN865ApplyDrOffset+0x58>)
 8019956:	568a      	ldrsb	r2, [r1, r2]
 8019958:	1a9b      	subs	r3, r3, r2
 801995a:	d500      	bpl.n	801995e <RegionIN865ApplyDrOffset+0x4a>
 801995c:	2300      	movs	r3, #0
 801995e:	b2db      	uxtb	r3, r3
 8019960:	e000      	b.n	8019964 <RegionIN865ApplyDrOffset+0x50>
 8019962:	2305      	movs	r3, #5
}
 8019964:	0018      	movs	r0, r3
 8019966:	46bd      	mov	sp, r7
 8019968:	b003      	add	sp, #12
 801996a:	bd90      	pop	{r4, r7, pc}
 801996c:	0801d194 	.word	0x0801d194

08019970 <certif_running>:
static void OnCertifTxNextPacketTimerEvent( void* context );
static bool certif_tx( void );

/* Exported functions definition---------------------------------------------------------*/
bool certif_running(void)
{
 8019970:	b580      	push	{r7, lr}
 8019972:	af00      	add	r7, sp, #0
    return certifParam.Running;
 8019974:	4b02      	ldr	r3, [pc, #8]	; (8019980 <certif_running+0x10>)
 8019976:	781b      	ldrb	r3, [r3, #0]
}
 8019978:	0018      	movs	r0, r3
 801997a:	46bd      	mov	sp, r7
 801997c:	bd80      	pop	{r7, pc}
 801997e:	46c0      	nop			; (mov r8, r8)
 8019980:	200011ac 	.word	0x200011ac

08019984 <certif_DownLinkIncrement>:

void certif_DownLinkIncrement( void )
{
 8019984:	b580      	push	{r7, lr}
 8019986:	af00      	add	r7, sp, #0
    certifParam.DownLinkCounter++;
 8019988:	4b05      	ldr	r3, [pc, #20]	; (80199a0 <certif_DownLinkIncrement+0x1c>)
 801998a:	22f6      	movs	r2, #246	; 0xf6
 801998c:	5a9b      	ldrh	r3, [r3, r2]
 801998e:	3301      	adds	r3, #1
 8019990:	b299      	uxth	r1, r3
 8019992:	4b03      	ldr	r3, [pc, #12]	; (80199a0 <certif_DownLinkIncrement+0x1c>)
 8019994:	22f6      	movs	r2, #246	; 0xf6
 8019996:	5299      	strh	r1, [r3, r2]
}
 8019998:	46c0      	nop			; (mov r8, r8)
 801999a:	46bd      	mov	sp, r7
 801999c:	bd80      	pop	{r7, pc}
 801999e:	46c0      	nop			; (mov r8, r8)
 80199a0:	200011ac 	.word	0x200011ac

080199a4 <certif_linkCheck>:

void certif_linkCheck(MlmeConfirm_t *mlmeConfirm)
{
 80199a4:	b580      	push	{r7, lr}
 80199a6:	b082      	sub	sp, #8
 80199a8:	af00      	add	r7, sp, #0
 80199aa:	6078      	str	r0, [r7, #4]
  certifParam.LinkCheck = true;
 80199ac:	4b08      	ldr	r3, [pc, #32]	; (80199d0 <certif_linkCheck+0x2c>)
 80199ae:	22f8      	movs	r2, #248	; 0xf8
 80199b0:	2101      	movs	r1, #1
 80199b2:	5499      	strb	r1, [r3, r2]
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	7a19      	ldrb	r1, [r3, #8]
 80199b8:	4b05      	ldr	r3, [pc, #20]	; (80199d0 <certif_linkCheck+0x2c>)
 80199ba:	22f9      	movs	r2, #249	; 0xf9
 80199bc:	5499      	strb	r1, [r3, r2]
  certifParam.NbGateways = mlmeConfirm->NbGateways;
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	7a59      	ldrb	r1, [r3, #9]
 80199c2:	4b03      	ldr	r3, [pc, #12]	; (80199d0 <certif_linkCheck+0x2c>)
 80199c4:	22fa      	movs	r2, #250	; 0xfa
 80199c6:	5499      	strb	r1, [r3, r2]
}
 80199c8:	46c0      	nop			; (mov r8, r8)
 80199ca:	46bd      	mov	sp, r7
 80199cc:	b002      	add	sp, #8
 80199ce:	bd80      	pop	{r7, pc}
 80199d0:	200011ac 	.word	0x200011ac

080199d4 <certif_tx>:

static bool certif_tx( void )
{
 80199d4:	b580      	push	{r7, lr}
 80199d6:	b086      	sub	sp, #24
 80199d8:	af00      	add	r7, sp, #0
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;
  
  if( certifParam.LinkCheck == true )
 80199da:	4b47      	ldr	r3, [pc, #284]	; (8019af8 <certif_tx+0x124>)
 80199dc:	22f8      	movs	r2, #248	; 0xf8
 80199de:	5c9b      	ldrb	r3, [r3, r2]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d017      	beq.n	8019a14 <certif_tx+0x40>
  {
    certifParam.LinkCheck = false;
 80199e4:	4b44      	ldr	r3, [pc, #272]	; (8019af8 <certif_tx+0x124>)
 80199e6:	22f8      	movs	r2, #248	; 0xf8
 80199e8:	2100      	movs	r1, #0
 80199ea:	5499      	strb	r1, [r3, r2]
    certifParam.DataBufferSize = 3;
 80199ec:	4b42      	ldr	r3, [pc, #264]	; (8019af8 <certif_tx+0x124>)
 80199ee:	2203      	movs	r2, #3
 80199f0:	70da      	strb	r2, [r3, #3]
    certifParam.DataBuffer[0] = 5;
 80199f2:	4b41      	ldr	r3, [pc, #260]	; (8019af8 <certif_tx+0x124>)
 80199f4:	2205      	movs	r2, #5
 80199f6:	711a      	strb	r2, [r3, #4]
    certifParam.DataBuffer[1] = certifParam.DemodMargin;
 80199f8:	4b3f      	ldr	r3, [pc, #252]	; (8019af8 <certif_tx+0x124>)
 80199fa:	22f9      	movs	r2, #249	; 0xf9
 80199fc:	5c9a      	ldrb	r2, [r3, r2]
 80199fe:	4b3e      	ldr	r3, [pc, #248]	; (8019af8 <certif_tx+0x124>)
 8019a00:	715a      	strb	r2, [r3, #5]
    certifParam.DataBuffer[2] = certifParam.NbGateways;
 8019a02:	4b3d      	ldr	r3, [pc, #244]	; (8019af8 <certif_tx+0x124>)
 8019a04:	22fa      	movs	r2, #250	; 0xfa
 8019a06:	5c9a      	ldrb	r2, [r3, r2]
 8019a08:	4b3b      	ldr	r3, [pc, #236]	; (8019af8 <certif_tx+0x124>)
 8019a0a:	719a      	strb	r2, [r3, #6]
    certifParam.State = 1;
 8019a0c:	4b3a      	ldr	r3, [pc, #232]	; (8019af8 <certif_tx+0x124>)
 8019a0e:	2201      	movs	r2, #1
 8019a10:	705a      	strb	r2, [r3, #1]
 8019a12:	e01b      	b.n	8019a4c <certif_tx+0x78>
  }
  else
  {
    switch( certifParam.State )
 8019a14:	4b38      	ldr	r3, [pc, #224]	; (8019af8 <certif_tx+0x124>)
 8019a16:	785b      	ldrb	r3, [r3, #1]
 8019a18:	2b01      	cmp	r3, #1
 8019a1a:	d005      	beq.n	8019a28 <certif_tx+0x54>
 8019a1c:	2b04      	cmp	r3, #4
 8019a1e:	d115      	bne.n	8019a4c <certif_tx+0x78>
    {
    case 4:
      certifParam.State = 1;
 8019a20:	4b35      	ldr	r3, [pc, #212]	; (8019af8 <certif_tx+0x124>)
 8019a22:	2201      	movs	r2, #1
 8019a24:	705a      	strb	r2, [r3, #1]
      break;
 8019a26:	e011      	b.n	8019a4c <certif_tx+0x78>
    case 1:
      certifParam.DataBufferSize = 2;
 8019a28:	4b33      	ldr	r3, [pc, #204]	; (8019af8 <certif_tx+0x124>)
 8019a2a:	2202      	movs	r2, #2
 8019a2c:	70da      	strb	r2, [r3, #3]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 8019a2e:	4b32      	ldr	r3, [pc, #200]	; (8019af8 <certif_tx+0x124>)
 8019a30:	22f6      	movs	r2, #246	; 0xf6
 8019a32:	5a9b      	ldrh	r3, [r3, r2]
 8019a34:	0a1b      	lsrs	r3, r3, #8
 8019a36:	b29b      	uxth	r3, r3
 8019a38:	b2da      	uxtb	r2, r3
 8019a3a:	4b2f      	ldr	r3, [pc, #188]	; (8019af8 <certif_tx+0x124>)
 8019a3c:	711a      	strb	r2, [r3, #4]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
 8019a3e:	4b2e      	ldr	r3, [pc, #184]	; (8019af8 <certif_tx+0x124>)
 8019a40:	22f6      	movs	r2, #246	; 0xf6
 8019a42:	5a9b      	ldrh	r3, [r3, r2]
 8019a44:	b2da      	uxtb	r2, r3
 8019a46:	4b2c      	ldr	r3, [pc, #176]	; (8019af8 <certif_tx+0x124>)
 8019a48:	715a      	strb	r2, [r3, #5]
      break;
 8019a4a:	46c0      	nop			; (mov r8, r8)
    }
  }
    
  if( LoRaMacQueryTxPossible( certifParam.DataBufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8019a4c:	4b2a      	ldr	r3, [pc, #168]	; (8019af8 <certif_tx+0x124>)
 8019a4e:	78db      	ldrb	r3, [r3, #3]
 8019a50:	1d3a      	adds	r2, r7, #4
 8019a52:	0011      	movs	r1, r2
 8019a54:	0018      	movs	r0, r3
 8019a56:	f7f9 ff93 	bl	8013980 <LoRaMacQueryTxPossible>
 8019a5a:	1e03      	subs	r3, r0, #0
 8019a5c:	d00d      	beq.n	8019a7a <certif_tx+0xa6>
  {
      // Send empty frame in order to flush MAC commands
      mcpsReq.Type = MCPS_UNCONFIRMED;
 8019a5e:	2108      	movs	r1, #8
 8019a60:	187b      	adds	r3, r7, r1
 8019a62:	2200      	movs	r2, #0
 8019a64:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8019a66:	187b      	adds	r3, r7, r1
 8019a68:	2200      	movs	r2, #0
 8019a6a:	609a      	str	r2, [r3, #8]
      mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8019a6c:	187b      	adds	r3, r7, r1
 8019a6e:	2200      	movs	r2, #0
 8019a70:	819a      	strh	r2, [r3, #12]
      mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8019a72:	187b      	adds	r3, r7, r1
 8019a74:	2200      	movs	r2, #0
 8019a76:	739a      	strb	r2, [r3, #14]
 8019a78:	e02b      	b.n	8019ad2 <certif_tx+0xfe>
  }
  else
  {
      if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 8019a7a:	4b20      	ldr	r3, [pc, #128]	; (8019afc <certif_tx+0x128>)
 8019a7c:	781b      	ldrb	r3, [r3, #0]
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d112      	bne.n	8019aa8 <certif_tx+0xd4>
      {
          mcpsReq.Type = MCPS_UNCONFIRMED;
 8019a82:	2108      	movs	r1, #8
 8019a84:	187b      	adds	r3, r7, r1
 8019a86:	2200      	movs	r2, #0
 8019a88:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
 8019a8a:	187b      	adds	r3, r7, r1
 8019a8c:	22e0      	movs	r2, #224	; 0xe0
 8019a8e:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
 8019a90:	4b19      	ldr	r3, [pc, #100]	; (8019af8 <certif_tx+0x124>)
 8019a92:	78db      	ldrb	r3, [r3, #3]
 8019a94:	b29a      	uxth	r2, r3
 8019a96:	187b      	adds	r3, r7, r1
 8019a98:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
 8019a9a:	187b      	adds	r3, r7, r1
 8019a9c:	4a18      	ldr	r2, [pc, #96]	; (8019b00 <certif_tx+0x12c>)
 8019a9e:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8019aa0:	187b      	adds	r3, r7, r1
 8019aa2:	2200      	movs	r2, #0
 8019aa4:	739a      	strb	r2, [r3, #14]
 8019aa6:	e014      	b.n	8019ad2 <certif_tx+0xfe>
      }
      else
      {
          mcpsReq.Type = MCPS_CONFIRMED;
 8019aa8:	2108      	movs	r1, #8
 8019aaa:	187b      	adds	r3, r7, r1
 8019aac:	2201      	movs	r2, #1
 8019aae:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Confirmed.fPort = CERTIF_PORT;
 8019ab0:	187b      	adds	r3, r7, r1
 8019ab2:	22e0      	movs	r2, #224	; 0xe0
 8019ab4:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Confirmed.fBufferSize = certifParam.DataBufferSize;
 8019ab6:	4b10      	ldr	r3, [pc, #64]	; (8019af8 <certif_tx+0x124>)
 8019ab8:	78db      	ldrb	r3, [r3, #3]
 8019aba:	b29a      	uxth	r2, r3
 8019abc:	187b      	adds	r3, r7, r1
 8019abe:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Confirmed.fBuffer = &(certifParam.DataBuffer);
 8019ac0:	187b      	adds	r3, r7, r1
 8019ac2:	4a0f      	ldr	r2, [pc, #60]	; (8019b00 <certif_tx+0x12c>)
 8019ac4:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Confirmed.NbTrials = 8;
 8019ac6:	187b      	adds	r3, r7, r1
 8019ac8:	2208      	movs	r2, #8
 8019aca:	73da      	strb	r2, [r3, #15]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 8019acc:	187b      	adds	r3, r7, r1
 8019ace:	2200      	movs	r2, #0
 8019ad0:	739a      	strb	r2, [r3, #14]
      }
  }

  /*cerification test on-going*/
  TimerStart( &CertifTxNextPacketTimer );
 8019ad2:	4b0c      	ldr	r3, [pc, #48]	; (8019b04 <certif_tx+0x130>)
 8019ad4:	0018      	movs	r0, r3
 8019ad6:	f001 f9f9 	bl	801aecc <TimerStart>
	
  if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 8019ada:	2308      	movs	r3, #8
 8019adc:	18fb      	adds	r3, r7, r3
 8019ade:	0018      	movs	r0, r3
 8019ae0:	f7fa ffaa 	bl	8014a38 <LoRaMacMcpsRequest>
 8019ae4:	1e03      	subs	r3, r0, #0
 8019ae6:	d101      	bne.n	8019aec <certif_tx+0x118>
  {
      return false;
 8019ae8:	2300      	movs	r3, #0
 8019aea:	e000      	b.n	8019aee <certif_tx+0x11a>
  }
    return true;
 8019aec:	2301      	movs	r3, #1
}
 8019aee:	0018      	movs	r0, r3
 8019af0:	46bd      	mov	sp, r7
 8019af2:	b006      	add	sp, #24
 8019af4:	bd80      	pop	{r7, pc}
 8019af6:	46c0      	nop			; (mov r8, r8)
 8019af8:	200011ac 	.word	0x200011ac
 8019afc:	200012a8 	.word	0x200012a8
 8019b00:	200011b0 	.word	0x200011b0
 8019b04:	20001194 	.word	0x20001194

08019b08 <certif_rx>:

void certif_rx( McpsIndication_t *mcpsIndication, MlmeReqJoin_t* JoinParameters)
{
 8019b08:	b590      	push	{r4, r7, lr}
 8019b0a:	b0a1      	sub	sp, #132	; 0x84
 8019b0c:	af00      	add	r7, sp, #0
 8019b0e:	6078      	str	r0, [r7, #4]
 8019b10:	6039      	str	r1, [r7, #0]
  if( certifParam.Running == false )
 8019b12:	4bb2      	ldr	r3, [pc, #712]	; (8019ddc <certif_rx+0x2d4>)
 8019b14:	781b      	ldrb	r3, [r3, #0]
 8019b16:	2201      	movs	r2, #1
 8019b18:	4053      	eors	r3, r2
 8019b1a:	b2db      	uxtb	r3, r3
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d062      	beq.n	8019be6 <certif_rx+0xde>
  {
      // Check compliance test enable command (i)
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	7b1b      	ldrb	r3, [r3, #12]
 8019b24:	2b04      	cmp	r3, #4
 8019b26:	d000      	beq.n	8019b2a <certif_rx+0x22>
 8019b28:	e148      	b.n	8019dbc <certif_rx+0x2b4>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	689b      	ldr	r3, [r3, #8]
 8019b2e:	781b      	ldrb	r3, [r3, #0]
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8019b30:	2b01      	cmp	r3, #1
 8019b32:	d000      	beq.n	8019b36 <certif_rx+0x2e>
 8019b34:	e142      	b.n	8019dbc <certif_rx+0x2b4>
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	689b      	ldr	r3, [r3, #8]
 8019b3a:	3301      	adds	r3, #1
 8019b3c:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8019b3e:	2b01      	cmp	r3, #1
 8019b40:	d000      	beq.n	8019b44 <certif_rx+0x3c>
 8019b42:	e13b      	b.n	8019dbc <certif_rx+0x2b4>
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	689b      	ldr	r3, [r3, #8]
 8019b48:	3302      	adds	r3, #2
 8019b4a:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8019b4c:	2b01      	cmp	r3, #1
 8019b4e:	d000      	beq.n	8019b52 <certif_rx+0x4a>
 8019b50:	e134      	b.n	8019dbc <certif_rx+0x2b4>
          ( mcpsIndication->Buffer[3] == 0x01 ) )
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	689b      	ldr	r3, [r3, #8]
 8019b56:	3303      	adds	r3, #3
 8019b58:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8019b5a:	2b01      	cmp	r3, #1
 8019b5c:	d000      	beq.n	8019b60 <certif_rx+0x58>
 8019b5e:	e12d      	b.n	8019dbc <certif_rx+0x2b4>
      {
          MibRequestConfirm_t mibReq;
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8019b60:	4b9f      	ldr	r3, [pc, #636]	; (8019de0 <certif_rx+0x2d8>)
 8019b62:	2200      	movs	r2, #0
 8019b64:	701a      	strb	r2, [r3, #0]
          certifParam.DataBufferSize = 2;
 8019b66:	4b9d      	ldr	r3, [pc, #628]	; (8019ddc <certif_rx+0x2d4>)
 8019b68:	2202      	movs	r2, #2
 8019b6a:	70da      	strb	r2, [r3, #3]
          certifParam.DownLinkCounter = 0;
 8019b6c:	4b9b      	ldr	r3, [pc, #620]	; (8019ddc <certif_rx+0x2d4>)
 8019b6e:	22f6      	movs	r2, #246	; 0xf6
 8019b70:	2100      	movs	r1, #0
 8019b72:	5299      	strh	r1, [r3, r2]
          certifParam.LinkCheck = false;
 8019b74:	4b99      	ldr	r3, [pc, #612]	; (8019ddc <certif_rx+0x2d4>)
 8019b76:	22f8      	movs	r2, #248	; 0xf8
 8019b78:	2100      	movs	r1, #0
 8019b7a:	5499      	strb	r1, [r3, r2]
          certifParam.DemodMargin = 0;
 8019b7c:	4b97      	ldr	r3, [pc, #604]	; (8019ddc <certif_rx+0x2d4>)
 8019b7e:	22f9      	movs	r2, #249	; 0xf9
 8019b80:	2100      	movs	r1, #0
 8019b82:	5499      	strb	r1, [r3, r2]
          certifParam.NbGateways = 0;
 8019b84:	4b95      	ldr	r3, [pc, #596]	; (8019ddc <certif_rx+0x2d4>)
 8019b86:	22fa      	movs	r2, #250	; 0xfa
 8019b88:	2100      	movs	r1, #0
 8019b8a:	5499      	strb	r1, [r3, r2]
          certifParam.Running = true;
 8019b8c:	4b93      	ldr	r3, [pc, #588]	; (8019ddc <certif_rx+0x2d4>)
 8019b8e:	2201      	movs	r2, #1
 8019b90:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8019b92:	4b92      	ldr	r3, [pc, #584]	; (8019ddc <certif_rx+0x2d4>)
 8019b94:	2201      	movs	r2, #1
 8019b96:	705a      	strb	r2, [r3, #1]

          mibReq.Type = MIB_ADR;
 8019b98:	210c      	movs	r1, #12
 8019b9a:	187b      	adds	r3, r7, r1
 8019b9c:	2204      	movs	r2, #4
 8019b9e:	701a      	strb	r2, [r3, #0]

          LoRaMacMibGetRequestConfirm( &mibReq );
 8019ba0:	000c      	movs	r4, r1
 8019ba2:	187b      	adds	r3, r7, r1
 8019ba4:	0018      	movs	r0, r3
 8019ba6:	f7f9 ff99 	bl	8013adc <LoRaMacMibGetRequestConfirm>
          AdrEnableInit=mibReq.Param.AdrEnable;
 8019baa:	0021      	movs	r1, r4
 8019bac:	187b      	adds	r3, r7, r1
 8019bae:	791a      	ldrb	r2, [r3, #4]
 8019bb0:	4b8c      	ldr	r3, [pc, #560]	; (8019de4 <certif_rx+0x2dc>)
 8019bb2:	701a      	strb	r2, [r3, #0]
          
          mibReq.Type = MIB_ADR;
 8019bb4:	187b      	adds	r3, r7, r1
 8019bb6:	2204      	movs	r2, #4
 8019bb8:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = true;
 8019bba:	187b      	adds	r3, r7, r1
 8019bbc:	2201      	movs	r2, #1
 8019bbe:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8019bc0:	187b      	adds	r3, r7, r1
 8019bc2:	0018      	movs	r0, r3
 8019bc4:	f7fa f8e6 	bl	8013d94 <LoRaMacMibSetRequestConfirm>
#if defined( REGION_EU868 ) || defined( REGION_RU864 ) || defined( REGION_CN779 ) || defined( REGION_EU433 )
          LoRaMacTestSetDutyCycleOn( false );
#endif

         
        TimerInit( &CertifTxNextPacketTimer, OnCertifTxNextPacketTimerEvent );
 8019bc8:	4a87      	ldr	r2, [pc, #540]	; (8019de8 <certif_rx+0x2e0>)
 8019bca:	4b88      	ldr	r3, [pc, #544]	; (8019dec <certif_rx+0x2e4>)
 8019bcc:	0011      	movs	r1, r2
 8019bce:	0018      	movs	r0, r3
 8019bd0:	f001 f95d 	bl	801ae8e <TimerInit>
        TimerSetValue( &CertifTxNextPacketTimer,  TEST_TX_DUTYCYCLE); 
 8019bd4:	4a86      	ldr	r2, [pc, #536]	; (8019df0 <certif_rx+0x2e8>)
 8019bd6:	4b85      	ldr	r3, [pc, #532]	; (8019dec <certif_rx+0x2e4>)
 8019bd8:	0011      	movs	r1, r2
 8019bda:	0018      	movs	r0, r3
 8019bdc:	f001 fac8 	bl	801b170 <TimerSetValue>
        
        /*confirm test mode activation */
        certif_tx( );
 8019be0:	f7ff fef8 	bl	80199d4 <certif_tx>
 8019be4:	e0ea      	b.n	8019dbc <certif_rx+0x2b4>
      }
  }

  else
  {
      certifParam.State = mcpsIndication->Buffer[0];
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	689b      	ldr	r3, [r3, #8]
 8019bea:	781a      	ldrb	r2, [r3, #0]
 8019bec:	4b7b      	ldr	r3, [pc, #492]	; (8019ddc <certif_rx+0x2d4>)
 8019bee:	705a      	strb	r2, [r3, #1]
      switch( certifParam.State )
 8019bf0:	4b7a      	ldr	r3, [pc, #488]	; (8019ddc <certif_rx+0x2d4>)
 8019bf2:	785b      	ldrb	r3, [r3, #1]
 8019bf4:	2b08      	cmp	r3, #8
 8019bf6:	d900      	bls.n	8019bfa <certif_rx+0xf2>
 8019bf8:	e0df      	b.n	8019dba <certif_rx+0x2b2>
 8019bfa:	009a      	lsls	r2, r3, #2
 8019bfc:	4b7d      	ldr	r3, [pc, #500]	; (8019df4 <certif_rx+0x2ec>)
 8019bfe:	18d3      	adds	r3, r2, r3
 8019c00:	681b      	ldr	r3, [r3, #0]
 8019c02:	469f      	mov	pc, r3
      {
        case 0: // Check compliance test disable command (ii)
        {
          
          certifParam.DownLinkCounter = 0;
 8019c04:	4b75      	ldr	r3, [pc, #468]	; (8019ddc <certif_rx+0x2d4>)
 8019c06:	22f6      	movs	r2, #246	; 0xf6
 8019c08:	2100      	movs	r1, #0
 8019c0a:	5299      	strh	r1, [r3, r2]
          certifParam.Running = false;
 8019c0c:	4b73      	ldr	r3, [pc, #460]	; (8019ddc <certif_rx+0x2d4>)
 8019c0e:	2200      	movs	r2, #0
 8019c10:	701a      	strb	r2, [r3, #0]
          
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_ADR;
 8019c12:	210c      	movs	r1, #12
 8019c14:	187b      	adds	r3, r7, r1
 8019c16:	2204      	movs	r2, #4
 8019c18:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = AdrEnableInit;
 8019c1a:	4b72      	ldr	r3, [pc, #456]	; (8019de4 <certif_rx+0x2dc>)
 8019c1c:	781a      	ldrb	r2, [r3, #0]
 8019c1e:	187b      	adds	r3, r7, r1
 8019c20:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8019c22:	187b      	adds	r3, r7, r1
 8019c24:	0018      	movs	r0, r3
 8019c26:	f7fa f8b5 	bl	8013d94 <LoRaMacMibSetRequestConfirm>
#if defined( REGION_EU868 ) || defined( REGION_RU864 ) || defined( REGION_CN779 ) || defined( REGION_EU433 )
          LoRaMacTestSetDutyCycleOn( true );
#endif
          
          break;
 8019c2a:	46c0      	nop			; (mov r8, r8)
 8019c2c:	e0c6      	b.n	8019dbc <certif_rx+0x2b4>
        }
        case 1: // (iii, iv)
          certifParam.DataBufferSize = 2;
 8019c2e:	4b6b      	ldr	r3, [pc, #428]	; (8019ddc <certif_rx+0x2d4>)
 8019c30:	2202      	movs	r2, #2
 8019c32:	70da      	strb	r2, [r3, #3]
          break;
 8019c34:	e0c2      	b.n	8019dbc <certif_rx+0x2b4>
        case 2: // Enable confirmed messages (v)
          IsTxConfirmed = LORAWAN_CONFIRMED_MSG;
 8019c36:	4b6a      	ldr	r3, [pc, #424]	; (8019de0 <certif_rx+0x2d8>)
 8019c38:	2201      	movs	r2, #1
 8019c3a:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8019c3c:	4b67      	ldr	r3, [pc, #412]	; (8019ddc <certif_rx+0x2d4>)
 8019c3e:	2201      	movs	r2, #1
 8019c40:	705a      	strb	r2, [r3, #1]
          break;
 8019c42:	e0bb      	b.n	8019dbc <certif_rx+0x2b4>
        case 3:  // Disable confirmed messages (vi)
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8019c44:	4b66      	ldr	r3, [pc, #408]	; (8019de0 <certif_rx+0x2d8>)
 8019c46:	2200      	movs	r2, #0
 8019c48:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8019c4a:	4b64      	ldr	r3, [pc, #400]	; (8019ddc <certif_rx+0x2d4>)
 8019c4c:	2201      	movs	r2, #1
 8019c4e:	705a      	strb	r2, [r3, #1]
          break;
 8019c50:	e0b4      	b.n	8019dbc <certif_rx+0x2b4>
        case 4: // (vii)
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	7b1a      	ldrb	r2, [r3, #12]
 8019c56:	4b61      	ldr	r3, [pc, #388]	; (8019ddc <certif_rx+0x2d4>)
 8019c58:	70da      	strb	r2, [r3, #3]

          certifParam.DataBuffer[0] = 4;
 8019c5a:	4b60      	ldr	r3, [pc, #384]	; (8019ddc <certif_rx+0x2d4>)
 8019c5c:	2204      	movs	r2, #4
 8019c5e:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8019c60:	237f      	movs	r3, #127	; 0x7f
 8019c62:	18fb      	adds	r3, r7, r3
 8019c64:	2201      	movs	r2, #1
 8019c66:	701a      	strb	r2, [r3, #0]
 8019c68:	e013      	b.n	8019c92 <certif_rx+0x18a>
          {
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	689a      	ldr	r2, [r3, #8]
 8019c6e:	207f      	movs	r0, #127	; 0x7f
 8019c70:	183b      	adds	r3, r7, r0
 8019c72:	781b      	ldrb	r3, [r3, #0]
 8019c74:	18d3      	adds	r3, r2, r3
 8019c76:	781a      	ldrb	r2, [r3, #0]
 8019c78:	183b      	adds	r3, r7, r0
 8019c7a:	781b      	ldrb	r3, [r3, #0]
 8019c7c:	3201      	adds	r2, #1
 8019c7e:	b2d1      	uxtb	r1, r2
 8019c80:	4a56      	ldr	r2, [pc, #344]	; (8019ddc <certif_rx+0x2d4>)
 8019c82:	18d3      	adds	r3, r2, r3
 8019c84:	1c0a      	adds	r2, r1, #0
 8019c86:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8019c88:	183b      	adds	r3, r7, r0
 8019c8a:	781a      	ldrb	r2, [r3, #0]
 8019c8c:	183b      	adds	r3, r7, r0
 8019c8e:	3201      	adds	r2, #1
 8019c90:	701a      	strb	r2, [r3, #0]
 8019c92:	4b52      	ldr	r3, [pc, #328]	; (8019ddc <certif_rx+0x2d4>)
 8019c94:	78db      	ldrb	r3, [r3, #3]
 8019c96:	227f      	movs	r2, #127	; 0x7f
 8019c98:	18ba      	adds	r2, r7, r2
 8019c9a:	7812      	ldrb	r2, [r2, #0]
 8019c9c:	429a      	cmp	r2, r3
 8019c9e:	d3e4      	bcc.n	8019c6a <certif_rx+0x162>
          }
          break;
 8019ca0:	e08c      	b.n	8019dbc <certif_rx+0x2b4>
        case 5: // (viii)
        {
          MlmeReq_t mlmeReq;
          mlmeReq.Type = MLME_LINK_CHECK;
 8019ca2:	216c      	movs	r1, #108	; 0x6c
 8019ca4:	187b      	adds	r3, r7, r1
 8019ca6:	2203      	movs	r2, #3
 8019ca8:	701a      	strb	r2, [r3, #0]
          LoRaMacMlmeRequest( &mlmeReq );
 8019caa:	187b      	adds	r3, r7, r1
 8019cac:	0018      	movs	r0, r3
 8019cae:	f7fa fd6b 	bl	8014788 <LoRaMacMlmeRequest>
          break;
 8019cb2:	46c0      	nop			; (mov r8, r8)
 8019cb4:	e082      	b.n	8019dbc <certif_rx+0x2b4>
        {
            MlmeReq_t mlmeReq;

            // Disable TestMode and revert back to normal operation

            certifParam.DownLinkCounter = 0;
 8019cb6:	4b49      	ldr	r3, [pc, #292]	; (8019ddc <certif_rx+0x2d4>)
 8019cb8:	22f6      	movs	r2, #246	; 0xf6
 8019cba:	2100      	movs	r1, #0
 8019cbc:	5299      	strh	r1, [r3, r2]
            certifParam.Running = false;
 8019cbe:	4b47      	ldr	r3, [pc, #284]	; (8019ddc <certif_rx+0x2d4>)
 8019cc0:	2200      	movs	r2, #0
 8019cc2:	701a      	strb	r2, [r3, #0]

            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_ADR;
 8019cc4:	210c      	movs	r1, #12
 8019cc6:	187b      	adds	r3, r7, r1
 8019cc8:	2204      	movs	r2, #4
 8019cca:	701a      	strb	r2, [r3, #0]
            mibReq.Param.AdrEnable = AdrEnableInit;
 8019ccc:	4b45      	ldr	r3, [pc, #276]	; (8019de4 <certif_rx+0x2dc>)
 8019cce:	781a      	ldrb	r2, [r3, #0]
 8019cd0:	187b      	adds	r3, r7, r1
 8019cd2:	711a      	strb	r2, [r3, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8019cd4:	187b      	adds	r3, r7, r1
 8019cd6:	0018      	movs	r0, r3
 8019cd8:	f7fa f85c 	bl	8013d94 <LoRaMacMibSetRequestConfirm>

            mlmeReq.Type = MLME_JOIN;
 8019cdc:	215c      	movs	r1, #92	; 0x5c
 8019cde:	187b      	adds	r3, r7, r1
 8019ce0:	2200      	movs	r2, #0
 8019ce2:	701a      	strb	r2, [r3, #0]
            mlmeReq.Req.Join = *JoinParameters;
 8019ce4:	187b      	adds	r3, r7, r1
 8019ce6:	683a      	ldr	r2, [r7, #0]
 8019ce8:	7812      	ldrb	r2, [r2, #0]
 8019cea:	711a      	strb	r2, [r3, #4]

            LoRaMacMlmeRequest( &mlmeReq );
 8019cec:	187b      	adds	r3, r7, r1
 8019cee:	0018      	movs	r0, r3
 8019cf0:	f7fa fd4a 	bl	8014788 <LoRaMacMlmeRequest>
            break;
 8019cf4:	46c0      	nop			; (mov r8, r8)
 8019cf6:	e061      	b.n	8019dbc <certif_rx+0x2b4>
        }

        case 7: // (x)
        {
          if( mcpsIndication->BufferSize == 3 )
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	7b1b      	ldrb	r3, [r3, #12]
 8019cfc:	2b03      	cmp	r3, #3
 8019cfe:	d118      	bne.n	8019d32 <certif_rx+0x22a>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW;
 8019d00:	214c      	movs	r1, #76	; 0x4c
 8019d02:	187b      	adds	r3, r7, r1
 8019d04:	2204      	movs	r2, #4
 8019d06:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	689b      	ldr	r3, [r3, #8]
 8019d0c:	3301      	adds	r3, #1
 8019d0e:	781b      	ldrb	r3, [r3, #0]
 8019d10:	021b      	lsls	r3, r3, #8
 8019d12:	b21a      	sxth	r2, r3
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	689b      	ldr	r3, [r3, #8]
 8019d18:	3302      	adds	r3, #2
 8019d1a:	781b      	ldrb	r3, [r3, #0]
 8019d1c:	b21b      	sxth	r3, r3
 8019d1e:	4313      	orrs	r3, r2
 8019d20:	b21b      	sxth	r3, r3
 8019d22:	b29a      	uxth	r2, r3
 8019d24:	187b      	adds	r3, r7, r1
 8019d26:	809a      	strh	r2, [r3, #4]
              LoRaMacMlmeRequest( &mlmeReq );
 8019d28:	187b      	adds	r3, r7, r1
 8019d2a:	0018      	movs	r0, r3
 8019d2c:	f7fa fd2c 	bl	8014788 <LoRaMacMlmeRequest>
 8019d30:	e035      	b.n	8019d9e <certif_rx+0x296>
          }
          else if( mcpsIndication->BufferSize == 7 )
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	7b1b      	ldrb	r3, [r3, #12]
 8019d36:	2b07      	cmp	r3, #7
 8019d38:	d131      	bne.n	8019d9e <certif_rx+0x296>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW_1;
 8019d3a:	213c      	movs	r1, #60	; 0x3c
 8019d3c:	187b      	adds	r3, r7, r1
 8019d3e:	2205      	movs	r2, #5
 8019d40:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	689b      	ldr	r3, [r3, #8]
 8019d46:	3301      	adds	r3, #1
 8019d48:	781b      	ldrb	r3, [r3, #0]
 8019d4a:	021b      	lsls	r3, r3, #8
 8019d4c:	b21a      	sxth	r2, r3
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	689b      	ldr	r3, [r3, #8]
 8019d52:	3302      	adds	r3, #2
 8019d54:	781b      	ldrb	r3, [r3, #0]
 8019d56:	b21b      	sxth	r3, r3
 8019d58:	4313      	orrs	r3, r2
 8019d5a:	b21b      	sxth	r3, r3
 8019d5c:	b29a      	uxth	r2, r3
 8019d5e:	187b      	adds	r3, r7, r1
 8019d60:	809a      	strh	r2, [r3, #4]
              mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	689b      	ldr	r3, [r3, #8]
 8019d66:	3303      	adds	r3, #3
 8019d68:	781b      	ldrb	r3, [r3, #0]
 8019d6a:	041a      	lsls	r2, r3, #16
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	689b      	ldr	r3, [r3, #8]
 8019d70:	3304      	adds	r3, #4
 8019d72:	781b      	ldrb	r3, [r3, #0]
 8019d74:	021b      	lsls	r3, r3, #8
 8019d76:	431a      	orrs	r2, r3
 8019d78:	687b      	ldr	r3, [r7, #4]
 8019d7a:	689b      	ldr	r3, [r3, #8]
 8019d7c:	3305      	adds	r3, #5
 8019d7e:	781b      	ldrb	r3, [r3, #0]
 8019d80:	4313      	orrs	r3, r2
 8019d82:	001a      	movs	r2, r3
 8019d84:	2364      	movs	r3, #100	; 0x64
 8019d86:	435a      	muls	r2, r3
 8019d88:	187b      	adds	r3, r7, r1
 8019d8a:	609a      	str	r2, [r3, #8]
              mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	689b      	ldr	r3, [r3, #8]
 8019d90:	799a      	ldrb	r2, [r3, #6]
 8019d92:	187b      	adds	r3, r7, r1
 8019d94:	731a      	strb	r2, [r3, #12]
              LoRaMacMlmeRequest( &mlmeReq );
 8019d96:	187b      	adds	r3, r7, r1
 8019d98:	0018      	movs	r0, r3
 8019d9a:	f7fa fcf5 	bl	8014788 <LoRaMacMlmeRequest>
          }
          certifParam.State = 1;
 8019d9e:	4b0f      	ldr	r3, [pc, #60]	; (8019ddc <certif_rx+0x2d4>)
 8019da0:	2201      	movs	r2, #1
 8019da2:	705a      	strb	r2, [r3, #1]
          break;
 8019da4:	e00a      	b.n	8019dbc <certif_rx+0x2b4>
		
        case 8: // Send DeviceTimeReq
        {
          MlmeReq_t mlmeReq;

          mlmeReq.Type = MLME_DEVICE_TIME;
 8019da6:	212c      	movs	r1, #44	; 0x2c
 8019da8:	187b      	adds	r3, r7, r1
 8019daa:	2209      	movs	r2, #9
 8019dac:	701a      	strb	r2, [r3, #0]

          LoRaMacMlmeRequest( &mlmeReq );
 8019dae:	187b      	adds	r3, r7, r1
 8019db0:	0018      	movs	r0, r3
 8019db2:	f7fa fce9 	bl	8014788 <LoRaMacMlmeRequest>
          break;
 8019db6:	46c0      	nop			; (mov r8, r8)
 8019db8:	e000      	b.n	8019dbc <certif_rx+0x2b4>
          LoRaMacMlmeRequest( &mlmeReq );
          break;
        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:                  
          break;
 8019dba:	46c0      	nop			; (mov r8, r8)
        }
    }
  
    if ( certifParam.Running == false )
 8019dbc:	4b07      	ldr	r3, [pc, #28]	; (8019ddc <certif_rx+0x2d4>)
 8019dbe:	781b      	ldrb	r3, [r3, #0]
 8019dc0:	2201      	movs	r2, #1
 8019dc2:	4053      	eors	r3, r2
 8019dc4:	b2db      	uxtb	r3, r3
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	d003      	beq.n	8019dd2 <certif_rx+0x2ca>
    {
      /*cerification test stops*/
      TimerStop( &CertifTxNextPacketTimer );
 8019dca:	4b08      	ldr	r3, [pc, #32]	; (8019dec <certif_rx+0x2e4>)
 8019dcc:	0018      	movs	r0, r3
 8019dce:	f001 f955 	bl	801b07c <TimerStop>
    }
}
 8019dd2:	46c0      	nop			; (mov r8, r8)
 8019dd4:	46bd      	mov	sp, r7
 8019dd6:	b021      	add	sp, #132	; 0x84
 8019dd8:	bd90      	pop	{r4, r7, pc}
 8019dda:	46c0      	nop			; (mov r8, r8)
 8019ddc:	200011ac 	.word	0x200011ac
 8019de0:	200012a8 	.word	0x200012a8
 8019de4:	200012a9 	.word	0x200012a9
 8019de8:	08019df9 	.word	0x08019df9
 8019dec:	20001194 	.word	0x20001194
 8019df0:	00001388 	.word	0x00001388
 8019df4:	0801d2b4 	.word	0x0801d2b4

08019df8 <OnCertifTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnCertifTxNextPacketTimerEvent( void* context )
{
 8019df8:	b580      	push	{r7, lr}
 8019dfa:	b082      	sub	sp, #8
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	6078      	str	r0, [r7, #4]
    certif_tx( );
 8019e00:	f7ff fde8 	bl	80199d4 <certif_tx>

}
 8019e04:	46c0      	nop			; (mov r8, r8)
 8019e06:	46bd      	mov	sp, r7
 8019e08:	b002      	add	sp, #8
 8019e0a:	bd80      	pop	{r7, pc}

08019e0c <McpsConfirm>:
 *
 * \param   [IN] McpsConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8019e0c:	b580      	push	{r7, lr}
 8019e0e:	b084      	sub	sp, #16
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	6078      	str	r0, [r7, #4]
    TVL2( PRINTNOW(); PRINTF("APP> McpsConfirm STATUS: %s\r\n", EventInfoStatusStrings[mcpsConfirm->Status] ); )
  
    if( mcpsConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	785b      	ldrb	r3, [r3, #1]
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d108      	bne.n	8019e2e <McpsConfirm+0x22>
    {
        switch( mcpsConfirm->McpsRequest )
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	781b      	ldrb	r3, [r3, #0]
 8019e20:	2b01      	cmp	r3, #1
 8019e22:	d006      	beq.n	8019e32 <McpsConfirm+0x26>
 8019e24:	2b03      	cmp	r3, #3
 8019e26:	d006      	beq.n	8019e36 <McpsConfirm+0x2a>
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d006      	beq.n	8019e3a <McpsConfirm+0x2e>
            case MCPS_PROPRIETARY:
            {
                break;
            }
            default:
                break;
 8019e2c:	e006      	b.n	8019e3c <McpsConfirm+0x30>
        }
    }
 8019e2e:	46c0      	nop			; (mov r8, r8)
 8019e30:	e004      	b.n	8019e3c <McpsConfirm+0x30>
                break;
 8019e32:	46c0      	nop			; (mov r8, r8)
 8019e34:	e002      	b.n	8019e3c <McpsConfirm+0x30>
                break;
 8019e36:	46c0      	nop			; (mov r8, r8)
 8019e38:	e000      	b.n	8019e3c <McpsConfirm+0x30>
                break;
 8019e3a:	46c0      	nop			; (mov r8, r8)
    
    /*implicitely desactivated when VERBOSE_LEVEL < 2*/
    TraceUpLinkFrame(mcpsConfirm);
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	0018      	movs	r0, r3
 8019e40:	f000 fbc0 	bl	801a5c4 <TraceUpLinkFrame>
}
 8019e44:	46c0      	nop			; (mov r8, r8)
 8019e46:	46bd      	mov	sp, r7
 8019e48:	b004      	add	sp, #16
 8019e4a:	bd80      	pop	{r7, pc}

08019e4c <McpsIndication>:
 *
 * \param   [IN] mcpsIndication - Pointer to the indication structure,
 *               containing indication attributes.
 */
static void McpsIndication( McpsIndication_t *mcpsIndication )
{
 8019e4c:	b580      	push	{r7, lr}
 8019e4e:	b086      	sub	sp, #24
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	6078      	str	r0, [r7, #4]
    TVL2( PRINTNOW(); PRINTF("APP> McpsInd STATUS: %s\r\n", EventInfoStatusStrings[mcpsIndication->Status] );)
    
    lora_AppData_t AppData;
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	785b      	ldrb	r3, [r3, #1]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d14a      	bne.n	8019ef2 <McpsIndication+0xa6>
    {
        return;
    }

    switch( mcpsIndication->McpsIndication )
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	781b      	ldrb	r3, [r3, #0]
 8019e60:	2b01      	cmp	r3, #1
 8019e62:	d008      	beq.n	8019e76 <McpsIndication+0x2a>
 8019e64:	dc02      	bgt.n	8019e6c <McpsIndication+0x20>
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	d007      	beq.n	8019e7a <McpsIndication+0x2e>
        case MCPS_MULTICAST:
        {
            break;
        }
        default:
            break;
 8019e6a:	e00b      	b.n	8019e84 <McpsIndication+0x38>
    switch( mcpsIndication->McpsIndication )
 8019e6c:	2b02      	cmp	r3, #2
 8019e6e:	d006      	beq.n	8019e7e <McpsIndication+0x32>
 8019e70:	2b03      	cmp	r3, #3
 8019e72:	d006      	beq.n	8019e82 <McpsIndication+0x36>
            break;
 8019e74:	e006      	b.n	8019e84 <McpsIndication+0x38>
            break;
 8019e76:	46c0      	nop			; (mov r8, r8)
 8019e78:	e004      	b.n	8019e84 <McpsIndication+0x38>
            break;
 8019e7a:	46c0      	nop			; (mov r8, r8)
 8019e7c:	e002      	b.n	8019e84 <McpsIndication+0x38>
            break;
 8019e7e:	46c0      	nop			; (mov r8, r8)
 8019e80:	e000      	b.n	8019e84 <McpsIndication+0x38>
            break;
 8019e82:	46c0      	nop			; (mov r8, r8)

    // Check Multicast
    // Check Port
    // Check Datarate
    // Check FramePending
    if( mcpsIndication->FramePending == true )
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	795b      	ldrb	r3, [r3, #5]
 8019e88:	2b01      	cmp	r3, #1
 8019e8a:	d103      	bne.n	8019e94 <McpsIndication+0x48>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        LoRaMainCallbacks->LORA_TxNeeded( );
 8019e8c:	4b1b      	ldr	r3, [pc, #108]	; (8019efc <McpsIndication+0xb0>)
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	69db      	ldr	r3, [r3, #28]
 8019e92:	4798      	blx	r3
    // Check Buffer
    // Check BufferSize
    // Check Rssi
    // Check Snr
    // Check RxSlot
    if (certif_running() == true )
 8019e94:	f7ff fd6c 	bl	8019970 <certif_running>
 8019e98:	1e03      	subs	r3, r0, #0
 8019e9a:	d001      	beq.n	8019ea0 <McpsIndication+0x54>
    {
      certif_DownLinkIncrement( );
 8019e9c:	f7ff fd72 	bl	8019984 <certif_DownLinkIncrement>
    }

    if( mcpsIndication->RxData == true )
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	7b5b      	ldrb	r3, [r3, #13]
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d01e      	beq.n	8019ee6 <McpsIndication+0x9a>
    {
      switch( mcpsIndication->Port )
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	78db      	ldrb	r3, [r3, #3]
 8019eac:	2be0      	cmp	r3, #224	; 0xe0
 8019eae:	d106      	bne.n	8019ebe <McpsIndication+0x72>
      {
        case CERTIF_PORT:
          certif_rx( mcpsIndication, &JoinParameters );
 8019eb0:	4a13      	ldr	r2, [pc, #76]	; (8019f00 <McpsIndication+0xb4>)
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	0011      	movs	r1, r2
 8019eb6:	0018      	movs	r0, r3
 8019eb8:	f7ff fe26 	bl	8019b08 <certif_rx>
          break;
 8019ebc:	e014      	b.n	8019ee8 <McpsIndication+0x9c>
        default:
          
          AppData.Port = mcpsIndication->Port;
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	78da      	ldrb	r2, [r3, #3]
 8019ec2:	2110      	movs	r1, #16
 8019ec4:	187b      	adds	r3, r7, r1
 8019ec6:	715a      	strb	r2, [r3, #5]
          AppData.BuffSize = mcpsIndication->BufferSize;
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	7b1a      	ldrb	r2, [r3, #12]
 8019ecc:	187b      	adds	r3, r7, r1
 8019ece:	711a      	strb	r2, [r3, #4]
          AppData.Buff = mcpsIndication->Buffer;
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	689a      	ldr	r2, [r3, #8]
 8019ed4:	187b      	adds	r3, r7, r1
 8019ed6:	601a      	str	r2, [r3, #0]
        
          LoRaMainCallbacks->LORA_RxData( &AppData );
 8019ed8:	4b08      	ldr	r3, [pc, #32]	; (8019efc <McpsIndication+0xb0>)
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	691b      	ldr	r3, [r3, #16]
 8019ede:	187a      	adds	r2, r7, r1
 8019ee0:	0010      	movs	r0, r2
 8019ee2:	4798      	blx	r3
          break;
 8019ee4:	e000      	b.n	8019ee8 <McpsIndication+0x9c>
      }
    }
 8019ee6:	46c0      	nop			; (mov r8, r8)
    
    /*implicitely desactivated when VERBOSE_LEVEL < 2*/
    TraceDownLinkFrame(mcpsIndication);
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	0018      	movs	r0, r3
 8019eec:	f000 fb94 	bl	801a618 <TraceDownLinkFrame>
 8019ef0:	e000      	b.n	8019ef4 <McpsIndication+0xa8>
        return;
 8019ef2:	46c0      	nop			; (mov r8, r8)
}
 8019ef4:	46bd      	mov	sp, r7
 8019ef6:	b006      	add	sp, #24
 8019ef8:	bd80      	pop	{r7, pc}
 8019efa:	46c0      	nop			; (mov r8, r8)
 8019efc:	200012f4 	.word	0x200012f4
 8019f00:	200012ac 	.word	0x200012ac

08019f04 <MlmeConfirm>:
 *
 * \param   [IN] MlmeConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8019f04:	b580      	push	{r7, lr}
 8019f06:	b084      	sub	sp, #16
 8019f08:	af00      	add	r7, sp, #0
 8019f0a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MlmeConfirm STATUS: %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );)
    
    switch( mlmeConfirm->MlmeRequest )
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	781b      	ldrb	r3, [r3, #0]
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d002      	beq.n	8019f1a <MlmeConfirm+0x16>
 8019f14:	2b03      	cmp	r3, #3
 8019f16:	d00c      	beq.n	8019f32 <MlmeConfirm+0x2e>
            }  
        }              
#endif /* USE_DEVICE_TIMING */
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 8019f18:	e018      	b.n	8019f4c <MlmeConfirm+0x48>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	785b      	ldrb	r3, [r3, #1]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d104      	bne.n	8019f2c <MlmeConfirm+0x28>
              LoRaMainCallbacks->LORA_HasJoined();
 8019f22:	4b0c      	ldr	r3, [pc, #48]	; (8019f54 <MlmeConfirm+0x50>)
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	695b      	ldr	r3, [r3, #20]
 8019f28:	4798      	blx	r3
            break;
 8019f2a:	e00f      	b.n	8019f4c <MlmeConfirm+0x48>
                LORA_Join();
 8019f2c:	f000 f9d0 	bl	801a2d0 <LORA_Join>
            break;
 8019f30:	e00c      	b.n	8019f4c <MlmeConfirm+0x48>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	785b      	ldrb	r3, [r3, #1]
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	d107      	bne.n	8019f4a <MlmeConfirm+0x46>
                if (certif_running() == true )
 8019f3a:	f7ff fd19 	bl	8019970 <certif_running>
 8019f3e:	1e03      	subs	r3, r0, #0
 8019f40:	d003      	beq.n	8019f4a <MlmeConfirm+0x46>
                     certif_linkCheck( mlmeConfirm);
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	0018      	movs	r0, r3
 8019f46:	f7ff fd2d 	bl	80199a4 <certif_linkCheck>
            break;
 8019f4a:	46c0      	nop			; (mov r8, r8)
    }
}
 8019f4c:	46c0      	nop			; (mov r8, r8)
 8019f4e:	46bd      	mov	sp, r7
 8019f50:	b004      	add	sp, #16
 8019f52:	bd80      	pop	{r7, pc}
 8019f54:	200012f4 	.word	0x200012f4

08019f58 <MlmeIndication>:
 * \brief   MLME-Indication event function
 *
 * \param   [IN] MlmeIndication - Pointer to the indication structure.
 */
static void MlmeIndication( MlmeIndication_t *MlmeIndication )
{
 8019f58:	b580      	push	{r7, lr}
 8019f5a:	b084      	sub	sp, #16
 8019f5c:	af00      	add	r7, sp, #0
 8019f5e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MLMEInd STATUS: %s\r\n", EventInfoStatusStrings[MlmeIndication->Status] );    )

    switch( MlmeIndication->MlmeIndication )
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	781b      	ldrb	r3, [r3, #0]
 8019f64:	2b06      	cmp	r3, #6
 8019f66:	d000      	beq.n	8019f6a <MlmeIndication+0x12>
            break;

        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 8019f68:	e004      	b.n	8019f74 <MlmeIndication+0x1c>
            LoRaMainCallbacks->LORA_TxNeeded( );			
 8019f6a:	4b04      	ldr	r3, [pc, #16]	; (8019f7c <MlmeIndication+0x24>)
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	69db      	ldr	r3, [r3, #28]
 8019f70:	4798      	blx	r3
            break;
 8019f72:	46c0      	nop			; (mov r8, r8)
    }
}
 8019f74:	46c0      	nop			; (mov r8, r8)
 8019f76:	46bd      	mov	sp, r7
 8019f78:	b004      	add	sp, #16
 8019f7a:	bd80      	pop	{r7, pc}
 8019f7c:	200012f4 	.word	0x200012f4

08019f80 <LORA_Init>:
/**
 *  lora Init
 */
void LORA_Init (LoRaMainCallback_t *callbacks, LoRaParam_t* LoRaParam )
{
 8019f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f82:	46de      	mov	lr, fp
 8019f84:	4657      	mov	r7, sl
 8019f86:	464e      	mov	r6, r9
 8019f88:	4645      	mov	r5, r8
 8019f8a:	b5e0      	push	{r5, r6, r7, lr}
 8019f8c:	b09b      	sub	sp, #108	; 0x6c
 8019f8e:	af0e      	add	r7, sp, #56	; 0x38
 8019f90:	61f8      	str	r0, [r7, #28]
 8019f92:	61b9      	str	r1, [r7, #24]
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 8019f94:	2310      	movs	r3, #16
 8019f96:	2218      	movs	r2, #24
 8019f98:	4694      	mov	ip, r2
 8019f9a:	44bc      	add	ip, r7
 8019f9c:	4463      	add	r3, ip
 8019f9e:	4ab7      	ldr	r2, [pc, #732]	; (801a27c <LORA_Init+0x2fc>)
 8019fa0:	ca03      	ldmia	r2!, {r0, r1}
 8019fa2:	c303      	stmia	r3!, {r0, r1}
  uint8_t joinEui[] = LORAWAN_JOIN_EUI;
 8019fa4:	2308      	movs	r3, #8
 8019fa6:	2218      	movs	r2, #24
 8019fa8:	4694      	mov	ip, r2
 8019faa:	44bc      	add	ip, r7
 8019fac:	4463      	add	r3, ip
 8019fae:	4ab4      	ldr	r2, [pc, #720]	; (801a280 <LORA_Init+0x300>)
 8019fb0:	ca03      	ldmia	r2!, {r0, r1}
 8019fb2:	c303      	stmia	r3!, {r0, r1}
  
  /* init the Tx Duty Cycle*/
  LoRaParamInit = LoRaParam;
 8019fb4:	4bb3      	ldr	r3, [pc, #716]	; (801a284 <LORA_Init+0x304>)
 8019fb6:	69ba      	ldr	r2, [r7, #24]
 8019fb8:	601a      	str	r2, [r3, #0]
  
  /* init the main call backs*/
  LoRaMainCallbacks = callbacks;
 8019fba:	4bb3      	ldr	r3, [pc, #716]	; (801a288 <LORA_Init+0x308>)
 8019fbc:	69fa      	ldr	r2, [r7, #28]
 8019fbe:	601a      	str	r2, [r3, #0]
  // Random seed initialization
  srand1( LoRaMainCallbacks->BoardGetRandomSeed( ) );
  // Choose a random device address
  DevAddr = randr( 0, 0x01FFFFFF );
#endif
  PPRINTF( "ABP\n\r"); 
 8019fc0:	4bb2      	ldr	r3, [pc, #712]	; (801a28c <LORA_Init+0x30c>)
 8019fc2:	0018      	movs	r0, r3
 8019fc4:	f001 f9ca 	bl	801b35c <TraceSend>
 8019fc8:	1e03      	subs	r3, r0, #0
 8019fca:	d1f9      	bne.n	8019fc0 <LORA_Init+0x40>
  PPRINTF( "DevEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(devEui));
 8019fcc:	2010      	movs	r0, #16
 8019fce:	2518      	movs	r5, #24
 8019fd0:	197b      	adds	r3, r7, r5
 8019fd2:	181b      	adds	r3, r3, r0
 8019fd4:	781b      	ldrb	r3, [r3, #0]
 8019fd6:	001e      	movs	r6, r3
 8019fd8:	197b      	adds	r3, r7, r5
 8019fda:	181b      	adds	r3, r3, r0
 8019fdc:	785b      	ldrb	r3, [r3, #1]
 8019fde:	617b      	str	r3, [r7, #20]
 8019fe0:	197b      	adds	r3, r7, r5
 8019fe2:	181b      	adds	r3, r3, r0
 8019fe4:	789b      	ldrb	r3, [r3, #2]
 8019fe6:	613b      	str	r3, [r7, #16]
 8019fe8:	197b      	adds	r3, r7, r5
 8019fea:	181b      	adds	r3, r3, r0
 8019fec:	78db      	ldrb	r3, [r3, #3]
 8019fee:	001a      	movs	r2, r3
 8019ff0:	197b      	adds	r3, r7, r5
 8019ff2:	181b      	adds	r3, r3, r0
 8019ff4:	791b      	ldrb	r3, [r3, #4]
 8019ff6:	0019      	movs	r1, r3
 8019ff8:	197b      	adds	r3, r7, r5
 8019ffa:	181b      	adds	r3, r3, r0
 8019ffc:	795b      	ldrb	r3, [r3, #5]
 8019ffe:	001c      	movs	r4, r3
 801a000:	002b      	movs	r3, r5
 801a002:	18fd      	adds	r5, r7, r3
 801a004:	182b      	adds	r3, r5, r0
 801a006:	799b      	ldrb	r3, [r3, #6]
 801a008:	001d      	movs	r5, r3
 801a00a:	2318      	movs	r3, #24
 801a00c:	18fb      	adds	r3, r7, r3
 801a00e:	181b      	adds	r3, r3, r0
 801a010:	79db      	ldrb	r3, [r3, #7]
 801a012:	489f      	ldr	r0, [pc, #636]	; (801a290 <LORA_Init+0x310>)
 801a014:	9304      	str	r3, [sp, #16]
 801a016:	9503      	str	r5, [sp, #12]
 801a018:	9402      	str	r4, [sp, #8]
 801a01a:	9101      	str	r1, [sp, #4]
 801a01c:	9200      	str	r2, [sp, #0]
 801a01e:	693b      	ldr	r3, [r7, #16]
 801a020:	697a      	ldr	r2, [r7, #20]
 801a022:	0031      	movs	r1, r6
 801a024:	f001 f99a 	bl	801b35c <TraceSend>
 801a028:	1e03      	subs	r3, r0, #0
 801a02a:	d1cf      	bne.n	8019fcc <LORA_Init+0x4c>
  PPRINTF( "DevAdd=  %08X\n\r", DevAddr) ;
 801a02c:	4b99      	ldr	r3, [pc, #612]	; (801a294 <LORA_Init+0x314>)
 801a02e:	681a      	ldr	r2, [r3, #0]
 801a030:	4b99      	ldr	r3, [pc, #612]	; (801a298 <LORA_Init+0x318>)
 801a032:	0011      	movs	r1, r2
 801a034:	0018      	movs	r0, r3
 801a036:	f001 f991 	bl	801b35c <TraceSend>
 801a03a:	1e03      	subs	r3, r0, #0
 801a03c:	d1f6      	bne.n	801a02c <LORA_Init+0xac>
  PPRINTF( "NwkSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(NwkSEncKey));
 801a03e:	4b97      	ldr	r3, [pc, #604]	; (801a29c <LORA_Init+0x31c>)
 801a040:	781b      	ldrb	r3, [r3, #0]
 801a042:	617b      	str	r3, [r7, #20]
 801a044:	4b95      	ldr	r3, [pc, #596]	; (801a29c <LORA_Init+0x31c>)
 801a046:	785b      	ldrb	r3, [r3, #1]
 801a048:	613b      	str	r3, [r7, #16]
 801a04a:	4b94      	ldr	r3, [pc, #592]	; (801a29c <LORA_Init+0x31c>)
 801a04c:	789b      	ldrb	r3, [r3, #2]
 801a04e:	60fb      	str	r3, [r7, #12]
 801a050:	4b92      	ldr	r3, [pc, #584]	; (801a29c <LORA_Init+0x31c>)
 801a052:	78db      	ldrb	r3, [r3, #3]
 801a054:	001d      	movs	r5, r3
 801a056:	4b91      	ldr	r3, [pc, #580]	; (801a29c <LORA_Init+0x31c>)
 801a058:	791b      	ldrb	r3, [r3, #4]
 801a05a:	001e      	movs	r6, r3
 801a05c:	4b8f      	ldr	r3, [pc, #572]	; (801a29c <LORA_Init+0x31c>)
 801a05e:	795b      	ldrb	r3, [r3, #5]
 801a060:	469c      	mov	ip, r3
 801a062:	4b8e      	ldr	r3, [pc, #568]	; (801a29c <LORA_Init+0x31c>)
 801a064:	799b      	ldrb	r3, [r3, #6]
 801a066:	4698      	mov	r8, r3
 801a068:	4b8c      	ldr	r3, [pc, #560]	; (801a29c <LORA_Init+0x31c>)
 801a06a:	79db      	ldrb	r3, [r3, #7]
 801a06c:	4699      	mov	r9, r3
 801a06e:	4b8b      	ldr	r3, [pc, #556]	; (801a29c <LORA_Init+0x31c>)
 801a070:	7a1b      	ldrb	r3, [r3, #8]
 801a072:	469a      	mov	sl, r3
 801a074:	4b89      	ldr	r3, [pc, #548]	; (801a29c <LORA_Init+0x31c>)
 801a076:	7a5b      	ldrb	r3, [r3, #9]
 801a078:	469b      	mov	fp, r3
 801a07a:	4b88      	ldr	r3, [pc, #544]	; (801a29c <LORA_Init+0x31c>)
 801a07c:	7a9b      	ldrb	r3, [r3, #10]
 801a07e:	60bb      	str	r3, [r7, #8]
 801a080:	4b86      	ldr	r3, [pc, #536]	; (801a29c <LORA_Init+0x31c>)
 801a082:	7adb      	ldrb	r3, [r3, #11]
 801a084:	607b      	str	r3, [r7, #4]
 801a086:	4b85      	ldr	r3, [pc, #532]	; (801a29c <LORA_Init+0x31c>)
 801a088:	7b1b      	ldrb	r3, [r3, #12]
 801a08a:	001c      	movs	r4, r3
 801a08c:	4b83      	ldr	r3, [pc, #524]	; (801a29c <LORA_Init+0x31c>)
 801a08e:	7b5b      	ldrb	r3, [r3, #13]
 801a090:	0019      	movs	r1, r3
 801a092:	4b82      	ldr	r3, [pc, #520]	; (801a29c <LORA_Init+0x31c>)
 801a094:	7b9b      	ldrb	r3, [r3, #14]
 801a096:	001a      	movs	r2, r3
 801a098:	4b80      	ldr	r3, [pc, #512]	; (801a29c <LORA_Init+0x31c>)
 801a09a:	7bdb      	ldrb	r3, [r3, #15]
 801a09c:	4880      	ldr	r0, [pc, #512]	; (801a2a0 <LORA_Init+0x320>)
 801a09e:	930c      	str	r3, [sp, #48]	; 0x30
 801a0a0:	920b      	str	r2, [sp, #44]	; 0x2c
 801a0a2:	910a      	str	r1, [sp, #40]	; 0x28
 801a0a4:	9409      	str	r4, [sp, #36]	; 0x24
 801a0a6:	687c      	ldr	r4, [r7, #4]
 801a0a8:	9408      	str	r4, [sp, #32]
 801a0aa:	68bc      	ldr	r4, [r7, #8]
 801a0ac:	9407      	str	r4, [sp, #28]
 801a0ae:	465c      	mov	r4, fp
 801a0b0:	9406      	str	r4, [sp, #24]
 801a0b2:	4654      	mov	r4, sl
 801a0b4:	9405      	str	r4, [sp, #20]
 801a0b6:	464c      	mov	r4, r9
 801a0b8:	9404      	str	r4, [sp, #16]
 801a0ba:	4644      	mov	r4, r8
 801a0bc:	9403      	str	r4, [sp, #12]
 801a0be:	4664      	mov	r4, ip
 801a0c0:	9402      	str	r4, [sp, #8]
 801a0c2:	9601      	str	r6, [sp, #4]
 801a0c4:	9500      	str	r5, [sp, #0]
 801a0c6:	68fb      	ldr	r3, [r7, #12]
 801a0c8:	693a      	ldr	r2, [r7, #16]
 801a0ca:	6979      	ldr	r1, [r7, #20]
 801a0cc:	f001 f946 	bl	801b35c <TraceSend>
 801a0d0:	1e03      	subs	r3, r0, #0
 801a0d2:	d1b4      	bne.n	801a03e <LORA_Init+0xbe>
  PPRINTF( "AppSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(AppSKey));
 801a0d4:	4b73      	ldr	r3, [pc, #460]	; (801a2a4 <LORA_Init+0x324>)
 801a0d6:	781b      	ldrb	r3, [r3, #0]
 801a0d8:	617b      	str	r3, [r7, #20]
 801a0da:	4b72      	ldr	r3, [pc, #456]	; (801a2a4 <LORA_Init+0x324>)
 801a0dc:	785b      	ldrb	r3, [r3, #1]
 801a0de:	613b      	str	r3, [r7, #16]
 801a0e0:	4b70      	ldr	r3, [pc, #448]	; (801a2a4 <LORA_Init+0x324>)
 801a0e2:	789b      	ldrb	r3, [r3, #2]
 801a0e4:	60fb      	str	r3, [r7, #12]
 801a0e6:	4b6f      	ldr	r3, [pc, #444]	; (801a2a4 <LORA_Init+0x324>)
 801a0e8:	78db      	ldrb	r3, [r3, #3]
 801a0ea:	001d      	movs	r5, r3
 801a0ec:	4b6d      	ldr	r3, [pc, #436]	; (801a2a4 <LORA_Init+0x324>)
 801a0ee:	791b      	ldrb	r3, [r3, #4]
 801a0f0:	001e      	movs	r6, r3
 801a0f2:	4b6c      	ldr	r3, [pc, #432]	; (801a2a4 <LORA_Init+0x324>)
 801a0f4:	795b      	ldrb	r3, [r3, #5]
 801a0f6:	469c      	mov	ip, r3
 801a0f8:	4b6a      	ldr	r3, [pc, #424]	; (801a2a4 <LORA_Init+0x324>)
 801a0fa:	799b      	ldrb	r3, [r3, #6]
 801a0fc:	4698      	mov	r8, r3
 801a0fe:	4b69      	ldr	r3, [pc, #420]	; (801a2a4 <LORA_Init+0x324>)
 801a100:	79db      	ldrb	r3, [r3, #7]
 801a102:	4699      	mov	r9, r3
 801a104:	4b67      	ldr	r3, [pc, #412]	; (801a2a4 <LORA_Init+0x324>)
 801a106:	7a1b      	ldrb	r3, [r3, #8]
 801a108:	469a      	mov	sl, r3
 801a10a:	4b66      	ldr	r3, [pc, #408]	; (801a2a4 <LORA_Init+0x324>)
 801a10c:	7a5b      	ldrb	r3, [r3, #9]
 801a10e:	469b      	mov	fp, r3
 801a110:	4b64      	ldr	r3, [pc, #400]	; (801a2a4 <LORA_Init+0x324>)
 801a112:	7a9b      	ldrb	r3, [r3, #10]
 801a114:	60bb      	str	r3, [r7, #8]
 801a116:	4b63      	ldr	r3, [pc, #396]	; (801a2a4 <LORA_Init+0x324>)
 801a118:	7adb      	ldrb	r3, [r3, #11]
 801a11a:	607b      	str	r3, [r7, #4]
 801a11c:	4b61      	ldr	r3, [pc, #388]	; (801a2a4 <LORA_Init+0x324>)
 801a11e:	7b1b      	ldrb	r3, [r3, #12]
 801a120:	001c      	movs	r4, r3
 801a122:	4b60      	ldr	r3, [pc, #384]	; (801a2a4 <LORA_Init+0x324>)
 801a124:	7b5b      	ldrb	r3, [r3, #13]
 801a126:	0019      	movs	r1, r3
 801a128:	4b5e      	ldr	r3, [pc, #376]	; (801a2a4 <LORA_Init+0x324>)
 801a12a:	7b9b      	ldrb	r3, [r3, #14]
 801a12c:	001a      	movs	r2, r3
 801a12e:	4b5d      	ldr	r3, [pc, #372]	; (801a2a4 <LORA_Init+0x324>)
 801a130:	7bdb      	ldrb	r3, [r3, #15]
 801a132:	485d      	ldr	r0, [pc, #372]	; (801a2a8 <LORA_Init+0x328>)
 801a134:	930c      	str	r3, [sp, #48]	; 0x30
 801a136:	920b      	str	r2, [sp, #44]	; 0x2c
 801a138:	910a      	str	r1, [sp, #40]	; 0x28
 801a13a:	9409      	str	r4, [sp, #36]	; 0x24
 801a13c:	687c      	ldr	r4, [r7, #4]
 801a13e:	9408      	str	r4, [sp, #32]
 801a140:	68bc      	ldr	r4, [r7, #8]
 801a142:	9407      	str	r4, [sp, #28]
 801a144:	465c      	mov	r4, fp
 801a146:	9406      	str	r4, [sp, #24]
 801a148:	4654      	mov	r4, sl
 801a14a:	9405      	str	r4, [sp, #20]
 801a14c:	464c      	mov	r4, r9
 801a14e:	9404      	str	r4, [sp, #16]
 801a150:	4644      	mov	r4, r8
 801a152:	9403      	str	r4, [sp, #12]
 801a154:	4664      	mov	r4, ip
 801a156:	9402      	str	r4, [sp, #8]
 801a158:	9601      	str	r6, [sp, #4]
 801a15a:	9500      	str	r5, [sp, #0]
 801a15c:	68fb      	ldr	r3, [r7, #12]
 801a15e:	693a      	ldr	r2, [r7, #16]
 801a160:	6979      	ldr	r1, [r7, #20]
 801a162:	f001 f8fb 	bl	801b35c <TraceSend>
 801a166:	1e03      	subs	r3, r0, #0
 801a168:	d1b4      	bne.n	801a0d4 <LORA_Init+0x154>
#endif
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 801a16a:	4b50      	ldr	r3, [pc, #320]	; (801a2ac <LORA_Init+0x32c>)
 801a16c:	4a50      	ldr	r2, [pc, #320]	; (801a2b0 <LORA_Init+0x330>)
 801a16e:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 801a170:	4b4e      	ldr	r3, [pc, #312]	; (801a2ac <LORA_Init+0x32c>)
 801a172:	4a50      	ldr	r2, [pc, #320]	; (801a2b4 <LORA_Init+0x334>)
 801a174:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 801a176:	4b4d      	ldr	r3, [pc, #308]	; (801a2ac <LORA_Init+0x32c>)
 801a178:	4a4f      	ldr	r2, [pc, #316]	; (801a2b8 <LORA_Init+0x338>)
 801a17a:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 801a17c:	4b4b      	ldr	r3, [pc, #300]	; (801a2ac <LORA_Init+0x32c>)
 801a17e:	4a4f      	ldr	r2, [pc, #316]	; (801a2bc <LORA_Init+0x33c>)
 801a180:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 801a182:	4b41      	ldr	r3, [pc, #260]	; (801a288 <LORA_Init+0x308>)
 801a184:	681b      	ldr	r3, [r3, #0]
 801a186:	681a      	ldr	r2, [r3, #0]
 801a188:	4b4d      	ldr	r3, [pc, #308]	; (801a2c0 <LORA_Init+0x340>)
 801a18a:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LoRaMainCallbacks->BoardGetTemperatureLevel;
 801a18c:	4b3e      	ldr	r3, [pc, #248]	; (801a288 <LORA_Init+0x308>)
 801a18e:	681b      	ldr	r3, [r3, #0]
 801a190:	685a      	ldr	r2, [r3, #4]
 801a192:	4b4b      	ldr	r3, [pc, #300]	; (801a2c0 <LORA_Init+0x340>)
 801a194:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.MacProcessNotify = LoRaMainCallbacks->MacProcessNotify;
 801a196:	4b3c      	ldr	r3, [pc, #240]	; (801a288 <LORA_Init+0x308>)
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	6a1a      	ldr	r2, [r3, #32]
 801a19c:	4b48      	ldr	r3, [pc, #288]	; (801a2c0 <LORA_Init+0x340>)
 801a19e:	60da      	str	r2, [r3, #12]
#elif defined( REGION_CN779 )
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_CN779 );
#elif defined( REGION_EU433 )
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU433 );
#elif defined( REGION_IN865 )
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_IN865 );
 801a1a0:	4947      	ldr	r1, [pc, #284]	; (801a2c0 <LORA_Init+0x340>)
 801a1a2:	4b42      	ldr	r3, [pc, #264]	; (801a2ac <LORA_Init+0x32c>)
 801a1a4:	2207      	movs	r2, #7
 801a1a6:	0018      	movs	r0, r3
 801a1a8:	f7f9 f834 	bl	8013214 <LoRaMacInitialization>
  mibReq.Param.ChannelsDefaultMask = channelMask;
  LoRaMacMibSetRequestConfirm( &mibReq );
#endif
#endif

  mibReq.Type = MIB_DEV_EUI;
 801a1ac:	4b45      	ldr	r3, [pc, #276]	; (801a2c4 <LORA_Init+0x344>)
 801a1ae:	2202      	movs	r2, #2
 801a1b0:	701a      	strb	r2, [r3, #0]
  mibReq.Param.DevEui = devEui;
 801a1b2:	4b44      	ldr	r3, [pc, #272]	; (801a2c4 <LORA_Init+0x344>)
 801a1b4:	2210      	movs	r2, #16
 801a1b6:	2118      	movs	r1, #24
 801a1b8:	468c      	mov	ip, r1
 801a1ba:	44bc      	add	ip, r7
 801a1bc:	4462      	add	r2, ip
 801a1be:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801a1c0:	4b40      	ldr	r3, [pc, #256]	; (801a2c4 <LORA_Init+0x344>)
 801a1c2:	0018      	movs	r0, r3
 801a1c4:	f7f9 fde6 	bl	8013d94 <LoRaMacMibSetRequestConfirm>
  
  mibReq.Type = MIB_JOIN_EUI;
 801a1c8:	4b3e      	ldr	r3, [pc, #248]	; (801a2c4 <LORA_Init+0x344>)
 801a1ca:	2203      	movs	r2, #3
 801a1cc:	701a      	strb	r2, [r3, #0]
  mibReq.Param.JoinEui = joinEui;
 801a1ce:	4b3d      	ldr	r3, [pc, #244]	; (801a2c4 <LORA_Init+0x344>)
 801a1d0:	2208      	movs	r2, #8
 801a1d2:	2118      	movs	r1, #24
 801a1d4:	468c      	mov	ip, r1
 801a1d6:	44bc      	add	ip, r7
 801a1d8:	4462      	add	r2, ip
 801a1da:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801a1dc:	4b39      	ldr	r3, [pc, #228]	; (801a2c4 <LORA_Init+0x344>)
 801a1de:	0018      	movs	r0, r3
 801a1e0:	f7f9 fdd8 	bl	8013d94 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_ADR;
 801a1e4:	4b37      	ldr	r3, [pc, #220]	; (801a2c4 <LORA_Init+0x344>)
 801a1e6:	2204      	movs	r2, #4
 801a1e8:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 801a1ea:	4b26      	ldr	r3, [pc, #152]	; (801a284 <LORA_Init+0x304>)
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	781a      	ldrb	r2, [r3, #0]
 801a1f0:	4b34      	ldr	r3, [pc, #208]	; (801a2c4 <LORA_Init+0x344>)
 801a1f2:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801a1f4:	4b33      	ldr	r3, [pc, #204]	; (801a2c4 <LORA_Init+0x344>)
 801a1f6:	0018      	movs	r0, r3
 801a1f8:	f7f9 fdcc 	bl	8013d94 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_PUBLIC_NETWORK;
 801a1fc:	4b31      	ldr	r3, [pc, #196]	; (801a2c4 <LORA_Init+0x344>)
 801a1fe:	221d      	movs	r2, #29
 801a200:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 801a202:	4b20      	ldr	r3, [pc, #128]	; (801a284 <LORA_Init+0x304>)
 801a204:	681b      	ldr	r3, [r3, #0]
 801a206:	789a      	ldrb	r2, [r3, #2]
 801a208:	4b2e      	ldr	r3, [pc, #184]	; (801a2c4 <LORA_Init+0x344>)
 801a20a:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801a20c:	4b2d      	ldr	r3, [pc, #180]	; (801a2c4 <LORA_Init+0x344>)
 801a20e:	0018      	movs	r0, r3
 801a210:	f7f9 fdc0 	bl	8013d94 <LoRaMacMibSetRequestConfirm>
  
  mibReq.Type = MIB_APP_KEY;
 801a214:	4b2b      	ldr	r3, [pc, #172]	; (801a2c4 <LORA_Init+0x344>)
 801a216:	2208      	movs	r2, #8
 801a218:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AppKey = AppKey;
 801a21a:	4b2a      	ldr	r3, [pc, #168]	; (801a2c4 <LORA_Init+0x344>)
 801a21c:	4a2a      	ldr	r2, [pc, #168]	; (801a2c8 <LORA_Init+0x348>)
 801a21e:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801a220:	4b28      	ldr	r3, [pc, #160]	; (801a2c4 <LORA_Init+0x344>)
 801a222:	0018      	movs	r0, r3
 801a224:	f7f9 fdb6 	bl	8013d94 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_NWK_KEY;
 801a228:	4b26      	ldr	r3, [pc, #152]	; (801a2c4 <LORA_Init+0x344>)
 801a22a:	2209      	movs	r2, #9
 801a22c:	701a      	strb	r2, [r3, #0]
  mibReq.Param.NwkKey = NwkKey;
 801a22e:	4b25      	ldr	r3, [pc, #148]	; (801a2c4 <LORA_Init+0x344>)
 801a230:	4a26      	ldr	r2, [pc, #152]	; (801a2cc <LORA_Init+0x34c>)
 801a232:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801a234:	4b23      	ldr	r3, [pc, #140]	; (801a2c4 <LORA_Init+0x344>)
 801a236:	0018      	movs	r0, r3
 801a238:	f7f9 fdac 	bl	8013d94 <LoRaMacMibSetRequestConfirm>
                      
  mibReq.Type = MIB_DEVICE_CLASS;
 801a23c:	4b21      	ldr	r3, [pc, #132]	; (801a2c4 <LORA_Init+0x344>)
 801a23e:	2200      	movs	r2, #0
 801a240:	701a      	strb	r2, [r3, #0]
  mibReq.Param.Class= CLASS_A;
 801a242:	4b20      	ldr	r3, [pc, #128]	; (801a2c4 <LORA_Init+0x344>)
 801a244:	2200      	movs	r2, #0
 801a246:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801a248:	4b1e      	ldr	r3, [pc, #120]	; (801a2c4 <LORA_Init+0x344>)
 801a24a:	0018      	movs	r0, r3
 801a24c:	f7f9 fda2 	bl	8013d94 <LoRaMacMibSetRequestConfirm>

#if defined( REGION_EU868 ) || defined( REGION_RU864 ) || defined( REGION_CN779 ) || defined( REGION_EU433 )
  LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
#endif
      
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 801a250:	4b1c      	ldr	r3, [pc, #112]	; (801a2c4 <LORA_Init+0x344>)
 801a252:	2230      	movs	r2, #48	; 0x30
 801a254:	701a      	strb	r2, [r3, #0]
  mibReq.Param.SystemMaxRxError = 20;
 801a256:	4b1b      	ldr	r3, [pc, #108]	; (801a2c4 <LORA_Init+0x344>)
 801a258:	2214      	movs	r2, #20
 801a25a:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801a25c:	4b19      	ldr	r3, [pc, #100]	; (801a2c4 <LORA_Init+0x344>)
 801a25e:	0018      	movs	r0, r3
 801a260:	f7f9 fd98 	bl	8013d94 <LoRaMacMibSetRequestConfirm>

  /*set Mac statein Idle*/
  LoRaMacStart( );
 801a264:	f7f9 fb7e 	bl	8013964 <LoRaMacStart>
}
 801a268:	46c0      	nop			; (mov r8, r8)
 801a26a:	46bd      	mov	sp, r7
 801a26c:	b00d      	add	sp, #52	; 0x34
 801a26e:	bc3c      	pop	{r2, r3, r4, r5}
 801a270:	4690      	mov	r8, r2
 801a272:	4699      	mov	r9, r3
 801a274:	46a2      	mov	sl, r4
 801a276:	46ab      	mov	fp, r5
 801a278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a27a:	46c0      	nop			; (mov r8, r8)
 801a27c:	0801c7e8 	.word	0x0801c7e8
 801a280:	0801c7f0 	.word	0x0801c7f0
 801a284:	200012b0 	.word	0x200012b0
 801a288:	200012f4 	.word	0x200012f4
 801a28c:	0801c6e4 	.word	0x0801c6e4
 801a290:	0801c6ec 	.word	0x0801c6ec
 801a294:	200000e8 	.word	0x200000e8
 801a298:	0801c720 	.word	0x0801c720
 801a29c:	200000c8 	.word	0x200000c8
 801a2a0:	0801c730 	.word	0x0801c730
 801a2a4:	200000d8 	.word	0x200000d8
 801a2a8:	0801c78c 	.word	0x0801c78c
 801a2ac:	200012b4 	.word	0x200012b4
 801a2b0:	08019e0d 	.word	0x08019e0d
 801a2b4:	08019e4d 	.word	0x08019e4d
 801a2b8:	08019f05 	.word	0x08019f05
 801a2bc:	08019f59 	.word	0x08019f59
 801a2c0:	200012c4 	.word	0x200012c4
 801a2c4:	200012d4 	.word	0x200012d4
 801a2c8:	20000088 	.word	0x20000088
 801a2cc:	20000098 	.word	0x20000098

0801a2d0 <LORA_Join>:


void LORA_Join( void)
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	b086      	sub	sp, #24
 801a2d4:	af00      	add	r7, sp, #0
    MlmeReq_t mlmeReq;
  
    mlmeReq.Type = MLME_JOIN;
 801a2d6:	2108      	movs	r1, #8
 801a2d8:	187b      	adds	r3, r7, r1
 801a2da:	2200      	movs	r2, #0
 801a2dc:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.Datarate = LoRaParamInit->TxDatarate;
 801a2de:	4b38      	ldr	r3, [pc, #224]	; (801a3c0 <LORA_Join+0xf0>)
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	785b      	ldrb	r3, [r3, #1]
 801a2e4:	b25b      	sxtb	r3, r3
 801a2e6:	b2da      	uxtb	r2, r3
 801a2e8:	187b      	adds	r3, r7, r1
 801a2ea:	711a      	strb	r2, [r3, #4]
  
    JoinParameters = mlmeReq.Req.Join;
 801a2ec:	4b35      	ldr	r3, [pc, #212]	; (801a3c4 <LORA_Join+0xf4>)
 801a2ee:	187a      	adds	r2, r7, r1
 801a2f0:	7912      	ldrb	r2, [r2, #4]
 801a2f2:	701a      	strb	r2, [r3, #0]

#if( OVER_THE_AIR_ACTIVATION != 0 )
    LoRaMacMlmeRequest( &mlmeReq );
#else
    mibReq.Type = MIB_NET_ID;
 801a2f4:	4b34      	ldr	r3, [pc, #208]	; (801a3c8 <LORA_Join+0xf8>)
 801a2f6:	2205      	movs	r2, #5
 801a2f8:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 801a2fa:	4b33      	ldr	r3, [pc, #204]	; (801a3c8 <LORA_Join+0xf8>)
 801a2fc:	2200      	movs	r2, #0
 801a2fe:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801a300:	4b31      	ldr	r3, [pc, #196]	; (801a3c8 <LORA_Join+0xf8>)
 801a302:	0018      	movs	r0, r3
 801a304:	f7f9 fd46 	bl	8013d94 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_ADDR;
 801a308:	4b2f      	ldr	r3, [pc, #188]	; (801a3c8 <LORA_Join+0xf8>)
 801a30a:	2206      	movs	r2, #6
 801a30c:	701a      	strb	r2, [r3, #0]
    mibReq.Param.DevAddr = DevAddr;
 801a30e:	4b2f      	ldr	r3, [pc, #188]	; (801a3cc <LORA_Join+0xfc>)
 801a310:	681a      	ldr	r2, [r3, #0]
 801a312:	4b2d      	ldr	r3, [pc, #180]	; (801a3c8 <LORA_Join+0xf8>)
 801a314:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801a316:	4b2c      	ldr	r3, [pc, #176]	; (801a3c8 <LORA_Join+0xf8>)
 801a318:	0018      	movs	r0, r3
 801a31a:	f7f9 fd3b 	bl	8013d94 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_F_NWK_S_INT_KEY;
 801a31e:	4b2a      	ldr	r3, [pc, #168]	; (801a3c8 <LORA_Join+0xf8>)
 801a320:	220c      	movs	r2, #12
 801a322:	701a      	strb	r2, [r3, #0]
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 801a324:	4b28      	ldr	r3, [pc, #160]	; (801a3c8 <LORA_Join+0xf8>)
 801a326:	4a2a      	ldr	r2, [pc, #168]	; (801a3d0 <LORA_Join+0x100>)
 801a328:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801a32a:	4b27      	ldr	r3, [pc, #156]	; (801a3c8 <LORA_Join+0xf8>)
 801a32c:	0018      	movs	r0, r3
 801a32e:	f7f9 fd31 	bl	8013d94 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_S_NWK_S_INT_KEY;
 801a332:	4b25      	ldr	r3, [pc, #148]	; (801a3c8 <LORA_Join+0xf8>)
 801a334:	220d      	movs	r2, #13
 801a336:	701a      	strb	r2, [r3, #0]
    mibReq.Param.SNwkSIntKey = SNwkSIntKey;
 801a338:	4b23      	ldr	r3, [pc, #140]	; (801a3c8 <LORA_Join+0xf8>)
 801a33a:	4a26      	ldr	r2, [pc, #152]	; (801a3d4 <LORA_Join+0x104>)
 801a33c:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801a33e:	4b22      	ldr	r3, [pc, #136]	; (801a3c8 <LORA_Join+0xf8>)
 801a340:	0018      	movs	r0, r3
 801a342:	f7f9 fd27 	bl	8013d94 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NWK_S_ENC_KEY;
 801a346:	4b20      	ldr	r3, [pc, #128]	; (801a3c8 <LORA_Join+0xf8>)
 801a348:	220e      	movs	r2, #14
 801a34a:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NwkSEncKey = NwkSEncKey;
 801a34c:	4b1e      	ldr	r3, [pc, #120]	; (801a3c8 <LORA_Join+0xf8>)
 801a34e:	4a22      	ldr	r2, [pc, #136]	; (801a3d8 <LORA_Join+0x108>)
 801a350:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801a352:	4b1d      	ldr	r3, [pc, #116]	; (801a3c8 <LORA_Join+0xf8>)
 801a354:	0018      	movs	r0, r3
 801a356:	f7f9 fd1d 	bl	8013d94 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_APP_S_KEY;
 801a35a:	4b1b      	ldr	r3, [pc, #108]	; (801a3c8 <LORA_Join+0xf8>)
 801a35c:	220f      	movs	r2, #15
 801a35e:	701a      	strb	r2, [r3, #0]
    mibReq.Param.AppSKey = AppSKey;
 801a360:	4b19      	ldr	r3, [pc, #100]	; (801a3c8 <LORA_Join+0xf8>)
 801a362:	4a1e      	ldr	r2, [pc, #120]	; (801a3dc <LORA_Join+0x10c>)
 801a364:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801a366:	4b18      	ldr	r3, [pc, #96]	; (801a3c8 <LORA_Join+0xf8>)
 801a368:	0018      	movs	r0, r3
 801a36a:	f7f9 fd13 	bl	8013d94 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 801a36e:	4b16      	ldr	r3, [pc, #88]	; (801a3c8 <LORA_Join+0xf8>)
 801a370:	2201      	movs	r2, #1
 801a372:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 801a374:	4b14      	ldr	r3, [pc, #80]	; (801a3c8 <LORA_Join+0xf8>)
 801a376:	2201      	movs	r2, #1
 801a378:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801a37a:	4b13      	ldr	r3, [pc, #76]	; (801a3c8 <LORA_Join+0xf8>)
 801a37c:	0018      	movs	r0, r3
 801a37e:	f7f9 fd09 	bl	8013d94 <LoRaMacMibSetRequestConfirm>
    
    // Enable legacy mode to operate according to LoRaWAN Spec. 1.0.3
    Version_t abpLrWanVersion;

    abpLrWanVersion.Fields.Major    = 1;
 801a382:	1d3b      	adds	r3, r7, #4
 801a384:	2201      	movs	r2, #1
 801a386:	70da      	strb	r2, [r3, #3]
    abpLrWanVersion.Fields.Minor    = 0;
 801a388:	1d3b      	adds	r3, r7, #4
 801a38a:	2200      	movs	r2, #0
 801a38c:	709a      	strb	r2, [r3, #2]
    abpLrWanVersion.Fields.Revision = 3;
 801a38e:	1d3b      	adds	r3, r7, #4
 801a390:	2203      	movs	r2, #3
 801a392:	705a      	strb	r2, [r3, #1]
    abpLrWanVersion.Fields.Rfu      = 0;
 801a394:	1d3b      	adds	r3, r7, #4
 801a396:	2200      	movs	r2, #0
 801a398:	701a      	strb	r2, [r3, #0]

    mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 801a39a:	4b0b      	ldr	r3, [pc, #44]	; (801a3c8 <LORA_Join+0xf8>)
 801a39c:	2235      	movs	r2, #53	; 0x35
 801a39e:	701a      	strb	r2, [r3, #0]
    mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
 801a3a0:	4b09      	ldr	r3, [pc, #36]	; (801a3c8 <LORA_Join+0xf8>)
 801a3a2:	687a      	ldr	r2, [r7, #4]
 801a3a4:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801a3a6:	4b08      	ldr	r3, [pc, #32]	; (801a3c8 <LORA_Join+0xf8>)
 801a3a8:	0018      	movs	r0, r3
 801a3aa:	f7f9 fcf3 	bl	8013d94 <LoRaMacMibSetRequestConfirm>

    LoRaMainCallbacks->LORA_HasJoined();
 801a3ae:	4b0c      	ldr	r3, [pc, #48]	; (801a3e0 <LORA_Join+0x110>)
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	695b      	ldr	r3, [r3, #20]
 801a3b4:	4798      	blx	r3
#endif
}
 801a3b6:	46c0      	nop			; (mov r8, r8)
 801a3b8:	46bd      	mov	sp, r7
 801a3ba:	b006      	add	sp, #24
 801a3bc:	bd80      	pop	{r7, pc}
 801a3be:	46c0      	nop			; (mov r8, r8)
 801a3c0:	200012b0 	.word	0x200012b0
 801a3c4:	200012ac 	.word	0x200012ac
 801a3c8:	200012d4 	.word	0x200012d4
 801a3cc:	200000e8 	.word	0x200000e8
 801a3d0:	200000a8 	.word	0x200000a8
 801a3d4:	200000b8 	.word	0x200000b8
 801a3d8:	200000c8 	.word	0x200000c8
 801a3dc:	200000d8 	.word	0x200000d8
 801a3e0:	200012f4 	.word	0x200012f4

0801a3e4 <LORA_JoinStatus>:

LoraFlagStatus LORA_JoinStatus( void)
{
 801a3e4:	b580      	push	{r7, lr}
 801a3e6:	b088      	sub	sp, #32
 801a3e8:	af00      	add	r7, sp, #0
  MibRequestConfirm_t mibReq;

  mibReq.Type = MIB_NETWORK_ACTIVATION;
 801a3ea:	003b      	movs	r3, r7
 801a3ec:	2201      	movs	r2, #1
 801a3ee:	701a      	strb	r2, [r3, #0]
  
  LoRaMacMibGetRequestConfirm( &mibReq );
 801a3f0:	003b      	movs	r3, r7
 801a3f2:	0018      	movs	r0, r3
 801a3f4:	f7f9 fb72 	bl	8013adc <LoRaMacMibGetRequestConfirm>

  if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 801a3f8:	003b      	movs	r3, r7
 801a3fa:	791b      	ldrb	r3, [r3, #4]
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d101      	bne.n	801a404 <LORA_JoinStatus+0x20>
  {
    return LORA_RESET;
 801a400:	2300      	movs	r3, #0
 801a402:	e000      	b.n	801a406 <LORA_JoinStatus+0x22>
  }
  else
  {
    return LORA_SET;
 801a404:	2301      	movs	r3, #1
  }
}
 801a406:	0018      	movs	r0, r3
 801a408:	46bd      	mov	sp, r7
 801a40a:	b008      	add	sp, #32
 801a40c:	bd80      	pop	{r7, pc}
	...

0801a410 <LORA_send>:



bool LORA_send(lora_AppData_t* AppData, LoraConfirm_t IsTxConfirmed)
{
 801a410:	b580      	push	{r7, lr}
 801a412:	b088      	sub	sp, #32
 801a414:	af00      	add	r7, sp, #0
 801a416:	6078      	str	r0, [r7, #4]
 801a418:	000a      	movs	r2, r1
 801a41a:	1cfb      	adds	r3, r7, #3
 801a41c:	701a      	strb	r2, [r3, #0]
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;
  
    /*if certification test are on going, application data is not sent*/
    if (certif_running() == true)
 801a41e:	f7ff faa7 	bl	8019970 <certif_running>
 801a422:	1e03      	subs	r3, r0, #0
 801a424:	d001      	beq.n	801a42a <LORA_send+0x1a>
    {
      return false;
 801a426:	2300      	movs	r3, #0
 801a428:	e05a      	b.n	801a4e0 <LORA_send+0xd0>
    }
    
    if( LoRaMacQueryTxPossible( AppData->BuffSize, &txInfo ) != LORAMAC_STATUS_OK )
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	791b      	ldrb	r3, [r3, #4]
 801a42e:	220c      	movs	r2, #12
 801a430:	18ba      	adds	r2, r7, r2
 801a432:	0011      	movs	r1, r2
 801a434:	0018      	movs	r0, r3
 801a436:	f7f9 faa3 	bl	8013980 <LoRaMacQueryTxPossible>
 801a43a:	1e03      	subs	r3, r0, #0
 801a43c:	d010      	beq.n	801a460 <LORA_send+0x50>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 801a43e:	2110      	movs	r1, #16
 801a440:	187b      	adds	r3, r7, r1
 801a442:	2200      	movs	r2, #0
 801a444:	701a      	strb	r2, [r3, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 801a446:	187b      	adds	r3, r7, r1
 801a448:	2200      	movs	r2, #0
 801a44a:	609a      	str	r2, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 801a44c:	187b      	adds	r3, r7, r1
 801a44e:	2200      	movs	r2, #0
 801a450:	819a      	strh	r2, [r3, #12]
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 801a452:	4b25      	ldr	r3, [pc, #148]	; (801a4e8 <LORA_send+0xd8>)
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	2201      	movs	r2, #1
 801a458:	569a      	ldrsb	r2, [r3, r2]
 801a45a:	187b      	adds	r3, r7, r1
 801a45c:	739a      	strb	r2, [r3, #14]
 801a45e:	e035      	b.n	801a4cc <LORA_send+0xbc>
    }
    else
    {
        if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 801a460:	1cfb      	adds	r3, r7, #3
 801a462:	781b      	ldrb	r3, [r3, #0]
 801a464:	2b00      	cmp	r3, #0
 801a466:	d117      	bne.n	801a498 <LORA_send+0x88>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 801a468:	2110      	movs	r1, #16
 801a46a:	187b      	adds	r3, r7, r1
 801a46c:	2200      	movs	r2, #0
 801a46e:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = AppData->Port;
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	795a      	ldrb	r2, [r3, #5]
 801a474:	187b      	adds	r3, r7, r1
 801a476:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppData->BuffSize;
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	791b      	ldrb	r3, [r3, #4]
 801a47c:	b29a      	uxth	r2, r3
 801a47e:	187b      	adds	r3, r7, r1
 801a480:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Unconfirmed.fBuffer = AppData->Buff;
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	681a      	ldr	r2, [r3, #0]
 801a486:	187b      	adds	r3, r7, r1
 801a488:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 801a48a:	4b17      	ldr	r3, [pc, #92]	; (801a4e8 <LORA_send+0xd8>)
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	2201      	movs	r2, #1
 801a490:	569a      	ldrsb	r2, [r3, r2]
 801a492:	187b      	adds	r3, r7, r1
 801a494:	739a      	strb	r2, [r3, #14]
 801a496:	e019      	b.n	801a4cc <LORA_send+0xbc>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 801a498:	2110      	movs	r1, #16
 801a49a:	187b      	adds	r3, r7, r1
 801a49c:	2201      	movs	r2, #1
 801a49e:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Confirmed.fPort = AppData->Port;
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	795a      	ldrb	r2, [r3, #5]
 801a4a4:	187b      	adds	r3, r7, r1
 801a4a6:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Confirmed.fBufferSize = AppData->BuffSize;
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	791b      	ldrb	r3, [r3, #4]
 801a4ac:	b29a      	uxth	r2, r3
 801a4ae:	187b      	adds	r3, r7, r1
 801a4b0:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Confirmed.fBuffer = AppData->Buff;
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	681a      	ldr	r2, [r3, #0]
 801a4b6:	187b      	adds	r3, r7, r1
 801a4b8:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 801a4ba:	187b      	adds	r3, r7, r1
 801a4bc:	2208      	movs	r2, #8
 801a4be:	73da      	strb	r2, [r3, #15]
            mcpsReq.Req.Confirmed.Datarate = LoRaParamInit->TxDatarate;
 801a4c0:	4b09      	ldr	r3, [pc, #36]	; (801a4e8 <LORA_send+0xd8>)
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	2201      	movs	r2, #1
 801a4c6:	569a      	ldrsb	r2, [r3, r2]
 801a4c8:	187b      	adds	r3, r7, r1
 801a4ca:	739a      	strb	r2, [r3, #14]
        }
    }
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 801a4cc:	2310      	movs	r3, #16
 801a4ce:	18fb      	adds	r3, r7, r3
 801a4d0:	0018      	movs	r0, r3
 801a4d2:	f7fa fab1 	bl	8014a38 <LoRaMacMcpsRequest>
 801a4d6:	1e03      	subs	r3, r0, #0
 801a4d8:	d101      	bne.n	801a4de <LORA_send+0xce>
    {
        return false;
 801a4da:	2300      	movs	r3, #0
 801a4dc:	e000      	b.n	801a4e0 <LORA_send+0xd0>
    }
    return true;
 801a4de:	2301      	movs	r3, #1
}  
 801a4e0:	0018      	movs	r0, r3
 801a4e2:	46bd      	mov	sp, r7
 801a4e4:	b008      	add	sp, #32
 801a4e6:	bd80      	pop	{r7, pc}
 801a4e8:	200012b0 	.word	0x200012b0

0801a4ec <LORA_RequestClass>:
  }
}
#endif /* LORAMAC_CLASSB_ENABLED */

LoraErrorStatus LORA_RequestClass( DeviceClass_t newClass )
{
 801a4ec:	b590      	push	{r4, r7, lr}
 801a4ee:	b08d      	sub	sp, #52	; 0x34
 801a4f0:	af00      	add	r7, sp, #0
 801a4f2:	0002      	movs	r2, r0
 801a4f4:	1dfb      	adds	r3, r7, #7
 801a4f6:	701a      	strb	r2, [r3, #0]
  LoraErrorStatus Errorstatus = LORA_SUCCESS;
 801a4f8:	232f      	movs	r3, #47	; 0x2f
 801a4fa:	18fb      	adds	r3, r7, r3
 801a4fc:	2200      	movs	r2, #0
 801a4fe:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;
  DeviceClass_t currentClass;
  
  mibReq.Type = MIB_DEVICE_CLASS;
 801a500:	240c      	movs	r4, #12
 801a502:	193b      	adds	r3, r7, r4
 801a504:	2200      	movs	r2, #0
 801a506:	701a      	strb	r2, [r3, #0]
  LoRaMacMibGetRequestConfirm( &mibReq );
 801a508:	193b      	adds	r3, r7, r4
 801a50a:	0018      	movs	r0, r3
 801a50c:	f7f9 fae6 	bl	8013adc <LoRaMacMibGetRequestConfirm>
  
  currentClass = mibReq.Param.Class;
 801a510:	212e      	movs	r1, #46	; 0x2e
 801a512:	187b      	adds	r3, r7, r1
 801a514:	193a      	adds	r2, r7, r4
 801a516:	7912      	ldrb	r2, [r2, #4]
 801a518:	701a      	strb	r2, [r3, #0]
  /*attempt to swicth only if class update*/
  if (currentClass != newClass)
 801a51a:	187a      	adds	r2, r7, r1
 801a51c:	1dfb      	adds	r3, r7, #7
 801a51e:	7812      	ldrb	r2, [r2, #0]
 801a520:	781b      	ldrb	r3, [r3, #0]
 801a522:	429a      	cmp	r2, r3
 801a524:	d040      	beq.n	801a5a8 <LORA_RequestClass+0xbc>
  {
    switch (newClass)
 801a526:	1dfb      	adds	r3, r7, #7
 801a528:	781b      	ldrb	r3, [r3, #0]
 801a52a:	2b01      	cmp	r3, #1
 801a52c:	d019      	beq.n	801a562 <LORA_RequestClass+0x76>
 801a52e:	2b02      	cmp	r3, #2
 801a530:	d01c      	beq.n	801a56c <LORA_RequestClass+0x80>
 801a532:	2b00      	cmp	r3, #0
 801a534:	d000      	beq.n	801a538 <LORA_RequestClass+0x4c>
            Errorstatus = LORA_ERROR;
        }
        break;
      }
      default:
        break;
 801a536:	e038      	b.n	801a5aa <LORA_RequestClass+0xbe>
        mibReq.Param.Class = CLASS_A;
 801a538:	210c      	movs	r1, #12
 801a53a:	187b      	adds	r3, r7, r1
 801a53c:	2200      	movs	r2, #0
 801a53e:	711a      	strb	r2, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 801a540:	187b      	adds	r3, r7, r1
 801a542:	0018      	movs	r0, r3
 801a544:	f7f9 fc26 	bl	8013d94 <LoRaMacMibSetRequestConfirm>
 801a548:	1e03      	subs	r3, r0, #0
 801a54a:	d105      	bne.n	801a558 <LORA_RequestClass+0x6c>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_A);
 801a54c:	4b1b      	ldr	r3, [pc, #108]	; (801a5bc <LORA_RequestClass+0xd0>)
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	699b      	ldr	r3, [r3, #24]
 801a552:	2000      	movs	r0, #0
 801a554:	4798      	blx	r3
        break;
 801a556:	e028      	b.n	801a5aa <LORA_RequestClass+0xbe>
          Errorstatus = LORA_ERROR;
 801a558:	232f      	movs	r3, #47	; 0x2f
 801a55a:	18fb      	adds	r3, r7, r3
 801a55c:	22ff      	movs	r2, #255	; 0xff
 801a55e:	701a      	strb	r2, [r3, #0]
        break;
 801a560:	e023      	b.n	801a5aa <LORA_RequestClass+0xbe>
        PRINTF( "warning: LORAMAC_CLASSB_ENABLED has not been defined at compilation\n\r");
 801a562:	4b17      	ldr	r3, [pc, #92]	; (801a5c0 <LORA_RequestClass+0xd4>)
 801a564:	0018      	movs	r0, r3
 801a566:	f000 fef9 	bl	801b35c <TraceSend>
        break;
 801a56a:	e01e      	b.n	801a5aa <LORA_RequestClass+0xbe>
        if (currentClass != CLASS_A)
 801a56c:	232e      	movs	r3, #46	; 0x2e
 801a56e:	18fb      	adds	r3, r7, r3
 801a570:	781b      	ldrb	r3, [r3, #0]
 801a572:	2b00      	cmp	r3, #0
 801a574:	d003      	beq.n	801a57e <LORA_RequestClass+0x92>
          Errorstatus = LORA_ERROR;
 801a576:	232f      	movs	r3, #47	; 0x2f
 801a578:	18fb      	adds	r3, r7, r3
 801a57a:	22ff      	movs	r2, #255	; 0xff
 801a57c:	701a      	strb	r2, [r3, #0]
        mibReq.Param.Class = CLASS_C;
 801a57e:	210c      	movs	r1, #12
 801a580:	187b      	adds	r3, r7, r1
 801a582:	2202      	movs	r2, #2
 801a584:	711a      	strb	r2, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 801a586:	187b      	adds	r3, r7, r1
 801a588:	0018      	movs	r0, r3
 801a58a:	f7f9 fc03 	bl	8013d94 <LoRaMacMibSetRequestConfirm>
 801a58e:	1e03      	subs	r3, r0, #0
 801a590:	d105      	bne.n	801a59e <LORA_RequestClass+0xb2>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 801a592:	4b0a      	ldr	r3, [pc, #40]	; (801a5bc <LORA_RequestClass+0xd0>)
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	699b      	ldr	r3, [r3, #24]
 801a598:	2002      	movs	r0, #2
 801a59a:	4798      	blx	r3
        break;
 801a59c:	e005      	b.n	801a5aa <LORA_RequestClass+0xbe>
            Errorstatus = LORA_ERROR;
 801a59e:	232f      	movs	r3, #47	; 0x2f
 801a5a0:	18fb      	adds	r3, r7, r3
 801a5a2:	22ff      	movs	r2, #255	; 0xff
 801a5a4:	701a      	strb	r2, [r3, #0]
        break;
 801a5a6:	e000      	b.n	801a5aa <LORA_RequestClass+0xbe>
    } 
  }
 801a5a8:	46c0      	nop			; (mov r8, r8)
  return Errorstatus;
 801a5aa:	232f      	movs	r3, #47	; 0x2f
 801a5ac:	18fb      	adds	r3, r7, r3
 801a5ae:	781b      	ldrb	r3, [r3, #0]
 801a5b0:	b25b      	sxtb	r3, r3
}
 801a5b2:	0018      	movs	r0, r3
 801a5b4:	46bd      	mov	sp, r7
 801a5b6:	b00d      	add	sp, #52	; 0x34
 801a5b8:	bd90      	pop	{r4, r7, pc}
 801a5ba:	46c0      	nop			; (mov r8, r8)
 801a5bc:	200012f4 	.word	0x200012f4
 801a5c0:	0801c7f8 	.word	0x0801c7f8

0801a5c4 <TraceUpLinkFrame>:
  *currentClass = mibReq.Param.Class;
}


static void TraceUpLinkFrame(McpsConfirm_t *mcpsConfirm)
{
 801a5c4:	b580      	push	{r7, lr}
 801a5c6:	b096      	sub	sp, #88	; 0x58
 801a5c8:	af00      	add	r7, sp, #0
 801a5ca:	6078      	str	r0, [r7, #4]

    MibRequestConfirm_t mibGet;
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_DEVICE_CLASS;
 801a5cc:	2114      	movs	r1, #20
 801a5ce:	187b      	adds	r3, r7, r1
 801a5d0:	2200      	movs	r2, #0
 801a5d2:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 801a5d4:	187b      	adds	r3, r7, r1
 801a5d6:	0018      	movs	r0, r3
 801a5d8:	f7f9 fa80 	bl	8013adc <LoRaMacMibGetRequestConfirm>
                             "ABC"[mibReq.Param.Class], \
                             AppData.Port, \
                             AppData.BuffSize, \
                             mcpsConfirm->TxPower );)

    mibGet.Type  = MIB_CHANNELS_MASK;
 801a5dc:	2134      	movs	r1, #52	; 0x34
 801a5de:	187b      	adds	r3, r7, r1
 801a5e0:	2224      	movs	r2, #36	; 0x24
 801a5e2:	701a      	strb	r2, [r3, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 801a5e4:	187b      	adds	r3, r7, r1
 801a5e6:	0018      	movs	r0, r3
 801a5e8:	f7f9 fa78 	bl	8013adc <LoRaMacMibGetRequestConfirm>
 801a5ec:	1e03      	subs	r3, r0, #0
 801a5ee:	d10f      	bne.n	801a610 <TraceUpLinkFrame+0x4c>
#if defined( REGION_AS923 ) || defined( REGION_CN779 ) || \
    defined( REGION_EU868 ) || defined( REGION_IN865 ) || \
    defined( REGION_KR920 ) || defined( REGION_EU433 ) || \
    defined( REGION_RU864 )

        for( uint8_t i = 0; i < 1; i++)
 801a5f0:	2357      	movs	r3, #87	; 0x57
 801a5f2:	18fb      	adds	r3, r7, r3
 801a5f4:	2200      	movs	r2, #0
 801a5f6:	701a      	strb	r2, [r3, #0]
 801a5f8:	e005      	b.n	801a606 <TraceUpLinkFrame+0x42>
 801a5fa:	2157      	movs	r1, #87	; 0x57
 801a5fc:	187b      	adds	r3, r7, r1
 801a5fe:	781a      	ldrb	r2, [r3, #0]
 801a600:	187b      	adds	r3, r7, r1
 801a602:	3201      	adds	r2, #1
 801a604:	701a      	strb	r2, [r3, #0]
 801a606:	2357      	movs	r3, #87	; 0x57
 801a608:	18fb      	adds	r3, r7, r3
 801a60a:	781b      	ldrb	r3, [r3, #0]
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d0f4      	beq.n	801a5fa <TraceUpLinkFrame+0x36>
            TVL2( PRINTF( "%04X ", mibGet.Param.ChannelsMask[i] );)
        }
    }

    TVL2( PRINTF("\r\n\r\n" );)
} 
 801a610:	46c0      	nop			; (mov r8, r8)
 801a612:	46bd      	mov	sp, r7
 801a614:	b016      	add	sp, #88	; 0x58
 801a616:	bd80      	pop	{r7, pc}

0801a618 <TraceDownLinkFrame>:


static void TraceDownLinkFrame(McpsIndication_t *mcpsIndication)
{
 801a618:	b590      	push	{r4, r7, lr}
 801a61a:	b08b      	sub	sp, #44	; 0x2c
 801a61c:	af00      	add	r7, sp, #0
 801a61e:	6078      	str	r0, [r7, #4]
    const char *slotStrings[] = { "1", "2", "C", "Ping-Slot", "Multicast Ping-Slot" };
 801a620:	2314      	movs	r3, #20
 801a622:	18fb      	adds	r3, r7, r3
 801a624:	4a04      	ldr	r2, [pc, #16]	; (801a638 <TraceDownLinkFrame+0x20>)
 801a626:	ca13      	ldmia	r2!, {r0, r1, r4}
 801a628:	c313      	stmia	r3!, {r0, r1, r4}
 801a62a:	ca03      	ldmia	r2!, {r0, r1}
 801a62c:	c303      	stmia	r3!, {r0, r1}
                             slotStrings[mcpsIndication->RxSlot], \
                             mcpsIndication->Port, \
                             mcpsIndication->BufferSize, \
                             mcpsIndication->Rssi, \
                             mcpsIndication->Snr );)
}  
 801a62e:	46c0      	nop			; (mov r8, r8)
 801a630:	46bd      	mov	sp, r7
 801a632:	b00b      	add	sp, #44	; 0x2c
 801a634:	bd90      	pop	{r4, r7, pc}
 801a636:	46c0      	nop			; (mov r8, r8)
 801a638:	0801c86c 	.word	0x0801c86c

0801a63c <LPM_SetOffMode>:

/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void LPM_SetOffMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 801a63c:	b580      	push	{r7, lr}
 801a63e:	b086      	sub	sp, #24
 801a640:	af00      	add	r7, sp, #0
 801a642:	0002      	movs	r2, r0
 801a644:	1dfb      	adds	r3, r7, #7
 801a646:	701a      	strb	r2, [r3, #0]
 801a648:	1dbb      	adds	r3, r7, #6
 801a64a:	1c0a      	adds	r2, r1, #0
 801a64c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a64e:	f3ef 8310 	mrs	r3, PRIMASK
 801a652:	613b      	str	r3, [r7, #16]
  return(result);
 801a654:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 801a656:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a658:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 801a65a:	1dbb      	adds	r3, r7, #6
 801a65c:	781b      	ldrb	r3, [r3, #0]
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d00a      	beq.n	801a678 <LPM_SetOffMode+0x3c>
 801a662:	2b01      	cmp	r3, #1
 801a664:	d000      	beq.n	801a668 <LPM_SetOffMode+0x2c>
    {
      OffModeDisable &= ~(uint32_t)id;
      break;
    }
    default:
      break;
 801a666:	e010      	b.n	801a68a <LPM_SetOffMode+0x4e>
      OffModeDisable |= (uint32_t)id;
 801a668:	1dfb      	adds	r3, r7, #7
 801a66a:	781a      	ldrb	r2, [r3, #0]
 801a66c:	4b0b      	ldr	r3, [pc, #44]	; (801a69c <LPM_SetOffMode+0x60>)
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	431a      	orrs	r2, r3
 801a672:	4b0a      	ldr	r3, [pc, #40]	; (801a69c <LPM_SetOffMode+0x60>)
 801a674:	601a      	str	r2, [r3, #0]
      break;
 801a676:	e008      	b.n	801a68a <LPM_SetOffMode+0x4e>
      OffModeDisable &= ~(uint32_t)id;
 801a678:	1dfb      	adds	r3, r7, #7
 801a67a:	781b      	ldrb	r3, [r3, #0]
 801a67c:	43da      	mvns	r2, r3
 801a67e:	4b07      	ldr	r3, [pc, #28]	; (801a69c <LPM_SetOffMode+0x60>)
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	401a      	ands	r2, r3
 801a684:	4b05      	ldr	r3, [pc, #20]	; (801a69c <LPM_SetOffMode+0x60>)
 801a686:	601a      	str	r2, [r3, #0]
      break;
 801a688:	46c0      	nop			; (mov r8, r8)
 801a68a:	697b      	ldr	r3, [r7, #20]
 801a68c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	f383 8810 	msr	PRIMASK, r3
  }
  
  RESTORE_PRIMASK( );

  return;
 801a694:	46c0      	nop			; (mov r8, r8)
}
 801a696:	46bd      	mov	sp, r7
 801a698:	b006      	add	sp, #24
 801a69a:	bd80      	pop	{r7, pc}
 801a69c:	200012fc 	.word	0x200012fc

0801a6a0 <LPM_SetStopMode>:

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 801a6a0:	b580      	push	{r7, lr}
 801a6a2:	b086      	sub	sp, #24
 801a6a4:	af00      	add	r7, sp, #0
 801a6a6:	0002      	movs	r2, r0
 801a6a8:	1dfb      	adds	r3, r7, #7
 801a6aa:	701a      	strb	r2, [r3, #0]
 801a6ac:	1dbb      	adds	r3, r7, #6
 801a6ae:	1c0a      	adds	r2, r1, #0
 801a6b0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a6b2:	f3ef 8310 	mrs	r3, PRIMASK
 801a6b6:	613b      	str	r3, [r7, #16]
  return(result);
 801a6b8:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 801a6ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a6bc:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 801a6be:	1dbb      	adds	r3, r7, #6
 801a6c0:	781b      	ldrb	r3, [r3, #0]
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d00a      	beq.n	801a6dc <LPM_SetStopMode+0x3c>
 801a6c6:	2b01      	cmp	r3, #1
 801a6c8:	d000      	beq.n	801a6cc <LPM_SetStopMode+0x2c>
    {
      StopModeDisable &= ~(uint32_t)id;
      break;
    }
    default:
      break;
 801a6ca:	e010      	b.n	801a6ee <LPM_SetStopMode+0x4e>
      StopModeDisable |= (uint32_t)id;
 801a6cc:	1dfb      	adds	r3, r7, #7
 801a6ce:	781a      	ldrb	r2, [r3, #0]
 801a6d0:	4b0b      	ldr	r3, [pc, #44]	; (801a700 <LPM_SetStopMode+0x60>)
 801a6d2:	681b      	ldr	r3, [r3, #0]
 801a6d4:	431a      	orrs	r2, r3
 801a6d6:	4b0a      	ldr	r3, [pc, #40]	; (801a700 <LPM_SetStopMode+0x60>)
 801a6d8:	601a      	str	r2, [r3, #0]
      break;
 801a6da:	e008      	b.n	801a6ee <LPM_SetStopMode+0x4e>
      StopModeDisable &= ~(uint32_t)id;
 801a6dc:	1dfb      	adds	r3, r7, #7
 801a6de:	781b      	ldrb	r3, [r3, #0]
 801a6e0:	43da      	mvns	r2, r3
 801a6e2:	4b07      	ldr	r3, [pc, #28]	; (801a700 <LPM_SetStopMode+0x60>)
 801a6e4:	681b      	ldr	r3, [r3, #0]
 801a6e6:	401a      	ands	r2, r3
 801a6e8:	4b05      	ldr	r3, [pc, #20]	; (801a700 <LPM_SetStopMode+0x60>)
 801a6ea:	601a      	str	r2, [r3, #0]
      break;
 801a6ec:	46c0      	nop			; (mov r8, r8)
 801a6ee:	697b      	ldr	r3, [r7, #20]
 801a6f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a6f2:	68fb      	ldr	r3, [r7, #12]
 801a6f4:	f383 8810 	msr	PRIMASK, r3
  }
  RESTORE_PRIMASK( );

  return;
 801a6f8:	46c0      	nop			; (mov r8, r8)
}
 801a6fa:	46bd      	mov	sp, r7
 801a6fc:	b006      	add	sp, #24
 801a6fe:	bd80      	pop	{r7, pc}
 801a700:	200012f8 	.word	0x200012f8

0801a704 <LPM_EnterLowPower>:

void LPM_EnterLowPower(void)
{
 801a704:	b580      	push	{r7, lr}
 801a706:	af00      	add	r7, sp, #0
  if( StopModeDisable )
 801a708:	4b0c      	ldr	r3, [pc, #48]	; (801a73c <LPM_EnterLowPower+0x38>)
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d004      	beq.n	801a71a <LPM_EnterLowPower+0x16>
  {
    /**
     * SLEEP mode is required
     */
    LPM_EnterSleepMode();
 801a710:	f7eb f8fe 	bl	8005910 <LPM_EnterSleepMode>
    LPM_ExitSleepMode();
 801a714:	f000 f846 	bl	801a7a4 <LPM_ExitSleepMode>
      LPM_EnterOffMode();
      LPM_ExitOffMode();
    }
  }

  return;
 801a718:	e00d      	b.n	801a736 <LPM_EnterLowPower+0x32>
    if( OffModeDisable )
 801a71a:	4b09      	ldr	r3, [pc, #36]	; (801a740 <LPM_EnterLowPower+0x3c>)
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d004      	beq.n	801a72c <LPM_EnterLowPower+0x28>
      LPM_EnterStopMode();
 801a722:	f7eb f895 	bl	8005850 <LPM_EnterStopMode>
      LPM_ExitStopMode();
 801a726:	f7eb f8b5 	bl	8005894 <LPM_ExitStopMode>
  return;
 801a72a:	e004      	b.n	801a736 <LPM_EnterLowPower+0x32>
      LPM_EnterOffMode();
 801a72c:	f000 f83f 	bl	801a7ae <LPM_EnterOffMode>
      LPM_ExitOffMode();
 801a730:	f000 f842 	bl	801a7b8 <LPM_ExitOffMode>
  return;
 801a734:	46c0      	nop			; (mov r8, r8)
}
 801a736:	46bd      	mov	sp, r7
 801a738:	bd80      	pop	{r7, pc}
 801a73a:	46c0      	nop			; (mov r8, r8)
 801a73c:	200012f8 	.word	0x200012f8
 801a740:	200012fc 	.word	0x200012fc

0801a744 <LPM_GetMode>:

LPM_GetMode_t LPM_GetMode(void)
{
 801a744:	b580      	push	{r7, lr}
 801a746:	b084      	sub	sp, #16
 801a748:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801a74a:	f3ef 8310 	mrs	r3, PRIMASK
 801a74e:	607b      	str	r3, [r7, #4]
  return(result);
 801a750:	687b      	ldr	r3, [r7, #4]
  LPM_GetMode_t mode_selected;

  BACKUP_PRIMASK();
 801a752:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 801a754:	b672      	cpsid	i
  
  DISABLE_IRQ( );

  if(StopModeDisable )
 801a756:	4b11      	ldr	r3, [pc, #68]	; (801a79c <LPM_GetMode+0x58>)
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d004      	beq.n	801a768 <LPM_GetMode+0x24>
  {
    mode_selected = LPM_SleepMode;
 801a75e:	230f      	movs	r3, #15
 801a760:	18fb      	adds	r3, r7, r3
 801a762:	2200      	movs	r2, #0
 801a764:	701a      	strb	r2, [r3, #0]
 801a766:	e00c      	b.n	801a782 <LPM_GetMode+0x3e>
  }
  else
  {
    if(OffModeDisable)
 801a768:	4b0d      	ldr	r3, [pc, #52]	; (801a7a0 <LPM_GetMode+0x5c>)
 801a76a:	681b      	ldr	r3, [r3, #0]
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d004      	beq.n	801a77a <LPM_GetMode+0x36>
    {
      mode_selected = LPM_StopMode;
 801a770:	230f      	movs	r3, #15
 801a772:	18fb      	adds	r3, r7, r3
 801a774:	2201      	movs	r2, #1
 801a776:	701a      	strb	r2, [r3, #0]
 801a778:	e003      	b.n	801a782 <LPM_GetMode+0x3e>
    }
    else
    {
      mode_selected = LPM_OffMode;
 801a77a:	230f      	movs	r3, #15
 801a77c:	18fb      	adds	r3, r7, r3
 801a77e:	2202      	movs	r2, #2
 801a780:	701a      	strb	r2, [r3, #0]
 801a782:	68bb      	ldr	r3, [r7, #8]
 801a784:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a786:	683b      	ldr	r3, [r7, #0]
 801a788:	f383 8810 	msr	PRIMASK, r3
    }
  }

  RESTORE_PRIMASK( );

  return mode_selected;
 801a78c:	230f      	movs	r3, #15
 801a78e:	18fb      	adds	r3, r7, r3
 801a790:	781b      	ldrb	r3, [r3, #0]
}
 801a792:	0018      	movs	r0, r3
 801a794:	46bd      	mov	sp, r7
 801a796:	b004      	add	sp, #16
 801a798:	bd80      	pop	{r7, pc}
 801a79a:	46c0      	nop			; (mov r8, r8)
 801a79c:	200012f8 	.word	0x200012f8
 801a7a0:	200012fc 	.word	0x200012fc

0801a7a4 <LPM_ExitSleepMode>:

__weak void LPM_EnterSleepMode(void) {}
__weak void LPM_ExitSleepMode(void) {}
 801a7a4:	b580      	push	{r7, lr}
 801a7a6:	af00      	add	r7, sp, #0
 801a7a8:	46c0      	nop			; (mov r8, r8)
 801a7aa:	46bd      	mov	sp, r7
 801a7ac:	bd80      	pop	{r7, pc}

0801a7ae <LPM_EnterOffMode>:
__weak void LPM_EnterStopMode(void) {}
__weak void LPM_ExitStopMode(void) {}
__weak void LPM_EnterOffMode(void) {}
 801a7ae:	b580      	push	{r7, lr}
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	46c0      	nop			; (mov r8, r8)
 801a7b4:	46bd      	mov	sp, r7
 801a7b6:	bd80      	pop	{r7, pc}

0801a7b8 <LPM_ExitOffMode>:
__weak void LPM_ExitOffMode(void) {}
 801a7b8:	b580      	push	{r7, lr}
 801a7ba:	af00      	add	r7, sp, #0
 801a7bc:	46c0      	nop			; (mov r8, r8)
 801a7be:	46bd      	mov	sp, r7
 801a7c0:	bd80      	pop	{r7, pc}

0801a7c2 <circular_queue_init>:
static int16_t circular_queue_get_free_size(queue_param_t* queue);
static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size);

/* Public functions ----------------------------------------------------------*/
void circular_queue_init(queue_param_t* queue, uint8_t* queue_buff, uint16_t queue_size)
{
 801a7c2:	b580      	push	{r7, lr}
 801a7c4:	b084      	sub	sp, #16
 801a7c6:	af00      	add	r7, sp, #0
 801a7c8:	60f8      	str	r0, [r7, #12]
 801a7ca:	60b9      	str	r1, [r7, #8]
 801a7cc:	1dbb      	adds	r3, r7, #6
 801a7ce:	801a      	strh	r2, [r3, #0]
  queue->queue_read_idx=0;
 801a7d0:	68fb      	ldr	r3, [r7, #12]
 801a7d2:	2200      	movs	r2, #0
 801a7d4:	801a      	strh	r2, [r3, #0]
  queue->queue_write_idx=0;
 801a7d6:	68fb      	ldr	r3, [r7, #12]
 801a7d8:	2200      	movs	r2, #0
 801a7da:	805a      	strh	r2, [r3, #2]
  queue->queue_nb_element=0;
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	2200      	movs	r2, #0
 801a7e0:	809a      	strh	r2, [r3, #4]
  queue->queue_buff=queue_buff;
 801a7e2:	68fb      	ldr	r3, [r7, #12]
 801a7e4:	68ba      	ldr	r2, [r7, #8]
 801a7e6:	609a      	str	r2, [r3, #8]
  queue->queue_size=queue_size;
 801a7e8:	68fb      	ldr	r3, [r7, #12]
 801a7ea:	1dba      	adds	r2, r7, #6
 801a7ec:	8812      	ldrh	r2, [r2, #0]
 801a7ee:	80da      	strh	r2, [r3, #6]
  queue->queue_full=0;
 801a7f0:	68fb      	ldr	r3, [r7, #12]
 801a7f2:	2200      	movs	r2, #0
 801a7f4:	731a      	strb	r2, [r3, #12]
}
 801a7f6:	46c0      	nop			; (mov r8, r8)
 801a7f8:	46bd      	mov	sp, r7
 801a7fa:	b004      	add	sp, #16
 801a7fc:	bd80      	pop	{r7, pc}

0801a7fe <circular_queue_add>:

int circular_queue_add(queue_param_t* queue, uint8_t* buff, uint16_t buff_size)
{
 801a7fe:	b5b0      	push	{r4, r5, r7, lr}
 801a800:	b086      	sub	sp, #24
 801a802:	af00      	add	r7, sp, #0
 801a804:	60f8      	str	r0, [r7, #12]
 801a806:	60b9      	str	r1, [r7, #8]
 801a808:	1dbb      	adds	r3, r7, #6
 801a80a:	801a      	strh	r2, [r3, #0]
  int status;  
  int16_t free_buff_len=circular_queue_get_free_size(queue);
 801a80c:	2512      	movs	r5, #18
 801a80e:	197c      	adds	r4, r7, r5
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	0018      	movs	r0, r3
 801a814:	f000 f985 	bl	801ab22 <circular_queue_get_free_size>
 801a818:	0003      	movs	r3, r0
 801a81a:	8023      	strh	r3, [r4, #0]
  
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 801a81c:	1dbb      	adds	r3, r7, #6
 801a81e:	881b      	ldrh	r3, [r3, #0]
 801a820:	1c9a      	adds	r2, r3, #2
 801a822:	197b      	adds	r3, r7, r5
 801a824:	2100      	movs	r1, #0
 801a826:	5e5b      	ldrsh	r3, [r3, r1]
 801a828:	429a      	cmp	r2, r3
 801a82a:	dc47      	bgt.n	801a8bc <circular_queue_add+0xbe>
      ((queue->queue_write_idx+buff_size+ELEMENT_SIZE_LEN<=queue->queue_size) 
 801a82c:	68fb      	ldr	r3, [r7, #12]
 801a82e:	885b      	ldrh	r3, [r3, #2]
 801a830:	001a      	movs	r2, r3
 801a832:	1dbb      	adds	r3, r7, #6
 801a834:	881b      	ldrh	r3, [r3, #0]
 801a836:	18d3      	adds	r3, r2, r3
 801a838:	3302      	adds	r3, #2
 801a83a:	68fa      	ldr	r2, [r7, #12]
 801a83c:	88d2      	ldrh	r2, [r2, #6]
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 801a83e:	4293      	cmp	r3, r2
 801a840:	dd07      	ble.n	801a852 <circular_queue_add+0x54>
        || (queue->queue_write_idx>=queue->queue_size-ELEMENT_SIZE_LEN))) /*elementSize cut in 2 or elementSize at Top*/
 801a842:	68fb      	ldr	r3, [r7, #12]
 801a844:	885b      	ldrh	r3, [r3, #2]
 801a846:	001a      	movs	r2, r3
 801a848:	68fb      	ldr	r3, [r7, #12]
 801a84a:	88db      	ldrh	r3, [r3, #6]
 801a84c:	3b02      	subs	r3, #2
 801a84e:	429a      	cmp	r2, r3
 801a850:	db34      	blt.n	801a8bc <circular_queue_add+0xbe>
  {
    //add in one element
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 801a852:	1dbb      	adds	r3, r7, #6
 801a854:	881a      	ldrh	r2, [r3, #0]
 801a856:	68fb      	ldr	r3, [r7, #12]
 801a858:	0011      	movs	r1, r2
 801a85a:	0018      	movs	r0, r3
 801a85c:	f000 f9ad 	bl	801abba <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,buff_size);
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	689b      	ldr	r3, [r3, #8]
 801a864:	68fa      	ldr	r2, [r7, #12]
 801a866:	8852      	ldrh	r2, [r2, #2]
 801a868:	1898      	adds	r0, r3, r2
 801a86a:	1dbb      	adds	r3, r7, #6
 801a86c:	881a      	ldrh	r2, [r3, #0]
 801a86e:	68bb      	ldr	r3, [r7, #8]
 801a870:	0019      	movs	r1, r3
 801a872:	f000 f987 	bl	801ab84 <queue_copy>
    queue->queue_write_idx+=buff_size;
 801a876:	68fb      	ldr	r3, [r7, #12]
 801a878:	885a      	ldrh	r2, [r3, #2]
 801a87a:	1dbb      	adds	r3, r7, #6
 801a87c:	881b      	ldrh	r3, [r3, #0]
 801a87e:	18d3      	adds	r3, r2, r3
 801a880:	b29a      	uxth	r2, r3
 801a882:	68fb      	ldr	r3, [r7, #12]
 801a884:	805a      	strh	r2, [r3, #2]
    /*modulo queue_size*/
    if (queue->queue_write_idx==queue->queue_size)
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	885a      	ldrh	r2, [r3, #2]
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	88db      	ldrh	r3, [r3, #6]
 801a88e:	429a      	cmp	r2, r3
 801a890:	d102      	bne.n	801a898 <circular_queue_add+0x9a>
    {
        queue->queue_write_idx=0;
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	2200      	movs	r2, #0
 801a896:	805a      	strh	r2, [r3, #2]
    }
    //add one element
    queue->queue_nb_element++; 
 801a898:	68fb      	ldr	r3, [r7, #12]
 801a89a:	889b      	ldrh	r3, [r3, #4]
 801a89c:	3301      	adds	r3, #1
 801a89e:	b29a      	uxth	r2, r3
 801a8a0:	68fb      	ldr	r3, [r7, #12]
 801a8a2:	809a      	strh	r2, [r3, #4]
    /*in case que is full*/
    if (queue->queue_write_idx== queue->queue_read_idx)
 801a8a4:	68fb      	ldr	r3, [r7, #12]
 801a8a6:	885a      	ldrh	r2, [r3, #2]
 801a8a8:	68fb      	ldr	r3, [r7, #12]
 801a8aa:	881b      	ldrh	r3, [r3, #0]
 801a8ac:	429a      	cmp	r2, r3
 801a8ae:	d102      	bne.n	801a8b6 <circular_queue_add+0xb8>
    {
      queue->queue_full=1;
 801a8b0:	68fb      	ldr	r3, [r7, #12]
 801a8b2:	2201      	movs	r2, #1
 801a8b4:	731a      	strb	r2, [r3, #12]
    }
    status=0;
 801a8b6:	2300      	movs	r3, #0
 801a8b8:	617b      	str	r3, [r7, #20]
 801a8ba:	e060      	b.n	801a97e <circular_queue_add+0x180>
  }
  else if (buff_size+2*ELEMENT_SIZE_LEN<=free_buff_len)
 801a8bc:	1dbb      	adds	r3, r7, #6
 801a8be:	881b      	ldrh	r3, [r3, #0]
 801a8c0:	1d1a      	adds	r2, r3, #4
 801a8c2:	2312      	movs	r3, #18
 801a8c4:	18fb      	adds	r3, r7, r3
 801a8c6:	2100      	movs	r1, #0
 801a8c8:	5e5b      	ldrsh	r3, [r3, r1]
 801a8ca:	429a      	cmp	r2, r3
 801a8cc:	dc54      	bgt.n	801a978 <circular_queue_add+0x17a>
  {
    //split buffer in two elements
    /*fill top of queue with first element of size top_size*/
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	88da      	ldrh	r2, [r3, #6]
 801a8d2:	68fb      	ldr	r3, [r7, #12]
 801a8d4:	885b      	ldrh	r3, [r3, #2]
 801a8d6:	1ad3      	subs	r3, r2, r3
 801a8d8:	b29a      	uxth	r2, r3
 801a8da:	2410      	movs	r4, #16
 801a8dc:	193b      	adds	r3, r7, r4
 801a8de:	3a02      	subs	r2, #2
 801a8e0:	801a      	strh	r2, [r3, #0]
    add_elementSize_and_inc_writeIdx(queue,top_size);
 801a8e2:	193b      	adds	r3, r7, r4
 801a8e4:	881a      	ldrh	r2, [r3, #0]
 801a8e6:	68fb      	ldr	r3, [r7, #12]
 801a8e8:	0011      	movs	r1, r2
 801a8ea:	0018      	movs	r0, r3
 801a8ec:	f000 f965 	bl	801abba <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 801a8f0:	68fb      	ldr	r3, [r7, #12]
 801a8f2:	689b      	ldr	r3, [r3, #8]
 801a8f4:	68fa      	ldr	r2, [r7, #12]
 801a8f6:	8852      	ldrh	r2, [r2, #2]
 801a8f8:	1898      	adds	r0, r3, r2
 801a8fa:	193b      	adds	r3, r7, r4
 801a8fc:	881a      	ldrh	r2, [r3, #0]
 801a8fe:	68bb      	ldr	r3, [r7, #8]
 801a900:	0019      	movs	r1, r3
 801a902:	f000 f93f 	bl	801ab84 <queue_copy>
    queue->queue_write_idx=0;
 801a906:	68fb      	ldr	r3, [r7, #12]
 801a908:	2200      	movs	r2, #0
 801a90a:	805a      	strh	r2, [r3, #2]

    /*fill bottom of queue with second element of size buff_size-top_size*/
    buff_size-=top_size;
 801a90c:	1dbb      	adds	r3, r7, #6
 801a90e:	1db9      	adds	r1, r7, #6
 801a910:	193a      	adds	r2, r7, r4
 801a912:	8809      	ldrh	r1, [r1, #0]
 801a914:	8812      	ldrh	r2, [r2, #0]
 801a916:	1a8a      	subs	r2, r1, r2
 801a918:	801a      	strh	r2, [r3, #0]
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 801a91a:	1dbb      	adds	r3, r7, #6
 801a91c:	881a      	ldrh	r2, [r3, #0]
 801a91e:	68fb      	ldr	r3, [r7, #12]
 801a920:	0011      	movs	r1, r2
 801a922:	0018      	movs	r0, r3
 801a924:	f000 f949 	bl	801abba <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff+top_size,buff_size);
 801a928:	68fb      	ldr	r3, [r7, #12]
 801a92a:	689b      	ldr	r3, [r3, #8]
 801a92c:	68fa      	ldr	r2, [r7, #12]
 801a92e:	8852      	ldrh	r2, [r2, #2]
 801a930:	1898      	adds	r0, r3, r2
 801a932:	193b      	adds	r3, r7, r4
 801a934:	881b      	ldrh	r3, [r3, #0]
 801a936:	68ba      	ldr	r2, [r7, #8]
 801a938:	18d1      	adds	r1, r2, r3
 801a93a:	1dbb      	adds	r3, r7, #6
 801a93c:	881b      	ldrh	r3, [r3, #0]
 801a93e:	001a      	movs	r2, r3
 801a940:	f000 f920 	bl	801ab84 <queue_copy>
    queue->queue_write_idx+=buff_size;
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	885a      	ldrh	r2, [r3, #2]
 801a948:	1dbb      	adds	r3, r7, #6
 801a94a:	881b      	ldrh	r3, [r3, #0]
 801a94c:	18d3      	adds	r3, r2, r3
 801a94e:	b29a      	uxth	r2, r3
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	805a      	strh	r2, [r3, #2]
    // add two elements
    queue->queue_nb_element+=2;
 801a954:	68fb      	ldr	r3, [r7, #12]
 801a956:	889b      	ldrh	r3, [r3, #4]
 801a958:	3302      	adds	r3, #2
 801a95a:	b29a      	uxth	r2, r3
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	809a      	strh	r2, [r3, #4]
    /*in case que is full*/
    if (queue->queue_write_idx== queue->queue_read_idx)
 801a960:	68fb      	ldr	r3, [r7, #12]
 801a962:	885a      	ldrh	r2, [r3, #2]
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	881b      	ldrh	r3, [r3, #0]
 801a968:	429a      	cmp	r2, r3
 801a96a:	d102      	bne.n	801a972 <circular_queue_add+0x174>
    {
      queue->queue_full=1;
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	2201      	movs	r2, #1
 801a970:	731a      	strb	r2, [r3, #12]
    }    
    status =0;
 801a972:	2300      	movs	r3, #0
 801a974:	617b      	str	r3, [r7, #20]
 801a976:	e002      	b.n	801a97e <circular_queue_add+0x180>
  }
  else
  {
    status=-1;
 801a978:	2301      	movs	r3, #1
 801a97a:	425b      	negs	r3, r3
 801a97c:	617b      	str	r3, [r7, #20]
  }
  return status;
 801a97e:	697b      	ldr	r3, [r7, #20]
}
 801a980:	0018      	movs	r0, r3
 801a982:	46bd      	mov	sp, r7
 801a984:	b006      	add	sp, #24
 801a986:	bdb0      	pop	{r4, r5, r7, pc}

0801a988 <circular_queue_get>:

int circular_queue_get(queue_param_t* queue, uint8_t** buff, uint16_t* buff_size)
{
 801a988:	b590      	push	{r4, r7, lr}
 801a98a:	b087      	sub	sp, #28
 801a98c:	af00      	add	r7, sp, #0
 801a98e:	60f8      	str	r0, [r7, #12]
 801a990:	60b9      	str	r1, [r7, #8]
 801a992:	607a      	str	r2, [r7, #4]
  int status;
  if (queue->queue_nb_element==0)
 801a994:	68fb      	ldr	r3, [r7, #12]
 801a996:	889b      	ldrh	r3, [r3, #4]
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d103      	bne.n	801a9a4 <circular_queue_get+0x1c>
  {
    status=-1;
 801a99c:	2301      	movs	r3, #1
 801a99e:	425b      	negs	r3, r3
 801a9a0:	617b      	str	r3, [r7, #20]
 801a9a2:	e046      	b.n	801aa32 <circular_queue_get+0xaa>
  }
  else
  {
    uint16_t size;
    uint16_t read_idx=queue->queue_read_idx;
 801a9a4:	2412      	movs	r4, #18
 801a9a6:	193b      	adds	r3, r7, r4
 801a9a8:	68fa      	ldr	r2, [r7, #12]
 801a9aa:	8812      	ldrh	r2, [r2, #0]
 801a9ac:	801a      	strh	r2, [r3, #0]
    /*retreive and remove 1st element' size and content*/
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 801a9ae:	68fb      	ldr	r3, [r7, #12]
 801a9b0:	689a      	ldr	r2, [r3, #8]
 801a9b2:	193b      	adds	r3, r7, r4
 801a9b4:	881b      	ldrh	r3, [r3, #0]
 801a9b6:	1939      	adds	r1, r7, r4
 801a9b8:	1c58      	adds	r0, r3, #1
 801a9ba:	8008      	strh	r0, [r1, #0]
 801a9bc:	18d3      	adds	r3, r2, r3
 801a9be:	781b      	ldrb	r3, [r3, #0]
 801a9c0:	b29a      	uxth	r2, r3
 801a9c2:	2310      	movs	r3, #16
 801a9c4:	18fb      	adds	r3, r7, r3
 801a9c6:	0212      	lsls	r2, r2, #8
 801a9c8:	801a      	strh	r2, [r3, #0]
    /*wrap if needed*/
    if (read_idx==queue->queue_size)
 801a9ca:	68fb      	ldr	r3, [r7, #12]
 801a9cc:	88db      	ldrh	r3, [r3, #6]
 801a9ce:	193a      	adds	r2, r7, r4
 801a9d0:	8812      	ldrh	r2, [r2, #0]
 801a9d2:	429a      	cmp	r2, r3
 801a9d4:	d103      	bne.n	801a9de <circular_queue_get+0x56>
    {
      read_idx=0;
 801a9d6:	2312      	movs	r3, #18
 801a9d8:	18fb      	adds	r3, r7, r3
 801a9da:	2200      	movs	r2, #0
 801a9dc:	801a      	strh	r2, [r3, #0]
    }
    size|=(uint16_t) queue->queue_buff[read_idx++];
 801a9de:	68fb      	ldr	r3, [r7, #12]
 801a9e0:	689a      	ldr	r2, [r3, #8]
 801a9e2:	2412      	movs	r4, #18
 801a9e4:	193b      	adds	r3, r7, r4
 801a9e6:	881b      	ldrh	r3, [r3, #0]
 801a9e8:	1939      	adds	r1, r7, r4
 801a9ea:	1c58      	adds	r0, r3, #1
 801a9ec:	8008      	strh	r0, [r1, #0]
 801a9ee:	18d3      	adds	r3, r2, r3
 801a9f0:	781b      	ldrb	r3, [r3, #0]
 801a9f2:	b299      	uxth	r1, r3
 801a9f4:	2210      	movs	r2, #16
 801a9f6:	18bb      	adds	r3, r7, r2
 801a9f8:	18ba      	adds	r2, r7, r2
 801a9fa:	8812      	ldrh	r2, [r2, #0]
 801a9fc:	430a      	orrs	r2, r1
 801a9fe:	801a      	strh	r2, [r3, #0]
    /*wrap if needed*/
    if (read_idx==queue->queue_size)
 801aa00:	68fb      	ldr	r3, [r7, #12]
 801aa02:	88db      	ldrh	r3, [r3, #6]
 801aa04:	193a      	adds	r2, r7, r4
 801aa06:	8812      	ldrh	r2, [r2, #0]
 801aa08:	429a      	cmp	r2, r3
 801aa0a:	d103      	bne.n	801aa14 <circular_queue_get+0x8c>
    {
      read_idx=0;
 801aa0c:	2312      	movs	r3, #18
 801aa0e:	18fb      	adds	r3, r7, r3
 801aa10:	2200      	movs	r2, #0
 801aa12:	801a      	strh	r2, [r3, #0]
    }
    *buff= queue->queue_buff+read_idx;
 801aa14:	68fb      	ldr	r3, [r7, #12]
 801aa16:	689a      	ldr	r2, [r3, #8]
 801aa18:	2312      	movs	r3, #18
 801aa1a:	18fb      	adds	r3, r7, r3
 801aa1c:	881b      	ldrh	r3, [r3, #0]
 801aa1e:	18d2      	adds	r2, r2, r3
 801aa20:	68bb      	ldr	r3, [r7, #8]
 801aa22:	601a      	str	r2, [r3, #0]

    * buff_size=size;
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	2210      	movs	r2, #16
 801aa28:	18ba      	adds	r2, r7, r2
 801aa2a:	8812      	ldrh	r2, [r2, #0]
 801aa2c:	801a      	strh	r2, [r3, #0]
    status=0;
 801aa2e:	2300      	movs	r3, #0
 801aa30:	617b      	str	r3, [r7, #20]
  }
  return status;
 801aa32:	697b      	ldr	r3, [r7, #20]
}
 801aa34:	0018      	movs	r0, r3
 801aa36:	46bd      	mov	sp, r7
 801aa38:	b007      	add	sp, #28
 801aa3a:	bd90      	pop	{r4, r7, pc}

0801aa3c <circular_queue_remove>:

int circular_queue_remove(queue_param_t* queue)
{
 801aa3c:	b580      	push	{r7, lr}
 801aa3e:	b084      	sub	sp, #16
 801aa40:	af00      	add	r7, sp, #0
 801aa42:	6078      	str	r0, [r7, #4]
  int status;
  if (queue->queue_nb_element==0)
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	889b      	ldrh	r3, [r3, #4]
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	d103      	bne.n	801aa54 <circular_queue_remove+0x18>
  {
      status=-1;
 801aa4c:	2301      	movs	r3, #1
 801aa4e:	425b      	negs	r3, r3
 801aa50:	60fb      	str	r3, [r7, #12]
 801aa52:	e04e      	b.n	801aaf2 <circular_queue_remove+0xb6>
  }
  else
  {
    uint16_t size;
    /*retreive and remove 1st element' size and content*/
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	689a      	ldr	r2, [r3, #8]
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	881b      	ldrh	r3, [r3, #0]
 801aa5c:	1c59      	adds	r1, r3, #1
 801aa5e:	b288      	uxth	r0, r1
 801aa60:	6879      	ldr	r1, [r7, #4]
 801aa62:	8008      	strh	r0, [r1, #0]
 801aa64:	18d3      	adds	r3, r2, r3
 801aa66:	781b      	ldrb	r3, [r3, #0]
 801aa68:	b29a      	uxth	r2, r3
 801aa6a:	230a      	movs	r3, #10
 801aa6c:	18fb      	adds	r3, r7, r3
 801aa6e:	0212      	lsls	r2, r2, #8
 801aa70:	801a      	strh	r2, [r3, #0]
    if (queue->queue_read_idx==queue->queue_size)
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	881a      	ldrh	r2, [r3, #0]
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	88db      	ldrh	r3, [r3, #6]
 801aa7a:	429a      	cmp	r2, r3
 801aa7c:	d102      	bne.n	801aa84 <circular_queue_remove+0x48>
    {
      queue->queue_read_idx=0;
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	2200      	movs	r2, #0
 801aa82:	801a      	strh	r2, [r3, #0]
    }
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	689a      	ldr	r2, [r3, #8]
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	881b      	ldrh	r3, [r3, #0]
 801aa8c:	1c59      	adds	r1, r3, #1
 801aa8e:	b288      	uxth	r0, r1
 801aa90:	6879      	ldr	r1, [r7, #4]
 801aa92:	8008      	strh	r0, [r1, #0]
 801aa94:	18d3      	adds	r3, r2, r3
 801aa96:	781b      	ldrb	r3, [r3, #0]
 801aa98:	b299      	uxth	r1, r3
 801aa9a:	220a      	movs	r2, #10
 801aa9c:	18bb      	adds	r3, r7, r2
 801aa9e:	18ba      	adds	r2, r7, r2
 801aaa0:	8812      	ldrh	r2, [r2, #0]
 801aaa2:	430a      	orrs	r2, r1
 801aaa4:	801a      	strh	r2, [r3, #0]
    if (queue->queue_read_idx==queue->queue_size)
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	881a      	ldrh	r2, [r3, #0]
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	88db      	ldrh	r3, [r3, #6]
 801aaae:	429a      	cmp	r2, r3
 801aab0:	d102      	bne.n	801aab8 <circular_queue_remove+0x7c>
    {
      queue->queue_read_idx=0;
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	2200      	movs	r2, #0
 801aab6:	801a      	strh	r2, [r3, #0]
    }
    /* increment read index*/
    queue->queue_read_idx+=size;
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	881a      	ldrh	r2, [r3, #0]
 801aabc:	230a      	movs	r3, #10
 801aabe:	18fb      	adds	r3, r7, r3
 801aac0:	881b      	ldrh	r3, [r3, #0]
 801aac2:	18d3      	adds	r3, r2, r3
 801aac4:	b29a      	uxth	r2, r3
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	801a      	strh	r2, [r3, #0]
    /*modulo queue_size*/
    if (queue->queue_read_idx==queue->queue_size)
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	881a      	ldrh	r2, [r3, #0]
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	88db      	ldrh	r3, [r3, #6]
 801aad2:	429a      	cmp	r2, r3
 801aad4:	d102      	bne.n	801aadc <circular_queue_remove+0xa0>
    {
        queue->queue_read_idx=0;
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	2200      	movs	r2, #0
 801aada:	801a      	strh	r2, [r3, #0]
    }
    /* decrement number of element*/
    queue->queue_nb_element--;
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	889b      	ldrh	r3, [r3, #4]
 801aae0:	3b01      	subs	r3, #1
 801aae2:	b29a      	uxth	r2, r3
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	809a      	strh	r2, [r3, #4]
    queue->queue_full=0;
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	2200      	movs	r2, #0
 801aaec:	731a      	strb	r2, [r3, #12]
    status=0;
 801aaee:	2300      	movs	r3, #0
 801aaf0:	60fb      	str	r3, [r7, #12]
  }
  return status;
 801aaf2:	68fb      	ldr	r3, [r7, #12]
}
 801aaf4:	0018      	movs	r0, r3
 801aaf6:	46bd      	mov	sp, r7
 801aaf8:	b004      	add	sp, #16
 801aafa:	bd80      	pop	{r7, pc}

0801aafc <circular_queue_sense>:

int circular_queue_sense(queue_param_t* queue)
{
 801aafc:	b580      	push	{r7, lr}
 801aafe:	b084      	sub	sp, #16
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	6078      	str	r0, [r7, #4]
  int status;
  if (queue->queue_nb_element==0)
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	889b      	ldrh	r3, [r3, #4]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d103      	bne.n	801ab14 <circular_queue_sense+0x18>
  {
    status=-1;
 801ab0c:	2301      	movs	r3, #1
 801ab0e:	425b      	negs	r3, r3
 801ab10:	60fb      	str	r3, [r7, #12]
 801ab12:	e001      	b.n	801ab18 <circular_queue_sense+0x1c>
  }
  else
  {
    status=0;
 801ab14:	2300      	movs	r3, #0
 801ab16:	60fb      	str	r3, [r7, #12]
  }
  return status;
 801ab18:	68fb      	ldr	r3, [r7, #12]
}
 801ab1a:	0018      	movs	r0, r3
 801ab1c:	46bd      	mov	sp, r7
 801ab1e:	b004      	add	sp, #16
 801ab20:	bd80      	pop	{r7, pc}

0801ab22 <circular_queue_get_free_size>:

/* Private functions ---------------------------------------------------------*/
static int16_t circular_queue_get_free_size(queue_param_t* queue)
{
 801ab22:	b580      	push	{r7, lr}
 801ab24:	b084      	sub	sp, #16
 801ab26:	af00      	add	r7, sp, #0
 801ab28:	6078      	str	r0, [r7, #4]
  int16_t free_size;
  if (queue->queue_write_idx>=queue->queue_read_idx)
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	885a      	ldrh	r2, [r3, #2]
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	881b      	ldrh	r3, [r3, #0]
 801ab32:	429a      	cmp	r2, r3
 801ab34:	d30d      	bcc.n	801ab52 <circular_queue_get_free_size+0x30>
  {
    free_size=queue->queue_size-(queue->queue_write_idx-queue->queue_read_idx); 
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	88da      	ldrh	r2, [r3, #6]
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	8819      	ldrh	r1, [r3, #0]
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	885b      	ldrh	r3, [r3, #2]
 801ab42:	1acb      	subs	r3, r1, r3
 801ab44:	b29b      	uxth	r3, r3
 801ab46:	18d3      	adds	r3, r2, r3
 801ab48:	b29a      	uxth	r2, r3
 801ab4a:	230e      	movs	r3, #14
 801ab4c:	18fb      	adds	r3, r7, r3
 801ab4e:	801a      	strh	r2, [r3, #0]
 801ab50:	e008      	b.n	801ab64 <circular_queue_get_free_size+0x42>
  }
  else
  {
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	881a      	ldrh	r2, [r3, #0]
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	885b      	ldrh	r3, [r3, #2]
 801ab5a:	1ad3      	subs	r3, r2, r3
 801ab5c:	b29a      	uxth	r2, r3
 801ab5e:	230e      	movs	r3, #14
 801ab60:	18fb      	adds	r3, r7, r3
 801ab62:	801a      	strh	r2, [r3, #0]
  }
  if ( queue->queue_full==1)
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	7b1b      	ldrb	r3, [r3, #12]
 801ab68:	2b01      	cmp	r3, #1
 801ab6a:	d103      	bne.n	801ab74 <circular_queue_get_free_size+0x52>
  {
    free_size=0;
 801ab6c:	230e      	movs	r3, #14
 801ab6e:	18fb      	adds	r3, r7, r3
 801ab70:	2200      	movs	r2, #0
 801ab72:	801a      	strh	r2, [r3, #0]
  }
  return free_size;
 801ab74:	230e      	movs	r3, #14
 801ab76:	18fb      	adds	r3, r7, r3
 801ab78:	2200      	movs	r2, #0
 801ab7a:	5e9b      	ldrsh	r3, [r3, r2]
}
 801ab7c:	0018      	movs	r0, r3
 801ab7e:	46bd      	mov	sp, r7
 801ab80:	b004      	add	sp, #16
 801ab82:	bd80      	pop	{r7, pc}

0801ab84 <queue_copy>:

static void queue_copy(uint8_t* out, const uint8_t* in, uint16_t size)
{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	b084      	sub	sp, #16
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	60f8      	str	r0, [r7, #12]
 801ab8c:	60b9      	str	r1, [r7, #8]
 801ab8e:	1dbb      	adds	r3, r7, #6
 801ab90:	801a      	strh	r2, [r3, #0]
  while(size--)
 801ab92:	e007      	b.n	801aba4 <queue_copy+0x20>
  {
    *out++= *in++;
 801ab94:	68ba      	ldr	r2, [r7, #8]
 801ab96:	1c53      	adds	r3, r2, #1
 801ab98:	60bb      	str	r3, [r7, #8]
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	1c59      	adds	r1, r3, #1
 801ab9e:	60f9      	str	r1, [r7, #12]
 801aba0:	7812      	ldrb	r2, [r2, #0]
 801aba2:	701a      	strb	r2, [r3, #0]
  while(size--)
 801aba4:	1dbb      	adds	r3, r7, #6
 801aba6:	881b      	ldrh	r3, [r3, #0]
 801aba8:	1dba      	adds	r2, r7, #6
 801abaa:	1e59      	subs	r1, r3, #1
 801abac:	8011      	strh	r1, [r2, #0]
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d1f0      	bne.n	801ab94 <queue_copy+0x10>
  }
}
 801abb2:	46c0      	nop			; (mov r8, r8)
 801abb4:	46bd      	mov	sp, r7
 801abb6:	b004      	add	sp, #16
 801abb8:	bd80      	pop	{r7, pc}

0801abba <add_elementSize_and_inc_writeIdx>:

static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size)
{
 801abba:	b590      	push	{r4, r7, lr}
 801abbc:	b083      	sub	sp, #12
 801abbe:	af00      	add	r7, sp, #0
 801abc0:	6078      	str	r0, [r7, #4]
 801abc2:	000a      	movs	r2, r1
 801abc4:	1cbb      	adds	r3, r7, #2
 801abc6:	801a      	strh	r2, [r3, #0]
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 801abc8:	1cbb      	adds	r3, r7, #2
 801abca:	881b      	ldrh	r3, [r3, #0]
 801abcc:	0a1b      	lsrs	r3, r3, #8
 801abce:	b298      	uxth	r0, r3
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	689a      	ldr	r2, [r3, #8]
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	885b      	ldrh	r3, [r3, #2]
 801abd8:	1c59      	adds	r1, r3, #1
 801abda:	b28c      	uxth	r4, r1
 801abdc:	6879      	ldr	r1, [r7, #4]
 801abde:	804c      	strh	r4, [r1, #2]
 801abe0:	18d3      	adds	r3, r2, r3
 801abe2:	b2c2      	uxtb	r2, r0
 801abe4:	701a      	strb	r2, [r3, #0]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	885a      	ldrh	r2, [r3, #2]
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	88db      	ldrh	r3, [r3, #6]
 801abee:	429a      	cmp	r2, r3
 801abf0:	d102      	bne.n	801abf8 <add_elementSize_and_inc_writeIdx+0x3e>
  {
    queue->queue_write_idx=0;
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	2200      	movs	r2, #0
 801abf6:	805a      	strh	r2, [r3, #2]
  }
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size);
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	689a      	ldr	r2, [r3, #8]
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	885b      	ldrh	r3, [r3, #2]
 801ac00:	1c59      	adds	r1, r3, #1
 801ac02:	b288      	uxth	r0, r1
 801ac04:	6879      	ldr	r1, [r7, #4]
 801ac06:	8048      	strh	r0, [r1, #2]
 801ac08:	18d3      	adds	r3, r2, r3
 801ac0a:	1cba      	adds	r2, r7, #2
 801ac0c:	8812      	ldrh	r2, [r2, #0]
 801ac0e:	b2d2      	uxtb	r2, r2
 801ac10:	701a      	strb	r2, [r3, #0]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	885a      	ldrh	r2, [r3, #2]
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	88db      	ldrh	r3, [r3, #6]
 801ac1a:	429a      	cmp	r2, r3
 801ac1c:	d102      	bne.n	801ac24 <add_elementSize_and_inc_writeIdx+0x6a>
  {
    queue->queue_write_idx=0;
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	2200      	movs	r2, #0
 801ac22:	805a      	strh	r2, [r3, #2]
  }
}
 801ac24:	46c0      	nop			; (mov r8, r8)
 801ac26:	46bd      	mov	sp, r7
 801ac28:	b003      	add	sp, #12
 801ac2a:	bd90      	pop	{r4, r7, pc}

0801ac2c <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801ac2c:	b082      	sub	sp, #8
 801ac2e:	b580      	push	{r7, lr}
 801ac30:	b086      	sub	sp, #24
 801ac32:	af00      	add	r7, sp, #0
 801ac34:	60f8      	str	r0, [r7, #12]
 801ac36:	1d38      	adds	r0, r7, #4
 801ac38:	6001      	str	r1, [r0, #0]
 801ac3a:	6042      	str	r2, [r0, #4]
 801ac3c:	2204      	movs	r2, #4
 801ac3e:	2120      	movs	r1, #32
 801ac40:	468c      	mov	ip, r1
 801ac42:	44bc      	add	ip, r7
 801ac44:	4462      	add	r2, ip
 801ac46:	6013      	str	r3, [r2, #0]
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801ac48:	2110      	movs	r1, #16
 801ac4a:	187b      	adds	r3, r7, r1
 801ac4c:	2200      	movs	r2, #0
 801ac4e:	601a      	str	r2, [r3, #0]
 801ac50:	187b      	adds	r3, r7, r1
 801ac52:	2200      	movs	r2, #0
 801ac54:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds + b.Seconds;
 801ac56:	1d3b      	adds	r3, r7, #4
 801ac58:	681a      	ldr	r2, [r3, #0]
 801ac5a:	2304      	movs	r3, #4
 801ac5c:	2020      	movs	r0, #32
 801ac5e:	4684      	mov	ip, r0
 801ac60:	44bc      	add	ip, r7
 801ac62:	4463      	add	r3, ip
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	18d2      	adds	r2, r2, r3
 801ac68:	187b      	adds	r3, r7, r1
 801ac6a:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801ac6c:	1d3b      	adds	r3, r7, #4
 801ac6e:	2204      	movs	r2, #4
 801ac70:	5e9b      	ldrsh	r3, [r3, r2]
 801ac72:	b29a      	uxth	r2, r3
 801ac74:	2304      	movs	r3, #4
 801ac76:	2020      	movs	r0, #32
 801ac78:	4684      	mov	ip, r0
 801ac7a:	44bc      	add	ip, r7
 801ac7c:	4463      	add	r3, ip
 801ac7e:	2004      	movs	r0, #4
 801ac80:	5e1b      	ldrsh	r3, [r3, r0]
 801ac82:	b29b      	uxth	r3, r3
 801ac84:	18d3      	adds	r3, r2, r3
 801ac86:	b29b      	uxth	r3, r3
 801ac88:	b21a      	sxth	r2, r3
 801ac8a:	187b      	adds	r3, r7, r1
 801ac8c:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds >= 1000 )
 801ac8e:	187b      	adds	r3, r7, r1
 801ac90:	2204      	movs	r2, #4
 801ac92:	5e9b      	ldrsh	r3, [r3, r2]
 801ac94:	4a0f      	ldr	r2, [pc, #60]	; (801acd4 <SysTimeAdd+0xa8>)
 801ac96:	4293      	cmp	r3, r2
 801ac98:	dd10      	ble.n	801acbc <SysTimeAdd+0x90>
    {
        c.Seconds++;
 801ac9a:	2110      	movs	r1, #16
 801ac9c:	187b      	adds	r3, r7, r1
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	1c5a      	adds	r2, r3, #1
 801aca2:	187b      	adds	r3, r7, r1
 801aca4:	601a      	str	r2, [r3, #0]
        c.SubSeconds -= 1000;
 801aca6:	187b      	adds	r3, r7, r1
 801aca8:	2204      	movs	r2, #4
 801acaa:	5e9b      	ldrsh	r3, [r3, r2]
 801acac:	b29b      	uxth	r3, r3
 801acae:	4a0a      	ldr	r2, [pc, #40]	; (801acd8 <SysTimeAdd+0xac>)
 801acb0:	4694      	mov	ip, r2
 801acb2:	4463      	add	r3, ip
 801acb4:	b29b      	uxth	r3, r3
 801acb6:	b21a      	sxth	r2, r3
 801acb8:	187b      	adds	r3, r7, r1
 801acba:	809a      	strh	r2, [r3, #4]
    }
    return c;
 801acbc:	68fb      	ldr	r3, [r7, #12]
 801acbe:	2210      	movs	r2, #16
 801acc0:	18ba      	adds	r2, r7, r2
 801acc2:	ca03      	ldmia	r2!, {r0, r1}
 801acc4:	c303      	stmia	r3!, {r0, r1}
}
 801acc6:	68f8      	ldr	r0, [r7, #12]
 801acc8:	46bd      	mov	sp, r7
 801acca:	b006      	add	sp, #24
 801accc:	bc80      	pop	{r7}
 801acce:	bc08      	pop	{r3}
 801acd0:	b002      	add	sp, #8
 801acd2:	4718      	bx	r3
 801acd4:	000003e7 	.word	0x000003e7
 801acd8:	fffffc18 	.word	0xfffffc18

0801acdc <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801acdc:	b082      	sub	sp, #8
 801acde:	b580      	push	{r7, lr}
 801ace0:	b086      	sub	sp, #24
 801ace2:	af00      	add	r7, sp, #0
 801ace4:	60f8      	str	r0, [r7, #12]
 801ace6:	1d38      	adds	r0, r7, #4
 801ace8:	6001      	str	r1, [r0, #0]
 801acea:	6042      	str	r2, [r0, #4]
 801acec:	2204      	movs	r2, #4
 801acee:	2120      	movs	r1, #32
 801acf0:	468c      	mov	ip, r1
 801acf2:	44bc      	add	ip, r7
 801acf4:	4462      	add	r2, ip
 801acf6:	6013      	str	r3, [r2, #0]
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801acf8:	2110      	movs	r1, #16
 801acfa:	187b      	adds	r3, r7, r1
 801acfc:	2200      	movs	r2, #0
 801acfe:	601a      	str	r2, [r3, #0]
 801ad00:	187b      	adds	r3, r7, r1
 801ad02:	2200      	movs	r2, #0
 801ad04:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds - b.Seconds;
 801ad06:	1d3b      	adds	r3, r7, #4
 801ad08:	681a      	ldr	r2, [r3, #0]
 801ad0a:	2304      	movs	r3, #4
 801ad0c:	2020      	movs	r0, #32
 801ad0e:	4684      	mov	ip, r0
 801ad10:	44bc      	add	ip, r7
 801ad12:	4463      	add	r3, ip
 801ad14:	681b      	ldr	r3, [r3, #0]
 801ad16:	1ad2      	subs	r2, r2, r3
 801ad18:	187b      	adds	r3, r7, r1
 801ad1a:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801ad1c:	1d3b      	adds	r3, r7, #4
 801ad1e:	2204      	movs	r2, #4
 801ad20:	5e9b      	ldrsh	r3, [r3, r2]
 801ad22:	b29a      	uxth	r2, r3
 801ad24:	2304      	movs	r3, #4
 801ad26:	2020      	movs	r0, #32
 801ad28:	4684      	mov	ip, r0
 801ad2a:	44bc      	add	ip, r7
 801ad2c:	4463      	add	r3, ip
 801ad2e:	2004      	movs	r0, #4
 801ad30:	5e1b      	ldrsh	r3, [r3, r0]
 801ad32:	b29b      	uxth	r3, r3
 801ad34:	1ad3      	subs	r3, r2, r3
 801ad36:	b29b      	uxth	r3, r3
 801ad38:	b21a      	sxth	r2, r3
 801ad3a:	187b      	adds	r3, r7, r1
 801ad3c:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds < 0 )
 801ad3e:	187b      	adds	r3, r7, r1
 801ad40:	2204      	movs	r2, #4
 801ad42:	5e9b      	ldrsh	r3, [r3, r2]
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	da11      	bge.n	801ad6c <SysTimeSub+0x90>
    {
        c.Seconds--;
 801ad48:	2110      	movs	r1, #16
 801ad4a:	187b      	adds	r3, r7, r1
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	1e5a      	subs	r2, r3, #1
 801ad50:	187b      	adds	r3, r7, r1
 801ad52:	601a      	str	r2, [r3, #0]
        c.SubSeconds += 1000;
 801ad54:	187b      	adds	r3, r7, r1
 801ad56:	2204      	movs	r2, #4
 801ad58:	5e9b      	ldrsh	r3, [r3, r2]
 801ad5a:	b29b      	uxth	r3, r3
 801ad5c:	22fa      	movs	r2, #250	; 0xfa
 801ad5e:	0092      	lsls	r2, r2, #2
 801ad60:	4694      	mov	ip, r2
 801ad62:	4463      	add	r3, ip
 801ad64:	b29b      	uxth	r3, r3
 801ad66:	b21a      	sxth	r2, r3
 801ad68:	187b      	adds	r3, r7, r1
 801ad6a:	809a      	strh	r2, [r3, #4]
    }
    return c;
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	2210      	movs	r2, #16
 801ad70:	18ba      	adds	r2, r7, r2
 801ad72:	ca03      	ldmia	r2!, {r0, r1}
 801ad74:	c303      	stmia	r3!, {r0, r1}
}
 801ad76:	68f8      	ldr	r0, [r7, #12]
 801ad78:	46bd      	mov	sp, r7
 801ad7a:	b006      	add	sp, #24
 801ad7c:	bc80      	pop	{r7}
 801ad7e:	bc08      	pop	{r3}
 801ad80:	b002      	add	sp, #8
 801ad82:	4718      	bx	r3

0801ad84 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801ad84:	b5b0      	push	{r4, r5, r7, lr}
 801ad86:	b088      	sub	sp, #32
 801ad88:	af02      	add	r7, sp, #8
 801ad8a:	003b      	movs	r3, r7
 801ad8c:	6018      	str	r0, [r3, #0]
 801ad8e:	6059      	str	r1, [r3, #4]
    SysTime_t DeltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ad90:	2108      	movs	r1, #8
 801ad92:	187b      	adds	r3, r7, r1
 801ad94:	2200      	movs	r2, #0
 801ad96:	601a      	str	r2, [r3, #0]
 801ad98:	187b      	adds	r3, r7, r1
 801ad9a:	2200      	movs	r2, #0
 801ad9c:	809a      	strh	r2, [r3, #4]

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ad9e:	000c      	movs	r4, r1
 801ada0:	187b      	adds	r3, r7, r1
 801ada2:	3304      	adds	r3, #4
 801ada4:	0018      	movs	r0, r3
 801ada6:	f7e9 fc65 	bl	8004674 <HW_RTC_GetCalendarTime>
 801adaa:	0002      	movs	r2, r0
 801adac:	0021      	movs	r1, r4
 801adae:	187b      	adds	r3, r7, r1
 801adb0:	601a      	str	r2, [r3, #0]

    // sysTime is epoch
    DeltaTime = SysTimeSub( sysTime, calendarTime );
 801adb2:	2510      	movs	r5, #16
 801adb4:	197c      	adds	r4, r7, r5
 801adb6:	187b      	adds	r3, r7, r1
 801adb8:	003a      	movs	r2, r7
 801adba:	4669      	mov	r1, sp
 801adbc:	6858      	ldr	r0, [r3, #4]
 801adbe:	6008      	str	r0, [r1, #0]
 801adc0:	681b      	ldr	r3, [r3, #0]
 801adc2:	6811      	ldr	r1, [r2, #0]
 801adc4:	6852      	ldr	r2, [r2, #4]
 801adc6:	0020      	movs	r0, r4
 801adc8:	f7ff ff88 	bl	801acdc <SysTimeSub>

    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
 801adcc:	197b      	adds	r3, r7, r5
 801adce:	681a      	ldr	r2, [r3, #0]
 801add0:	197b      	adds	r3, r7, r5
 801add2:	2104      	movs	r1, #4
 801add4:	5e5b      	ldrsh	r3, [r3, r1]
 801add6:	0019      	movs	r1, r3
 801add8:	0010      	movs	r0, r2
 801adda:	f7e9 fc75 	bl	80046c8 <HW_RTC_BKUPWrite>
}
 801adde:	46c0      	nop			; (mov r8, r8)
 801ade0:	46bd      	mov	sp, r7
 801ade2:	b006      	add	sp, #24
 801ade4:	bdb0      	pop	{r4, r5, r7, pc}

0801ade6 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801ade6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ade8:	b08b      	sub	sp, #44	; 0x2c
 801adea:	af02      	add	r7, sp, #8
 801adec:	6078      	str	r0, [r7, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801adee:	2518      	movs	r5, #24
 801adf0:	197b      	adds	r3, r7, r5
 801adf2:	2200      	movs	r2, #0
 801adf4:	601a      	str	r2, [r3, #0]
 801adf6:	197b      	adds	r3, r7, r5
 801adf8:	2200      	movs	r2, #0
 801adfa:	809a      	strh	r2, [r3, #4]
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801adfc:	2410      	movs	r4, #16
 801adfe:	193b      	adds	r3, r7, r4
 801ae00:	2200      	movs	r2, #0
 801ae02:	601a      	str	r2, [r3, #0]
 801ae04:	193b      	adds	r3, r7, r4
 801ae06:	2200      	movs	r2, #0
 801ae08:	809a      	strh	r2, [r3, #4]
    SysTime_t DeltaTime;

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ae0a:	197b      	adds	r3, r7, r5
 801ae0c:	3304      	adds	r3, #4
 801ae0e:	0018      	movs	r0, r3
 801ae10:	f7e9 fc30 	bl	8004674 <HW_RTC_GetCalendarTime>
 801ae14:	0002      	movs	r2, r0
 801ae16:	197b      	adds	r3, r7, r5
 801ae18:	601a      	str	r2, [r3, #0]

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 801ae1a:	2108      	movs	r1, #8
 801ae1c:	187b      	adds	r3, r7, r1
 801ae1e:	1d1a      	adds	r2, r3, #4
 801ae20:	187b      	adds	r3, r7, r1
 801ae22:	0011      	movs	r1, r2
 801ae24:	0018      	movs	r0, r3
 801ae26:	f7e9 fc67 	bl	80046f8 <HW_RTC_BKUPRead>

    sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801ae2a:	0026      	movs	r6, r4
 801ae2c:	193c      	adds	r4, r7, r4
 801ae2e:	197b      	adds	r3, r7, r5
 801ae30:	2108      	movs	r1, #8
 801ae32:	187a      	adds	r2, r7, r1
 801ae34:	4669      	mov	r1, sp
 801ae36:	6858      	ldr	r0, [r3, #4]
 801ae38:	6008      	str	r0, [r1, #0]
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	6811      	ldr	r1, [r2, #0]
 801ae3e:	6852      	ldr	r2, [r2, #4]
 801ae40:	0020      	movs	r0, r4
 801ae42:	f7ff fef3 	bl	801ac2c <SysTimeAdd>

    return sysTime;
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	0034      	movs	r4, r6
 801ae4a:	193a      	adds	r2, r7, r4
 801ae4c:	ca03      	ldmia	r2!, {r0, r1}
 801ae4e:	c303      	stmia	r3!, {r0, r1}
}
 801ae50:	6878      	ldr	r0, [r7, #4]
 801ae52:	46bd      	mov	sp, r7
 801ae54:	b009      	add	sp, #36	; 0x24
 801ae56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ae58 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801ae58:	b590      	push	{r4, r7, lr}
 801ae5a:	b085      	sub	sp, #20
 801ae5c:	af00      	add	r7, sp, #0
 801ae5e:	6078      	str	r0, [r7, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ae60:	2408      	movs	r4, #8
 801ae62:	193b      	adds	r3, r7, r4
 801ae64:	2200      	movs	r2, #0
 801ae66:	601a      	str	r2, [r3, #0]
 801ae68:	193b      	adds	r3, r7, r4
 801ae6a:	2200      	movs	r2, #0
 801ae6c:	809a      	strh	r2, [r3, #4]

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ae6e:	193b      	adds	r3, r7, r4
 801ae70:	3304      	adds	r3, #4
 801ae72:	0018      	movs	r0, r3
 801ae74:	f7e9 fbfe 	bl	8004674 <HW_RTC_GetCalendarTime>
 801ae78:	0002      	movs	r2, r0
 801ae7a:	193b      	adds	r3, r7, r4
 801ae7c:	601a      	str	r2, [r3, #0]
    
    return calendarTime;
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	193a      	adds	r2, r7, r4
 801ae82:	ca03      	ldmia	r2!, {r0, r1}
 801ae84:	c303      	stmia	r3!, {r0, r1}
}
 801ae86:	6878      	ldr	r0, [r7, #4]
 801ae88:	46bd      	mov	sp, r7
 801ae8a:	b005      	add	sp, #20
 801ae8c:	bd90      	pop	{r4, r7, pc}

0801ae8e <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 801ae8e:	b580      	push	{r7, lr}
 801ae90:	b082      	sub	sp, #8
 801ae92:	af00      	add	r7, sp, #0
 801ae94:	6078      	str	r0, [r7, #4]
 801ae96:	6039      	str	r1, [r7, #0]
  obj->Timestamp = 0;
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	2200      	movs	r2, #0
 801ae9c:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	2200      	movs	r2, #0
 801aea2:	605a      	str	r2, [r3, #4]
  obj->IsStarted = false;
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	2200      	movs	r2, #0
 801aea8:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	2200      	movs	r2, #0
 801aeae:	725a      	strb	r2, [r3, #9]
  obj->Callback = callback;
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	683a      	ldr	r2, [r7, #0]
 801aeb4:	60da      	str	r2, [r3, #12]
  obj->Context = NULL;
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	2200      	movs	r2, #0
 801aeba:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	2200      	movs	r2, #0
 801aec0:	615a      	str	r2, [r3, #20]
}
 801aec2:	46c0      	nop			; (mov r8, r8)
 801aec4:	46bd      	mov	sp, r7
 801aec6:	b002      	add	sp, #8
 801aec8:	bd80      	pop	{r7, pc}
	...

0801aecc <TimerStart>:
{
  obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 801aecc:	b580      	push	{r7, lr}
 801aece:	b088      	sub	sp, #32
 801aed0:	af00      	add	r7, sp, #0
 801aed2:	6078      	str	r0, [r7, #4]
  uint32_t elapsedTime = 0;
 801aed4:	2300      	movs	r3, #0
 801aed6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801aed8:	f3ef 8310 	mrs	r3, PRIMASK
 801aedc:	617b      	str	r3, [r7, #20]
  return(result);
 801aede:	697b      	ldr	r3, [r7, #20]
  
  BACKUP_PRIMASK();
 801aee0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801aee2:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  

  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d005      	beq.n	801aef6 <TimerStart+0x2a>
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	0018      	movs	r0, r3
 801aeee:	f000 f993 	bl	801b218 <TimerExists>
 801aef2:	1e03      	subs	r3, r0, #0
 801aef4:	d005      	beq.n	801af02 <TimerStart+0x36>
 801aef6:	69bb      	ldr	r3, [r7, #24]
 801aef8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aefa:	693b      	ldr	r3, [r7, #16]
 801aefc:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 801af00:	e033      	b.n	801af6a <TimerStart+0x9e>
  }
  obj->Timestamp = obj->ReloadValue;
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	685a      	ldr	r2, [r3, #4]
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	601a      	str	r2, [r3, #0]
  obj->IsStarted = true;
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	2201      	movs	r2, #1
 801af0e:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	2200      	movs	r2, #0
 801af14:	725a      	strb	r2, [r3, #9]

  if( TimerListHead == NULL )
 801af16:	4b16      	ldr	r3, [pc, #88]	; (801af70 <TimerStart+0xa4>)
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d106      	bne.n	801af2c <TimerStart+0x60>
  {
    HW_RTC_SetTimerContext( );
 801af1e:	f7e9 f95f 	bl	80041e0 <HW_RTC_SetTimerContext>
    TimerInsertNewHeadTimer( obj ); // insert a timeout at now+obj->Timestamp
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	0018      	movs	r0, r3
 801af26:	f000 f9e5 	bl	801b2f4 <TimerInsertNewHeadTimer>
 801af2a:	e019      	b.n	801af60 <TimerStart+0x94>
  }
  else 
  {
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 801af2c:	f7e9 f8ba 	bl	80040a4 <HW_RTC_GetTimerElapsedTime>
 801af30:	0003      	movs	r3, r0
 801af32:	61fb      	str	r3, [r7, #28]
    obj->Timestamp += elapsedTime;
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	681a      	ldr	r2, [r3, #0]
 801af38:	69fb      	ldr	r3, [r7, #28]
 801af3a:	18d2      	adds	r2, r2, r3
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	601a      	str	r2, [r3, #0]
  
    if( obj->Timestamp < TimerListHead->Timestamp )
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	681a      	ldr	r2, [r3, #0]
 801af44:	4b0a      	ldr	r3, [pc, #40]	; (801af70 <TimerStart+0xa4>)
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	429a      	cmp	r2, r3
 801af4c:	d204      	bcs.n	801af58 <TimerStart+0x8c>
    {
      TimerInsertNewHeadTimer( obj);
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	0018      	movs	r0, r3
 801af52:	f000 f9cf 	bl	801b2f4 <TimerInsertNewHeadTimer>
 801af56:	e003      	b.n	801af60 <TimerStart+0x94>
    }
    else
    {
      TimerInsertTimer( obj);
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	0018      	movs	r0, r3
 801af5c:	f000 f99c 	bl	801b298 <TimerInsertTimer>
 801af60:	69bb      	ldr	r3, [r7, #24]
 801af62:	60fb      	str	r3, [r7, #12]
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	f383 8810 	msr	PRIMASK, r3
    }
  }
  RESTORE_PRIMASK( );
}
 801af6a:	46bd      	mov	sp, r7
 801af6c:	b008      	add	sp, #32
 801af6e:	bd80      	pop	{r7, pc}
 801af70:	20001300 	.word	0x20001300

0801af74 <TimerIrqHandler>:
{
  return obj->IsStarted;
}

void TimerIrqHandler( void )
{
 801af74:	b590      	push	{r4, r7, lr}
 801af76:	b087      	sub	sp, #28
 801af78:	af00      	add	r7, sp, #0
  TimerEvent_t* cur;
  TimerEvent_t* next;
  

  
  uint32_t old =  HW_RTC_GetTimerContext( );
 801af7a:	f7e9 f949 	bl	8004210 <HW_RTC_GetTimerContext>
 801af7e:	0003      	movs	r3, r0
 801af80:	613b      	str	r3, [r7, #16]
  uint32_t now =  HW_RTC_SetTimerContext( );
 801af82:	f7e9 f92d 	bl	80041e0 <HW_RTC_SetTimerContext>
 801af86:	0003      	movs	r3, r0
 801af88:	60fb      	str	r3, [r7, #12]
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 801af8a:	68fa      	ldr	r2, [r7, #12]
 801af8c:	693b      	ldr	r3, [r7, #16]
 801af8e:	1ad3      	subs	r3, r2, r3
 801af90:	60bb      	str	r3, [r7, #8]
  
  /* Update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801af92:	4b39      	ldr	r3, [pc, #228]	; (801b078 <TimerIrqHandler+0x104>)
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	2b00      	cmp	r3, #0
 801af98:	d01c      	beq.n	801afd4 <TimerIrqHandler+0x60>
  {
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 801af9a:	4b37      	ldr	r3, [pc, #220]	; (801b078 <TimerIrqHandler+0x104>)
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	617b      	str	r3, [r7, #20]
 801afa0:	e014      	b.n	801afcc <TimerIrqHandler+0x58>
    {
      next =cur->Next;
 801afa2:	697b      	ldr	r3, [r7, #20]
 801afa4:	695b      	ldr	r3, [r3, #20]
 801afa6:	607b      	str	r3, [r7, #4]
      if (next->Timestamp > DeltaContext)
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	681b      	ldr	r3, [r3, #0]
 801afac:	68ba      	ldr	r2, [r7, #8]
 801afae:	429a      	cmp	r2, r3
 801afb0:	d206      	bcs.n	801afc0 <TimerIrqHandler+0x4c>
      {
        next->Timestamp -= DeltaContext;
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	681a      	ldr	r2, [r3, #0]
 801afb6:	68bb      	ldr	r3, [r7, #8]
 801afb8:	1ad2      	subs	r2, r2, r3
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	601a      	str	r2, [r3, #0]
 801afbe:	e002      	b.n	801afc6 <TimerIrqHandler+0x52>
      }
      else
      {
        next->Timestamp = 0 ;
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	2200      	movs	r2, #0
 801afc4:	601a      	str	r2, [r3, #0]
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 801afc6:	697b      	ldr	r3, [r7, #20]
 801afc8:	695b      	ldr	r3, [r3, #20]
 801afca:	617b      	str	r3, [r7, #20]
 801afcc:	697b      	ldr	r3, [r7, #20]
 801afce:	695b      	ldr	r3, [r3, #20]
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	d1e6      	bne.n	801afa2 <TimerIrqHandler+0x2e>
      }
    }
  }
  
  /* execute imediately the alarm callback */
  if ( TimerListHead != NULL )
 801afd4:	4b28      	ldr	r3, [pc, #160]	; (801b078 <TimerIrqHandler+0x104>)
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	2b00      	cmp	r3, #0
 801afda:	d02c      	beq.n	801b036 <TimerIrqHandler+0xc2>
  {
    cur = TimerListHead;
 801afdc:	4b26      	ldr	r3, [pc, #152]	; (801b078 <TimerIrqHandler+0x104>)
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	617b      	str	r3, [r7, #20]
    TimerListHead = TimerListHead->Next;
 801afe2:	4b25      	ldr	r3, [pc, #148]	; (801b078 <TimerIrqHandler+0x104>)
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	695a      	ldr	r2, [r3, #20]
 801afe8:	4b23      	ldr	r3, [pc, #140]	; (801b078 <TimerIrqHandler+0x104>)
 801afea:	601a      	str	r2, [r3, #0]
    cur->IsStarted = false;
 801afec:	697b      	ldr	r3, [r7, #20]
 801afee:	2200      	movs	r2, #0
 801aff0:	721a      	strb	r2, [r3, #8]
    exec_cb( cur->Callback, cur->Context );
 801aff2:	697b      	ldr	r3, [r7, #20]
 801aff4:	68db      	ldr	r3, [r3, #12]
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d100      	bne.n	801affc <TimerIrqHandler+0x88>
 801affa:	e7fe      	b.n	801affa <TimerIrqHandler+0x86>
 801affc:	697b      	ldr	r3, [r7, #20]
 801affe:	68da      	ldr	r2, [r3, #12]
 801b000:	697b      	ldr	r3, [r7, #20]
 801b002:	691b      	ldr	r3, [r3, #16]
 801b004:	0018      	movs	r0, r3
 801b006:	4790      	blx	r2
  }


  // remove all the expired object from the list
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 801b008:	e015      	b.n	801b036 <TimerIrqHandler+0xc2>
  {
   cur = TimerListHead;
 801b00a:	4b1b      	ldr	r3, [pc, #108]	; (801b078 <TimerIrqHandler+0x104>)
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	617b      	str	r3, [r7, #20]
   TimerListHead = TimerListHead->Next;
 801b010:	4b19      	ldr	r3, [pc, #100]	; (801b078 <TimerIrqHandler+0x104>)
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	695a      	ldr	r2, [r3, #20]
 801b016:	4b18      	ldr	r3, [pc, #96]	; (801b078 <TimerIrqHandler+0x104>)
 801b018:	601a      	str	r2, [r3, #0]
   cur->IsStarted = false;
 801b01a:	697b      	ldr	r3, [r7, #20]
 801b01c:	2200      	movs	r2, #0
 801b01e:	721a      	strb	r2, [r3, #8]
   exec_cb( cur->Callback, cur->Context );
 801b020:	697b      	ldr	r3, [r7, #20]
 801b022:	68db      	ldr	r3, [r3, #12]
 801b024:	2b00      	cmp	r3, #0
 801b026:	d100      	bne.n	801b02a <TimerIrqHandler+0xb6>
 801b028:	e7fe      	b.n	801b028 <TimerIrqHandler+0xb4>
 801b02a:	697b      	ldr	r3, [r7, #20]
 801b02c:	68da      	ldr	r2, [r3, #12]
 801b02e:	697b      	ldr	r3, [r7, #20]
 801b030:	691b      	ldr	r3, [r3, #16]
 801b032:	0018      	movs	r0, r3
 801b034:	4790      	blx	r2
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 801b036:	4b10      	ldr	r3, [pc, #64]	; (801b078 <TimerIrqHandler+0x104>)
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d007      	beq.n	801b04e <TimerIrqHandler+0xda>
 801b03e:	4b0e      	ldr	r3, [pc, #56]	; (801b078 <TimerIrqHandler+0x104>)
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	681c      	ldr	r4, [r3, #0]
 801b044:	f7e9 f82e 	bl	80040a4 <HW_RTC_GetTimerElapsedTime>
 801b048:	0003      	movs	r3, r0
 801b04a:	429c      	cmp	r4, r3
 801b04c:	d3dd      	bcc.n	801b00a <TimerIrqHandler+0x96>
  }

  /* start the next TimerListHead if it exists AND NOT running */
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 801b04e:	4b0a      	ldr	r3, [pc, #40]	; (801b078 <TimerIrqHandler+0x104>)
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	2b00      	cmp	r3, #0
 801b054:	d00c      	beq.n	801b070 <TimerIrqHandler+0xfc>
 801b056:	4b08      	ldr	r3, [pc, #32]	; (801b078 <TimerIrqHandler+0x104>)
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	7a5b      	ldrb	r3, [r3, #9]
 801b05c:	2201      	movs	r2, #1
 801b05e:	4053      	eors	r3, r2
 801b060:	b2db      	uxtb	r3, r3
 801b062:	2b00      	cmp	r3, #0
 801b064:	d004      	beq.n	801b070 <TimerIrqHandler+0xfc>
  {
    TimerSetTimeout( TimerListHead );
 801b066:	4b04      	ldr	r3, [pc, #16]	; (801b078 <TimerIrqHandler+0x104>)
 801b068:	681b      	ldr	r3, [r3, #0]
 801b06a:	0018      	movs	r0, r3
 801b06c:	f000 f8f0 	bl	801b250 <TimerSetTimeout>
  }
}
 801b070:	46c0      	nop			; (mov r8, r8)
 801b072:	46bd      	mov	sp, r7
 801b074:	b007      	add	sp, #28
 801b076:	bd90      	pop	{r4, r7, pc}
 801b078:	20001300 	.word	0x20001300

0801b07c <TimerStop>:

void TimerStop( TimerEvent_t *obj ) 
{
 801b07c:	b580      	push	{r7, lr}
 801b07e:	b088      	sub	sp, #32
 801b080:	af00      	add	r7, sp, #0
 801b082:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b084:	f3ef 8310 	mrs	r3, PRIMASK
 801b088:	613b      	str	r3, [r7, #16]
  return(result);
 801b08a:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 801b08c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b08e:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  TimerEvent_t* prev = TimerListHead;
 801b090:	4b36      	ldr	r3, [pc, #216]	; (801b16c <TimerStop+0xf0>)
 801b092:	681b      	ldr	r3, [r3, #0]
 801b094:	61fb      	str	r3, [r7, #28]
  TimerEvent_t* cur = TimerListHead;
 801b096:	4b35      	ldr	r3, [pc, #212]	; (801b16c <TimerStop+0xf0>)
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	61bb      	str	r3, [r7, #24]

  // List is empty or the Obj to stop does not exist 
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 801b09c:	4b33      	ldr	r3, [pc, #204]	; (801b16c <TimerStop+0xf0>)
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d002      	beq.n	801b0aa <TimerStop+0x2e>
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	d105      	bne.n	801b0b6 <TimerStop+0x3a>
 801b0aa:	697b      	ldr	r3, [r7, #20]
 801b0ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0ae:	68fb      	ldr	r3, [r7, #12]
 801b0b0:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 801b0b4:	e057      	b.n	801b166 <TimerStop+0xea>
  }

  obj->IsStarted = false;
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	2200      	movs	r2, #0
 801b0ba:	721a      	strb	r2, [r3, #8]

  if( TimerListHead == obj ) // Stop the Head                  
 801b0bc:	4b2b      	ldr	r3, [pc, #172]	; (801b16c <TimerStop+0xf0>)
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	687a      	ldr	r2, [r7, #4]
 801b0c2:	429a      	cmp	r2, r3
 801b0c4:	d147      	bne.n	801b156 <TimerStop+0xda>
  {
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 801b0c6:	4b29      	ldr	r3, [pc, #164]	; (801b16c <TimerStop+0xf0>)
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	7a5b      	ldrb	r3, [r3, #9]
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	d019      	beq.n	801b104 <TimerStop+0x88>
    {  
	  
      TimerListHead->IsNext2Expire = false;
 801b0d0:	4b26      	ldr	r3, [pc, #152]	; (801b16c <TimerStop+0xf0>)
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	2200      	movs	r2, #0
 801b0d6:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 801b0d8:	4b24      	ldr	r3, [pc, #144]	; (801b16c <TimerStop+0xf0>)
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	695b      	ldr	r3, [r3, #20]
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d00a      	beq.n	801b0f8 <TimerStop+0x7c>
      {
        TimerListHead = TimerListHead->Next;
 801b0e2:	4b22      	ldr	r3, [pc, #136]	; (801b16c <TimerStop+0xf0>)
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	695a      	ldr	r2, [r3, #20]
 801b0e8:	4b20      	ldr	r3, [pc, #128]	; (801b16c <TimerStop+0xf0>)
 801b0ea:	601a      	str	r2, [r3, #0]
        TimerSetTimeout( TimerListHead );
 801b0ec:	4b1f      	ldr	r3, [pc, #124]	; (801b16c <TimerStop+0xf0>)
 801b0ee:	681b      	ldr	r3, [r3, #0]
 801b0f0:	0018      	movs	r0, r3
 801b0f2:	f000 f8ad 	bl	801b250 <TimerSetTimeout>
 801b0f6:	e031      	b.n	801b15c <TimerStop+0xe0>
      }
      else
      {
        HW_RTC_StopAlarm( );
 801b0f8:	f7e8 fffe 	bl	80040f8 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 801b0fc:	4b1b      	ldr	r3, [pc, #108]	; (801b16c <TimerStop+0xf0>)
 801b0fe:	2200      	movs	r2, #0
 801b100:	601a      	str	r2, [r3, #0]
 801b102:	e02b      	b.n	801b15c <TimerStop+0xe0>
      }
    }
    else // Stop the head before it is started
    {   
      if( TimerListHead->Next != NULL )   
 801b104:	4b19      	ldr	r3, [pc, #100]	; (801b16c <TimerStop+0xf0>)
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	695b      	ldr	r3, [r3, #20]
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d005      	beq.n	801b11a <TimerStop+0x9e>
      {
        TimerListHead = TimerListHead->Next;
 801b10e:	4b17      	ldr	r3, [pc, #92]	; (801b16c <TimerStop+0xf0>)
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	695a      	ldr	r2, [r3, #20]
 801b114:	4b15      	ldr	r3, [pc, #84]	; (801b16c <TimerStop+0xf0>)
 801b116:	601a      	str	r2, [r3, #0]
 801b118:	e020      	b.n	801b15c <TimerStop+0xe0>
      }
      else
      {
        TimerListHead = NULL;
 801b11a:	4b14      	ldr	r3, [pc, #80]	; (801b16c <TimerStop+0xf0>)
 801b11c:	2200      	movs	r2, #0
 801b11e:	601a      	str	r2, [r3, #0]
 801b120:	e01c      	b.n	801b15c <TimerStop+0xe0>
  }
  else // Stop an object within the list
  {      
    while( cur != NULL )
    {
      if( cur == obj )
 801b122:	69ba      	ldr	r2, [r7, #24]
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	429a      	cmp	r2, r3
 801b128:	d110      	bne.n	801b14c <TimerStop+0xd0>
      {
        if( cur->Next != NULL )
 801b12a:	69bb      	ldr	r3, [r7, #24]
 801b12c:	695b      	ldr	r3, [r3, #20]
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d006      	beq.n	801b140 <TimerStop+0xc4>
        {
          cur = cur->Next;
 801b132:	69bb      	ldr	r3, [r7, #24]
 801b134:	695b      	ldr	r3, [r3, #20]
 801b136:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 801b138:	69fb      	ldr	r3, [r7, #28]
 801b13a:	69ba      	ldr	r2, [r7, #24]
 801b13c:	615a      	str	r2, [r3, #20]
        else
        {
          cur = NULL;
          prev->Next = cur;
        }
        break;
 801b13e:	e00d      	b.n	801b15c <TimerStop+0xe0>
          cur = NULL;
 801b140:	2300      	movs	r3, #0
 801b142:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 801b144:	69fb      	ldr	r3, [r7, #28]
 801b146:	69ba      	ldr	r2, [r7, #24]
 801b148:	615a      	str	r2, [r3, #20]
        break;
 801b14a:	e007      	b.n	801b15c <TimerStop+0xe0>
      }
      else
      {
        prev = cur;
 801b14c:	69bb      	ldr	r3, [r7, #24]
 801b14e:	61fb      	str	r3, [r7, #28]
        cur = cur->Next;
 801b150:	69bb      	ldr	r3, [r7, #24]
 801b152:	695b      	ldr	r3, [r3, #20]
 801b154:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 801b156:	69bb      	ldr	r3, [r7, #24]
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d1e2      	bne.n	801b122 <TimerStop+0xa6>
 801b15c:	697b      	ldr	r3, [r7, #20]
 801b15e:	60bb      	str	r3, [r7, #8]
 801b160:	68bb      	ldr	r3, [r7, #8]
 801b162:	f383 8810 	msr	PRIMASK, r3
      }
    }   
  }
  
  RESTORE_PRIMASK( );
}  
 801b166:	46bd      	mov	sp, r7
 801b168:	b008      	add	sp, #32
 801b16a:	bd80      	pop	{r7, pc}
 801b16c:	20001300 	.word	0x20001300

0801b170 <TimerSetValue>:
  TimerStop( obj );
  TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 801b170:	b580      	push	{r7, lr}
 801b172:	b084      	sub	sp, #16
 801b174:	af00      	add	r7, sp, #0
 801b176:	6078      	str	r0, [r7, #4]
 801b178:	6039      	str	r1, [r7, #0]
  uint32_t minValue = 0;
 801b17a:	2300      	movs	r3, #0
 801b17c:	60bb      	str	r3, [r7, #8]
  uint32_t ticks = HW_RTC_ms2Tick( value );
 801b17e:	683b      	ldr	r3, [r7, #0]
 801b180:	0018      	movs	r0, r3
 801b182:	f7e8 ff27 	bl	8003fd4 <HW_RTC_ms2Tick>
 801b186:	0003      	movs	r3, r0
 801b188:	60fb      	str	r3, [r7, #12]

  TimerStop( obj );
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	0018      	movs	r0, r3
 801b18e:	f7ff ff75 	bl	801b07c <TimerStop>

  minValue = HW_RTC_GetMinimumTimeout( );
 801b192:	f7e8 ff19 	bl	8003fc8 <HW_RTC_GetMinimumTimeout>
 801b196:	0003      	movs	r3, r0
 801b198:	60bb      	str	r3, [r7, #8]
  
  if( ticks < minValue )
 801b19a:	68fa      	ldr	r2, [r7, #12]
 801b19c:	68bb      	ldr	r3, [r7, #8]
 801b19e:	429a      	cmp	r2, r3
 801b1a0:	d201      	bcs.n	801b1a6 <TimerSetValue+0x36>
  {
    ticks = minValue;
 801b1a2:	68bb      	ldr	r3, [r7, #8]
 801b1a4:	60fb      	str	r3, [r7, #12]
  }

  obj->Timestamp = ticks;
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	68fa      	ldr	r2, [r7, #12]
 801b1aa:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = ticks;
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	68fa      	ldr	r2, [r7, #12]
 801b1b0:	605a      	str	r2, [r3, #4]
}
 801b1b2:	46c0      	nop			; (mov r8, r8)
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	b004      	add	sp, #16
 801b1b8:	bd80      	pop	{r7, pc}

0801b1ba <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 801b1ba:	b580      	push	{r7, lr}
 801b1bc:	b082      	sub	sp, #8
 801b1be:	af00      	add	r7, sp, #0
  uint32_t now = HW_RTC_GetTimerValue( );
 801b1c0:	f7e8 ff88 	bl	80040d4 <HW_RTC_GetTimerValue>
 801b1c4:	0003      	movs	r3, r0
 801b1c6:	607b      	str	r3, [r7, #4]
  return  HW_RTC_Tick2ms(now);
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	0018      	movs	r0, r3
 801b1cc:	f7e8 ff1a 	bl	8004004 <HW_RTC_Tick2ms>
 801b1d0:	0003      	movs	r3, r0
}
 801b1d2:	0018      	movs	r0, r3
 801b1d4:	46bd      	mov	sp, r7
 801b1d6:	b002      	add	sp, #8
 801b1d8:	bd80      	pop	{r7, pc}

0801b1da <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 801b1da:	b580      	push	{r7, lr}
 801b1dc:	b084      	sub	sp, #16
 801b1de:	af00      	add	r7, sp, #0
 801b1e0:	6078      	str	r0, [r7, #4]
  if ( past == 0 )
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	d101      	bne.n	801b1ec <TimerGetElapsedTime+0x12>
  {
    return 0;
 801b1e8:	2300      	movs	r3, #0
 801b1ea:	e010      	b.n	801b20e <TimerGetElapsedTime+0x34>
  }
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 801b1ec:	f7e8 ff72 	bl	80040d4 <HW_RTC_GetTimerValue>
 801b1f0:	0003      	movs	r3, r0
 801b1f2:	60fb      	str	r3, [r7, #12]
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	0018      	movs	r0, r3
 801b1f8:	f7e8 feec 	bl	8003fd4 <HW_RTC_ms2Tick>
 801b1fc:	0003      	movs	r3, r0
 801b1fe:	60bb      	str	r3, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 801b200:	68fa      	ldr	r2, [r7, #12]
 801b202:	68bb      	ldr	r3, [r7, #8]
 801b204:	1ad3      	subs	r3, r2, r3
 801b206:	0018      	movs	r0, r3
 801b208:	f7e8 fefc 	bl	8004004 <HW_RTC_Tick2ms>
 801b20c:	0003      	movs	r3, r0
}
 801b20e:	0018      	movs	r0, r3
 801b210:	46bd      	mov	sp, r7
 801b212:	b004      	add	sp, #16
 801b214:	bd80      	pop	{r7, pc}
	...

0801b218 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 801b218:	b580      	push	{r7, lr}
 801b21a:	b084      	sub	sp, #16
 801b21c:	af00      	add	r7, sp, #0
 801b21e:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 801b220:	4b0a      	ldr	r3, [pc, #40]	; (801b24c <TimerExists+0x34>)
 801b222:	681b      	ldr	r3, [r3, #0]
 801b224:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801b226:	e008      	b.n	801b23a <TimerExists+0x22>
  {
    if( cur == obj )
 801b228:	68fa      	ldr	r2, [r7, #12]
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	429a      	cmp	r2, r3
 801b22e:	d101      	bne.n	801b234 <TimerExists+0x1c>
    {
      return true;
 801b230:	2301      	movs	r3, #1
 801b232:	e006      	b.n	801b242 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801b234:	68fb      	ldr	r3, [r7, #12]
 801b236:	695b      	ldr	r3, [r3, #20]
 801b238:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801b23a:	68fb      	ldr	r3, [r7, #12]
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d1f3      	bne.n	801b228 <TimerExists+0x10>
  }
  return false;
 801b240:	2300      	movs	r3, #0
}
 801b242:	0018      	movs	r0, r3
 801b244:	46bd      	mov	sp, r7
 801b246:	b004      	add	sp, #16
 801b248:	bd80      	pop	{r7, pc}
 801b24a:	46c0      	nop			; (mov r8, r8)
 801b24c:	20001300 	.word	0x20001300

0801b250 <TimerSetTimeout>:
static void TimerSetTimeout( TimerEvent_t *obj )
{
 801b250:	b590      	push	{r4, r7, lr}
 801b252:	b085      	sub	sp, #20
 801b254:	af00      	add	r7, sp, #0
 801b256:	6078      	str	r0, [r7, #4]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 801b258:	f7e8 feb6 	bl	8003fc8 <HW_RTC_GetMinimumTimeout>
 801b25c:	0003      	movs	r3, r0
 801b25e:	60fb      	str	r3, [r7, #12]
  obj->IsNext2Expire = true; 
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	2201      	movs	r2, #1
 801b264:	725a      	strb	r2, [r3, #9]

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	681c      	ldr	r4, [r3, #0]
 801b26a:	f7e8 ff1b 	bl	80040a4 <HW_RTC_GetTimerElapsedTime>
 801b26e:	0002      	movs	r2, r0
 801b270:	68fb      	ldr	r3, [r7, #12]
 801b272:	18d3      	adds	r3, r2, r3
 801b274:	429c      	cmp	r4, r3
 801b276:	d206      	bcs.n	801b286 <TimerSetTimeout+0x36>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 801b278:	f7e8 ff14 	bl	80040a4 <HW_RTC_GetTimerElapsedTime>
 801b27c:	0002      	movs	r2, r0
 801b27e:	68fb      	ldr	r3, [r7, #12]
 801b280:	18d2      	adds	r2, r2, r3
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	601a      	str	r2, [r3, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	0018      	movs	r0, r3
 801b28c:	f7e8 feda 	bl	8004044 <HW_RTC_SetAlarm>
}
 801b290:	46c0      	nop			; (mov r8, r8)
 801b292:	46bd      	mov	sp, r7
 801b294:	b005      	add	sp, #20
 801b296:	bd90      	pop	{r4, r7, pc}

0801b298 <TimerInsertTimer>:
    return RtcTempCompensation( period, temperature );
}


static void TimerInsertTimer( TimerEvent_t *obj)
{
 801b298:	b580      	push	{r7, lr}
 801b29a:	b084      	sub	sp, #16
 801b29c:	af00      	add	r7, sp, #0
 801b29e:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 801b2a0:	4b13      	ldr	r3, [pc, #76]	; (801b2f0 <TimerInsertTimer+0x58>)
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	60fb      	str	r3, [r7, #12]
  TimerEvent_t* next = TimerListHead->Next;
 801b2a6:	4b12      	ldr	r3, [pc, #72]	; (801b2f0 <TimerInsertTimer+0x58>)
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	695b      	ldr	r3, [r3, #20]
 801b2ac:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801b2ae:	e012      	b.n	801b2d6 <TimerInsertTimer+0x3e>
  {  
    if( obj->Timestamp  > next->Timestamp )
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	681a      	ldr	r2, [r3, #0]
 801b2b4:	68bb      	ldr	r3, [r7, #8]
 801b2b6:	681b      	ldr	r3, [r3, #0]
 801b2b8:	429a      	cmp	r2, r3
 801b2ba:	d905      	bls.n	801b2c8 <TimerInsertTimer+0x30>
    {
        cur = next;
 801b2bc:	68bb      	ldr	r3, [r7, #8]
 801b2be:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801b2c0:	68bb      	ldr	r3, [r7, #8]
 801b2c2:	695b      	ldr	r3, [r3, #20]
 801b2c4:	60bb      	str	r3, [r7, #8]
 801b2c6:	e006      	b.n	801b2d6 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = obj;
 801b2c8:	68fb      	ldr	r3, [r7, #12]
 801b2ca:	687a      	ldr	r2, [r7, #4]
 801b2cc:	615a      	str	r2, [r3, #20]
        obj->Next = next;
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	68ba      	ldr	r2, [r7, #8]
 801b2d2:	615a      	str	r2, [r3, #20]
        return;
 801b2d4:	e009      	b.n	801b2ea <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801b2d6:	68fb      	ldr	r3, [r7, #12]
 801b2d8:	695b      	ldr	r3, [r3, #20]
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d1e8      	bne.n	801b2b0 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = obj;
 801b2de:	68fb      	ldr	r3, [r7, #12]
 801b2e0:	687a      	ldr	r2, [r7, #4]
 801b2e2:	615a      	str	r2, [r3, #20]
  obj->Next = NULL;
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	2200      	movs	r2, #0
 801b2e8:	615a      	str	r2, [r3, #20]
}
 801b2ea:	46bd      	mov	sp, r7
 801b2ec:	b004      	add	sp, #16
 801b2ee:	bd80      	pop	{r7, pc}
 801b2f0:	20001300 	.word	0x20001300

0801b2f4 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 801b2f4:	b580      	push	{r7, lr}
 801b2f6:	b084      	sub	sp, #16
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 801b2fc:	4b0b      	ldr	r3, [pc, #44]	; (801b32c <TimerInsertNewHeadTimer+0x38>)
 801b2fe:	681b      	ldr	r3, [r3, #0]
 801b300:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801b302:	68fb      	ldr	r3, [r7, #12]
 801b304:	2b00      	cmp	r3, #0
 801b306:	d002      	beq.n	801b30e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsNext2Expire = false;
 801b308:	68fb      	ldr	r3, [r7, #12]
 801b30a:	2200      	movs	r2, #0
 801b30c:	725a      	strb	r2, [r3, #9]
  }

  obj->Next = cur;
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	68fa      	ldr	r2, [r7, #12]
 801b312:	615a      	str	r2, [r3, #20]
  TimerListHead = obj;
 801b314:	4b05      	ldr	r3, [pc, #20]	; (801b32c <TimerInsertNewHeadTimer+0x38>)
 801b316:	687a      	ldr	r2, [r7, #4]
 801b318:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801b31a:	4b04      	ldr	r3, [pc, #16]	; (801b32c <TimerInsertNewHeadTimer+0x38>)
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	0018      	movs	r0, r3
 801b320:	f7ff ff96 	bl	801b250 <TimerSetTimeout>
}
 801b324:	46c0      	nop			; (mov r8, r8)
 801b326:	46bd      	mov	sp, r7
 801b328:	b004      	add	sp, #16
 801b32a:	bd80      	pop	{r7, pc}
 801b32c:	20001300 	.word	0x20001300

0801b330 <TraceInit>:
 */
static void Trace_TxCpltCallback(void);

/* Functions Definition ------------------------------------------------------*/
void TraceInit( void )
{
 801b330:	b580      	push	{r7, lr}
 801b332:	af00      	add	r7, sp, #0
  OutputInit(Trace_TxCpltCallback);
 801b334:	4b06      	ldr	r3, [pc, #24]	; (801b350 <TraceInit+0x20>)
 801b336:	0018      	movs	r0, r3
 801b338:	f7ea fbdc 	bl	8005af4 <vcom_Init>

  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 801b33c:	2380      	movs	r3, #128	; 0x80
 801b33e:	005a      	lsls	r2, r3, #1
 801b340:	4904      	ldr	r1, [pc, #16]	; (801b354 <TraceInit+0x24>)
 801b342:	4b05      	ldr	r3, [pc, #20]	; (801b358 <TraceInit+0x28>)
 801b344:	0018      	movs	r0, r3
 801b346:	f7ff fa3c 	bl	801a7c2 <circular_queue_init>

  return;
 801b34a:	46c0      	nop			; (mov r8, r8)
}
 801b34c:	46bd      	mov	sp, r7
 801b34e:	bd80      	pop	{r7, pc}
 801b350:	0801b471 	.word	0x0801b471
 801b354:	20001314 	.word	0x20001314
 801b358:	20001304 	.word	0x20001304

0801b35c <TraceSend>:

int32_t TraceSend( const char *strFormat, ...)
{
 801b35c:	b40f      	push	{r0, r1, r2, r3}
 801b35e:	b5b0      	push	{r4, r5, r7, lr}
 801b360:	b0c8      	sub	sp, #288	; 0x120
 801b362:	af00      	add	r7, sp, #0
  char buf[TEMPBUFSIZE];
  va_list vaArgs;
  uint8_t* buffer;
  va_start( vaArgs, strFormat);
 801b364:	239a      	movs	r3, #154	; 0x9a
 801b366:	005b      	lsls	r3, r3, #1
 801b368:	18fb      	adds	r3, r7, r3
 801b36a:	60bb      	str	r3, [r7, #8]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 801b36c:	68bc      	ldr	r4, [r7, #8]
 801b36e:	2398      	movs	r3, #152	; 0x98
 801b370:	005b      	lsls	r3, r3, #1
 801b372:	18fb      	adds	r3, r7, r3
 801b374:	681a      	ldr	r2, [r3, #0]
 801b376:	2380      	movs	r3, #128	; 0x80
 801b378:	0059      	lsls	r1, r3, #1
 801b37a:	250c      	movs	r5, #12
 801b37c:	1978      	adds	r0, r7, r5
 801b37e:	0023      	movs	r3, r4
 801b380:	f000 f9ac 	bl	801b6dc <vsniprintf>
 801b384:	0003      	movs	r3, r0
 801b386:	b29a      	uxth	r2, r3
 801b388:	4b36      	ldr	r3, [pc, #216]	; (801b464 <TraceSend+0x108>)
 801b38a:	2190      	movs	r1, #144	; 0x90
 801b38c:	0049      	lsls	r1, r1, #1
 801b38e:	468c      	mov	ip, r1
 801b390:	44bc      	add	ip, r7
 801b392:	4463      	add	r3, ip
 801b394:	801a      	strh	r2, [r3, #0]
  va_end(vaArgs);
  int status=0;
 801b396:	2300      	movs	r3, #0
 801b398:	248e      	movs	r4, #142	; 0x8e
 801b39a:	0064      	lsls	r4, r4, #1
 801b39c:	193a      	adds	r2, r7, r4
 801b39e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b3a0:	f3ef 8310 	mrs	r3, PRIMASK
 801b3a4:	228a      	movs	r2, #138	; 0x8a
 801b3a6:	0052      	lsls	r2, r2, #1
 801b3a8:	18b9      	adds	r1, r7, r2
 801b3aa:	600b      	str	r3, [r1, #0]
  return(result);
 801b3ac:	18bb      	adds	r3, r7, r2
 801b3ae:	681b      	ldr	r3, [r3, #0]
  
  BACKUP_PRIMASK();
 801b3b0:	228c      	movs	r2, #140	; 0x8c
 801b3b2:	0052      	lsls	r2, r2, #1
 801b3b4:	18ba      	adds	r2, r7, r2
 801b3b6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801b3b8:	b672      	cpsid	i
  
  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_15);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_15);
  status =circular_queue_add(&MsgTraceQueue,(uint8_t*)buf, bufSize);
 801b3ba:	4b2a      	ldr	r3, [pc, #168]	; (801b464 <TraceSend+0x108>)
 801b3bc:	2290      	movs	r2, #144	; 0x90
 801b3be:	0052      	lsls	r2, r2, #1
 801b3c0:	4694      	mov	ip, r2
 801b3c2:	44bc      	add	ip, r7
 801b3c4:	4463      	add	r3, ip
 801b3c6:	881a      	ldrh	r2, [r3, #0]
 801b3c8:	1979      	adds	r1, r7, r5
 801b3ca:	4b27      	ldr	r3, [pc, #156]	; (801b468 <TraceSend+0x10c>)
 801b3cc:	0018      	movs	r0, r3
 801b3ce:	f7ff fa16 	bl	801a7fe <circular_queue_add>
 801b3d2:	0003      	movs	r3, r0
 801b3d4:	193a      	adds	r2, r7, r4
 801b3d6:	6013      	str	r3, [r2, #0]
  
  if ((status==0 ) && (TracePeripheralReady==SET))
 801b3d8:	193b      	adds	r3, r7, r4
 801b3da:	681b      	ldr	r3, [r3, #0]
 801b3dc:	2b00      	cmp	r3, #0
 801b3de:	d12a      	bne.n	801b436 <TraceSend+0xda>
 801b3e0:	4b22      	ldr	r3, [pc, #136]	; (801b46c <TraceSend+0x110>)
 801b3e2:	781b      	ldrb	r3, [r3, #0]
 801b3e4:	b2db      	uxtb	r3, r3
 801b3e6:	2b01      	cmp	r3, #1
 801b3e8:	d125      	bne.n	801b436 <TraceSend+0xda>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 801b3ea:	1cba      	adds	r2, r7, #2
 801b3ec:	1d39      	adds	r1, r7, #4
 801b3ee:	4b1e      	ldr	r3, [pc, #120]	; (801b468 <TraceSend+0x10c>)
 801b3f0:	0018      	movs	r0, r3
 801b3f2:	f7ff fac9 	bl	801a988 <circular_queue_get>
    TracePeripheralReady = RESET;
 801b3f6:	4b1d      	ldr	r3, [pc, #116]	; (801b46c <TraceSend+0x110>)
 801b3f8:	2200      	movs	r2, #0
 801b3fa:	701a      	strb	r2, [r3, #0]
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_12);
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 801b3fc:	2101      	movs	r1, #1
 801b3fe:	2020      	movs	r0, #32
 801b400:	f7ff f94e 	bl	801a6a0 <LPM_SetStopMode>
 801b404:	238c      	movs	r3, #140	; 0x8c
 801b406:	005b      	lsls	r3, r3, #1
 801b408:	18fb      	adds	r3, r7, r3
 801b40a:	681b      	ldr	r3, [r3, #0]
 801b40c:	2288      	movs	r2, #136	; 0x88
 801b40e:	0052      	lsls	r2, r2, #1
 801b410:	18b9      	adds	r1, r7, r2
 801b412:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b414:	18bb      	adds	r3, r7, r2
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	f383 8810 	msr	PRIMASK, r3

    RESTORE_PRIMASK();
    OutputTrace(buffer, bufSize);
 801b41c:	687a      	ldr	r2, [r7, #4]
 801b41e:	4b11      	ldr	r3, [pc, #68]	; (801b464 <TraceSend+0x108>)
 801b420:	2190      	movs	r1, #144	; 0x90
 801b422:	0049      	lsls	r1, r1, #1
 801b424:	468c      	mov	ip, r1
 801b426:	44bc      	add	ip, r7
 801b428:	4463      	add	r3, ip
 801b42a:	881b      	ldrh	r3, [r3, #0]
 801b42c:	0019      	movs	r1, r3
 801b42e:	0010      	movs	r0, r2
 801b430:	f7ea fb90 	bl	8005b54 <vcom_Trace>
 801b434:	e00b      	b.n	801b44e <TraceSend+0xf2>
 801b436:	238c      	movs	r3, #140	; 0x8c
 801b438:	005b      	lsls	r3, r3, #1
 801b43a:	18fb      	adds	r3, r7, r3
 801b43c:	681b      	ldr	r3, [r3, #0]
 801b43e:	2286      	movs	r2, #134	; 0x86
 801b440:	0052      	lsls	r2, r2, #1
 801b442:	18b9      	adds	r1, r7, r2
 801b444:	600b      	str	r3, [r1, #0]
 801b446:	18bb      	adds	r3, r7, r2
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	f383 8810 	msr	PRIMASK, r3
  else
  {
    RESTORE_PRIMASK();
  }
  
  return status;
 801b44e:	238e      	movs	r3, #142	; 0x8e
 801b450:	005b      	lsls	r3, r3, #1
 801b452:	18fb      	adds	r3, r7, r3
 801b454:	681b      	ldr	r3, [r3, #0]
}
 801b456:	0018      	movs	r0, r3
 801b458:	46bd      	mov	sp, r7
 801b45a:	b048      	add	sp, #288	; 0x120
 801b45c:	bcb0      	pop	{r4, r5, r7}
 801b45e:	bc08      	pop	{r3}
 801b460:	b004      	add	sp, #16
 801b462:	4718      	bx	r3
 801b464:	fffffee2 	.word	0xfffffee2
 801b468:	20001304 	.word	0x20001304
 801b46c:	200000ec 	.word	0x200000ec

0801b470 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 801b470:	b580      	push	{r7, lr}
 801b472:	b088      	sub	sp, #32
 801b474:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801b476:	f3ef 8310 	mrs	r3, PRIMASK
 801b47a:	617b      	str	r3, [r7, #20]
  return(result);
 801b47c:	697b      	ldr	r3, [r7, #20]
  int status;
  uint8_t* buffer;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 801b47e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b480:	b672      	cpsid	i

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  circular_queue_remove(&MsgTraceQueue);
 801b482:	4b18      	ldr	r3, [pc, #96]	; (801b4e4 <Trace_TxCpltCallback+0x74>)
 801b484:	0018      	movs	r0, r3
 801b486:	f7ff fad9 	bl	801aa3c <circular_queue_remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  status=circular_queue_sense(&MsgTraceQueue);
 801b48a:	4b16      	ldr	r3, [pc, #88]	; (801b4e4 <Trace_TxCpltCallback+0x74>)
 801b48c:	0018      	movs	r0, r3
 801b48e:	f7ff fb35 	bl	801aafc <circular_queue_sense>
 801b492:	0003      	movs	r3, r0
 801b494:	61bb      	str	r3, [r7, #24]

  if ( status == 0) 
 801b496:	69bb      	ldr	r3, [r7, #24]
 801b498:	2b00      	cmp	r3, #0
 801b49a:	d113      	bne.n	801b4c4 <Trace_TxCpltCallback+0x54>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 801b49c:	1dba      	adds	r2, r7, #6
 801b49e:	2308      	movs	r3, #8
 801b4a0:	18f9      	adds	r1, r7, r3
 801b4a2:	4b10      	ldr	r3, [pc, #64]	; (801b4e4 <Trace_TxCpltCallback+0x74>)
 801b4a4:	0018      	movs	r0, r3
 801b4a6:	f7ff fa6f 	bl	801a988 <circular_queue_get>
 801b4aa:	69fb      	ldr	r3, [r7, #28]
 801b4ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b4ae:	693b      	ldr	r3, [r7, #16]
 801b4b0:	f383 8810 	msr	PRIMASK, r3
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace(buffer, bufSize);
 801b4b4:	68ba      	ldr	r2, [r7, #8]
 801b4b6:	1dbb      	adds	r3, r7, #6
 801b4b8:	881b      	ldrh	r3, [r3, #0]
 801b4ba:	0019      	movs	r1, r3
 801b4bc:	0010      	movs	r0, r2
 801b4be:	f7ea fb49 	bl	8005b54 <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 801b4c2:	e00b      	b.n	801b4dc <Trace_TxCpltCallback+0x6c>
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 801b4c4:	2100      	movs	r1, #0
 801b4c6:	2020      	movs	r0, #32
 801b4c8:	f7ff f8ea 	bl	801a6a0 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 801b4cc:	4b06      	ldr	r3, [pc, #24]	; (801b4e8 <Trace_TxCpltCallback+0x78>)
 801b4ce:	2201      	movs	r2, #1
 801b4d0:	701a      	strb	r2, [r3, #0]
 801b4d2:	69fb      	ldr	r3, [r7, #28]
 801b4d4:	60fb      	str	r3, [r7, #12]
 801b4d6:	68fb      	ldr	r3, [r7, #12]
 801b4d8:	f383 8810 	msr	PRIMASK, r3
}
 801b4dc:	46c0      	nop			; (mov r8, r8)
 801b4de:	46bd      	mov	sp, r7
 801b4e0:	b008      	add	sp, #32
 801b4e2:	bd80      	pop	{r7, pc}
 801b4e4:	20001304 	.word	0x20001304
 801b4e8:	200000ec 	.word	0x200000ec

0801b4ec <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 801b4ec:	b580      	push	{r7, lr}
 801b4ee:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801b4f0:	4b08      	ldr	r3, [pc, #32]	; (801b514 <rand1+0x28>)
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	4a08      	ldr	r2, [pc, #32]	; (801b518 <rand1+0x2c>)
 801b4f6:	4353      	muls	r3, r2
 801b4f8:	4a08      	ldr	r2, [pc, #32]	; (801b51c <rand1+0x30>)
 801b4fa:	189a      	adds	r2, r3, r2
 801b4fc:	4b05      	ldr	r3, [pc, #20]	; (801b514 <rand1+0x28>)
 801b4fe:	601a      	str	r2, [r3, #0]
 801b500:	4b04      	ldr	r3, [pc, #16]	; (801b514 <rand1+0x28>)
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	4906      	ldr	r1, [pc, #24]	; (801b520 <rand1+0x34>)
 801b506:	0018      	movs	r0, r3
 801b508:	f7e4 fe84 	bl	8000214 <__aeabi_uidivmod>
 801b50c:	000b      	movs	r3, r1
}
 801b50e:	0018      	movs	r0, r3
 801b510:	46bd      	mov	sp, r7
 801b512:	bd80      	pop	{r7, pc}
 801b514:	200000f0 	.word	0x200000f0
 801b518:	41c64e6d 	.word	0x41c64e6d
 801b51c:	00003039 	.word	0x00003039
 801b520:	7fffffff 	.word	0x7fffffff

0801b524 <srand1>:

void srand1( uint32_t seed )
{
 801b524:	b580      	push	{r7, lr}
 801b526:	b082      	sub	sp, #8
 801b528:	af00      	add	r7, sp, #0
 801b52a:	6078      	str	r0, [r7, #4]
    next = seed;
 801b52c:	4b03      	ldr	r3, [pc, #12]	; (801b53c <srand1+0x18>)
 801b52e:	687a      	ldr	r2, [r7, #4]
 801b530:	601a      	str	r2, [r3, #0]
}
 801b532:	46c0      	nop			; (mov r8, r8)
 801b534:	46bd      	mov	sp, r7
 801b536:	b002      	add	sp, #8
 801b538:	bd80      	pop	{r7, pc}
 801b53a:	46c0      	nop			; (mov r8, r8)
 801b53c:	200000f0 	.word	0x200000f0

0801b540 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801b540:	b580      	push	{r7, lr}
 801b542:	b082      	sub	sp, #8
 801b544:	af00      	add	r7, sp, #0
 801b546:	6078      	str	r0, [r7, #4]
 801b548:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801b54a:	f7ff ffcf 	bl	801b4ec <rand1>
 801b54e:	683a      	ldr	r2, [r7, #0]
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	1ad3      	subs	r3, r2, r3
 801b554:	3301      	adds	r3, #1
 801b556:	0019      	movs	r1, r3
 801b558:	f7e4 ff46 	bl	80003e8 <__aeabi_idivmod>
 801b55c:	000b      	movs	r3, r1
 801b55e:	001a      	movs	r2, r3
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	18d3      	adds	r3, r2, r3
}
 801b564:	0018      	movs	r0, r3
 801b566:	46bd      	mov	sp, r7
 801b568:	b002      	add	sp, #8
 801b56a:	bd80      	pop	{r7, pc}

0801b56c <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b56c:	b580      	push	{r7, lr}
 801b56e:	b084      	sub	sp, #16
 801b570:	af00      	add	r7, sp, #0
 801b572:	60f8      	str	r0, [r7, #12]
 801b574:	60b9      	str	r1, [r7, #8]
 801b576:	1dbb      	adds	r3, r7, #6
 801b578:	801a      	strh	r2, [r3, #0]
    while( size-- )
 801b57a:	e007      	b.n	801b58c <memcpy1+0x20>
    {
        *dst++ = *src++;
 801b57c:	68ba      	ldr	r2, [r7, #8]
 801b57e:	1c53      	adds	r3, r2, #1
 801b580:	60bb      	str	r3, [r7, #8]
 801b582:	68fb      	ldr	r3, [r7, #12]
 801b584:	1c59      	adds	r1, r3, #1
 801b586:	60f9      	str	r1, [r7, #12]
 801b588:	7812      	ldrb	r2, [r2, #0]
 801b58a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b58c:	1dbb      	adds	r3, r7, #6
 801b58e:	881b      	ldrh	r3, [r3, #0]
 801b590:	1dba      	adds	r2, r7, #6
 801b592:	1e59      	subs	r1, r3, #1
 801b594:	8011      	strh	r1, [r2, #0]
 801b596:	2b00      	cmp	r3, #0
 801b598:	d1f0      	bne.n	801b57c <memcpy1+0x10>
    }
}
 801b59a:	46c0      	nop			; (mov r8, r8)
 801b59c:	46bd      	mov	sp, r7
 801b59e:	b004      	add	sp, #16
 801b5a0:	bd80      	pop	{r7, pc}

0801b5a2 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b5a2:	b580      	push	{r7, lr}
 801b5a4:	b084      	sub	sp, #16
 801b5a6:	af00      	add	r7, sp, #0
 801b5a8:	60f8      	str	r0, [r7, #12]
 801b5aa:	60b9      	str	r1, [r7, #8]
 801b5ac:	1dbb      	adds	r3, r7, #6
 801b5ae:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 801b5b0:	1dbb      	adds	r3, r7, #6
 801b5b2:	881b      	ldrh	r3, [r3, #0]
 801b5b4:	3b01      	subs	r3, #1
 801b5b6:	68fa      	ldr	r2, [r7, #12]
 801b5b8:	18d3      	adds	r3, r2, r3
 801b5ba:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801b5bc:	e007      	b.n	801b5ce <memcpyr+0x2c>
    {
        *dst-- = *src++;
 801b5be:	68ba      	ldr	r2, [r7, #8]
 801b5c0:	1c53      	adds	r3, r2, #1
 801b5c2:	60bb      	str	r3, [r7, #8]
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	1e59      	subs	r1, r3, #1
 801b5c8:	60f9      	str	r1, [r7, #12]
 801b5ca:	7812      	ldrb	r2, [r2, #0]
 801b5cc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b5ce:	1dbb      	adds	r3, r7, #6
 801b5d0:	881b      	ldrh	r3, [r3, #0]
 801b5d2:	1dba      	adds	r2, r7, #6
 801b5d4:	1e59      	subs	r1, r3, #1
 801b5d6:	8011      	strh	r1, [r2, #0]
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	d1f0      	bne.n	801b5be <memcpyr+0x1c>
    }
}
 801b5dc:	46c0      	nop			; (mov r8, r8)
 801b5de:	46bd      	mov	sp, r7
 801b5e0:	b004      	add	sp, #16
 801b5e2:	bd80      	pop	{r7, pc}

0801b5e4 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801b5e4:	b580      	push	{r7, lr}
 801b5e6:	b082      	sub	sp, #8
 801b5e8:	af00      	add	r7, sp, #0
 801b5ea:	6078      	str	r0, [r7, #4]
 801b5ec:	0008      	movs	r0, r1
 801b5ee:	0011      	movs	r1, r2
 801b5f0:	1cfb      	adds	r3, r7, #3
 801b5f2:	1c02      	adds	r2, r0, #0
 801b5f4:	701a      	strb	r2, [r3, #0]
 801b5f6:	003b      	movs	r3, r7
 801b5f8:	1c0a      	adds	r2, r1, #0
 801b5fa:	801a      	strh	r2, [r3, #0]
    while( size-- )
 801b5fc:	e005      	b.n	801b60a <memset1+0x26>
    {
        *dst++ = value;
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	1c5a      	adds	r2, r3, #1
 801b602:	607a      	str	r2, [r7, #4]
 801b604:	1cfa      	adds	r2, r7, #3
 801b606:	7812      	ldrb	r2, [r2, #0]
 801b608:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b60a:	003b      	movs	r3, r7
 801b60c:	881b      	ldrh	r3, [r3, #0]
 801b60e:	003a      	movs	r2, r7
 801b610:	1e59      	subs	r1, r3, #1
 801b612:	8011      	strh	r1, [r2, #0]
 801b614:	2b00      	cmp	r3, #0
 801b616:	d1f2      	bne.n	801b5fe <memset1+0x1a>
    }
}
 801b618:	46c0      	nop			; (mov r8, r8)
 801b61a:	46bd      	mov	sp, r7
 801b61c:	b002      	add	sp, #8
 801b61e:	bd80      	pop	{r7, pc}

0801b620 <__errno>:
 801b620:	4b01      	ldr	r3, [pc, #4]	; (801b628 <__errno+0x8>)
 801b622:	6818      	ldr	r0, [r3, #0]
 801b624:	4770      	bx	lr
 801b626:	46c0      	nop			; (mov r8, r8)
 801b628:	200000f4 	.word	0x200000f4

0801b62c <__libc_init_array>:
 801b62c:	b570      	push	{r4, r5, r6, lr}
 801b62e:	2600      	movs	r6, #0
 801b630:	4d0c      	ldr	r5, [pc, #48]	; (801b664 <__libc_init_array+0x38>)
 801b632:	4c0d      	ldr	r4, [pc, #52]	; (801b668 <__libc_init_array+0x3c>)
 801b634:	1b64      	subs	r4, r4, r5
 801b636:	10a4      	asrs	r4, r4, #2
 801b638:	42a6      	cmp	r6, r4
 801b63a:	d109      	bne.n	801b650 <__libc_init_array+0x24>
 801b63c:	2600      	movs	r6, #0
 801b63e:	f000 fd8f 	bl	801c160 <_init>
 801b642:	4d0a      	ldr	r5, [pc, #40]	; (801b66c <__libc_init_array+0x40>)
 801b644:	4c0a      	ldr	r4, [pc, #40]	; (801b670 <__libc_init_array+0x44>)
 801b646:	1b64      	subs	r4, r4, r5
 801b648:	10a4      	asrs	r4, r4, #2
 801b64a:	42a6      	cmp	r6, r4
 801b64c:	d105      	bne.n	801b65a <__libc_init_array+0x2e>
 801b64e:	bd70      	pop	{r4, r5, r6, pc}
 801b650:	00b3      	lsls	r3, r6, #2
 801b652:	58eb      	ldr	r3, [r5, r3]
 801b654:	4798      	blx	r3
 801b656:	3601      	adds	r6, #1
 801b658:	e7ee      	b.n	801b638 <__libc_init_array+0xc>
 801b65a:	00b3      	lsls	r3, r6, #2
 801b65c:	58eb      	ldr	r3, [r5, r3]
 801b65e:	4798      	blx	r3
 801b660:	3601      	adds	r6, #1
 801b662:	e7f2      	b.n	801b64a <__libc_init_array+0x1e>
 801b664:	0801d374 	.word	0x0801d374
 801b668:	0801d374 	.word	0x0801d374
 801b66c:	0801d374 	.word	0x0801d374
 801b670:	0801d378 	.word	0x0801d378

0801b674 <memset>:
 801b674:	0003      	movs	r3, r0
 801b676:	1812      	adds	r2, r2, r0
 801b678:	4293      	cmp	r3, r2
 801b67a:	d100      	bne.n	801b67e <memset+0xa>
 801b67c:	4770      	bx	lr
 801b67e:	7019      	strb	r1, [r3, #0]
 801b680:	3301      	adds	r3, #1
 801b682:	e7f9      	b.n	801b678 <memset+0x4>

0801b684 <_vsniprintf_r>:
 801b684:	b530      	push	{r4, r5, lr}
 801b686:	0014      	movs	r4, r2
 801b688:	b09b      	sub	sp, #108	; 0x6c
 801b68a:	0005      	movs	r5, r0
 801b68c:	001a      	movs	r2, r3
 801b68e:	2c00      	cmp	r4, #0
 801b690:	da05      	bge.n	801b69e <_vsniprintf_r+0x1a>
 801b692:	238b      	movs	r3, #139	; 0x8b
 801b694:	6003      	str	r3, [r0, #0]
 801b696:	2001      	movs	r0, #1
 801b698:	4240      	negs	r0, r0
 801b69a:	b01b      	add	sp, #108	; 0x6c
 801b69c:	bd30      	pop	{r4, r5, pc}
 801b69e:	2382      	movs	r3, #130	; 0x82
 801b6a0:	4668      	mov	r0, sp
 801b6a2:	009b      	lsls	r3, r3, #2
 801b6a4:	8183      	strh	r3, [r0, #12]
 801b6a6:	2300      	movs	r3, #0
 801b6a8:	9100      	str	r1, [sp, #0]
 801b6aa:	9104      	str	r1, [sp, #16]
 801b6ac:	429c      	cmp	r4, r3
 801b6ae:	d000      	beq.n	801b6b2 <_vsniprintf_r+0x2e>
 801b6b0:	1e63      	subs	r3, r4, #1
 801b6b2:	9302      	str	r3, [sp, #8]
 801b6b4:	9305      	str	r3, [sp, #20]
 801b6b6:	2301      	movs	r3, #1
 801b6b8:	4669      	mov	r1, sp
 801b6ba:	425b      	negs	r3, r3
 801b6bc:	81cb      	strh	r3, [r1, #14]
 801b6be:	0028      	movs	r0, r5
 801b6c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b6c2:	f000 f8d7 	bl	801b874 <_svfiprintf_r>
 801b6c6:	1c43      	adds	r3, r0, #1
 801b6c8:	da01      	bge.n	801b6ce <_vsniprintf_r+0x4a>
 801b6ca:	238b      	movs	r3, #139	; 0x8b
 801b6cc:	602b      	str	r3, [r5, #0]
 801b6ce:	2c00      	cmp	r4, #0
 801b6d0:	d0e3      	beq.n	801b69a <_vsniprintf_r+0x16>
 801b6d2:	2300      	movs	r3, #0
 801b6d4:	9a00      	ldr	r2, [sp, #0]
 801b6d6:	7013      	strb	r3, [r2, #0]
 801b6d8:	e7df      	b.n	801b69a <_vsniprintf_r+0x16>
	...

0801b6dc <vsniprintf>:
 801b6dc:	b507      	push	{r0, r1, r2, lr}
 801b6de:	9300      	str	r3, [sp, #0]
 801b6e0:	0013      	movs	r3, r2
 801b6e2:	000a      	movs	r2, r1
 801b6e4:	0001      	movs	r1, r0
 801b6e6:	4802      	ldr	r0, [pc, #8]	; (801b6f0 <vsniprintf+0x14>)
 801b6e8:	6800      	ldr	r0, [r0, #0]
 801b6ea:	f7ff ffcb 	bl	801b684 <_vsniprintf_r>
 801b6ee:	bd0e      	pop	{r1, r2, r3, pc}
 801b6f0:	200000f4 	.word	0x200000f4

0801b6f4 <_malloc_r>:
 801b6f4:	2303      	movs	r3, #3
 801b6f6:	b570      	push	{r4, r5, r6, lr}
 801b6f8:	1ccd      	adds	r5, r1, #3
 801b6fa:	439d      	bics	r5, r3
 801b6fc:	3508      	adds	r5, #8
 801b6fe:	0006      	movs	r6, r0
 801b700:	2d0c      	cmp	r5, #12
 801b702:	d21e      	bcs.n	801b742 <_malloc_r+0x4e>
 801b704:	250c      	movs	r5, #12
 801b706:	42a9      	cmp	r1, r5
 801b708:	d81d      	bhi.n	801b746 <_malloc_r+0x52>
 801b70a:	0030      	movs	r0, r6
 801b70c:	f000 fb5f 	bl	801bdce <__malloc_lock>
 801b710:	4a25      	ldr	r2, [pc, #148]	; (801b7a8 <_malloc_r+0xb4>)
 801b712:	6814      	ldr	r4, [r2, #0]
 801b714:	0021      	movs	r1, r4
 801b716:	2900      	cmp	r1, #0
 801b718:	d119      	bne.n	801b74e <_malloc_r+0x5a>
 801b71a:	4c24      	ldr	r4, [pc, #144]	; (801b7ac <_malloc_r+0xb8>)
 801b71c:	6823      	ldr	r3, [r4, #0]
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d103      	bne.n	801b72a <_malloc_r+0x36>
 801b722:	0030      	movs	r0, r6
 801b724:	f000 fb1a 	bl	801bd5c <_sbrk_r>
 801b728:	6020      	str	r0, [r4, #0]
 801b72a:	0029      	movs	r1, r5
 801b72c:	0030      	movs	r0, r6
 801b72e:	f000 fb15 	bl	801bd5c <_sbrk_r>
 801b732:	1c43      	adds	r3, r0, #1
 801b734:	d12b      	bne.n	801b78e <_malloc_r+0x9a>
 801b736:	230c      	movs	r3, #12
 801b738:	0030      	movs	r0, r6
 801b73a:	6033      	str	r3, [r6, #0]
 801b73c:	f000 fb48 	bl	801bdd0 <__malloc_unlock>
 801b740:	e003      	b.n	801b74a <_malloc_r+0x56>
 801b742:	2d00      	cmp	r5, #0
 801b744:	dadf      	bge.n	801b706 <_malloc_r+0x12>
 801b746:	230c      	movs	r3, #12
 801b748:	6033      	str	r3, [r6, #0]
 801b74a:	2000      	movs	r0, #0
 801b74c:	bd70      	pop	{r4, r5, r6, pc}
 801b74e:	680b      	ldr	r3, [r1, #0]
 801b750:	1b5b      	subs	r3, r3, r5
 801b752:	d419      	bmi.n	801b788 <_malloc_r+0x94>
 801b754:	2b0b      	cmp	r3, #11
 801b756:	d903      	bls.n	801b760 <_malloc_r+0x6c>
 801b758:	600b      	str	r3, [r1, #0]
 801b75a:	18cc      	adds	r4, r1, r3
 801b75c:	6025      	str	r5, [r4, #0]
 801b75e:	e003      	b.n	801b768 <_malloc_r+0x74>
 801b760:	684b      	ldr	r3, [r1, #4]
 801b762:	428c      	cmp	r4, r1
 801b764:	d10d      	bne.n	801b782 <_malloc_r+0x8e>
 801b766:	6013      	str	r3, [r2, #0]
 801b768:	0030      	movs	r0, r6
 801b76a:	f000 fb31 	bl	801bdd0 <__malloc_unlock>
 801b76e:	0020      	movs	r0, r4
 801b770:	2207      	movs	r2, #7
 801b772:	300b      	adds	r0, #11
 801b774:	1d23      	adds	r3, r4, #4
 801b776:	4390      	bics	r0, r2
 801b778:	1ac3      	subs	r3, r0, r3
 801b77a:	d0e7      	beq.n	801b74c <_malloc_r+0x58>
 801b77c:	425a      	negs	r2, r3
 801b77e:	50e2      	str	r2, [r4, r3]
 801b780:	e7e4      	b.n	801b74c <_malloc_r+0x58>
 801b782:	6063      	str	r3, [r4, #4]
 801b784:	000c      	movs	r4, r1
 801b786:	e7ef      	b.n	801b768 <_malloc_r+0x74>
 801b788:	000c      	movs	r4, r1
 801b78a:	6849      	ldr	r1, [r1, #4]
 801b78c:	e7c3      	b.n	801b716 <_malloc_r+0x22>
 801b78e:	2303      	movs	r3, #3
 801b790:	1cc4      	adds	r4, r0, #3
 801b792:	439c      	bics	r4, r3
 801b794:	42a0      	cmp	r0, r4
 801b796:	d0e1      	beq.n	801b75c <_malloc_r+0x68>
 801b798:	1a21      	subs	r1, r4, r0
 801b79a:	0030      	movs	r0, r6
 801b79c:	f000 fade 	bl	801bd5c <_sbrk_r>
 801b7a0:	1c43      	adds	r3, r0, #1
 801b7a2:	d1db      	bne.n	801b75c <_malloc_r+0x68>
 801b7a4:	e7c7      	b.n	801b736 <_malloc_r+0x42>
 801b7a6:	46c0      	nop			; (mov r8, r8)
 801b7a8:	20001414 	.word	0x20001414
 801b7ac:	20001418 	.word	0x20001418

0801b7b0 <__ssputs_r>:
 801b7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7b2:	688e      	ldr	r6, [r1, #8]
 801b7b4:	b085      	sub	sp, #20
 801b7b6:	0007      	movs	r7, r0
 801b7b8:	000c      	movs	r4, r1
 801b7ba:	9203      	str	r2, [sp, #12]
 801b7bc:	9301      	str	r3, [sp, #4]
 801b7be:	429e      	cmp	r6, r3
 801b7c0:	d83c      	bhi.n	801b83c <__ssputs_r+0x8c>
 801b7c2:	2390      	movs	r3, #144	; 0x90
 801b7c4:	898a      	ldrh	r2, [r1, #12]
 801b7c6:	00db      	lsls	r3, r3, #3
 801b7c8:	421a      	tst	r2, r3
 801b7ca:	d034      	beq.n	801b836 <__ssputs_r+0x86>
 801b7cc:	2503      	movs	r5, #3
 801b7ce:	6909      	ldr	r1, [r1, #16]
 801b7d0:	6823      	ldr	r3, [r4, #0]
 801b7d2:	1a5b      	subs	r3, r3, r1
 801b7d4:	9302      	str	r3, [sp, #8]
 801b7d6:	6963      	ldr	r3, [r4, #20]
 801b7d8:	9802      	ldr	r0, [sp, #8]
 801b7da:	435d      	muls	r5, r3
 801b7dc:	0feb      	lsrs	r3, r5, #31
 801b7de:	195d      	adds	r5, r3, r5
 801b7e0:	9b01      	ldr	r3, [sp, #4]
 801b7e2:	106d      	asrs	r5, r5, #1
 801b7e4:	3301      	adds	r3, #1
 801b7e6:	181b      	adds	r3, r3, r0
 801b7e8:	42ab      	cmp	r3, r5
 801b7ea:	d900      	bls.n	801b7ee <__ssputs_r+0x3e>
 801b7ec:	001d      	movs	r5, r3
 801b7ee:	0553      	lsls	r3, r2, #21
 801b7f0:	d532      	bpl.n	801b858 <__ssputs_r+0xa8>
 801b7f2:	0029      	movs	r1, r5
 801b7f4:	0038      	movs	r0, r7
 801b7f6:	f7ff ff7d 	bl	801b6f4 <_malloc_r>
 801b7fa:	1e06      	subs	r6, r0, #0
 801b7fc:	d109      	bne.n	801b812 <__ssputs_r+0x62>
 801b7fe:	230c      	movs	r3, #12
 801b800:	603b      	str	r3, [r7, #0]
 801b802:	2340      	movs	r3, #64	; 0x40
 801b804:	2001      	movs	r0, #1
 801b806:	89a2      	ldrh	r2, [r4, #12]
 801b808:	4240      	negs	r0, r0
 801b80a:	4313      	orrs	r3, r2
 801b80c:	81a3      	strh	r3, [r4, #12]
 801b80e:	b005      	add	sp, #20
 801b810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b812:	9a02      	ldr	r2, [sp, #8]
 801b814:	6921      	ldr	r1, [r4, #16]
 801b816:	f000 fabe 	bl	801bd96 <memcpy>
 801b81a:	89a3      	ldrh	r3, [r4, #12]
 801b81c:	4a14      	ldr	r2, [pc, #80]	; (801b870 <__ssputs_r+0xc0>)
 801b81e:	401a      	ands	r2, r3
 801b820:	2380      	movs	r3, #128	; 0x80
 801b822:	4313      	orrs	r3, r2
 801b824:	81a3      	strh	r3, [r4, #12]
 801b826:	9b02      	ldr	r3, [sp, #8]
 801b828:	6126      	str	r6, [r4, #16]
 801b82a:	18f6      	adds	r6, r6, r3
 801b82c:	6026      	str	r6, [r4, #0]
 801b82e:	6165      	str	r5, [r4, #20]
 801b830:	9e01      	ldr	r6, [sp, #4]
 801b832:	1aed      	subs	r5, r5, r3
 801b834:	60a5      	str	r5, [r4, #8]
 801b836:	9b01      	ldr	r3, [sp, #4]
 801b838:	429e      	cmp	r6, r3
 801b83a:	d900      	bls.n	801b83e <__ssputs_r+0x8e>
 801b83c:	9e01      	ldr	r6, [sp, #4]
 801b83e:	0032      	movs	r2, r6
 801b840:	9903      	ldr	r1, [sp, #12]
 801b842:	6820      	ldr	r0, [r4, #0]
 801b844:	f000 fab0 	bl	801bda8 <memmove>
 801b848:	68a3      	ldr	r3, [r4, #8]
 801b84a:	2000      	movs	r0, #0
 801b84c:	1b9b      	subs	r3, r3, r6
 801b84e:	60a3      	str	r3, [r4, #8]
 801b850:	6823      	ldr	r3, [r4, #0]
 801b852:	199e      	adds	r6, r3, r6
 801b854:	6026      	str	r6, [r4, #0]
 801b856:	e7da      	b.n	801b80e <__ssputs_r+0x5e>
 801b858:	002a      	movs	r2, r5
 801b85a:	0038      	movs	r0, r7
 801b85c:	f000 fb04 	bl	801be68 <_realloc_r>
 801b860:	1e06      	subs	r6, r0, #0
 801b862:	d1e0      	bne.n	801b826 <__ssputs_r+0x76>
 801b864:	6921      	ldr	r1, [r4, #16]
 801b866:	0038      	movs	r0, r7
 801b868:	f000 fab4 	bl	801bdd4 <_free_r>
 801b86c:	e7c7      	b.n	801b7fe <__ssputs_r+0x4e>
 801b86e:	46c0      	nop			; (mov r8, r8)
 801b870:	fffffb7f 	.word	0xfffffb7f

0801b874 <_svfiprintf_r>:
 801b874:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b876:	b0a1      	sub	sp, #132	; 0x84
 801b878:	9003      	str	r0, [sp, #12]
 801b87a:	001d      	movs	r5, r3
 801b87c:	898b      	ldrh	r3, [r1, #12]
 801b87e:	000f      	movs	r7, r1
 801b880:	0016      	movs	r6, r2
 801b882:	061b      	lsls	r3, r3, #24
 801b884:	d511      	bpl.n	801b8aa <_svfiprintf_r+0x36>
 801b886:	690b      	ldr	r3, [r1, #16]
 801b888:	2b00      	cmp	r3, #0
 801b88a:	d10e      	bne.n	801b8aa <_svfiprintf_r+0x36>
 801b88c:	2140      	movs	r1, #64	; 0x40
 801b88e:	f7ff ff31 	bl	801b6f4 <_malloc_r>
 801b892:	6038      	str	r0, [r7, #0]
 801b894:	6138      	str	r0, [r7, #16]
 801b896:	2800      	cmp	r0, #0
 801b898:	d105      	bne.n	801b8a6 <_svfiprintf_r+0x32>
 801b89a:	230c      	movs	r3, #12
 801b89c:	9a03      	ldr	r2, [sp, #12]
 801b89e:	3801      	subs	r0, #1
 801b8a0:	6013      	str	r3, [r2, #0]
 801b8a2:	b021      	add	sp, #132	; 0x84
 801b8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b8a6:	2340      	movs	r3, #64	; 0x40
 801b8a8:	617b      	str	r3, [r7, #20]
 801b8aa:	2300      	movs	r3, #0
 801b8ac:	ac08      	add	r4, sp, #32
 801b8ae:	6163      	str	r3, [r4, #20]
 801b8b0:	3320      	adds	r3, #32
 801b8b2:	7663      	strb	r3, [r4, #25]
 801b8b4:	3310      	adds	r3, #16
 801b8b6:	76a3      	strb	r3, [r4, #26]
 801b8b8:	9507      	str	r5, [sp, #28]
 801b8ba:	0035      	movs	r5, r6
 801b8bc:	782b      	ldrb	r3, [r5, #0]
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d001      	beq.n	801b8c6 <_svfiprintf_r+0x52>
 801b8c2:	2b25      	cmp	r3, #37	; 0x25
 801b8c4:	d146      	bne.n	801b954 <_svfiprintf_r+0xe0>
 801b8c6:	1bab      	subs	r3, r5, r6
 801b8c8:	9305      	str	r3, [sp, #20]
 801b8ca:	d00c      	beq.n	801b8e6 <_svfiprintf_r+0x72>
 801b8cc:	0032      	movs	r2, r6
 801b8ce:	0039      	movs	r1, r7
 801b8d0:	9803      	ldr	r0, [sp, #12]
 801b8d2:	f7ff ff6d 	bl	801b7b0 <__ssputs_r>
 801b8d6:	1c43      	adds	r3, r0, #1
 801b8d8:	d100      	bne.n	801b8dc <_svfiprintf_r+0x68>
 801b8da:	e0ae      	b.n	801ba3a <_svfiprintf_r+0x1c6>
 801b8dc:	6962      	ldr	r2, [r4, #20]
 801b8de:	9b05      	ldr	r3, [sp, #20]
 801b8e0:	4694      	mov	ip, r2
 801b8e2:	4463      	add	r3, ip
 801b8e4:	6163      	str	r3, [r4, #20]
 801b8e6:	782b      	ldrb	r3, [r5, #0]
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d100      	bne.n	801b8ee <_svfiprintf_r+0x7a>
 801b8ec:	e0a5      	b.n	801ba3a <_svfiprintf_r+0x1c6>
 801b8ee:	2201      	movs	r2, #1
 801b8f0:	2300      	movs	r3, #0
 801b8f2:	4252      	negs	r2, r2
 801b8f4:	6062      	str	r2, [r4, #4]
 801b8f6:	a904      	add	r1, sp, #16
 801b8f8:	3254      	adds	r2, #84	; 0x54
 801b8fa:	1852      	adds	r2, r2, r1
 801b8fc:	1c6e      	adds	r6, r5, #1
 801b8fe:	6023      	str	r3, [r4, #0]
 801b900:	60e3      	str	r3, [r4, #12]
 801b902:	60a3      	str	r3, [r4, #8]
 801b904:	7013      	strb	r3, [r2, #0]
 801b906:	65a3      	str	r3, [r4, #88]	; 0x58
 801b908:	7831      	ldrb	r1, [r6, #0]
 801b90a:	2205      	movs	r2, #5
 801b90c:	4853      	ldr	r0, [pc, #332]	; (801ba5c <_svfiprintf_r+0x1e8>)
 801b90e:	f000 fa37 	bl	801bd80 <memchr>
 801b912:	1c75      	adds	r5, r6, #1
 801b914:	2800      	cmp	r0, #0
 801b916:	d11f      	bne.n	801b958 <_svfiprintf_r+0xe4>
 801b918:	6822      	ldr	r2, [r4, #0]
 801b91a:	06d3      	lsls	r3, r2, #27
 801b91c:	d504      	bpl.n	801b928 <_svfiprintf_r+0xb4>
 801b91e:	2353      	movs	r3, #83	; 0x53
 801b920:	a904      	add	r1, sp, #16
 801b922:	185b      	adds	r3, r3, r1
 801b924:	2120      	movs	r1, #32
 801b926:	7019      	strb	r1, [r3, #0]
 801b928:	0713      	lsls	r3, r2, #28
 801b92a:	d504      	bpl.n	801b936 <_svfiprintf_r+0xc2>
 801b92c:	2353      	movs	r3, #83	; 0x53
 801b92e:	a904      	add	r1, sp, #16
 801b930:	185b      	adds	r3, r3, r1
 801b932:	212b      	movs	r1, #43	; 0x2b
 801b934:	7019      	strb	r1, [r3, #0]
 801b936:	7833      	ldrb	r3, [r6, #0]
 801b938:	2b2a      	cmp	r3, #42	; 0x2a
 801b93a:	d016      	beq.n	801b96a <_svfiprintf_r+0xf6>
 801b93c:	0035      	movs	r5, r6
 801b93e:	2100      	movs	r1, #0
 801b940:	200a      	movs	r0, #10
 801b942:	68e3      	ldr	r3, [r4, #12]
 801b944:	782a      	ldrb	r2, [r5, #0]
 801b946:	1c6e      	adds	r6, r5, #1
 801b948:	3a30      	subs	r2, #48	; 0x30
 801b94a:	2a09      	cmp	r2, #9
 801b94c:	d94e      	bls.n	801b9ec <_svfiprintf_r+0x178>
 801b94e:	2900      	cmp	r1, #0
 801b950:	d018      	beq.n	801b984 <_svfiprintf_r+0x110>
 801b952:	e010      	b.n	801b976 <_svfiprintf_r+0x102>
 801b954:	3501      	adds	r5, #1
 801b956:	e7b1      	b.n	801b8bc <_svfiprintf_r+0x48>
 801b958:	4b40      	ldr	r3, [pc, #256]	; (801ba5c <_svfiprintf_r+0x1e8>)
 801b95a:	6822      	ldr	r2, [r4, #0]
 801b95c:	1ac0      	subs	r0, r0, r3
 801b95e:	2301      	movs	r3, #1
 801b960:	4083      	lsls	r3, r0
 801b962:	4313      	orrs	r3, r2
 801b964:	6023      	str	r3, [r4, #0]
 801b966:	002e      	movs	r6, r5
 801b968:	e7ce      	b.n	801b908 <_svfiprintf_r+0x94>
 801b96a:	9b07      	ldr	r3, [sp, #28]
 801b96c:	1d19      	adds	r1, r3, #4
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	9107      	str	r1, [sp, #28]
 801b972:	2b00      	cmp	r3, #0
 801b974:	db01      	blt.n	801b97a <_svfiprintf_r+0x106>
 801b976:	930b      	str	r3, [sp, #44]	; 0x2c
 801b978:	e004      	b.n	801b984 <_svfiprintf_r+0x110>
 801b97a:	425b      	negs	r3, r3
 801b97c:	60e3      	str	r3, [r4, #12]
 801b97e:	2302      	movs	r3, #2
 801b980:	4313      	orrs	r3, r2
 801b982:	6023      	str	r3, [r4, #0]
 801b984:	782b      	ldrb	r3, [r5, #0]
 801b986:	2b2e      	cmp	r3, #46	; 0x2e
 801b988:	d10a      	bne.n	801b9a0 <_svfiprintf_r+0x12c>
 801b98a:	786b      	ldrb	r3, [r5, #1]
 801b98c:	2b2a      	cmp	r3, #42	; 0x2a
 801b98e:	d135      	bne.n	801b9fc <_svfiprintf_r+0x188>
 801b990:	9b07      	ldr	r3, [sp, #28]
 801b992:	3502      	adds	r5, #2
 801b994:	1d1a      	adds	r2, r3, #4
 801b996:	681b      	ldr	r3, [r3, #0]
 801b998:	9207      	str	r2, [sp, #28]
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	db2b      	blt.n	801b9f6 <_svfiprintf_r+0x182>
 801b99e:	9309      	str	r3, [sp, #36]	; 0x24
 801b9a0:	4e2f      	ldr	r6, [pc, #188]	; (801ba60 <_svfiprintf_r+0x1ec>)
 801b9a2:	7829      	ldrb	r1, [r5, #0]
 801b9a4:	2203      	movs	r2, #3
 801b9a6:	0030      	movs	r0, r6
 801b9a8:	f000 f9ea 	bl	801bd80 <memchr>
 801b9ac:	2800      	cmp	r0, #0
 801b9ae:	d006      	beq.n	801b9be <_svfiprintf_r+0x14a>
 801b9b0:	2340      	movs	r3, #64	; 0x40
 801b9b2:	1b80      	subs	r0, r0, r6
 801b9b4:	4083      	lsls	r3, r0
 801b9b6:	6822      	ldr	r2, [r4, #0]
 801b9b8:	3501      	adds	r5, #1
 801b9ba:	4313      	orrs	r3, r2
 801b9bc:	6023      	str	r3, [r4, #0]
 801b9be:	7829      	ldrb	r1, [r5, #0]
 801b9c0:	2206      	movs	r2, #6
 801b9c2:	4828      	ldr	r0, [pc, #160]	; (801ba64 <_svfiprintf_r+0x1f0>)
 801b9c4:	1c6e      	adds	r6, r5, #1
 801b9c6:	7621      	strb	r1, [r4, #24]
 801b9c8:	f000 f9da 	bl	801bd80 <memchr>
 801b9cc:	2800      	cmp	r0, #0
 801b9ce:	d03c      	beq.n	801ba4a <_svfiprintf_r+0x1d6>
 801b9d0:	4b25      	ldr	r3, [pc, #148]	; (801ba68 <_svfiprintf_r+0x1f4>)
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d125      	bne.n	801ba22 <_svfiprintf_r+0x1ae>
 801b9d6:	2207      	movs	r2, #7
 801b9d8:	9b07      	ldr	r3, [sp, #28]
 801b9da:	3307      	adds	r3, #7
 801b9dc:	4393      	bics	r3, r2
 801b9de:	3308      	adds	r3, #8
 801b9e0:	9307      	str	r3, [sp, #28]
 801b9e2:	6963      	ldr	r3, [r4, #20]
 801b9e4:	9a04      	ldr	r2, [sp, #16]
 801b9e6:	189b      	adds	r3, r3, r2
 801b9e8:	6163      	str	r3, [r4, #20]
 801b9ea:	e766      	b.n	801b8ba <_svfiprintf_r+0x46>
 801b9ec:	4343      	muls	r3, r0
 801b9ee:	2101      	movs	r1, #1
 801b9f0:	189b      	adds	r3, r3, r2
 801b9f2:	0035      	movs	r5, r6
 801b9f4:	e7a6      	b.n	801b944 <_svfiprintf_r+0xd0>
 801b9f6:	2301      	movs	r3, #1
 801b9f8:	425b      	negs	r3, r3
 801b9fa:	e7d0      	b.n	801b99e <_svfiprintf_r+0x12a>
 801b9fc:	2300      	movs	r3, #0
 801b9fe:	200a      	movs	r0, #10
 801ba00:	001a      	movs	r2, r3
 801ba02:	3501      	adds	r5, #1
 801ba04:	6063      	str	r3, [r4, #4]
 801ba06:	7829      	ldrb	r1, [r5, #0]
 801ba08:	1c6e      	adds	r6, r5, #1
 801ba0a:	3930      	subs	r1, #48	; 0x30
 801ba0c:	2909      	cmp	r1, #9
 801ba0e:	d903      	bls.n	801ba18 <_svfiprintf_r+0x1a4>
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	d0c5      	beq.n	801b9a0 <_svfiprintf_r+0x12c>
 801ba14:	9209      	str	r2, [sp, #36]	; 0x24
 801ba16:	e7c3      	b.n	801b9a0 <_svfiprintf_r+0x12c>
 801ba18:	4342      	muls	r2, r0
 801ba1a:	2301      	movs	r3, #1
 801ba1c:	1852      	adds	r2, r2, r1
 801ba1e:	0035      	movs	r5, r6
 801ba20:	e7f1      	b.n	801ba06 <_svfiprintf_r+0x192>
 801ba22:	ab07      	add	r3, sp, #28
 801ba24:	9300      	str	r3, [sp, #0]
 801ba26:	003a      	movs	r2, r7
 801ba28:	4b10      	ldr	r3, [pc, #64]	; (801ba6c <_svfiprintf_r+0x1f8>)
 801ba2a:	0021      	movs	r1, r4
 801ba2c:	9803      	ldr	r0, [sp, #12]
 801ba2e:	e000      	b.n	801ba32 <_svfiprintf_r+0x1be>
 801ba30:	bf00      	nop
 801ba32:	9004      	str	r0, [sp, #16]
 801ba34:	9b04      	ldr	r3, [sp, #16]
 801ba36:	3301      	adds	r3, #1
 801ba38:	d1d3      	bne.n	801b9e2 <_svfiprintf_r+0x16e>
 801ba3a:	89bb      	ldrh	r3, [r7, #12]
 801ba3c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ba3e:	065b      	lsls	r3, r3, #25
 801ba40:	d400      	bmi.n	801ba44 <_svfiprintf_r+0x1d0>
 801ba42:	e72e      	b.n	801b8a2 <_svfiprintf_r+0x2e>
 801ba44:	2001      	movs	r0, #1
 801ba46:	4240      	negs	r0, r0
 801ba48:	e72b      	b.n	801b8a2 <_svfiprintf_r+0x2e>
 801ba4a:	ab07      	add	r3, sp, #28
 801ba4c:	9300      	str	r3, [sp, #0]
 801ba4e:	003a      	movs	r2, r7
 801ba50:	4b06      	ldr	r3, [pc, #24]	; (801ba6c <_svfiprintf_r+0x1f8>)
 801ba52:	0021      	movs	r1, r4
 801ba54:	9803      	ldr	r0, [sp, #12]
 801ba56:	f000 f879 	bl	801bb4c <_printf_i>
 801ba5a:	e7ea      	b.n	801ba32 <_svfiprintf_r+0x1be>
 801ba5c:	0801d338 	.word	0x0801d338
 801ba60:	0801d33e 	.word	0x0801d33e
 801ba64:	0801d342 	.word	0x0801d342
 801ba68:	00000000 	.word	0x00000000
 801ba6c:	0801b7b1 	.word	0x0801b7b1

0801ba70 <_printf_common>:
 801ba70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ba72:	0015      	movs	r5, r2
 801ba74:	9301      	str	r3, [sp, #4]
 801ba76:	688a      	ldr	r2, [r1, #8]
 801ba78:	690b      	ldr	r3, [r1, #16]
 801ba7a:	9000      	str	r0, [sp, #0]
 801ba7c:	000c      	movs	r4, r1
 801ba7e:	4293      	cmp	r3, r2
 801ba80:	da00      	bge.n	801ba84 <_printf_common+0x14>
 801ba82:	0013      	movs	r3, r2
 801ba84:	0022      	movs	r2, r4
 801ba86:	602b      	str	r3, [r5, #0]
 801ba88:	3243      	adds	r2, #67	; 0x43
 801ba8a:	7812      	ldrb	r2, [r2, #0]
 801ba8c:	2a00      	cmp	r2, #0
 801ba8e:	d001      	beq.n	801ba94 <_printf_common+0x24>
 801ba90:	3301      	adds	r3, #1
 801ba92:	602b      	str	r3, [r5, #0]
 801ba94:	6823      	ldr	r3, [r4, #0]
 801ba96:	069b      	lsls	r3, r3, #26
 801ba98:	d502      	bpl.n	801baa0 <_printf_common+0x30>
 801ba9a:	682b      	ldr	r3, [r5, #0]
 801ba9c:	3302      	adds	r3, #2
 801ba9e:	602b      	str	r3, [r5, #0]
 801baa0:	2706      	movs	r7, #6
 801baa2:	6823      	ldr	r3, [r4, #0]
 801baa4:	401f      	ands	r7, r3
 801baa6:	d027      	beq.n	801baf8 <_printf_common+0x88>
 801baa8:	0023      	movs	r3, r4
 801baaa:	3343      	adds	r3, #67	; 0x43
 801baac:	781b      	ldrb	r3, [r3, #0]
 801baae:	1e5a      	subs	r2, r3, #1
 801bab0:	4193      	sbcs	r3, r2
 801bab2:	6822      	ldr	r2, [r4, #0]
 801bab4:	0692      	lsls	r2, r2, #26
 801bab6:	d430      	bmi.n	801bb1a <_printf_common+0xaa>
 801bab8:	0022      	movs	r2, r4
 801baba:	9901      	ldr	r1, [sp, #4]
 801babc:	3243      	adds	r2, #67	; 0x43
 801babe:	9800      	ldr	r0, [sp, #0]
 801bac0:	9e08      	ldr	r6, [sp, #32]
 801bac2:	47b0      	blx	r6
 801bac4:	1c43      	adds	r3, r0, #1
 801bac6:	d025      	beq.n	801bb14 <_printf_common+0xa4>
 801bac8:	2306      	movs	r3, #6
 801baca:	6820      	ldr	r0, [r4, #0]
 801bacc:	682a      	ldr	r2, [r5, #0]
 801bace:	68e1      	ldr	r1, [r4, #12]
 801bad0:	4003      	ands	r3, r0
 801bad2:	2500      	movs	r5, #0
 801bad4:	2b04      	cmp	r3, #4
 801bad6:	d103      	bne.n	801bae0 <_printf_common+0x70>
 801bad8:	1a8d      	subs	r5, r1, r2
 801bada:	43eb      	mvns	r3, r5
 801badc:	17db      	asrs	r3, r3, #31
 801bade:	401d      	ands	r5, r3
 801bae0:	68a3      	ldr	r3, [r4, #8]
 801bae2:	6922      	ldr	r2, [r4, #16]
 801bae4:	4293      	cmp	r3, r2
 801bae6:	dd01      	ble.n	801baec <_printf_common+0x7c>
 801bae8:	1a9b      	subs	r3, r3, r2
 801baea:	18ed      	adds	r5, r5, r3
 801baec:	2700      	movs	r7, #0
 801baee:	42bd      	cmp	r5, r7
 801baf0:	d120      	bne.n	801bb34 <_printf_common+0xc4>
 801baf2:	2000      	movs	r0, #0
 801baf4:	e010      	b.n	801bb18 <_printf_common+0xa8>
 801baf6:	3701      	adds	r7, #1
 801baf8:	68e3      	ldr	r3, [r4, #12]
 801bafa:	682a      	ldr	r2, [r5, #0]
 801bafc:	1a9b      	subs	r3, r3, r2
 801bafe:	42bb      	cmp	r3, r7
 801bb00:	ddd2      	ble.n	801baa8 <_printf_common+0x38>
 801bb02:	0022      	movs	r2, r4
 801bb04:	2301      	movs	r3, #1
 801bb06:	3219      	adds	r2, #25
 801bb08:	9901      	ldr	r1, [sp, #4]
 801bb0a:	9800      	ldr	r0, [sp, #0]
 801bb0c:	9e08      	ldr	r6, [sp, #32]
 801bb0e:	47b0      	blx	r6
 801bb10:	1c43      	adds	r3, r0, #1
 801bb12:	d1f0      	bne.n	801baf6 <_printf_common+0x86>
 801bb14:	2001      	movs	r0, #1
 801bb16:	4240      	negs	r0, r0
 801bb18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801bb1a:	2030      	movs	r0, #48	; 0x30
 801bb1c:	18e1      	adds	r1, r4, r3
 801bb1e:	3143      	adds	r1, #67	; 0x43
 801bb20:	7008      	strb	r0, [r1, #0]
 801bb22:	0021      	movs	r1, r4
 801bb24:	1c5a      	adds	r2, r3, #1
 801bb26:	3145      	adds	r1, #69	; 0x45
 801bb28:	7809      	ldrb	r1, [r1, #0]
 801bb2a:	18a2      	adds	r2, r4, r2
 801bb2c:	3243      	adds	r2, #67	; 0x43
 801bb2e:	3302      	adds	r3, #2
 801bb30:	7011      	strb	r1, [r2, #0]
 801bb32:	e7c1      	b.n	801bab8 <_printf_common+0x48>
 801bb34:	0022      	movs	r2, r4
 801bb36:	2301      	movs	r3, #1
 801bb38:	321a      	adds	r2, #26
 801bb3a:	9901      	ldr	r1, [sp, #4]
 801bb3c:	9800      	ldr	r0, [sp, #0]
 801bb3e:	9e08      	ldr	r6, [sp, #32]
 801bb40:	47b0      	blx	r6
 801bb42:	1c43      	adds	r3, r0, #1
 801bb44:	d0e6      	beq.n	801bb14 <_printf_common+0xa4>
 801bb46:	3701      	adds	r7, #1
 801bb48:	e7d1      	b.n	801baee <_printf_common+0x7e>
	...

0801bb4c <_printf_i>:
 801bb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb4e:	b089      	sub	sp, #36	; 0x24
 801bb50:	9204      	str	r2, [sp, #16]
 801bb52:	000a      	movs	r2, r1
 801bb54:	3243      	adds	r2, #67	; 0x43
 801bb56:	9305      	str	r3, [sp, #20]
 801bb58:	9003      	str	r0, [sp, #12]
 801bb5a:	9202      	str	r2, [sp, #8]
 801bb5c:	7e0a      	ldrb	r2, [r1, #24]
 801bb5e:	000c      	movs	r4, r1
 801bb60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bb62:	2a6e      	cmp	r2, #110	; 0x6e
 801bb64:	d100      	bne.n	801bb68 <_printf_i+0x1c>
 801bb66:	e086      	b.n	801bc76 <_printf_i+0x12a>
 801bb68:	d81f      	bhi.n	801bbaa <_printf_i+0x5e>
 801bb6a:	2a63      	cmp	r2, #99	; 0x63
 801bb6c:	d033      	beq.n	801bbd6 <_printf_i+0x8a>
 801bb6e:	d808      	bhi.n	801bb82 <_printf_i+0x36>
 801bb70:	2a00      	cmp	r2, #0
 801bb72:	d100      	bne.n	801bb76 <_printf_i+0x2a>
 801bb74:	e08c      	b.n	801bc90 <_printf_i+0x144>
 801bb76:	2a58      	cmp	r2, #88	; 0x58
 801bb78:	d04d      	beq.n	801bc16 <_printf_i+0xca>
 801bb7a:	0025      	movs	r5, r4
 801bb7c:	3542      	adds	r5, #66	; 0x42
 801bb7e:	702a      	strb	r2, [r5, #0]
 801bb80:	e030      	b.n	801bbe4 <_printf_i+0x98>
 801bb82:	2a64      	cmp	r2, #100	; 0x64
 801bb84:	d001      	beq.n	801bb8a <_printf_i+0x3e>
 801bb86:	2a69      	cmp	r2, #105	; 0x69
 801bb88:	d1f7      	bne.n	801bb7a <_printf_i+0x2e>
 801bb8a:	6819      	ldr	r1, [r3, #0]
 801bb8c:	6825      	ldr	r5, [r4, #0]
 801bb8e:	1d0a      	adds	r2, r1, #4
 801bb90:	0628      	lsls	r0, r5, #24
 801bb92:	d529      	bpl.n	801bbe8 <_printf_i+0x9c>
 801bb94:	6808      	ldr	r0, [r1, #0]
 801bb96:	601a      	str	r2, [r3, #0]
 801bb98:	2800      	cmp	r0, #0
 801bb9a:	da03      	bge.n	801bba4 <_printf_i+0x58>
 801bb9c:	232d      	movs	r3, #45	; 0x2d
 801bb9e:	9a02      	ldr	r2, [sp, #8]
 801bba0:	4240      	negs	r0, r0
 801bba2:	7013      	strb	r3, [r2, #0]
 801bba4:	4e6b      	ldr	r6, [pc, #428]	; (801bd54 <_printf_i+0x208>)
 801bba6:	270a      	movs	r7, #10
 801bba8:	e04f      	b.n	801bc4a <_printf_i+0xfe>
 801bbaa:	2a73      	cmp	r2, #115	; 0x73
 801bbac:	d074      	beq.n	801bc98 <_printf_i+0x14c>
 801bbae:	d808      	bhi.n	801bbc2 <_printf_i+0x76>
 801bbb0:	2a6f      	cmp	r2, #111	; 0x6f
 801bbb2:	d01f      	beq.n	801bbf4 <_printf_i+0xa8>
 801bbb4:	2a70      	cmp	r2, #112	; 0x70
 801bbb6:	d1e0      	bne.n	801bb7a <_printf_i+0x2e>
 801bbb8:	2220      	movs	r2, #32
 801bbba:	6809      	ldr	r1, [r1, #0]
 801bbbc:	430a      	orrs	r2, r1
 801bbbe:	6022      	str	r2, [r4, #0]
 801bbc0:	e003      	b.n	801bbca <_printf_i+0x7e>
 801bbc2:	2a75      	cmp	r2, #117	; 0x75
 801bbc4:	d016      	beq.n	801bbf4 <_printf_i+0xa8>
 801bbc6:	2a78      	cmp	r2, #120	; 0x78
 801bbc8:	d1d7      	bne.n	801bb7a <_printf_i+0x2e>
 801bbca:	0022      	movs	r2, r4
 801bbcc:	2178      	movs	r1, #120	; 0x78
 801bbce:	3245      	adds	r2, #69	; 0x45
 801bbd0:	7011      	strb	r1, [r2, #0]
 801bbd2:	4e61      	ldr	r6, [pc, #388]	; (801bd58 <_printf_i+0x20c>)
 801bbd4:	e022      	b.n	801bc1c <_printf_i+0xd0>
 801bbd6:	0025      	movs	r5, r4
 801bbd8:	681a      	ldr	r2, [r3, #0]
 801bbda:	3542      	adds	r5, #66	; 0x42
 801bbdc:	1d11      	adds	r1, r2, #4
 801bbde:	6019      	str	r1, [r3, #0]
 801bbe0:	6813      	ldr	r3, [r2, #0]
 801bbe2:	702b      	strb	r3, [r5, #0]
 801bbe4:	2301      	movs	r3, #1
 801bbe6:	e065      	b.n	801bcb4 <_printf_i+0x168>
 801bbe8:	6808      	ldr	r0, [r1, #0]
 801bbea:	601a      	str	r2, [r3, #0]
 801bbec:	0669      	lsls	r1, r5, #25
 801bbee:	d5d3      	bpl.n	801bb98 <_printf_i+0x4c>
 801bbf0:	b200      	sxth	r0, r0
 801bbf2:	e7d1      	b.n	801bb98 <_printf_i+0x4c>
 801bbf4:	6819      	ldr	r1, [r3, #0]
 801bbf6:	6825      	ldr	r5, [r4, #0]
 801bbf8:	1d08      	adds	r0, r1, #4
 801bbfa:	6018      	str	r0, [r3, #0]
 801bbfc:	6808      	ldr	r0, [r1, #0]
 801bbfe:	062e      	lsls	r6, r5, #24
 801bc00:	d505      	bpl.n	801bc0e <_printf_i+0xc2>
 801bc02:	4e54      	ldr	r6, [pc, #336]	; (801bd54 <_printf_i+0x208>)
 801bc04:	2708      	movs	r7, #8
 801bc06:	2a6f      	cmp	r2, #111	; 0x6f
 801bc08:	d01b      	beq.n	801bc42 <_printf_i+0xf6>
 801bc0a:	270a      	movs	r7, #10
 801bc0c:	e019      	b.n	801bc42 <_printf_i+0xf6>
 801bc0e:	066d      	lsls	r5, r5, #25
 801bc10:	d5f7      	bpl.n	801bc02 <_printf_i+0xb6>
 801bc12:	b280      	uxth	r0, r0
 801bc14:	e7f5      	b.n	801bc02 <_printf_i+0xb6>
 801bc16:	3145      	adds	r1, #69	; 0x45
 801bc18:	4e4e      	ldr	r6, [pc, #312]	; (801bd54 <_printf_i+0x208>)
 801bc1a:	700a      	strb	r2, [r1, #0]
 801bc1c:	6818      	ldr	r0, [r3, #0]
 801bc1e:	6822      	ldr	r2, [r4, #0]
 801bc20:	1d01      	adds	r1, r0, #4
 801bc22:	6800      	ldr	r0, [r0, #0]
 801bc24:	6019      	str	r1, [r3, #0]
 801bc26:	0615      	lsls	r5, r2, #24
 801bc28:	d521      	bpl.n	801bc6e <_printf_i+0x122>
 801bc2a:	07d3      	lsls	r3, r2, #31
 801bc2c:	d502      	bpl.n	801bc34 <_printf_i+0xe8>
 801bc2e:	2320      	movs	r3, #32
 801bc30:	431a      	orrs	r2, r3
 801bc32:	6022      	str	r2, [r4, #0]
 801bc34:	2710      	movs	r7, #16
 801bc36:	2800      	cmp	r0, #0
 801bc38:	d103      	bne.n	801bc42 <_printf_i+0xf6>
 801bc3a:	2320      	movs	r3, #32
 801bc3c:	6822      	ldr	r2, [r4, #0]
 801bc3e:	439a      	bics	r2, r3
 801bc40:	6022      	str	r2, [r4, #0]
 801bc42:	0023      	movs	r3, r4
 801bc44:	2200      	movs	r2, #0
 801bc46:	3343      	adds	r3, #67	; 0x43
 801bc48:	701a      	strb	r2, [r3, #0]
 801bc4a:	6863      	ldr	r3, [r4, #4]
 801bc4c:	60a3      	str	r3, [r4, #8]
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	db58      	blt.n	801bd04 <_printf_i+0x1b8>
 801bc52:	2204      	movs	r2, #4
 801bc54:	6821      	ldr	r1, [r4, #0]
 801bc56:	4391      	bics	r1, r2
 801bc58:	6021      	str	r1, [r4, #0]
 801bc5a:	2800      	cmp	r0, #0
 801bc5c:	d154      	bne.n	801bd08 <_printf_i+0x1bc>
 801bc5e:	9d02      	ldr	r5, [sp, #8]
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	d05a      	beq.n	801bd1a <_printf_i+0x1ce>
 801bc64:	0025      	movs	r5, r4
 801bc66:	7833      	ldrb	r3, [r6, #0]
 801bc68:	3542      	adds	r5, #66	; 0x42
 801bc6a:	702b      	strb	r3, [r5, #0]
 801bc6c:	e055      	b.n	801bd1a <_printf_i+0x1ce>
 801bc6e:	0655      	lsls	r5, r2, #25
 801bc70:	d5db      	bpl.n	801bc2a <_printf_i+0xde>
 801bc72:	b280      	uxth	r0, r0
 801bc74:	e7d9      	b.n	801bc2a <_printf_i+0xde>
 801bc76:	681a      	ldr	r2, [r3, #0]
 801bc78:	680d      	ldr	r5, [r1, #0]
 801bc7a:	1d10      	adds	r0, r2, #4
 801bc7c:	6949      	ldr	r1, [r1, #20]
 801bc7e:	6018      	str	r0, [r3, #0]
 801bc80:	6813      	ldr	r3, [r2, #0]
 801bc82:	062e      	lsls	r6, r5, #24
 801bc84:	d501      	bpl.n	801bc8a <_printf_i+0x13e>
 801bc86:	6019      	str	r1, [r3, #0]
 801bc88:	e002      	b.n	801bc90 <_printf_i+0x144>
 801bc8a:	066d      	lsls	r5, r5, #25
 801bc8c:	d5fb      	bpl.n	801bc86 <_printf_i+0x13a>
 801bc8e:	8019      	strh	r1, [r3, #0]
 801bc90:	2300      	movs	r3, #0
 801bc92:	9d02      	ldr	r5, [sp, #8]
 801bc94:	6123      	str	r3, [r4, #16]
 801bc96:	e04f      	b.n	801bd38 <_printf_i+0x1ec>
 801bc98:	681a      	ldr	r2, [r3, #0]
 801bc9a:	1d11      	adds	r1, r2, #4
 801bc9c:	6019      	str	r1, [r3, #0]
 801bc9e:	6815      	ldr	r5, [r2, #0]
 801bca0:	2100      	movs	r1, #0
 801bca2:	6862      	ldr	r2, [r4, #4]
 801bca4:	0028      	movs	r0, r5
 801bca6:	f000 f86b 	bl	801bd80 <memchr>
 801bcaa:	2800      	cmp	r0, #0
 801bcac:	d001      	beq.n	801bcb2 <_printf_i+0x166>
 801bcae:	1b40      	subs	r0, r0, r5
 801bcb0:	6060      	str	r0, [r4, #4]
 801bcb2:	6863      	ldr	r3, [r4, #4]
 801bcb4:	6123      	str	r3, [r4, #16]
 801bcb6:	2300      	movs	r3, #0
 801bcb8:	9a02      	ldr	r2, [sp, #8]
 801bcba:	7013      	strb	r3, [r2, #0]
 801bcbc:	e03c      	b.n	801bd38 <_printf_i+0x1ec>
 801bcbe:	6923      	ldr	r3, [r4, #16]
 801bcc0:	002a      	movs	r2, r5
 801bcc2:	9904      	ldr	r1, [sp, #16]
 801bcc4:	9803      	ldr	r0, [sp, #12]
 801bcc6:	9d05      	ldr	r5, [sp, #20]
 801bcc8:	47a8      	blx	r5
 801bcca:	1c43      	adds	r3, r0, #1
 801bccc:	d03e      	beq.n	801bd4c <_printf_i+0x200>
 801bcce:	6823      	ldr	r3, [r4, #0]
 801bcd0:	079b      	lsls	r3, r3, #30
 801bcd2:	d415      	bmi.n	801bd00 <_printf_i+0x1b4>
 801bcd4:	9b07      	ldr	r3, [sp, #28]
 801bcd6:	68e0      	ldr	r0, [r4, #12]
 801bcd8:	4298      	cmp	r0, r3
 801bcda:	da39      	bge.n	801bd50 <_printf_i+0x204>
 801bcdc:	0018      	movs	r0, r3
 801bcde:	e037      	b.n	801bd50 <_printf_i+0x204>
 801bce0:	0022      	movs	r2, r4
 801bce2:	2301      	movs	r3, #1
 801bce4:	3219      	adds	r2, #25
 801bce6:	9904      	ldr	r1, [sp, #16]
 801bce8:	9803      	ldr	r0, [sp, #12]
 801bcea:	9e05      	ldr	r6, [sp, #20]
 801bcec:	47b0      	blx	r6
 801bcee:	1c43      	adds	r3, r0, #1
 801bcf0:	d02c      	beq.n	801bd4c <_printf_i+0x200>
 801bcf2:	3501      	adds	r5, #1
 801bcf4:	68e3      	ldr	r3, [r4, #12]
 801bcf6:	9a07      	ldr	r2, [sp, #28]
 801bcf8:	1a9b      	subs	r3, r3, r2
 801bcfa:	42ab      	cmp	r3, r5
 801bcfc:	dcf0      	bgt.n	801bce0 <_printf_i+0x194>
 801bcfe:	e7e9      	b.n	801bcd4 <_printf_i+0x188>
 801bd00:	2500      	movs	r5, #0
 801bd02:	e7f7      	b.n	801bcf4 <_printf_i+0x1a8>
 801bd04:	2800      	cmp	r0, #0
 801bd06:	d0ad      	beq.n	801bc64 <_printf_i+0x118>
 801bd08:	9d02      	ldr	r5, [sp, #8]
 801bd0a:	0039      	movs	r1, r7
 801bd0c:	f7e4 fa82 	bl	8000214 <__aeabi_uidivmod>
 801bd10:	5c73      	ldrb	r3, [r6, r1]
 801bd12:	3d01      	subs	r5, #1
 801bd14:	702b      	strb	r3, [r5, #0]
 801bd16:	2800      	cmp	r0, #0
 801bd18:	d1f7      	bne.n	801bd0a <_printf_i+0x1be>
 801bd1a:	2f08      	cmp	r7, #8
 801bd1c:	d109      	bne.n	801bd32 <_printf_i+0x1e6>
 801bd1e:	6823      	ldr	r3, [r4, #0]
 801bd20:	07db      	lsls	r3, r3, #31
 801bd22:	d506      	bpl.n	801bd32 <_printf_i+0x1e6>
 801bd24:	6863      	ldr	r3, [r4, #4]
 801bd26:	6922      	ldr	r2, [r4, #16]
 801bd28:	4293      	cmp	r3, r2
 801bd2a:	dc02      	bgt.n	801bd32 <_printf_i+0x1e6>
 801bd2c:	2330      	movs	r3, #48	; 0x30
 801bd2e:	3d01      	subs	r5, #1
 801bd30:	702b      	strb	r3, [r5, #0]
 801bd32:	9b02      	ldr	r3, [sp, #8]
 801bd34:	1b5b      	subs	r3, r3, r5
 801bd36:	6123      	str	r3, [r4, #16]
 801bd38:	9b05      	ldr	r3, [sp, #20]
 801bd3a:	aa07      	add	r2, sp, #28
 801bd3c:	9300      	str	r3, [sp, #0]
 801bd3e:	0021      	movs	r1, r4
 801bd40:	9b04      	ldr	r3, [sp, #16]
 801bd42:	9803      	ldr	r0, [sp, #12]
 801bd44:	f7ff fe94 	bl	801ba70 <_printf_common>
 801bd48:	1c43      	adds	r3, r0, #1
 801bd4a:	d1b8      	bne.n	801bcbe <_printf_i+0x172>
 801bd4c:	2001      	movs	r0, #1
 801bd4e:	4240      	negs	r0, r0
 801bd50:	b009      	add	sp, #36	; 0x24
 801bd52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bd54:	0801d349 	.word	0x0801d349
 801bd58:	0801d35a 	.word	0x0801d35a

0801bd5c <_sbrk_r>:
 801bd5c:	2300      	movs	r3, #0
 801bd5e:	b570      	push	{r4, r5, r6, lr}
 801bd60:	4c06      	ldr	r4, [pc, #24]	; (801bd7c <_sbrk_r+0x20>)
 801bd62:	0005      	movs	r5, r0
 801bd64:	0008      	movs	r0, r1
 801bd66:	6023      	str	r3, [r4, #0]
 801bd68:	f7e9 fe5a 	bl	8005a20 <_sbrk>
 801bd6c:	1c43      	adds	r3, r0, #1
 801bd6e:	d103      	bne.n	801bd78 <_sbrk_r+0x1c>
 801bd70:	6823      	ldr	r3, [r4, #0]
 801bd72:	2b00      	cmp	r3, #0
 801bd74:	d000      	beq.n	801bd78 <_sbrk_r+0x1c>
 801bd76:	602b      	str	r3, [r5, #0]
 801bd78:	bd70      	pop	{r4, r5, r6, pc}
 801bd7a:	46c0      	nop			; (mov r8, r8)
 801bd7c:	2000168c 	.word	0x2000168c

0801bd80 <memchr>:
 801bd80:	b2c9      	uxtb	r1, r1
 801bd82:	1882      	adds	r2, r0, r2
 801bd84:	4290      	cmp	r0, r2
 801bd86:	d101      	bne.n	801bd8c <memchr+0xc>
 801bd88:	2000      	movs	r0, #0
 801bd8a:	4770      	bx	lr
 801bd8c:	7803      	ldrb	r3, [r0, #0]
 801bd8e:	428b      	cmp	r3, r1
 801bd90:	d0fb      	beq.n	801bd8a <memchr+0xa>
 801bd92:	3001      	adds	r0, #1
 801bd94:	e7f6      	b.n	801bd84 <memchr+0x4>

0801bd96 <memcpy>:
 801bd96:	2300      	movs	r3, #0
 801bd98:	b510      	push	{r4, lr}
 801bd9a:	429a      	cmp	r2, r3
 801bd9c:	d100      	bne.n	801bda0 <memcpy+0xa>
 801bd9e:	bd10      	pop	{r4, pc}
 801bda0:	5ccc      	ldrb	r4, [r1, r3]
 801bda2:	54c4      	strb	r4, [r0, r3]
 801bda4:	3301      	adds	r3, #1
 801bda6:	e7f8      	b.n	801bd9a <memcpy+0x4>

0801bda8 <memmove>:
 801bda8:	b510      	push	{r4, lr}
 801bdaa:	4288      	cmp	r0, r1
 801bdac:	d902      	bls.n	801bdb4 <memmove+0xc>
 801bdae:	188b      	adds	r3, r1, r2
 801bdb0:	4298      	cmp	r0, r3
 801bdb2:	d303      	bcc.n	801bdbc <memmove+0x14>
 801bdb4:	2300      	movs	r3, #0
 801bdb6:	e007      	b.n	801bdc8 <memmove+0x20>
 801bdb8:	5c8b      	ldrb	r3, [r1, r2]
 801bdba:	5483      	strb	r3, [r0, r2]
 801bdbc:	3a01      	subs	r2, #1
 801bdbe:	d2fb      	bcs.n	801bdb8 <memmove+0x10>
 801bdc0:	bd10      	pop	{r4, pc}
 801bdc2:	5ccc      	ldrb	r4, [r1, r3]
 801bdc4:	54c4      	strb	r4, [r0, r3]
 801bdc6:	3301      	adds	r3, #1
 801bdc8:	429a      	cmp	r2, r3
 801bdca:	d1fa      	bne.n	801bdc2 <memmove+0x1a>
 801bdcc:	e7f8      	b.n	801bdc0 <memmove+0x18>

0801bdce <__malloc_lock>:
 801bdce:	4770      	bx	lr

0801bdd0 <__malloc_unlock>:
 801bdd0:	4770      	bx	lr
	...

0801bdd4 <_free_r>:
 801bdd4:	b570      	push	{r4, r5, r6, lr}
 801bdd6:	0005      	movs	r5, r0
 801bdd8:	2900      	cmp	r1, #0
 801bdda:	d010      	beq.n	801bdfe <_free_r+0x2a>
 801bddc:	1f0c      	subs	r4, r1, #4
 801bdde:	6823      	ldr	r3, [r4, #0]
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	da00      	bge.n	801bde6 <_free_r+0x12>
 801bde4:	18e4      	adds	r4, r4, r3
 801bde6:	0028      	movs	r0, r5
 801bde8:	f7ff fff1 	bl	801bdce <__malloc_lock>
 801bdec:	4a1d      	ldr	r2, [pc, #116]	; (801be64 <_free_r+0x90>)
 801bdee:	6813      	ldr	r3, [r2, #0]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d105      	bne.n	801be00 <_free_r+0x2c>
 801bdf4:	6063      	str	r3, [r4, #4]
 801bdf6:	6014      	str	r4, [r2, #0]
 801bdf8:	0028      	movs	r0, r5
 801bdfa:	f7ff ffe9 	bl	801bdd0 <__malloc_unlock>
 801bdfe:	bd70      	pop	{r4, r5, r6, pc}
 801be00:	42a3      	cmp	r3, r4
 801be02:	d909      	bls.n	801be18 <_free_r+0x44>
 801be04:	6821      	ldr	r1, [r4, #0]
 801be06:	1860      	adds	r0, r4, r1
 801be08:	4283      	cmp	r3, r0
 801be0a:	d1f3      	bne.n	801bdf4 <_free_r+0x20>
 801be0c:	6818      	ldr	r0, [r3, #0]
 801be0e:	685b      	ldr	r3, [r3, #4]
 801be10:	1841      	adds	r1, r0, r1
 801be12:	6021      	str	r1, [r4, #0]
 801be14:	e7ee      	b.n	801bdf4 <_free_r+0x20>
 801be16:	0013      	movs	r3, r2
 801be18:	685a      	ldr	r2, [r3, #4]
 801be1a:	2a00      	cmp	r2, #0
 801be1c:	d001      	beq.n	801be22 <_free_r+0x4e>
 801be1e:	42a2      	cmp	r2, r4
 801be20:	d9f9      	bls.n	801be16 <_free_r+0x42>
 801be22:	6819      	ldr	r1, [r3, #0]
 801be24:	1858      	adds	r0, r3, r1
 801be26:	42a0      	cmp	r0, r4
 801be28:	d10b      	bne.n	801be42 <_free_r+0x6e>
 801be2a:	6820      	ldr	r0, [r4, #0]
 801be2c:	1809      	adds	r1, r1, r0
 801be2e:	1858      	adds	r0, r3, r1
 801be30:	6019      	str	r1, [r3, #0]
 801be32:	4282      	cmp	r2, r0
 801be34:	d1e0      	bne.n	801bdf8 <_free_r+0x24>
 801be36:	6810      	ldr	r0, [r2, #0]
 801be38:	6852      	ldr	r2, [r2, #4]
 801be3a:	1841      	adds	r1, r0, r1
 801be3c:	6019      	str	r1, [r3, #0]
 801be3e:	605a      	str	r2, [r3, #4]
 801be40:	e7da      	b.n	801bdf8 <_free_r+0x24>
 801be42:	42a0      	cmp	r0, r4
 801be44:	d902      	bls.n	801be4c <_free_r+0x78>
 801be46:	230c      	movs	r3, #12
 801be48:	602b      	str	r3, [r5, #0]
 801be4a:	e7d5      	b.n	801bdf8 <_free_r+0x24>
 801be4c:	6821      	ldr	r1, [r4, #0]
 801be4e:	1860      	adds	r0, r4, r1
 801be50:	4282      	cmp	r2, r0
 801be52:	d103      	bne.n	801be5c <_free_r+0x88>
 801be54:	6810      	ldr	r0, [r2, #0]
 801be56:	6852      	ldr	r2, [r2, #4]
 801be58:	1841      	adds	r1, r0, r1
 801be5a:	6021      	str	r1, [r4, #0]
 801be5c:	6062      	str	r2, [r4, #4]
 801be5e:	605c      	str	r4, [r3, #4]
 801be60:	e7ca      	b.n	801bdf8 <_free_r+0x24>
 801be62:	46c0      	nop			; (mov r8, r8)
 801be64:	20001414 	.word	0x20001414

0801be68 <_realloc_r>:
 801be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be6a:	0007      	movs	r7, r0
 801be6c:	000d      	movs	r5, r1
 801be6e:	0016      	movs	r6, r2
 801be70:	2900      	cmp	r1, #0
 801be72:	d105      	bne.n	801be80 <_realloc_r+0x18>
 801be74:	0011      	movs	r1, r2
 801be76:	f7ff fc3d 	bl	801b6f4 <_malloc_r>
 801be7a:	0004      	movs	r4, r0
 801be7c:	0020      	movs	r0, r4
 801be7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be80:	2a00      	cmp	r2, #0
 801be82:	d103      	bne.n	801be8c <_realloc_r+0x24>
 801be84:	f7ff ffa6 	bl	801bdd4 <_free_r>
 801be88:	0034      	movs	r4, r6
 801be8a:	e7f7      	b.n	801be7c <_realloc_r+0x14>
 801be8c:	f000 f812 	bl	801beb4 <_malloc_usable_size_r>
 801be90:	002c      	movs	r4, r5
 801be92:	42b0      	cmp	r0, r6
 801be94:	d2f2      	bcs.n	801be7c <_realloc_r+0x14>
 801be96:	0031      	movs	r1, r6
 801be98:	0038      	movs	r0, r7
 801be9a:	f7ff fc2b 	bl	801b6f4 <_malloc_r>
 801be9e:	1e04      	subs	r4, r0, #0
 801bea0:	d0ec      	beq.n	801be7c <_realloc_r+0x14>
 801bea2:	0029      	movs	r1, r5
 801bea4:	0032      	movs	r2, r6
 801bea6:	f7ff ff76 	bl	801bd96 <memcpy>
 801beaa:	0029      	movs	r1, r5
 801beac:	0038      	movs	r0, r7
 801beae:	f7ff ff91 	bl	801bdd4 <_free_r>
 801beb2:	e7e3      	b.n	801be7c <_realloc_r+0x14>

0801beb4 <_malloc_usable_size_r>:
 801beb4:	1f0b      	subs	r3, r1, #4
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	1f18      	subs	r0, r3, #4
 801beba:	2b00      	cmp	r3, #0
 801bebc:	da01      	bge.n	801bec2 <_malloc_usable_size_r+0xe>
 801bebe:	580b      	ldr	r3, [r1, r0]
 801bec0:	18c0      	adds	r0, r0, r3
 801bec2:	4770      	bx	lr

0801bec4 <ceil>:
 801bec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bec6:	004b      	lsls	r3, r1, #1
 801bec8:	4a39      	ldr	r2, [pc, #228]	; (801bfb0 <ceil+0xec>)
 801beca:	0d5b      	lsrs	r3, r3, #21
 801becc:	b085      	sub	sp, #20
 801bece:	189e      	adds	r6, r3, r2
 801bed0:	000c      	movs	r4, r1
 801bed2:	0005      	movs	r5, r0
 801bed4:	9003      	str	r0, [sp, #12]
 801bed6:	2e13      	cmp	r6, #19
 801bed8:	dc32      	bgt.n	801bf40 <ceil+0x7c>
 801beda:	2e00      	cmp	r6, #0
 801bedc:	da13      	bge.n	801bf06 <ceil+0x42>
 801bede:	4a35      	ldr	r2, [pc, #212]	; (801bfb4 <ceil+0xf0>)
 801bee0:	4b35      	ldr	r3, [pc, #212]	; (801bfb8 <ceil+0xf4>)
 801bee2:	f7e5 f9f9 	bl	80012d8 <__aeabi_dadd>
 801bee6:	2200      	movs	r2, #0
 801bee8:	2300      	movs	r3, #0
 801beea:	f7e4 faad 	bl	8000448 <__aeabi_dcmpgt>
 801beee:	2800      	cmp	r0, #0
 801bef0:	d006      	beq.n	801bf00 <ceil+0x3c>
 801bef2:	2c00      	cmp	r4, #0
 801bef4:	db57      	blt.n	801bfa6 <ceil+0xe2>
 801bef6:	432c      	orrs	r4, r5
 801bef8:	2500      	movs	r5, #0
 801befa:	42ac      	cmp	r4, r5
 801befc:	d000      	beq.n	801bf00 <ceil+0x3c>
 801befe:	4c2f      	ldr	r4, [pc, #188]	; (801bfbc <ceil+0xf8>)
 801bf00:	0028      	movs	r0, r5
 801bf02:	0021      	movs	r1, r4
 801bf04:	e026      	b.n	801bf54 <ceil+0x90>
 801bf06:	4f2e      	ldr	r7, [pc, #184]	; (801bfc0 <ceil+0xfc>)
 801bf08:	4137      	asrs	r7, r6
 801bf0a:	003b      	movs	r3, r7
 801bf0c:	400b      	ands	r3, r1
 801bf0e:	4303      	orrs	r3, r0
 801bf10:	d020      	beq.n	801bf54 <ceil+0x90>
 801bf12:	9000      	str	r0, [sp, #0]
 801bf14:	9101      	str	r1, [sp, #4]
 801bf16:	4a27      	ldr	r2, [pc, #156]	; (801bfb4 <ceil+0xf0>)
 801bf18:	4b27      	ldr	r3, [pc, #156]	; (801bfb8 <ceil+0xf4>)
 801bf1a:	9800      	ldr	r0, [sp, #0]
 801bf1c:	9901      	ldr	r1, [sp, #4]
 801bf1e:	f7e5 f9db 	bl	80012d8 <__aeabi_dadd>
 801bf22:	2200      	movs	r2, #0
 801bf24:	2300      	movs	r3, #0
 801bf26:	f7e4 fa8f 	bl	8000448 <__aeabi_dcmpgt>
 801bf2a:	2800      	cmp	r0, #0
 801bf2c:	d0e8      	beq.n	801bf00 <ceil+0x3c>
 801bf2e:	2c00      	cmp	r4, #0
 801bf30:	dd03      	ble.n	801bf3a <ceil+0x76>
 801bf32:	2380      	movs	r3, #128	; 0x80
 801bf34:	035b      	lsls	r3, r3, #13
 801bf36:	4133      	asrs	r3, r6
 801bf38:	18e4      	adds	r4, r4, r3
 801bf3a:	43bc      	bics	r4, r7
 801bf3c:	2500      	movs	r5, #0
 801bf3e:	e7df      	b.n	801bf00 <ceil+0x3c>
 801bf40:	2e33      	cmp	r6, #51	; 0x33
 801bf42:	dd09      	ble.n	801bf58 <ceil+0x94>
 801bf44:	2380      	movs	r3, #128	; 0x80
 801bf46:	00db      	lsls	r3, r3, #3
 801bf48:	429e      	cmp	r6, r3
 801bf4a:	d103      	bne.n	801bf54 <ceil+0x90>
 801bf4c:	0002      	movs	r2, r0
 801bf4e:	000b      	movs	r3, r1
 801bf50:	f7e5 f9c2 	bl	80012d8 <__aeabi_dadd>
 801bf54:	b005      	add	sp, #20
 801bf56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf58:	2701      	movs	r7, #1
 801bf5a:	4a1a      	ldr	r2, [pc, #104]	; (801bfc4 <ceil+0x100>)
 801bf5c:	427f      	negs	r7, r7
 801bf5e:	189b      	adds	r3, r3, r2
 801bf60:	40df      	lsrs	r7, r3
 801bf62:	4238      	tst	r0, r7
 801bf64:	d0f6      	beq.n	801bf54 <ceil+0x90>
 801bf66:	9000      	str	r0, [sp, #0]
 801bf68:	9101      	str	r1, [sp, #4]
 801bf6a:	4a12      	ldr	r2, [pc, #72]	; (801bfb4 <ceil+0xf0>)
 801bf6c:	4b12      	ldr	r3, [pc, #72]	; (801bfb8 <ceil+0xf4>)
 801bf6e:	9800      	ldr	r0, [sp, #0]
 801bf70:	9901      	ldr	r1, [sp, #4]
 801bf72:	f7e5 f9b1 	bl	80012d8 <__aeabi_dadd>
 801bf76:	2200      	movs	r2, #0
 801bf78:	2300      	movs	r3, #0
 801bf7a:	f7e4 fa65 	bl	8000448 <__aeabi_dcmpgt>
 801bf7e:	2800      	cmp	r0, #0
 801bf80:	d0be      	beq.n	801bf00 <ceil+0x3c>
 801bf82:	2c00      	cmp	r4, #0
 801bf84:	dd02      	ble.n	801bf8c <ceil+0xc8>
 801bf86:	2e14      	cmp	r6, #20
 801bf88:	d102      	bne.n	801bf90 <ceil+0xcc>
 801bf8a:	3401      	adds	r4, #1
 801bf8c:	43bd      	bics	r5, r7
 801bf8e:	e7b7      	b.n	801bf00 <ceil+0x3c>
 801bf90:	2334      	movs	r3, #52	; 0x34
 801bf92:	1b9e      	subs	r6, r3, r6
 801bf94:	3b33      	subs	r3, #51	; 0x33
 801bf96:	40b3      	lsls	r3, r6
 801bf98:	18ed      	adds	r5, r5, r3
 801bf9a:	9b03      	ldr	r3, [sp, #12]
 801bf9c:	429d      	cmp	r5, r3
 801bf9e:	419b      	sbcs	r3, r3
 801bfa0:	425b      	negs	r3, r3
 801bfa2:	18e4      	adds	r4, r4, r3
 801bfa4:	e7f2      	b.n	801bf8c <ceil+0xc8>
 801bfa6:	2480      	movs	r4, #128	; 0x80
 801bfa8:	2500      	movs	r5, #0
 801bfaa:	0624      	lsls	r4, r4, #24
 801bfac:	e7a8      	b.n	801bf00 <ceil+0x3c>
 801bfae:	46c0      	nop			; (mov r8, r8)
 801bfb0:	fffffc01 	.word	0xfffffc01
 801bfb4:	8800759c 	.word	0x8800759c
 801bfb8:	7e37e43c 	.word	0x7e37e43c
 801bfbc:	3ff00000 	.word	0x3ff00000
 801bfc0:	000fffff 	.word	0x000fffff
 801bfc4:	fffffbed 	.word	0xfffffbed

0801bfc8 <floor>:
 801bfc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfca:	004b      	lsls	r3, r1, #1
 801bfcc:	4a39      	ldr	r2, [pc, #228]	; (801c0b4 <floor+0xec>)
 801bfce:	0d5b      	lsrs	r3, r3, #21
 801bfd0:	b085      	sub	sp, #20
 801bfd2:	189e      	adds	r6, r3, r2
 801bfd4:	000c      	movs	r4, r1
 801bfd6:	0005      	movs	r5, r0
 801bfd8:	9003      	str	r0, [sp, #12]
 801bfda:	2e13      	cmp	r6, #19
 801bfdc:	dc34      	bgt.n	801c048 <floor+0x80>
 801bfde:	2e00      	cmp	r6, #0
 801bfe0:	da15      	bge.n	801c00e <floor+0x46>
 801bfe2:	4a35      	ldr	r2, [pc, #212]	; (801c0b8 <floor+0xf0>)
 801bfe4:	4b35      	ldr	r3, [pc, #212]	; (801c0bc <floor+0xf4>)
 801bfe6:	f7e5 f977 	bl	80012d8 <__aeabi_dadd>
 801bfea:	2200      	movs	r2, #0
 801bfec:	2300      	movs	r3, #0
 801bfee:	f7e4 fa2b 	bl	8000448 <__aeabi_dcmpgt>
 801bff2:	2800      	cmp	r0, #0
 801bff4:	d008      	beq.n	801c008 <floor+0x40>
 801bff6:	2c00      	cmp	r4, #0
 801bff8:	da59      	bge.n	801c0ae <floor+0xe6>
 801bffa:	0063      	lsls	r3, r4, #1
 801bffc:	085b      	lsrs	r3, r3, #1
 801bffe:	432b      	orrs	r3, r5
 801c000:	2500      	movs	r5, #0
 801c002:	42ab      	cmp	r3, r5
 801c004:	d000      	beq.n	801c008 <floor+0x40>
 801c006:	4c2e      	ldr	r4, [pc, #184]	; (801c0c0 <floor+0xf8>)
 801c008:	0028      	movs	r0, r5
 801c00a:	0021      	movs	r1, r4
 801c00c:	e026      	b.n	801c05c <floor+0x94>
 801c00e:	4f2d      	ldr	r7, [pc, #180]	; (801c0c4 <floor+0xfc>)
 801c010:	4137      	asrs	r7, r6
 801c012:	003b      	movs	r3, r7
 801c014:	400b      	ands	r3, r1
 801c016:	4303      	orrs	r3, r0
 801c018:	d020      	beq.n	801c05c <floor+0x94>
 801c01a:	9000      	str	r0, [sp, #0]
 801c01c:	9101      	str	r1, [sp, #4]
 801c01e:	4a26      	ldr	r2, [pc, #152]	; (801c0b8 <floor+0xf0>)
 801c020:	4b26      	ldr	r3, [pc, #152]	; (801c0bc <floor+0xf4>)
 801c022:	9800      	ldr	r0, [sp, #0]
 801c024:	9901      	ldr	r1, [sp, #4]
 801c026:	f7e5 f957 	bl	80012d8 <__aeabi_dadd>
 801c02a:	2200      	movs	r2, #0
 801c02c:	2300      	movs	r3, #0
 801c02e:	f7e4 fa0b 	bl	8000448 <__aeabi_dcmpgt>
 801c032:	2800      	cmp	r0, #0
 801c034:	d0e8      	beq.n	801c008 <floor+0x40>
 801c036:	2c00      	cmp	r4, #0
 801c038:	da03      	bge.n	801c042 <floor+0x7a>
 801c03a:	2380      	movs	r3, #128	; 0x80
 801c03c:	035b      	lsls	r3, r3, #13
 801c03e:	4133      	asrs	r3, r6
 801c040:	18e4      	adds	r4, r4, r3
 801c042:	43bc      	bics	r4, r7
 801c044:	2500      	movs	r5, #0
 801c046:	e7df      	b.n	801c008 <floor+0x40>
 801c048:	2e33      	cmp	r6, #51	; 0x33
 801c04a:	dd09      	ble.n	801c060 <floor+0x98>
 801c04c:	2380      	movs	r3, #128	; 0x80
 801c04e:	00db      	lsls	r3, r3, #3
 801c050:	429e      	cmp	r6, r3
 801c052:	d103      	bne.n	801c05c <floor+0x94>
 801c054:	0002      	movs	r2, r0
 801c056:	000b      	movs	r3, r1
 801c058:	f7e5 f93e 	bl	80012d8 <__aeabi_dadd>
 801c05c:	b005      	add	sp, #20
 801c05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c060:	2701      	movs	r7, #1
 801c062:	4a19      	ldr	r2, [pc, #100]	; (801c0c8 <floor+0x100>)
 801c064:	427f      	negs	r7, r7
 801c066:	189b      	adds	r3, r3, r2
 801c068:	40df      	lsrs	r7, r3
 801c06a:	4238      	tst	r0, r7
 801c06c:	d0f6      	beq.n	801c05c <floor+0x94>
 801c06e:	9000      	str	r0, [sp, #0]
 801c070:	9101      	str	r1, [sp, #4]
 801c072:	4a11      	ldr	r2, [pc, #68]	; (801c0b8 <floor+0xf0>)
 801c074:	4b11      	ldr	r3, [pc, #68]	; (801c0bc <floor+0xf4>)
 801c076:	9800      	ldr	r0, [sp, #0]
 801c078:	9901      	ldr	r1, [sp, #4]
 801c07a:	f7e5 f92d 	bl	80012d8 <__aeabi_dadd>
 801c07e:	2200      	movs	r2, #0
 801c080:	2300      	movs	r3, #0
 801c082:	f7e4 f9e1 	bl	8000448 <__aeabi_dcmpgt>
 801c086:	2800      	cmp	r0, #0
 801c088:	d0be      	beq.n	801c008 <floor+0x40>
 801c08a:	2c00      	cmp	r4, #0
 801c08c:	da02      	bge.n	801c094 <floor+0xcc>
 801c08e:	2e14      	cmp	r6, #20
 801c090:	d102      	bne.n	801c098 <floor+0xd0>
 801c092:	3401      	adds	r4, #1
 801c094:	43bd      	bics	r5, r7
 801c096:	e7b7      	b.n	801c008 <floor+0x40>
 801c098:	2334      	movs	r3, #52	; 0x34
 801c09a:	1b9e      	subs	r6, r3, r6
 801c09c:	3b33      	subs	r3, #51	; 0x33
 801c09e:	40b3      	lsls	r3, r6
 801c0a0:	18ed      	adds	r5, r5, r3
 801c0a2:	9b03      	ldr	r3, [sp, #12]
 801c0a4:	429d      	cmp	r5, r3
 801c0a6:	419b      	sbcs	r3, r3
 801c0a8:	425b      	negs	r3, r3
 801c0aa:	18e4      	adds	r4, r4, r3
 801c0ac:	e7f2      	b.n	801c094 <floor+0xcc>
 801c0ae:	2500      	movs	r5, #0
 801c0b0:	002c      	movs	r4, r5
 801c0b2:	e7a9      	b.n	801c008 <floor+0x40>
 801c0b4:	fffffc01 	.word	0xfffffc01
 801c0b8:	8800759c 	.word	0x8800759c
 801c0bc:	7e37e43c 	.word	0x7e37e43c
 801c0c0:	bff00000 	.word	0xbff00000
 801c0c4:	000fffff 	.word	0x000fffff
 801c0c8:	fffffbed 	.word	0xfffffbed

0801c0cc <round>:
 801c0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0ce:	004a      	lsls	r2, r1, #1
 801c0d0:	0007      	movs	r7, r0
 801c0d2:	481f      	ldr	r0, [pc, #124]	; (801c150 <round+0x84>)
 801c0d4:	0d52      	lsrs	r2, r2, #21
 801c0d6:	1815      	adds	r5, r2, r0
 801c0d8:	000e      	movs	r6, r1
 801c0da:	2d13      	cmp	r5, #19
 801c0dc:	dc18      	bgt.n	801c110 <round+0x44>
 801c0de:	2d00      	cmp	r5, #0
 801c0e0:	da09      	bge.n	801c0f6 <round+0x2a>
 801c0e2:	0fcb      	lsrs	r3, r1, #31
 801c0e4:	07db      	lsls	r3, r3, #31
 801c0e6:	2200      	movs	r2, #0
 801c0e8:	1c69      	adds	r1, r5, #1
 801c0ea:	d101      	bne.n	801c0f0 <round+0x24>
 801c0ec:	4919      	ldr	r1, [pc, #100]	; (801c154 <round+0x88>)
 801c0ee:	430b      	orrs	r3, r1
 801c0f0:	0019      	movs	r1, r3
 801c0f2:	0010      	movs	r0, r2
 801c0f4:	e017      	b.n	801c126 <round+0x5a>
 801c0f6:	4a18      	ldr	r2, [pc, #96]	; (801c158 <round+0x8c>)
 801c0f8:	412a      	asrs	r2, r5
 801c0fa:	420a      	tst	r2, r1
 801c0fc:	d101      	bne.n	801c102 <round+0x36>
 801c0fe:	2f00      	cmp	r7, #0
 801c100:	d012      	beq.n	801c128 <round+0x5c>
 801c102:	2380      	movs	r3, #128	; 0x80
 801c104:	031b      	lsls	r3, r3, #12
 801c106:	412b      	asrs	r3, r5
 801c108:	199b      	adds	r3, r3, r6
 801c10a:	4393      	bics	r3, r2
 801c10c:	2200      	movs	r2, #0
 801c10e:	e7ef      	b.n	801c0f0 <round+0x24>
 801c110:	2d33      	cmp	r5, #51	; 0x33
 801c112:	dd0b      	ble.n	801c12c <round+0x60>
 801c114:	2380      	movs	r3, #128	; 0x80
 801c116:	00db      	lsls	r3, r3, #3
 801c118:	429d      	cmp	r5, r3
 801c11a:	d105      	bne.n	801c128 <round+0x5c>
 801c11c:	003a      	movs	r2, r7
 801c11e:	000b      	movs	r3, r1
 801c120:	0038      	movs	r0, r7
 801c122:	f7e5 f8d9 	bl	80012d8 <__aeabi_dadd>
 801c126:	0007      	movs	r7, r0
 801c128:	0038      	movs	r0, r7
 801c12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c12c:	2601      	movs	r6, #1
 801c12e:	480b      	ldr	r0, [pc, #44]	; (801c15c <round+0x90>)
 801c130:	4276      	negs	r6, r6
 801c132:	1812      	adds	r2, r2, r0
 801c134:	40d6      	lsrs	r6, r2
 801c136:	423e      	tst	r6, r7
 801c138:	d0f6      	beq.n	801c128 <round+0x5c>
 801c13a:	2233      	movs	r2, #51	; 0x33
 801c13c:	1b55      	subs	r5, r2, r5
 801c13e:	3a32      	subs	r2, #50	; 0x32
 801c140:	40aa      	lsls	r2, r5
 801c142:	19d2      	adds	r2, r2, r7
 801c144:	42ba      	cmp	r2, r7
 801c146:	41a4      	sbcs	r4, r4
 801c148:	4264      	negs	r4, r4
 801c14a:	190b      	adds	r3, r1, r4
 801c14c:	43b2      	bics	r2, r6
 801c14e:	e7cf      	b.n	801c0f0 <round+0x24>
 801c150:	fffffc01 	.word	0xfffffc01
 801c154:	3ff00000 	.word	0x3ff00000
 801c158:	000fffff 	.word	0x000fffff
 801c15c:	fffffbed 	.word	0xfffffbed

0801c160 <_init>:
 801c160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c162:	46c0      	nop			; (mov r8, r8)
 801c164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c166:	bc08      	pop	{r3}
 801c168:	469e      	mov	lr, r3
 801c16a:	4770      	bx	lr

0801c16c <_fini>:
 801c16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c16e:	46c0      	nop			; (mov r8, r8)
 801c170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c172:	bc08      	pop	{r3}
 801c174:	469e      	mov	lr, r3
 801c176:	4770      	bx	lr
